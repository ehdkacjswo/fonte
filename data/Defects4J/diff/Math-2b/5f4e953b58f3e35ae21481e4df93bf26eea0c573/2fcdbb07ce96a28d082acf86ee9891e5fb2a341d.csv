is_addition,old_file_path,new_file_path,line_num,content
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,4,* this work for additional information regarding copyright ownership.
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,7,* the License.  You may obtain a copy of the License at
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,14,* See the License for the specific language governing permissions and
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,15,* limitations under the License.
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,18,package org.apache.commons.math.linear;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,20,import java.io.Serializable;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,22,import org.apache.commons.math.MathRuntimeException;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,25,* Cache-friendly implementation of RealMatrix using recursive array layouts to store
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,26,* the matrix elements.
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,27,* <p>
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,28,"* As of 2009-02-13, this implementation does not work! The padding at left and bottom"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,29,* sides of the matrix should be cleared after some operations like scalerAdd
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,30,* and is not. Also there is a limitation in the multiplication that can only
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,31,* process matrices with sizes similar enough to have the same power of two
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,32,"* number of tiles in all three matrices A, B and C such that C = A*B. These"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,33,* parts have not been fixed since the performance gain with respect to
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,34,"* DenseRealMatrix are not very important, and the numerical stability is not"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,35,* good. This may well be due to a bad implementation. This code has been put
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,36,"* in the experimental part for the record, putting it into production would"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,37,* require solving all these issues.
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,38,* </p>
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,39,* <p>
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,40,* This implementation is based on the 2002 paper: <a
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,41,"* href=""http://www.cs.duke.edu/~alvy/papers/matrix-tpds.pdf"">Recursive Array Layouts"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,42,"* and Fast Matrix Multiplication</a> by Siddhartha Chatterjee, Alvin R. Lebeck,"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,43,* Praveen K. Patnala and Mithuna Thottethodi.
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,44,* </p>
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,45,* <p>
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,46,* The matrix is split into several rectangular tiles. The tiles are laid out using
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,47,* a space-filling curve in a 2<sup>k</sup>&times;2<sup>k</sup> square. This
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,48,* implementation uses the Gray-Morton layout which starts as follows for a three-level
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,49,* recursion (i.e. an 8x8 matrix). The tiles size are adjusted in order to have the
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,50,* 2<sup>k</sup>&times;2<sup>k</sup> square. This may require padding at the right and
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,51,* bottom sides of the matrix (see above paper for a discussion of this padding feature).
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,52,* </p>
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,53,* <pre>
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,55,*    00 01 | 06 07   |   24  25 | 30  31
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,56,*    03 02 | 05 04   |   27  26 | 29  28
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,58,*    12 13 | 10 11   |   20  21 | 18  19
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,59,*    15 14 | 09 08   |   23  22 | 17  16
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,63,*    48 49 | 54 55   |   40  41 | 46  47
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,64,*    51 50 | 53 52   |   43  42 | 45  44
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,66,*    60 61 | 58 59   |   36  37 | 34  35
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,67,*    63 62 | 57 56   |   39  38 | 33  32
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,69,* </pre>
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,70,* @version $Revision$ $Date$
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,71,* @since 2.0
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,73,public class RecursiveLayoutRealMatrix extends AbstractRealMatrix implements Serializable {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,75,/** Serializable version identifier */
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,76,private static final long serialVersionUID = 1607919006739190004L;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,78,/** Maximal allowed tile size in bytes.
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,79,"* <p>In order to avoid cache miss during multiplication,"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,80,* a suggested value is cache_size/3.</p>
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,82,private static final int MAX_TILE_SIZE_BYTES = (64 * 1024) / 3;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,83,//private static final int MAX_TILE_SIZE_BYTES = 32;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,85,/** Storage array for matrix elements. */
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,86,private final double data[];
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,88,/** Number of rows of the matrix. */
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,89,private final int rows;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,91,/** Number of columns of the matrix. */
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,92,private final int columns;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,94,/** Number of terminal tiles along rows and columns (guaranteed to be a power of 2). */
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,95,private final int tileNumber;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,97,/** Number of rows in each terminal tile. */
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,98,private final int tileSizeRows;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,100,/** Number of columns in each terminal tile. */
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,101,private final int tileSizeColumns;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,104,* Create a new matrix with the supplied row and column dimensions.
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,106,* @param rows  the number of rows in the new matrix
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,107,* @param columns  the number of columns in the new matrix
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,108,* @throws IllegalArgumentException if row or column dimension is not
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,109,*  positive
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,111,"public RecursiveLayoutRealMatrix(final int rows, final int columns)"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,112,throws IllegalArgumentException {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,114,"super(rows, columns);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,115,this.rows    = rows;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,116,this.columns = columns;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,118,// compute optimal layout
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,119,"tileNumber      = tilesNumber(rows, columns);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,120,"tileSizeRows    = tileSize(rows, tileNumber);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,121,"tileSizeColumns = tileSize(columns, tileNumber);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,123,// create storage array
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,124,data = new double[tileNumber * tileNumber * tileSizeRows * tileSizeColumns];
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,129,* Create a new dense matrix copying entries from raw layout data.
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,130,* <p>The input array <em>must</em> be in raw layout.</p>
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,131,* <p>Calling this constructor is equivalent to call:
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,132,"* <pre>matrix = new RecursiveLayoutRealMatrix(rawData.length, rawData[0].length,"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,133,"*                                             toRecursiveLayout(rawData), false);</pre>"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,134,* </p>
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,135,"* @param rawData data for new matrix, in raw layout"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,137,* @exception IllegalArgumentException if <code>rawData</code> shape is
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,138,* inconsistent with tile layout
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,139,"* @see #DenseRealMatrix(int, int, double[][], boolean)"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,141,public RecursiveLayoutRealMatrix(final double[][] rawData)
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,142,throws IllegalArgumentException {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,143,"this(rawData.length, rawData[0].length, toRecursiveLayout(rawData), false);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,147,* Create a new dense matrix copying entries from recursive layout data.
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,148,* <p>The input array <em>must</em> already be in recursive layout.</p>
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,149,* @param rows  the number of rows in the new matrix
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,150,* @param columns  the number of columns in the new matrix
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,151,"* @param data data for new matrix, in recursive layout"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,152,"* @param copyArray if true, the input array will be copied, otherwise"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,153,* it will be referenced
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,155,* @exception IllegalArgumentException if <code>data</code> size is
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,156,* inconsistent with matrix size
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,157,* @see #toRecursiveLayout(double[][])
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,158,* @see #RecursiveLayoutRealMatrix(double[][])
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,160,"public RecursiveLayoutRealMatrix(final int rows, final int columns,"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,161,"final double[] data, final boolean copyArray)"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,162,throws IllegalArgumentException {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,164,"super(rows, columns);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,165,this.rows    = rows;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,166,this.columns = columns;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,168,// compute optimal layout
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,169,"tileNumber      = tilesNumber(rows, columns);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,170,"tileSizeRows    = tileSize(rows, tileNumber);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,171,"tileSizeColumns = tileSize(columns, tileNumber);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,173,// create storage array
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,174,final int expectedLength = tileNumber * tileNumber * tileSizeRows * tileSizeColumns;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,175,if (data.length != expectedLength) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,176,"throw MathRuntimeException.createIllegalArgumentException(""wrong array size (got {0}, expected {1})"","
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,177,new Object[] {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,178,"data.length,"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,179,expectedLength
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,183,if (copyArray) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,184,// allocate storage array
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,185,this.data = data.clone();
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,186,} else {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,187,// reference existing array
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,188,this.data = data;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,194,* Convert a data array from raw layout to recursive layout.
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,195,* <p>
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,196,* Raw layout is the straightforward layout where element at row i and
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,197,* column j is in array element <code>rawData[i][j]</code>. Recursive layout
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,198,"* is the layout used in {@link RecursiveLayoutRealMatrix} instances, where the matrix"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,199,* is stored in a dimension 1 array using a space-filling curve to spread the matrix
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,200,* elements along the array.
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,201,* </p>
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,202,* @param rawData data array in raw layout
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,203,* @return a new data array containing the same entries but in recursive layout
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,204,* @exception IllegalArgumentException if <code>rawData</code> is not rectangular
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,205,*  (not all rows have the same length)
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,206,"* @see #RecursiveLayoutRealMatrix(int, int, double[], boolean)"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,208,public static double[] toRecursiveLayout(final double[][] rawData)
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,209,throws IllegalArgumentException {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,211,final int rows    = rawData.length;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,212,final int columns = rawData[0].length;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,214,// compute optimal layout
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,215,"final int tileNumber      = tilesNumber(rows, columns);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,216,"final int tileSizeRows    = tileSize(rows, tileNumber);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,217,"final int tileSizeColumns = tileSize(columns, tileNumber);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,219,// safety checks
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,220,for (int i = 0; i < rawData.length; ++i) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,221,final int length = rawData[i].length;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,222,if (length != columns) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,223,throw MathRuntimeException.createIllegalArgumentException(
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,224,"""some rows have length {0} while others have length {1}"","
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,225,"new Object[] { columns, length });"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,229,// convert array row after row
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,230,final double[] data = new double[tileNumber * tileNumber * tileSizeRows * tileSizeColumns];
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,231,for (int i = 0; i < rawData.length; ++i) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,232,final int iTile = i / tileSizeRows;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,233,final double[] rawDataI = rawData[i];
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,234,for (int jTile = 0; jTile < tileNumber; ++jTile) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,235,"final int tileStart = tileIndex(iTile, jTile) * tileSizeRows * tileSizeColumns;"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,236,final int dataStart = tileStart + (i - iTile * tileSizeRows) * tileSizeColumns;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,237,final int jStart    = jTile * tileSizeColumns;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,238,if (jStart < columns) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,239,"final int jEnd      = Math.min(jStart + tileSizeColumns, columns);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,240,"System.arraycopy(rawDataI, jStart, data, dataStart, jEnd - jStart);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,245,return data;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,249,/** {@inheritDoc} */
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,250,"public RealMatrix createMatrix(final int rowDimension, final int columnDimension)"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,251,throws IllegalArgumentException {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,252,"return new RecursiveLayoutRealMatrix(rowDimension, columnDimension);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,255,/** {@inheritDoc} */
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,256,public RealMatrix copy() {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,257,"return new RecursiveLayoutRealMatrix(rows, columns, data, true);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,260,/** {@inheritDoc} */
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,261,public RealMatrix add(final RealMatrix m)
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,262,throws IllegalArgumentException {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,263,try {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,264,return add((RecursiveLayoutRealMatrix) m);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,265,} catch (ClassCastException cce) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,267,// safety check
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,268,checkAdditionCompatible(m);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,270,"final RecursiveLayoutRealMatrix out = new RecursiveLayoutRealMatrix(rows, columns);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,272,"// perform addition tile-wise, to ensure good cache behavior"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,273,for (int index = 0; index < tileNumber * tileNumber; ++index) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,275,// perform addition on the current tile
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,276,final int tileStart = index * tileSizeRows * tileSizeColumns;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,277,final long indices  = tilesIndices(index);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,278,final int iTile     = (int) (indices >> 32);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,279,final int jTile     = (int) (indices & 0xffffffff);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,280,final int pStart    = iTile * tileSizeRows;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,281,"final int pEnd      = Math.min(pStart + tileSizeRows, rows);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,282,final int qStart    = jTile * tileSizeColumns;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,283,"final int qEnd      = Math.min(qStart + tileSizeColumns, columns);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,284,for (int p = pStart; p < pEnd; ++p) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,285,final int kStart = tileStart + (p - pStart) * tileSizeColumns;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,286,"for (int q = qStart, k = kStart; q < qEnd; ++q, ++k) {"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,287,"out.data[k] = data[k] + m.getEntry(p, q);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,293,return out;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,299,* Compute the sum of this and <code>m</code>.
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,301,* @param m    matrix to be added
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,302,* @return     this + m
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,303,* @throws  IllegalArgumentException if m is not the same size as this
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,305,public RecursiveLayoutRealMatrix add(final RecursiveLayoutRealMatrix m)
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,306,throws IllegalArgumentException {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,308,// safety check
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,309,checkAdditionCompatible(m);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,311,"final RecursiveLayoutRealMatrix out = new RecursiveLayoutRealMatrix(rows, columns);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,313,// streamlined addition
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,314,for (int i = 0; i < data.length; ++i) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,315,out.data[i] = data[i] + m.data[i];
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,318,return out;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,322,/** {@inheritDoc} */
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,323,public RealMatrix subtract(final RealMatrix m)
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,324,throws IllegalArgumentException {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,325,try {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,326,return subtract((RecursiveLayoutRealMatrix) m);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,327,} catch (ClassCastException cce) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,329,// safety check
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,330,checkSubtractionCompatible(m);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,332,"final RecursiveLayoutRealMatrix out = new RecursiveLayoutRealMatrix(rows, columns);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,334,"// perform subtraction tile-wise, to ensure good cache behavior"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,335,for (int index = 0; index < tileNumber * tileNumber; ++index) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,337,// perform addition on the current tile
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,338,final int tileStart = index * tileSizeRows * tileSizeColumns;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,339,final long indices  = tilesIndices(index);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,340,final int iTile     = (int) (indices >> 32);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,341,final int jTile     = (int) (indices & 0xffffffff);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,342,final int pStart    = iTile * tileSizeRows;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,343,"final int pEnd      = Math.min(pStart + tileSizeRows, rows);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,344,final int qStart    = jTile * tileSizeColumns;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,345,"final int qEnd      = Math.min(qStart + tileSizeColumns, columns);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,346,for (int p = pStart; p < pEnd; ++p) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,347,final int kStart = tileStart + (p - pStart) * tileSizeColumns;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,348,"for (int q = qStart, k = kStart; q < qEnd; ++q, ++k) {"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,349,"out.data[k] = data[k] - m.getEntry(p, q);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,355,return out;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,361,* Compute this minus <code>m</code>.
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,363,* @param m    matrix to be subtracted
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,364,* @return     this - m
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,365,* @throws  IllegalArgumentException if m is not the same size as this
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,367,public RecursiveLayoutRealMatrix subtract(final RecursiveLayoutRealMatrix m)
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,368,throws IllegalArgumentException {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,370,// safety check
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,371,checkSubtractionCompatible(m);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,373,"final RecursiveLayoutRealMatrix out = new RecursiveLayoutRealMatrix(rows, columns);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,375,// streamlined subtraction
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,376,for (int i = 0; i < data.length; ++i) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,377,out.data[i] = data[i] - m.data[i];
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,380,return out;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,384,/** {@inheritDoc} */
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,385,public RealMatrix scalarAdd(final double d)
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,386,throws IllegalArgumentException {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,388,"final RecursiveLayoutRealMatrix out = new RecursiveLayoutRealMatrix(rows, columns);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,390,// streamlined addition
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,391,for (int i = 0; i < data.length; ++i) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,392,out.data[i] = data[i] + d;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,395,return out;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,399,/** {@inheritDoc} */
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,400,public RealMatrix scalarMultiply(final double d)
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,401,throws IllegalArgumentException {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,403,"final RecursiveLayoutRealMatrix out = new RecursiveLayoutRealMatrix(rows, columns);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,405,// streamlined multiplication
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,406,for (int i = 0; i < data.length; ++i) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,407,out.data[i] = data[i] * d;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,410,return out;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,414,/** {@inheritDoc} */
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,415,public RealMatrix multiply(final RealMatrix m)
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,416,throws IllegalArgumentException {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,417,try {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,418,return multiply((RecursiveLayoutRealMatrix) m);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,419,} catch (ClassCastException cce) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,421,// safety check
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,422,checkMultiplicationCompatible(m);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,424,"final RecursiveLayoutRealMatrix out = new RecursiveLayoutRealMatrix(rows, m.getColumnDimension());"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,426,"// perform multiplication tile-wise, to ensure good cache behavior"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,427,for (int index = 0; index < out.tileNumber * out.tileNumber; ++index) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,428,final int tileStart = index * out.tileSizeRows * out.tileSizeColumns;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,429,final long indices  = tilesIndices(index);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,430,final int iTile     = (int) (indices >> 32);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,431,final int jTile     = (int) (indices & 0xffffffff);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,432,final int iStart    = iTile * out.tileSizeRows;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,433,"final int iEnd      = Math.min(iStart + out.tileSizeRows, out.rows);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,434,final int jStart    = jTile * out.tileSizeColumns;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,435,"final int jEnd      = Math.min(jStart + out.tileSizeColumns, out.columns);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,437,// perform multiplication for current tile
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,438,for (int kTile = 0; kTile < tileNumber; ++kTile) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,439,"final int kTileStart = tileIndex(iTile, kTile) * tileSizeRows * tileSizeColumns;"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,440,"for (int i = iStart, lStart = kTileStart, oStart = tileStart;"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,441,i < iEnd;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,442,"++i, lStart += tileSizeColumns, oStart += out.tileSizeColumns) {"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,443,"final int lEnd = Math.min(lStart + tileSizeColumns, columns);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,444,"for (int j = jStart, o = oStart; j < jEnd; ++j, ++o) {"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,445,double sum = 0;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,446,"for (int l = lStart, k = kTile * tileSizeColumns; l < lEnd; ++l, ++k) {"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,447,"sum += data[l] * m.getEntry(k, j);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,449,out.data[o] += sum;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,455,return out;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,461,* Returns the result of postmultiplying this by m.
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,462,* <p>The Strassen matrix multiplication method is used here. This
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,463,* method computes C = A &times; B recursively by splitting all matrices
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,464,* in four quadrants and computing:</p>
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,465,* <pre>
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,466,"* P<sub>1</sub> = (A<sub>1,1</sub> + A<sub>2,2</sub>) &times; (B<sub>1,1</sub> + B<sub>2,2</sub>)"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,467,"* P<sub>2</sub> = (A<sub>2,1</sub> + A<sub>2,2</sub>) &times; (B<sub>1,1</sub>)"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,468,"* P<sub>3</sub> = (A<sub>1,1</sub>) &times; (B<sub>1,2</sub> - B<sub>2,2</sub>)"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,469,"* P<sub>4</sub> = (A<sub>2,2</sub>) &times; (B<sub>2,1</sub> - B<sub>1,1</sub>)"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,470,"* P<sub>5</sub> = (A<sub>1,1</sub> + A<sub>1,2</sub>) &times; B<sub>2,2</sub>"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,471,"* P<sub>6</sub> = (A<sub>2,1</sub> - A<sub>1,1</sub>) &times; (B<sub>1,1</sub> + B<sub>1,2</sub>)"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,472,"* P<sub>7</sub> = (A<sub>1,2</sub> - A<sub>2,2</sub>) &times; (B<sub>2,1</sub> + B<sub>2,2</sub>)"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,474,"* C<sub>1,1</sub> = P<sub>1</sub> + P<sub>4</sub> - P<sub>5</sub> + P<sub>7</sub>"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,475,"* C<sub>1,2</sub> = P<sub>3</sub> + P<sub>5</sub>"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,476,"* C<sub>2,1</sub> = P<sub>2</sub> + P<sub>4</sub>"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,477,"* C<sub>2,2</sub> = P<sub>1</sub> + P<sub>3</sub> - P<sub>2</sub> + P<sub>6</sub>"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,478,* </pre>
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,479,* <p>
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,480,* This implementation is based on the 2002 paper: <a
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,481,"* href=""http://www.cs.duke.edu/~alvy/papers/matrix-tpds.pdf"">Recursive Array Layouts"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,482,"* and Fast Matrix Multiplication</a> by Siddhartha Chatterjee, Alvin R. Lebeck,"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,483,* Praveen K. Patnala and Mithuna Thottethodi.
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,484,* </p>
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,486,* @param m    matrix to postmultiply by
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,487,* @return     this * m
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,488,* @throws     IllegalArgumentException
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,489,*             if columnDimension(this) != rowDimension(m)
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,491,public RecursiveLayoutRealMatrix multiply(RecursiveLayoutRealMatrix m)
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,492,throws IllegalArgumentException {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,494,// safety check
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,495,checkMultiplicationCompatible(m);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,497,"final RecursiveLayoutRealMatrix out = new RecursiveLayoutRealMatrix(rows, m.columns);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,498,if ((tileNumber != m.tileNumber) || (tileNumber != out.tileNumber)) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,499,// TODO get rid of this test
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,500,"throw new RuntimeException(""multiplication "" + rows + ""x"" + columns + "" * "" +"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,501,"m.rows + ""x"" + m.columns + "" -> left matrix: "" + tileNumber +"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,502,""" tiles, right matrix: "" + m.tileNumber + "" tiles, result matrix "" +"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,503,"out.tileNumber + "" tiles"");"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,505,"strassenMultiply(data, 0, true, m.data, 0, true, out.data, 0, tileNumber,"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,506,"tileSizeRows, m.tileSizeColumns, tileSizeColumns);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,508,return out;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,513,* Perform recursive multiplication using Strassen's algorithm.
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,514,* @param a left term of multiplication
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,515,* @param aStart start index in a
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,516,* @param aDirect direct/reversed orientation flag for a
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,517,* @param b right term of multiplication
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,518,* @param bStart start index in b
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,519,* @param bDirect direct/reversed orientation flag for b
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,520,* @param result result array (will have same orientation as b)
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,521,* @param resultStart start index in result
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,522,* @param nTiles number of elements to add
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,523,* @param bsRows number of rows in result tiles
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,524,* @param bsColumns number of columns in result tiles
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,525,* @param bsMultiplicands number of rows/columns in multiplicands
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,527,"private static void strassenMultiply(final double[] a, final int aStart, final boolean aDirect,"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,528,"final double[] b, final int bStart, final boolean bDirect,"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,529,"final double[] result, final int resultStart, final int nTiles,"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,530,"final int bsRows, final int bsColumns, final int bsMultiplicands) {"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,531,if (nTiles == 1) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,532,// leaf recursion tile: perform traditional multiplication
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,533,final int bsColumns2 = 2 * bsColumns;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,534,final int bsColumns3 = 3 * bsColumns;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,535,final int bsColumns4 = 4 * bsColumns;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,536,for (int i = 0; i < bsRows; ++i) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,537,for (int j = 0; j < bsColumns; ++j) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,538,double sum = 0;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,539,int k  = 0;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,540,int aK = aStart + i * bsMultiplicands;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,541,int bK = bStart + j;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,542,while (k < bsMultiplicands - 3) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,543,sum += a[aK]     * b[bK] +
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,544,a[aK + 1] * b[bK + bsColumns] +
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,545,a[aK + 2] * b[bK + bsColumns2] +
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,546,a[aK + 3] * b[bK + bsColumns3];
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,547,k  += 4;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,548,aK += 4;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,549,bK += bsColumns4;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,551,while (k < bsMultiplicands) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,552,sum += a[aK] * b[bK];
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,553,k  += 1;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,554,aK += 1;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,555,bK += bsColumns;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,557,result[resultStart + i * bsColumns + j] = sum;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,560,} else {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,561,// regular recursion node: use recursive Strassen implementation
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,562,final int n2            = nTiles / 2;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,563,final int aQuadrantSize = bsRows          * n2 * bsMultiplicands * n2;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,564,final int bQuadrantSize = bsMultiplicands * n2 * bsColumns       * n2;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,565,final int cQuadrantSize = bsRows          * n2 * bsColumns       * n2;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,566,final double[] sA = new double[aQuadrantSize];
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,567,final double[] sB = new double[bQuadrantSize];
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,568,final boolean nonLeafQuadrants = n2 > 1;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,570,// identify A quadrants start indices
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,571,"final int a11Start, a12Start, a21Start, a22Start;"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,572,if (aDirect) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,573,a11Start = aStart;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,574,a12Start = aStart +     aQuadrantSize;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,575,a21Start = aStart + 3 * aQuadrantSize;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,576,a22Start = aStart + 2 * aQuadrantSize;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,577,} else {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,578,a11Start = aStart + 2 * aQuadrantSize;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,579,a12Start = aStart + 3 * aQuadrantSize;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,580,a21Start = aStart +     aQuadrantSize;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,581,a22Start = aStart;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,584,// identify B and C quadrants start indices
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,585,// (C is constructed with the same orientation as B)
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,586,"final int b11Start, b12Start, b21Start, b22Start;"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,587,"final int c11Start, c12Start, c21Start, c22Start;"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,588,if (bDirect) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,589,b11Start = bStart;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,590,b12Start = bStart +     bQuadrantSize;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,591,b21Start = bStart + 3 * bQuadrantSize;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,592,b22Start = bStart + 2 * bQuadrantSize;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,593,c11Start = resultStart;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,594,c12Start = resultStart +     cQuadrantSize;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,595,c21Start = resultStart + 3 * cQuadrantSize;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,596,c22Start = resultStart + 2 * cQuadrantSize;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,597,} else {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,598,b11Start = bStart + 2 * bQuadrantSize;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,599,b12Start = bStart + 3 * bQuadrantSize;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,600,b21Start = bStart +     bQuadrantSize;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,601,b22Start = bStart;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,602,c11Start = resultStart + 2 * cQuadrantSize;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,603,c12Start = resultStart + 3 * cQuadrantSize;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,604,c21Start = resultStart +     cQuadrantSize;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,605,c22Start = resultStart;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,608,"// optimal order for cache efficiency: P3, P6, P2, P1, P5, P7, P4"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,610,// P3  = (A11)(B12 - B22)
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,611,// C12 = P3 + ...
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,612,"tilesSubtract(b, b12Start, false, b, b22Start, false, sB, 0,"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,613,"bQuadrantSize, nonLeafQuadrants);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,614,"strassenMultiply(a, a11Start, true, sB, 0, false, result, c12Start,"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,615,"n2, bsRows, bsColumns, bsMultiplicands);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,617,// P6  = (A21 - A11)(B11 + B12)
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,618,// C22 = P3 + P6 + ...
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,619,final double[] p67 = new double[cQuadrantSize];
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,620,"tilesSubtract(a, a21Start, true, a, a11Start, true, sA, 0,"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,621,"aQuadrantSize, nonLeafQuadrants);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,622,"tilesAdd(b, b11Start, true, b, b12Start, false, sB, 0,"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,623,"bQuadrantSize, nonLeafQuadrants);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,624,"strassenMultiply(sA, 0, true, sB, 0, true, p67, 0,"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,625,"n2, bsRows, bsColumns, bsMultiplicands);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,626,"tilesAdd(result, c12Start, false, p67, 0, true, result, c22Start,"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,627,"cQuadrantSize, nonLeafQuadrants);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,629,// P2  = (A21 + A22)(B11)
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,630,// C21 = P2 + ...
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,631,// C22 = P3 + P6 - P2 + ...
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,632,"tilesAdd(a, a21Start, true, a, a22Start, false, sA, 0,"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,633,"aQuadrantSize, nonLeafQuadrants);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,634,"strassenMultiply(sA, 0, true, b, b11Start, true, result, c21Start,"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,635,"n2, bsRows, bsColumns, bsMultiplicands);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,636,"tilesSelfSubtract(result, c22Start, false, result, c21Start, true,"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,637,"cQuadrantSize, nonLeafQuadrants);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,639,// P1  = (A11 + A22)(B11 + B22)
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,640,// C11 = P1 + ...
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,641,// C22 = P3 + P6 - P2 + P1
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,642,"tilesAdd(a, a11Start, true, a, a22Start, false, sA, 0,"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,643,"aQuadrantSize, nonLeafQuadrants);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,644,"tilesAdd(b, b11Start, true, b, b22Start, false, sB, 0,"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,645,"bQuadrantSize, nonLeafQuadrants);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,646,"strassenMultiply(sA, 0, true, sB, 0, true, result, c11Start,"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,647,"n2, bsRows, bsColumns, bsMultiplicands);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,648,"tilesSelfAdd(result, c22Start, false, result, c11Start, true,"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,649,"cQuadrantSize, nonLeafQuadrants);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,651,// P5  = (A11 + A12)B22
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,652,// beware: there is a sign error here in Chatterjee et al. paper
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,653,"// in figure 1, table b they subtract A12 from A11 instead of adding it"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,654,// C12 = P3 + P5
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,655,// C11 = P1 - P5 + ...
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,656,final double[] p45 = new double[cQuadrantSize];
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,657,"tilesAdd(a, a11Start, true, a, a12Start, false, sA, 0,"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,658,"aQuadrantSize, nonLeafQuadrants);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,659,"strassenMultiply(sA, 0, true, b, b22Start, false, p45, 0,"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,660,"n2, bsRows, bsColumns, bsMultiplicands);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,661,"tilesSelfAdd(result, c12Start, false, p45, 0, false,"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,662,"cQuadrantSize, nonLeafQuadrants);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,663,"tilesSelfSubtract(result, c11Start, true, p45, 0, false,"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,664,"cQuadrantSize, nonLeafQuadrants);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,666,// P7  = (A12 - A22)(B21 + B22)
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,667,// C11 = P1 - P5 + P7 + ...
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,668,"tilesSubtract(a, a12Start, false, a, a22Start, false, sA, 0,"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,669,"aQuadrantSize, nonLeafQuadrants);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,670,"tilesAdd(b, b21Start, true, b, b22Start, false, sB, 0,"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,671,"bQuadrantSize, nonLeafQuadrants);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,672,"strassenMultiply(sA, 0, false, sB, 0, true, p67, 0,"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,673,"n2, bsRows, bsColumns, bsMultiplicands);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,674,"tilesSelfAdd(result, c11Start, true, p67, 0, true,"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,675,"cQuadrantSize, nonLeafQuadrants);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,677,// P4  = (A22)(B21 - B11)
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,678,// C11 = P1 - P5 + P7 + P4
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,679,// C21 = P2 + P4
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,680,"tilesSubtract(b, b21Start, true, b, b11Start, true, sB, 0,"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,681,"bQuadrantSize, nonLeafQuadrants);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,682,"strassenMultiply(a, a22Start, false, sB, 0, true, p45, 0,"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,683,"n2, bsRows, bsColumns, bsMultiplicands);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,684,"tilesSelfAdd(result, c11Start, true, p45, 0, true,"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,685,"cQuadrantSize, nonLeafQuadrants);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,686,"tilesSelfAdd(result, c21Start, true, p45, 0, true,"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,687,"cQuadrantSize, nonLeafQuadrants);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,693,* Perform an addition on a few tiles in arrays.
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,694,* @param a left term of addition
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,695,* @param aStart start index in a
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,696,* @param aDirect direct/reversed orientation flag for a
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,697,* @param b right term of addition
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,698,* @param bStart start index in b
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,699,* @param bDirect direct/reversed orientation flag for b
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,700,* @param result result array (will have same orientation as a)
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,701,* @param resultStart start index in result
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,702,* @param n number of elements to add
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,703,* @param nonLeafQuadrants if true the quadrant can be further decomposed
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,705,"private static void tilesAdd(final double[] a, final int aStart, final boolean aDirect,"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,706,"final double[] b, final int bStart, final boolean bDirect,"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,707,"final double[] result, final int resultStart,"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,708,"final int n, final boolean nonLeafQuadrants) {"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,709,if ((aDirect ^ bDirect) & nonLeafQuadrants) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,710,// a and b have different orientations
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,711,// perform addition in two half
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,712,final int n2 = n / 2;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,713,"addLoop(a, aStart,      b, bStart + n2, result, resultStart,      n2);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,714,"addLoop(a, aStart + n2, b, bStart,      result, resultStart + n2, n2);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,715,} else {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,716,// a and b have same orientations
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,717,// perform addition in one loop
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,718,"addLoop(a, aStart, b, bStart, result, resultStart, n);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,723,* Perform an addition loop.
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,724,* @param a left term of addition
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,725,* @param aStart start index in a
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,726,* @param b right term of addition
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,727,* @param bStart start index in b
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,728,* @param result result array (will have same orientation as a)
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,729,* @param resultStart start index in result
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,730,* @param n number of elements to add
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,732,"private static void addLoop(final double[] a, final int aStart,"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,733,"final double[] b, final int bStart,"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,734,"final double[] result, final int resultStart,"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,735,final int n) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,736,int i = 0;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,737,while (i < n - 3) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,738,final int r0 = resultStart + i;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,739,final int a0 = aStart      + i;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,740,final int b0 = bStart      + i;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,741,result[r0]     = a[a0]     + b[b0];
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,742,result[r0 + 1] = a[a0 + 1] + b[b0 + 1];
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,743,result[r0 + 2] = a[a0 + 2] + b[b0 + 2];
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,744,result[r0 + 3] = a[a0 + 3] + b[b0 + 3];
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,745,i += 4;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,747,while (i < n) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,748,result[resultStart + i] = a[aStart + i] + b[bStart + i];
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,749,++i;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,754,* Perform a subtraction on a few tiles in arrays.
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,755,* @param a left term of subtraction
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,756,* @param aStart start index in a
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,757,* @param aDirect direct/reversed orientation flag for a
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,758,* @param b right term of subtraction
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,759,* @param bStart start index in b
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,760,* @param bDirect direct/reversed orientation flag for b
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,761,* @param result result array (will have same orientation as a)
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,762,* @param resultStart start index in result
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,763,* @param n number of elements to subtract
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,764,* @param nonLeafQuadrants if true the quadrant can be further decomposed
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,766,"private static void tilesSubtract(final double[] a, final int aStart, final boolean aDirect,"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,767,"final double[] b, final int bStart, final boolean bDirect,"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,768,"final double[] result, final int resultStart,"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,769,"final int n, final boolean nonLeafQuadrants) {"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,770,if ((aDirect ^ bDirect) & nonLeafQuadrants) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,771,// a and b have different orientations
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,772,// perform subtraction in two half
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,773,final int n2 = n / 2;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,774,"subtractLoop(a, aStart,      b, bStart + n2, result, resultStart,      n2);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,775,"subtractLoop(a, aStart + n2, b, bStart,      result, resultStart + n2, n2);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,776,} else {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,777,// a and b have same orientations
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,778,// perform subtraction in one loop
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,779,"subtractLoop(a, aStart, b, bStart, result, resultStart, n);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,784,* Perform a subtraction loop.
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,785,* @param a left term of subtraction
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,786,* @param aStart start index in a
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,787,* @param b right term of subtraction
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,788,* @param bStart start index in b
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,789,* @param result result array (will have same orientation as a)
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,790,* @param resultStart start index in result
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,791,* @param n number of elements to subtract
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,793,"private static void subtractLoop(final double[] a, final int aStart,"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,794,"final double[] b, final int bStart,"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,795,"final double[] result, final int resultStart,"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,796,final int n) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,797,int i = 0;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,798,while (i < n - 3) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,799,final int r0 = resultStart + i;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,800,final int a0 = aStart      + i;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,801,final int b0 = bStart      + i;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,802,result[r0]     = a[a0]     - b[b0];
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,803,result[r0 + 1] = a[a0 + 1] - b[b0 + 1];
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,804,result[r0 + 2] = a[a0 + 2] - b[b0 + 2];
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,805,result[r0 + 3] = a[a0 + 3] - b[b0 + 3];
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,806,i += 4;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,808,while (i < n) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,809,result[resultStart + i] = a[aStart + i] - b[bStart + i];
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,810,++i;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,815,* Perform a self-addition on a few tiles in arrays.
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,816,* @param a left term of addition (will be overwritten with result)
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,817,* @param aStart start index in a
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,818,* @param aDirect direct/reversed orientation flag for a
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,819,* @param b right term of addition
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,820,* @param bStart start index in b
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,821,* @param bDirect direct/reversed orientation flag for b
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,822,* @param n number of elements to add
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,823,* @param nonLeafQuadrants if true the quadrant can be further decomposed
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,825,"private static void tilesSelfAdd(final double[] a, final int aStart, final boolean aDirect,"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,826,"final double[] b, final int bStart, final boolean bDirect,"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,827,"final int n, final boolean nonLeafQuadrants) {"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,828,if ((aDirect ^ bDirect) & nonLeafQuadrants) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,829,// a and b have different orientations
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,830,// perform addition in two half
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,831,final int n2 = n / 2;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,832,"selfAddLoop(a, aStart,      b, bStart + n2, n2);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,833,"selfAddLoop(a, aStart + n2, b, bStart,      n2);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,834,} else {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,835,// a and b have same orientations
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,836,// perform addition in one loop
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,837,"selfAddLoop(a, aStart, b, bStart, n);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,842,* Perform a self-addition loop.
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,843,* @param a left term of addition (will be overwritten with result)
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,844,* @param aStart start index in a
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,845,* @param b right term of addition
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,846,* @param bStart start index in b
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,847,* @param n number of elements to add
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,849,"private static void selfAddLoop(final double[] a, final int aStart,"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,850,"final double[] b, final int bStart,"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,851,final int n) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,852,int i = 0;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,853,while (i < n - 3) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,854,final int a0 = aStart + i;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,855,final int b0 = bStart + i;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,856,a[a0]     += b[b0];
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,857,a[a0 + 1] += b[b0 + 1];
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,858,a[a0 + 2] += b[b0 + 2];
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,859,a[a0 + 3] += b[b0 + 3];
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,860,i += 4;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,862,while (i < n) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,863,a[aStart + i] += b[bStart + i];
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,864,++i;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,869,* Perform a self-subtraction on a few tiles in arrays.
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,870,* @param a left term of subtraction (will be overwritten with result)
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,871,* @param aStart start index in a
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,872,* @param aDirect direct/reversed orientation flag for a
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,873,* @param b right term of subtraction
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,874,* @param bStart start index in b
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,875,* @param bDirect direct/reversed orientation flag for b
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,876,* @param n number of elements to subtract
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,877,* @param nonLeafQuadrants if true the quadrant can be further decomposed
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,879,"private static void tilesSelfSubtract(final double[] a, final int aStart, final boolean aDirect,"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,880,"final double[] b, final int bStart, final boolean bDirect,"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,881,"final int n, final boolean nonLeafQuadrants) {"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,882,if ((aDirect ^ bDirect) & nonLeafQuadrants) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,883,// a and b have different orientations
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,884,// perform subtraction in two half
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,885,final int n2 = n / 2;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,886,"selfSubtractLoop(a, aStart,      b, bStart + n2, n2);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,887,"selfSubtractLoop(a, aStart + n2, b, bStart,      n2);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,888,} else {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,889,// a and b have same orientations
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,890,// perform subtraction in one loop
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,891,"selfSubtractLoop(a, aStart, b, bStart, n);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,896,* Perform a self-subtraction loop.
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,897,* @param a left term of subtraction (will be overwritten with result)
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,898,* @param aStart start index in a
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,899,* @param b right term of subtraction
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,900,* @param bStart start index in b
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,901,* @param n number of elements to subtract
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,903,"private static void selfSubtractLoop(final double[] a, final int aStart,"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,904,"final double[] b, final int bStart,"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,905,final int n) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,906,int i = 0;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,907,while (i < n - 3) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,908,final int a0 = aStart + i;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,909,final int b0 = bStart + i;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,910,a[a0]     -= b[b0];
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,911,a[a0 + 1] -= b[b0 + 1];
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,912,a[a0 + 2] -= b[b0 + 2];
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,913,a[a0 + 3] -= b[b0 + 3];
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,914,i += 4;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,916,while (i < n) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,917,a[aStart + i] -= b[bStart + i];
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,918,++i;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,922,/** {@inheritDoc} */
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,923,public double[][] getData() {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,925,final double[][] out = new double[rows][columns];
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,927,"// perform extraction tile-wise, to ensure good cache behavior"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,928,for (int index = 0; index < tileNumber * tileNumber; ++index) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,930,// perform extraction on the current tile
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,931,final int tileStart = index * tileSizeRows * tileSizeColumns;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,932,final long indices  = tilesIndices(index);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,933,final int iTile     = (int) (indices >> 32);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,934,final int jTile     = (int) (indices & 0xffffffff);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,935,final int pStart    = iTile * tileSizeRows;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,936,final int qStart    = jTile * tileSizeColumns;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,937,if (pStart < rows && qStart < columns) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,938,"final int pEnd = Math.min(pStart + tileSizeRows, rows);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,939,"final int qEnd = Math.min(qStart + tileSizeColumns, columns);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,940,int tileRowStart = tileStart;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,941,for (int p = pStart; p < pEnd; ++p) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,942,"System.arraycopy(data, tileRowStart, out[p], qStart, qEnd - qStart);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,943,tileRowStart += tileSizeColumns;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,949,return out;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,953,/** {@inheritDoc} */
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,954,public double getFrobeniusNorm() {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,955,double sum2 = 0;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,956,for (final double entry : data) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,957,sum2 += entry * entry;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,959,return Math.sqrt(sum2);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,962,/** {@inheritDoc} */
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,963,"public RealMatrix getSubMatrix(final int startRow, final int endRow,"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,964,"final int startColumn, final int endColumn)"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,965,throws MatrixIndexException {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,967,// safety checks
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,968,"checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,970,// create the output matrix
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,971,final RecursiveLayoutRealMatrix out =
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,972,"new RecursiveLayoutRealMatrix(endRow - startRow + 1, endColumn - startColumn + 1);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,974,"// perform extraction tile-wise, to ensure good cache behavior"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,975,for (int iTile = 0; iTile < out.tileNumber; ++iTile) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,976,final int iStart = startRow + iTile * out.tileSizeRows;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,977,"final int iEnd   = Math.min(startRow + Math.min((iTile + 1) * out.tileSizeRows, out.rows),"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,978,endRow + 1);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,979,for (int jTile = 0; jTile < out.tileNumber; ++jTile) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,980,final int jStart = startColumn + jTile * out.tileSizeColumns;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,981,"final int jEnd   = Math.min(startColumn + Math.min((jTile + 1) * out.tileSizeColumns, out.columns),"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,982,endColumn + 1);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,984,// the current output tile may expand on more than one instance tile
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,985,for (int pTile = iStart / tileSizeRows; pTile * tileSizeRows < iEnd; ++pTile) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,986,final int p0     = pTile * tileSizeRows;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,987,"final int pStart = Math.max(p0, iStart);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,988,"final int pEnd   = Math.min(Math.min(p0 + tileSizeRows, endRow + 1), iEnd);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,989,for (int qTile = jStart / tileSizeColumns; qTile * tileSizeColumns < jEnd; ++qTile) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,990,final int q0     = qTile * tileSizeColumns;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,991,"final int qStart = Math.max(q0, jStart);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,992,"final int qEnd   = Math.min(Math.min(q0 + tileSizeColumns, endColumn + 1), jEnd);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,994,// copy the overlapping part of instance and output tiles
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,995,"int outIndex = tileIndex(iTile, jTile) * out.tileSizeRows * out.tileSizeColumns +"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,996,(pStart - iStart) * out.tileSizeColumns + (qStart - jStart);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,997,"int index    = tileIndex(pTile, qTile) * tileSizeRows * tileSizeColumns +"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,998,(pStart - p0) * tileSizeColumns + (qStart - q0);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,999,for (int p = pStart; p < pEnd; ++p) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1000,"System.arraycopy(data, index, out.data, outIndex, qEnd - qStart);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1001,outIndex += out.tileSizeColumns;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1002,index    += tileSizeColumns;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1012,return out;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1016,/** {@inheritDoc} */
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1017,"public void setSubMatrix(final double[][] subMatrix, final int row, final int column)"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1018,throws MatrixIndexException {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1020,// safety checks
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1021,final int refLength = subMatrix[0].length;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1022,if (refLength < 1) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1023,"throw MathRuntimeException.createIllegalArgumentException(""matrix must have at least one column"","
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1024,null);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1026,final int endRow    = row + subMatrix.length - 1;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1027,final int endColumn = column + refLength - 1;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1028,"checkSubMatrixIndex(row, endRow, column, endColumn);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1029,for (final double[] subRow : subMatrix) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1030,if (subRow.length != refLength) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1031,"throw MathRuntimeException.createIllegalArgumentException(""some rows have length {0} while others have length {1}"","
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1032,new Object[] {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1033,"refLength, subRow.length"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1038,// compute tiles bounds
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1039,final int tileStartRow    = row / tileSizeRows;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1040,final int tileEndRow      = (endRow + tileSizeRows) / tileSizeRows;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1041,final int tileStartColumn = column / tileSizeColumns;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1042,final int tileEndColumn   = (endColumn + tileSizeColumns) / tileSizeColumns;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1044,"// perform copy tile-wise, to ensure good cache behavior"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1045,for (int iTile = tileStartRow; iTile < tileEndRow; ++iTile) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1046,final int firstRow = iTile * tileSizeRows;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1047,"final int iStart   = Math.max(row,    firstRow);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1048,"final int iEnd     = Math.min(endRow + 1, firstRow + tileSizeRows);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1050,for (int jTile = tileStartColumn; jTile < tileEndColumn; ++jTile) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1051,final int firstColumn = jTile * tileSizeColumns;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1052,"final int jStart      = Math.max(column,    firstColumn);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1053,"final int jEnd        = Math.min(endColumn + 1, firstColumn + tileSizeColumns);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1054,final int jLength     = jEnd - jStart;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1055,"final int tileStart   = tileIndex(iTile, jTile) * tileSizeRows * tileSizeColumns;"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1057,"// handle one tile, row by row"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1058,for (int i = iStart; i < iEnd; ++i) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1059,"System.arraycopy(subMatrix[i - row], jStart - column,"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1060,"data, tileStart + (i - firstRow) * tileSizeColumns + (jStart - firstColumn),"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1061,jLength);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1068,/** {@inheritDoc} */
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1069,public RealMatrix getRowMatrix(final int row)
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1070,throws MatrixIndexException {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1072,checkRowIndex(row);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1073,"final RecursiveLayoutRealMatrix out = new RecursiveLayoutRealMatrix(1, columns);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1075,"// a row matrix has always only one large tile,"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1076,// because a single row cannot be split into 2^k tiles
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1077,"// perform copy tile-wise, to ensure good cache behavior"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1078,final int iTile     = row / tileSizeRows;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1079,final int rowOffset = row - iTile * tileSizeRows;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1080,int outIndex        = 0;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1081,for (int jTile = 0; jTile < tileNumber; ++jTile) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1082,"final int kStart = tileIndex(iTile, jTile) * tileSizeRows * tileSizeColumns +"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1083,rowOffset * tileSizeColumns;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1084,"final int length = Math.min(outIndex + tileSizeColumns, columns) - outIndex;"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1085,"System.arraycopy(data, kStart, out.data, outIndex, length);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1086,outIndex += length;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1089,return out;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1093,/** {@inheritDoc} */
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1094,"public void setRowMatrix(final int row, final RealMatrix matrix)"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1095,"throws MatrixIndexException, InvalidMatrixException {"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1096,try {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1097,"setRowMatrix(row, (RecursiveLayoutRealMatrix) matrix);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1098,} catch (ClassCastException cce) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1099,"super.setRowMatrix(row, matrix);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1104,* Sets the entries in row number <code>row</code>
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1105,* as a row matrix.  Row indices start at 0.
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1107,* @param row the row to be set
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1108,* @param matrix row matrix (must have one row and the same number of columns
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1109,* as the instance)
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1110,* @throws MatrixIndexException if the specified row index is invalid
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1111,* @throws InvalidMatrixException if the matrix dimensions do not match one
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1112,* instance row
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1114,"public void setRowMatrix(final int row, final RecursiveLayoutRealMatrix matrix)"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1115,"throws MatrixIndexException, InvalidMatrixException {"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1117,checkRowIndex(row);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1118,final int nCols = getColumnDimension();
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1119,if ((matrix.getRowDimension() != 1) ||
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1120,(matrix.getColumnDimension() != nCols)) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1121,"throw new InvalidMatrixException(""dimensions mismatch: got {0}x{1} but expected {2}x{3}"","
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1122,new Object[] {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1123,"matrix.getRowDimension(),"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1124,"matrix.getColumnDimension(),"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1125,"1, nCols"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1129,"// a row matrix has always only one large tile,"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1130,// because a single row cannot be split into 2^k tiles
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1131,"// perform copy tile-wise, to ensure good cache behavior"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1132,final int iTile     = row / tileSizeRows;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1133,final int rowOffset = row - iTile * tileSizeRows;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1134,int outIndex        = 0;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1135,for (int jTile = 0; jTile < tileNumber; ++jTile) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1136,"final int kStart = tileIndex(iTile, jTile) * tileSizeRows * tileSizeColumns +"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1137,rowOffset * tileSizeColumns;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1138,"final int length = Math.min(outIndex + tileSizeColumns, columns) - outIndex;"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1139,"System.arraycopy(matrix.data, outIndex, data, kStart, length);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1140,outIndex += length;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1145,/** {@inheritDoc} */
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1146,public RealMatrix getColumnMatrix(final int column)
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1147,throws MatrixIndexException {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1149,checkColumnIndex(column);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1150,"final RecursiveLayoutRealMatrix out = new RecursiveLayoutRealMatrix(rows, 1);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1152,"// a column matrix has always only one large tile,"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1153,// because a single column cannot be split into 2^k tiles
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1154,"// perform copy tile-wise, to ensure good cache behavior"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1155,final int jTile        = column / tileSizeColumns;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1156,final int columnOffset = column - jTile * tileSizeColumns;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1157,for (int iTile = 0; iTile < tileNumber; ++iTile) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1158,final int pStart = iTile * tileSizeRows;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1159,"final int pEnd   = Math.min(pStart + tileSizeRows, rows);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1160,"final int kStart = tileIndex(iTile, jTile) * tileSizeRows * tileSizeColumns +"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1161,columnOffset;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1162,"for (int p = pStart, k = kStart; p < pEnd; ++p, k += tileSizeColumns) {"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1163,out.data[p] = data[k];
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1167,return out;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1171,/** {@inheritDoc} */
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1172,"public void setColumnMatrix(final int column, final RealMatrix matrix)"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1173,"throws MatrixIndexException, InvalidMatrixException {"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1174,try {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1175,"setColumnMatrix(column, (RecursiveLayoutRealMatrix) matrix);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1176,} catch (ClassCastException cce) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1177,"super.setColumnMatrix(column, matrix);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1182,* Sets the entries in column number <code>column</code>
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1183,* as a column matrix.  Column indices start at 0.
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1185,* @param column the column to be set
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1186,* @param matrix column matrix (must have one column and the same number of rows
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1187,* as the instance)
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1188,* @throws MatrixIndexException if the specified column index is invalid
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1189,* @throws InvalidMatrixException if the matrix dimensions do not match one
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1190,* instance column
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1192,"void setColumnMatrix(final int column, final RecursiveLayoutRealMatrix matrix)"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1193,"throws MatrixIndexException, InvalidMatrixException {"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1195,checkColumnIndex(column);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1196,final int nRows = getRowDimension();
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1197,if ((matrix.getRowDimension() != nRows) ||
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1198,(matrix.getColumnDimension() != 1)) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1199,"throw new InvalidMatrixException(""dimensions mismatch: got {0}x{1} but expected {2}x{3}"","
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1200,new Object[] {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1201,"matrix.getRowDimension(),"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1202,"matrix.getColumnDimension(),"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1203,"nRows, 1"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1207,"// a column matrix has always only one large tile,"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1208,// because a single column cannot be split into 2^k tiles
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1209,"// perform copy tile-wise, to ensure good cache behavior"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1210,final int jTile        = column / tileSizeColumns;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1211,final int columnOffset = column - jTile * tileSizeColumns;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1212,for (int iTile = 0; iTile < tileNumber; ++iTile) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1213,final int pStart = iTile * tileSizeRows;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1214,"final int pEnd   = Math.min(pStart + tileSizeRows, rows);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1215,"final int kStart = tileIndex(iTile, jTile) * tileSizeRows * tileSizeColumns +"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1216,columnOffset;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1217,"for (int p = pStart, k = kStart; p < pEnd; ++p, k += tileSizeColumns) {"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1218,data[k] = matrix.data[p];
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1224,/** {@inheritDoc} */
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1225,"public void setRowVector(final int row, final RealVector vector)"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1226,"throws MatrixIndexException, InvalidMatrixException {"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1227,try {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1228,"setRow(row, ((RealVectorImpl) vector).getDataRef());"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1229,} catch (ClassCastException cce) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1230,checkRowIndex(row);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1231,if (vector.getDimension() != columns) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1232,"throw new InvalidMatrixException(""dimensions mismatch: got {0}x{1} but expected {2}x{3}"","
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1233,new Object[] {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1234,"1, vector.getDimension(),"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1235,"1, columns"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1239,"// perform copy tile-wise, to ensure good cache behavior"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1240,final int iTile     = row / tileSizeRows;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1241,final int rowOffset = row - iTile * tileSizeRows;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1242,int outIndex        = 0;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1243,for (int jTile = 0; jTile < tileNumber; ++jTile) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1244,"final int kStart = tileIndex(iTile, jTile) * tileSizeRows * tileSizeColumns +"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1245,rowOffset * tileSizeColumns;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1246,"final int length = Math.min(outIndex + tileSizeColumns, columns) - outIndex;"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1247,for (int l = 0; l < length; ++l) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1248,data[kStart + l] = vector.getEntry(outIndex + l);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1250,outIndex += length;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1255,/** {@inheritDoc} */
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1256,"public void setColumnVector(final int column, final RealVector vector)"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1257,"throws MatrixIndexException, InvalidMatrixException {"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1258,try {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1259,"setColumn(column, ((RealVectorImpl) vector).getDataRef());"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1260,} catch (ClassCastException cce) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1261,checkColumnIndex(column);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1262,if (vector.getDimension() != rows) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1263,"throw new InvalidMatrixException(""dimensions mismatch: got {0}x{1} but expected {2}x{3}"","
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1264,new Object[] {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1265,"vector.getDimension(), 1,"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1266,"rows, 1"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1270,"// perform copy tile-wise, to ensure good cache behavior"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1271,final int jTile        = column / tileSizeColumns;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1272,final int columnOffset = column - jTile * tileSizeColumns;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1273,for (int iTile = 0; iTile < tileNumber; ++iTile) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1274,final int pStart = iTile * tileSizeRows;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1275,"final int pEnd   = Math.min(pStart + tileSizeRows, rows);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1276,"final int kStart = tileIndex(iTile, jTile) * tileSizeRows * tileSizeColumns +"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1277,columnOffset;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1278,"for (int p = pStart, k = kStart; p < pEnd; ++p, k += tileSizeColumns) {"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1279,data[k] = vector.getEntry(p);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1285,/** {@inheritDoc} */
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1286,public double[] getRow(final int row)
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1287,throws MatrixIndexException {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1289,checkRowIndex(row);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1290,final double[] out = new double[columns];
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1292,"// perform copy tile-wise, to ensure good cache behavior"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1293,final int iTile     = row / tileSizeRows;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1294,final int rowOffset = row - iTile * tileSizeRows;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1295,int outIndex        = 0;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1296,for (int jTile = 0; jTile < tileNumber; ++jTile) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1297,"final int kStart = tileIndex(iTile, jTile) * tileSizeRows * tileSizeColumns +"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1298,rowOffset * tileSizeColumns;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1299,"final int length = Math.min(outIndex + tileSizeColumns, columns) - outIndex;"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1300,"System.arraycopy(data, kStart, out, outIndex, length);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1301,outIndex += length;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1304,return out;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1308,/** {@inheritDoc} */
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1309,"public void setRow(final int row, final double[] array)"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1310,"throws MatrixIndexException, InvalidMatrixException {"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1312,checkRowIndex(row);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1313,if (array.length != columns) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1314,"throw new InvalidMatrixException(""dimensions mismatch: got {0}x{1} but expected {2}x{3}"","
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1315,new Object[] {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1316,"1, array.length,"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1317,"1, columns"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1321,"// perform copy tile-wise, to ensure good cache behavior"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1322,final int iTile     = row / tileSizeRows;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1323,final int rowOffset = row - iTile * tileSizeRows;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1324,int outIndex        = 0;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1325,for (int jTile = 0; jTile < tileNumber; ++jTile) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1326,"final int kStart = tileIndex(iTile, jTile) * tileSizeRows * tileSizeColumns +"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1327,rowOffset * tileSizeColumns;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1328,"final int length = Math.min(outIndex + tileSizeColumns, columns) - outIndex;"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1329,"System.arraycopy(array, outIndex, data, kStart, length);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1330,outIndex += length;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1335,/** {@inheritDoc} */
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1336,public double[] getColumn(final int column)
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1337,throws MatrixIndexException {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1339,checkColumnIndex(column);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1340,final double[] out = new double[rows];
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1342,"// perform copy tile-wise, to ensure good cache behavior"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1343,final int jTile        = column / tileSizeColumns;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1344,final int columnOffset = column - jTile * tileSizeColumns;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1345,for (int iTile = 0; iTile < tileNumber; ++iTile) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1346,final int pStart = iTile * tileSizeRows;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1347,"final int pEnd   = Math.min(pStart + tileSizeRows, rows);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1348,"final int kStart = tileIndex(iTile, jTile) * tileSizeRows * tileSizeColumns +"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1349,columnOffset;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1350,"for (int p = pStart, k = kStart; p < pEnd; ++p, k += tileSizeColumns) {"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1351,out[p] = data[k];
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1355,return out;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1359,/** {@inheritDoc} */
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1360,"public void setColumn(final int column, final double[] array)"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1361,"throws MatrixIndexException, InvalidMatrixException {"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1363,checkColumnIndex(column);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1364,if (array.length != rows) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1365,"throw new InvalidMatrixException(""dimensions mismatch: got {0}x{1} but expected {2}x{3}"","
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1366,new Object[] {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1367,"array.length, 1,"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1368,"rows, 1"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1372,"// perform copy tile-wise, to ensure good cache behavior"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1373,final int jTile        = column / tileSizeColumns;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1374,final int columnOffset = column - jTile * tileSizeColumns;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1375,for (int iTile = 0; iTile < tileNumber; ++iTile) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1376,final int pStart = iTile * tileSizeRows;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1377,"final int pEnd   = Math.min(pStart + tileSizeRows, rows);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1378,"final int kStart = tileIndex(iTile, jTile) * tileSizeRows * tileSizeColumns +"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1379,columnOffset;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1380,"for (int p = pStart, k = kStart; p < pEnd; ++p, k += tileSizeColumns) {"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1381,data[k] = array[p];
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1387,/** {@inheritDoc} */
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1388,"public double getEntry(final int row, final int column)"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1389,throws MatrixIndexException {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1390,if ((row < 0) || (row >= rows) || (column < 0) || (column >= columns)) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1391,"throw new MatrixIndexException(""no entry at indices ({0}, {1}) in a {2}x{3} matrix"","
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1392,new Object[] {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1393,"row, column,"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1394,"getRowDimension(), getColumnDimension()"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1397,"return data[index(row, column)];"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1400,/** {@inheritDoc} */
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1401,"public void setEntry(final int row, final int column, final double value)"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1402,throws MatrixIndexException {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1403,if ((row < 0) || (row >= rows) || (column < 0) || (column >= columns)) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1404,"throw new MatrixIndexException(""no entry at indices ({0}, {1}) in a {2}x{3} matrix"","
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1405,new Object[] {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1406,"row, column,"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1407,"getRowDimension(), getColumnDimension()"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1410,"data[index(row, column)] = value;"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1413,/** {@inheritDoc} */
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1414,"public void addToEntry(final int row, final int column, final double increment)"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1415,throws MatrixIndexException {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1416,if ((row < 0) || (row >= rows) || (column < 0) || (column >= columns)) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1417,"throw new MatrixIndexException(""no entry at indices ({0}, {1}) in a {2}x{3} matrix"","
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1418,new Object[] {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1419,"row, column,"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1420,"getRowDimension(), getColumnDimension()"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1423,"data[index(row, column)] += increment;"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1426,/** {@inheritDoc} */
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1427,"public void multiplyEntry(final int row, final int column, final double factor)"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1428,throws MatrixIndexException {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1429,if ((row < 0) || (row >= rows) || (column < 0) || (column >= columns)) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1430,"throw new MatrixIndexException(""no entry at indices ({0}, {1}) in a {2}x{3} matrix"","
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1431,new Object[] {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1432,"row, column,"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1433,"getRowDimension(), getColumnDimension()"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1436,"data[index(row, column)] *= factor;"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1439,/** {@inheritDoc} */
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1440,public RealMatrix transpose() {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1442,"final RecursiveLayoutRealMatrix out = new RecursiveLayoutRealMatrix(columns, rows);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1444,"// perform transpose tile-wise, to ensure good cache behavior"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1445,for (int index = 0; index < tileNumber * tileNumber; ++index) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1446,final int tileStart    = index * tileSizeRows * tileSizeColumns;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1447,final long indices     = tilesIndices(index);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1448,final int outJTile     = (int) (indices >> 32);        // iTile in the instance
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1449,final int outITile     = (int) (indices & 0xffffffff); // jTile in the instance
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1450,"final int outIndex     = tileIndex(outITile, outJTile);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1451,final int outTileStart = outIndex * tileSizeRows * tileSizeColumns;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1453,// transpose current tile
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1454,final int outPStart = outITile * tileSizeColumns;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1455,"final int outPEnd   = Math.min(outPStart + tileSizeColumns, columns);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1456,final int outQStart = outJTile * tileSizeRows;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1457,"final int outQEnd   = Math.min(outQStart + tileSizeRows, rows);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1458,for (int outP = outPStart; outP < outPEnd; ++outP) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1459,final int dP = outP - outPStart;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1460,int k = outTileStart + dP * tileSizeRows;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1461,int l = tileStart + dP;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1462,for (int outQ = outQStart; outQ < outQEnd; ++outQ) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1463,out.data[k++] = data[l];
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1464,l+= tileSizeColumns;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1470,return out;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1474,/** {@inheritDoc} */
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1475,public int getRowDimension() {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1476,return rows;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1479,/** {@inheritDoc} */
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1480,public int getColumnDimension() {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1481,return columns;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1484,/** {@inheritDoc} */
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1485,public double[] operate(final double[] v)
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1486,throws IllegalArgumentException {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1488,if (v.length != columns) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1489,"throw MathRuntimeException.createIllegalArgumentException(""vector length mismatch:"" +"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1490,""" got {0} but expected {1}"","
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1491,new Object[] {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1492,"v.length, columns"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1495,final double[] out = new double[rows];
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1497,"// perform multiplication tile-wise, to ensure good cache behavior"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1498,for (int index = 0; index < tileNumber * tileNumber; ++index) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1499,final int tileStart = index * tileSizeRows * tileSizeColumns;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1500,final long indices  = tilesIndices(index);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1501,final int iTile     = (int) (indices >> 32);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1502,final int jTile     = (int) (indices & 0xffffffff);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1503,final int pStart    = iTile * tileSizeRows;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1504,"final int pEnd      = Math.min(pStart + tileSizeRows, rows);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1505,final int qStart    = jTile * tileSizeColumns;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1506,"final int qEnd      = Math.min(qStart + tileSizeColumns, columns);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1507,"for (int p = pStart, k = tileStart; p < pEnd; ++p) {"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1508,double sum = 0;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1509,int    q   = qStart;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1510,while (q < qEnd - 3) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1511,sum += data[k]     * v[q]     +
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1512,data[k + 1] * v[q + 1] +
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1513,data[k + 2] * v[q + 2] +
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1514,data[k + 3] * v[q + 3];
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1515,k += 4;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1516,q += 4;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1518,while (q < qEnd) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1519,sum += data[k++] * v[q++];
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1521,out[p] += sum;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1525,return out;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1529,/** {@inheritDoc} */
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1530,public double[] preMultiply(final double[] v)
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1531,throws IllegalArgumentException {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1533,if (v.length != rows) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1534,"throw MathRuntimeException.createIllegalArgumentException(""vector length mismatch:"" +"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1535,""" got {0} but expected {1}"","
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1536,new Object[] {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1537,"v.length, rows"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1540,final double[] out = new double[columns];
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1542,final int offset1 = tileSizeColumns;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1543,final int offset2 = offset1 + offset1;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1544,final int offset3 = offset2 + offset1;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1545,final int offset4 = offset3 + offset1;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1547,"// perform multiplication tile-wise, to ensure good cache behavior"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1548,for (int index = 0; index < tileNumber * tileNumber; ++index) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1549,final int tileStart = index * tileSizeRows * tileSizeColumns;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1550,final long indices  = tilesIndices(index);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1551,final int iTile     = (int) (indices >> 32);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1552,final int jTile     = (int) (indices & 0xffffffff);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1553,final int pStart    = iTile * tileSizeRows;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1554,"final int pEnd      = Math.min(pStart + tileSizeRows, rows);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1555,final int qStart    = jTile * tileSizeColumns;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1556,"final int qEnd      = Math.min(qStart + tileSizeColumns, columns);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1557,for (int q = qStart; q < qEnd; ++q) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1558,int k = tileStart + q - qStart;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1559,double sum = 0;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1560,int p = pStart;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1561,while (p < pEnd - 3) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1562,sum += data[k]           * v[p]     +
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1563,data[k + offset1] * v[p + 1] +
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1564,data[k + offset2] * v[p + 2] +
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1565,data[k + offset3] * v[p + 3];
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1566,k += offset4;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1567,p += 4;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1569,while (p < pEnd) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1570,sum += data[k] * v[p++];
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1571,k   += offset1;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1573,out[q] += sum;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1577,return out;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1581,/** {@inheritDoc} */
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1582,public double walkInRowOrder(final RealMatrixChangingVisitor visitor)
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1583,throws MatrixVisitorException {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1584,"visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1585,for (int iTile = 0; iTile < tileNumber; ++iTile) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1586,final int pStart = iTile * tileSizeRows;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1587,"final int pEnd   = Math.min(pStart + tileSizeRows, rows);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1588,for (int p = pStart; p < pEnd; ++p) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1589,for (int jTile = 0; jTile < tileNumber; ++jTile) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1590,final int qStart    = jTile * tileSizeColumns;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1591,"final int qEnd      = Math.min(qStart + tileSizeColumns, columns);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1592,"final int tileStart = tileIndex(iTile, jTile) *"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1593,tileSizeRows * tileSizeColumns;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1594,final int kStart    = tileStart + (p - pStart) * tileSizeColumns;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1595,"for (int q = qStart, k = kStart; q < qEnd; ++q, ++k) {"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1596,"data[k] = visitor.visit(p, q, data[k]);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1601,return visitor.end();
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1604,/** {@inheritDoc} */
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1605,public double walkInRowOrder(final RealMatrixPreservingVisitor visitor)
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1606,throws MatrixVisitorException {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1607,"visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1608,for (int iTile = 0; iTile < tileNumber; ++iTile) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1609,final int pStart = iTile * tileSizeRows;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1610,"final int pEnd   = Math.min(pStart + tileSizeRows, rows);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1611,for (int p = pStart; p < pEnd; ++p) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1612,for (int jTile = 0; jTile < tileNumber; ++jTile) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1613,final int qStart    = jTile * tileSizeColumns;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1614,"final int qEnd      = Math.min(qStart + tileSizeColumns, columns);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1615,"final int tileStart = tileIndex(iTile, jTile) *"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1616,tileSizeRows * tileSizeColumns;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1617,final int kStart    = tileStart + (p - pStart) * tileSizeColumns;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1618,"for (int q = qStart, k = kStart; q < qEnd; ++q, ++k) {"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1619,"visitor.visit(p, q, data[k]);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1624,return visitor.end();
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1627,/** {@inheritDoc} */
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1628,"public double walkInRowOrder(final RealMatrixChangingVisitor visitor,"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1629,"final int startRow, final int endRow,"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1630,"final int startColumn, final int endColumn)"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1631,"throws MatrixIndexException, MatrixVisitorException {"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1632,"checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1633,"visitor.start(rows, columns, startRow, endRow, startColumn, endColumn);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1634,for (int iTile = startRow / tileSizeRows; iTile < 1 + endRow / tileSizeRows; ++iTile) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1635,final int p0     = iTile * tileSizeRows;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1636,"final int pStart = Math.max(startRow, p0);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1637,"final int pEnd   = Math.min((iTile + 1) * tileSizeRows, 1 + endRow);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1638,for (int p = pStart; p < pEnd; ++p) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1639,for (int jTile = startColumn / tileSizeColumns; jTile < 1 + endColumn / tileSizeColumns; ++jTile) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1640,final int q0        = jTile * tileSizeColumns;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1641,"final int qStart    = Math.max(startColumn, q0);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1642,"final int qEnd      = Math.min((jTile + 1) * tileSizeColumns, 1 + endColumn);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1643,"final int tileStart = tileIndex(iTile, jTile) *"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1644,tileSizeRows * tileSizeColumns;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1645,final int kStart    = tileStart + (p - p0) * tileSizeColumns + (qStart - q0);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1646,"for (int q = qStart, k = kStart; q < qEnd; ++q, ++k) {"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1647,"data[k] = visitor.visit(p, q, data[k]);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1652,return visitor.end();
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1655,/** {@inheritDoc} */
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1656,"public double walkInRowOrder(final RealMatrixPreservingVisitor visitor,"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1657,"final int startRow, final int endRow,"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1658,"final int startColumn, final int endColumn)"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1659,"throws MatrixIndexException, MatrixVisitorException {"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1660,"checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1661,"visitor.start(rows, columns, startRow, endRow, startColumn, endColumn);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1662,for (int iTile = startRow / tileSizeRows; iTile < 1 + endRow / tileSizeRows; ++iTile) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1663,final int p0     = iTile * tileSizeRows;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1664,"final int pStart = Math.max(startRow, p0);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1665,"final int pEnd   = Math.min((iTile + 1) * tileSizeRows, 1 + endRow);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1666,for (int p = pStart; p < pEnd; ++p) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1667,for (int jTile = startColumn / tileSizeColumns; jTile < 1 + endColumn / tileSizeColumns; ++jTile) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1668,final int q0        = jTile * tileSizeColumns;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1669,"final int qStart    = Math.max(startColumn, q0);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1670,"final int qEnd      = Math.min((jTile + 1) * tileSizeColumns, 1 + endColumn);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1671,"final int tileStart = tileIndex(iTile, jTile) *"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1672,tileSizeRows * tileSizeColumns;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1673,final int kStart    = tileStart + (p - p0) * tileSizeColumns + (qStart - q0);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1674,"for (int q = qStart, k = kStart; q < qEnd; ++q, ++k) {"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1675,"visitor.visit(p, q, data[k]);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1680,return visitor.end();
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1683,/** {@inheritDoc} */
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1684,public double walkInColumnOrder(final RealMatrixChangingVisitor visitor)
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1685,throws MatrixVisitorException {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1686,"visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1687,for (int jTile = 0; jTile < tileNumber; ++jTile) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1688,final int qStart = jTile * tileSizeColumns;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1689,"final int qEnd   = Math.min(qStart + tileSizeColumns, columns);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1690,for (int q = qStart; q < qEnd; ++q) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1691,for (int iTile = 0; iTile < tileNumber; ++iTile) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1692,final int pStart    = iTile * tileSizeRows;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1693,"final int pEnd      = Math.min(pStart + tileSizeRows, rows);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1694,"final int tileStart = tileIndex(iTile, jTile) *"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1695,tileSizeRows * tileSizeColumns;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1696,final int kStart    = tileStart + (q - qStart);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1697,"for (int p = pStart, k = kStart; p < pEnd; ++p, k += tileSizeColumns) {"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1698,"data[k] = visitor.visit(p, q, data[k]);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1703,return visitor.end();
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1706,/** {@inheritDoc} */
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1707,public double walkInColumnOrder(final RealMatrixPreservingVisitor visitor)
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1708,throws MatrixVisitorException {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1709,"visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1710,for (int jTile = 0; jTile < tileNumber; ++jTile) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1711,final int qStart = jTile * tileSizeColumns;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1712,"final int qEnd   = Math.min(qStart + tileSizeColumns, columns);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1713,for (int q = qStart; q < qEnd; ++q) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1714,for (int iTile = 0; iTile < tileNumber; ++iTile) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1715,final int pStart    = iTile * tileSizeRows;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1716,"final int pEnd      = Math.min(pStart + tileSizeRows, rows);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1717,"final int tileStart = tileIndex(iTile, jTile) *"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1718,tileSizeRows * tileSizeColumns;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1719,final int kStart    = tileStart + (q - qStart);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1720,"for (int p = pStart, k = kStart; p < pEnd; ++p, k += tileSizeColumns) {"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1721,"visitor.visit(p, q, data[k]);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1726,return visitor.end();
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1729,/** {@inheritDoc} */
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1730,"public double walkInColumnOrder(final RealMatrixChangingVisitor visitor,"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1731,"final int startRow, final int endRow,"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1732,"final int startColumn, final int endColumn)"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1733,"throws MatrixIndexException, MatrixVisitorException {"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1734,"checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1735,"visitor.start(getRowDimension(), getColumnDimension(),"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1736,"startRow, endRow, startColumn, endColumn);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1737,for (int jTile = 0; jTile < tileNumber; ++jTile) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1738,final int q0     = jTile * tileSizeColumns;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1739,"final int qStart = Math.max(startColumn, q0);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1740,"final int qEnd   = Math.min((jTile + 1) * tileSizeColumns, 1 + endColumn);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1741,for (int q = qStart; q < qEnd; ++q) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1742,for (int iTile = 0; iTile < tileNumber; ++iTile) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1743,final int p0        = iTile * tileSizeRows;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1744,"final int pStart    = Math.max(startRow, p0);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1745,"final int pEnd      = Math.min((iTile + 1) * tileSizeRows, 1 + endRow);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1746,"final int tileStart = tileIndex(iTile, jTile) *"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1747,tileSizeRows * tileSizeColumns;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1748,final int kStart = tileStart + (pStart - p0) * tileSizeColumns + (q - q0);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1749,"for (int p = pStart, k = kStart; p < pEnd; ++p, k += tileSizeColumns) {"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1750,"data[k] = visitor.visit(p, q, data[k]);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1755,return visitor.end();
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1758,/** {@inheritDoc} */
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1759,"public double walkInColumnOrder(final RealMatrixPreservingVisitor visitor,"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1760,"final int startRow, final int endRow,"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1761,"final int startColumn, final int endColumn)"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1762,"throws MatrixIndexException, MatrixVisitorException {"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1763,"checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1764,"visitor.start(getRowDimension(), getColumnDimension(),"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1765,"startRow, endRow, startColumn, endColumn);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1766,for (int jTile = 0; jTile < tileNumber; ++jTile) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1767,final int q0     = jTile * tileSizeColumns;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1768,"final int qStart = Math.max(startColumn, q0);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1769,"final int qEnd   = Math.min((jTile + 1) * tileSizeColumns, 1 + endColumn);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1770,for (int q = qStart; q < qEnd; ++q) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1771,for (int iTile = 0; iTile < tileNumber; ++iTile) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1772,final int p0        = iTile * tileSizeRows;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1773,"final int pStart    = Math.max(startRow, p0);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1774,"final int pEnd      = Math.min((iTile + 1) * tileSizeRows, 1 + endRow);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1775,"final int tileStart = tileIndex(iTile, jTile) *"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1776,tileSizeRows * tileSizeColumns;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1777,final int kStart = tileStart + (pStart - p0) * tileSizeColumns + (q - q0);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1778,"for (int p = pStart, k = kStart; p < pEnd; ++p, k += tileSizeColumns) {"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1779,"visitor.visit(p, q, data[k]);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1784,return visitor.end();
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1787,/** {@inheritDoc} */
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1788,public double walkInOptimizedOrder(final RealMatrixChangingVisitor visitor)
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1789,throws MatrixVisitorException {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1790,"visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1791,for (int index = 0; index < tileNumber * tileNumber; ++index) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1792,final int tileStart = index * tileSizeRows * tileSizeColumns;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1793,final long indices  = tilesIndices(index);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1794,final int iTile     = (int) (indices >> 32);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1795,final int jTile     = (int) (indices & 0xffffffff);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1796,final int pStart    = iTile * tileSizeRows;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1797,"final int pEnd      = Math.min(pStart + tileSizeRows, rows);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1798,final int qStart    = jTile * tileSizeColumns;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1799,"final int qEnd      = Math.min(qStart + tileSizeColumns, columns);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1800,for (int p = pStart; p < pEnd; ++p) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1801,final int kStart = tileStart + (p - pStart) * tileSizeColumns;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1802,"for (int q = qStart, k = kStart; q < qEnd; ++q, ++k) {"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1803,"data[k] = visitor.visit(p, q, data[k]);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1807,return visitor.end();
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1810,/** {@inheritDoc} */
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1811,public double walkInOptimizedOrder(final RealMatrixPreservingVisitor visitor)
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1812,throws MatrixVisitorException {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1813,"visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1814,for (int index = 0; index < tileNumber * tileNumber; ++index) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1815,final int tileStart = index * tileSizeRows * tileSizeColumns;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1816,final long indices  = tilesIndices(index);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1817,final int iTile     = (int) (indices >> 32);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1818,final int jTile     = (int) (indices & 0xffffffff);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1819,final int pStart    = iTile * tileSizeRows;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1820,"final int pEnd      = Math.min(pStart + tileSizeRows, rows);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1821,final int qStart    = jTile * tileSizeColumns;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1822,"final int qEnd      = Math.min(qStart + tileSizeColumns, columns);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1823,for (int p = pStart; p < pEnd; ++p) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1824,final int kStart = tileStart + (p - pStart) * tileSizeColumns;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1825,"for (int q = qStart, k = kStart; q < qEnd; ++q, ++k) {"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1826,"visitor.visit(p, q, data[k]);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1830,return visitor.end();
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1833,/** {@inheritDoc} */
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1834,"public double walkInOptimizedOrder(final RealMatrixChangingVisitor visitor,"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1835,"final int startRow, final int endRow,"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1836,"final int startColumn, final int endColumn)"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1837,"throws MatrixIndexException, MatrixVisitorException {"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1838,"checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1839,"visitor.start(rows, columns, startRow, endRow, startColumn, endColumn);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1840,for (int index = 0; index < tileNumber * tileNumber; ++index) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1841,final int tileStart = index * tileSizeRows * tileSizeColumns;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1842,final long indices  = tilesIndices(index);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1843,final int iTile     = (int) (indices >> 32);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1844,final int jTile     = (int) (indices & 0xffffffff);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1845,final int p0        = iTile * tileSizeRows;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1846,"final int pStart    = Math.max(startRow, p0);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1847,"final int pEnd      = Math.min((iTile + 1) * tileSizeRows, 1 + endRow);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1848,final int q0        = jTile * tileSizeColumns;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1849,"final int qStart    = Math.max(startColumn, q0);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1850,"final int qEnd      = Math.min((jTile + 1) * tileSizeColumns, 1 + endColumn);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1851,for (int p = pStart; p < pEnd; ++p) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1852,final int kStart = tileStart + (p - p0) * tileSizeColumns + (qStart - q0);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1853,"for (int q = qStart, k = kStart; q < qEnd; ++q, ++k) {"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1854,"data[k] = visitor.visit(p, q, data[k]);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1858,return visitor.end();
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1861,/** {@inheritDoc} */
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1862,"public double walkInOptimizedOrder(final RealMatrixPreservingVisitor visitor,"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1863,"final int startRow, final int endRow,"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1864,"final int startColumn, final int endColumn)"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1865,"throws MatrixIndexException, MatrixVisitorException {"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1866,"checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1867,"visitor.start(rows, columns, startRow, endRow, startColumn, endColumn);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1868,for (int index = 0; index < tileNumber * tileNumber; ++index) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1869,final int tileStart = index * tileSizeRows * tileSizeColumns;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1870,final long indices  = tilesIndices(index);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1871,final int iTile     = (int) (indices >> 32);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1872,final int jTile     = (int) (indices & 0xffffffff);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1873,final int p0        = iTile * tileSizeRows;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1874,"final int pStart    = Math.max(startRow, p0);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1875,"final int pEnd      = Math.min((iTile + 1) * tileSizeRows, 1 + endRow);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1876,final int q0        = jTile * tileSizeColumns;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1877,"final int qStart    = Math.max(startColumn, q0);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1878,"final int qEnd      = Math.min((jTile + 1) * tileSizeColumns, 1 + endColumn);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1879,for (int p = pStart; p < pEnd; ++p) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1880,final int kStart = tileStart + (p - p0) * tileSizeColumns + (qStart - q0);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1881,"for (int q = qStart, k = kStart; q < qEnd; ++q, ++k) {"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1882,"visitor.visit(p, q, data[k]);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1886,return visitor.end();
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1890,* Get the index of an element.
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1891,* @param row row index of the element
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1892,* @param column column index of the element
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1893,* @return index of the element
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1895,"private int index(final int row, final int columns) {"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1896,final int iTile       = row     / tileSizeRows;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1897,final int jTile       = columns / tileSizeColumns;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1898,"final int tileStart   = tileIndex(iTile, jTile) * tileSizeRows * tileSizeColumns;"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1899,final int indexInTile = (row % tileSizeRows) * tileSizeColumns +
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1900,(columns % tileSizeColumns);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1901,return tileStart + indexInTile;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1905,* Get the index of a tile.
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1906,* @param iTile row index of the tile
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1907,* @param jTile column index of the tile
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1908,* @return index of the tile
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1910,"private static int tileIndex(int iTile, int jTile) {"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1912,// compute n = 2^k such that a nxn square contains the indices
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1913,"int n = Integer.highestOneBit(Math.max(iTile, jTile)) << 1;"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1915,// start recursion by noting the index is somewhere in the nxn
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1916,// square whose lowest index is 0 and which has direct orientation
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1917,int lowIndex   = 0;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1918,boolean direct = true;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1920,// the tail-recursion on the square size is replaced by an iteration here
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1921,while (n > 1) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1923,// reduce square to 4 quadrants
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1924,n >>= 1;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1925,final int n2 = n * n;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1927,"// check in which quadrant the element is,"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1928,// updating the lowest index of the quadrant and its orientation
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1929,if (iTile < n) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1930,if (jTile < n) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1931,// the element is in the top-left quadrant
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1932,if (!direct) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1933,lowIndex += 2 * n2;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1934,direct = true;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1936,} else {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1937,// the element is in the top-right quadrant
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1938,jTile -= n;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1939,if (direct) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1940,lowIndex += n2;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1941,direct = false;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1942,} else {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1943,lowIndex += 3 * n2;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1946,} else {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1947,iTile -= n;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1948,if (jTile < n) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1949,// the element is in the bottom-left quadrant
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1950,if (direct) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1951,lowIndex += 3 * n2;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1952,} else {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1953,lowIndex += n2;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1954,direct = true;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1956,} else {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1957,// the element is in the bottom-right quadrant
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1958,jTile -= n;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1959,if (direct) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1960,lowIndex += 2 * n2;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1961,direct = false;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1967,// the lowest index of the remaining 1x1 quadrant is the requested index
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1968,return lowIndex;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1973,* Get the row and column tile indices of a tile.
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1974,* @param index index of the tile in the layout
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1975,* @return row and column indices packed in one long (row tile index
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1976,"* in 32 high order bits, column tile index in low order bits)"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1978,private static long tilesIndices(int index) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1980,// compute n = 2^k such that a nxn square contains the index
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1981,int n = Integer.highestOneBit((int) Math.sqrt(index)) << 1;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1983,// start recursion by noting the index is somewhere in the nxn
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1984,// square whose lowest index is 0 and which has direct orientation
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1985,int iLow       = 0;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1986,int jLow       = 0;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1987,boolean direct = true;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1989,// the tail-recursion on the square size is replaced by an iteration here
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1990,while (n > 1) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1992,// reduce square to 4 quadrants
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1993,n >>= 1;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1994,final int n2 = n * n;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1996,"// check in which quadrant the element is,"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1997,// updating the low indices of the quadrant and its orientation
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1998,switch (index / n2) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,1999,case 0 :
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,2000,if (!direct) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,2001,iLow += n;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,2002,jLow += n;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,2004,break;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,2005,case 1 :
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,2006,if (direct) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,2007,jLow += n;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,2008,} else {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,2009,iLow += n;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,2011,index -= n2;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,2012,direct = !direct;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,2013,break;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,2014,case 2 :
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,2015,if (direct) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,2016,iLow += n;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,2017,jLow += n;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,2019,index -= 2 * n2;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,2020,direct = !direct;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,2021,break;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,2022,default :
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,2023,if (direct) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,2024,iLow += n;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,2025,} else {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,2026,jLow += n;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,2028,index -= 3 * n2;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,2033,// the lowest indices of the remaining 1x1 quadrant are the requested indices
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,2034,return (((long) iLow) << 32) | (long) jLow;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,2039,* Compute the power of two number of tiles for a matrix.
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,2040,* @param rows number of rows
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,2041,* @param columns number of columns
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,2042,* @return power of two number of tiles
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,2044,"private static int tilesNumber(final int rows, final int columns) {"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,2046,"// find the minimal number of tiles, given that one double variable is 8 bytes"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,2047,final int nbElements         = rows * columns;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,2048,final int maxElementsPerTile = MAX_TILE_SIZE_BYTES / 8;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,2049,final int minTiles           = nbElements / maxElementsPerTile;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,2051,// the number of tiles must be a 2^k x 2^k square
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,2052,int twoK = 1;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,2053,for (int nTiles = minTiles; nTiles != 0; nTiles >>= 2) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,2054,twoK <<= 1;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,2057,// make sure the tiles have at least one row and one column each
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,2058,"// (this may lead to tile sizes greater than MAX_BLOCK_SIZE_BYTES,"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,2059,//  in degenerate cases like a 3000x1 matrix)
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,2060,"while (twoK > Math.min(rows, columns)) {"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,2061,twoK >>= 1;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,2064,return twoK;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,2069,* Compute optimal tile size for a row or column count.
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,2070,* @param count row or column count
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,2071,* @param twoK optimal tile number (must be a power of 2)
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,2072,* @return optimal tile size
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,2074,"private static int tileSize(final int count, final int twoK) {"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java,2075,return (count + twoK - 1) / twoK;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,4,* this work for additional information regarding copyright ownership.
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,7,* the License.  You may obtain a copy of the License at
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,14,* See the License for the specific language governing permissions and
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,15,* limitations under the License.
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,17,package org.apache.commons.math.linear;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,19,import java.util.Arrays;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,20,import java.util.Random;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,22,import junit.framework.Test;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,23,import junit.framework.TestCase;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,24,import junit.framework.TestSuite;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,27,* Test cases for the {@link RecursiveLayoutRealMatrix} class.
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,29,* @version $Revision$ $Date$
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,32,public final class RecursiveLayoutRealMatrixTest extends TestCase {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,34,// 3 x 3 identity matrix
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,35,"protected double[][] id = { {1d,0d,0d}, {0d,1d,0d}, {0d,0d,1d} };"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,37,// Test data for group operations
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,38,"protected double[][] testData = { {1d,2d,3d}, {2d,5d,3d}, {1d,0d,8d} };"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,39,"protected double[][] testDataLU = {{2d, 5d, 3d}, {.5d, -2.5d, 6.5d}, {0.5d, 0.2d, .2d}};"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,40,"protected double[][] testDataPlus2 = { {3d,4d,5d}, {4d,7d,5d}, {3d,2d,10d} };"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,41,"protected double[][] testDataMinus = { {-1d,-2d,-3d}, {-2d,-5d,-3d},"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,42,"{-1d,0d,-8d} };"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,43,"protected double[] testDataRow1 = {1d,2d,3d};"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,44,"protected double[] testDataCol3 = {3d,3d,8d};"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,45,protected double[][] testDataInv =
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,46,"{ {-40d,16d,9d}, {13d,-5d,-3d}, {5d,-2d,-1d} };"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,47,"protected double[] preMultTest = {8,12,33};"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,48,"protected double[][] testData2 ={ {1d,2d,3d}, {2d,5d,3d}};"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,49,"protected double[][] testData2T = { {1d,2d}, {2d,5d}, {3d,3d}};"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,50,protected double[][] testDataPlusInv =
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,51,"{ {-39d,18d,12d}, {15d,0d,0d}, {6d,-2d,7d} };"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,53,// lu decomposition tests
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,54,"protected double[][] luData = { {2d,3d,3d}, {0d,5d,7d}, {6d,9d,8d} };"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,55,"protected double[][] luDataLUDecomposition = { {6d,9d,8d}, {0d,5d,7d},"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,56,"{0.33333333333333,0d,0.33333333333333} };"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,58,// singular matrices
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,59,"protected double[][] singular = { {2d,3d}, {2d,3d} };"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,60,"protected double[][] bigSingular = {{1d,2d,3d,4d}, {2d,5d,3d,4d},"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,61,"{7d,3d,256d,1930d}, {3d,7d,6d,8d}}; // 4th row = 1st + 2nd"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,62,"protected double[][] detData = { {1d,2d,3d}, {4d,5d,6d}, {7d,8d,10d} };"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,63,"protected double[][] detData2 = { {1d, 3d}, {2d, 4d}};"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,65,// vectors
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,66,"protected double[] testVector = {1,2,3};"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,67,"protected double[] testVector2 = {1,2,3,4};"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,69,// submatrix accessor tests
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,70,"protected double[][] subTestData = {{1, 2, 3, 4}, {1.5, 2.5, 3.5, 4.5},"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,71,"{2, 4, 6, 8}, {4, 5, 6, 7}};"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,72,// array selections
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,73,"protected double[][] subRows02Cols13 = { {2, 4}, {4, 8}};"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,74,"protected double[][] subRows03Cols12 = { {2, 3}, {5, 6}};"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,75,"protected double[][] subRows03Cols123 = { {2, 3, 4} , {5, 6, 7}};"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,76,// effective permutations
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,77,"protected double[][] subRows20Cols123 = { {4, 6, 8} , {2, 3, 4}};"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,78,"protected double[][] subRows31Cols31 = {{7, 5}, {4.5, 2.5}};"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,79,// contiguous ranges
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,80,"protected double[][] subRows01Cols23 = {{3,4} , {3.5, 4.5}};"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,81,"protected double[][] subRows23Cols00 = {{2} , {4}};"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,82,protected double[][] subRows00Cols33 = {{4}};
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,83,// row matrices
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,84,"protected double[][] subRow0 = {{1,2,3,4}};"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,85,"protected double[][] subRow3 = {{4,5,6,7}};"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,86,// column matrices
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,87,"protected double[][] subColumn1 = {{2}, {2.5}, {4}, {5}};"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,88,"protected double[][] subColumn3 = {{4}, {4.5}, {8}, {7}};"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,90,// tolerances
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,91,protected double entryTolerance = 10E-16;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,92,protected double normTolerance = 10E-14;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,94,public RecursiveLayoutRealMatrixTest(String name) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,95,super(name);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,98,public void setUp() {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,102,public static Test suite() {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,103,TestSuite suite = new TestSuite(RecursiveLayoutRealMatrixTest.class);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,104,"suite.setName(""RecursiveLayoutRealMatrix Tests"");"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,105,return suite;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,108,/** test dimensions */
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,109,public void testDimensions() {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,110,RecursiveLayoutRealMatrix m = new RecursiveLayoutRealMatrix(testData);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,111,RecursiveLayoutRealMatrix m2 = new RecursiveLayoutRealMatrix(testData2);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,112,"assertEquals(""testData row dimension"",3,m.getRowDimension());"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,113,"assertEquals(""testData column dimension"",3,m.getColumnDimension());"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,114,"assertTrue(""testData is square"",m.isSquare());"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,115,"assertEquals(""testData2 row dimension"",m2.getRowDimension(),2);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,116,"assertEquals(""testData2 column dimension"",m2.getColumnDimension(),3);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,117,"assertTrue(""testData2 is not square"",!m2.isSquare());"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,120,/** test copy functions */
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,121,public void testCopyFunctions() {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,122,Random r = new Random(66636328996002l);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,123,"RecursiveLayoutRealMatrix m1 = createRandomMatrix(r, 47, 83);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,124,RecursiveLayoutRealMatrix m2 = new RecursiveLayoutRealMatrix(m1.getData());
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,125,"assertEquals(m1, m2);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,126,RecursiveLayoutRealMatrix m3 = new RecursiveLayoutRealMatrix(testData);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,127,RecursiveLayoutRealMatrix m4 = new RecursiveLayoutRealMatrix(m3.getData());
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,128,"assertEquals(m3, m4);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,131,/** test add */
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,132,public void testAdd() {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,133,RecursiveLayoutRealMatrix m = new RecursiveLayoutRealMatrix(testData);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,134,RecursiveLayoutRealMatrix mInv = new RecursiveLayoutRealMatrix(testDataInv);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,135,RealMatrix mPlusMInv = m.add(mInv);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,136,double[][] sumEntries = mPlusMInv.getData();
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,137,for (int row = 0; row < m.getRowDimension(); row++) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,138,for (int col = 0; col < m.getColumnDimension(); col++) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,139,"assertEquals(""sum entry entry"","
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,140,"testDataPlusInv[row][col],sumEntries[row][col],"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,141,entryTolerance);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,146,/** test add failure */
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,147,public void testAddFail() {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,148,RecursiveLayoutRealMatrix m = new RecursiveLayoutRealMatrix(testData);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,149,RecursiveLayoutRealMatrix m2 = new RecursiveLayoutRealMatrix(testData2);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,150,try {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,151,m.add(m2);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,152,"fail(""IllegalArgumentException expected"");"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,153,} catch (IllegalArgumentException ex) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,158,/** test norm */
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,159,public void testNorm() {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,160,RecursiveLayoutRealMatrix m = new RecursiveLayoutRealMatrix(testData);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,161,RecursiveLayoutRealMatrix m2 = new RecursiveLayoutRealMatrix(testData2);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,162,"assertEquals(""testData norm"",14d,m.getNorm(),entryTolerance);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,163,"assertEquals(""testData2 norm"",7d,m2.getNorm(),entryTolerance);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,166,/** test Frobenius norm */
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,167,public void testFrobeniusNorm() {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,168,RecursiveLayoutRealMatrix m = new RecursiveLayoutRealMatrix(testData);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,169,RecursiveLayoutRealMatrix m2 = new RecursiveLayoutRealMatrix(testData2);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,170,"assertEquals(""testData Frobenius norm"", Math.sqrt(117.0), m.getFrobeniusNorm(), entryTolerance);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,171,"assertEquals(""testData2 Frobenius norm"", Math.sqrt(52.0), m2.getFrobeniusNorm(), entryTolerance);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,174,/** test m-n = m + -n */
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,175,public void testPlusMinus() {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,176,RecursiveLayoutRealMatrix m = new RecursiveLayoutRealMatrix(testData);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,177,RecursiveLayoutRealMatrix m2 = new RecursiveLayoutRealMatrix(testDataInv);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,178,"assertClose(m.subtract(m2), m2.scalarMultiply(-1d).add(m), entryTolerance);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,179,try {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,180,m.subtract(new RecursiveLayoutRealMatrix(testData2));
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,181,"fail(""Expecting illegalArgumentException"");"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,182,} catch (IllegalArgumentException ex) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,187,/** test multiply */
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,188,public void testMultiply() {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,189,RecursiveLayoutRealMatrix m = new RecursiveLayoutRealMatrix(testData);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,190,RecursiveLayoutRealMatrix mInv = new RecursiveLayoutRealMatrix(testDataInv);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,191,RecursiveLayoutRealMatrix identity = new RecursiveLayoutRealMatrix(id);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,192,RecursiveLayoutRealMatrix m2 = new RecursiveLayoutRealMatrix(testData2);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,193,"assertClose(m.multiply(mInv), identity, entryTolerance);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,194,"assertClose(mInv.multiply(m), identity, entryTolerance);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,195,"assertClose(m.multiply(identity), m, entryTolerance);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,196,"assertClose(identity.multiply(mInv), mInv, entryTolerance);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,197,"assertClose(m2.multiply(identity), m2, entryTolerance);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,198,try {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,199,m.multiply(new RecursiveLayoutRealMatrix(bigSingular));
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,200,"fail(""Expecting illegalArgumentException"");"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,201,} catch (IllegalArgumentException ex) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,202,// expected
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,206,public void testSeveralBlocks() {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,208,"RealMatrix m = new RecursiveLayoutRealMatrix(35, 71);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,209,for (int i = 0; i < m.getRowDimension(); ++i) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,210,for (int j = 0; j < m.getColumnDimension(); ++j) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,211,"m.setEntry(i, j, i + j / 1024.0);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,215,RealMatrix mT = m.transpose();
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,216,"assertEquals(m.getRowDimension(), mT.getColumnDimension());"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,217,"assertEquals(m.getColumnDimension(), mT.getRowDimension());"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,218,for (int i = 0; i < mT.getRowDimension(); ++i) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,219,for (int j = 0; j < mT.getColumnDimension(); ++j) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,220,"assertEquals(m.getEntry(j, i), mT.getEntry(i, j), 0);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,224,RealMatrix mPm = m.add(m);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,225,for (int i = 0; i < mPm.getRowDimension(); ++i) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,226,for (int j = 0; j < mPm.getColumnDimension(); ++j) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,227,"assertEquals(2 * m.getEntry(i, j), mPm.getEntry(i, j), 0);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,231,RealMatrix mPmMm = mPm.subtract(m);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,232,for (int i = 0; i < mPmMm.getRowDimension(); ++i) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,233,for (int j = 0; j < mPmMm.getColumnDimension(); ++j) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,234,"assertEquals(m.getEntry(i, j), mPmMm.getEntry(i, j), 0);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,238,RealMatrix mTm = mT.multiply(m);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,239,for (int i = 0; i < mTm.getRowDimension(); ++i) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,240,for (int j = 0; j < mTm.getColumnDimension(); ++j) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,241,double sum = 0;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,242,for (int k = 0; k < mT.getColumnDimension(); ++k) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,243,sum += (k + i / 1024.0) * (k + j / 1024.0);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,245,"assertEquals(sum, mTm.getEntry(i, j), 0);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,249,RealMatrix mmT = m.multiply(mT);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,250,for (int i = 0; i < mmT.getRowDimension(); ++i) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,251,for (int j = 0; j < mmT.getColumnDimension(); ++j) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,252,double sum = 0;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,253,for (int k = 0; k < m.getColumnDimension(); ++k) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,254,sum += (i + k / 1024.0) * (j + k / 1024.0);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,256,"assertEquals(sum, mmT.getEntry(i, j), 0);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,260,"RealMatrix sub1 = m.getSubMatrix(2, 9, 5, 20);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,261,for (int i = 0; i < sub1.getRowDimension(); ++i) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,262,for (int j = 0; j < sub1.getColumnDimension(); ++j) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,263,"assertEquals((i + 2) + (j + 5) / 1024.0, sub1.getEntry(i, j), 0);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,267,"RealMatrix sub2 = m.getSubMatrix(10, 12, 3, 70);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,268,for (int i = 0; i < sub2.getRowDimension(); ++i) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,269,for (int j = 0; j < sub2.getColumnDimension(); ++j) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,270,"assertEquals((i + 10) + (j + 3) / 1024.0, sub2.getEntry(i, j), 0);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,274,"RealMatrix sub3 = m.getSubMatrix(30, 34, 0, 5);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,275,for (int i = 0; i < sub3.getRowDimension(); ++i) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,276,for (int j = 0; j < sub3.getColumnDimension(); ++j) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,277,"assertEquals((i + 30) + (j + 0) / 1024.0, sub3.getEntry(i, j), 0);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,281,"RealMatrix sub4 = m.getSubMatrix(30, 32, 62, 65);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,282,for (int i = 0; i < sub4.getRowDimension(); ++i) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,283,for (int j = 0; j < sub4.getColumnDimension(); ++j) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,284,"assertEquals((i + 30) + (j + 62) / 1024.0, sub4.getEntry(i, j), 0);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,290,//Additional Test for RecursiveLayoutRealMatrixTest.testMultiply
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,292,"private double[][] d3 = new double[][] {{1,2,3,4},{5,6,7,8}};"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,293,"private double[][] d4 = new double[][] {{1},{2},{3},{4}};"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,294,"private double[][] d5 = new double[][] {{30},{70}};"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,296,public void testMultiply2() {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,297,RealMatrix m3 = new RecursiveLayoutRealMatrix(d3);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,298,RealMatrix m4 = new RecursiveLayoutRealMatrix(d4);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,299,RealMatrix m5 = new RecursiveLayoutRealMatrix(d5);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,300,"assertClose(m3.multiply(m4), m5, entryTolerance);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,303,/** test trace */
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,304,public void testTrace() {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,305,RealMatrix m = new RecursiveLayoutRealMatrix(id);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,306,"assertEquals(""identity trace"",3d,m.getTrace(),entryTolerance);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,307,m = new RecursiveLayoutRealMatrix(testData2);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,308,try {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,309,m.getTrace();
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,310,"fail(""Expecting NonSquareMatrixException"");"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,311,} catch (NonSquareMatrixException ex) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,316,/** test scalarAdd */
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,317,public void testScalarAdd() {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,318,RealMatrix m = new RecursiveLayoutRealMatrix(testData);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,319,"assertClose(new RecursiveLayoutRealMatrix(testDataPlus2), m.scalarAdd(2d), entryTolerance);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,322,/** test operate */
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,323,public void testOperate() {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,324,RealMatrix m = new RecursiveLayoutRealMatrix(id);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,325,"assertClose(testVector, m.operate(testVector), entryTolerance);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,326,"assertClose(testVector, m.operate(new RealVectorImpl(testVector)).getData(), entryTolerance);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,327,m = new RecursiveLayoutRealMatrix(bigSingular);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,328,try {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,329,m.operate(testVector);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,330,"fail(""Expecting illegalArgumentException"");"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,331,} catch (IllegalArgumentException ex) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,336,public void testMultiplyMedium() {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,337,RealMatrix m1 = new RecursiveLayoutRealMatrix(
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,338,new double[][] {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,339,"{  80,  45,  13,  77, -82 },"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,340,"{ -90,  33,  98,  80,  74 },"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,341,"{  24, -37,  36,  -8, -69 },"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,342,"{ -74,   2,  32, -67, -65 },"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,343,"{ -29, -81,  44,  54, -65 },"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,344,"{  17,  58, -36, -98,  25 },"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,345,"{  48, -64, -95, -75,  34 }"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,347,RealMatrix m2 = new RecursiveLayoutRealMatrix(
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,348,new double[][] {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,349,"{  81,  58,  70,  18,   5, -57 },"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,350,"{ -54,  33,  87,  68, -22,  73 },"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,351,"{ -78,  -5,  34,  -7,  -3, -31 },"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,352,"{ -16, -82, -68,   7,  10, -47 },"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,353,"{  51,   4,  92,  15,  32, -51 }"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,355,RealMatrix m1m2 = m1.multiply(m2);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,356,RealMatrix reference = new RecursiveLayoutRealMatrix(
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,357,new double[][]{
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,358,"{  -2378,   -582,  -2823,  3718, -2483, -1115 },"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,359,"{ -14222, -10885,   1271,  1608,  1698, -3033 },"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,360,"{  -2257,    371,  -6119, -3427, -1462, -1290 },"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,361,"{ -10841,    848,  -5342, -2864, -3260,  9836 },"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,362,"{  -5586,  -9263, -17233, -6935,   -35, -4847 },"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,363,"{   3896,  11216,  13976,  4191, -1263,  7712 },"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,364,"{  17688,   7433,   2790, -2838,  2271, -2672 }"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,366,"assertEquals(0, m1m2.subtract(reference).getNorm(), 0.0);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,369,public void testOperateLarge() {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,370,int testBlockSize = 64;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,371,int p = (7 * testBlockSize) / 2;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,372,int q = (5 * testBlockSize) / 2;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,373,int r =  3 * testBlockSize;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,374,Random random = new Random(111007463902334l);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,375,"RealMatrix m1 = createRandomMatrix(random, p, q);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,376,"RealMatrix m2 = createRandomMatrix(random, q, r);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,377,RealMatrix m1m2 = m1.multiply(m2);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,378,for (int i = 0; i < r; ++i) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,379,"checkArrays(m1m2.getColumn(i), m1.operate(m2.getColumn(i)));"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,383,public void testOperatePremultiplyLarge() {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,384,int testBlockSize = 64;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,385,int p = (7 * testBlockSize) / 2;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,386,int q = (5 * testBlockSize) / 2;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,387,int r =  3 * testBlockSize;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,388,Random random = new Random(111007463902334l);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,389,"RealMatrix m1 = createRandomMatrix(random, p, q);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,390,"RealMatrix m2 = createRandomMatrix(random, q, r);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,391,RealMatrix m1m2 = m1.multiply(m2);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,392,for (int i = 0; i < p; ++i) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,393,"checkArrays(m1m2.getRow(i), m2.preMultiply(m1.getRow(i)));"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,397,/** test issue MATH-209 */
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,398,public void testMath209() {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,399,RealMatrix a = new RecursiveLayoutRealMatrix(new double[][] {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,400,"{ 1, 2 }, { 3, 4 }, { 5, 6 }"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,402,"double[] b = a.operate(new double[] { 1, 1 });"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,403,"assertEquals(a.getRowDimension(), b.length);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,404,"assertEquals( 3.0, b[0], 1.0e-12);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,405,"assertEquals( 7.0, b[1], 1.0e-12);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,406,"assertEquals(11.0, b[2], 1.0e-12);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,409,/** test transpose */
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,410,public void testTranspose() {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,411,RealMatrix m = new RecursiveLayoutRealMatrix(testData);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,412,RealMatrix mIT = new LUDecompositionImpl(m).getSolver().getInverse().transpose();
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,413,RealMatrix mTI = new LUDecompositionImpl(m.transpose()).getSolver().getInverse();
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,414,"assertClose(mIT, mTI, normTolerance);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,415,m = new RecursiveLayoutRealMatrix(testData2);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,416,RealMatrix mt = new RecursiveLayoutRealMatrix(testData2T);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,417,"assertClose(mt, m.transpose(), normTolerance);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,420,/** test preMultiply by vector */
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,421,public void testPremultiplyVector() {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,422,RealMatrix m = new RecursiveLayoutRealMatrix(testData);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,423,"assertClose(m.preMultiply(testVector), preMultTest, normTolerance);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,424,"assertClose(m.preMultiply(new RealVectorImpl(testVector).getData()),"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,425,"preMultTest, normTolerance);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,426,m = new RecursiveLayoutRealMatrix(bigSingular);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,427,try {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,428,m.preMultiply(testVector);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,429,"fail(""expecting IllegalArgumentException"");"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,430,} catch (IllegalArgumentException ex) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,435,public void testPremultiply() {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,436,RealMatrix m3 = new RecursiveLayoutRealMatrix(d3);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,437,RealMatrix m4 = new RecursiveLayoutRealMatrix(d4);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,438,RealMatrix m5 = new RecursiveLayoutRealMatrix(d5);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,439,"assertClose(m4.preMultiply(m3), m5, entryTolerance);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,441,RecursiveLayoutRealMatrix m = new RecursiveLayoutRealMatrix(testData);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,442,RecursiveLayoutRealMatrix mInv = new RecursiveLayoutRealMatrix(testDataInv);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,443,RecursiveLayoutRealMatrix identity = new RecursiveLayoutRealMatrix(id);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,444,"assertClose(m.preMultiply(mInv), identity, entryTolerance);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,445,"assertClose(mInv.preMultiply(m), identity, entryTolerance);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,446,"assertClose(m.preMultiply(identity), m, entryTolerance);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,447,"assertClose(identity.preMultiply(mInv), mInv, entryTolerance);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,448,try {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,449,m.preMultiply(new RecursiveLayoutRealMatrix(bigSingular));
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,450,"fail(""Expecting illegalArgumentException"");"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,451,} catch (IllegalArgumentException ex) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,456,public void testGetVectors() {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,457,RealMatrix m = new RecursiveLayoutRealMatrix(testData);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,458,"assertClose(m.getRow(0), testDataRow1, entryTolerance);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,459,"assertClose(m.getColumn(2), testDataCol3, entryTolerance);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,460,try {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,461,m.getRow(10);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,462,"fail(""expecting MatrixIndexException"");"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,463,} catch (MatrixIndexException ex) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,466,try {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,467,m.getColumn(-1);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,468,"fail(""expecting MatrixIndexException"");"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,469,} catch (MatrixIndexException ex) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,474,public void testGetEntry() {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,475,RealMatrix m = new RecursiveLayoutRealMatrix(testData);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,476,"assertEquals(""get entry"",m.getEntry(0,1),2d,entryTolerance);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,477,try {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,478,"m.getEntry(10, 4);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,479,"fail (""Expecting MatrixIndexException"");"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,480,} catch (MatrixIndexException ex) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,481,// expected
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,485,/** test examples in user guide */
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,486,public void testExamples() {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,487,// Create a real matrix with two rows and three columns
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,488,"double[][] matrixData = { {1d,2d,3d}, {2d,5d,3d}};"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,489,RealMatrix m = new RecursiveLayoutRealMatrix(matrixData);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,490,"// One more with three rows, two columns"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,491,"double[][] matrixData2 = { {1d,2d}, {2d,5d}, {1d, 7d}};"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,492,RealMatrix n = new RecursiveLayoutRealMatrix(matrixData2);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,493,// Now multiply m by n
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,494,RealMatrix p = m.multiply(n);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,495,"assertEquals(2, p.getRowDimension());"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,496,"assertEquals(2, p.getColumnDimension());"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,497,// Invert p
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,498,RealMatrix pInverse = new LUDecompositionImpl(p).getSolver().getInverse();
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,499,"assertEquals(2, pInverse.getRowDimension());"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,500,"assertEquals(2, pInverse.getColumnDimension());"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,502,// Solve example
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,503,"double[][] coefficientsData = {{2, 3, -2}, {-1, 7, 6}, {4, -3, -5}};"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,504,RealMatrix coefficients = new RecursiveLayoutRealMatrix(coefficientsData);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,505,"double[] constants = {1, -2, 1};"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,506,double[] solution = new LUDecompositionImpl(coefficients).getSolver().solve(constants);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,507,"assertEquals(2 * solution[0] + 3 * solution[1] -2 * solution[2], constants[0], 1E-12);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,508,"assertEquals(-1 * solution[0] + 7 * solution[1] + 6 * solution[2], constants[1], 1E-12);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,509,"assertEquals(4 * solution[0] - 3 * solution[1] -5 * solution[2], constants[2], 1E-12);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,513,// test submatrix accessors
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,514,public void testGetSubMatrix() {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,515,RealMatrix m = new RecursiveLayoutRealMatrix(subTestData);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,516,"checkGetSubMatrix(m, subRows23Cols00,  2 , 3 , 0, 0, false);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,517,"checkGetSubMatrix(m, subRows00Cols33,  0 , 0 , 3, 3, false);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,518,"checkGetSubMatrix(m, subRows01Cols23,  0 , 1 , 2, 3, false);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,519,"checkGetSubMatrix(m, subRows02Cols13,  new int[] { 0, 2 }, new int[] { 1, 3 },    false);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,520,"checkGetSubMatrix(m, subRows03Cols12,  new int[] { 0, 3 }, new int[] { 1, 2 },    false);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,521,"checkGetSubMatrix(m, subRows03Cols123, new int[] { 0, 3 }, new int[] { 1, 2, 3 }, false);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,522,"checkGetSubMatrix(m, subRows20Cols123, new int[] { 2, 0 }, new int[] { 1, 2, 3 }, false);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,523,"checkGetSubMatrix(m, subRows31Cols31,  new int[] { 3, 1 }, new int[] { 3, 1 },    false);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,524,"checkGetSubMatrix(m, subRows31Cols31,  new int[] { 3, 1 }, new int[] { 3, 1 },    false);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,525,"checkGetSubMatrix(m, null,  1, 0, 2, 4, true);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,526,"checkGetSubMatrix(m, null, -1, 1, 2, 2, true);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,527,"checkGetSubMatrix(m, null,  1, 0, 2, 2, true);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,528,"checkGetSubMatrix(m, null,  1, 0, 2, 4, true);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,529,"checkGetSubMatrix(m, null, new int[] {},    new int[] { 0 }, true);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,530,"checkGetSubMatrix(m, null, new int[] { 0 }, new int[] { 4 }, true);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,533,"private void checkGetSubMatrix(RealMatrix m, double[][] reference,"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,534,"int startRow, int endRow, int startColumn, int endColumn,"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,535,boolean mustFail) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,536,try {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,537,"RealMatrix sub = m.getSubMatrix(startRow, endRow, startColumn, endColumn);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,538,"assertEquals(new RecursiveLayoutRealMatrix(reference), sub);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,539,if (mustFail) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,540,"fail(""Expecting MatrixIndexException"");"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,542,} catch (MatrixIndexException e) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,543,if (!mustFail) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,544,throw e;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,549,"private void checkGetSubMatrix(RealMatrix m, double[][] reference,"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,550,"int[] selectedRows, int[] selectedColumns,"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,551,boolean mustFail) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,552,try {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,553,"RealMatrix sub = m.getSubMatrix(selectedRows, selectedColumns);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,554,"assertEquals(new RecursiveLayoutRealMatrix(reference), sub);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,555,if (mustFail) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,556,"fail(""Expecting MatrixIndexException"");"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,558,} catch (MatrixIndexException e) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,559,if (!mustFail) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,560,throw e;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,565,public void testGetSetMatrixLarge() {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,566,int n = 3 * 64;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,567,"RealMatrix m = new RecursiveLayoutRealMatrix(n, n);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,568,"RealMatrix sub = new RecursiveLayoutRealMatrix(n - 4, n - 4).scalarAdd(1);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,570,"m.setSubMatrix(sub.getData(), 2, 2);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,571,for (int i = 0; i < n; ++i) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,572,for (int j = 0; j < n; ++j) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,573,if ((i < 2) || (i > n - 3) || (j < 2) || (j > n - 3)) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,574,"assertEquals(0.0, m.getEntry(i, j), 0.0);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,575,} else {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,576,"assertEquals(1.0, m.getEntry(i, j), 0.0);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,580,"assertEquals(sub, m.getSubMatrix(2, n - 3, 2, n - 3));"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,584,public void testCopySubMatrix() {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,585,RealMatrix m = new RecursiveLayoutRealMatrix(subTestData);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,586,"checkCopy(m, subRows23Cols00,  2 , 3 , 0, 0, false);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,587,"checkCopy(m, subRows00Cols33,  0 , 0 , 3, 3, false);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,588,"checkCopy(m, subRows01Cols23,  0 , 1 , 2, 3, false);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,589,"checkCopy(m, subRows02Cols13,  new int[] { 0, 2 }, new int[] { 1, 3 },    false);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,590,"checkCopy(m, subRows03Cols12,  new int[] { 0, 3 }, new int[] { 1, 2 },    false);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,591,"checkCopy(m, subRows03Cols123, new int[] { 0, 3 }, new int[] { 1, 2, 3 }, false);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,592,"checkCopy(m, subRows20Cols123, new int[] { 2, 0 }, new int[] { 1, 2, 3 }, false);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,593,"checkCopy(m, subRows31Cols31,  new int[] { 3, 1 }, new int[] { 3, 1 },    false);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,594,"checkCopy(m, subRows31Cols31,  new int[] { 3, 1 }, new int[] { 3, 1 },    false);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,596,"checkCopy(m, null,  1, 0, 2, 4, true);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,597,"checkCopy(m, null, -1, 1, 2, 2, true);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,598,"checkCopy(m, null,  1, 0, 2, 2, true);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,599,"checkCopy(m, null,  1, 0, 2, 4, true);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,600,"checkCopy(m, null, new int[] {},    new int[] { 0 }, true);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,601,"checkCopy(m, null, new int[] { 0 }, new int[] { 4 }, true);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,604,"private void checkCopy(RealMatrix m, double[][] reference,"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,605,"int startRow, int endRow, int startColumn, int endColumn,"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,606,boolean mustFail) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,607,try {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,608,double[][] sub = (reference == null) ?
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,609,new double[1][1] :
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,610,new double[reference.length][reference[0].length];
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,611,"m.copySubMatrix(startRow, endRow, startColumn, endColumn, sub);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,612,"assertEquals(new RecursiveLayoutRealMatrix(reference), new RecursiveLayoutRealMatrix(sub));"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,613,if (mustFail) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,614,"fail(""Expecting MatrixIndexException"");"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,616,} catch (MatrixIndexException e) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,617,if (!mustFail) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,618,throw e;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,623,"private void checkCopy(RealMatrix m, double[][] reference,"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,624,"int[] selectedRows, int[] selectedColumns,"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,625,boolean mustFail) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,626,try {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,627,double[][] sub = (reference == null) ?
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,628,new double[1][1] :
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,629,new double[reference.length][reference[0].length];
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,630,"m.copySubMatrix(selectedRows, selectedColumns, sub);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,631,"assertEquals(new RecursiveLayoutRealMatrix(reference), new RecursiveLayoutRealMatrix(sub));"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,632,if (mustFail) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,633,"fail(""Expecting MatrixIndexException"");"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,635,} catch (MatrixIndexException e) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,636,if (!mustFail) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,637,throw e;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,642,public void testGetRowMatrix() {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,643,RealMatrix m     = new RecursiveLayoutRealMatrix(subTestData);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,644,RealMatrix mRow0 = new RecursiveLayoutRealMatrix(subRow0);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,645,RealMatrix mRow3 = new RecursiveLayoutRealMatrix(subRow3);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,646,"assertEquals(""Row0"", mRow0, m.getRowMatrix(0));"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,647,"assertEquals(""Row3"", mRow3, m.getRowMatrix(3));"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,648,try {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,649,m.getRowMatrix(-1);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,650,"fail(""Expecting MatrixIndexException"");"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,651,} catch (MatrixIndexException ex) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,652,// expected
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,654,try {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,655,m.getRowMatrix(4);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,656,"fail(""Expecting MatrixIndexException"");"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,657,} catch (MatrixIndexException ex) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,658,// expected
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,662,public void testSetRowMatrix() {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,663,RealMatrix m = new RecursiveLayoutRealMatrix(subTestData);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,664,RealMatrix mRow3 = new RecursiveLayoutRealMatrix(subRow3);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,665,"assertNotSame(mRow3, m.getRowMatrix(0));"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,666,"m.setRowMatrix(0, mRow3);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,667,"assertEquals(mRow3, m.getRowMatrix(0));"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,668,try {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,669,"m.setRowMatrix(-1, mRow3);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,670,"fail(""Expecting MatrixIndexException"");"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,671,} catch (MatrixIndexException ex) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,672,// expected
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,674,try {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,675,"m.setRowMatrix(0, m);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,676,"fail(""Expecting InvalidMatrixException"");"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,677,} catch (InvalidMatrixException ex) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,678,// expected
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,682,public void testGetSetRowMatrixLarge() {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,683,int n = 3 * 64;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,684,"RealMatrix m = new RecursiveLayoutRealMatrix(n, n);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,685,"RealMatrix sub = new RecursiveLayoutRealMatrix(1, n).scalarAdd(1);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,687,"m.setRowMatrix(2, sub);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,688,for (int i = 0; i < n; ++i) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,689,for (int j = 0; j < n; ++j) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,690,if (i != 2) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,691,"assertEquals(0.0, m.getEntry(i, j), 0.0);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,692,} else {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,693,"assertEquals(1.0, m.getEntry(i, j), 0.0);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,697,"assertEquals(sub, m.getRowMatrix(2));"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,701,public void testGetColumnMatrix() {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,702,RealMatrix m = new RecursiveLayoutRealMatrix(subTestData);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,703,RealMatrix mColumn1 = new RecursiveLayoutRealMatrix(subColumn1);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,704,RealMatrix mColumn3 = new RecursiveLayoutRealMatrix(subColumn3);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,705,"assertEquals(mColumn1, m.getColumnMatrix(1));"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,706,"assertEquals(mColumn3, m.getColumnMatrix(3));"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,707,try {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,708,m.getColumnMatrix(-1);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,709,"fail(""Expecting MatrixIndexException"");"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,710,} catch (MatrixIndexException ex) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,711,// expected
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,713,try {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,714,m.getColumnMatrix(4);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,715,"fail(""Expecting MatrixIndexException"");"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,716,} catch (MatrixIndexException ex) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,717,// expected
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,721,public void testSetColumnMatrix() {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,722,RealMatrix m = new RecursiveLayoutRealMatrix(subTestData);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,723,RealMatrix mColumn3 = new RecursiveLayoutRealMatrix(subColumn3);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,724,"assertNotSame(mColumn3, m.getColumnMatrix(1));"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,725,"m.setColumnMatrix(1, mColumn3);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,726,"assertEquals(mColumn3, m.getColumnMatrix(1));"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,727,try {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,728,"m.setColumnMatrix(-1, mColumn3);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,729,"fail(""Expecting MatrixIndexException"");"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,730,} catch (MatrixIndexException ex) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,731,// expected
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,733,try {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,734,"m.setColumnMatrix(0, m);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,735,"fail(""Expecting InvalidMatrixException"");"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,736,} catch (InvalidMatrixException ex) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,737,// expected
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,741,public void testGetSetColumnMatrixLarge() {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,742,int n = 3 * 64;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,743,"RealMatrix m = new RecursiveLayoutRealMatrix(n, n);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,744,"RealMatrix sub = new RecursiveLayoutRealMatrix(n, 1).scalarAdd(1);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,746,"m.setColumnMatrix(2, sub);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,747,for (int i = 0; i < n; ++i) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,748,for (int j = 0; j < n; ++j) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,749,if (j != 2) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,750,"assertEquals(0.0, m.getEntry(i, j), 0.0);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,751,} else {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,752,"assertEquals(1.0, m.getEntry(i, j), 0.0);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,756,"assertEquals(sub, m.getColumnMatrix(2));"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,760,public void testGetRowVector() {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,761,RealMatrix m = new RecursiveLayoutRealMatrix(subTestData);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,762,RealVector mRow0 = new RealVectorImpl(subRow0[0]);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,763,RealVector mRow3 = new RealVectorImpl(subRow3[0]);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,764,"assertEquals(mRow0, m.getRowVector(0));"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,765,"assertEquals(mRow3, m.getRowVector(3));"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,766,try {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,767,m.getRowVector(-1);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,768,"fail(""Expecting MatrixIndexException"");"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,769,} catch (MatrixIndexException ex) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,770,// expected
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,772,try {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,773,m.getRowVector(4);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,774,"fail(""Expecting MatrixIndexException"");"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,775,} catch (MatrixIndexException ex) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,776,// expected
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,780,public void testSetRowVector() {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,781,RealMatrix m = new RecursiveLayoutRealMatrix(subTestData);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,782,RealVector mRow3 = new RealVectorImpl(subRow3[0]);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,783,"assertNotSame(mRow3, m.getRowMatrix(0));"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,784,"m.setRowVector(0, mRow3);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,785,"assertEquals(mRow3, m.getRowVector(0));"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,786,try {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,787,"m.setRowVector(-1, mRow3);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,788,"fail(""Expecting MatrixIndexException"");"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,789,} catch (MatrixIndexException ex) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,790,// expected
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,792,try {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,793,"m.setRowVector(0, new RealVectorImpl(5));"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,794,"fail(""Expecting InvalidMatrixException"");"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,795,} catch (InvalidMatrixException ex) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,796,// expected
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,800,public void testGetSetRowVectorLarge() {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,801,int n = 3 * 64;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,802,"RealMatrix m = new RecursiveLayoutRealMatrix(n, n);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,803,"RealVector sub = new RealVectorImpl(n, 1.0);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,805,"m.setRowVector(2, sub);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,806,for (int i = 0; i < n; ++i) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,807,for (int j = 0; j < n; ++j) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,808,if (i != 2) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,809,"assertEquals(0.0, m.getEntry(i, j), 0.0);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,810,} else {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,811,"assertEquals(1.0, m.getEntry(i, j), 0.0);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,815,"assertEquals(sub, m.getRowVector(2));"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,819,public void testGetColumnVector() {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,820,RealMatrix m = new RecursiveLayoutRealMatrix(subTestData);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,821,RealVector mColumn1 = columnToVector(subColumn1);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,822,RealVector mColumn3 = columnToVector(subColumn3);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,823,"assertEquals(mColumn1, m.getColumnVector(1));"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,824,"assertEquals(mColumn3, m.getColumnVector(3));"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,825,try {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,826,m.getColumnVector(-1);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,827,"fail(""Expecting MatrixIndexException"");"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,828,} catch (MatrixIndexException ex) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,829,// expected
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,831,try {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,832,m.getColumnVector(4);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,833,"fail(""Expecting MatrixIndexException"");"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,834,} catch (MatrixIndexException ex) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,835,// expected
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,839,public void testSetColumnVector() {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,840,RealMatrix m = new RecursiveLayoutRealMatrix(subTestData);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,841,RealVector mColumn3 = columnToVector(subColumn3);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,842,"assertNotSame(mColumn3, m.getColumnVector(1));"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,843,"m.setColumnVector(1, mColumn3);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,844,"assertEquals(mColumn3, m.getColumnVector(1));"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,845,try {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,846,"m.setColumnVector(-1, mColumn3);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,847,"fail(""Expecting MatrixIndexException"");"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,848,} catch (MatrixIndexException ex) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,849,// expected
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,851,try {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,852,"m.setColumnVector(0, new RealVectorImpl(5));"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,853,"fail(""Expecting InvalidMatrixException"");"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,854,} catch (InvalidMatrixException ex) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,855,// expected
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,859,public void testGetSetColumnVectorLarge() {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,860,int n = 3 * 64;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,861,"RealMatrix m = new RecursiveLayoutRealMatrix(n, n);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,862,"RealVector sub = new RealVectorImpl(n, 1.0);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,864,"m.setColumnVector(2, sub);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,865,for (int i = 0; i < n; ++i) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,866,for (int j = 0; j < n; ++j) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,867,if (j != 2) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,868,"assertEquals(0.0, m.getEntry(i, j), 0.0);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,869,} else {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,870,"assertEquals(1.0, m.getEntry(i, j), 0.0);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,874,"assertEquals(sub, m.getColumnVector(2));"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,878,private RealVector columnToVector(double[][] column) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,879,double[] data = new double[column.length];
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,880,for (int i = 0; i < data.length; ++i) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,881,data[i] = column[i][0];
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,883,"return new RealVectorImpl(data, false);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,886,public void testGetRow() {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,887,RealMatrix m = new RecursiveLayoutRealMatrix(subTestData);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,888,"checkArrays(subRow0[0], m.getRow(0));"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,889,"checkArrays(subRow3[0], m.getRow(3));"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,890,try {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,891,m.getRow(-1);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,892,"fail(""Expecting MatrixIndexException"");"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,893,} catch (MatrixIndexException ex) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,894,// expected
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,896,try {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,897,m.getRow(4);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,898,"fail(""Expecting MatrixIndexException"");"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,899,} catch (MatrixIndexException ex) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,900,// expected
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,904,public void testSetRow() {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,905,RealMatrix m = new RecursiveLayoutRealMatrix(subTestData);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,906,assertTrue(subRow3[0][0] != m.getRow(0)[0]);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,907,"m.setRow(0, subRow3[0]);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,908,"checkArrays(subRow3[0], m.getRow(0));"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,909,try {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,910,"m.setRow(-1, subRow3[0]);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,911,"fail(""Expecting MatrixIndexException"");"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,912,} catch (MatrixIndexException ex) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,913,// expected
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,915,try {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,916,"m.setRow(0, new double[5]);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,917,"fail(""Expecting InvalidMatrixException"");"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,918,} catch (InvalidMatrixException ex) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,919,// expected
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,923,public void testGetSetRowLarge() {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,924,int n = 3 * 64;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,925,"RealMatrix m = new RecursiveLayoutRealMatrix(n, n);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,926,double[] sub = new double[n];
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,927,"Arrays.fill(sub, 1.0);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,929,"m.setRow(2, sub);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,930,for (int i = 0; i < n; ++i) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,931,for (int j = 0; j < n; ++j) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,932,if (i != 2) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,933,"assertEquals(0.0, m.getEntry(i, j), 0.0);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,934,} else {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,935,"assertEquals(1.0, m.getEntry(i, j), 0.0);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,939,"checkArrays(sub, m.getRow(2));"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,943,public void testGetColumn() {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,944,RealMatrix m = new RecursiveLayoutRealMatrix(subTestData);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,945,double[] mColumn1 = columnToArray(subColumn1);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,946,double[] mColumn3 = columnToArray(subColumn3);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,947,"checkArrays(mColumn1, m.getColumn(1));"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,948,"checkArrays(mColumn3, m.getColumn(3));"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,949,try {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,950,m.getColumn(-1);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,951,"fail(""Expecting MatrixIndexException"");"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,952,} catch (MatrixIndexException ex) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,953,// expected
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,955,try {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,956,m.getColumn(4);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,957,"fail(""Expecting MatrixIndexException"");"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,958,} catch (MatrixIndexException ex) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,959,// expected
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,963,public void testSetColumn() {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,964,RealMatrix m = new RecursiveLayoutRealMatrix(subTestData);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,965,double[] mColumn3 = columnToArray(subColumn3);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,966,assertTrue(mColumn3[0] != m.getColumn(1)[0]);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,967,"m.setColumn(1, mColumn3);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,968,"checkArrays(mColumn3, m.getColumn(1));"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,969,try {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,970,"m.setColumn(-1, mColumn3);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,971,"fail(""Expecting MatrixIndexException"");"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,972,} catch (MatrixIndexException ex) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,973,// expected
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,975,try {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,976,"m.setColumn(0, new double[5]);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,977,"fail(""Expecting InvalidMatrixException"");"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,978,} catch (InvalidMatrixException ex) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,979,// expected
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,983,public void testGetSetColumnLarge() {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,984,int n = 3 * 64;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,985,"RealMatrix m = new RecursiveLayoutRealMatrix(n, n);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,986,double[] sub = new double[n];
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,987,"Arrays.fill(sub, 1.0);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,989,"m.setColumn(2, sub);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,990,for (int i = 0; i < n; ++i) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,991,for (int j = 0; j < n; ++j) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,992,if (j != 2) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,993,"assertEquals(0.0, m.getEntry(i, j), 0.0);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,994,} else {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,995,"assertEquals(1.0, m.getEntry(i, j), 0.0);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,999,"checkArrays(sub, m.getColumn(2));"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1003,private double[] columnToArray(double[][] column) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1004,double[] data = new double[column.length];
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1005,for (int i = 0; i < data.length; ++i) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1006,data[i] = column[i][0];
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1008,return data;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1011,"private void checkArrays(double[] expected, double[] actual) {"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1012,"assertEquals(expected.length, actual.length);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1013,for (int i = 0; i < expected.length; ++i) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1014,"assertEquals(expected[i], actual[i], 1.0e-9 * Math.abs(expected[i]));"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1018,public void testEqualsAndHashCode() {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1019,RecursiveLayoutRealMatrix m = new RecursiveLayoutRealMatrix(testData);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1020,RecursiveLayoutRealMatrix m1 = (RecursiveLayoutRealMatrix) m.copy();
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1021,RecursiveLayoutRealMatrix mt = (RecursiveLayoutRealMatrix) m.transpose();
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1022,assertTrue(m.hashCode() != mt.hashCode());
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1023,"assertEquals(m.hashCode(), m1.hashCode());"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1024,"assertEquals(m, m);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1025,"assertEquals(m, m1);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1026,assertFalse(m.equals(null));
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1027,assertFalse(m.equals(mt));
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1028,assertFalse(m.equals(new RecursiveLayoutRealMatrix(bigSingular)));
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1031,public void testToString() {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1032,RecursiveLayoutRealMatrix m = new RecursiveLayoutRealMatrix(testData);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1033,"assertEquals(""RecursiveLayoutRealMatrix{{1.0,2.0,3.0},{2.0,5.0,3.0},{1.0,0.0,8.0}}"","
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1034,m.toString());
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1037,public void testSetSubMatrix() throws Exception {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1038,RecursiveLayoutRealMatrix m = new RecursiveLayoutRealMatrix(testData);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1039,"m.setSubMatrix(detData2,1,1);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1040,RealMatrix expected = new RecursiveLayoutRealMatrix
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1041,"(new double[][] {{1.0,2.0,3.0},{2.0,1.0,3.0},{1.0,2.0,4.0}});"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1042,"assertEquals(expected, m);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1044,"m.setSubMatrix(detData2,0,0);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1045,expected = new RecursiveLayoutRealMatrix
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1046,"(new double[][] {{1.0,3.0,3.0},{2.0,4.0,3.0},{1.0,2.0,4.0}});"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1047,"assertEquals(expected, m);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1049,"m.setSubMatrix(testDataPlus2,0,0);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1050,expected = new RecursiveLayoutRealMatrix
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1051,"(new double[][] {{3.0,4.0,5.0},{4.0,7.0,5.0},{3.0,2.0,10.0}});"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1052,"assertEquals(expected, m);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1054,// javadoc example
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1055,RecursiveLayoutRealMatrix matrix = new RecursiveLayoutRealMatrix
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1056,"(new double[][] {{1, 2, 3, 4}, {5, 6, 7, 8}, {9, 0, 1 , 2}});"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1057,"matrix.setSubMatrix(new double[][] {{3, 4}, {5, 6}}, 1, 1);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1058,expected = new RecursiveLayoutRealMatrix
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1059,"(new double[][] {{1, 2, 3, 4}, {5, 3, 4, 8}, {9, 5 ,6, 2}});"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1060,"assertEquals(expected, matrix);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1062,// dimension overflow
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1063,try {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1064,"m.setSubMatrix(testData,1,1);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1065,"fail(""expecting MatrixIndexException"");"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1066,} catch (MatrixIndexException e) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1067,// expected
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1069,// dimension underflow
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1070,try {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1071,"m.setSubMatrix(testData,-1,1);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1072,"fail(""expecting MatrixIndexException"");"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1073,} catch (MatrixIndexException e) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1074,// expected
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1076,try {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1077,"m.setSubMatrix(testData,1,-1);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1078,"fail(""expecting MatrixIndexException"");"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1079,} catch (MatrixIndexException e) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1080,// expected
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1083,// null
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1084,try {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1085,"m.setSubMatrix(null,1,1);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1086,"fail(""expecting NullPointerException"");"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1087,} catch (NullPointerException e) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1088,// expected
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1091,// ragged
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1092,try {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1093,"m.setSubMatrix(new double[][] {{1}, {2, 3}}, 0, 0);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1094,"fail(""expecting IllegalArgumentException"");"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1095,} catch (IllegalArgumentException e) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1096,// expected
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1099,// empty
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1100,try {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1101,"m.setSubMatrix(new double[][] {{}}, 0, 0);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1102,"fail(""expecting IllegalArgumentException"");"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1103,} catch (IllegalArgumentException e) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1104,// expected
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1109,public void testWalk() {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1110,int rows    = 150;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1111,int columns = 75;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1113,"RealMatrix m = new RecursiveLayoutRealMatrix(rows, columns);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1114,m.walkInRowOrder(new SetVisitor());
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1115,GetVisitor getVisitor = new GetVisitor();
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1116,m.walkInOptimizedOrder(getVisitor);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1117,"assertEquals(rows * columns, getVisitor.getCount());"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1119,"m = new RecursiveLayoutRealMatrix(rows, columns);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1120,"m.walkInRowOrder(new SetVisitor(), 1, rows - 2, 1, columns - 2);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1121,getVisitor = new GetVisitor();
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1122,"m.walkInOptimizedOrder(getVisitor, 1, rows - 2, 1, columns - 2);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1123,"assertEquals((rows - 2) * (columns - 2), getVisitor.getCount());"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1124,for (int i = 0; i < rows; ++i) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1125,"assertEquals(0.0, m.getEntry(i, 0), 0);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1126,"assertEquals(0.0, m.getEntry(i, columns - 1), 0);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1128,for (int j = 0; j < columns; ++j) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1129,"assertEquals(0.0, m.getEntry(0, j), 0);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1130,"assertEquals(0.0, m.getEntry(rows - 1, j), 0);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1133,"m = new RecursiveLayoutRealMatrix(rows, columns);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1134,m.walkInColumnOrder(new SetVisitor());
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1135,getVisitor = new GetVisitor();
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1136,m.walkInOptimizedOrder(getVisitor);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1137,"assertEquals(rows * columns, getVisitor.getCount());"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1139,"m = new RecursiveLayoutRealMatrix(rows, columns);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1140,"m.walkInColumnOrder(new SetVisitor(), 1, rows - 2, 1, columns - 2);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1141,getVisitor = new GetVisitor();
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1142,"m.walkInOptimizedOrder(getVisitor, 1, rows - 2, 1, columns - 2);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1143,"assertEquals((rows - 2) * (columns - 2), getVisitor.getCount());"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1144,for (int i = 0; i < rows; ++i) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1145,"assertEquals(0.0, m.getEntry(i, 0), 0);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1146,"assertEquals(0.0, m.getEntry(i, columns - 1), 0);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1148,for (int j = 0; j < columns; ++j) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1149,"assertEquals(0.0, m.getEntry(0, j), 0);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1150,"assertEquals(0.0, m.getEntry(rows - 1, j), 0);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1153,"m = new RecursiveLayoutRealMatrix(rows, columns);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1154,m.walkInOptimizedOrder(new SetVisitor());
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1155,getVisitor = new GetVisitor();
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1156,m.walkInRowOrder(getVisitor);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1157,"assertEquals(rows * columns, getVisitor.getCount());"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1159,"m = new RecursiveLayoutRealMatrix(rows, columns);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1160,"m.walkInOptimizedOrder(new SetVisitor(), 1, rows - 2, 1, columns - 2);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1161,getVisitor = new GetVisitor();
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1162,"m.walkInRowOrder(getVisitor, 1, rows - 2, 1, columns - 2);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1163,"assertEquals((rows - 2) * (columns - 2), getVisitor.getCount());"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1164,for (int i = 0; i < rows; ++i) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1165,"assertEquals(0.0, m.getEntry(i, 0), 0);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1166,"assertEquals(0.0, m.getEntry(i, columns - 1), 0);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1168,for (int j = 0; j < columns; ++j) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1169,"assertEquals(0.0, m.getEntry(0, j), 0);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1170,"assertEquals(0.0, m.getEntry(rows - 1, j), 0);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1173,"m = new RecursiveLayoutRealMatrix(rows, columns);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1174,m.walkInOptimizedOrder(new SetVisitor());
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1175,getVisitor = new GetVisitor();
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1176,m.walkInColumnOrder(getVisitor);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1177,"assertEquals(rows * columns, getVisitor.getCount());"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1179,"m = new RecursiveLayoutRealMatrix(rows, columns);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1180,"m.walkInOptimizedOrder(new SetVisitor(), 1, rows - 2, 1, columns - 2);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1181,getVisitor = new GetVisitor();
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1182,"m.walkInColumnOrder(getVisitor, 1, rows - 2, 1, columns - 2);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1183,"assertEquals((rows - 2) * (columns - 2), getVisitor.getCount());"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1184,for (int i = 0; i < rows; ++i) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1185,"assertEquals(0.0, m.getEntry(i, 0), 0);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1186,"assertEquals(0.0, m.getEntry(i, columns - 1), 0);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1188,for (int j = 0; j < columns; ++j) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1189,"assertEquals(0.0, m.getEntry(0, j), 0);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1190,"assertEquals(0.0, m.getEntry(rows - 1, j), 0);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1195,private static class SetVisitor extends DefaultRealMatrixChangingVisitor {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1196,private static final long serialVersionUID = 1773444180892369386L;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1197,"public double visit(int i, int j, double value) {"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1198,return i + j / 1024.0;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1202,private static class GetVisitor extends DefaultRealMatrixPreservingVisitor {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1203,private static final long serialVersionUID = -7745543227178932689L;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1204,private int count = 0;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1205,"public void visit(int i, int j, double value) {"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1206,++count;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1207,"assertEquals(i + j / 1024.0, value, 0.0);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1209,public int getCount() {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1210,return count;
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1214,//--------------- -----------------Protected methods
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1216,/** verifies that two matrices are close (1-norm) */
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1217,"protected void assertClose(RealMatrix m, RealMatrix n, double tolerance) {"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1218,assertTrue(m.subtract(n).getNorm() < tolerance);
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1221,/** verifies that two vectors are close (sup norm) */
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1222,"protected void assertClose(double[] m, double[] n, double tolerance) {"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1223,if (m.length != n.length) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1224,"fail(""vectors not same length"");"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1226,for (int i = 0; i < m.length; i++) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1227,"assertEquals(m[i], n[i], tolerance);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1231,"private RecursiveLayoutRealMatrix createRandomMatrix(Random r, int rows, int columns) {"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1232,"RecursiveLayoutRealMatrix m = new RecursiveLayoutRealMatrix(rows, columns);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1233,for (int i = 0; i < rows; ++i) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1234,for (int j = 0; j < columns; ++j) {
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1235,"m.setEntry(i, j, 200 * r.nextDouble() - 100);"
True,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrixTest.java,1238,return m;

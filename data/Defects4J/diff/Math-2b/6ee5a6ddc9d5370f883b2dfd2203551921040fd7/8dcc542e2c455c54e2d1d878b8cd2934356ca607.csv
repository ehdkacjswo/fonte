is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,31," Implementations of this interface maintain data structures, called"
False,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,32," <i>distribution digests</i>, that describe empirical distributions and"
True,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,31,"* Implementations of this interface maintain data structures, called"
True,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,32,"* <i>distribution digests</i>, that describe empirical distributions and"
False,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,42, Applications can use <code>EmpiricalDistribution</code> implementations to
True,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,42,* Applications can use <code>EmpiricalDistribution</code> implementations to
False,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,46, @version $Revision: 1.17 $ $Date: 2004/04/12 02:27:49 $
True,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,46,* @version $Revision: 1.18 $ $Date: 2004/06/14 23:15:14 $
False,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,55,oid load(double[] dataArray);
True,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,55,void load(double[] dataArray);
False,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,62,oid load(String filePath) throws IOException;
True,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,62,void load(String filePath) throws IOException;
False,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,85,ouble getNextValue() throws IllegalStateException;
True,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,85,double getNextValue() throws IllegalStateException;
False,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,102,oid loadDistribution(File file) throws IOException;
True,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,102,void loadDistribution(File file) throws IOException;
False,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,106, @param filePath fully qualified file path for a file
False,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,107, containing a digested distribution
True,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,106,* @param filePath fully qualified file path for a file
True,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,107,* containing a digested distribution
False,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,110,oid loadDistribution(String filePath) throws IOException;
True,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,110,void loadDistribution(String filePath) throws IOException;
False,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,120,oid saveDistribution(String filePath) throws
True,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,120,void saveDistribution(String filePath) throws
False,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,137,oolean isLoaded();
True,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,137,boolean isLoaded();
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,33, uses what amounts to the
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,33,* uses what amounts to the
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,37, <ol><li>Pass the file once to compute min and max.</li>
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,37,* <ol><li>Pass the file once to compute min and max.</li>
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,56, @version $Revision: 1.20 $ $Date: 2004/06/02 00:20:21 $
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,56,* @version $Revision: 1.21 $ $Date: 2004/06/14 23:15:14 $
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,113,ufferedReader in =
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,114,ew BufferedReader(new InputStreamReader(new FileInputStream(filePath)));
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,113,BufferedReader in =
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,114,new BufferedReader(new InputStreamReader(new FileInputStream(filePath)));
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,122,n = new BufferedReader(new InputStreamReader(new FileInputStream(filePath)));
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,122,in = new BufferedReader(new InputStreamReader(new FileInputStream(filePath)));
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,131,ufferedReader in =
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,131,BufferedReader in =
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,170, Provides methods for computing <code>sampleStats</code> and
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,171, <code>beanStats</code> abstracting the source of data.
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,170,* Provides methods for computing <code>sampleStats</code> and
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,171,* <code>beanStats</code> abstracting the source of data.
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,174,"ublic abstract void computeBinStats(double min, double delta)"
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,174,"public abstract void computeBinStats(double min, double delta)"
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,181, is returned.
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,181,* is returned.
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,209,"ublic void computeBinStats(double min, double delta)"
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,209,"public void computeBinStats(double min, double delta)"
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,266,ath.max((int) Math.ceil((inputArray[i] - min) / delta)
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,266,Math.max((int) Math.ceil((inputArray[i] - min) / delta)
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,276,rivate void fillBinStats(Object in) throws IOException {
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,276,private void fillBinStats(Object in) throws IOException {
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,328,ublic double getNextValue() throws IllegalStateException {
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,328,public double getNextValue() throws IllegalStateException {
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,341,f (stats.getN() > 0) {
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,342,f (stats.getStandardDeviation() > 0) {  // more than one obs
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,341,if (stats.getN() > 0) {
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,342,if (stats.getStandardDeviation() > 0) {  // more than one obs
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,362,ublic void saveDistribution(String filePath) throws
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,362,public void saveDistribution(String filePath) throws
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,367,ublic void saveDistribution(File file) throws
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,367,public void saveDistribution(File file) throws
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,22, @version $Revision: 1.9 $ $Date: 2004/04/11 19:00:45 $
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,22,* @version $Revision: 1.10 $ $Date: 2004/06/14 23:15:15 $
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,24,ublic interface RandomData {
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,24,public interface RandomData {
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,29," The generated string will be random, but not cryptographically"
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,30," secure. To generate cryptographically secure strings, use"
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,29,"* The generated string will be random, but not cryptographically"
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,30,"* secure. To generate cryptographically secure strings, use"
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,34, <li><code>len > 0</code> (otherwise an IllegalArgumentException
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,34,* <li><code>len > 0</code> (otherwise an IllegalArgumentException
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,39, @return random string of hex characters of length <code>len</code>
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,39,* @return random string of hex characters of length <code>len</code>
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,41,tring nextHexString(int len);
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,41,String nextHexString(int len);
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,44, Generates a uniformly distributed random integer between
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,44,* Generates a uniformly distributed random integer between
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,48," To generate cryptographically secure integer sequences, use"
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,48,"* To generate cryptographically secure integer sequences, use"
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,52, <li><code>lower < upper</code> (otherwise an IllegalArgumentException
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,52,* <li><code>lower < upper</code> (otherwise an IllegalArgumentException
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,58, @return a random integer greater than or equal to <code>lower</code>
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,58,* @return a random integer greater than or equal to <code>lower</code>
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,61,"nt nextInt(int lower, int upper);"
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,61,"int nextInt(int lower, int upper);"
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,67," The generated long integer values will be random, but not"
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,67,"* The generated long integer values will be random, but not"
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,69," To generate cryptographically secure sequences of longs, use"
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,69,"* To generate cryptographically secure sequences of longs, use"
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,73, <li><code>lower < upper</code> (otherwise an IllegalArgumentException
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,73,* <li><code>lower < upper</code> (otherwise an IllegalArgumentException
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,82,"ong nextLong(long lower, long upper);"
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,82,"long nextLong(long lower, long upper);"
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,85, Generates a random string of hex characters from a secure random
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,85,* Generates a random string of hex characters from a secure random
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,88," If cryptographic security is not required,"
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,88,"* If cryptographic security is not required,"
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,92, <li><code>len > 0</code> (otherwise an IllegalArgumentException
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,92,* <li><code>len > 0</code> (otherwise an IllegalArgumentException
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,98,tring nextSecureHexString(int len);
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,98,String nextSecureHexString(int len);
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,101, Generates a uniformly distributed random integer between
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,102, <code>lower</code> and <code>upper</code> (endpoints included)
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,101,* Generates a uniformly distributed random integer between
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,102,* <code>lower</code> and <code>upper</code> (endpoints included)
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,105, Sequences of integers generated using this method will be
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,106," cryptographically secure. If cryptographic security is not required,"
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,107, <code>nextInt</code> should be used instead of this method.
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,105,* Sequences of integers generated using this method will be
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,106,"* cryptographically secure. If cryptographic security is not required,"
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,107,* <code>nextInt</code> should be used instead of this method.
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,114, <li><code>lower < upper</code> (otherwise an IllegalArgumentException
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,114,* <li><code>lower < upper</code> (otherwise an IllegalArgumentException
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,123,"nt nextSecureInt(int lower, int upper);"
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,123,"int nextSecureInt(int lower, int upper);"
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,128, Sequences of long values generated using this method will be
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,128,* Sequences of long values generated using this method will be
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,137, <li><code>lower < upper</code> (otherwise an IllegalArgumentException
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,137,* <li><code>lower < upper</code> (otherwise an IllegalArgumentException
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,146,"ong nextSecureLong(long lower, long upper);"
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,149, Generates a random value from the Poisson distribution with
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,146,"long nextSecureLong(long lower, long upper);"
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,149,* Generates a random value from the Poisson distribution with
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,152, <strong>Definition</strong>:
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,152,* <strong>Definition</strong>:
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,157, <li>The specified mean <i>must</i> be positive (otherwise an
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,157,* <li>The specified mean <i>must</i> be positive (otherwise an
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,163,ong nextPoisson(double mean);
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,163,long nextPoisson(double mean);
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,170, <strong>Definition</strong>:
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,170,* <strong>Definition</strong>:
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,175, <li><code>sigma > 0</code> (otherwise an IllegalArgumentException
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,175,* <li><code>sigma > 0</code> (otherwise an IllegalArgumentException
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,183,"ouble nextGaussian(double mu, double sigma);"
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,183,"double nextGaussian(double mu, double sigma);"
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,189, <strong>Definition</strong>:
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,189,* <strong>Definition</strong>:
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,194, <li><code>mu >= 0</code> (otherwise an IllegalArgumentException
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,194,* <li><code>mu >= 0</code> (otherwise an IllegalArgumentException
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,200,ouble nextExponential(double mean);
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,200,double nextExponential(double mean);
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,206, <strong>Definition</strong>:
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,206,* <strong>Definition</strong>:
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,208, Uniform Distribution</a> <code>lower</code> and
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,209, <code>upper - lower</code> are the
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,208,* Uniform Distribution</a> <code>lower</code> and
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,209,* <code>upper - lower</code> are the
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,214, <li><code>lower < upper</code> (otherwise an IllegalArgumentException
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,214,* <li><code>lower < upper</code> (otherwise an IllegalArgumentException
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,228, 0 through n-1</code> (inclusive).
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,228,* 0 through n-1</code> (inclusive).
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,231, of <code>n</code> taken <code>k</code> at a time.
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,231,* of <code>n</code> taken <code>k</code> at a time.
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,242, @return random k-permutation of n
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,242,* @return random k-permutation of n
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,248, from the Collection <code>c</code>.
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,248,* from the Collection <code>c</code>.
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,253," c</code> are distinct, the resulting object array represents a"
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,253,"* c</code> are distinct, the resulting object array represents a"
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,257, <p>
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,257,* <p>
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,267, @return random sample of k elements from c
True,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,267,* @return random sample of k elements from c
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,28, Implements the <code>RandomData</code> interface using
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,29, <code>java.util.Random</code> and
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,30, <code>java.util.Random.SecureRandom</code> instances to generate data.
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,28,* Implements the <code>RandomData</code> interface using
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,29,* <code>java.util.Random</code> and
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,30,* <code>java.util.Random.SecureRandom</code> instances to generate data.
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,32, Supports reseeding the underlying
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,32,* Supports reseeding the underlying
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,37," For details on the PRNGs, see the JDK documentation for"
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,38, <code>java.util.Random</code> and
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,37,"* For details on the PRNGs, see the JDK documentation for"
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,38,* <code>java.util.Random</code> and
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,43, Instance variables are used to maintain <code>Random</code> and
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,43,* Instance variables are used to maintain <code>Random</code> and
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,58, The <code>reSeed</code> and <code>reSeedSecure</code> methods delegate
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,59, to the corresponding methods on the underlying <code>Random</code> and
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,60," <code>SecureRandom</code> instances.  Therefore, the contracts of these"
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,61," methods are as defined in the JDK documentation.  In particular,"
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,62, <code>reSeed(long)</code> fully resets the initial state of the non-secure
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,63, random number generator (so that reseeding with a specific value always
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,58,* The <code>reSeed</code> and <code>reSeedSecure</code> methods delegate
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,59,* to the corresponding methods on the underlying <code>Random</code> and
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,60,"* <code>SecureRandom</code> instances.  Therefore, the contracts of these"
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,61,"* methods are as defined in the JDK documentation.  In particular,"
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,62,* <code>reSeed(long)</code> fully resets the initial state of the non-secure
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,63,* random number generator (so that reseeding with a specific value always
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,65, does <strong>not</strong> reinitialize the secure random number generator
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,66, (so secure sequences started with calls to reseedSecure(long) won't be
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,65,* does <strong>not</strong> reinitialize the secure random number generator
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,66,* (so secure sequences started with calls to reseedSecure(long) won't be
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,69, @version $Revision: 1.14 $ $Date: 2004/06/02 00:20:21 $
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,69,* @version $Revision: 1.15 $ $Date: 2004/06/14 23:15:15 $
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,89, <strong>Algorithm Description:</strong> hex strings are generated
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,89,* <strong>Algorithm Description:</strong> hex strings are generated
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,166, <strong>Algorithm Description:</strong> hex strings are generated in
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,166,* <strong>Algorithm Description:</strong> hex strings are generated in
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,169, 20 random bytes are generated using the underlying
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,169,* 20 random bytes are generated using the underlying
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,176, TODO: find external reference or provide justification for the claim
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,176,* TODO: find external reference or provide justification for the claim
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,194,lg.reset();
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,194,alg.reset();
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,214, toHexString would otherwise add 2^32 to negative
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,214,* toHexString would otherwise add 2^32 to negative
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,267," Uses simulation of a Poisson process using Uniform deviates, as"
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,268, described
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,267,"* Uses simulation of a Poisson process using Uniform deviates, as"
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,268,* described
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,271, <p>
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,271,* <p>
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,285,hile (n < 1000 * mean) {
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,285,while (n < 1000 * mean) {
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,298, Generate a random value from a Normal distribution.  This algorithm
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,298,* Generate a random value from a Normal distribution.  This algorithm
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,315, <strong>Algorithm Description</strong>:  Uses the
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,316," <a href=""http://www.jesus.ox.ac.uk/~clifford/a5/chap1/node5.html"">"
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,315,* <strong>Algorithm Description</strong>:  Uses the
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,316,"* <a href=""http://www.jesus.ox.ac.uk/~clifford/a5/chap1/node5.html"">"
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,335, <strong>Algorithm Description</strong>: scales the output of
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,335,* <strong>Algorithm Description</strong>: scales the output of
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,337, random double if Random.nextDouble() returns 0).
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,338, This is necessary to provide a symmetric output interval
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,337,* random double if Random.nextDouble() returns 0).
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,338,* This is necessary to provide a symmetric output interval
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,406, in milliseconds.
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,407, <p>
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,406,* in milliseconds.
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,407,* <p>
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,444, using the Security Provider API.  The Security Provider API is defined in
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,444,* using the Security Provider API.  The Security Provider API is defined in
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,448, <strong>USAGE NOTE:</strong> This method carries <i>significant</i>
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,448,* <strong>USAGE NOTE:</strong> This method carries <i>significant</i>
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,453, @param provider the name of the provider
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,454, @throws NoSuchAlgorithmException if the specified algorithm
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,453,* @param provider the name of the provider
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,454,* @throws NoSuchAlgorithmException if the specified algorithm
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,456, @throws NoSuchProviderException if the specified provider
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,456,* @throws NoSuchProviderException if the specified provider
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,459,"ublic void setSecureAlgorithm(String algorithm, String provider)"
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,459,"public void setSecureAlgorithm(String algorithm, String provider)"
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,495, <strong>Algorithm Description</strong>: Uses a 2-cycle permutation
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,496, shuffle to generate a random permutation of <code>c.size()</code> and
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,497, then returns the elements whose indexes correspond to the elements of
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,498, the generated permutation.
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,499," This technique is described, and proven to generate random samples,"
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,495,* <strong>Algorithm Description</strong>: Uses a 2-cycle permutation
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,496,* shuffle to generate a random permutation of <code>c.size()</code> and
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,497,* then returns the elements whose indexes correspond to the elements of
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,498,* the generated permutation.
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,499,"* This technique is described, and proven to generate random samples,"
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,539,arget = 0;
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,539,target = 0;
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,29, property.
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,30, <p>
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,29,* property.
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,30,* <p>
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,33, <li> REPLAY_MODE -- replays data from <code>valuesFileURL</code></li>
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,33,* <li> REPLAY_MODE -- replays data from <code>valuesFileURL</code></li>
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,39,                       mean = <code>mu</code> and
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,39,*                       mean = <code>mu</code> and
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,41, <li> CONSTANT_MODE -- returns <code>mu</code> every time.</li></ul>
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,41,* <li> CONSTANT_MODE -- returns <code>mu</code> every time.</li></ul>
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,43, @version $Revision: 1.12 $ $Date: 2004/02/21 21:35:15 $
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,43,* @version $Revision: 1.13 $ $Date: 2004/06/14 23:15:15 $
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,71,ublic static final int DIGEST_MODE = 0;
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,71,public static final int DIGEST_MODE = 0;
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,74,ublic static final int REPLAY_MODE = 1;
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,74,public static final int REPLAY_MODE = 1;
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,77,ublic static final int UNIFORM_MODE = 2;
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,77,public static final int UNIFORM_MODE = 2;
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,80,ublic static final int EXPONENTIAL_MODE = 3;
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,80,public static final int EXPONENTIAL_MODE = 3;
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,83,ublic static final int GAUSSIAN_MODE = 4;
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,83,public static final int GAUSSIAN_MODE = 4;
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,86,ublic static final int CONSTANT_MODE = 5;
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,86,public static final int CONSTANT_MODE = 5;
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,94, to the mode value (see MODE constants).
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,94,* to the mode value (see MODE constants).
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,96, @return generated value
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,96,* @return generated value
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,125, Returns an array of length <code>length</code> with values generated
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,125,* Returns an array of length <code>length</code> with values generated
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,171,ublic void computeDistribution(int binCount)
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,171,public void computeDistribution(int binCount)
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,297, must have completed successfully; otherwise an
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,297,* must have completed successfully; otherwise an
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,300, @return next random value from the empirical distribution digest
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,300,* @return next random value from the empirical distribution digest
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,307,eturn empiricalDistribution.getNextValue();
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,307,return empiricalDistribution.getNextValue();
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,315, This method will open the <code>valuesFileURL</code> if there is no
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,315,* This method will open the <code>valuesFileURL</code> if there is no
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,318, The <code>valuesFileURL</code> will be closed and reopened to wrap around
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,318,* The <code>valuesFileURL</code> will be closed and reopened to wrap around
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,338, Gets a uniformly distributed random value with mean = mu.
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,338,* Gets a uniformly distributed random value with mean = mu.
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,347, Gets an exponentially distributed random value with mean = mu.
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,347,* Gets an exponentially distributed random value with mean = mu.
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,352,eturn randomData.nextExponential(mu);
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,352,return randomData.nextExponential(mu);

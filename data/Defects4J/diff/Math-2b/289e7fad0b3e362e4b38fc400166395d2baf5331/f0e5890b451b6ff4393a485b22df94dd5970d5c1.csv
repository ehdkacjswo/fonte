is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math3/stat/Frequency.java,src/main/java/org/apache/commons/math3/stat/Frequency.java,21,import java.util.Collection;
True,src/main/java/org/apache/commons/math3/stat/Frequency.java,src/main/java/org/apache/commons/math3/stat/Frequency.java,24,import java.util.Map;
True,src/main/java/org/apache/commons/math3/stat/Frequency.java,src/main/java/org/apache/commons/math3/stat/Frequency.java,113,"incrementValue(v, 1);"
True,src/main/java/org/apache/commons/math3/stat/Frequency.java,src/main/java/org/apache/commons/math3/stat/Frequency.java,117,* Increments the frequency count for v.
True,src/main/java/org/apache/commons/math3/stat/Frequency.java,src/main/java/org/apache/commons/math3/stat/Frequency.java,118,* <p>
True,src/main/java/org/apache/commons/math3/stat/Frequency.java,src/main/java/org/apache/commons/math3/stat/Frequency.java,119,"* If other objects have already been added to this Frequency, v must"
True,src/main/java/org/apache/commons/math3/stat/Frequency.java,src/main/java/org/apache/commons/math3/stat/Frequency.java,120,* be comparable to those that have already been added.
True,src/main/java/org/apache/commons/math3/stat/Frequency.java,src/main/java/org/apache/commons/math3/stat/Frequency.java,121,* </p>
True,src/main/java/org/apache/commons/math3/stat/Frequency.java,src/main/java/org/apache/commons/math3/stat/Frequency.java,123,* @param v the value to add.
True,src/main/java/org/apache/commons/math3/stat/Frequency.java,src/main/java/org/apache/commons/math3/stat/Frequency.java,124,* @param increment the amount by which the value should be incremented
True,src/main/java/org/apache/commons/math3/stat/Frequency.java,src/main/java/org/apache/commons/math3/stat/Frequency.java,125,* @throws IllegalArgumentException if <code>v</code> is not comparable with previous entries
True,src/main/java/org/apache/commons/math3/stat/Frequency.java,src/main/java/org/apache/commons/math3/stat/Frequency.java,127,"public void incrementValue(Comparable<?> v, long increment){"
False,src/main/java/org/apache/commons/math3/stat/Frequency.java,src/main/java/org/apache/commons/math3/stat/Frequency.java,113,bj = Long.valueOf(((Integer) v).longValue());
True,src/main/java/org/apache/commons/math3/stat/Frequency.java,src/main/java/org/apache/commons/math3/stat/Frequency.java,130,obj = Long.valueOf(((Integer) v).longValue());
False,src/main/java/org/apache/commons/math3/stat/Frequency.java,src/main/java/org/apache/commons/math3/stat/Frequency.java,118,"reqTable.put(obj, Long.valueOf(1));"
True,src/main/java/org/apache/commons/math3/stat/Frequency.java,src/main/java/org/apache/commons/math3/stat/Frequency.java,135,"freqTable.put(obj, Long.valueOf(increment));"
False,src/main/java/org/apache/commons/math3/stat/Frequency.java,src/main/java/org/apache/commons/math3/stat/Frequency.java,120,"reqTable.put(obj, Long.valueOf(count.longValue() + 1));"
True,src/main/java/org/apache/commons/math3/stat/Frequency.java,src/main/java/org/apache/commons/math3/stat/Frequency.java,137,"freqTable.put(obj, Long.valueOf(count.longValue() + increment));"
True,src/main/java/org/apache/commons/math3/stat/Frequency.java,src/main/java/org/apache/commons/math3/stat/Frequency.java,199,* Return an Iterator over the set of keys and values that have been added.
True,src/main/java/org/apache/commons/math3/stat/Frequency.java,src/main/java/org/apache/commons/math3/stat/Frequency.java,200,* Using the entry set to iterate is more efficient in the case where you
True,src/main/java/org/apache/commons/math3/stat/Frequency.java,src/main/java/org/apache/commons/math3/stat/Frequency.java,201,"* need to access respective counts as well as values, since it doesn't"
True,src/main/java/org/apache/commons/math3/stat/Frequency.java,src/main/java/org/apache/commons/math3/stat/Frequency.java,202,"* require a ""get"" for every key...the value is provided in the Map.Entry."
True,src/main/java/org/apache/commons/math3/stat/Frequency.java,src/main/java/org/apache/commons/math3/stat/Frequency.java,203,* <p>
True,src/main/java/org/apache/commons/math3/stat/Frequency.java,src/main/java/org/apache/commons/math3/stat/Frequency.java,204,"* If added values are integral (i.e., integers, longs, Integers, or Longs),"
True,src/main/java/org/apache/commons/math3/stat/Frequency.java,src/main/java/org/apache/commons/math3/stat/Frequency.java,205,"* they are converted to Longs when they are added, so the values of the"
True,src/main/java/org/apache/commons/math3/stat/Frequency.java,src/main/java/org/apache/commons/math3/stat/Frequency.java,206,* map entries returned by the Iterator will in this case be Longs.</p>
True,src/main/java/org/apache/commons/math3/stat/Frequency.java,src/main/java/org/apache/commons/math3/stat/Frequency.java,208,* @return entry set Iterator
True,src/main/java/org/apache/commons/math3/stat/Frequency.java,src/main/java/org/apache/commons/math3/stat/Frequency.java,210,"public Iterator<Map.Entry<Comparable<?>, Long>> entrySetIterator() {"
True,src/main/java/org/apache/commons/math3/stat/Frequency.java,src/main/java/org/apache/commons/math3/stat/Frequency.java,211,return freqTable.entrySet().iterator();
True,src/main/java/org/apache/commons/math3/stat/Frequency.java,src/main/java/org/apache/commons/math3/stat/Frequency.java,495,* Merge another Frequency object's counts into this instance.
True,src/main/java/org/apache/commons/math3/stat/Frequency.java,src/main/java/org/apache/commons/math3/stat/Frequency.java,496,* This Frequency's counts will be incremented (or set when not already set)
True,src/main/java/org/apache/commons/math3/stat/Frequency.java,src/main/java/org/apache/commons/math3/stat/Frequency.java,497,* by the counts represented by other.
True,src/main/java/org/apache/commons/math3/stat/Frequency.java,src/main/java/org/apache/commons/math3/stat/Frequency.java,499,* @param other the other {@link Frequency} object to be merged
True,src/main/java/org/apache/commons/math3/stat/Frequency.java,src/main/java/org/apache/commons/math3/stat/Frequency.java,501,public void merge(Frequency other) {
True,src/main/java/org/apache/commons/math3/stat/Frequency.java,src/main/java/org/apache/commons/math3/stat/Frequency.java,502,"for (Iterator<Map.Entry<Comparable<?>, Long>> iter = other.entrySetIterator(); iter.hasNext();) {"
True,src/main/java/org/apache/commons/math3/stat/Frequency.java,src/main/java/org/apache/commons/math3/stat/Frequency.java,503,"Map.Entry<Comparable<?>, Long> entry = iter.next();"
True,src/main/java/org/apache/commons/math3/stat/Frequency.java,src/main/java/org/apache/commons/math3/stat/Frequency.java,504,"incrementValue(entry.getKey(), entry.getValue());"
True,src/main/java/org/apache/commons/math3/stat/Frequency.java,src/main/java/org/apache/commons/math3/stat/Frequency.java,509,* Merge a {@link Collection} of {@link Frequency} objects into this instance.
True,src/main/java/org/apache/commons/math3/stat/Frequency.java,src/main/java/org/apache/commons/math3/stat/Frequency.java,510,* This Frequency's counts will be incremented (or set when not already set)
True,src/main/java/org/apache/commons/math3/stat/Frequency.java,src/main/java/org/apache/commons/math3/stat/Frequency.java,511,* by the counts represented by each of the others.
True,src/main/java/org/apache/commons/math3/stat/Frequency.java,src/main/java/org/apache/commons/math3/stat/Frequency.java,513,* @param others the other {@link Frequency} objects to be merged
True,src/main/java/org/apache/commons/math3/stat/Frequency.java,src/main/java/org/apache/commons/math3/stat/Frequency.java,515,public void merge(Collection<Frequency> others) {
True,src/main/java/org/apache/commons/math3/stat/Frequency.java,src/main/java/org/apache/commons/math3/stat/Frequency.java,516,for (Iterator<Frequency> iter = others.iterator(); iter.hasNext();) {
True,src/main/java/org/apache/commons/math3/stat/Frequency.java,src/main/java/org/apache/commons/math3/stat/Frequency.java,517,merge(iter.next());
True,src/test/java/org/apache/commons/math3/stat/FrequencyTest.java,src/test/java/org/apache/commons/math3/stat/FrequencyTest.java,21,import java.util.ArrayList;
True,src/test/java/org/apache/commons/math3/stat/FrequencyTest.java,src/test/java/org/apache/commons/math3/stat/FrequencyTest.java,23,import java.util.List;
True,src/test/java/org/apache/commons/math3/stat/FrequencyTest.java,src/test/java/org/apache/commons/math3/stat/FrequencyTest.java,268,@Test
True,src/test/java/org/apache/commons/math3/stat/FrequencyTest.java,src/test/java/org/apache/commons/math3/stat/FrequencyTest.java,269,public void testIncrement() {
True,src/test/java/org/apache/commons/math3/stat/FrequencyTest.java,src/test/java/org/apache/commons/math3/stat/FrequencyTest.java,270,"Assert.assertEquals(0, f.getUniqueCount());"
True,src/test/java/org/apache/commons/math3/stat/FrequencyTest.java,src/test/java/org/apache/commons/math3/stat/FrequencyTest.java,271,"f.incrementValue(oneL, 1);"
True,src/test/java/org/apache/commons/math3/stat/FrequencyTest.java,src/test/java/org/apache/commons/math3/stat/FrequencyTest.java,272,"Assert.assertEquals(1, f.getCount(oneL));"
True,src/test/java/org/apache/commons/math3/stat/FrequencyTest.java,src/test/java/org/apache/commons/math3/stat/FrequencyTest.java,274,"f.incrementValue(oneL, 4);"
True,src/test/java/org/apache/commons/math3/stat/FrequencyTest.java,src/test/java/org/apache/commons/math3/stat/FrequencyTest.java,275,"Assert.assertEquals(5, f.getCount(oneL));"
True,src/test/java/org/apache/commons/math3/stat/FrequencyTest.java,src/test/java/org/apache/commons/math3/stat/FrequencyTest.java,277,"f.incrementValue(oneL, -5);"
True,src/test/java/org/apache/commons/math3/stat/FrequencyTest.java,src/test/java/org/apache/commons/math3/stat/FrequencyTest.java,278,"Assert.assertEquals(0, f.getCount(oneL));"
True,src/test/java/org/apache/commons/math3/stat/FrequencyTest.java,src/test/java/org/apache/commons/math3/stat/FrequencyTest.java,281,@Test
True,src/test/java/org/apache/commons/math3/stat/FrequencyTest.java,src/test/java/org/apache/commons/math3/stat/FrequencyTest.java,282,public void testMerge() {
True,src/test/java/org/apache/commons/math3/stat/FrequencyTest.java,src/test/java/org/apache/commons/math3/stat/FrequencyTest.java,283,"Assert.assertEquals(0, f.getUniqueCount());"
True,src/test/java/org/apache/commons/math3/stat/FrequencyTest.java,src/test/java/org/apache/commons/math3/stat/FrequencyTest.java,284,f.addValue(oneL);
True,src/test/java/org/apache/commons/math3/stat/FrequencyTest.java,src/test/java/org/apache/commons/math3/stat/FrequencyTest.java,285,f.addValue(twoL);
True,src/test/java/org/apache/commons/math3/stat/FrequencyTest.java,src/test/java/org/apache/commons/math3/stat/FrequencyTest.java,286,f.addValue(oneI);
True,src/test/java/org/apache/commons/math3/stat/FrequencyTest.java,src/test/java/org/apache/commons/math3/stat/FrequencyTest.java,287,f.addValue(twoI);
True,src/test/java/org/apache/commons/math3/stat/FrequencyTest.java,src/test/java/org/apache/commons/math3/stat/FrequencyTest.java,289,"Assert.assertEquals(2, f.getUniqueCount());"
True,src/test/java/org/apache/commons/math3/stat/FrequencyTest.java,src/test/java/org/apache/commons/math3/stat/FrequencyTest.java,290,"Assert.assertEquals(2, f.getCount(oneI));"
True,src/test/java/org/apache/commons/math3/stat/FrequencyTest.java,src/test/java/org/apache/commons/math3/stat/FrequencyTest.java,291,"Assert.assertEquals(2, f.getCount(twoI));"
True,src/test/java/org/apache/commons/math3/stat/FrequencyTest.java,src/test/java/org/apache/commons/math3/stat/FrequencyTest.java,293,Frequency g = new Frequency();
True,src/test/java/org/apache/commons/math3/stat/FrequencyTest.java,src/test/java/org/apache/commons/math3/stat/FrequencyTest.java,294,g.addValue(oneL);
True,src/test/java/org/apache/commons/math3/stat/FrequencyTest.java,src/test/java/org/apache/commons/math3/stat/FrequencyTest.java,295,g.addValue(threeL);
True,src/test/java/org/apache/commons/math3/stat/FrequencyTest.java,src/test/java/org/apache/commons/math3/stat/FrequencyTest.java,296,g.addValue(threeI);
True,src/test/java/org/apache/commons/math3/stat/FrequencyTest.java,src/test/java/org/apache/commons/math3/stat/FrequencyTest.java,298,"Assert.assertEquals(2, g.getUniqueCount());"
True,src/test/java/org/apache/commons/math3/stat/FrequencyTest.java,src/test/java/org/apache/commons/math3/stat/FrequencyTest.java,299,"Assert.assertEquals(1, g.getCount(oneI));"
True,src/test/java/org/apache/commons/math3/stat/FrequencyTest.java,src/test/java/org/apache/commons/math3/stat/FrequencyTest.java,300,"Assert.assertEquals(2, g.getCount(threeI));"
True,src/test/java/org/apache/commons/math3/stat/FrequencyTest.java,src/test/java/org/apache/commons/math3/stat/FrequencyTest.java,302,f.merge(g);
True,src/test/java/org/apache/commons/math3/stat/FrequencyTest.java,src/test/java/org/apache/commons/math3/stat/FrequencyTest.java,304,"Assert.assertEquals(3, f.getUniqueCount());"
True,src/test/java/org/apache/commons/math3/stat/FrequencyTest.java,src/test/java/org/apache/commons/math3/stat/FrequencyTest.java,305,"Assert.assertEquals(3, f.getCount(oneI));"
True,src/test/java/org/apache/commons/math3/stat/FrequencyTest.java,src/test/java/org/apache/commons/math3/stat/FrequencyTest.java,306,"Assert.assertEquals(2, f.getCount(twoI));"
True,src/test/java/org/apache/commons/math3/stat/FrequencyTest.java,src/test/java/org/apache/commons/math3/stat/FrequencyTest.java,307,"Assert.assertEquals(2, f.getCount(threeI));"
True,src/test/java/org/apache/commons/math3/stat/FrequencyTest.java,src/test/java/org/apache/commons/math3/stat/FrequencyTest.java,310,@Test
True,src/test/java/org/apache/commons/math3/stat/FrequencyTest.java,src/test/java/org/apache/commons/math3/stat/FrequencyTest.java,311,public void testMergeCollection() {
True,src/test/java/org/apache/commons/math3/stat/FrequencyTest.java,src/test/java/org/apache/commons/math3/stat/FrequencyTest.java,312,"Assert.assertEquals(0, f.getUniqueCount());"
True,src/test/java/org/apache/commons/math3/stat/FrequencyTest.java,src/test/java/org/apache/commons/math3/stat/FrequencyTest.java,313,f.addValue(oneL);
True,src/test/java/org/apache/commons/math3/stat/FrequencyTest.java,src/test/java/org/apache/commons/math3/stat/FrequencyTest.java,315,"Assert.assertEquals(1, f.getUniqueCount());"
True,src/test/java/org/apache/commons/math3/stat/FrequencyTest.java,src/test/java/org/apache/commons/math3/stat/FrequencyTest.java,316,"Assert.assertEquals(1, f.getCount(oneI));"
True,src/test/java/org/apache/commons/math3/stat/FrequencyTest.java,src/test/java/org/apache/commons/math3/stat/FrequencyTest.java,317,"Assert.assertEquals(0, f.getCount(twoI));"
True,src/test/java/org/apache/commons/math3/stat/FrequencyTest.java,src/test/java/org/apache/commons/math3/stat/FrequencyTest.java,319,Frequency g = new Frequency();
True,src/test/java/org/apache/commons/math3/stat/FrequencyTest.java,src/test/java/org/apache/commons/math3/stat/FrequencyTest.java,320,g.addValue(twoL);
True,src/test/java/org/apache/commons/math3/stat/FrequencyTest.java,src/test/java/org/apache/commons/math3/stat/FrequencyTest.java,322,Frequency h = new Frequency();
True,src/test/java/org/apache/commons/math3/stat/FrequencyTest.java,src/test/java/org/apache/commons/math3/stat/FrequencyTest.java,323,h.addValue(threeL);
True,src/test/java/org/apache/commons/math3/stat/FrequencyTest.java,src/test/java/org/apache/commons/math3/stat/FrequencyTest.java,325,List<Frequency> coll = new ArrayList<Frequency>();
True,src/test/java/org/apache/commons/math3/stat/FrequencyTest.java,src/test/java/org/apache/commons/math3/stat/FrequencyTest.java,326,coll.add(g);
True,src/test/java/org/apache/commons/math3/stat/FrequencyTest.java,src/test/java/org/apache/commons/math3/stat/FrequencyTest.java,327,coll.add(h);
True,src/test/java/org/apache/commons/math3/stat/FrequencyTest.java,src/test/java/org/apache/commons/math3/stat/FrequencyTest.java,328,f.merge(coll);
True,src/test/java/org/apache/commons/math3/stat/FrequencyTest.java,src/test/java/org/apache/commons/math3/stat/FrequencyTest.java,330,"Assert.assertEquals(3, f.getUniqueCount());"
True,src/test/java/org/apache/commons/math3/stat/FrequencyTest.java,src/test/java/org/apache/commons/math3/stat/FrequencyTest.java,331,"Assert.assertEquals(1, f.getCount(oneI));"
True,src/test/java/org/apache/commons/math3/stat/FrequencyTest.java,src/test/java/org/apache/commons/math3/stat/FrequencyTest.java,332,"Assert.assertEquals(1, f.getCount(twoI));"
True,src/test/java/org/apache/commons/math3/stat/FrequencyTest.java,src/test/java/org/apache/commons/math3/stat/FrequencyTest.java,333,"Assert.assertEquals(1, f.getCount(threeI));"

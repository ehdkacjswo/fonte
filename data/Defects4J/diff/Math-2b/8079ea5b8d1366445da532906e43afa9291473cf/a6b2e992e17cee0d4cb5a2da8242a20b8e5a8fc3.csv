is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math3/optimization/Weight.java,src/main/java/org/apache/commons/math3/optimization/Weight.java,21,mport org.apache.commons.math3.linear.Array2DRowRealMatrix;
True,src/main/java/org/apache/commons/math3/optimization/Weight.java,src/main/java/org/apache/commons/math3/optimization/Weight.java,21,import org.apache.commons.math3.linear.DiagonalMatrix;
False,src/main/java/org/apache/commons/math3/optimization/Weight.java,src/main/java/org/apache/commons/math3/optimization/Weight.java,44,inal int dim = weight.length;
False,src/main/java/org/apache/commons/math3/optimization/Weight.java,src/main/java/org/apache/commons/math3/optimization/Weight.java,45,"eightMatrix = new Array2DRowRealMatrix(dim, dim);"
False,src/main/java/org/apache/commons/math3/optimization/Weight.java,src/main/java/org/apache/commons/math3/optimization/Weight.java,46,or (int i = 0; i < dim; i++) {
False,src/main/java/org/apache/commons/math3/optimization/Weight.java,src/main/java/org/apache/commons/math3/optimization/Weight.java,47,"eightMatrix.setEntry(i, i, weight[i]);"
True,src/main/java/org/apache/commons/math3/optimization/Weight.java,src/main/java/org/apache/commons/math3/optimization/Weight.java,44,weightMatrix = new DiagonalMatrix(weight);
True,src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java,29,import org.apache.commons.math3.linear.DiagonalMatrix;
False,src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java,561,inal EigenDecomposition dec = new EigenDecomposition(m);
False,src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java,562,eturn dec.getSquareRoot();
True,src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java,562,if (m instanceof DiagonalMatrix) {
True,src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java,563,final int dim = m.getRowDimension();
True,src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java,564,final RealMatrix sqrtM = new DiagonalMatrix(dim);
True,src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java,565,for (int i = 0; i < dim; i++) {
True,src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java,566,"sqrtM.setEntry(i, i, FastMath.sqrt(m.getEntry(i, i)));"
True,src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java,568,return sqrtM;
True,src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java,569,} else {
True,src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java,570,final EigenDecomposition dec = new EigenDecomposition(m);
True,src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java,571,return dec.getSquareRoot();
True,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,226,@Test
True,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,227,public void testLargeSample() {
True,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,228,Random randomizer = new Random(0x5551480dca5b369bl);
True,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,229,double maxError = 0;
True,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,230,for (int degree = 0; degree < 10; ++degree) {
True,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,231,"PolynomialFunction p = buildRandomPolynomial(degree, randomizer);"
True,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,233,PolynomialFitter fitter = new PolynomialFitter(new LevenbergMarquardtOptimizer());
True,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,234,for (int i = 0; i < 40000; ++i) {
True,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,235,double x = -1.0 + i / 20000.0;
True,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,236,"fitter.addObservedPoint(1.0, x,"
True,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,237,p.value(x) + 0.1 * randomizer.nextGaussian());
True,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,240,final double[] init = new double[degree + 1];
True,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,241,PolynomialFunction fitted = new PolynomialFunction(fitter.fit(init));
True,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,243,for (double x = -1.0; x < 1.0; x += 0.01) {
True,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,244,double error = FastMath.abs(p.value(x) - fitted.value(x)) /
True,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,245,(1.0 + FastMath.abs(p.value(x)));
True,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,246,"maxError = FastMath.max(maxError, error);"
True,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,247,Assert.assertTrue(FastMath.abs(error) < 0.01);
True,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,250,Assert.assertTrue(maxError > 0.001);

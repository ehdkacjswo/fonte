is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math3/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/AbstractFieldMatrix.java,20,mport java.lang.reflect.Array;
False,src/main/java/org/apache/commons/math3/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/AbstractFieldMatrix.java,22,mport java.util.Arrays;
False,src/main/java/org/apache/commons/math3/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/AbstractFieldMatrix.java,29,mport org.apache.commons.math3.exception.OutOfRangeException;
False,src/main/java/org/apache/commons/math3/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/AbstractFieldMatrix.java,30,mport org.apache.commons.math3.exception.NumberIsTooSmallException;
True,src/main/java/org/apache/commons/math3/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/AbstractFieldMatrix.java,29,import org.apache.commons.math3.exception.NumberIsTooSmallException;
True,src/main/java/org/apache/commons/math3/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/AbstractFieldMatrix.java,30,import org.apache.commons.math3.exception.OutOfRangeException;
True,src/main/java/org/apache/commons/math3/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/AbstractFieldMatrix.java,32,import org.apache.commons.math3.util.MathArrays;
False,src/main/java/org/apache/commons/math3/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/AbstractFieldMatrix.java,128,** Build an array of elements.
False,src/main/java/org/apache/commons/math3/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/AbstractFieldMatrix.java,129, <p>
False,src/main/java/org/apache/commons/math3/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/AbstractFieldMatrix.java,130, Complete arrays are filled with field.getZero()
False,src/main/java/org/apache/commons/math3/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/AbstractFieldMatrix.java,131, </p>
False,src/main/java/org/apache/commons/math3/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/AbstractFieldMatrix.java,132, @param <T> Type of the field elements
False,src/main/java/org/apache/commons/math3/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/AbstractFieldMatrix.java,133, @param field field to which array elements belong
False,src/main/java/org/apache/commons/math3/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/AbstractFieldMatrix.java,134, @param rows number of rows
False,src/main/java/org/apache/commons/math3/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/AbstractFieldMatrix.java,135, @param columns number of columns (may be negative to build partial
False,src/main/java/org/apache/commons/math3/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/AbstractFieldMatrix.java,136, arrays in the same way <code>new Field[rows][]</code> works)
False,src/main/java/org/apache/commons/math3/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/AbstractFieldMatrix.java,137, @return a new array
False,src/main/java/org/apache/commons/math3/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/AbstractFieldMatrix.java,139,"SuppressWarnings(""unchecked"")"
False,src/main/java/org/apache/commons/math3/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/AbstractFieldMatrix.java,140,"rotected static <T extends FieldElement<T>> T[][] buildArray(final Field<T> field,"
False,src/main/java/org/apache/commons/math3/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/AbstractFieldMatrix.java,141,"inal int rows,"
False,src/main/java/org/apache/commons/math3/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/AbstractFieldMatrix.java,142,inal int columns) {
False,src/main/java/org/apache/commons/math3/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/AbstractFieldMatrix.java,143,f (columns < 0) {
False,src/main/java/org/apache/commons/math3/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/AbstractFieldMatrix.java,144,"[] dummyRow = (T[]) Array.newInstance(field.getRuntimeClass(), 0);"
False,src/main/java/org/apache/commons/math3/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/AbstractFieldMatrix.java,145,"eturn (T[][]) Array.newInstance(dummyRow.getClass(), rows);"
False,src/main/java/org/apache/commons/math3/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/AbstractFieldMatrix.java,147,[][] array =
False,src/main/java/org/apache/commons/math3/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/AbstractFieldMatrix.java,148,"T[][]) Array.newInstance(field.getRuntimeClass(), new int[] { rows, columns });"
False,src/main/java/org/apache/commons/math3/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/AbstractFieldMatrix.java,149,or (int i = 0; i < array.length; ++i) {
False,src/main/java/org/apache/commons/math3/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/AbstractFieldMatrix.java,150,"rrays.fill(array[i], field.getZero());"
False,src/main/java/org/apache/commons/math3/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/AbstractFieldMatrix.java,152,eturn array;
False,src/main/java/org/apache/commons/math3/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/AbstractFieldMatrix.java,155,** Build an array of elements.
False,src/main/java/org/apache/commons/math3/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/AbstractFieldMatrix.java,156, <p>
False,src/main/java/org/apache/commons/math3/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/AbstractFieldMatrix.java,157, Arrays are filled with field.getZero()
False,src/main/java/org/apache/commons/math3/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/AbstractFieldMatrix.java,158, </p>
False,src/main/java/org/apache/commons/math3/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/AbstractFieldMatrix.java,159, @param <T> the type of the field elements
False,src/main/java/org/apache/commons/math3/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/AbstractFieldMatrix.java,160, @param field field to which array elements belong
False,src/main/java/org/apache/commons/math3/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/AbstractFieldMatrix.java,161, @param length of the array
False,src/main/java/org/apache/commons/math3/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/AbstractFieldMatrix.java,162, @return a new array
False,src/main/java/org/apache/commons/math3/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/AbstractFieldMatrix.java,164,"rotected static <T extends FieldElement<T>> T[] buildArray(final Field<T> field,"
False,src/main/java/org/apache/commons/math3/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/AbstractFieldMatrix.java,165,inal int length) {
False,src/main/java/org/apache/commons/math3/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/AbstractFieldMatrix.java,166,"SuppressWarnings(""unchecked"") // OK because field must be correct class"
False,src/main/java/org/apache/commons/math3/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/AbstractFieldMatrix.java,167,"[] array = (T[]) Array.newInstance(field.getRuntimeClass(), length);"
False,src/main/java/org/apache/commons/math3/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/AbstractFieldMatrix.java,168,"rrays.fill(array, field.getZero());"
False,src/main/java/org/apache/commons/math3/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/AbstractFieldMatrix.java,169,eturn array;
False,src/main/java/org/apache/commons/math3/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/AbstractFieldMatrix.java,340,"inal T[][] data = buildArray(field, getRowDimension(), getColumnDimension());"
True,src/main/java/org/apache/commons/math3/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/AbstractFieldMatrix.java,295,"final T[][] data = MathArrays.buildArray(field, getRowDimension(), getColumnDimension());"
False,src/main/java/org/apache/commons/math3/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/AbstractFieldMatrix.java,609,"inal T[] out = buildArray(field, nCols);"
True,src/main/java/org/apache/commons/math3/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/AbstractFieldMatrix.java,564,"final T[] out = MathArrays.buildArray(field, nCols);"
False,src/main/java/org/apache/commons/math3/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/AbstractFieldMatrix.java,636,"inal T[] out = buildArray(field, nRows);"
True,src/main/java/org/apache/commons/math3/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/AbstractFieldMatrix.java,591,"final T[] out = MathArrays.buildArray(field, nRows);"
False,src/main/java/org/apache/commons/math3/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/AbstractFieldMatrix.java,720,"inal T[] out = buildArray(field, nRows);"
True,src/main/java/org/apache/commons/math3/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/AbstractFieldMatrix.java,675,"final T[] out = MathArrays.buildArray(field, nRows);"
False,src/main/java/org/apache/commons/math3/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/AbstractFieldMatrix.java,744,"inal T[] out = buildArray(field, nRows);"
True,src/main/java/org/apache/commons/math3/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/AbstractFieldMatrix.java,699,"final T[] out = MathArrays.buildArray(field, nRows);"
False,src/main/java/org/apache/commons/math3/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/AbstractFieldMatrix.java,766,"inal T[] out = buildArray(field, nCols);"
True,src/main/java/org/apache/commons/math3/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/AbstractFieldMatrix.java,721,"final T[] out = MathArrays.buildArray(field, nCols);"
False,src/main/java/org/apache/commons/math3/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/AbstractFieldMatrix.java,790,"inal T[] out = buildArray(field, nCols);"
True,src/main/java/org/apache/commons/math3/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/AbstractFieldMatrix.java,745,"final T[] out = MathArrays.buildArray(field, nCols);"
True,src/main/java/org/apache/commons/math3/linear/Array2DRowFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/Array2DRowFieldMatrix.java,32,import org.apache.commons.math3.util.MathArrays;
False,src/main/java/org/apache/commons/math3/linear/Array2DRowFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/Array2DRowFieldMatrix.java,73,"ata = buildArray(field, rowDimension, columnDimension);"
True,src/main/java/org/apache/commons/math3/linear/Array2DRowFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/Array2DRowFieldMatrix.java,74,"data = MathArrays.buildArray(field, rowDimension, columnDimension);"
False,src/main/java/org/apache/commons/math3/linear/Array2DRowFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/Array2DRowFieldMatrix.java,200,"ata = buildArray(getField(), nRows, 1);"
True,src/main/java/org/apache/commons/math3/linear/Array2DRowFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/Array2DRowFieldMatrix.java,201,"data = MathArrays.buildArray(getField(), nRows, 1);"
False,src/main/java/org/apache/commons/math3/linear/Array2DRowFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/Array2DRowFieldMatrix.java,235,"inal T[][] outData = buildArray(getField(), rowCount, columnCount);"
True,src/main/java/org/apache/commons/math3/linear/Array2DRowFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/Array2DRowFieldMatrix.java,236,"final T[][] outData = MathArrays.buildArray(getField(), rowCount, columnCount);"
False,src/main/java/org/apache/commons/math3/linear/Array2DRowFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/Array2DRowFieldMatrix.java,263,"inal T[][] outData = buildArray(getField(), rowCount, columnCount);"
True,src/main/java/org/apache/commons/math3/linear/Array2DRowFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/Array2DRowFieldMatrix.java,264,"final T[][] outData = MathArrays.buildArray(getField(), rowCount, columnCount);"
False,src/main/java/org/apache/commons/math3/linear/Array2DRowFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/Array2DRowFieldMatrix.java,293,"inal T[][] outData = buildArray(getField(), nRows, nCols);"
True,src/main/java/org/apache/commons/math3/linear/Array2DRowFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/Array2DRowFieldMatrix.java,294,"final T[][] outData = MathArrays.buildArray(getField(), nRows, nCols);"
False,src/main/java/org/apache/commons/math3/linear/Array2DRowFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/Array2DRowFieldMatrix.java,348,"ata = buildArray(getField(), subMatrix.length, nCols);"
True,src/main/java/org/apache/commons/math3/linear/Array2DRowFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/Array2DRowFieldMatrix.java,349,"data = MathArrays.buildArray(getField(), subMatrix.length, nCols);"
False,src/main/java/org/apache/commons/math3/linear/Array2DRowFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/Array2DRowFieldMatrix.java,421,"inal T[] out = buildArray(getField(), nRows);"
True,src/main/java/org/apache/commons/math3/linear/Array2DRowFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/Array2DRowFieldMatrix.java,422,"final T[] out = MathArrays.buildArray(getField(), nRows);"
False,src/main/java/org/apache/commons/math3/linear/Array2DRowFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/Array2DRowFieldMatrix.java,442,"inal T[] out = buildArray(getField(), nCols);"
True,src/main/java/org/apache/commons/math3/linear/Array2DRowFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/Array2DRowFieldMatrix.java,443,"final T[] out = MathArrays.buildArray(getField(), nCols);"
False,src/main/java/org/apache/commons/math3/linear/Array2DRowFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/Array2DRowFieldMatrix.java,591,"inal T[][] out = buildArray(getField(), nRows, getColumnDimension());"
True,src/main/java/org/apache/commons/math3/linear/Array2DRowFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/Array2DRowFieldMatrix.java,592,"final T[][] out = MathArrays.buildArray(getField(), nRows, getColumnDimension());"
False,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,20,mport java.lang.reflect.Array;
True,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,24,import org.apache.commons.math3.exception.DimensionMismatchException;
False,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,27,mport org.apache.commons.math3.exception.ZeroException;
False,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,29,mport org.apache.commons.math3.exception.OutOfRangeException;
False,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,30,mport org.apache.commons.math3.exception.DimensionMismatchException;
True,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,29,import org.apache.commons.math3.exception.OutOfRangeException;
True,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,30,import org.apache.commons.math3.exception.ZeroException;
True,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,32,import org.apache.commons.math3.util.MathArrays;
False,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,72,ata = buildArray(size);
False,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,73,"rrays.fill(data, field.getZero());"
True,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,72,"this.data  = MathArrays.buildArray(field, size);"
False,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,205,ata = buildArray(size);
True,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,204,"data = MathArrays.buildArray(field, size);"
False,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,229,ata = buildArray(size);
True,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,228,"data = MathArrays.buildArray(field, size);"
False,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,245,ata = buildArray(v.getDimension());
True,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,244,"data = MathArrays.buildArray(field, v.getDimension());"
False,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,297,ata = buildArray(v1.data.length + v2.data.length);
True,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,296,"data = MathArrays.buildArray(field, v1.data.length + v2.data.length);"
False,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,316,ata = buildArray(v1.data.length + v2.length);
True,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,315,"data = MathArrays.buildArray(field, v1.data.length + v2.length);"
False,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,335,ata = buildArray(v1.length + v2.data.length);
True,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,334,"data = MathArrays.buildArray(field, v1.length + v2.data.length);"
False,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,363,ata = buildArray(v1.length + v2.length);
True,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,362,"data = MathArrays.buildArray(v1[0].getField(), v1.length + v2.length);"
False,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,388,ata = buildArray(v1.length + v2.length);
True,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,387,"data = MathArrays.buildArray(field, v1.length + v2.length);"
False,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,395, Build an array of elements.
False,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,397, @param length Size of the array to build.
False,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,398, @return a new array.
False,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,400,"SuppressWarnings(""unchecked"") // field is of type T"
False,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,401,rivate T[] buildArray(final int length) {
False,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,402,"eturn (T[]) Array.newInstance(field.getRuntimeClass(), length);"
False,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,422,[] out = buildArray(data.length);
True,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,410,"T[] out = MathArrays.buildArray(field, data.length);"
False,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,440,[] out = buildArray(data.length);
True,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,428,"T[] out = MathArrays.buildArray(field, data.length);"
False,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,454,[] out = buildArray(data.length);
True,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,442,"T[] out = MathArrays.buildArray(field, data.length);"
False,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,472,[] out = buildArray(data.length);
True,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,460,"T[] out = MathArrays.buildArray(field, data.length);"
False,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,481,[] out = buildArray(data.length);
True,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,469,"T[] out = MathArrays.buildArray(field, data.length);"
False,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,498,[] out = buildArray(data.length);
True,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,486,"T[] out = MathArrays.buildArray(field, data.length);"
False,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,515,[] out = buildArray(data.length);
True,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,503,"T[] out = MathArrays.buildArray(field, data.length);"
False,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,536,[] out = buildArray(data.length);
True,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,524,"T[] out = MathArrays.buildArray(field, data.length);"
False,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,557,[] out = buildArray(data.length);
True,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,545,"T[] out = MathArrays.buildArray(field, data.length);"
False,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,589,[] out = buildArray(data.length);
True,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,577,"T[] out = MathArrays.buildArray(field, data.length);"
False,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,607,[] out = buildArray(data.length);
True,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,595,"T[] out = MathArrays.buildArray(field, data.length);"
False,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,621,[] out = buildArray(data.length);
True,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,609,"T[] out = MathArrays.buildArray(field, data.length);"
False,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,644,[] out = buildArray(data.length);
True,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,632,"T[] out = MathArrays.buildArray(field, data.length);"
False,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,783,inal T[] out = buildArray(data.length + 1);
True,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,771,"final T[] out = MathArrays.buildArray(field, data.length + 1);"
True,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,32,import org.apache.commons.math3.util.MathArrays;
False,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,162,"locks = buildArray(getField(), blockRows * blockColumns, -1);"
True,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,163,"blocks = MathArrays.buildArray(getField(), blockRows * blockColumns, -1);"
False,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,225,"inal T[][] blocks = buildArray(field, blockRows * blockColumns, -1);"
True,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,226,"final T[][] blocks = MathArrays.buildArray(field, blockRows * blockColumns, -1);"
False,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,237,"inal T[] block = buildArray(field, iHeight * jWidth);"
True,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,238,"final T[] block = MathArrays.buildArray(field, iHeight * jWidth);"
False,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,274,"inal T[][] blocks = buildArray(field, blockRows * blockColumns, -1);"
True,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,275,"final T[][] blocks = MathArrays.buildArray(field, blockRows * blockColumns, -1);"
False,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,284,"locks[blockIndex] = buildArray(field, iHeight * jWidth);"
True,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,285,"blocks[blockIndex] = MathArrays.buildArray(field, iHeight * jWidth);"
False,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,630,"inal T[][] data = buildArray(getField(), getRowDimension(), getColumnDimension());"
True,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,631,"final T[][] data = MathArrays.buildArray(getField(), getRowDimension(), getColumnDimension());"
False,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,1007,"inal T[] outData = buildArray(getField(), columns);"
True,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,1008,"final T[] outData = MathArrays.buildArray(getField(), columns);"
False,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,1039,"inal T[] outData = buildArray(getField(), rows);"
True,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,1040,"final T[] outData = MathArrays.buildArray(getField(), rows);"
False,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,1072,"inal T[] out = buildArray(getField(), columns);"
True,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,1073,"final T[] out = MathArrays.buildArray(getField(), columns);"
False,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,1114,"inal T[] out = buildArray(getField(), rows);"
True,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,1115,"final T[] out = MathArrays.buildArray(getField(), rows);"
False,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,1275,"inal T[] out = buildArray(getField(), rows);"
True,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,1276,"final T[] out = MathArrays.buildArray(getField(), rows);"
False,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,1317,"inal T[] out = buildArray(getField(), columns);"
True,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java,1318,"final T[] out = MathArrays.buildArray(getField(), columns);"
False,src/main/java/org/apache/commons/math3/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math3/linear/FieldLUDecomposition.java,20,mport java.lang.reflect.Array;
True,src/main/java/org/apache/commons/math3/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math3/linear/FieldLUDecomposition.java,23,import org.apache.commons.math3.util.MathArrays;
False,src/main/java/org/apache/commons/math3/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math3/linear/FieldLUDecomposition.java,310,"SuppressWarnings(""unchecked"") // field is of type T"
False,src/main/java/org/apache/commons/math3/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math3/linear/FieldLUDecomposition.java,311,"inal T[] bp = (T[]) Array.newInstance(field.getRuntimeClass(), m);"
True,src/main/java/org/apache/commons/math3/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math3/linear/FieldLUDecomposition.java,310,"final T[] bp = MathArrays.buildArray(field, m);"
False,src/main/java/org/apache/commons/math3/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math3/linear/FieldLUDecomposition.java,357,"SuppressWarnings(""unchecked"")"
False,src/main/java/org/apache/commons/math3/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math3/linear/FieldLUDecomposition.java,358,/ field is of type T
False,src/main/java/org/apache/commons/math3/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math3/linear/FieldLUDecomposition.java,359,"inal T[] bp = (T[]) Array.newInstance(field.getRuntimeClass(),"
False,src/main/java/org/apache/commons/math3/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math3/linear/FieldLUDecomposition.java,360,);
True,src/main/java/org/apache/commons/math3/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math3/linear/FieldLUDecomposition.java,355,"final T[] bp = MathArrays.buildArray(field, m);"
False,src/main/java/org/apache/commons/math3/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math3/linear/FieldLUDecomposition.java,400,"SuppressWarnings(""unchecked"") // field is of type T"
False,src/main/java/org/apache/commons/math3/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math3/linear/FieldLUDecomposition.java,401,"inal T[][] bp = (T[][]) Array.newInstance(field.getRuntimeClass(), new int[] { m, nColB });"
True,src/main/java/org/apache/commons/math3/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math3/linear/FieldLUDecomposition.java,393,"final T[][] bp = MathArrays.buildArray(field, m, nColB);"
False,src/main/java/org/apache/commons/math3/linear/MatrixUtils.java,src/main/java/org/apache/commons/math3/linear/MatrixUtils.java,23,mport java.lang.reflect.Array;
True,src/main/java/org/apache/commons/math3/linear/MatrixUtils.java,src/main/java/org/apache/commons/math3/linear/MatrixUtils.java,27,import org.apache.commons.math3.exception.DimensionMismatchException;
False,src/main/java/org/apache/commons/math3/linear/MatrixUtils.java,src/main/java/org/apache/commons/math3/linear/MatrixUtils.java,29,mport org.apache.commons.math3.exception.OutOfRangeException;
False,src/main/java/org/apache/commons/math3/linear/MatrixUtils.java,src/main/java/org/apache/commons/math3/linear/MatrixUtils.java,31,mport org.apache.commons.math3.exception.NumberIsTooSmallException;
False,src/main/java/org/apache/commons/math3/linear/MatrixUtils.java,src/main/java/org/apache/commons/math3/linear/MatrixUtils.java,33,mport org.apache.commons.math3.exception.DimensionMismatchException;
True,src/main/java/org/apache/commons/math3/linear/MatrixUtils.java,src/main/java/org/apache/commons/math3/linear/MatrixUtils.java,31,import org.apache.commons.math3.exception.NumberIsTooSmallException;
True,src/main/java/org/apache/commons/math3/linear/MatrixUtils.java,src/main/java/org/apache/commons/math3/linear/MatrixUtils.java,32,import org.apache.commons.math3.exception.OutOfRangeException;
True,src/main/java/org/apache/commons/math3/linear/MatrixUtils.java,src/main/java/org/apache/commons/math3/linear/MatrixUtils.java,38,import org.apache.commons.math3.util.MathArrays;
False,src/main/java/org/apache/commons/math3/linear/MatrixUtils.java,src/main/java/org/apache/commons/math3/linear/MatrixUtils.java,197,"SuppressWarnings(""unchecked"")"
False,src/main/java/org/apache/commons/math3/linear/MatrixUtils.java,src/main/java/org/apache/commons/math3/linear/MatrixUtils.java,198,"inal T[][] d = (T[][]) Array.newInstance(field.getRuntimeClass(), new int[] { dimension, dimension });"
True,src/main/java/org/apache/commons/math3/linear/MatrixUtils.java,src/main/java/org/apache/commons/math3/linear/MatrixUtils.java,197,"final T[][] d = MathArrays.buildArray(field, dimension, dimension);"

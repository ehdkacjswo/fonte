is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,17,package org.apache.commons.math3.random;
True,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,19,import org.apache.commons.math3.exception.DimensionMismatchException;
True,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,20,import org.apache.commons.math3.exception.NotPositiveException;
True,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,21,import org.apache.commons.math3.exception.NullArgumentException;
True,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,22,import org.apache.commons.math3.exception.OutOfRangeException;
True,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,23,import org.apache.commons.math3.util.MathUtils;
True,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,26,* Implementation of a Halton sequence.
True,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,27,* <p>
True,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,28,"* A Halton sequence is a low-discrepancy sequence generating points in the interval [0, 1] according to"
True,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,29,* <pre>
True,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,30,*   H(n) = d_0 / b + d_1 / b^2 .... d_j / b^j+1
True,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,32,*   with
True,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,34,*   n = d_j * b^j-1 + ... d_1 * b + d_0 * b^0
True,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,35,* </pre>
True,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,36,"* For higher dimensions, subsequent prime numbers are used as base, e.g. { 2, 3, 5 } for a Halton sequence in R^3."
True,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,37,* <p>
True,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,38,"* Halton sequences are known to suffer from linear correlation for larger prime numbers, thus the individual digits"
True,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,39,* are usually scrambled. This implementation already comes with support for up to 40 dimensions with optimal weight
True,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,40,"* numbers from <a href=""http://etd.lib.fsu.edu/theses/available/etd-07062004-140409/unrestricted/dissertation1.pdf"">"
True,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,41,* H. Chi: Scrambled quasirandom sequences and their applications</a>.
True,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,42,* <p>
True,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,43,* The generator supports two modes:
True,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,44,* <ul>
True,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,45,*   <li>sequential generation of points: {@link #nextVector()}</li>
True,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,46,*   <li>random access to the i-th point in the sequence: {@link #skipTo(int)}</li>
True,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,47,* </ul>
True,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,49,"* @see <a href=""http://en.wikipedia.org/wiki/Halton_sequence"">Halton sequence (Wikipedia)</a>"
True,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,50,"* @see <a href=""https://lirias.kuleuven.be/bitstream/123456789/131168/1/mcm2005_bartv.pdf"">"
True,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,51,* On the Halton sequence and its scramblings</a>
True,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,52,* @version $Id$
True,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,53,* @since 4.0
True,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,55,public class HaltonSequenceGenerator implements RandomVectorGenerator {
True,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,57,/** The first 40 primes. */
True,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,58,private static final int[] PRIMES = new int[] {
True,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,59,"2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,"
True,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,60,"71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139,"
True,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,61,"149, 151, 157, 163, 167, 173"
True,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,64,/** The optimal weights used for scrambling of the first 40 dimension. */
True,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,65,private static final int[] WEIGHTS = new int[] {
True,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,66,"1, 2, 3, 3, 8, 11, 12, 14, 7, 18, 12, 13, 17, 18, 29, 14, 18, 43, 41,"
True,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,67,"44, 40, 30, 47, 65, 71, 28, 40, 60, 79, 89, 56, 50, 52, 61, 108, 56,"
True,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,68,"66, 63, 60, 66"
True,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,71,/** Space dimension. */
True,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,72,private final int dimension;
True,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,74,/** The current index in the sequence. */
True,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,75,private int count = 0;
True,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,77,/** The base numbers for each component. */
True,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,78,private final int[] base;
True,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,80,/** The scrambling weights for each component. */
True,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,81,private final int[] weight;
True,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,84,* Construct a new Halton sequence generator for the given space dimension.
True,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,86,* @param dimension the space dimension
True,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,87,"* @throws OutOfRangeException if the space dimension is outside the allowed range of [1, 40]"
True,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,89,public HaltonSequenceGenerator(final int dimension) throws OutOfRangeException {
True,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,90,"this(dimension, PRIMES, WEIGHTS);"
True,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,94,* Construct a new Halton sequence generator with the given base numbers and weights for each dimension.
True,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,95,* The length of the bases array defines the space dimension and is required to be &gt; 0.
True,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,97,* @param dimension the space dimension
True,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,98,"* @param bases the base number for each dimension, entries should be (pairwise) prime, may not be null"
True,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,99,"* @param weights the weights used during scrambling, may be null in which case no scrambling will be performed"
True,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,100,* @throws NullArgumentException if base is null
True,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,101,"* @throws OutOfRangeException if the space dimension is outside the range [1, len], where"
True,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,102,*   len refers to the length of the bases array
True,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,103,* @throws DimensionMismatchException if weights is non-null and the length of the input arrays differ
True,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,105,"public HaltonSequenceGenerator(final int dimension, final int[] bases, final int[] weights)"
True,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,106,"throws NullArgumentException, OutOfRangeException, DimensionMismatchException {"
True,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,108,MathUtils.checkNotNull(bases);
True,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,110,if (dimension < 1 || dimension > bases.length) {
True,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,111,"throw new OutOfRangeException(dimension, 1, PRIMES.length);"
True,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,114,if (weights != null && weights.length != bases.length) {
True,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,115,"throw new DimensionMismatchException(weights.length, bases.length);"
True,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,118,this.dimension = dimension;
True,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,119,this.base = bases.clone();
True,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,120,this.weight = weights == null ? null : weights.clone();
True,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,121,count = 0;
True,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,124,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,125,public double[] nextVector() {
True,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,126,final double[] v = new double[dimension];
True,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,127,for (int i = 0; i < dimension; i++) {
True,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,128,int index = count;
True,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,129,double f = 1.0 / base[i];
True,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,131,int j = 0;
True,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,132,while (index > 0) {
True,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,133,"final int digit = scramble(i, j, base[i], index % base[i]);"
True,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,134,v[i] += f * digit;
True,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,135,index /= base[i]; // floor( index / base )
True,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,136,f /= base[i];
True,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,139,count++;
True,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,140,return v;
True,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,144,* Performs scrambling of digit {@code d_j} according to the formula:
True,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,145,* <pre>
True,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,146,*   ( weight_i * d_j ) mod base
True,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,147,* </pre>
True,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,148,* Implementations can override this method to do a different scrambling.
True,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,150,* @param i the dimension index
True,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,151,* @param j the digit index
True,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,152,* @param b the base for this dimension
True,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,153,* @param digit the j-th digit
True,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,154,* @return the scrambled digit
True,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,156,"protected int scramble(final int i, final int j, final int b, final int digit) {"
True,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,157,return weight != null ? (weight[i] * digit) % b : digit;
True,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,161,* Skip to the i-th point in the Halton sequence.
True,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,162,* <p>
True,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,163,* This operation can be performed in O(1).
True,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,165,* @param index the index in the sequence to skip to
True,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,166,* @return the i-th point in the Halton sequence
True,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,167,* @throws NotPositiveException if index &lt; 0
True,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,169,public double[] skipTo(final int index) throws NotPositiveException {
True,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,170,count = index;
True,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,171,return nextVector();
True,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,175,* Returns the index i of the next point in the Halton sequence that will be returned
True,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,176,* by calling {@link #nextVector()}.
True,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,178,* @return the index of the next point
True,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,180,public int getNextIndex() {
True,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java,181,return count;

is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,20,mport org.apache.commons.math3.exception.MathUnsupportedOperationException;
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,30,mport org.apache.commons.math3.optim.ConvergenceChecker;
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,31,mport org.apache.commons.math3.optim.BaseOptimizer;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,29,import org.apache.commons.math3.optim.AbstractOptimizer;
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,33,mport org.apache.commons.math3.optim.OptimizationData;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,37,* @param <OPTIM> Concrete optimizer.
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,43,ublic abstract class AbstractLeastSquaresOptimizer
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,44,xtends BaseOptimizer<PointVectorValuePair> {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,42,public abstract class AbstractLeastSquaresOptimizer<OPTIM extends AbstractLeastSquaresOptimizer<OPTIM>>
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,43,"extends AbstractOptimizer<PointVectorValuePair, OPTIM>"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,44,"implements WithTarget<OPTIM>,"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,45,"WithWeight<OPTIM>,"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,46,"WithModelAndJacobian<OPTIM>,"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,47,WithStartPoint<OPTIM> {
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,46,rivate final double[] target;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,49,private double[] target;
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,48,rivate final RealMatrix weight;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,51,private RealMatrix weight;
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,50,rivate final MultivariateVectorFunction model;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,53,private MultivariateVectorFunction model;
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,52,rivate final MultivariateMatrixFunction jacobian;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,55,private MultivariateMatrixFunction jacobian;
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,54,rivate final RealMatrix weightSqrt;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,57,private RealMatrix weightSqrt;
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,56,rivate final double[] start;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,59,private double[] start;
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,59, @param target Observations.
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,60, @param weight Weight of the observations.
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,61," For performance, no defensive copy is performed."
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,62, @param weightSqrt Square-root of the {@code weight} matrix.
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,63," If {@code null}, it will be computed; otherwise it is the caller's"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,64, responsibility that {@code weight} and {@code weightSqrt} are
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,65, consistent.
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,66, No defensive copy is performed.
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,67, @param model ModelFunction.
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,68, @param jacobian Jacobian of the model function.
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,69, @param checker Convergence checker.
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,70, @param start Initial guess.
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,71, @param maxEval Maximum number of evaluations of the model
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,72, function.
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,73, @param maxIter Maximum number of iterations.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,62,* Default constructor.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,64,protected AbstractLeastSquaresOptimizer() {}
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,67,* Copy constructor.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,69,* @param other Instance to copy.
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,75,"rotected AbstractLeastSquaresOptimizer(double[] target,"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,76,"ealMatrix weight,"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,77,"ealMatrix weightSqrt,"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,78,"ultivariateVectorFunction model,"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,79,"ultivariateMatrixFunction jacobian,"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,80,"onvergenceChecker<PointVectorValuePair> checker,"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,81,"ouble[] start,"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,82,"nt maxEval,"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,83,nt maxIter) {
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,84,"uper(checker, maxEval, maxIter);"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,71,protected AbstractLeastSquaresOptimizer(AbstractLeastSquaresOptimizer other) {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,72,target = other.target == null ? null : other.target.clone();
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,73,start = other.start == null ? null : other.start.clone();
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,74,weight = other.weight == null ? null : other.weight.copy();
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,75,weightSqrt = other.weightSqrt == null ? null : other.weightSqrt.copy();
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,76,model = other.model; // XXX Not thread-safe
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,77,jacobian = other.jacobian; // XXX Not thread-safe
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,80,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,81,public OPTIM withTarget(double[] target) {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,82,this.target = target.clone();
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,83,return self();
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,86,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,87,public OPTIM withWeight(RealMatrix weight) {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,88,this.weight = weight; // XXX Not thread-safe
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,89,weightSqrt = squareRoot(weight);
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,90,return self();
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,86,his.target = target;
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,87,his.weight = weight;
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,88,his.model = model;
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,89,his.jacobian = jacobian;
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,90,his.start = start;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,93,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,94,"public OPTIM withModelAndJacobian(MultivariateVectorFunction model,"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,95,MultivariateMatrixFunction jacobian) {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,96,this.model = model; // XXX Not thread-safe
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,97,this.jacobian = jacobian; // XXX Not thread-safe
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,98,return self();
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,92,his.weightSqrt = weightSqrt == null ?
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,93,weight == null ?
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,94,ull : squareRoot(weight)) : weightSqrt;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,101,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,102,public OPTIM withStartPoint(double[] start) {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,103,this.start = start.clone();
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,104,return self();
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,220, Calling this method will raise an exception.
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,222, @param optData Obsolete.
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,223, @return nothing.
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,224, @throws MathUnsupportedOperationException if called.
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,225, @deprecated Do not use this method.
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,227,Deprecated
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,228,Override
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,229,ublic PointVectorValuePair optimize(OptimizationData... optData)
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,230,hrows MathUnsupportedOperationException {
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,231,hrow new MathUnsupportedOperationException();
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,235, Gets a reference to the corresponding field.
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,236, Altering it could jeopardize the consistency of this class.
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,238, @return the reference.
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,240,rotected double[] getTargetInternal() {
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,241,eturn target;
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,245, Gets a reference to the corresponding field.
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,246, Altering it could jeopardize the consistency of this class.
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,248, @return the reference.
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,250,rotected RealMatrix getWeightInternal() {
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,251,eturn weight;
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,255, Gets a reference to the corresponding field.
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,256, Altering it could jeopardize the consistency of this class.
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,258, @return the reference.
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,260,rotected RealMatrix getWeightSquareRootInternal() {
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,261,eturn weightSqrt;
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,19,mport org.apache.commons.math3.analysis.MultivariateVectorFunction;
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,20,mport org.apache.commons.math3.analysis.MultivariateMatrixFunction;
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,50,ublic class GaussNewtonOptimizer extends AbstractLeastSquaresOptimizer
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,51,"mplements WithTarget<GaussNewtonOptimizer>,"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,52,"ithWeight<GaussNewtonOptimizer>,"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,53,"ithModelAndJacobian<GaussNewtonOptimizer>,"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,54,"ithConvergenceChecker<GaussNewtonOptimizer>,"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,55,"ithStartPoint<GaussNewtonOptimizer>,"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,56,"ithMaxIterations<GaussNewtonOptimizer>,"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,57,ithMaxEvaluations<GaussNewtonOptimizer> {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,47,public class GaussNewtonOptimizer extends AbstractLeastSquaresOptimizer<GaussNewtonOptimizer> {
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,59,rivate final boolean useLU;
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,62, Constructor called by the various {@code withXxx} methods.
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,64, @param target Observations.
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,65, @param weight Weight of the observations.
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,66," For performance, no defensive copy is performed."
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,67, @param weightSqrt Square-root of the {@code weight} matrix.
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,68," If {@code null}, it will be computed; otherwise it is the caller's"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,69, responsibility that {@code weight} and {@code weightSqrt} are
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,70, consistent.
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,71, No defensive copy is performed.
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,72, @param model ModelFunction.
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,73, @param jacobian Jacobian of the model function.
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,74, @param checker Convergence checker.
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,75, @param start Initial guess.
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,76, @param maxEval Maximum number of evaluations of the model
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,77, function.
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,78, @param maxIter Maximum number of iterations.
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,79, @param useLU Whether to use LU decomposition.
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,81,"rivate GaussNewtonOptimizer(double[] target,"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,82,"ealMatrix weight,"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,83,"ealMatrix weightSqrt,"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,84,"ultivariateVectorFunction model,"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,85,"ultivariateMatrixFunction jacobian,"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,86,"onvergenceChecker<PointVectorValuePair> checker,"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,87,"ouble[] start,"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,88,"nt maxEval,"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,89,"nt maxIter,"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,90,oolean useLU) {
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,91,"uper(target, weight, weightSqrt, model, jacobian, checker, start, maxEval, maxIter);"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,93,his.useLU = useLU;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,49,private boolean useLU = true;
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,107,"eturn new GaussNewtonOptimizer(null, null, null, null, null, null, null,"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,108,", 0, true);"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,111,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,112,ublic GaussNewtonOptimizer withTarget(double[] target) {
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,113,"eturn new GaussNewtonOptimizer(target,"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,114,"etWeightInternal(),"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,115,"etWeightSquareRootInternal(),"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,116,"etModel(),"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,117,"etJacobian(),"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,118,"etConvergenceChecker(),"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,119,"etStart(),"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,120,"etMaxEvaluations(),"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,121,"etMaxIterations(),"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,122,seLU);
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,125,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,126,ublic GaussNewtonOptimizer withWeight(RealMatrix weight) {
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,127,"eturn new GaussNewtonOptimizer(getTargetInternal(),"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,128,"eight,"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,129,"ull,"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,130,"etModel(),"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,131,"etJacobian(),"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,132,"etConvergenceChecker(),"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,133,"etStart(),"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,134,"etMaxEvaluations(),"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,135,"etMaxIterations(),"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,136,seLU);
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,139,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,140,"ublic GaussNewtonOptimizer withModelAndJacobian(MultivariateVectorFunction model,"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,141,ultivariateMatrixFunction jacobian) {
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,142,"eturn new GaussNewtonOptimizer(getTargetInternal(),"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,143,"etWeightInternal(),"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,144,"etWeightSquareRootInternal(),"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,145,"odel,"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,146,"acobian,"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,147,"etConvergenceChecker(),"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,148,"etStart(),"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,149,"etMaxEvaluations(),"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,150,"etMaxIterations(),"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,151,seLU);
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,154,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,155,ublic GaussNewtonOptimizer withConvergenceChecker(ConvergenceChecker<PointVectorValuePair> checker) {
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,156,"eturn new GaussNewtonOptimizer(getTarget(),"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,157,"etWeightInternal(),"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,158,"etWeightSquareRootInternal(),"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,159,"etModel(),"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,160,"etJacobian(),"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,161,"hecker,"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,162,"etStart(),"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,163,"etMaxEvaluations(),"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,164,"etMaxIterations(),"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,165,seLU);
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,168,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,169,ublic GaussNewtonOptimizer withStartPoint(double[] start) {
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,170,"eturn new GaussNewtonOptimizer(getTarget(),"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,171,"etWeightInternal(),"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,172,"etWeightSquareRootInternal(),"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,173,"etModel(),"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,174,"etJacobian(),"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,175,"etConvergenceChecker(),"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,176,"tart,"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,177,"etMaxEvaluations(),"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,178,"etMaxIterations(),"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,179,seLU);
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,182,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,183,ublic GaussNewtonOptimizer withMaxIterations(int maxIter) {
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,184,"eturn new GaussNewtonOptimizer(getTarget(),"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,185,"etWeightInternal(),"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,186,"etWeightSquareRootInternal(),"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,187,"etModel(),"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,188,"etJacobian(),"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,189,"etConvergenceChecker(),"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,190,"etStart(),"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,191,"etMaxEvaluations(),"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,192,"axIter,"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,193,seLU);
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,196,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,197,ublic GaussNewtonOptimizer withMaxEvaluations(int maxEval) {
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,198,"eturn new GaussNewtonOptimizer(getTarget(),"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,199,"etWeightInternal(),"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,200,"etWeightSquareRootInternal(),"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,201,"etModel(),"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,202,"etJacobian(),"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,203,"etConvergenceChecker(),"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,204,"etStart(),"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,205,"axEval,"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,206,"etMaxIterations(),"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,207,seLU);
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,62,return new GaussNewtonOptimizer();
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,211, Creates a new instance.
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,213, @param withLU Whether to use LU decomposition.
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,214, @return a new instance with all fields identical to this instance except
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,215, for the givens arguments.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,66,* @param useLU Whether to use LU decomposition.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,67,* @return this instance.
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,217,ublic GaussNewtonOptimizer withLU(boolean withLU) {
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,218,"eturn new GaussNewtonOptimizer(getTarget(),"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,219,"etWeightInternal(),"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,220,"etWeightSquareRootInternal(),"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,221,"etModel(),"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,222,"etJacobian(),"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,223,"etConvergenceChecker(),"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,224,"etStart(),"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,225,"etMaxEvaluations(),"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,226,"etMaxIterations(),"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,227,ithLU);
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,69,public GaussNewtonOptimizer withLU(boolean useLU) {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,70,this.useLU = useLU;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,71,return self();
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,20,mport org.apache.commons.math3.analysis.MultivariateVectorFunction;
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,21,mport org.apache.commons.math3.analysis.MultivariateMatrixFunction;
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,110,ublic class LevenbergMarquardtOptimizer extends AbstractLeastSquaresOptimizer
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,111,"mplements WithTarget<LevenbergMarquardtOptimizer>,"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,112,"ithWeight<LevenbergMarquardtOptimizer>,"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,113,"ithModelAndJacobian<LevenbergMarquardtOptimizer>,"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,114,"ithConvergenceChecker<LevenbergMarquardtOptimizer>,"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,115,"ithStartPoint<LevenbergMarquardtOptimizer>,"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,116,"ithMaxIterations<LevenbergMarquardtOptimizer>,"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,117,ithMaxEvaluations<LevenbergMarquardtOptimizer> {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,108,public class LevenbergMarquardtOptimizer extends AbstractLeastSquaresOptimizer<LevenbergMarquardtOptimizer> {
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,121,rivate final double initialStepBoundFactor;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,112,private double initialStepBoundFactor = 100;
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,123,rivate final double costRelativeTolerance;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,114,private double costRelativeTolerance = 1e-10;
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,125,rivate final double parRelativeTolerance;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,116,private double parRelativeTolerance = 1e-10;
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,128,rivate final double orthoTolerance;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,119,private double orthoTolerance = 1e-10;
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,130,rivate final double qrRankingThreshold;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,121,private double qrRankingThreshold = Precision.SAFE_MIN;
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,137, Constructor called by the various {@code withXxx} methods.
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,139, @param target Observations.
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,140, @param weight Weight of the observations.
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,141," For performance, no defensive copy is performed."
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,142, @param weightSqrt Square-root of the {@code weight} matrix.
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,143," If {@code null}, it will be computed; otherwise it is the caller's"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,144, responsibility that {@code weight} and {@code weightSqrt} are
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,145, consistent.
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,146, No defensive copy is performed.
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,147, @param model ModelFunction.
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,148, @param jacobian Jacobian of the model function.
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,149, @param checker Convergence checker.
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,150, @param start Initial guess.
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,151, @param maxEval Maximum number of evaluations of the model
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,152, function.
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,153, @param maxIter Maximum number of iterations.
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,154, @param initialStepBoundFactor Positive input variable used in
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,155, determining the initial step bound. This bound is set to the
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,156, product of initialStepBoundFactor and the euclidean norm of
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,157," {@code diag * x} if non-zero, or else to {@code initialStepBoundFactor}"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,158, itself. In most cases factor should lie in the interval
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,159," {@code (0.1, 100.0)}. {@code 100} is a generally recommended value."
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,160, @param costRelativeTolerance Desired relative error in the sum of
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,161, squares.
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,162, @param parRelativeTolerance Desired relative error in the approximate
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,163, solution parameters.
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,164, @param orthoTolerance Desired max cosine on the orthogonality between
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,165, the function vector and the columns of the Jacobian.
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,166, @param threshold Desired threshold for QR ranking. If the squared norm
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,167, of a column vector is smaller or equal to this threshold during QR
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,168," decomposition, it is considered to be a zero vector and hence the rank"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,169, of the matrix is reduced.
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,171,"rivate LevenbergMarquardtOptimizer(double[] target,"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,172,"ealMatrix weight,"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,173,"ealMatrix weightSqrt,"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,174,"ultivariateVectorFunction model,"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,175,"ultivariateMatrixFunction jacobian,"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,176,"onvergenceChecker<PointVectorValuePair> checker,"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,177,"ouble[] start,"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,178,"nt maxEval,"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,179,"nt maxIter,"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,180,"ouble initialStepBoundFactor,"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,181,"ouble costRelativeTolerance,"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,182,"ouble parRelativeTolerance,"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,183,"ouble orthoTolerance,"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,184,ouble threshold) {
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,185,"uper(target, weight, weightSqrt, model, jacobian, checker, start, maxEval, maxIter);"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,187,his.initialStepBoundFactor = initialStepBoundFactor;
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,188,his.costRelativeTolerance = costRelativeTolerance;
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,189,his.parRelativeTolerance = parRelativeTolerance;
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,190,his.orthoTolerance = orthoTolerance;
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,191,his.qrRankingThreshold = threshold;
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,211,"eturn new LevenbergMarquardtOptimizer(null, null, null, null, null, null, null,"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,212,", 0, 100, 1e-10, 1e-10, 1e-10,"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,213,recision.SAFE_MIN);
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,216,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,217,ublic LevenbergMarquardtOptimizer withTarget(double[] target) {
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,218,"eturn new LevenbergMarquardtOptimizer(target,"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,219,"etWeightInternal(),"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,220,"etWeightSquareRootInternal(),"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,221,"etModel(),"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,222,"etJacobian(),"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,223,"etConvergenceChecker(),"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,224,"etStart(),"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,225,"etMaxEvaluations(),"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,226,"etMaxIterations(),"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,227,"nitialStepBoundFactor,"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,228,"ostRelativeTolerance,"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,229,"arRelativeTolerance,"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,230,"rthoTolerance,"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,231,rRankingThreshold);
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,234,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,235,ublic LevenbergMarquardtOptimizer withWeight(RealMatrix weight) {
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,236,"eturn new LevenbergMarquardtOptimizer(getTargetInternal(),"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,237,"eight,"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,238,"ull,"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,239,"etModel(),"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,240,"etJacobian(),"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,241,"etConvergenceChecker(),"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,242,"etStart(),"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,243,"etMaxEvaluations(),"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,244,"etMaxIterations(),"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,245,"nitialStepBoundFactor,"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,246,"ostRelativeTolerance,"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,247,"arRelativeTolerance,"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,248,"rthoTolerance,"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,249,rRankingThreshold);
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,144,return new LevenbergMarquardtOptimizer();
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,252,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,253,"ublic LevenbergMarquardtOptimizer withModelAndJacobian(MultivariateVectorFunction model,"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,254,ultivariateMatrixFunction jacobian) {
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,255,"eturn new LevenbergMarquardtOptimizer(getTargetInternal(),"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,256,"etWeightInternal(),"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,257,"etWeightSquareRootInternal(),"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,258,"odel,"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,259,"acobian,"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,260,"etConvergenceChecker(),"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,261,"etStart(),"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,262,"etMaxEvaluations(),"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,263,"etMaxIterations(),"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,264,"nitialStepBoundFactor,"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,265,"ostRelativeTolerance,"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,266,"arRelativeTolerance,"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,267,"rthoTolerance,"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,268,rRankingThreshold);
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,271,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,272,ublic LevenbergMarquardtOptimizer withConvergenceChecker(ConvergenceChecker<PointVectorValuePair> checker) {
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,273,"eturn new LevenbergMarquardtOptimizer(getTarget(),"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,274,"etWeightInternal(),"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,275,"etWeightSquareRootInternal(),"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,276,"etModel(),"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,277,"etJacobian(),"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,278,"hecker,"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,279,"etStart(),"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,280,"etMaxEvaluations(),"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,281,"etMaxIterations(),"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,282,"nitialStepBoundFactor,"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,283,"ostRelativeTolerance,"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,284,"arRelativeTolerance,"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,285,"rthoTolerance,"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,286,rRankingThreshold);
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,148,* @param initialStepBoundFactor Positive input variable used in
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,149,* determining the initial step bound. This bound is set to the
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,150,* product of initialStepBoundFactor and the euclidean norm of
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,151,"* {@code diag * x} if non-zero, or else to {@code initialStepBoundFactor}"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,152,* itself. In most cases factor should lie in the interval
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,153,"* {@code (0.1, 100.0)}. {@code 100} is a generally recommended value."
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,154,* of the matrix is reduced.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,155,* @return this instance.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,157,public LevenbergMarquardtOptimizer withInitialStepBoundFactor(double initialStepBoundFactor) {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,158,this.initialStepBoundFactor = initialStepBoundFactor;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,159,return self();
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,289,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,290,ublic LevenbergMarquardtOptimizer withStartPoint(double[] start) {
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,291,"eturn new LevenbergMarquardtOptimizer(getTarget(),"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,292,"etWeightInternal(),"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,293,"etWeightSquareRootInternal(),"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,294,"etModel(),"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,295,"etJacobian(),"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,296,"etConvergenceChecker(),"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,297,"tart,"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,298,"etMaxEvaluations(),"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,299,"etMaxIterations(),"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,300,"nitialStepBoundFactor,"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,301,"ostRelativeTolerance,"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,302,"arRelativeTolerance,"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,303,"rthoTolerance,"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,304,rRankingThreshold);
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,163,* @param costRelativeTolerance Desired relative error in the sum of squares.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,164,* @return this instance.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,166,public LevenbergMarquardtOptimizer withCostRelativeTolerance(double costRelativeTolerance) {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,167,this.costRelativeTolerance = costRelativeTolerance;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,168,return self();
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,307,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,308,ublic LevenbergMarquardtOptimizer withMaxIterations(int maxIter) {
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,309,"eturn new LevenbergMarquardtOptimizer(getTarget(),"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,310,"etWeightInternal(),"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,311,"etWeightSquareRootInternal(),"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,312,"etModel(),"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,313,"etJacobian(),"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,314,"etConvergenceChecker(),"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,315,"etStart(),"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,316,"etMaxEvaluations(),"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,317,"axIter,"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,318,"nitialStepBoundFactor,"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,319,"ostRelativeTolerance,"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,320,"arRelativeTolerance,"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,321,"rthoTolerance,"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,322,rRankingThreshold);
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,172,* @param parameterRelativeTolerance Desired relative error in the approximate solution
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,173,* parameters.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,174,* @return this instance.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,176,public LevenbergMarquardtOptimizer withParameterRelativeTolerance(double parameterRelativeTolerance) {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,177,this.parRelativeTolerance = parameterRelativeTolerance;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,178,return self();
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,325,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,326,ublic LevenbergMarquardtOptimizer withMaxEvaluations(int maxEval) {
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,327,"eturn new LevenbergMarquardtOptimizer(getTarget(),"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,328,"etWeightInternal(),"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,329,"etWeightSquareRootInternal(),"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,330,"etModel(),"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,331,"etJacobian(),"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,332,"etConvergenceChecker(),"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,333,"etStart(),"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,334,"axEval,"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,335,"etMaxIterations(),"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,336,"nitialStepBoundFactor,"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,337,"ostRelativeTolerance,"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,338,"arRelativeTolerance,"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,339,"rthoTolerance,"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,340,rRankingThreshold);
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,182,* @param orthoTolerance Desired max cosine on the orthogonality between
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,183,* the function vector and the columns of the Jacobian.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,184,* @return this instance.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,186,public LevenbergMarquardtOptimizer withOrthoTolerance(double orthoTolerance) {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,187,this.orthoTolerance = orthoTolerance;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,188,return self();
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,344, Creates a new instance.
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,346, @param initStepBoundFactor Positive input variable used in
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,347, determining the initial step bound. This bound is set to the
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,348, product of initialStepBoundFactor and the euclidean norm of
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,349," {@code diag * x} if non-zero, or else to {@code initialStepBoundFactor}"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,350, itself. In most cases factor should lie in the interval
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,351," {@code (0.1, 100.0)}. {@code 100} is a generally recommended value."
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,352, @param costRelTol Desired relative error in the sum of squares.
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,353, @param parRelTol Desired relative error in the approximate solution
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,354, parameters.
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,355, @param orthoTol Desired max cosine on the orthogonality between
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,356, the function vector and the columns of the Jacobian.
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,357, @param threshold Desired threshold for QR ranking. If the squared norm
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,358, of a column vector is smaller or equal to this threshold during QR
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,359," decomposition, it is considered to be a zero vector and hence the rank"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,360, of the matrix is reduced.
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,361, @return a new instance with all fields identical to this instance except
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,362, for the givens arguments.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,192,* @param rankingThreshold Desired threshold for QR ranking.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,193,* If the squared norm of a column vector is smaller or equal to this
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,194,"* threshold during QR decomposition, it is considered to be a zero vector"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,195,* and hence the rank of the matrix is reduced.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,196,* @return this instance.
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,364,"ublic LevenbergMarquardtOptimizer withTuningParameters(double initStepBoundFactor,"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,365,"ouble costRelTol,"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,366,"ouble parRelTol,"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,367,"ouble orthoTol,"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,368,ouble threshold) {
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,369,"eturn new LevenbergMarquardtOptimizer(getTarget(),"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,370,"etWeightInternal(),"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,371,"etWeightSquareRootInternal(),"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,372,"etModel(),"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,373,"etJacobian(),"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,374,"etConvergenceChecker(),"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,375,"etStart(),"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,376,"etMaxEvaluations(),"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,377,"etMaxIterations(),"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,378,"nitStepBoundFactor,"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,379,"ostRelTol,"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,380,"arRelTol,"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,381,"rthoTol,"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,382,hreshold);
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,198,public LevenbergMarquardtOptimizer withRankingThreshold(double rankingThreshold) {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,199,this.qrRankingThreshold = rankingThreshold;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,200,return self();
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,387," @see #withTuningParameters(double,double,double,double,double)"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,205,* @see #withInitialStepBoundFactor(double)
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,397," @see #withTuningParameters(double,double,double,double,double)"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,215,* @see #withCostRelativeTolerance(double)
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,407," @see #withTuningParameters(double,double,double,double,double)"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,225,* @see #withParameterRelativeTolerance(double)
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,411,ublic double getParRelativeTolerance() {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,229,public double getParameterRelativeTolerance() {
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,417," @see #withTuningParameters(double,double,double,double,double)"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,235,* @see #withOrthoTolerance(double)
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,427," @see #withTuningParameters(double,double,double,double,double)"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,245,* @see #withRankingThreshold(double)
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithConvergenceChecker.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithConvergenceChecker.java,20,mport org.apache.commons.math3.optim.PointVectorValuePair;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithConvergenceChecker.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithConvergenceChecker.java,25,* @param <PAIR> Parametric type for the {@link ConvergenceChecker}.
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithConvergenceChecker.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithConvergenceChecker.java,30,ublic interface WithConvergenceChecker<T> {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithConvergenceChecker.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithConvergenceChecker.java,30,"public interface WithConvergenceChecker<PAIR, T> {"
False,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithConvergenceChecker.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithConvergenceChecker.java,38, withConvergenceChecker(ConvergenceChecker<PointVectorValuePair> checker);
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithConvergenceChecker.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithConvergenceChecker.java,38,T withConvergenceChecker(ConvergenceChecker<PAIR> checker);
True,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,17,package org.apache.commons.math3.optim;
True,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,19,import org.apache.commons.math3.util.Incrementor;
True,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,20,import org.apache.commons.math3.exception.TooManyEvaluationsException;
True,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,21,import org.apache.commons.math3.exception.TooManyIterationsException;
True,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,22,import org.apache.commons.math3.fitting.leastsquares.WithMaxEvaluations;
True,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,23,import org.apache.commons.math3.fitting.leastsquares.WithMaxIterations;
True,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,24,import org.apache.commons.math3.fitting.leastsquares.WithConvergenceChecker;
True,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,27,* Base class for implementing optimizers.
True,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,28,* It contains the boiler-plate code for counting the number of evaluations
True,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,29,"* of the objective function and the number of iterations of the algorithm,"
True,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,30,* and storing the convergence checker.
True,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,32,* @param <PAIR> Type of the point/value pair returned by the optimization
True,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,33,* algorithm.
True,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,34,* @param <OPTIM> Type of a subclass of this class.
True,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,35,* This parameter allows to implement fluent API methods at upper levels
True,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,36,* of the class hierarchy (since the fluent API requires that the actual
True,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,37,* type of the subclass is returned).
True,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,39,* @version $Id$
True,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,40,* @since 3.3
True,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,42,"public abstract class AbstractOptimizer<PAIR, OPTIM extends AbstractOptimizer<PAIR, OPTIM>>"
True,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,43,"implements WithMaxEvaluations<OPTIM>,"
True,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,44,"WithMaxIterations<OPTIM>,"
True,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,45,"WithConvergenceChecker<PAIR, OPTIM> {"
True,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,46,/** Evaluations counter. */
True,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,47,"private Incrementor evaluations = new Incrementor(Integer.MAX_VALUE, new MaxEvalCallback());"
True,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,48,/** Iterations counter. */
True,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,49,"private Incrementor iterations = new Incrementor(Integer.MAX_VALUE, new MaxIterCallback());"
True,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,50,/** Convergence checker. */
True,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,51,private ConvergenceChecker<PAIR> checker = null;
True,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,54,* Default constructor.
True,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,56,protected AbstractOptimizer() {}
True,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,59,* Copy constructor.
True,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,61,* @param other Instance to copy.
True,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,63,protected AbstractOptimizer(AbstractOptimizer other) {
True,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,64,checker = other.checker; // XXX Not thread-safe.
True,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,65,evaluations.setMaximalCount(other.getMaxEvaluations());
True,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,66,iterations.setMaximalCount(other.getMaxIterations());
True,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,70,"* Returns this instance, cast to the type of its actual subclass."
True,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,72,"* @return the ""self-type"" instance."
True,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,74,protected OPTIM self() {
True,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,75,final OPTIM optim = (OPTIM) this;
True,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,76,return optim;
True,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,79,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,80,public OPTIM withConvergenceChecker(ConvergenceChecker<PAIR> checker) {
True,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,81,this.checker = checker;
True,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,82,return self();
True,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,85,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,86,public OPTIM withMaxEvaluations(int max) {
True,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,87,evaluations.setMaximalCount(max);
True,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,88,return self();
True,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,91,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,92,public OPTIM withMaxIterations(int max) {
True,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,93,iterations.setMaximalCount(max);
True,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,94,return self();
True,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,98,* Gets the maximal number of function evaluations.
True,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,100,* @return the maximal number of function evaluations.
True,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,102,public int getMaxEvaluations() {
True,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,103,return evaluations.getMaximalCount();
True,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,107,* Gets the number of evaluations of the objective function.
True,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,108,* The number of evaluations corresponds to the last call to the
True,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,109,* {@code optimize} method. It is 0 if the method has not been
True,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,110,* called yet.
True,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,112,* @return the number of evaluations of the objective function.
True,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,114,public int getEvaluations() {
True,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,115,return evaluations.getCount();
True,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,119,* Gets the maximal number of iterations.
True,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,121,* @return the maximal number of iterations.
True,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,123,public int getMaxIterations() {
True,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,124,return iterations.getMaximalCount();
True,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,128,* Gets the number of iterations performed by the algorithm.
True,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,129,* The number iterations corresponds to the last call to the
True,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,130,* {@code optimize} method. It is 0 if the method has not been
True,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,131,* called yet.
True,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,133,* @return the number of evaluations of the objective function.
True,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,135,public int getIterations() {
True,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,136,return iterations.getCount();
True,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,140,* Gets the convergence checker.
True,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,142,* @return the object used to check for convergence.
True,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,144,public ConvergenceChecker<PAIR> getConvergenceChecker() {
True,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,145,return checker;
True,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,149,* Performs the optimization.
True,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,151,* @return a point/value pair that satifies the convergence criteria.
True,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,152,* @throws TooManyEvaluationsException if the maximal number of
True,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,153,* evaluations is exceeded.
True,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,154,* @throws TooManyIterationsException if the maximal number of
True,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,155,* iterations is exceeded.
True,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,157,public PAIR optimize()
True,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,158,"throws TooManyEvaluationsException,"
True,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,159,TooManyIterationsException {
True,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,160,// Reset counters.
True,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,161,evaluations.resetCount();
True,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,162,iterations.resetCount();
True,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,163,// Perform optimization.
True,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,164,return doOptimize();
True,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,168,* Performs the bulk of the optimization algorithm.
True,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,170,* @return the point/value pair giving the optimal value of the
True,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,171,* objective function.
True,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,173,protected abstract PAIR doOptimize();
True,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,176,* Increment the evaluation count.
True,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,178,* @throws TooManyEvaluationsException if the allowed evaluations
True,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,179,* have been exhausted.
True,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,181,protected void incrementEvaluationCount()
True,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,182,throws TooManyEvaluationsException {
True,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,183,evaluations.incrementCount();
True,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,187,* Increment the iteration count.
True,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,189,* @throws TooManyIterationsException if the allowed iterations
True,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,190,* have been exhausted.
True,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,192,protected void incrementIterationCount()
True,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,193,throws TooManyIterationsException {
True,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,194,iterations.incrementCount();
True,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,198,* Defines the action to perform when reaching the maximum number
True,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,199,* of evaluations.
True,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,201,private static class MaxEvalCallback
True,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,202,implements  Incrementor.MaxCountExceededCallback {
True,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,204,* {@inheritDoc}
True,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,205,* @throws TooManyEvaluationsException
True,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,207,public void trigger(int max) {
True,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,208,throw new TooManyEvaluationsException(max);
True,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,213,* Defines the action to perform when reaching the maximum number
True,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,214,* of evaluations.
True,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,216,private static class MaxIterCallback
True,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,217,implements Incrementor.MaxCountExceededCallback {
True,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,219,* {@inheritDoc}
True,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,220,* @throws TooManyIterationsException
True,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,222,public void trigger(int max) {
True,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java,223,throw new TooManyIterationsException(max);
False,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,47,ublic abstract class AbstractLeastSquaresOptimizerAbstractTest<T extends AbstractLeastSquaresOptimizer &
False,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,48,ithTarget<T> &
False,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,49,ithWeight<T> &
False,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,50,ithModelAndJacobian<T> &
False,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,51,ithConvergenceChecker<T> &
False,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,52,ithStartPoint<T> &
False,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,53,ithMaxIterations<T> &
False,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,54,ithMaxEvaluations<T>> {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,47,public abstract class AbstractLeastSquaresOptimizerAbstractTest<T extends AbstractLeastSquaresOptimizer<T>> {
False,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,118,"withTuningParameters(initialStepBoundFactor,"
False,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,119,"ostRelativeTolerance,"
False,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,120,"arRelativeTolerance,"
False,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,121,"rthoTolerance,"
False,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,122,recision.SAFE_MIN)
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,118,.withInitialStepBoundFactor(initialStepBoundFactor)
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,119,.withCostRelativeTolerance(costRelativeTolerance)
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,120,.withParameterRelativeTolerance(parRelativeTolerance)
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,121,.withOrthoTolerance(orthoTolerance)
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,122,.withRankingThreshold(Precision.SAFE_MIN)
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,501,final double sqrtTol = FastMath.sqrt(tol);
False,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,503,"withTuningParameters(optimizer.getInitialStepBoundFactor(),"
False,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,504,"astMath.sqrt(tol),"
False,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,505,"astMath.sqrt(tol),"
False,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,506,"ol,"
False,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,507,ptimizer.getRankingThreshold())
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,504,.withInitialStepBoundFactor(optimizer.getInitialStepBoundFactor())
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,505,.withCostRelativeTolerance(sqrtTol)
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,506,.withParameterRelativeTolerance(sqrtTol)
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,507,.withOrthoTolerance(tol)
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,508,.withRankingThreshold(optimizer.getRankingThreshold())

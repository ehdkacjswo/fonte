is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java,54,* Decompose a symmetric positive semidefinite matrix.
True,src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java,55,* <p>
True,src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java,56,* <b>Note:</b> this constructor follows the linpack method to detect dependent
True,src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java,57,* columns by proceeding with the Cholesky algorithm until a nonpositive diagonal
True,src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java,58,* element is encountered.
True,src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java,60,"* @see <a href=""http://eprints.ma.man.ac.uk/1193/01/covered/MIMS_ep2008_56.pdf"">"
True,src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java,61,* Analysis of the Cholesky Decomposition of a Semi-definite Matrix</a>
True,src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java,63,* @param matrix Symmetric positive semidefinite matrix.
True,src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java,64,* @exception NonPositiveDefiniteMatrixException if the matrix is not
True,src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java,65,* positive semidefinite.
True,src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java,67,public RectangularCholeskyDecomposition(RealMatrix matrix)
True,src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java,68,throws NonPositiveDefiniteMatrixException {
True,src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java,69,"this(matrix, 0);"
False,src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java,57, @param small Diagonal elements threshold under which  column are
True,src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java,76,* @param small Diagonal elements threshold under which columns are
False,src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java,100,f (c[ir][ir] < small) {
True,src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java,119,if (c[ir][ir] <= small) {
False,src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java,src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java,117,+r;
False,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,84,"ealMatrix root1 = new RectangularCholeskyDecomposition(m1, 1.0e-10).getRootMatrix();"
False,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,85,ealMatrix rebuiltM1 = root1.multiply(root1.transpose());
False,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,86,"ssert.assertEquals(0.0, m1.subtract(rebuiltM1).getNorm(), 1.0e-16);"
True,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,84,"composeAndTest(m1, 4);"
False,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,95,"ealMatrix root2 = new RectangularCholeskyDecomposition(m2, 1.0e-10).getRootMatrix();"
False,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,96,ealMatrix rebuiltM2 = root2.multiply(root2.transpose());
False,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,97,"ssert.assertEquals(0.0, m2.subtract(rebuiltM2).getNorm(), 1.0e-16);"
True,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,93,"composeAndTest(m2, 4);"
False,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,106,"ealMatrix root3 = new RectangularCholeskyDecomposition(m3, 1.0e-10).getRootMatrix();"
False,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,107,ealMatrix rebuiltM3 = root3.multiply(root3.transpose());
False,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,108,"ssert.assertEquals(0.0, m3.subtract(rebuiltM3).getNorm(), 1.0e-16);"
True,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,102,"composeAndTest(m3, 4);"
True,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,106,"private void composeAndTest(RealMatrix m, int expectedRank) {"
True,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,107,RectangularCholeskyDecomposition r = new RectangularCholeskyDecomposition(m);
True,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,108,"Assert.assertEquals(expectedRank, r.getRank());"
True,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,109,RealMatrix root = r.getRootMatrix();
True,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,110,RealMatrix rebuiltMatrix = root.multiply(root.transpose());
True,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,111,"Assert.assertEquals(0.0, m.subtract(rebuiltMatrix).getNorm(), 1.0e-16);"
False,src/test/java/org/apache/commons/math3/random/CorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math3/random/CorrelatedRandomVectorGeneratorTest.java,71,"ssert.assertEquals(3, generator.getRank());"
True,src/test/java/org/apache/commons/math3/random/CorrelatedRandomVectorGeneratorTest.java,src/test/java/org/apache/commons/math3/random/CorrelatedRandomVectorGeneratorTest.java,71,"Assert.assertEquals(2, generator.getRank());"

is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,17,package org.apache.commons.math3.analysis.interpolation;
True,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,19,import java.util.ArrayList;
True,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,20,import java.util.List;
True,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,22,import org.apache.commons.math3.FieldElement;
True,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,23,import org.apache.commons.math3.exception.MathArithmeticException;
True,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,24,import org.apache.commons.math3.exception.NoDataException;
True,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,25,import org.apache.commons.math3.exception.ZeroException;
True,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,26,import org.apache.commons.math3.exception.util.LocalizedFormats;
True,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,27,import org.apache.commons.math3.util.MathArrays;
True,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,29,/** Polynomial interpolator using both sample values and sample derivatives.
True,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,30,* <p>
True,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,31,"* The interpolation polynomials match all sample points, including both values"
True,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,32,* and provided derivatives. There is one polynomial for each component of
True,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,33,* the values vector. All polynomials have the same degree. The degree of the
True,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,34,* polynomials depends on the number of points and number of derivatives at each
True,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,35,* point. For example the interpolation polynomials for n sample points without
True,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,36,* any derivatives all have degree n-1. The interpolation polynomials for n
True,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,37,* sample points with the two extreme points having value and first derivative
True,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,38,* and the remaining points having value only all have degree n+1. The
True,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,39,"* interpolation polynomial for n sample points with value, first and second"
True,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,40,* derivative for all points all have degree 3n-1.
True,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,41,* </p>
True,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,43,* @version $Id$
True,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,44,* @since 3.2
True,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,46,public class FieldHermiteInterpolator<T extends FieldElement<T>> {
True,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,48,/** Sample abscissae. */
True,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,49,private final List<T> abscissae;
True,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,51,/** Top diagonal of the divided differences array. */
True,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,52,private final List<T[]> topDiagonal;
True,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,54,/** Bottom diagonal of the divided differences array. */
True,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,55,private final List<T[]> bottomDiagonal;
True,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,57,/** Create an empty interpolator.
True,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,59,public FieldHermiteInterpolator() {
True,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,60,this.abscissae      = new ArrayList<T>();
True,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,61,this.topDiagonal    = new ArrayList<T[]>();
True,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,62,this.bottomDiagonal = new ArrayList<T[]>();
True,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,65,/** Add a sample point.
True,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,66,* <p>
True,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,67,* This method must be called once for each sample point. It is allowed to
True,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,68,* mix some calls with values only with calls with values and first
True,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,69,* derivatives.
True,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,70,* </p>
True,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,71,* <p>
True,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,72,* The point abscissae for all calls <em>must</em> be different.
True,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,73,* </p>
True,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,74,* @param x abscissa of the sample point
True,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,75,* @param value value and derivatives of the sample point
True,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,76,"* (if only one row is passed, it is the value, if two rows are"
True,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,77,* passed the first one is the value and the second the derivative
True,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,78,* and so on)
True,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,79,* @exception ZeroException if the abscissa difference between added point
True,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,80,* and a previous point is zero (i.e. the two points are at same abscissa)
True,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,81,* @exception MathArithmeticException if the number of derivatives is larger
True,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,82,"* than 20, which prevents computation of a factorial"
True,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,84,"public void addSamplePoint(final T x, final T[] ... value)"
True,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,85,"throws ZeroException, MathArithmeticException {"
True,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,87,T factorial = x.getField().getOne();
True,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,88,for (int i = 0; i < value.length; ++i) {
True,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,90,final T[] y = value[i].clone();
True,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,91,if (i > 1) {
True,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,92,factorial = factorial.multiply(i);
True,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,93,final T inv = factorial.reciprocal();
True,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,94,for (int j = 0; j < y.length; ++j) {
True,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,95,y[j] = y[j].multiply(inv);
True,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,99,// update the bottom diagonal of the divided differences array
True,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,100,final int n = abscissae.size();
True,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,101,"bottomDiagonal.add(n - i, y);"
True,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,102,T[] bottom0 = y;
True,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,103,for (int j = i; j < n; ++j) {
True,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,104,final T[] bottom1 = bottomDiagonal.get(n - (j + 1));
True,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,105,if (x.equals(abscissae.get(n - (j + 1)))) {
True,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,106,"throw new ZeroException(LocalizedFormats.DUPLICATED_ABSCISSA_DIVISION_BY_ZERO, x);"
True,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,108,final T inv = x.subtract(abscissae.get(n - (j + 1))).reciprocal();
True,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,109,for (int k = 0; k < y.length; ++k) {
True,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,110,bottom1[k] = inv.multiply(bottom0[k].subtract(bottom1[k]));
True,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,112,bottom0 = bottom1;
True,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,115,// update the top diagonal of the divided differences array
True,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,116,topDiagonal.add(bottom0.clone());
True,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,118,// update the abscissae array
True,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,119,abscissae.add(x);
True,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,125,/** Interpolate value at a specified abscissa.
True,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,126,* @param x interpolation abscissa
True,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,127,* @return interpolated value
True,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,128,* @exception NoDataException if sample is empty
True,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,130,public T[] value(T x) throws NoDataException {
True,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,132,// safety check
True,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,133,if (abscissae.isEmpty()) {
True,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,134,throw new NoDataException(LocalizedFormats.EMPTY_INTERPOLATION_SAMPLE);
True,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,137,"final T[] value = MathArrays.buildArray(x.getField(), topDiagonal.get(0).length);"
True,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,138,T valueCoeff = x.getField().getOne();
True,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,139,for (int i = 0; i < topDiagonal.size(); ++i) {
True,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,140,T[] dividedDifference = topDiagonal.get(i);
True,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,141,for (int k = 0; k < value.length; ++k) {
True,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,142,value[k] = value[k].add(dividedDifference[k].multiply(valueCoeff));
True,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,144,final T deltaX = x.subtract(abscissae.get(i));
True,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,145,valueCoeff = valueCoeff.multiply(deltaX);
True,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,148,return value;
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,14,* See the License for the specific language governing permissions and
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,15,* limitations under the License.
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,17,package org.apache.commons.math3.analysis.interpolation;
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,19,import java.util.Random;
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,21,import org.apache.commons.math3.analysis.polynomials.PolynomialFunction;
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,22,import org.apache.commons.math3.dfp.Dfp;
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,23,import org.apache.commons.math3.dfp.DfpField;
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,24,import org.apache.commons.math3.exception.NoDataException;
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,25,import org.apache.commons.math3.fraction.BigFraction;
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,26,import org.apache.commons.math3.util.FastMath;
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,27,import org.junit.Assert;
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,28,import org.junit.Test;
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,30,public class FieldHermiteInterpolatorTest {
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,32,@Test
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,33,public void testZero() {
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,34,FieldHermiteInterpolator<BigFraction> interpolator = new FieldHermiteInterpolator<BigFraction>();
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,35,"interpolator.addSamplePoint(new BigFraction(0), new BigFraction[] { new BigFraction(0) });"
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,36,for (int x = -10; x < 10; x++) {
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,37,BigFraction y = interpolator.value(new BigFraction(x))[0];
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,38,"Assert.assertEquals(BigFraction.ZERO, y);"
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,42,@Test
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,43,public void testQuadratic() {
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,44,FieldHermiteInterpolator<BigFraction> interpolator = new FieldHermiteInterpolator<BigFraction>();
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,45,"interpolator.addSamplePoint(new BigFraction(0), new BigFraction[] { new BigFraction(2) });"
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,46,"interpolator.addSamplePoint(new BigFraction(1), new BigFraction[] { new BigFraction(0) });"
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,47,"interpolator.addSamplePoint(new BigFraction(2), new BigFraction[] { new BigFraction(0) });"
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,48,for (double x = -10; x < 10; x += 1.0) {
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,49,BigFraction y = interpolator.value(new BigFraction(x))[0];
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,50,"Assert.assertEquals((x - 1) * (x - 2), y.doubleValue(), 1.0e-15);"
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,54,@Test
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,55,public void testMixedDerivatives() {
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,56,FieldHermiteInterpolator<BigFraction> interpolator = new FieldHermiteInterpolator<BigFraction>();
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,57,"interpolator.addSamplePoint(new BigFraction(0), new BigFraction[] { new BigFraction(1) }, new BigFraction[] { new BigFraction(2) });"
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,58,"interpolator.addSamplePoint(new BigFraction(1), new BigFraction[] { new BigFraction(4) });"
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,59,"interpolator.addSamplePoint(new BigFraction(2), new BigFraction[] { new BigFraction(5) }, new BigFraction[] { new BigFraction(2) });"
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,60,"Assert.assertEquals(new BigFraction(1), interpolator.value(new BigFraction(0))[0]);"
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,61,"Assert.assertEquals(new BigFraction(4), interpolator.value(new BigFraction(1))[0]);"
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,62,"Assert.assertEquals(new BigFraction(5), interpolator.value(new BigFraction(2))[0]);"
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,65,@Test
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,66,public void testRandomPolynomialsValuesOnly() {
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,68,Random random = new Random(0x42b1e7dbd361a932l);
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,70,for (int i = 0; i < 100; ++i) {
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,72,int maxDegree = 0;
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,73,PolynomialFunction[] p = new PolynomialFunction[5];
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,74,for (int k = 0; k < p.length; ++k) {
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,75,int degree = random.nextInt(7);
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,76,"p[k] = randomPolynomial(degree, random);"
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,77,"maxDegree = FastMath.max(maxDegree, degree);"
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,80,DfpField field = new DfpField(30);
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,81,Dfp step = field.getOne().divide(field.newDfp(10));
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,82,FieldHermiteInterpolator<Dfp> interpolator = new FieldHermiteInterpolator<Dfp>();
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,83,for (int j = 0; j < 1 + maxDegree; ++j) {
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,84,Dfp x = field.newDfp(j).multiply(step);
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,85,Dfp[] values = new Dfp[p.length];
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,86,for (int k = 0; k < p.length; ++k) {
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,87,values[k] = field.newDfp(p[k].value(x.getReal()));
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,89,"interpolator.addSamplePoint(x, values);"
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,92,for (int j = 0; j < 20; ++j) {
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,93,Dfp x = field.newDfp(j).multiply(step);
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,94,Dfp[] values = interpolator.value(x);
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,95,"Assert.assertEquals(p.length, values.length);"
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,96,for (int k = 0; k < p.length; ++k) {
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,97,"Assert.assertEquals(p[k].value(x.getReal()),"
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,98,"values[k].getReal(),"
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,99,1.0e-8 * FastMath.abs(p[k].value(x.getReal())));
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,107,@Test
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,108,public void testRandomPolynomialsFirstDerivative() {
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,110,Random random = new Random(0x570803c982ca5d3bl);
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,112,for (int i = 0; i < 100; ++i) {
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,114,int maxDegree = 0;
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,115,PolynomialFunction[] p      = new PolynomialFunction[5];
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,116,PolynomialFunction[] pPrime = new PolynomialFunction[5];
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,117,for (int k = 0; k < p.length; ++k) {
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,118,int degree = random.nextInt(7);
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,119,"p[k]      = randomPolynomial(degree, random);"
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,120,pPrime[k] = p[k].polynomialDerivative();
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,121,"maxDegree = FastMath.max(maxDegree, degree);"
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,124,DfpField field = new DfpField(30);
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,125,Dfp step = field.getOne().divide(field.newDfp(10));
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,126,FieldHermiteInterpolator<Dfp> interpolator = new FieldHermiteInterpolator<Dfp>();
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,127,for (int j = 0; j < 1 + maxDegree / 2; ++j) {
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,128,Dfp x = field.newDfp(j).multiply(step);
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,129,Dfp[] values      = new Dfp[p.length];
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,130,Dfp[] derivatives = new Dfp[p.length];
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,131,for (int k = 0; k < p.length; ++k) {
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,132,values[k]      = field.newDfp(p[k].value(x.getReal()));
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,133,derivatives[k] = field.newDfp(pPrime[k].value(x.getReal()));
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,135,"interpolator.addSamplePoint(x, values, derivatives);"
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,138,Dfp h = step.divide(field.newDfp(100000));
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,139,for (int j = 0; j < 20; ++j) {
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,140,Dfp x = field.newDfp(j).multiply(step);
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,141,Dfp[] y  = interpolator.value(x);
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,142,Dfp[] yP = interpolator.value(x.add(h));
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,143,Dfp[] yM = interpolator.value(x.subtract(h));
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,144,"Assert.assertEquals(p.length, y.length);"
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,145,for (int k = 0; k < p.length; ++k) {
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,146,"Assert.assertEquals(p[k].value(x.getReal()),"
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,147,"y[k].getReal(),"
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,148,1.0e-8 * FastMath.abs(p[k].value(x.getReal())));
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,149,"Assert.assertEquals(pPrime[k].value(x.getReal()),"
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,150,"yP[k].subtract(yM[k]).divide(h.multiply(2)).getReal(),"
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,151,4.0e-8 * FastMath.abs(p[k].value(x.getReal())));
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,153,System.out.println();
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,159,@Test
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,160,public void testSine() {
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,161,DfpField field = new DfpField(30);
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,162,FieldHermiteInterpolator<Dfp> interpolator = new FieldHermiteInterpolator<Dfp>();
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,163,for (Dfp x = field.getZero(); x.getReal() < FastMath.PI; x = x.add(0.5)) {
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,164,"interpolator.addSamplePoint(x, new Dfp[] { x.sin() });"
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,166,for (Dfp x = field.newDfp(0.1); x.getReal() < 2.9; x = x.add(0.01)) {
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,167,Dfp y = interpolator.value(x)[0];
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,168,"Assert.assertEquals( x.sin().getReal(), y.getReal(), 3.5e-5);"
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,172,@Test
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,173,public void testSquareRoot() {
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,174,DfpField field = new DfpField(30);
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,175,FieldHermiteInterpolator<Dfp> interpolator = new FieldHermiteInterpolator<Dfp>();
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,176,for (Dfp x = field.getOne(); x.getReal() < 3.6; x = x.add(0.5)) {
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,177,"interpolator.addSamplePoint(x, new Dfp[] { x.sqrt() });"
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,179,for (Dfp x = field.newDfp(1.1); x.getReal() < 3.5; x = x.add(0.01)) {
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,180,Dfp y = interpolator.value(x)[0];
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,181,"Assert.assertEquals(x.sqrt().getReal(), y.getReal(), 1.5e-4);"
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,185,@Test
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,186,public void testWikipedia() {
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,187,// this test corresponds to the example from Wikipedia page:
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,188,// http://en.wikipedia.org/wiki/Hermite_interpolation
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,189,FieldHermiteInterpolator<BigFraction> interpolator = new FieldHermiteInterpolator<BigFraction>();
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,190,"interpolator.addSamplePoint(new BigFraction(-1),"
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,191,"new BigFraction[] { new BigFraction( 2) },"
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,192,"new BigFraction[] { new BigFraction(-8) },"
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,193,new BigFraction[] { new BigFraction(56) });
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,194,"interpolator.addSamplePoint(new BigFraction( 0),"
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,195,"new BigFraction[] { new BigFraction( 1) },"
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,196,"new BigFraction[] { new BigFraction( 0) },"
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,197,new BigFraction[] { new BigFraction( 0) });
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,198,"interpolator.addSamplePoint(new BigFraction( 1),"
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,199,"new BigFraction[] { new BigFraction( 2) },"
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,200,"new BigFraction[] { new BigFraction( 8) },"
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,201,new BigFraction[] { new BigFraction(56) });
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,202,"for (BigFraction x = new BigFraction(-1); x.doubleValue() <= 1.0; x = x.add(new BigFraction(1, 8))) {"
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,203,BigFraction y = interpolator.value(x)[0];
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,204,BigFraction x2 = x.multiply(x);
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,205,BigFraction x4 = x2.multiply(x2);
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,206,BigFraction x8 = x4.multiply(x4);
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,207,"Assert.assertEquals(x8.add(new BigFraction(1)), y);"
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,211,@Test
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,212,public void testOnePointParabola() {
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,213,FieldHermiteInterpolator<BigFraction> interpolator = new FieldHermiteInterpolator<BigFraction>();
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,214,"interpolator.addSamplePoint(new BigFraction(0),"
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,215,"new BigFraction[] { new BigFraction(1) },"
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,216,"new BigFraction[] { new BigFraction(1) },"
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,217,new BigFraction[] { new BigFraction(2) });
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,218,"for (BigFraction x = new BigFraction(-1); x.doubleValue() <= 1.0; x = x.add(new BigFraction(1, 8))) {"
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,219,BigFraction y = interpolator.value(x)[0];
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,220,"Assert.assertEquals(BigFraction.ONE.add(x.multiply(BigFraction.ONE.add(x))), y);"
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,224,"private PolynomialFunction randomPolynomial(int degree, Random random) {"
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,225,double[] coeff = new double[ 1 + degree];
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,226,for (int j = 0; j < degree; ++j) {
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,227,coeff[j] = random.nextDouble();
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,229,return new PolynomialFunction(coeff);
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,232,@Test(expected=NoDataException.class)
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,233,public void testEmptySample() {
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,234,new FieldHermiteInterpolator<BigFraction>().value(BigFraction.ZERO);
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,237,@Test(expected=IllegalArgumentException.class)
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,238,public void testDuplicatedAbscissa() {
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,239,FieldHermiteInterpolator<BigFraction> interpolator = new FieldHermiteInterpolator<BigFraction>();
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,240,"interpolator.addSamplePoint(new BigFraction(1), new BigFraction[] { new BigFraction(0) });"
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,241,"interpolator.addSamplePoint(new BigFraction(1), new BigFraction[] { new BigFraction(1) });"

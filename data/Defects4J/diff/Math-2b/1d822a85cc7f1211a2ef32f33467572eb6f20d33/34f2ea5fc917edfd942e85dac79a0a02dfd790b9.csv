is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,17,package org.apache.commons.math3.geometry.euclidean.threed;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,20,import java.io.Serializable;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,22,import org.apache.commons.math3.util.FastMath;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,24,/** This class provides conversions related to <a
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,25,"* href=""http://mathworld.wolfram.com/SphericalCoordinates.html"">spherical coordinates</a>."
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,26,* <p>
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,27,"* The conventions used here are the mathematical ones, i.e. spherical coordinates are"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,28,* related to Cartesian coordinates as follows:
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,29,* </p>
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,30,* <ul>
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,31,*   <li>x = r cos(&theta;) sin(&Phi;)</li>
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,32,*   <li>y = r sin(&theta;) sin(&Phi;)</li>
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,33,*   <li>z = r cos(&Phi;)</li>
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,34,* </ul>
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,35,* <ul>
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,36,*   <li>r       = &radic;(x<sup>2</sup>+y<sup>2</sup>+z<sup>2</sup>)</li>
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,37,"*   <li>&theta; = atan2(y, x)</li>"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,38,*   <li>&Phi;   = acos(z/r)</li>
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,39,* </ul>
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,40,* <p>
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,41,"* r is the radius, &theta; is the azimuthal angle in the x-y plane and &Phi; is the polar"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,42,* (co-latitude) angle. These conventions are <em>different</em> from the conventions used
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,43,* in physics (and in particular in spherical harmonics) where the meanings of &theta; and
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,44,* &Phi; are reversed.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,45,* </p>
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,46,* <p>
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,47,* This class provides conversion of coordinates and also of gradient and Hessian
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,48,* between spherical and Cartesian coordinates.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,49,* </p>
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,50,* @since 3.2
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,51,* @version $Id$
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,53,public class SphericalCoordinates implements Serializable {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,55,/** Serializable UID. */
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,56,private static final long serialVersionUID = 20130206L;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,58,/** Cartesian coordinates. */
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,59,private final Vector3D v;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,61,/** Radius. */
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,62,private final double r;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,64,/** Azimuthal angle in the x-y plane &theta;. */
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,65,private final double theta;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,67,/** Polar angle (co-latitude) &phi;. */
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,68,private final double phi;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,70,"/** Jacobian of (r, &theta; &phi). */"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,71,private double[][] jacobian;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,73,/** Hessian of radius. */
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,74,private double[][] rHessian;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,76,/** Hessian of azimuthal angle in the x-y plane &theta;. */
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,77,private double[][] thetaHessian;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,79,/** Hessian of polar (co-latitude) angle &Phi;. */
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,80,private double[][] phiHessian;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,82,/** Build a spherical coordinates transformer from Cartesian coordinates.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,83,* @param v Cartesian coordinates
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,85,public SphericalCoordinates(final Vector3D v) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,87,// Cartesian coordinates
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,88,this.v = v;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,90,// remaining spherical coordinates
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,91,this.r     = v.getNorm();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,92,this.theta = v.getAlpha();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,93,this.phi   = FastMath.acos(v.getZ() / r);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,97,/** Build a spherical coordinates transformer from spherical coordinates.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,98,* @param r radius
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,99,* @param theta azimuthal angle in x-y place
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,100,* @param phi polar (co-latitude) angle
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,102,"public SphericalCoordinates(final double r, final double theta, final double phi) {"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,104,final double cosTheta = FastMath.cos(theta);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,105,final double sinTheta = FastMath.sin(theta);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,106,final double cosPhi   = FastMath.cos(phi);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,107,final double sinPhi   = FastMath.sin(phi);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,109,// spherical coordinates
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,110,this.r     = r;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,111,this.theta = theta;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,112,this.phi   = phi;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,114,// Cartesian coordinates
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,115,"this.v  = new Vector3D(r * cosTheta * sinPhi,"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,116,"r * sinTheta * sinPhi,"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,117,r * cosPhi);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,121,/** Get the Cartesian coordinates.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,122,* @return Cartesian coordinates
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,124,public Vector3D getCartesian() {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,125,return v;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,128,/** Get the radius.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,129,* @return radius r
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,130,* @see #getTheta()
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,131,* @see #getPhi()
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,133,public double getR() {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,134,return r;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,137,/** Get the azimuthal angle in x-y plane.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,138,* @return azimuthal angle in x-y plane &theta;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,139,* @see #getR()
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,140,* @see #getPhi()
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,142,public double getTheta() {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,143,return theta;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,146,/** Get the polar (co-latitude) angle.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,147,* @return polar (co-latitude) angle &Phi;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,148,* @see #getR()
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,149,* @see #getTheta()
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,151,public double getPhi() {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,152,return phi;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,155,/** Convert a gradient with respect to spherical coordinates into a gradient
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,156,* with respect to Cartesian coordinates.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,157,* @param sGradient gradient with respect to spherical coordinates
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,158,"* {df/dr, df/d&theta;, df/d&Phi;}"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,159,* @return gradient with respect to Cartesian coordinates
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,160,"* {df/dx, df/dy, df/dz}"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,162,public double[] toCartesianGradient(final double[] sGradient) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,164,// lazy evaluation of Jacobian
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,165,computeJacobian();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,167,// compose derivatives as gradient^T . J
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,168,// the expressions have been simplified since we know jacobian[1][2] = dTheta/dZ = 0
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,169,return new double[] {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,170,"sGradient[0] * jacobian[0][0] + sGradient[1] * jacobian[1][0] + sGradient[2] * jacobian[2][0],"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,171,"sGradient[0] * jacobian[0][1] + sGradient[1] * jacobian[1][1] + sGradient[2] * jacobian[2][1],"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,172,sGradient[0] * jacobian[0][2]                                 + sGradient[2] * jacobian[2][2]
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,177,/** Convert a Hessian with respect to spherical coordinates into a Hessian
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,178,* with respect to Cartesian coordinates.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,179,* <p>
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,180,"* As Hessian are always symmetric, we use only the lower left part of the provided"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,181,"* spherical Hessian, so the upper part may not be initialized. However, we still"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,182,"* do fill up the complete array we create, with guaranteed symmetry."
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,183,* </p>
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,184,* @param sHessian Hessian with respect to spherical coordinates
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,185,"* {{d<sup>2</sup>f/dr<sup>2</sup>, d<sup>2</sup>f/drd&theta;, d<sup>2</sup>f/drd&Phi;},"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,186,"*  {d<sup>2</sup>f/drd&theta;, d<sup>2</sup>f/d&theta;<sup>2</sup>, d<sup>2</sup>f/d&theta;d&Phi;},"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,187,"*  {d<sup>2</sup>f/drd&Phi;, d<sup>2</sup>f/d&theta;d&Phi;, d<sup>2</sup>f/d&Phi;<sup>2</sup>}"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,188,* @param sGradient gradient with respect to spherical coordinates
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,189,"* {df/dr, df/d&theta;, df/d&Phi;}"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,190,* @return Hessian with respect to Cartesian coordinates
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,191,"* {{d<sup>2</sup>f/dx<sup>2</sup>, d<sup>2</sup>f/rGradient.getY(), d<sup>2</sup>f/dxdz},"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,192,"*  {d<sup>2</sup>f/dxdy, d<sup>2</sup>f/dy<sup>2</sup>, d<sup>2</sup>f/dydz},"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,193,"*  {d<sup>2</sup>f/dxdz, d<sup>2</sup>f/dydz, d<sup>2</sup>f/dz<sup>2</sup>}}"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,195,"public double[][] toCartesianHessian(final double[][] sHessian, final double[] sGradient) {"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,197,computeJacobian();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,198,computeHessians();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,200,// compose derivative as J^T . H_f . J + df/dr H_r + df/dtheta H_theta + df/dphi H_phi
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,201,// the expressions have been simplified since we know jacobian[1][2] = dTheta/dZ = 0
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,202,// and H_theta is only a 2x2 matrix as it does not depend on z
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,203,final double[][] hj = new double[3][3];
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,204,final double[][] cHessian = new double[3][3];
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,206,// compute H_f . J
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,207,// beware we use ONLY the lower-left part of sHessian
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,208,hj[0][0] = sHessian[0][0] * jacobian[0][0] + sHessian[1][0] * jacobian[1][0] + sHessian[2][0] * jacobian[2][0];
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,209,hj[0][1] = sHessian[0][0] * jacobian[0][1] + sHessian[1][0] * jacobian[1][1] + sHessian[2][0] * jacobian[2][1];
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,210,hj[0][2] = sHessian[0][0] * jacobian[0][2]                                   + sHessian[2][0] * jacobian[2][2];
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,211,hj[1][0] = sHessian[1][0] * jacobian[0][0] + sHessian[1][1] * jacobian[1][0] + sHessian[2][1] * jacobian[2][0];
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,212,hj[1][1] = sHessian[1][0] * jacobian[0][1] + sHessian[1][1] * jacobian[1][1] + sHessian[2][1] * jacobian[2][1];
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,213,hj[1][2] = sHessian[1][0] * jacobian[0][2]                                   + sHessian[2][1] * jacobian[2][2];
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,214,hj[2][0] = sHessian[2][0] * jacobian[0][0] + sHessian[2][1] * jacobian[1][0] + sHessian[2][2] * jacobian[2][0];
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,215,hj[2][1] = sHessian[2][0] * jacobian[0][1] + sHessian[2][1] * jacobian[1][1] + sHessian[2][2] * jacobian[2][1];
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,216,hj[2][2] = sHessian[2][0] * jacobian[0][2]                                   + sHessian[2][2] * jacobian[2][2];
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,218,// compute lower-left part of J^T . H_f . J
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,219,cHessian[0][0] = jacobian[0][0] * hj[0][0] + jacobian[1][0] * hj[1][0] + jacobian[2][0] * hj[2][0];
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,220,cHessian[1][0] = jacobian[0][1] * hj[0][0] + jacobian[1][1] * hj[1][0] + jacobian[2][1] * hj[2][0];
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,221,cHessian[2][0] = jacobian[0][2] * hj[0][0]                             + jacobian[2][2] * hj[2][0];
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,222,cHessian[1][1] = jacobian[0][1] * hj[0][1] + jacobian[1][1] * hj[1][1] + jacobian[2][1] * hj[2][1];
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,223,cHessian[2][1] = jacobian[0][2] * hj[0][1]                             + jacobian[2][2] * hj[2][1];
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,224,cHessian[2][2] = jacobian[0][2] * hj[0][2]                             + jacobian[2][2] * hj[2][2];
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,226,// add gradient contribution
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,227,cHessian[0][0] += sGradient[0] * rHessian[0][0] + sGradient[1] * thetaHessian[0][0] + sGradient[2] * phiHessian[0][0];
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,228,cHessian[1][0] += sGradient[0] * rHessian[1][0] + sGradient[1] * thetaHessian[1][0] + sGradient[2] * phiHessian[1][0];
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,229,cHessian[2][0] += sGradient[0] * rHessian[2][0]                                     + sGradient[2] * phiHessian[2][0];
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,230,cHessian[1][1] += sGradient[0] * rHessian[1][1] + sGradient[1] * thetaHessian[1][1] + sGradient[2] * phiHessian[1][1];
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,231,cHessian[2][1] += sGradient[0] * rHessian[2][1]                                     + sGradient[2] * phiHessian[2][1];
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,232,cHessian[2][2] += sGradient[0] * rHessian[2][2]                                     + sGradient[2] * phiHessian[2][2];
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,234,// ensure symmetry
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,235,cHessian[0][1] = cHessian[1][0];
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,236,cHessian[0][2] = cHessian[2][0];
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,237,cHessian[1][2] = cHessian[2][1];
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,239,return cHessian;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,243,"/** Lazy evaluation of (r, &theta;, &phi;) Jacobian."
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,245,private void computeJacobian() {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,246,if (jacobian == null) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,248,// intermediate variables
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,249,final double x    = v.getX();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,250,final double y    = v.getY();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,251,final double z    = v.getZ();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,252,final double rho2 = x * x + y * y;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,253,final double rho  = FastMath.sqrt(rho2);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,254,final double r2   = rho2 + z * z;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,256,jacobian = new double[3][3];
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,258,// row representing the gradient of r
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,259,jacobian[0][0] = x / r;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,260,jacobian[0][1] = y / r;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,261,jacobian[0][2] = z / r;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,263,// row representing the gradient of theta
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,264,jacobian[1][0] = -y / rho2;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,265,jacobian[1][1] =  x / rho2;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,266,// jacobian[1][2] is already set to 0 at allocation time
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,268,// row representing the gradient of phi
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,269,jacobian[2][0] = x * z / (rho * r2);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,270,jacobian[2][1] = y * z / (rho * r2);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,271,jacobian[2][2] = -rho / r2;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,276,/** Lazy evaluation of Hessians.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,278,private void computeHessians() {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,280,if (rHessian == null) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,282,// intermediate variables
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,283,final double x      = v.getX();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,284,final double y      = v.getY();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,285,final double z      = v.getZ();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,286,final double x2     = x * x;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,287,final double y2     = y * y;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,288,final double z2     = z * z;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,289,final double rho2   = x2 + y2;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,290,final double rho    = FastMath.sqrt(rho2);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,291,final double r2     = rho2 + z2;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,292,final double xOr    = x / r;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,293,final double yOr    = y / r;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,294,final double zOr    = z / r;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,295,final double xOrho2 = x / rho2;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,296,final double yOrho2 = y / rho2;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,297,final double xOr3   = xOr / r2;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,298,final double yOr3   = yOr / r2;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,299,final double zOr3   = zOr / r2;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,301,// lower-left part of Hessian of r
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,302,rHessian = new double[3][3];
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,303,rHessian[0][0] = y * yOr3 + z * zOr3;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,304,rHessian[1][0] = -x * yOr3;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,305,rHessian[2][0] = -z * xOr3;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,306,rHessian[1][1] = x * xOr3 + z * zOr3;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,307,rHessian[2][1] = -y * zOr3;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,308,rHessian[2][2] = x * xOr3 + y * yOr3;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,310,// upper-right part is symmetric
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,311,rHessian[0][1] = rHessian[1][0];
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,312,rHessian[0][2] = rHessian[2][0];
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,313,rHessian[1][2] = rHessian[2][1];
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,315,// lower-left part of Hessian of azimuthal angle theta
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,316,thetaHessian = new double[2][2];
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,317,thetaHessian[0][0] = 2 * xOrho2 * yOrho2;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,318,thetaHessian[1][0] = yOrho2 * yOrho2 - xOrho2 * xOrho2;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,319,thetaHessian[1][1] = -2 * xOrho2 * yOrho2;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,321,// upper-right part is symmetric
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,322,thetaHessian[0][1] = thetaHessian[1][0];
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,324,// lower-left part of Hessian of polar (co-latitude) angle phi
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,325,final double rhor2       = rho * r2;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,326,final double rho2r2      = rho * rhor2;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,327,final double rhor4       = rhor2 * r2;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,328,final double rho3r4      = rhor4 * rho2;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,329,final double r2P2rho2    = 3 * rho2 + z2;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,330,phiHessian = new double[3][3];
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,331,phiHessian[0][0] = z * (rho2r2 - x2 * r2P2rho2) / rho3r4;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,332,phiHessian[1][0] = -x * y * z * r2P2rho2 / rho3r4;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,333,phiHessian[2][0] = x * (rho2 - z2) / rhor4;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,334,phiHessian[1][1] = z * (rho2r2 - y2 * r2P2rho2) / rho3r4;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,335,phiHessian[2][1] = y * (rho2 - z2) / rhor4;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,336,phiHessian[2][2] = 2 * rho * zOr3 / r;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,338,// upper-right part is symmetric
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,339,phiHessian[0][1] = phiHessian[1][0];
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,340,phiHessian[0][2] = phiHessian[2][0];
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,341,phiHessian[1][2] = phiHessian[2][1];
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,348,* Replace the instance with a data transfer object for serialization.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,349,* @return data transfer object that will be serialized
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,351,private Object writeReplace() {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,352,"return new DataTransferObject(v.getX(), v.getY(), v.getZ());"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,355,/** Internal class used only for serialization. */
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,356,private static class DataTransferObject implements Serializable {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,358,/** Serializable UID. */
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,359,private static final long serialVersionUID = 20130206L;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,361,/** Abscissa.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,362,* @serial
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,364,private final double x;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,366,/** Ordinate.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,367,* @serial
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,369,private final double y;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,371,/** Height.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,372,* @serial
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,374,private final double z;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,376,/** Simple constructor.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,377,* @param x abscissa
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,378,* @param y ordinate
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,379,* @param z height
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,381,"public DataTransferObject(final double x, final double y, final double z) {"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,382,this.x = x;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,383,this.y = y;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,384,this.z = z;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,387,/** Replace the deserialized data transfer object with a {@link SphericalCoordinates}.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,388,* @return replacement {@link SphericalCoordinates}
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,390,private Object readResolve() {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java,391,"return new SphericalCoordinates(new Vector3D(x, y, z));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,14,* See the License for the specific language governing permissions and
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,15,* limitations under the License.
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,18,package org.apache.commons.math3.geometry.euclidean.threed;
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,20,import org.apache.commons.math3.TestUtils;
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,21,import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,22,import org.apache.commons.math3.exception.DimensionMismatchException;
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,23,import org.apache.commons.math3.util.FastMath;
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,24,import org.junit.Assert;
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,25,import org.junit.Test;
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,27,public class SphericalCoordinatesTest {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,29,@Test
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,30,public void testCoordinatesStoC() throws DimensionMismatchException {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,31,double piO2 = 0.5 * FastMath.PI;
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,32,"SphericalCoordinates sc1 = new SphericalCoordinates(2.0, 0, piO2);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,33,"Assert.assertEquals(0, sc1.getCartesian().distance(new Vector3D(2, 0, 0)), 1.0e-10);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,34,"SphericalCoordinates sc2 = new SphericalCoordinates(2.0, piO2, piO2);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,35,"Assert.assertEquals(0, sc2.getCartesian().distance(new Vector3D(0, 2, 0)), 1.0e-10);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,36,"SphericalCoordinates sc3 = new SphericalCoordinates(2.0, FastMath.PI, piO2);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,37,"Assert.assertEquals(0, sc3.getCartesian().distance(new Vector3D(-2, 0, 0)), 1.0e-10);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,38,"SphericalCoordinates sc4 = new SphericalCoordinates(2.0, -piO2, piO2);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,39,"Assert.assertEquals(0, sc4.getCartesian().distance(new Vector3D(0, -2, 0)), 1.0e-10);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,40,"SphericalCoordinates sc5 = new SphericalCoordinates(2.0, 1.23456, 0);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,41,"Assert.assertEquals(0, sc5.getCartesian().distance(new Vector3D(0, 0, 2)), 1.0e-10);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,42,"SphericalCoordinates sc6 = new SphericalCoordinates(2.0, 6.54321, FastMath.PI);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,43,"Assert.assertEquals(0, sc6.getCartesian().distance(new Vector3D(0, 0, -2)), 1.0e-10);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,46,@Test
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,47,public void testCoordinatesCtoS() throws DimensionMismatchException {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,48,double piO2 = 0.5 * FastMath.PI;
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,49,"SphericalCoordinates sc1 = new SphericalCoordinates(new Vector3D(2, 0, 0));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,50,"Assert.assertEquals(2,           sc1.getR(),     1.0e-10);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,51,"Assert.assertEquals(0,           sc1.getTheta(), 1.0e-10);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,52,"Assert.assertEquals(piO2,        sc1.getPhi(),   1.0e-10);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,53,"SphericalCoordinates sc2 = new SphericalCoordinates(new Vector3D(0, 2, 0));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,54,"Assert.assertEquals(2,           sc2.getR(),     1.0e-10);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,55,"Assert.assertEquals(piO2,        sc2.getTheta(), 1.0e-10);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,56,"Assert.assertEquals(piO2,        sc2.getPhi(),   1.0e-10);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,57,"SphericalCoordinates sc3 = new SphericalCoordinates(new Vector3D(-2, 0, 0));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,58,"Assert.assertEquals(2,           sc3.getR(),     1.0e-10);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,59,"Assert.assertEquals(FastMath.PI, sc3.getTheta(), 1.0e-10);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,60,"Assert.assertEquals(piO2,        sc3.getPhi(),   1.0e-10);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,61,"SphericalCoordinates sc4 = new SphericalCoordinates(new Vector3D(0, -2, 0));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,62,"Assert.assertEquals(2,           sc4.getR(),     1.0e-10);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,63,"Assert.assertEquals(-piO2,       sc4.getTheta(), 1.0e-10);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,64,"Assert.assertEquals(piO2,        sc4.getPhi(),   1.0e-10);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,65,"SphericalCoordinates sc5 = new SphericalCoordinates(new Vector3D(0, 0, 2));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,66,"Assert.assertEquals(2,           sc5.getR(),     1.0e-10);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,67,"//  don't check theta on poles, as it is singular"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,68,"Assert.assertEquals(0,           sc5.getPhi(),   1.0e-10);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,69,"SphericalCoordinates sc6 = new SphericalCoordinates(new Vector3D(0, 0, -2));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,70,"Assert.assertEquals(2,           sc6.getR(),     1.0e-10);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,71,"//  don't check theta on poles, as it is singular"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,72,"Assert.assertEquals(FastMath.PI, sc6.getPhi(),   1.0e-10);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,75,@Test
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,76,public void testGradient() {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,77,for (double r = 0.2; r < 10; r += 0.5) {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,78,for (double theta = 0; theta < 2 * FastMath.PI; theta += 0.1) {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,79,for (double phi = 0.1; phi < FastMath.PI; phi += 0.1) {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,80,"SphericalCoordinates sc = new SphericalCoordinates(r, theta, phi);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,82,"DerivativeStructure svalue = valueSpherical(new DerivativeStructure(3, 1, 0, r),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,83,"new DerivativeStructure(3, 1, 1, theta),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,84,"new DerivativeStructure(3, 1, 2, phi));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,85,double[] sGradient = new double[] {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,86,"svalue.getPartialDerivative(1, 0, 0),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,87,"svalue.getPartialDerivative(0, 1, 0),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,88,"svalue.getPartialDerivative(0, 0, 1),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,91,"DerivativeStructure cvalue = valueCartesian(new DerivativeStructure(3, 1, 0, sc.getCartesian().getX()),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,92,"new DerivativeStructure(3, 1, 1, sc.getCartesian().getY()),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,93,"new DerivativeStructure(3, 1, 2, sc.getCartesian().getZ()));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,94,"Vector3D refCGradient = new Vector3D(cvalue.getPartialDerivative(1, 0, 0),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,95,"cvalue.getPartialDerivative(0, 1, 0),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,96,"cvalue.getPartialDerivative(0, 0, 1));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,98,Vector3D testCGradient = new Vector3D(sc.toCartesianGradient(sGradient));
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,100,"Assert.assertEquals(0, testCGradient.distance(refCGradient) / refCGradient.getNorm(), 5.0e-14);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,107,@Test
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,108,public void testHessian() {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,109,for (double r = 0.2; r < 10; r += 0.5) {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,110,for (double theta = 0; theta < 2 * FastMath.PI; theta += 0.2) {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,111,for (double phi = 0.1; phi < FastMath.PI; phi += 0.2) {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,112,"SphericalCoordinates sc = new SphericalCoordinates(r, theta, phi);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,114,"DerivativeStructure svalue = valueSpherical(new DerivativeStructure(3, 2, 0, r),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,115,"new DerivativeStructure(3, 2, 1, theta),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,116,"new DerivativeStructure(3, 2, 2, phi));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,117,double[] sGradient = new double[] {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,118,"svalue.getPartialDerivative(1, 0, 0),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,119,"svalue.getPartialDerivative(0, 1, 0),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,120,"svalue.getPartialDerivative(0, 0, 1),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,122,double[][] sHessian = new double[3][3];
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,123,"sHessian[0][0] = svalue.getPartialDerivative(2, 0, 0); // d2F/dR2"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,124,"sHessian[1][0] = svalue.getPartialDerivative(1, 1, 0); // d2F/dRdTheta"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,125,"sHessian[2][0] = svalue.getPartialDerivative(1, 0, 1); // d2F/dRdPhi"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,126,sHessian[0][1] = Double.NaN; // just to check upper-right part is not used
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,127,"sHessian[1][1] = svalue.getPartialDerivative(0, 2, 0); // d2F/dTheta2"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,128,"sHessian[2][1] = svalue.getPartialDerivative(0, 1, 1); // d2F/dThetadPhi"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,129,sHessian[0][2] = Double.NaN; // just to check upper-right part is not used
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,130,sHessian[1][2] = Double.NaN; // just to check upper-right part is not used
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,131,"sHessian[2][2] = svalue.getPartialDerivative(0, 0, 2); // d2F/dPhi2"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,133,"DerivativeStructure cvalue = valueCartesian(new DerivativeStructure(3, 2, 0, sc.getCartesian().getX()),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,134,"new DerivativeStructure(3, 2, 1, sc.getCartesian().getY()),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,135,"new DerivativeStructure(3, 2, 2, sc.getCartesian().getZ()));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,136,double[][] refCHessian = new double[3][3];
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,137,"refCHessian[0][0] = cvalue.getPartialDerivative(2, 0, 0); // d2F/dX2"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,138,"refCHessian[1][0] = cvalue.getPartialDerivative(1, 1, 0); // d2F/dXdY"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,139,"refCHessian[2][0] = cvalue.getPartialDerivative(1, 0, 1); // d2F/dXdZ"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,140,refCHessian[0][1] = refCHessian[1][0];
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,141,"refCHessian[1][1] = cvalue.getPartialDerivative(0, 2, 0); // d2F/dY2"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,142,"refCHessian[2][1] = cvalue.getPartialDerivative(0, 1, 1); // d2F/dYdZ"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,143,refCHessian[0][2] = refCHessian[2][0];
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,144,refCHessian[1][2] = refCHessian[2][1];
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,145,"refCHessian[2][2] = cvalue.getPartialDerivative(0, 0, 2); // d2F/dZ2"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,146,double norm =  0;
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,147,for (int i = 0; i < 3; ++i) {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,148,for (int j = 0; j < 3; ++j) {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,149,"norm = FastMath.max(norm, FastMath.abs(refCHessian[i][j]));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,153,"double[][] testCHessian = sc.toCartesianHessian(sHessian, sGradient);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,154,for (int i = 0; i < 3; ++i) {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,155,for (int j = 0; j < 3; ++j) {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,156,"Assert.assertEquals("""" + FastMath.abs((refCHessian[i][j] - testCHessian[i][j]) / norm),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,157,"refCHessian[i][j], testCHessian[i][j], 1.0e-14 * norm);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,166,"public DerivativeStructure valueCartesian(DerivativeStructure x, DerivativeStructure y, DerivativeStructure z) {"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,167,return x.divide(y.multiply(5).add(10)).multiply(z.pow(3));
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,170,"public DerivativeStructure valueSpherical(DerivativeStructure r, DerivativeStructure theta, DerivativeStructure phi) {"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,171,"return valueCartesian(r.multiply(theta.cos()).multiply(phi.sin()),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,172,"r.multiply(theta.sin()).multiply(phi.sin()),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,173,r.multiply(phi.cos()));
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,176,@Test
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,177,public void testSerialization() {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,178,"SphericalCoordinates a = new SphericalCoordinates(3, 2, 1);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,179,SphericalCoordinates b = (SphericalCoordinates) TestUtils.serializeAndRecover(a);
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,180,"Assert.assertEquals(0, a.getCartesian().distance(b.getCartesian()), 1.0e-10);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,181,"Assert.assertEquals(a.getR(),     b.getR(),     1.0e-10);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,182,"Assert.assertEquals(a.getTheta(), b.getTheta(), 1.0e-10);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java,183,"Assert.assertEquals(a.getPhi(),   b.getPhi(),   1.0e-10);"

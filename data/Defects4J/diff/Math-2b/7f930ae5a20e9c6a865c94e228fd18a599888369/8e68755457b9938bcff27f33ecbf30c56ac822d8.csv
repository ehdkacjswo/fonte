is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessBivariateCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessBivariateCovariance.java,94,* Appends another bivariate covariance calculation to this.
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessBivariateCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessBivariateCovariance.java,95,"* After this operation, statistics returned should be close to what would"
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessBivariateCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessBivariateCovariance.java,96,"* have been obtained by by performing all of the {@link #increment(double, double)}"
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessBivariateCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessBivariateCovariance.java,97,* operations in {@code cov} directly on this.
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessBivariateCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessBivariateCovariance.java,99,* @param cov StorelessBivariateCovariance instance to append.
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessBivariateCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessBivariateCovariance.java,101,public void append(StorelessBivariateCovariance cov) {
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessBivariateCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessBivariateCovariance.java,102,double oldN = n;
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessBivariateCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessBivariateCovariance.java,103,n += cov.n;
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessBivariateCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessBivariateCovariance.java,104,final double deltaX = cov.meanX - meanX;
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessBivariateCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessBivariateCovariance.java,105,final double deltaY = cov.meanY - meanY;
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessBivariateCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessBivariateCovariance.java,106,meanX += deltaX * cov.n / n;
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessBivariateCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessBivariateCovariance.java,107,meanY += deltaY * cov.n / n;
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessBivariateCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessBivariateCovariance.java,108,covarianceNumerator += cov.covarianceNumerator + oldN * cov.n / n * deltaX * deltaY;
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,166,"* Appends {@code sc} to this, effectively aggregating the computations in {@code sc}"
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,167,"* with this.  After invoking this method, covariances returned should be close"
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,168,* to what would have been obtained by performing all of the {@link #increment(double[])}
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,169,* operations in {@code sc} directly on this.
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,171,* @param sc externally computed StorelessCovariance to add to this
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,172,* @throws DimensionMismatchException if the dimension of sc does not match this
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,174,public void append(StorelessCovariance sc) throws DimensionMismatchException {
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,175,if (sc.dimension != dimension) {
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,176,"throw new DimensionMismatchException(sc.dimension, dimension);"
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,179,// only update the upper triangular part of the covariance matrix
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,180,// as only these parts are actually stored
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,181,for (int i = 0; i < dimension; i++) {
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,182,for (int j = i; j < dimension; j++) {
True,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java,183,"getElement(i, j).append(sc.getElement(i, j));"
True,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,22,import org.apache.commons.math3.random.ISAACRandom;
True,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,226,* Test equality of covariance. chk: covariance of two
True,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,227,* samples separately and adds them together. cov: computes
True,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,228,* covariance of the combined sample showing both are equal.
True,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,230,@Test
True,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,231,public void testEquivalence() {
True,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,232,int num_sets = 2;
True,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,233,StorelessBivariateCovariance cov = new StorelessBivariateCovariance();// covariance of the superset
True,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,234,StorelessBivariateCovariance chk = new StorelessBivariateCovariance();// check covariance made by appending covariance of subsets
True,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,236,ISAACRandom rand = new ISAACRandom(10L);// Seed can be changed
True,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,237,for (int s = 0; s < num_sets; s++) {// loop through sets of samlpes
True,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,238,StorelessBivariateCovariance covs = new StorelessBivariateCovariance();
True,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,239,for (int i = 0; i < 5; i++) { // loop through individual samlpes.
True,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,240,double x = rand.nextDouble();
True,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,241,double y = rand.nextDouble();
True,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,242,"covs.increment(x, y);// add sample to the subset"
True,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,243,"cov.increment(x, y);// add sample to the superset"
True,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,245,chk.append(covs);
True,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java,248,"TestUtils.assertEquals(""covariance subset test"", chk.getResult(), cov.getResult(), 10E-7);"

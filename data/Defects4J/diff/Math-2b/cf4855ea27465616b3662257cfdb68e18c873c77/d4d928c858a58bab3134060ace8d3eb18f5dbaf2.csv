is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,17,package org.apache.commons.math3.genetics;
True,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,19,import java.util.ArrayList;
True,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,20,import java.util.List;
True,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,22,import org.apache.commons.math3.exception.DimensionMismatchException;
True,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,23,import org.apache.commons.math3.exception.MathIllegalArgumentException;
True,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,24,import org.apache.commons.math3.exception.OutOfRangeException;
True,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,25,import org.apache.commons.math3.exception.util.LocalizedFormats;
True,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,26,import org.apache.commons.math3.random.RandomGenerator;
True,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,29,* Perform Uniform Crossover [UX] on the specified chromosomes. A fixed mixing
True,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,30,"* ratio is used to combine genes from the first and second parents, e.g. using a"
True,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,31,* ratio of 0.5 would result in approximately 50% of genes coming from each
True,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,32,"* parent. This is typically a poor method of crossover, but empirical evidence"
True,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,33,* suggests that it is more exploratory and results in a larger part of the
True,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,34,* problem space being searched.
True,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,36,* <p>This crossover policy evaluates each gene of the parent chromosomes by chosing a
True,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,37,"* uniform random number {@code p} in the range [0, 1]. If {@code p} &lt; {@code ratio},"
True,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,38,"* the parent genes are swapped. This means with a ratio of 0.7, 30% of the genes from the"
True,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,39,* first parent and 70% from the second parent will be selected for the first offspring (and
True,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,40,* vice versa for the second offspring).</p>
True,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,42,"* <p>This policy works only on {@link AbstractListChromosome}, and therefore it"
True,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,43,"* is parameterized by T. Moreover, the chromosomes must have same lengths."
True,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,44,* </p>
True,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,46,"* @see <a href=""http://en.wikipedia.org/wiki/Crossover_%28genetic_algorithm%29"">Crossover techniques (Wikipedia)</a>"
True,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,47,"* @see <a href=""http://www.obitko.com/tutorials/genetic-algorithms/crossover-mutation.php"">Crossover (Obitko.com)</a>"
True,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,48,"* @see <a href=""http://www.tomaszgwiazda.com/uniformX.htm"">Uniform crossover</a>"
True,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,49,* @param <T> generic type of the {@link AbstractListChromosome}s for crossover
True,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,50,* @since 3.1
True,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,51,* @version $Id$
True,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,53,public class UniformCrossover<T> implements CrossoverPolicy {
True,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,55,/** The mixing ratio. */
True,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,56,private final double ratio;
True,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,59,* Creates a new {@link UniformCrossover} policy using the given mixing ratio.
True,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,61,* @param ratio the mixing ratio
True,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,62,"* @throws OutOfRangeException if the mixing ratio is outside the [0, 1] range"
True,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,64,public UniformCrossover(final double ratio) {
True,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,65,if (ratio < 0.0d || ratio > 1.0d) {
True,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,66,"throw new OutOfRangeException(LocalizedFormats.CROSSOVER_RATE, ratio, 0.0d, 1.0d);"
True,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,68,this.ratio = ratio;
True,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,72,* Returns the mixing ratio used by this {@link CrossoverPolicy}.
True,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,74,* @return the mixing ratio
True,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,76,public double getRatio() {
True,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,77,return ratio;
True,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,81,* {@inheritDoc}
True,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,83,"@SuppressWarnings(""unchecked"")"
True,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,84,"public ChromosomePair crossover(final Chromosome first, final Chromosome second) {"
True,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,85,if (!(first instanceof AbstractListChromosome<?> && second instanceof AbstractListChromosome<?>)) {
True,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,86,throw new MathIllegalArgumentException(LocalizedFormats.INVALID_FIXED_LENGTH_CHROMOSOME);
True,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,88,"return mate((AbstractListChromosome<T>) first, (AbstractListChromosome<T>) second);"
True,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,92,"* Helper for {@link #crossover(Chromosome, Chromosome)}. Performs the actual crossover."
True,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,94,* @param first the first chromosome
True,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,95,* @param second the second chromosome
True,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,96,* @return the pair of new chromosomes that resulted from the crossover
True,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,97,* @throws DimensionMismatchException if the length of the two chromosomes is different
True,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,99,"private ChromosomePair mate(final AbstractListChromosome<T> first,"
True,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,100,final AbstractListChromosome<T> second) {
True,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,101,final int length = first.getLength();
True,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,102,if (length != second.getLength()) {
True,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,103,"throw new DimensionMismatchException(second.getLength(), length);"
True,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,106,// array representations of the parents
True,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,107,final List<T> parent1Rep = first.getRepresentation();
True,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,108,final List<T> parent2Rep = second.getRepresentation();
True,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,109,// and of the children
True,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,110,final List<T> child1Rep = new ArrayList<T>(first.getLength());
True,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,111,final List<T> child2Rep = new ArrayList<T>(second.getLength());
True,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,113,final RandomGenerator random = GeneticAlgorithm.getRandomGenerator();
True,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,115,for (int index = 0; index < length; index++) {
True,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,117,if (random.nextDouble() < ratio) {
True,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,118,// swap the bits -> take other parent
True,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,119,child1Rep.add(parent2Rep.get(index));
True,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,120,child2Rep.add(parent1Rep.get(index));
True,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,121,} else {
True,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,122,child1Rep.add(parent1Rep.get(index));
True,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,123,child2Rep.add(parent2Rep.get(index));
True,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,127,"return new ChromosomePair(first.newFixedLengthChromosome(child1Rep),"
True,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java,128,second.newFixedLengthChromosome(child2Rep));
True,src/test/java/org/apache/commons/math3/genetics/UniformCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/UniformCrossoverTest.java,1,package org.apache.commons.math3.genetics;
True,src/test/java/org/apache/commons/math3/genetics/UniformCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/UniformCrossoverTest.java,3,import java.util.ArrayList;
True,src/test/java/org/apache/commons/math3/genetics/UniformCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/UniformCrossoverTest.java,4,import java.util.List;
True,src/test/java/org/apache/commons/math3/genetics/UniformCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/UniformCrossoverTest.java,6,import junit.framework.Assert;
True,src/test/java/org/apache/commons/math3/genetics/UniformCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/UniformCrossoverTest.java,8,import org.apache.commons.math3.exception.DimensionMismatchException;
True,src/test/java/org/apache/commons/math3/genetics/UniformCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/UniformCrossoverTest.java,9,import org.apache.commons.math3.exception.MathIllegalArgumentException;
True,src/test/java/org/apache/commons/math3/genetics/UniformCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/UniformCrossoverTest.java,10,import org.apache.commons.math3.exception.OutOfRangeException;
True,src/test/java/org/apache/commons/math3/genetics/UniformCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/UniformCrossoverTest.java,11,import org.junit.BeforeClass;
True,src/test/java/org/apache/commons/math3/genetics/UniformCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/UniformCrossoverTest.java,12,import org.junit.Test;
True,src/test/java/org/apache/commons/math3/genetics/UniformCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/UniformCrossoverTest.java,14,public class UniformCrossoverTest {
True,src/test/java/org/apache/commons/math3/genetics/UniformCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/UniformCrossoverTest.java,15,private static final int LEN = 10000;
True,src/test/java/org/apache/commons/math3/genetics/UniformCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/UniformCrossoverTest.java,16,private static final List<Integer> p1 = new ArrayList<Integer>(LEN);
True,src/test/java/org/apache/commons/math3/genetics/UniformCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/UniformCrossoverTest.java,17,private static final List<Integer> p2 = new ArrayList<Integer>(LEN);
True,src/test/java/org/apache/commons/math3/genetics/UniformCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/UniformCrossoverTest.java,19,@BeforeClass
True,src/test/java/org/apache/commons/math3/genetics/UniformCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/UniformCrossoverTest.java,20,public static void setUpBeforeClass() {
True,src/test/java/org/apache/commons/math3/genetics/UniformCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/UniformCrossoverTest.java,21,for (int i = 0; i < LEN; i++) {
True,src/test/java/org/apache/commons/math3/genetics/UniformCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/UniformCrossoverTest.java,22,p1.add(0);
True,src/test/java/org/apache/commons/math3/genetics/UniformCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/UniformCrossoverTest.java,23,p2.add(1);
True,src/test/java/org/apache/commons/math3/genetics/UniformCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/UniformCrossoverTest.java,27,@Test(expected = OutOfRangeException.class)
True,src/test/java/org/apache/commons/math3/genetics/UniformCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/UniformCrossoverTest.java,28,public void testRatioTooLow() {
True,src/test/java/org/apache/commons/math3/genetics/UniformCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/UniformCrossoverTest.java,29,new UniformCrossover<Integer>(-0.5d);
True,src/test/java/org/apache/commons/math3/genetics/UniformCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/UniformCrossoverTest.java,32,@Test(expected = OutOfRangeException.class)
True,src/test/java/org/apache/commons/math3/genetics/UniformCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/UniformCrossoverTest.java,33,public void testRatioTooHigh() {
True,src/test/java/org/apache/commons/math3/genetics/UniformCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/UniformCrossoverTest.java,34,new UniformCrossover<Integer>(1.5d);
True,src/test/java/org/apache/commons/math3/genetics/UniformCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/UniformCrossoverTest.java,37,@Test
True,src/test/java/org/apache/commons/math3/genetics/UniformCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/UniformCrossoverTest.java,38,public void testCrossover() {
True,src/test/java/org/apache/commons/math3/genetics/UniformCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/UniformCrossoverTest.java,39,// test crossover with different ratios
True,src/test/java/org/apache/commons/math3/genetics/UniformCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/UniformCrossoverTest.java,40,performCrossover(0.5);
True,src/test/java/org/apache/commons/math3/genetics/UniformCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/UniformCrossoverTest.java,41,performCrossover(0.7);
True,src/test/java/org/apache/commons/math3/genetics/UniformCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/UniformCrossoverTest.java,42,performCrossover(0.2);
True,src/test/java/org/apache/commons/math3/genetics/UniformCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/UniformCrossoverTest.java,45,private void performCrossover(double ratio) {
True,src/test/java/org/apache/commons/math3/genetics/UniformCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/UniformCrossoverTest.java,46,final DummyBinaryChromosome p1c = new DummyBinaryChromosome(p1);
True,src/test/java/org/apache/commons/math3/genetics/UniformCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/UniformCrossoverTest.java,47,final DummyBinaryChromosome p2c = new DummyBinaryChromosome(p2);
True,src/test/java/org/apache/commons/math3/genetics/UniformCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/UniformCrossoverTest.java,49,final CrossoverPolicy cp = new UniformCrossover<Integer>(ratio);
True,src/test/java/org/apache/commons/math3/genetics/UniformCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/UniformCrossoverTest.java,51,// make a number of rounds
True,src/test/java/org/apache/commons/math3/genetics/UniformCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/UniformCrossoverTest.java,52,for (int i = 0; i < 20; i++) {
True,src/test/java/org/apache/commons/math3/genetics/UniformCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/UniformCrossoverTest.java,53,"final ChromosomePair pair = cp.crossover(p1c, p2c);"
True,src/test/java/org/apache/commons/math3/genetics/UniformCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/UniformCrossoverTest.java,55,final List<Integer> c1 = ((DummyBinaryChromosome) pair.getFirst()).getRepresentation();
True,src/test/java/org/apache/commons/math3/genetics/UniformCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/UniformCrossoverTest.java,56,final List<Integer> c2 = ((DummyBinaryChromosome) pair.getSecond()).getRepresentation();
True,src/test/java/org/apache/commons/math3/genetics/UniformCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/UniformCrossoverTest.java,58,int from1 = 0;
True,src/test/java/org/apache/commons/math3/genetics/UniformCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/UniformCrossoverTest.java,59,int from2 = 0;
True,src/test/java/org/apache/commons/math3/genetics/UniformCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/UniformCrossoverTest.java,61,// check first child
True,src/test/java/org/apache/commons/math3/genetics/UniformCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/UniformCrossoverTest.java,62,for (int val : c1) {
True,src/test/java/org/apache/commons/math3/genetics/UniformCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/UniformCrossoverTest.java,63,if (val == 0) {
True,src/test/java/org/apache/commons/math3/genetics/UniformCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/UniformCrossoverTest.java,64,from1++;
True,src/test/java/org/apache/commons/math3/genetics/UniformCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/UniformCrossoverTest.java,65,} else {
True,src/test/java/org/apache/commons/math3/genetics/UniformCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/UniformCrossoverTest.java,66,from2++;
True,src/test/java/org/apache/commons/math3/genetics/UniformCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/UniformCrossoverTest.java,70,"Assert.assertEquals(1.0 - ratio, Double.valueOf((double) from1 / LEN), 0.1);"
True,src/test/java/org/apache/commons/math3/genetics/UniformCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/UniformCrossoverTest.java,71,"Assert.assertEquals(ratio, Double.valueOf((double) from2 / LEN), 0.1);"
True,src/test/java/org/apache/commons/math3/genetics/UniformCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/UniformCrossoverTest.java,73,from1 = 0;
True,src/test/java/org/apache/commons/math3/genetics/UniformCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/UniformCrossoverTest.java,74,from2 = 0;
True,src/test/java/org/apache/commons/math3/genetics/UniformCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/UniformCrossoverTest.java,76,// check second child
True,src/test/java/org/apache/commons/math3/genetics/UniformCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/UniformCrossoverTest.java,77,for (int val : c2) {
True,src/test/java/org/apache/commons/math3/genetics/UniformCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/UniformCrossoverTest.java,78,if (val == 0) {
True,src/test/java/org/apache/commons/math3/genetics/UniformCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/UniformCrossoverTest.java,79,from1++;
True,src/test/java/org/apache/commons/math3/genetics/UniformCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/UniformCrossoverTest.java,80,} else {
True,src/test/java/org/apache/commons/math3/genetics/UniformCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/UniformCrossoverTest.java,81,from2++;
True,src/test/java/org/apache/commons/math3/genetics/UniformCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/UniformCrossoverTest.java,85,"Assert.assertEquals(ratio, Double.valueOf((double) from1 / LEN), 0.1);"
True,src/test/java/org/apache/commons/math3/genetics/UniformCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/UniformCrossoverTest.java,86,"Assert.assertEquals(1.0 - ratio, Double.valueOf((double) from2 / LEN), 0.1);"
True,src/test/java/org/apache/commons/math3/genetics/UniformCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/UniformCrossoverTest.java,90,@Test(expected = DimensionMismatchException.class)
True,src/test/java/org/apache/commons/math3/genetics/UniformCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/UniformCrossoverTest.java,91,public void testCrossoverDimensionMismatchException(){
True,src/test/java/org/apache/commons/math3/genetics/UniformCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/UniformCrossoverTest.java,92,"final Integer[] p1 = new Integer[] {1,0,1,0,0,1,0,1,1};"
True,src/test/java/org/apache/commons/math3/genetics/UniformCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/UniformCrossoverTest.java,93,"final Integer[] p2 = new Integer[] {0,1,1,0,1};"
True,src/test/java/org/apache/commons/math3/genetics/UniformCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/UniformCrossoverTest.java,95,final BinaryChromosome p1c = new DummyBinaryChromosome(p1);
True,src/test/java/org/apache/commons/math3/genetics/UniformCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/UniformCrossoverTest.java,96,final BinaryChromosome p2c = new DummyBinaryChromosome(p2);
True,src/test/java/org/apache/commons/math3/genetics/UniformCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/UniformCrossoverTest.java,98,final CrossoverPolicy cp = new UniformCrossover<Integer>(0.5d);
True,src/test/java/org/apache/commons/math3/genetics/UniformCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/UniformCrossoverTest.java,99,"cp.crossover(p1c, p2c);"
True,src/test/java/org/apache/commons/math3/genetics/UniformCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/UniformCrossoverTest.java,102,@Test(expected = MathIllegalArgumentException.class)
True,src/test/java/org/apache/commons/math3/genetics/UniformCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/UniformCrossoverTest.java,103,public void testCrossoverInvalidFixedLengthChromosomeFirst() {
True,src/test/java/org/apache/commons/math3/genetics/UniformCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/UniformCrossoverTest.java,104,"final Integer[] p1 = new Integer[] {1,0,1,0,0,1,0,1,1};"
True,src/test/java/org/apache/commons/math3/genetics/UniformCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/UniformCrossoverTest.java,105,final BinaryChromosome p1c = new DummyBinaryChromosome(p1);
True,src/test/java/org/apache/commons/math3/genetics/UniformCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/UniformCrossoverTest.java,106,final Chromosome p2c = new Chromosome() {
True,src/test/java/org/apache/commons/math3/genetics/UniformCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/UniformCrossoverTest.java,107,public double fitness() {
True,src/test/java/org/apache/commons/math3/genetics/UniformCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/UniformCrossoverTest.java,108,// Not important
True,src/test/java/org/apache/commons/math3/genetics/UniformCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/UniformCrossoverTest.java,109,return 0;
True,src/test/java/org/apache/commons/math3/genetics/UniformCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/UniformCrossoverTest.java,113,final CrossoverPolicy cp = new UniformCrossover<Integer>(0.5d);
True,src/test/java/org/apache/commons/math3/genetics/UniformCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/UniformCrossoverTest.java,114,"cp.crossover(p1c, p2c);"
True,src/test/java/org/apache/commons/math3/genetics/UniformCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/UniformCrossoverTest.java,117,@Test(expected = MathIllegalArgumentException.class)
True,src/test/java/org/apache/commons/math3/genetics/UniformCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/UniformCrossoverTest.java,118,public void testCrossoverInvalidFixedLengthChromosomeSecond() {
True,src/test/java/org/apache/commons/math3/genetics/UniformCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/UniformCrossoverTest.java,119,"final Integer[] p1 = new Integer[] {1,0,1,0,0,1,0,1,1};"
True,src/test/java/org/apache/commons/math3/genetics/UniformCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/UniformCrossoverTest.java,120,final BinaryChromosome p2c = new DummyBinaryChromosome(p1);
True,src/test/java/org/apache/commons/math3/genetics/UniformCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/UniformCrossoverTest.java,121,final Chromosome p1c = new Chromosome() {
True,src/test/java/org/apache/commons/math3/genetics/UniformCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/UniformCrossoverTest.java,122,public double fitness() {
True,src/test/java/org/apache/commons/math3/genetics/UniformCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/UniformCrossoverTest.java,123,// Not important
True,src/test/java/org/apache/commons/math3/genetics/UniformCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/UniformCrossoverTest.java,124,return 0;
True,src/test/java/org/apache/commons/math3/genetics/UniformCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/UniformCrossoverTest.java,128,final CrossoverPolicy cp = new UniformCrossover<Integer>(0.5d);
True,src/test/java/org/apache/commons/math3/genetics/UniformCrossoverTest.java,src/test/java/org/apache/commons/math3/genetics/UniformCrossoverTest.java,129,"cp.crossover(p1c, p2c);"

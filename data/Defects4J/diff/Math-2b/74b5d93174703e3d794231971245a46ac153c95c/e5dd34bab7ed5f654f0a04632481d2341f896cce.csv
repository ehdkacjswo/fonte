is_addition,old_file_path,new_file_path,line_num,content
True,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,20,import java.util.Random;
True,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,22,import org.apache.commons.math3.distribution.NormalDistribution;
False,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,65,rivate void checkAEqualPHPt(RealMatrix matrix) {
False,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,66,essenbergTransformer transformer = new HessenbergTransformer(matrix);
False,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,67,ealMatrix p  = transformer.getP();
False,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,68,ealMatrix pT = transformer.getPT();
False,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,69,ealMatrix h  = transformer.getH();
False,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,70,ouble norm = p.multiply(h).multiply(pT).subtract(matrix).getNorm();
False,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,71,"ssert.assertEquals(0, norm, 4.0e-14);"
False,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,86,rivate void checkOrthogonal(RealMatrix m) {
False,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,87,ealMatrix mTm = m.transpose().multiply(m);
False,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,88,ealMatrix id  = MatrixUtils.createRealIdentityMatrix(mTm.getRowDimension());
False,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,89,"ssert.assertEquals(0, mTm.subtract(id).getNorm(), 1.0e-14);"
False,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,98,rivate void checkHessenbergForm(RealMatrix m) {
False,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,99,inal int rows = m.getRowDimension();
False,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,100,inal int cols = m.getColumnDimension();
False,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,101,or (int i = 0; i < rows; ++i) {
False,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,102,or (int j = 0; j < cols; ++j) {
False,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,103,f (i > j + 1) {
False,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,104,"ssert.assertEquals(0, m.getEntry(i, j), 1.0e-16);"
True,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,86,@Test
True,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,87,public void testRandomData() {
True,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,88,for (int run = 0; run < 100; run++) {
True,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,89,Random r = new Random(System.currentTimeMillis());
True,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,91,// matrix size
True,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,92,int size = r.nextInt(20) + 4;
True,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,94,double[][] data = new double[size][size];
True,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,95,for (int i = 0; i < size; i++) {
True,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,96,for (int j = 0; j < size; j++) {
True,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,97,data[i][j] = r.nextInt(100);
True,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,101,RealMatrix m = MatrixUtils.createRealMatrix(data);
True,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,102,RealMatrix h = checkAEqualPHPt(m);
True,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,103,checkHessenbergForm(h);
True,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,107,@Test
True,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,108,public void testRandomDataNormalDistribution() {
True,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,109,for (int run = 0; run < 100; run++) {
True,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,110,Random r = new Random(System.currentTimeMillis());
True,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,111,"NormalDistribution dist = new NormalDistribution(0.0, r.nextDouble() * 5);"
True,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,113,// matrix size
True,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,114,int size = r.nextInt(20) + 4;
True,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,116,double[][] data = new double[size][size];
True,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,117,for (int i = 0; i < size; i++) {
True,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,118,for (int j = 0; j < size; j++) {
True,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,119,data[i][j] = dist.sample();
True,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,123,RealMatrix m = MatrixUtils.createRealMatrix(data);
True,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,124,RealMatrix h = checkAEqualPHPt(m);
True,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,125,checkHessenbergForm(h);
False,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,144,"rivate void checkMatricesValues(double[][] matrix, double[][] pRef, double[][] hRef) {"
True,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,164,// Test helpers
True,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,167,private RealMatrix checkAEqualPHPt(RealMatrix matrix) {
True,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,168,HessenbergTransformer transformer = new HessenbergTransformer(matrix);
True,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,169,RealMatrix p  = transformer.getP();
True,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,170,RealMatrix pT = transformer.getPT();
True,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,171,RealMatrix h  = transformer.getH();
True,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,173,RealMatrix result = p.multiply(h).multiply(pT);
True,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,174,double norm = result.subtract(matrix).getNorm();
True,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,175,"Assert.assertEquals(0, norm, 1.0e-10);"
True,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,177,for (int i = 0; i < matrix.getRowDimension(); ++i) {
True,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,178,for (int j = 0; j < matrix.getColumnDimension(); ++j) {
True,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,179,if (i > j + 1) {
True,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,180,"Assert.assertEquals(matrix.getEntry(i, j), result.getEntry(i, j), 1.0e-12);"
True,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,185,return transformer.getH();
True,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,188,private void checkOrthogonal(RealMatrix m) {
True,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,189,RealMatrix mTm = m.transpose().multiply(m);
True,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,190,RealMatrix id  = MatrixUtils.createRealIdentityMatrix(mTm.getRowDimension());
True,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,191,"Assert.assertEquals(0, mTm.subtract(id).getNorm(), 1.0e-14);"
True,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,194,private void checkHessenbergForm(RealMatrix m) {
True,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,195,final int rows = m.getRowDimension();
True,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,196,final int cols = m.getColumnDimension();
True,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,197,for (int i = 0; i < rows; ++i) {
True,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,198,for (int j = 0; j < cols; ++j) {
True,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,199,if (i > j + 1) {
True,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,200,"Assert.assertEquals(0, m.getEntry(i, j), 1.0e-16);"
True,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java,206,"private void checkMatricesValues(double[][] matrix, double[][] pRef, double[][] hRef) {"

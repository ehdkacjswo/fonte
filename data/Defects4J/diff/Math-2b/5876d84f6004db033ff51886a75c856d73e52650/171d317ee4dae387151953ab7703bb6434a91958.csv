is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,152,/** Interpolate value and first derivatives at a specified abscissa.
True,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,153,* @param x interpolation abscissa
True,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,154,* @param order maximum derivation order
True,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,155,"* @return interpolated value and derivatives (value in row 0,"
True,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,156,"* 1<sup>st</sup> derivative in row 1, ... n<sup>th</sup> derivative in row n)"
True,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,157,* @exception NoDataException if sample is empty
True,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,159,"public T[][] derivatives(T x, int order) throws NoDataException {"
True,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,161,// safety check
True,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,162,if (abscissae.isEmpty()) {
True,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,163,throw new NoDataException(LocalizedFormats.EMPTY_INTERPOLATION_SAMPLE);
True,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,166,final T zero = x.getField().getZero();
True,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,167,final T one  = x.getField().getOne();
True,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,168,"final T[] tj = MathArrays.buildArray(x.getField(), order + 1);"
True,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,169,tj[0] = zero;
True,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,170,for (int i = 0; i < order; ++i) {
True,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,171,tj[i + 1] = tj[i].add(one);
True,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,174,final T[][] derivatives =
True,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,175,"MathArrays.buildArray(x.getField(), order + 1, topDiagonal.get(0).length);"
True,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,176,"final T[] valueCoeff = MathArrays.buildArray(x.getField(), order + 1);"
True,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,177,valueCoeff[0] = x.getField().getOne();
True,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,178,for (int i = 0; i < topDiagonal.size(); ++i) {
True,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,179,T[] dividedDifference = topDiagonal.get(i);
True,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,180,final T deltaX = x.subtract(abscissae.get(i));
True,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,181,for (int j = order; j >= 0; --j) {
True,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,182,for (int k = 0; k < derivatives[j].length; ++k) {
True,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,183,derivatives[j][k] =
True,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,184,derivatives[j][k].add(dividedDifference[k].multiply(valueCoeff[j]));
True,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,186,valueCoeff[j] = valueCoeff[j].multiply(deltaX);
True,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,187,if (j > 0) {
True,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,188,valueCoeff[j] = valueCoeff[j].add(tj[j].multiply(valueCoeff[j - 1]));
True,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java,193,return derivatives;
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,39,"BigFraction[][] derivatives = interpolator.derivatives(new BigFraction(x), 1);"
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,40,"Assert.assertEquals(BigFraction.ZERO, derivatives[0][0]);"
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,41,"Assert.assertEquals(BigFraction.ZERO, derivatives[1][0]);"
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,54,"BigFraction[][] derivatives = interpolator.derivatives(new BigFraction(x), 3);"
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,55,"Assert.assertEquals((x - 1) * (x - 2), derivatives[0][0].doubleValue(), 1.0e-15);"
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,56,"Assert.assertEquals(2 * x - 3, derivatives[1][0].doubleValue(), 1.0e-15);"
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,57,"Assert.assertEquals(2, derivatives[2][0].doubleValue(), 1.0e-15);"
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,58,"Assert.assertEquals(0, derivatives[3][0].doubleValue(), 1.0e-15);"
False,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,60,"ssert.assertEquals(new BigFraction(1), interpolator.value(new BigFraction(0))[0]);"
False,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,61,"ssert.assertEquals(new BigFraction(4), interpolator.value(new BigFraction(1))[0]);"
False,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,62,"ssert.assertEquals(new BigFraction(5), interpolator.value(new BigFraction(2))[0]);"
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,68,"BigFraction[][] derivatives = interpolator.derivatives(new BigFraction(0), 5);"
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,69,"Assert.assertEquals(new BigFraction(  1), derivatives[0][0]);"
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,70,"Assert.assertEquals(new BigFraction(  2), derivatives[1][0]);"
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,71,"Assert.assertEquals(new BigFraction(  8), derivatives[2][0]);"
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,72,"Assert.assertEquals(new BigFraction(-24), derivatives[3][0]);"
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,73,"Assert.assertEquals(new BigFraction( 24), derivatives[4][0]);"
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,74,"Assert.assertEquals(new BigFraction(  0), derivatives[5][0]);"
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,75,"derivatives = interpolator.derivatives(new BigFraction(1), 5);"
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,76,"Assert.assertEquals(new BigFraction(  4), derivatives[0][0]);"
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,77,"Assert.assertEquals(new BigFraction(  2), derivatives[1][0]);"
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,78,"Assert.assertEquals(new BigFraction( -4), derivatives[2][0]);"
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,79,"Assert.assertEquals(new BigFraction(  0), derivatives[3][0]);"
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,80,"Assert.assertEquals(new BigFraction( 24), derivatives[4][0]);"
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,81,"Assert.assertEquals(new BigFraction(  0), derivatives[5][0]);"
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,82,"derivatives = interpolator.derivatives(new BigFraction(2), 5);"
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,83,"Assert.assertEquals(new BigFraction(  5), derivatives[0][0]);"
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,84,"Assert.assertEquals(new BigFraction(  2), derivatives[1][0]);"
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,85,"Assert.assertEquals(new BigFraction(  8), derivatives[2][0]);"
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,86,"Assert.assertEquals(new BigFraction( 24), derivatives[3][0]);"
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,87,"Assert.assertEquals(new BigFraction( 24), derivatives[4][0]);"
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,88,"Assert.assertEquals(new BigFraction(  0), derivatives[5][0]);"
False,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,233,ublic void testEmptySample() {
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,259,public void testEmptySampleValue() {
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,263,@Test(expected=NoDataException.class)
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,264,public void testEmptySampleDerivative() {
True,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java,265,"new FieldHermiteInterpolator<BigFraction>().derivatives(BigFraction.ZERO, 1);"

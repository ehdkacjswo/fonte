is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java,src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java,166,"* Returns a pseudorandom, uniformly distributed <tt>long</tt> value"
True,src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java,src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java,167,"* between 0 (inclusive) and the specified value (exclusive), drawn from"
True,src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java,src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java,168,* this random number generator's sequence.
True,src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java,src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java,170,* @param n the bound on the random number to be returned.  Must be
True,src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java,src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java,171,* positive.
True,src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java,src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java,172,"* @return  a pseudorandom, uniformly distributed <tt>long</tt>"
True,src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java,src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java,173,* value between 0 (inclusive) and n (exclusive).
True,src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java,src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java,174,* @throws IllegalArgumentException  if n is not positive.
True,src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java,src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java,176,public long nextLong(long n) throws IllegalArgumentException {
True,src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java,src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java,177,if (n > 0) {
True,src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java,src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java,178,long bits;
True,src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java,src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java,179,long val;
True,src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java,src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java,180,do {
True,src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java,src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java,181,bits = ((long) next(31)) << 32;
True,src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java,src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java,182,bits = bits | (((long) next(32)) & 0xffffffffL);
True,src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java,src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java,183,val  = bits % n;
True,src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java,src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java,184,} while (bits - val + (n - 1) < 0);
True,src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java,src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java,185,return val;
True,src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java,src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java,187,throw new NotStrictlyPositiveException(n);
False,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,48,mport org.apache.commons.math3.util.FastMath;
False,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,197,"ublic int nextInt(int lower, int upper) throws NumberIsTooLargeException {"
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,196,"public int nextInt(final int lower, final int upper) throws NumberIsTooLargeException {"
False,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,202,ouble r = getRan().nextDouble();
False,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,203,ouble scaled = r * upper + (1.0 - r) * lower + r;
False,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,204,eturn (int) FastMath.floor(scaled);
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,201,final int max = (upper - lower) + 1;
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,202,if (max <= 0) {
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,203,// the range is too wide to fit in a positive int (larger than 2^31); as it covers
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,204,"// more than half the integer range, we use directly a simple rejection method"
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,205,final RandomGenerator rng = getRan();
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,206,while (true) {
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,207,final int r = rng.nextInt();
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,208,if (r >= lower && r <= upper) {
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,209,return r;
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,212,} else {
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,213,// we can shift the range and generate directly a positive int
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,214,return lower + getRan().nextInt(max);
False,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,208,"ublic long nextLong(long lower, long upper) throws NumberIsTooLargeException {"
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,219,"public long nextLong(final long lower, final long upper) throws NumberIsTooLargeException {"
False,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,213,ouble r = getRan().nextDouble();
False,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,214,ouble scaled = r * upper + (1.0 - r) * lower + r;
False,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,215,eturn (long)FastMath.floor(scaled);
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,224,final long max = (upper - lower) + 1;
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,225,if (max <= 0) {
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,226,// the range is too wide to fit in a positive long (larger than 2^63); as it covers
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,227,"// more than half the long range, we use directly a simple rejection method"
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,228,final RandomGenerator rng = getRan();
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,229,while (true) {
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,230,final long r = rng.nextLong();
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,231,if (r >= lower && r <= upper) {
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,232,return r;
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,235,} else if (max < Integer.MAX_VALUE){
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,236,// we can shift the range and generate directly a positive int
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,237,return lower + getRan().nextInt((int) max);
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,238,} else {
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,239,// we can shift the range and generate directly a positive long
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,240,"return lower + nextLong(getRan(), max);"
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,245,"* Returns a pseudorandom, uniformly distributed <tt>long</tt> value"
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,246,"* between 0 (inclusive) and the specified value (exclusive), drawn from"
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,247,* this random number generator's sequence.
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,249,* @param n the bound on the random number to be returned.  Must be
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,250,* positive.
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,251,"* @return  a pseudorandom, uniformly distributed <tt>long</tt>"
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,252,* value between 0 (inclusive) and n (exclusive).
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,253,* @throws IllegalArgumentException  if n is not positive.
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,255,"private static long nextLong(final RandomGenerator rng, final long n) throws IllegalArgumentException {"
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,256,if (n > 0) {
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,257,final byte[] byteArray = new byte[8];
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,258,long bits;
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,259,long val;
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,260,do {
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,261,rng.nextBytes(byteArray);
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,262,bits = 0;
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,263,for (final byte b : byteArray) {
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,264,bits = (bits << 8) | (((long) b) & 0xffL);
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,266,bits = bits & 0x7fffffffffffffffL;
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,267,val  = bits % n;
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,268,} while (bits - val + (n - 1) < 0);
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,269,return val;
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,271,throw new NotStrictlyPositiveException(n);
False,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,285,"ublic int nextSecureInt(int lower, int upper) throws NumberIsTooLargeException {"
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,341,"public int nextSecureInt(final int lower, final int upper) throws NumberIsTooLargeException {"
False,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,290,ecureRandom sec = getSecRan();
False,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,291,inal double r = sec.nextDouble();
False,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,292,inal double scaled = r * upper + (1.0 - r) * lower + r;
False,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,293,eturn (int)FastMath.floor(scaled);
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,346,final int max = (upper - lower) + 1;
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,347,if (max <= 0) {
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,348,// the range is too wide to fit in a positive int (larger than 2^31); as it covers
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,349,"// more than half the integer range, we use directly a simple rejection method"
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,350,final SecureRandom rng = getSecRan();
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,351,while (true) {
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,352,final int r = rng.nextInt();
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,353,if (r >= lower && r <= upper) {
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,354,return r;
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,357,} else {
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,358,// we can shift the range and generate directly a positive int
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,359,return lower + getSecRan().nextInt(max);
False,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,297,"ublic long nextSecureLong(long lower, long upper) throws NumberIsTooLargeException {"
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,364,"public long nextSecureLong(final long lower, final long upper) throws NumberIsTooLargeException {"
False,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,302,ecureRandom sec = getSecRan();
False,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,303,inal double r = sec.nextDouble();
False,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,304,inal double scaled = r * upper + (1.0 - r) * lower + r;
False,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,305,eturn (long)FastMath.floor(scaled);
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,369,final long max = (upper - lower) + 1;
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,370,if (max <= 0) {
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,371,// the range is too wide to fit in a positive long (larger than 2^63); as it covers
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,372,"// more than half the long range, we use directly a simple rejection method"
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,373,final SecureRandom rng = getSecRan();
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,374,while (true) {
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,375,final long r = rng.nextLong();
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,376,if (r >= lower && r <= upper) {
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,377,return r;
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,380,} else if (max < Integer.MAX_VALUE){
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,381,// we can shift the range and generate directly a positive int
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,382,return lower + getSecRan().nextInt((int) max);
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,383,} else {
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,384,// we can shift the range and generate directly a positive long
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,385,"return lower + nextLong(getSecRan(), max);"
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,390,"* Returns a pseudorandom, uniformly distributed <tt>long</tt> value"
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,391,"* between 0 (inclusive) and the specified value (exclusive), drawn from"
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,392,* this random number generator's sequence.
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,394,* @param n the bound on the random number to be returned.  Must be
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,395,* positive.
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,396,"* @return  a pseudorandom, uniformly distributed <tt>long</tt>"
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,397,* value between 0 (inclusive) and n (exclusive).
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,398,* @throws IllegalArgumentException  if n is not positive.
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,400,"private static long nextLong(final SecureRandom rng, final long n) throws IllegalArgumentException {"
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,401,if (n > 0) {
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,402,final byte[] byteArray = new byte[8];
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,403,long bits;
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,404,long val;
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,405,do {
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,406,rng.nextBytes(byteArray);
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,407,bits = 0;
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,408,for (final byte b : byteArray) {
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,409,bits = (bits << 8) | (((long) b) & 0xffL);
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,411,bits = bits & 0x7fffffffffffffffL;
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,412,val  = bits % n;
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,413,} while (bits - val + (n - 1) < 0);
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,414,return val;
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,416,throw new NotStrictlyPositiveException(n);
False,src/main/java/org/apache/commons/math3/stat/ranking/NaturalRanking.java,src/main/java/org/apache/commons/math3/stat/ranking/NaturalRanking.java,27,mport org.apache.commons.math3.random.RandomData;
False,src/main/java/org/apache/commons/math3/stat/ranking/NaturalRanking.java,src/main/java/org/apache/commons/math3/stat/ranking/NaturalRanking.java,28,mport org.apache.commons.math3.random.RandomDataImpl;
True,src/main/java/org/apache/commons/math3/stat/ranking/NaturalRanking.java,src/main/java/org/apache/commons/math3/stat/ranking/NaturalRanking.java,27,import org.apache.commons.math3.random.RandomDataGenerator;
False,src/main/java/org/apache/commons/math3/stat/ranking/NaturalRanking.java,src/main/java/org/apache/commons/math3/stat/ranking/NaturalRanking.java,87,rivate final RandomData randomData;
True,src/main/java/org/apache/commons/math3/stat/ranking/NaturalRanking.java,src/main/java/org/apache/commons/math3/stat/ranking/NaturalRanking.java,86,private final RandomDataGenerator randomData;
False,src/main/java/org/apache/commons/math3/stat/ranking/NaturalRanking.java,src/main/java/org/apache/commons/math3/stat/ranking/NaturalRanking.java,108,andomData = new RandomDataImpl();
True,src/main/java/org/apache/commons/math3/stat/ranking/NaturalRanking.java,src/main/java/org/apache/commons/math3/stat/ranking/NaturalRanking.java,107,randomData = new RandomDataGenerator();
False,src/main/java/org/apache/commons/math3/stat/ranking/NaturalRanking.java,src/main/java/org/apache/commons/math3/stat/ranking/NaturalRanking.java,133,andomData = new RandomDataImpl();
True,src/main/java/org/apache/commons/math3/stat/ranking/NaturalRanking.java,src/main/java/org/apache/commons/math3/stat/ranking/NaturalRanking.java,132,randomData = new RandomDataGenerator();
False,src/main/java/org/apache/commons/math3/stat/ranking/NaturalRanking.java,src/main/java/org/apache/commons/math3/stat/ranking/NaturalRanking.java,146,andomData = new RandomDataImpl(randomGenerator);
True,src/main/java/org/apache/commons/math3/stat/ranking/NaturalRanking.java,src/main/java/org/apache/commons/math3/stat/ranking/NaturalRanking.java,145,randomData = new RandomDataGenerator(randomGenerator);
False,src/main/java/org/apache/commons/math3/stat/ranking/NaturalRanking.java,src/main/java/org/apache/commons/math3/stat/ranking/NaturalRanking.java,162,andomData = new RandomDataImpl(randomGenerator);
True,src/main/java/org/apache/commons/math3/stat/ranking/NaturalRanking.java,src/main/java/org/apache/commons/math3/stat/ranking/NaturalRanking.java,161,randomData = new RandomDataGenerator(randomGenerator);
False,src/test/java/org/apache/commons/math3/random/MersenneTwisterTest.java,src/test/java/org/apache/commons/math3/random/MersenneTwisterTest.java,26,eturn new MersenneTwister(100);
True,src/test/java/org/apache/commons/math3/random/MersenneTwisterTest.java,src/test/java/org/apache/commons/math3/random/MersenneTwisterTest.java,26,return new MersenneTwister(111);
True,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,122,"checkNextIntUniform(Integer.MIN_VALUE + 1, Integer.MIN_VALUE + 12);"
True,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,132,"checkNextIntUniform(Integer.MAX_VALUE - 12, Integer.MAX_VALUE - 1);"
True,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,156,@Test
True,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,157,public void testNextIntWideRange() {
True,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,158,int lower = -0x6543210F;
True,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,159,int upper =  0x456789AB;
True,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,160,int max   = Integer.MIN_VALUE;
True,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,161,int min   = Integer.MAX_VALUE;
True,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,162,for (int i = 0; i < 1000000; ++i) {
True,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,163,"int r = randomData.nextInt(lower, upper);"
True,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,164,"max = FastMath.max(max, r);"
True,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,165,"min = FastMath.min(min, r);"
True,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,166,Assert.assertTrue(r >= lower);
True,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,167,Assert.assertTrue(r <= upper);
True,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,169,double ratio = (((double) max)   - ((double) min)) /
True,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,170,(((double) upper) - ((double) lower));
True,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,171,Assert.assertTrue(ratio > 0.99999);
True,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,197,"checkNextLongUniform(Long.MIN_VALUE + 1, Long.MIN_VALUE + 12);"
True,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,206,"checkNextLongUniform(Long.MAX_VALUE - 12, Long.MAX_VALUE - 1);"
False,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,189,"rivate void checkNextLongUniform(int min, int max) {"
True,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,210,"private void checkNextLongUniform(long min, long max) {"
False,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,193,"ssert.assertTrue(""nextLong range"", (value >= min) && (value <= max));"
True,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,214,"Assert.assertTrue(""nextLong range: "" + value + "" "" + min + "" "" + max,"
True,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,215,(value >= min) && (value <= max));
False,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,196,inal int len = max - min + 1;
True,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,218,final int len = ((int) (max - min)) + 1;
True,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,231,@Test
True,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,232,public void testNextLongWideRange() {
True,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,233,long lower = -0x6543210FEDCBA987L;
True,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,234,long upper =  0x456789ABCDEF0123L;
True,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,235,long max = Long.MIN_VALUE;
True,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,236,long min = Long.MAX_VALUE;
True,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,237,for (int i = 0; i < 10000000; ++i) {
True,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,238,"long r = randomData.nextLong(lower, upper);"
True,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,239,"max = FastMath.max(max, r);"
True,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,240,"min = FastMath.min(min, r);"
True,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,241,Assert.assertTrue(r >= lower);
True,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,242,Assert.assertTrue(r <= upper);
True,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,244,double ratio = (((double) max)   - ((double) min)) /
True,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,245,(((double) upper) - ((double) lower));
True,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java,246,Assert.assertTrue(ratio > 0.99999);
False,src/test/java/org/apache/commons/math3/random/Well512aTest.java,src/test/java/org/apache/commons/math3/random/Well512aTest.java,26,eturn new Well512a(100);
True,src/test/java/org/apache/commons/math3/random/Well512aTest.java,src/test/java/org/apache/commons/math3/random/Well512aTest.java,26,return new Well512a(101);
False,src/test/java/org/apache/commons/math3/stat/ranking/NaturalRankingTest.java,src/test/java/org/apache/commons/math3/stat/ranking/NaturalRankingTest.java,179,"ouble[] correctRanks = { 5, 4, 6, 7, 3, 8, Double.NaN, 1, 4 };"
True,src/test/java/org/apache/commons/math3/stat/ranking/NaturalRankingTest.java,src/test/java/org/apache/commons/math3/stat/ranking/NaturalRankingTest.java,179,"double[] correctRanks = { 5, 3, 6, 7, 3, 8, Double.NaN, 1, 2 };"
False,src/test/java/org/apache/commons/math3/stat/ranking/NaturalRankingTest.java,src/test/java/org/apache/commons/math3/stat/ranking/NaturalRankingTest.java,182,"orrectRanks = new double[] { 1, 1, 4, 3, 5 };"
True,src/test/java/org/apache/commons/math3/stat/ranking/NaturalRankingTest.java,src/test/java/org/apache/commons/math3/stat/ranking/NaturalRankingTest.java,182,"correctRanks = new double[] { 1, 2, 4, 3, 5 };"
False,src/test/java/org/apache/commons/math3/stat/ranking/NaturalRankingTest.java,src/test/java/org/apache/commons/math3/stat/ranking/NaturalRankingTest.java,185,"orrectRanks = new double[] { 3, 4, 2, 1 };"
True,src/test/java/org/apache/commons/math3/stat/ranking/NaturalRankingTest.java,src/test/java/org/apache/commons/math3/stat/ranking/NaturalRankingTest.java,185,"correctRanks = new double[] { 3, 3, 2, 1 };"
False,src/test/java/org/apache/commons/math3/stat/ranking/NaturalRankingTest.java,src/test/java/org/apache/commons/math3/stat/ranking/NaturalRankingTest.java,191,"orrectRanks = new double[] { 3, 2, 5, 5, 7, 6, 1 };"
True,src/test/java/org/apache/commons/math3/stat/ranking/NaturalRankingTest.java,src/test/java/org/apache/commons/math3/stat/ranking/NaturalRankingTest.java,191,"correctRanks = new double[] { 3, 2, 4, 4, 6, 7, 1 };"
False,src/test/java/org/apache/commons/math3/stat/ranking/NaturalRankingTest.java,src/test/java/org/apache/commons/math3/stat/ranking/NaturalRankingTest.java,194,"orrectRanks = new double[] { 1, 3, 4, 4 };"
True,src/test/java/org/apache/commons/math3/stat/ranking/NaturalRankingTest.java,src/test/java/org/apache/commons/math3/stat/ranking/NaturalRankingTest.java,194,"correctRanks = new double[] { 2, 3, 3, 3 };"

is_addition,old_file_path,new_file_path,line_num,content
True,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,14,* See the License for the specific language governing permissions and
True,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,15,* limitations under the License.
True,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,18,package org.apache.commons.math.linear;
True,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,20,import org.apache.commons.math.exception.MathIllegalArgumentException;
True,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,21,import org.apache.commons.math.fraction.Fraction;
True,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,22,import org.apache.commons.math.fraction.FractionField;
True,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,23,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,24,import org.junit.Test;
True,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,26,public class FieldLUSolverTest {
True,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,27,private int[][] testData = {
True,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,28,"{ 1, 2, 3},"
True,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,29,"{ 2, 5, 3},"
True,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,30,"{ 1, 0, 8}"
True,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,32,private int[][] luData = {
True,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,33,"{ 2, 3, 3 },"
True,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,34,"{ 0, 5, 7 },"
True,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,35,"{ 6, 9, 8 }"
True,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,38,// singular matrices
True,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,39,private int[][] singular = {
True,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,40,"{ 2, 3 },"
True,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,41,"{ 2, 3 }"
True,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,43,private int[][] bigSingular = {
True,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,44,"{ 1, 2,   3,    4 },"
True,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,45,"{ 2, 5,   3,    4 },"
True,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,46,"{ 7, 3, 256, 1930 },"
True,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,47,"{ 3, 7,   6,    8 }"
True,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,48,}; // 4th row = 1st + 2nd
True,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,50,public static FieldMatrix<Fraction> createFractionMatrix(final int[][] data) {
True,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,51,final int numRows = data.length;
True,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,52,final int numCols = data[0].length;
True,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,53,final Array2DRowFieldMatrix<Fraction> m;
True,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,54,"m = new Array2DRowFieldMatrix<Fraction>(FractionField.getInstance(),"
True,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,55,"numRows, numCols);"
True,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,56,for (int i = 0; i < numRows; i++) {
True,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,57,for (int j = 0; j < numCols; j++) {
True,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,58,"m.setEntry(i, j, new Fraction(data[i][j], 1));"
True,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,61,return m;
True,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,64,/** test singular */
True,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,65,@Test
True,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,66,public void testSingular() {
True,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,67,FieldDecompositionSolver<Fraction> solver;
True,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,68,solver = new FieldLUDecompositionImpl<Fraction>(createFractionMatrix(testData))
True,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,69,.getSolver();
True,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,70,Assert.assertTrue(solver.isNonSingular());
True,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,71,solver = new FieldLUDecompositionImpl<Fraction>(createFractionMatrix(singular))
True,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,72,.getSolver();
True,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,73,Assert.assertFalse(solver.isNonSingular());
True,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,74,solver = new FieldLUDecompositionImpl<Fraction>(createFractionMatrix(bigSingular))
True,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,75,.getSolver();
True,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,76,Assert.assertFalse(solver.isNonSingular());
True,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,79,/** test solve dimension errors */
True,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,80,@Test
True,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,81,public void testSolveDimensionErrors() {
True,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,82,FieldDecompositionSolver<Fraction> solver;
True,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,83,solver = new FieldLUDecompositionImpl<Fraction>(createFractionMatrix(testData))
True,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,84,.getSolver();
True,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,85,FieldMatrix<Fraction> b = createFractionMatrix(new int[2][2]);
True,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,86,try {
True,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,87,solver.solve(b);
True,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,88,"Assert.fail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,89,} catch (MathIllegalArgumentException iae) {
True,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,90,// expected behavior
True,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,92,try {
True,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,93,solver.solve(b.getColumnVector(0));
True,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,94,"Assert.fail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,95,} catch (MathIllegalArgumentException iae) {
True,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,96,// expected behavior
True,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,100,/** test solve singularity errors */
True,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,101,@Test
True,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,102,public void testSolveSingularityErrors() {
True,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,103,FieldDecompositionSolver solver;
True,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,104,solver = new FieldLUDecompositionImpl(createFractionMatrix(singular))
True,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,105,.getSolver();
True,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,106,FieldMatrix b = createFractionMatrix(new int[2][2]);
True,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,107,try {
True,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,108,solver.solve(b);
True,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,109,"Assert.fail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,110,} catch (SingularMatrixException ime) {
True,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,111,// expected behavior
True,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,113,try {
True,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,114,solver.solve(b.getColumnVector(0));
True,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,115,"Assert.fail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,116,} catch (SingularMatrixException ime) {
True,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,117,// expected behavior
True,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,121,/** test solve */
True,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,122,@Test
True,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,123,public void testSolve() {
True,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,124,FieldDecompositionSolver solver;
True,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,125,solver = new FieldLUDecompositionImpl<Fraction>(createFractionMatrix(testData))
True,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,126,.getSolver();
True,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,127,FieldMatrix<Fraction> b = createFractionMatrix(new int[][] {
True,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,128,"{ 1, 0 }, { 2, -5 }, { 3, 1 }"
True,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,130,FieldMatrix<Fraction> xRef = createFractionMatrix(new int[][] {
True,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,131,"{ 19, -71 }, { -6, 22 }, { -2, 9 }"
True,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,134,// using FieldMatrix
True,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,135,FieldMatrix<Fraction> x = solver.solve(b);
True,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,136,for (int i = 0; i < x.getRowDimension(); i++){
True,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,137,for (int j = 0; j < x.getColumnDimension(); j++){
True,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,138,"Assert.assertEquals(""("" + i + "", "" + j + "")"","
True,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,139,"xRef.getEntry(i, j), x.getEntry(i, j));"
True,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,143,// using ArrayFieldVector
True,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,144,for (int j = 0; j < b.getColumnDimension(); j++) {
True,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,145,final FieldVector<Fraction> xj = solver.solve(b.getColumnVector(j));
True,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,146,for (int i = 0; i < xj.getDimension(); i++){
True,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,147,"Assert.assertEquals(""("" + i + "", "" + j + "")"","
True,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,148,"xRef.getEntry(i, j), xj.getEntry(i));"
True,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,152,// using SparseFieldVector
True,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,153,for (int j = 0; j < b.getColumnDimension(); j++) {
True,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,154,final SparseFieldVector<Fraction> bj;
True,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,155,"bj = new SparseFieldVector<Fraction>(FractionField.getInstance(),"
True,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,156,b.getColumn(j));
True,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,157,final FieldVector<Fraction> xj = solver.solve(bj);
True,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,158,for (int i = 0; i < xj.getDimension(); i++) {
True,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,159,"Assert.assertEquals(""("" + i + "", "" + j + "")"","
True,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,160,"xRef.getEntry(i, j), xj.getEntry(i));"
True,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,165,/** test determinant */
True,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,166,@Test
True,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,167,public void testDeterminant() {
True,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,168,"Assert.assertEquals( -1, getDeterminant(createFractionMatrix(testData)), 1E-15);"
True,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,169,"Assert.assertEquals(-10, getDeterminant(createFractionMatrix(luData)), 1E-14);"
True,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,170,"Assert.assertEquals(  0, getDeterminant(createFractionMatrix(singular)), 1E-15);"
True,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,171,"Assert.assertEquals(  0, getDeterminant(createFractionMatrix(bigSingular)), 1E-15);"
True,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,174,private double getDeterminant(final FieldMatrix<Fraction> m) {
True,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,src/test/java/org/apache/commons/math/linear/FieldLUSolverTest.java,175,return new FieldLUDecompositionImpl<Fraction>(m).getDeterminant().doubleValue();

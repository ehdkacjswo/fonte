is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,18,package org.apache.commons.math3.distribution;
True,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,20,import org.apache.commons.math3.exception.NotStrictlyPositiveException;
True,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,21,import org.apache.commons.math3.exception.NumberIsTooLargeException;
True,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,22,import org.apache.commons.math3.exception.util.LocalizedFormats;
True,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,23,import org.apache.commons.math3.util.FastMath;
True,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,24,import org.apache.commons.math3.random.RandomGenerator;
True,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,25,import org.apache.commons.math3.random.Well19937c;
True,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,28,* Implementation of the Pareto distribution.
True,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,30,* <p>
True,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,31,* <strong>Parameters:</strong>
True,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,32,* The probability distribution function of {@code X} is given by (for {@code x >= k}):
True,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,33,* <pre>
True,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,34,*  α * k^α / x^(α + 1)
True,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,35,* </pre>
True,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,36,* <p>
True,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,37,* <ul>
True,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,38,"* <li>{@code k} is the <em>scale</em> parameter: this is the minimum possible value of {@code X},</li>"
True,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,39,* <li>{@code α} is the <em>shape</em> parameter: this is the Pareto index</li>
True,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,40,* </ul>
True,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,42,"* @see <a href=""http://en.wikipedia.org/wiki/Pareto_distribution"">"
True,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,43,* Pareto distribution (Wikipedia)</a>
True,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,44,"* @see <a href=""http://mathworld.wolfram.com/ParetoDistribution.html"">"
True,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,45,* Pareto distribution (MathWorld)</a>
True,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,47,* @version $Id$
True,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,48,* @since 4.0
True,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,50,public class ParetoDistribution extends AbstractRealDistribution {
True,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,52,/** Default inverse cumulative probability accuracy. */
True,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,53,public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;
True,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,55,/** Serializable version identifier. */
True,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,56,private static final long serialVersionUID = 20130424;
True,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,58,/** The scale parameter of this distribution. */
True,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,59,private final double scale;
True,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,61,/** The shape parameter of this distribution. */
True,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,62,private final double shape;
True,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,64,/** Inverse cumulative probability accuracy. */
True,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,65,private final double solverAbsoluteAccuracy;
True,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,68,* Create a Pareto distribution with a scale of {@code 1} and a shape of {@code 1}.
True,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,70,public ParetoDistribution() {
True,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,71,"this(1, 1);"
True,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,75,* Create a Pareto distribution using the specified scale and shape.
True,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,77,* @param scale the scale parameter of this distribution
True,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,78,* @param shape the shape parameter of this distribution
True,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,79,* @throws NotStrictlyPositiveException if {@code scale <= 0} or {@code shape <= 0}.
True,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,81,"public ParetoDistribution(double scale, double shape)"
True,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,82,throws NotStrictlyPositiveException {
True,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,83,"this(scale, shape, DEFAULT_INVERSE_ABSOLUTE_ACCURACY);"
True,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,87,"* Create a Pareto distribution using the specified scale, shape and"
True,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,88,* inverse cumulative distribution accuracy.
True,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,90,* @param scale the scale parameter of this distribution
True,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,91,* @param shape the shape parameter of this distribution
True,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,92,* @param inverseCumAccuracy Inverse cumulative probability accuracy.
True,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,93,* @throws NotStrictlyPositiveException if {@code scale <= 0} or {@code shape <= 0}.
True,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,95,"public ParetoDistribution(double scale, double shape, double inverseCumAccuracy)"
True,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,96,throws NotStrictlyPositiveException {
True,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,97,"this(new Well19937c(), scale, shape, inverseCumAccuracy);"
True,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,101,* Creates a log-normal distribution.
True,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,103,* @param rng Random number generator.
True,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,104,* @param scale Scale parameter of this distribution.
True,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,105,* @param shape Shape parameter of this distribution.
True,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,106,* @param inverseCumAccuracy Inverse cumulative probability accuracy.
True,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,107,* @throws NotStrictlyPositiveException if {@code scale <= 0} or {@code shape <= 0}.
True,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,109,"public ParetoDistribution(RandomGenerator rng,"
True,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,110,"double scale,"
True,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,111,"double shape,"
True,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,112,double inverseCumAccuracy)
True,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,113,throws NotStrictlyPositiveException {
True,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,114,super(rng);
True,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,116,if (scale <= 0) {
True,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,117,"throw new NotStrictlyPositiveException(LocalizedFormats.SCALE, scale);"
True,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,120,if (shape <= 0) {
True,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,121,"throw new NotStrictlyPositiveException(LocalizedFormats.SHAPE, shape);"
True,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,124,this.scale = scale;
True,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,125,this.shape = shape;
True,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,126,this.solverAbsoluteAccuracy = inverseCumAccuracy;
True,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,130,* Returns the scale parameter of this distribution.
True,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,132,* @return the scale parameter
True,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,134,public double getScale() {
True,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,135,return scale;
True,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,139,* Returns the shape parameter of this distribution.
True,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,141,* @return the shape parameter
True,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,143,public double getShape() {
True,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,144,return shape;
True,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,148,* {@inheritDoc}
True,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,149,* <p>
True,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,150,"* For scale {@code k}, and shape {@code α} of this distribution, the PDF"
True,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,151,* is given by
True,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,152,* <ul>
True,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,153,"* <li>{@code 0} if {@code x < k},</li>"
True,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,154,* <li>{@code α * k^α / x^(α + 1)} otherwise.</li>
True,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,155,* </ul>
True,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,157,public double density(double x) {
True,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,158,if (x < scale) {
True,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,159,return 0;
True,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,161,"return FastMath.pow(scale, shape) / FastMath.pow(x, shape + 1) * shape;"
True,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,165,* {@inheritDoc}
True,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,166,* <p>
True,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,167,"* For scale {@code k}, and shape {@code α} of this distribution, the CDF is given by"
True,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,168,* <ul>
True,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,169,"* <li>{@code 0} if {@code x < k},</li>"
True,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,170,* <li>{@code 1 - (k / x)^α} otherwise.</li>
True,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,171,* </ul>
True,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,173,public double cumulativeProbability(double x)  {
True,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,174,if (x <= scale) {
True,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,175,return 0;
True,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,177,"return 1 - FastMath.pow(scale / x, shape);"
True,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,181,* {@inheritDoc}
True,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,183,"* @deprecated See {@link RealDistribution#cumulativeProbability(double,double)}"
True,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,185,@Override
True,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,186,@Deprecated
True,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,187,"public double cumulativeProbability(double x0, double x1)"
True,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,188,throws NumberIsTooLargeException {
True,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,189,"return probability(x0, x1);"
True,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,192,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,193,@Override
True,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,194,protected double getSolverAbsoluteAccuracy() {
True,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,195,return solverAbsoluteAccuracy;
True,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,199,* {@inheritDoc}
True,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,200,* <p>
True,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,201,"* For scale {@code k} and shape {@code α}, the mean is given by"
True,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,202,* <ul>
True,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,203,"* <li>{@code ∞} if {@code α <= 1},</li>"
True,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,204,* <li>{@code α * k / (α - 1)} otherwise.</li>
True,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,205,* </ul>
True,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,207,public double getNumericalMean() {
True,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,208,if (shape <= 1) {
True,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,209,return Double.POSITIVE_INFINITY;
True,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,211,return shape * scale / (shape - 1);
True,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,215,* {@inheritDoc}
True,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,216,* <p>
True,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,217,"* For scale {@code k} and shape {@code α}, the variance is given by"
True,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,218,* <ul>
True,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,219,"* <li>{@code ∞} if {@code 1 < α <= 2},</li>"
True,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,220,* <li>{@code k^2 * α / ((α - 1)^2 * (α - 2))} otherwise.</li>
True,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,221,* </ul>
True,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,223,public double getNumericalVariance() {
True,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,224,if (shape <= 2) {
True,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,225,return Double.POSITIVE_INFINITY;
True,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,227,double s = shape - 1;
True,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,228,return scale * scale * shape / (s * s) / (shape - 2);
True,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,232,* {@inheritDoc}
True,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,233,* <p>
True,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,234,* The lower bound of the support is equal to the scale parameter {@code k}.
True,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,236,* @return lower bound of the support
True,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,238,public double getSupportLowerBound() {
True,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,239,return scale;
True,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,243,* {@inheritDoc}
True,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,244,* <p>
True,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,245,* The upper bound of the support is always positive infinity no matter the parameters.
True,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,247,* @return upper bound of the support (always {@code Double.POSITIVE_INFINITY})
True,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,249,public double getSupportUpperBound() {
True,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,250,return Double.POSITIVE_INFINITY;
True,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,253,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,254,public boolean isSupportLowerBoundInclusive() {
True,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,255,return true;
True,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,258,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,259,public boolean isSupportUpperBoundInclusive() {
True,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,260,return false;
True,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,264,* {@inheritDoc}
True,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,265,* <p>
True,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,266,* The support of this distribution is connected.
True,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,268,* @return {@code true}
True,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,270,public boolean isSupportConnected() {
True,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,271,return true;
True,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,274,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,275,@Override
True,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,276,public double sample()  {
True,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,277,final double n = random.nextDouble();
True,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java,278,"return scale / FastMath.pow(n, 1 / shape);"
True,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,14,* See the License for the specific language governing permissions and
True,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,15,* limitations under the License.
True,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,18,package org.apache.commons.math3.distribution;
True,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,20,import org.apache.commons.math3.exception.NotStrictlyPositiveException;
True,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,21,import org.junit.Assert;
True,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,22,import org.junit.Test;
True,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,25,* Test cases for {@link ParetoDistribution}.
True,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,26,* <p>
True,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,27,* Extends {@link RealDistributionAbstractTest}. See class javadoc of that class for details.
True,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,29,* @version $Id$
True,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,30,* @since 4.0
True,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,32,public class ParetoDistributionTest extends RealDistributionAbstractTest {
True,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,34,//-------------- Implementations for abstract methods -----------------------
True,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,36,/** Creates the default real distribution instance to use in tests. */
True,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,37,@Override
True,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,38,public ParetoDistribution makeDistribution() {
True,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,39,"return new ParetoDistribution(2.1, 1.4);"
True,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,42,/** Creates the default cumulative probability distribution test input values */
True,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,43,@Override
True,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,44,public double[] makeCumulativeTestPoints() {
True,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,45,// quantiles computed using R
True,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,46,"return new double[] { -2.226325228634938, -1.156887023657177, -0.643949578356075, -0.2027950777320613, 0.305827808237559,"
True,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,47,"+6.42632522863494, 5.35688702365718, 4.843949578356074, 4.40279507773206, 3.89417219176244 };"
True,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,50,/** Creates the default cumulative probability density test expected values */
True,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,51,@Override
True,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,52,public double[] makeCumulativeTestValues() {
True,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,53,"return new double[] { 0, 0, 0, 0, 0, 0.791089998892, 0.730456085931, 0.689667290488, 0.645278794701, 0.578763688757 };"
True,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,56,/** Creates the default probability density test expected values */
True,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,57,@Override
True,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,58,public double[] makeDensityTestValues() {
True,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,59,"return new double[] { 0, 0, 0, 0, 0, 0.0455118580441, 0.070444173646, 0.0896924681582, 0.112794186114, 0.151439332084 };"
True,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,63,* Creates the default inverse cumulative probability distribution test input values.
True,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,65,@Override
True,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,66,public double[] makeInverseCumulativeTestPoints() {
True,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,67,"// Exclude the test points less than zero, as they have cumulative"
True,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,68,"// probability of zero, meaning the inverse returns zero, and not the"
True,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,69,// points less than zero.
True,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,70,double[] points = makeCumulativeTestValues();
True,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,71,double[] points2 = new double[points.length - 5];
True,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,72,"System.arraycopy(points, 5, points2, 0, points.length - 5);"
True,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,73,return points2;
True,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,77,* Creates the default inverse cumulative probability test expected values.
True,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,79,@Override
True,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,80,public double[] makeInverseCumulativeTestValues() {
True,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,81,"// Exclude the test points less than zero, as they have cumulative"
True,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,82,"// probability of zero, meaning the inverse returns zero, and not the"
True,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,83,// points less than zero.
True,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,84,double[] points = makeCumulativeTestPoints();
True,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,85,double[] points2 = new double[points.length - 5];
True,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,86,"System.arraycopy(points, 5, points2, 0, points.length - 5);"
True,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,87,return points2;
True,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,90,// --------------------- Override tolerance  --------------
True,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,91,@Override
True,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,92,public void setUp() {
True,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,93,super.setUp();
True,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,94,setTolerance(ParetoDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
True,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,97,//---------------------------- Additional test cases -------------------------
True,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,99,private void verifyQuantiles() {
True,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,100,ParetoDistribution distribution = (ParetoDistribution)getDistribution();
True,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,101,double mu = distribution.getScale();
True,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,102,double sigma = distribution.getShape();
True,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,103,"setCumulativeTestPoints( new double[] { mu - 2 *sigma,  mu - sigma,"
True,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,104,"mu,             mu + sigma,"
True,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,105,"mu + 2 * sigma, mu + 3 * sigma,"
True,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,106,"mu + 4 * sigma, mu + 5 * sigma });"
True,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,107,verifyCumulativeProbabilities();
True,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,110,@Test
True,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,111,public void testQuantiles() {
True,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,112,"setCumulativeTestValues(new double[] {0, 0, 0, 0.510884134236, 0.694625688662, 0.785201995008, 0.837811522357, 0.871634279326});"
True,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,113,"setDensityTestValues(new double[] {0, 0, 0.666666666, 0.195646346305, 0.0872498032394, 0.0477328899983, 0.0294888141169, 0.0197485724114});"
True,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,114,verifyQuantiles();
True,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,115,verifyDensities();
True,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,117,"setDistribution(new ParetoDistribution(1, 1));"
True,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,118,"setCumulativeTestValues(new double[] {0, 0, 0, 0.5, 0.666666666667, 0.75, 0.8, 0.833333333333});"
True,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,119,"setDensityTestValues(new double[] {0, 0, 1.0, 0.25, 0.111111111111, 0.0625, 0.04, 0.0277777777778});"
True,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,120,verifyQuantiles();
True,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,121,verifyDensities();
True,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,123,"setDistribution(new ParetoDistribution(0.1, 0.1));"
True,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,124,"setCumulativeTestValues(new double[] {0, 0, 0, 0.0669670084632, 0.104041540159, 0.129449436704, 0.148660077479, 0.164041197922});"
True,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,125,"setDensityTestValues(new double[] {0, 0, 1.0, 0.466516495768, 0.298652819947, 0.217637640824, 0.170267984504, 0.139326467013});"
True,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,126,verifyQuantiles();
True,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,127,verifyDensities();
True,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,130,@Test
True,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,131,public void testInverseCumulativeProbabilityExtremes() {
True,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,132,"setInverseCumulativeTestPoints(new double[] {0, 1});"
True,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,133,"setInverseCumulativeTestValues(new double[] {2.1, Double.POSITIVE_INFINITY});"
True,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,134,verifyInverseCumulativeProbabilities();
True,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,137,@Test
True,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,138,public void testGetScale() {
True,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,139,ParetoDistribution distribution = (ParetoDistribution)getDistribution();
True,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,140,"Assert.assertEquals(2.1, distribution.getScale(), 0);"
True,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,143,@Test
True,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,144,public void testGetShape() {
True,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,145,ParetoDistribution distribution = (ParetoDistribution)getDistribution();
True,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,146,"Assert.assertEquals(1.4, distribution.getShape(), 0);"
True,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,149,@Test(expected=NotStrictlyPositiveException.class)
True,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,150,public void testPreconditions() {
True,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,151,"new ParetoDistribution(1, 0);"
True,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,154,@Test
True,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,155,public void testDensity() {
True,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,156,"double [] x = new double[]{-2, -1, 0, 1, 2};"
True,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,157,"// R 2.14: print(dpareto(c(-2,-1,0,1,2), scale=1, shape=1), digits=10)"
True,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,158,"checkDensity(1, 1, x, new double[] { 0.00, 0.00, 0.00, 1.00, 0.25 });"
True,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,159,"// R 2.14: print(dpareto(c(-2,-1,0,1,2), scale=1.1, shape=1), digits=10)"
True,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,160,"checkDensity(1.1, 1, x, new double[] { 0.000, 0.000, 0.000, 0.000, 0.275 });"
True,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,163,"private void checkDensity(double scale, double shape, double[] x,"
True,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,164,double[] expected) {
True,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,165,"ParetoDistribution d = new ParetoDistribution(scale, shape);"
True,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,166,for (int i = 0; i < x.length; i++) {
True,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,167,"Assert.assertEquals(expected[i], d.density(x[i]), 1e-9);"
True,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,172,* Check to make sure top-coding of extreme values works correctly.
True,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,174,@Test
True,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,175,public void testExtremeValues() {
True,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,176,"ParetoDistribution d = new ParetoDistribution(1, 1);"
True,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,177,for (int i = 0; i < 1e5; i++) { // make sure no convergence exception
True,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,178,double upperTail = d.cumulativeProbability(i);
True,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,179,if (i <= 1000) { // make sure not top-coded
True,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,180,Assert.assertTrue(upperTail < 1.0d);
True,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,182,else { // make sure top coding not reversed
True,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,183,Assert.assertTrue(upperTail > 0.999);
True,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,187,"Assert.assertEquals(d.cumulativeProbability(Double.MAX_VALUE), 1, 0);"
True,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,188,"Assert.assertEquals(d.cumulativeProbability(-Double.MAX_VALUE), 0, 0);"
True,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,189,"Assert.assertEquals(d.cumulativeProbability(Double.POSITIVE_INFINITY), 1, 0);"
True,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,190,"Assert.assertEquals(d.cumulativeProbability(Double.NEGATIVE_INFINITY), 0, 0);"
True,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,193,@Test
True,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,194,public void testMeanVariance() {
True,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,195,final double tol = 1e-9;
True,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,196,ParetoDistribution dist;
True,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,198,"dist = new ParetoDistribution(1, 1);"
True,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,199,"Assert.assertEquals(dist.getNumericalMean(), Double.POSITIVE_INFINITY, tol);"
True,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,200,"Assert.assertEquals(dist.getNumericalVariance(), Double.POSITIVE_INFINITY, tol);"
True,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,202,"dist = new ParetoDistribution(2.2, 2.4);"
True,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,203,"Assert.assertEquals(dist.getNumericalMean(), 3.771428571428, tol);"
True,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java,204,"Assert.assertEquals(dist.getNumericalVariance(), 14.816326530, tol);"

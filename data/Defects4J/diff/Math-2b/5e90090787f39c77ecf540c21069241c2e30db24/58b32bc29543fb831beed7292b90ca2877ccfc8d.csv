is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,1,package org.apache.commons.math3;
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,3,import org.apache.commons.math3.exception.DimensionMismatchException;
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,6,"* Interface representing a <a href=""http://mathworld.wolfram.com/RealNumber.html"">real</a>"
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,7,"* <a href=""http://mathworld.wolfram.com/Field.html"">field</a>."
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,8,* <p>
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,9,* Classes implementing this interface will often be singletons.
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,10,* </p>
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,11,* @param <T> the type of the field elements
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,12,* @see FieldElement
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,13,* @version $Id$
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,14,* @since 3.2
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,16,public interface ExtendedFieldElement<T> extends FieldElement<T> {
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,18,/** Get the real value of the number.
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,19,* @return real value
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,21,double getReal();
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,23,/** '+' operator.
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,24,* @param a right hand side parameter of the operator
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,25,* @return this+a
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,27,T add(double a);
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,29,/** '-' operator.
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,30,* @param a right hand side parameter of the operator
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,31,* @return this-a
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,33,T subtract(double a);
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,35,/** '&times;' operator.
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,36,* @param a right hand side parameter of the operator
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,37,* @return this&times;a
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,39,T multiply(double a);
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,41,/** '&divides;' operator.
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,42,* @param a right hand side parameter of the operator
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,43,* @return this&divides;a
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,45,T divide(double a);
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,47,/** '%' operator.
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,48,* @param a right hand side parameter of the operator
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,49,* @return this%a
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,51,T remainder(double a);
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,53,/** '%' operator.
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,54,* @param a right hand side parameter of the operator
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,55,* @return this%a
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,56,* @exception DimensionMismatchException if number of free parameters or orders are inconsistent
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,58,T remainder(T a)
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,59,throws DimensionMismatchException;
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,61,/** absolute value.
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,62,* @return abs(this)
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,64,T abs();
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,66,/** Get the smallest whole number larger than instance.
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,67,* @return ceil(this)
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,69,T ceil();
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,71,/** Get the largest whole number smaller than instance.
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,72,* @return floor(this)
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,74,T floor();
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,76,"/** Get the whole number that is the nearest to the instance, or the even one if x is exactly half way between two integers."
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,77,* @return a double number r such that r is an integer r - 0.5 <= this <= r + 0.5
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,79,T rint();
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,81,/** Get the closest long to instance value.
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,82,* @return closest long to {@link #getValue()}
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,84,long round();
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,86,/** Compute the signum of the instance.
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,87,"* The signum is -1 for negative numbers, +1 for positive numbers and 0 otherwise"
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,88,"* @return -1.0, -0.0, +0.0, +1.0 or NaN depending on sign of a"
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,90,T signum();
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,93,* Returns the instance with the sign of the argument.
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,94,* A NaN {@code sign} argument is treated as positive.
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,96,* @param sign the sign for the returned value
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,97,* @return the instance with the same sign as the {@code sign} argument
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,99,T copySign(double sign);
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,102,* Multiply the instance by a power of 2.
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,103,* @param n power of 2
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,104,* @return this &times; 2<sup>n</sup>
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,106,T scalb(int n);
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,109,* Returns the hypotenuse of a triangle with sides {@code this} and {@code y}
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,110,* - sqrt(<i>this</i><sup>2</sup>&nbsp;+<i>y</i><sup>2</sup>)<br/>
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,111,* avoiding intermediate overflow or underflow.
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,113,* <ul>
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,114,"* <li> If either argument is infinite, then the result is positive infinity.</li>"
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,115,"* <li> else, if either argument is NaN then the result is NaN.</li>"
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,116,* </ul>
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,118,* @param y a value
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,119,* @return sqrt(<i>this</i><sup>2</sup>&nbsp;+<i>y</i><sup>2</sup>)
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,120,* @exception DimensionMismatchException if number of free parameters or orders are inconsistent
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,122,T hypot(T y)
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,123,throws DimensionMismatchException;
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,125,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,126,T reciprocal();
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,128,/** Square root.
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,129,* @return square root of the instance
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,131,T sqrt();
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,133,/** Cubic root.
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,134,* @return cubic root of the instance
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,136,T cbrt();
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,138,/** N<sup>th</sup> root.
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,139,* @param n order of the root
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,140,* @return n<sup>th</sup> root of the instance
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,142,T rootN(int n);
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,144,/** Power operation.
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,145,* @param p power to apply
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,146,* @return this<sup>p</sup>
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,148,T pow(double p);
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,150,/** Integer power operation.
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,151,* @param n power to apply
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,152,* @return this<sup>n</sup>
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,154,T pow(int n);
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,156,/** Power operation.
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,157,* @param e exponent
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,158,* @return this<sup>e</sup>
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,159,* @exception DimensionMismatchException if number of free parameters or orders are inconsistent
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,161,T pow(T e)
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,162,throws DimensionMismatchException;
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,164,/** Exponential.
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,165,* @return exponential of the instance
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,167,T exp();
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,169,/** Exponential minus 1.
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,170,* @return exponential minus one of the instance
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,172,T expm1();
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,174,/** Natural logarithm.
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,175,* @return logarithm of the instance
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,177,T log();
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,179,/** Shifted natural logarithm.
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,180,* @return logarithm of one plus the instance
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,182,T log1p();
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,184,/** Base 10 logarithm.
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,185,* @return base 10 logarithm of the instance
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,187,T log10();
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,189,/** Cosine operation.
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,190,* @return cos(this)
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,192,T cos();
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,194,/** Sine operation.
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,195,* @return sin(this)
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,197,T sin();
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,199,/** Tangent operation.
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,200,* @return tan(this)
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,202,T tan();
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,204,/** Arc cosine operation.
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,205,* @return acos(this)
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,207,T acos();
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,209,/** Arc sine operation.
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,210,* @return asin(this)
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,212,T asin();
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,214,/** Arc tangent operation.
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,215,* @return atan(this)
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,217,T atan();
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,219,/** Two arguments arc tangent operation.
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,220,* @param x second argument of the arc tangent
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,221,"* @return atan2(this, x)"
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,222,* @exception DimensionMismatchException if number of free parameters or orders are inconsistent
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,224,T atan2(T x)
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,225,throws DimensionMismatchException;
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,227,/** Hyperbolic cosine operation.
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,228,* @return cosh(this)
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,230,T cosh();
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,232,/** Hyperbolic sine operation.
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,233,* @return sinh(this)
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,235,T sinh();
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,237,/** Hyperbolic tangent operation.
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,238,* @return tanh(this)
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,240,T tanh();
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,242,/** Inverse hyperbolic cosine operation.
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,243,* @return acosh(this)
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,245,T acosh();
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,247,/** Inverse hyperbolic sine operation.
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,248,* @return asin(this)
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,250,T asinh();
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,252,/** Inverse hyperbolic  tangent operation.
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,253,* @return atanh(this)
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,255,T atanh();
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,258,* Compute a linear combination accurately.
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,259,* This method computes the sum of the products
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,260,* <code>a<sub>i</sub> b<sub>i</sub></code> to high accuracy.
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,261,* It does so by using specific multiplication and addition algorithms to
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,262,* preserve accuracy and reduce cancellation effects.
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,263,* <br/>
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,264,* It is based on the 2005 paper
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,265,"* <a href=""http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.2.1547"">"
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,266,"* Accurate Sum and Dot Product</a> by Takeshi Ogita, Siegfried M. Rump,"
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,267,* and Shin'ichi Oishi published in SIAM J. Sci. Comput.
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,268,* </p>
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,269,* <p>
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,270,* Note that the instance is only used as a prototype to get proper elements dimensions.
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,271,"* Its value is not used, only the parameters values are used."
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,272,* </p>
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,273,* @param a Factors.
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,274,* @param b Factors.
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,275,* @return <code>&Sigma;<sub>i</sub> a<sub>i</sub> b<sub>i</sub></code>.
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,276,* @throws DimensionMismatchException if arrays dimensions don't match
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,277,* @since 3.2
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,279,"T linearCombination(T[] a, T[] b)"
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,280,throws DimensionMismatchException;
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,283,* Compute a linear combination accurately.
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,284,* This method computes the sum of the products
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,285,* <code>a<sub>i</sub> b<sub>i</sub></code> to high accuracy.
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,286,* It does so by using specific multiplication and addition algorithms to
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,287,* preserve accuracy and reduce cancellation effects.
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,288,* <br/>
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,289,* It is based on the 2005 paper
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,290,"* <a href=""http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.2.1547"">"
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,291,"* Accurate Sum and Dot Product</a> by Takeshi Ogita, Siegfried M. Rump,"
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,292,* and Shin'ichi Oishi published in SIAM J. Sci. Comput.
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,293,* </p>
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,294,* <p>
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,295,* Note that the instance is only used as a prototype to get proper elements dimensions.
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,296,"* Its value is not used, only the parameters values are used."
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,297,* </p>
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,298,* @param a Factors.
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,299,* @param b Factors.
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,300,* @return <code>&Sigma;<sub>i</sub> a<sub>i</sub> b<sub>i</sub></code>.
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,301,* @throws DimensionMismatchException if arrays dimensions don't match
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,303,"public T linearCombination(double[] a, T[] b)"
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,304,throws DimensionMismatchException;
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,307,* Compute a linear combination accurately.
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,308,* <p>
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,309,* This method computes a<sub>1</sub>&times;b<sub>1</sub> +
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,310,* a<sub>2</sub>&times;b<sub>2</sub>
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,311,* to high accuracy. It does so by using specific multiplication and
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,312,* addition algorithms to preserve accuracy and reduce cancellation effects.
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,313,* It is based on the 2005 paper <a
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,314,"* href=""http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.2.1547"">"
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,315,"* Accurate Sum and Dot Product</a> by Takeshi Ogita,"
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,316,"* Siegfried M. Rump, and Shin'ichi Oishi published in SIAM J. Sci. Comput."
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,317,* </p>
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,318,* <p>
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,319,* Note that the instance is only used as a prototype to get proper elements dimensions.
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,320,"* Its value is not used, only the parameters values are used."
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,321,* </p>
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,322,* @param a1 first factor of the first term
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,323,* @param b1 second factor of the first term
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,324,* @param a2 first factor of the second term
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,325,* @param b2 second factor of the second term
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,326,* @return a<sub>1</sub>&times;b<sub>1</sub> +
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,327,* a<sub>2</sub>&times;b<sub>2</sub>
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,328,"* @see #linearCombination(T, T, T, T, T, T)"
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,329,"* @see #linearCombination(T, T, T, T, T, T, T, T)"
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,330,* @since 3.2
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,332,"public T linearCombination(T a1, T b1, T a2, T b2);"
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,335,* Compute a linear combination accurately.
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,336,* <p>
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,337,* This method computes a<sub>1</sub>&times;b<sub>1</sub> +
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,338,* a<sub>2</sub>&times;b<sub>2</sub>
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,339,* to high accuracy. It does so by using specific multiplication and
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,340,* addition algorithms to preserve accuracy and reduce cancellation effects.
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,341,* It is based on the 2005 paper <a
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,342,"* href=""http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.2.1547"">"
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,343,"* Accurate Sum and Dot Product</a> by Takeshi Ogita,"
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,344,"* Siegfried M. Rump, and Shin'ichi Oishi published in SIAM J. Sci. Comput."
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,345,* </p>
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,346,* <p>
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,347,* Note that the instance is only used as a prototype to get proper elements dimensions.
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,348,"* Its value is not used, only the parameters values are used."
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,349,* </p>
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,350,* @param a1 first factor of the first term
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,351,* @param b1 second factor of the first term
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,352,* @param a2 first factor of the second term
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,353,* @param b2 second factor of the second term
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,354,* @return a<sub>1</sub>&times;b<sub>1</sub> +
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,355,* a<sub>2</sub>&times;b<sub>2</sub>
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,356,"* @see #linearCombination(double, T, double, T, double, T)"
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,357,"* @see #linearCombination(double, T, double, T, double, T, double, T)"
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,358,* @since 3.2
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,360,"public T linearCombination(double a1, T b1, double a2, T b2);"
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,363,* Compute a linear combination accurately.
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,364,* <p>
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,365,* This method computes a<sub>1</sub>&times;b<sub>1</sub> +
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,366,* a<sub>2</sub>&times;b<sub>2</sub> + a<sub>3</sub>&times;b<sub>3</sub>
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,367,* to high accuracy. It does so by using specific multiplication and
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,368,* addition algorithms to preserve accuracy and reduce cancellation effects.
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,369,* It is based on the 2005 paper <a
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,370,"* href=""http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.2.1547"">"
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,371,"* Accurate Sum and Dot Product</a> by Takeshi Ogita,"
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,372,"* Siegfried M. Rump, and Shin'ichi Oishi published in SIAM J. Sci. Comput."
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,373,* </p>
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,374,* <p>
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,375,* Note that the instance is only used as a prototype to get proper elements dimensions.
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,376,"* Its value is not used, only the parameters values are used."
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,377,* </p>
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,378,* @param a1 first factor of the first term
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,379,* @param b1 second factor of the first term
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,380,* @param a2 first factor of the second term
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,381,* @param b2 second factor of the second term
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,382,* @param a3 first factor of the third term
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,383,* @param b3 second factor of the third term
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,384,* @return a<sub>1</sub>&times;b<sub>1</sub> +
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,385,* a<sub>2</sub>&times;b<sub>2</sub> + a<sub>3</sub>&times;b<sub>3</sub>
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,386,"* @see #linearCombination(T, T, T, T)"
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,387,"* @see #linearCombination(T, T, T, T, T, T, T, T)"
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,388,* @since 3.2
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,390,"public T linearCombination(T a1, T b1, T a2, T b2, T a3, T b3);"
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,393,* Compute a linear combination accurately.
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,394,* <p>
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,395,* This method computes a<sub>1</sub>&times;b<sub>1</sub> +
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,396,* a<sub>2</sub>&times;b<sub>2</sub> + a<sub>3</sub>&times;b<sub>3</sub>
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,397,* to high accuracy. It does so by using specific multiplication and
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,398,* addition algorithms to preserve accuracy and reduce cancellation effects.
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,399,* It is based on the 2005 paper <a
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,400,"* href=""http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.2.1547"">"
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,401,"* Accurate Sum and Dot Product</a> by Takeshi Ogita,"
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,402,"* Siegfried M. Rump, and Shin'ichi Oishi published in SIAM J. Sci. Comput."
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,403,* </p>
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,404,* <p>
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,405,* Note that the instance is only used as a prototype to get proper elements dimensions.
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,406,"* Its value is not used, only the parameters values are used."
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,407,* </p>
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,408,* @param a1 first factor of the first term
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,409,* @param b1 second factor of the first term
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,410,* @param a2 first factor of the second term
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,411,* @param b2 second factor of the second term
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,412,* @param a3 first factor of the third term
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,413,* @param b3 second factor of the third term
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,414,* @return a<sub>1</sub>&times;b<sub>1</sub> +
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,415,* a<sub>2</sub>&times;b<sub>2</sub> + a<sub>3</sub>&times;b<sub>3</sub>
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,416,"* @see #linearCombination(double, T, double, T)"
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,417,"* @see #linearCombination(double, T, double, T, double, T, double, T)"
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,418,* @since 3.2
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,420,"public T linearCombination(double a1, T b1,  double a2, T b2, double a3, T b3);"
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,423,* Compute a linear combination accurately.
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,424,* <p>
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,425,* This method computes a<sub>1</sub>&times;b<sub>1</sub> +
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,426,* a<sub>2</sub>&times;b<sub>2</sub> + a<sub>3</sub>&times;b<sub>3</sub> +
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,427,* a<sub>4</sub>&times;b<sub>4</sub>
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,428,* to high accuracy. It does so by using specific multiplication and
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,429,* addition algorithms to preserve accuracy and reduce cancellation effects.
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,430,* It is based on the 2005 paper <a
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,431,"* href=""http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.2.1547"">"
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,432,"* Accurate Sum and Dot Product</a> by Takeshi Ogita,"
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,433,"* Siegfried M. Rump, and Shin'ichi Oishi published in SIAM J. Sci. Comput."
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,434,* </p>
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,435,* <p>
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,436,* Note that the instance is only used as a prototype to get proper elements dimensions.
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,437,"* Its value is not used, only the parameters values are used."
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,438,* </p>
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,439,* @param a1 first factor of the first term
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,440,* @param b1 second factor of the first term
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,441,* @param a2 first factor of the second term
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,442,* @param b2 second factor of the second term
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,443,* @param a3 first factor of the third term
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,444,* @param b3 second factor of the third term
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,445,* @param a4 first factor of the third term
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,446,* @param b4 second factor of the third term
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,447,* @return a<sub>1</sub>&times;b<sub>1</sub> +
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,448,* a<sub>2</sub>&times;b<sub>2</sub> + a<sub>3</sub>&times;b<sub>3</sub> +
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,449,* a<sub>4</sub>&times;b<sub>4</sub>
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,450,"* @see #linearCombination(T, T, T, T)"
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,451,"* @see #linearCombination(T, T, T, T, T, T)"
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,452,* @since 3.2
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,454,"public T linearCombination(T a1, T b1, T a2, T b2, T a3, T b3, T a4, T b4);"
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,457,* Compute a linear combination accurately.
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,458,* <p>
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,459,* This method computes a<sub>1</sub>&times;b<sub>1</sub> +
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,460,* a<sub>2</sub>&times;b<sub>2</sub> + a<sub>3</sub>&times;b<sub>3</sub> +
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,461,* a<sub>4</sub>&times;b<sub>4</sub>
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,462,* to high accuracy. It does so by using specific multiplication and
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,463,* addition algorithms to preserve accuracy and reduce cancellation effects.
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,464,* It is based on the 2005 paper <a
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,465,"* href=""http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.2.1547"">"
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,466,"* Accurate Sum and Dot Product</a> by Takeshi Ogita,"
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,467,"* Siegfried M. Rump, and Shin'ichi Oishi published in SIAM J. Sci. Comput."
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,468,* </p>
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,469,* <p>
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,470,* Note that the instance is only used as a prototype to get proper elements dimensions.
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,471,"* Its value is not used, only the parameters values are used."
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,472,* </p>
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,473,* @param a1 first factor of the first term
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,474,* @param b1 second factor of the first term
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,475,* @param a2 first factor of the second term
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,476,* @param b2 second factor of the second term
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,477,* @param a3 first factor of the third term
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,478,* @param b3 second factor of the third term
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,479,* @param a4 first factor of the third term
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,480,* @param b4 second factor of the third term
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,481,* @return a<sub>1</sub>&times;b<sub>1</sub> +
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,482,* a<sub>2</sub>&times;b<sub>2</sub> + a<sub>3</sub>&times;b<sub>3</sub> +
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,483,* a<sub>4</sub>&times;b<sub>4</sub>
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,484,"* @see #linearCombination(double, T, double, T)"
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,485,"* @see #linearCombination(double, T, double, T, double, T)"
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,486,* @since 3.2
True,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,src/main/java/org/apache/commons/math3/ExtendedFieldElement.java,488,"public T linearCombination(double a1, T b1, double a2, T b2, double a3, T b3, double a4, T b4);"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,21,import org.apache.commons.math3.ExtendedFieldElement;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,27,import org.apache.commons.math3.util.MathArrays;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,28,import org.apache.commons.math3.util.MathUtils;
False,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,58,"ublic class DerivativeStructure implements FieldElement<DerivativeStructure>, Serializable {"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,61,"public class DerivativeStructure implements ExtendedFieldElement<DerivativeStructure>, Serializable {"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,230,public double getReal() {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,231,return data[0];
False,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,257,** '+' operator.
False,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,258, @param a right hand side parameter of the operator
False,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,259, @return this+a
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,265,/** {@inheritDoc} */
False,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,267,** '+' operator.
False,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,268, @param a right hand side parameter of the operator
False,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,269, @return this+a
False,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,270, @exception DimensionMismatchException if number of free parameters or orders are inconsistent
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,272,/** {@inheritDoc} */
False,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,280,** '-' operator.
False,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,281, @param a right hand side parameter of the operator
False,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,282, @return this-a
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,281,/** {@inheritDoc} */
False,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,288,** '-' operator.
False,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,289, @param a right hand side parameter of the operator
False,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,290, @return this-a
False,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,291, @exception DimensionMismatchException if number of free parameters or orders are inconsistent
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,286,/** {@inheritDoc} */
False,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,306,** '&times;' operator.
False,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,307, @param a right hand side parameter of the operator
False,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,308, @return this&times;a
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,300,/** {@inheritDoc} */
False,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,318,** '&times;' operator.
False,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,319, @param a right hand side parameter of the operator
False,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,320, @return this&times;a
False,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,321, @exception DimensionMismatchException if number of free parameters or orders are inconsistent
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,309,/** {@inheritDoc} */
False,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,331,** '&divides;' operator.
False,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,332, @param a right hand side parameter of the operator
False,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,333, @return this&divides;a
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,318,/** {@inheritDoc} */
False,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,343,** '&divides;' operator.
False,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,344, @param a right hand side parameter of the operator
False,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,345, @return this&divides;a
False,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,346, @exception DimensionMismatchException if number of free parameters or orders are inconsistent
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,327,/** {@inheritDoc} */
False,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,356,** '%' operator.
False,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,357, @param a right hand side parameter of the operator
False,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,358, @return this%a
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,336,/** {@inheritDoc} */
False,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,366,** '%' operator.
False,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,367, @param a right hand side parameter of the operator
False,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,368, @return this%a
False,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,369, @exception DimensionMismatchException if number of free parameters or orders are inconsistent
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,343,/** {@inheritDoc} */
False,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,379,** unary '-' operator.
False,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,380, @return -this
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,352,/** {@inheritDoc} */
False,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,390,** absolute value.
False,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,391, @return abs(this)
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,361,/** {@inheritDoc} */
False,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,402,** Get the smallest whole number larger than instance.
False,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,403, @return ceil(this)
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,371,/** {@inheritDoc} */
False,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,411,** Get the largest whole number smaller than instance.
False,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,412, @return floor(this)
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,378,/** {@inheritDoc} */
False,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,420,"** Get the whole number that is the nearest to the instance, or the even one if x is exactly half way between two integers."
False,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,421, @return a double number r such that r is an integer r - 0.5 <= this <= r + 0.5
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,385,/** {@inheritDoc} */
False,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,429,** Get the closest long to instance value.
False,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,430, @return closest long to {@link #getValue()}
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,392,/** {@inheritDoc} */
False,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,436,** Compute the signum of the instance.
False,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,437," The signum is -1 for negative numbers, +1 for positive numbers and 0 otherwise"
False,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,438," @return -1.0, -0.0, +0.0, +1.0 or NaN depending on sign of a"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,397,/** {@inheritDoc} */
False,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,447, Returns the instance with the sign of the argument.
False,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,448, A NaN {@code sign} argument is treated as positive.
False,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,450, @param sign the sign for the returned value
False,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,451, @return the instance with the same sign as the {@code sign} argument
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,404,/** {@inheritDoc} */
False,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,475, Multiply the instance by a power of 2.
False,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,476, @param n power of 2
False,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,477, @return this &times; 2<sup>n</sup>
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,426,/** {@inheritDoc} */
False,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,488, Returns the hypotenuse of a triangle with sides {@code x} and {@code y}
False,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,489, - sqrt(<i>x</i><sup>2</sup>&nbsp;+<i>y</i><sup>2</sup>)<br/>
False,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,490, avoiding intermediate overflow or underflow.
False,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,492, <ul>
False,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,493," <li> If either argument is infinite, then the result is positive infinity.</li>"
False,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,494," <li> else, if either argument is NaN then the result is NaN.</li>"
False,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,495, </ul>
False,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,497, @param x a value
False,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,498, @param y a value
False,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,499, @return sqrt(<i>x</i><sup>2</sup>&nbsp;+<i>y</i><sup>2</sup>)
False,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,500, @exception DimensionMismatchException if number of free parameters or orders are inconsistent
False,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,502,"ublic static DerivativeStructure hypot(final DerivativeStructure x, final DerivativeStructure y)"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,435,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,436,public DerivativeStructure hypot(final DerivativeStructure y)
False,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,505,.compiler.checkCompatibility(y.compiler);
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,439,compiler.checkCompatibility(y.compiler);
False,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,507,f (Double.isInfinite(x.data[0]) || Double.isInfinite(y.data[0])) {
False,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,508,"eturn new DerivativeStructure(x.compiler.getFreeParameters(),"
False,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,509,".compiler.getFreeParameters(),"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,441,if (Double.isInfinite(data[0]) || Double.isInfinite(y.data[0])) {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,442,"return new DerivativeStructure(compiler.getFreeParameters(),"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,443,"compiler.getFreeParameters(),"
False,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,511, else if (Double.isNaN(x.data[0]) || Double.isNaN(y.data[0])) {
False,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,512,"eturn new DerivativeStructure(x.compiler.getFreeParameters(),"
False,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,513,".compiler.getFreeParameters(),"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,445,} else if (Double.isNaN(data[0]) || Double.isNaN(y.data[0])) {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,446,"return new DerivativeStructure(compiler.getFreeParameters(),"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,447,"compiler.getFreeParameters(),"
False,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,517,inal int expX = x.getExponent();
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,451,final int expX = getExponent();
False,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,521,eturn x.abs();
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,455,return abs();
False,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,531,inal DerivativeStructure scaledX = x.scalb(-middleExp);
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,465,final DerivativeStructure scaledX = scalb(-middleExp);
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,481,* Returns the hypotenuse of a triangle with sides {@code x} and {@code y}
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,482,* - sqrt(<i>x</i><sup>2</sup>&nbsp;+<i>y</i><sup>2</sup>)<br/>
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,483,* avoiding intermediate overflow or underflow.
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,485,* <ul>
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,486,"* <li> If either argument is infinite, then the result is positive infinity.</li>"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,487,"* <li> else, if either argument is NaN then the result is NaN.</li>"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,488,* </ul>
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,490,* @param x a value
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,491,* @param y a value
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,492,* @return sqrt(<i>x</i><sup>2</sup>&nbsp;+<i>y</i><sup>2</sup>)
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,493,* @exception DimensionMismatchException if number of free parameters or orders are inconsistent
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,495,"public static DerivativeStructure hypot(final DerivativeStructure x, final DerivativeStructure y)"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,496,throws DimensionMismatchException {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,497,return x.hypot(y);
False,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,570,** Square root.
False,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,571, @return square root of the instance
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,524,/** {@inheritDoc} */
False,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,577,** Cubic root.
False,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,578, @return cubic root of the instance
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,529,/** {@inheritDoc} */
False,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,584,** N<sup>th</sup> root.
False,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,585, @param n order of the root
False,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,586, @return n<sup>th</sup> root of the instance
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,534,/** {@inheritDoc} */
False,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,616,** Power operation.
False,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,617, @param p power to apply
False,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,618, @return this<sup>p</sup>
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,563,/** {@inheritDoc} */
False,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,626,** Integer power operation.
False,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,627, @param n power to apply
False,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,628, @return this<sup>n</sup>
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,570,/** {@inheritDoc} */
False,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,636,** Power operation.
False,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,637, @param e exponent
False,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,638, @return this<sup>e</sup>
False,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,639, @exception DimensionMismatchException if number of free parameters or orders are inconsistent
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,577,/** {@inheritDoc} */
False,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,649,** Exponential.
False,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,650, @return exponential of the instance
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,586,/** {@inheritDoc} */
False,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,658,** Exponential minus 1.
False,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,659, @return exponential minus one of the instance
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,593,/** {@inheritDoc} */
False,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,667,** Natural logarithm.
False,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,668, @return logarithm of the instance
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,600,/** {@inheritDoc} */
False,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,676,** Shifted natural logarithm.
False,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,677, @return logarithm of one plus the instance
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,607,/** {@inheritDoc} */
False,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,685,** Base 10 logarithm.
False,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,686, @return base 10 logarithm of the instance
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,614,/** {@inheritDoc} */
False,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,694,** Cosine operation.
False,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,695, @return cos(this)
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,621,/** {@inheritDoc} */
False,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,703,** Sine operation.
False,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,704, @return sin(this)
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,628,/** {@inheritDoc} */
False,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,712,** Tangent operation.
False,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,713, @return tan(this)
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,635,/** {@inheritDoc} */
False,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,721,** Arc cosine operation.
False,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,722, @return acos(this)
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,642,/** {@inheritDoc} */
False,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,730,** Arc sine operation.
False,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,731, @return asin(this)
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,649,/** {@inheritDoc} */
False,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,739,** Arc tangent operation.
False,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,740, @return atan(this)
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,656,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,663,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,664,public DerivativeStructure atan2(final DerivativeStructure x)
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,665,throws DimensionMismatchException {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,666,compiler.checkCompatibility(x.compiler);
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,667,final DerivativeStructure result = new DerivativeStructure(compiler);
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,668,"compiler.atan2(data, 0, x.data, 0, result.data, 0);"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,669,return result;
False,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,756,.compiler.checkCompatibility(x.compiler);
False,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,757,inal DerivativeStructure result = new DerivativeStructure(y.compiler);
False,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,758,".compiler.atan2(y.data, 0, x.data, 0, result.data, 0);"
False,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,759,eturn result;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,680,return y.atan2(x);
False,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,762,** Hyperbolic cosine operation.
False,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,763, @return cosh(this)
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,683,/** {@inheritDoc} */
False,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,771,** Hyperbolic sine operation.
False,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,772, @return sinh(this)
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,690,/** {@inheritDoc} */
False,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,780,** Hyperbolic tangent operation.
False,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,781, @return tanh(this)
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,697,/** {@inheritDoc} */
False,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,789,** Inverse hyperbolic cosine operation.
False,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,790, @return acosh(this)
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,704,/** {@inheritDoc} */
False,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,798,** Inverse hyperbolic sine operation.
False,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,799, @return asin(this)
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,711,/** {@inheritDoc} */
False,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,807,** Inverse hyperbolic  tangent operation.
False,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,808, @return atanh(this)
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,718,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,755,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,756,"public DerivativeStructure linearCombination(final DerivativeStructure[] a, final DerivativeStructure[] b)"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,757,throws DimensionMismatchException {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,759,"// compute an accurate value, taking care of cancellations"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,760,final double[] aDouble = new double[a.length];
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,761,for (int i = 0; i < a.length; ++i) {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,762,aDouble[i] = a[i].getValue();
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,764,final double[] bDouble = new double[b.length];
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,765,for (int i = 0; i < b.length; ++i) {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,766,bDouble[i] = b[i].getValue();
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,768,"final double accurateValue = MathArrays.linearCombination(aDouble, bDouble);"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,770,"// compute a simple value, with all partial derivatives"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,771,DerivativeStructure simpleValue = a[0].getField().getZero();
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,772,for (int i = 0; i < a.length; ++i) {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,773,simpleValue = simpleValue.add(a[i].multiply(b[i]));
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,776,// create a result with accurate value and all derivatives (not necessarily as accurate as the value)
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,777,final double[] data = simpleValue.getAllDerivatives();
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,778,data[0] = accurateValue;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,779,"return new DerivativeStructure(simpleValue.getFreeParameters(), simpleValue.getOrder(), data);"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,783,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,784,"public DerivativeStructure linearCombination(final double[] a, final DerivativeStructure[] b)"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,785,throws DimensionMismatchException {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,787,"// compute an accurate value, taking care of cancellations"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,788,final double[] bDouble = new double[b.length];
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,789,for (int i = 0; i < b.length; ++i) {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,790,bDouble[i] = b[i].getValue();
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,792,"final double accurateValue = MathArrays.linearCombination(a, bDouble);"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,794,"// compute a simple value, with all partial derivatives"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,795,DerivativeStructure simpleValue = b[0].getField().getZero();
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,796,for (int i = 0; i < a.length; ++i) {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,797,simpleValue = simpleValue.add(b[i].multiply(a[i]));
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,800,// create a result with accurate value and all derivatives (not necessarily as accurate as the value)
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,801,final double[] data = simpleValue.getAllDerivatives();
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,802,data[0] = accurateValue;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,803,"return new DerivativeStructure(simpleValue.getFreeParameters(), simpleValue.getOrder(), data);"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,807,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,808,"public DerivativeStructure linearCombination(final DerivativeStructure a1, final DerivativeStructure b1,"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,809,"final DerivativeStructure a2, final DerivativeStructure b2) {"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,811,"// compute an accurate value, taking care of cancellations"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,812,"final double accurateValue = MathArrays.linearCombination(a1.getValue(), b1.getValue(),"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,813,"a2.getValue(), b2.getValue());"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,815,"// compute a simple value, with all partial derivatives"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,816,final DerivativeStructure simpleValue = a1.multiply(b1).add(a2.multiply(b2));
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,818,// create a result with accurate value and all derivatives (not necessarily as accurate as the value)
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,819,final double[] data = simpleValue.getAllDerivatives();
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,820,data[0] = accurateValue;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,821,"return new DerivativeStructure(getFreeParameters(), getOrder(), data);"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,825,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,826,"public DerivativeStructure linearCombination(final double a1, final DerivativeStructure b1,"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,827,"final double a2, final DerivativeStructure b2) {"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,829,"// compute an accurate value, taking care of cancellations"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,830,"final double accurateValue = MathArrays.linearCombination(a1, b1.getValue(),"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,831,"a2, b2.getValue());"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,833,"// compute a simple value, with all partial derivatives"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,834,final DerivativeStructure simpleValue = b1.multiply(a1).add(b2.multiply(a2));
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,836,// create a result with accurate value and all derivatives (not necessarily as accurate as the value)
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,837,final double[] data = simpleValue.getAllDerivatives();
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,838,data[0] = accurateValue;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,839,"return new DerivativeStructure(getFreeParameters(), getOrder(), data);"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,843,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,844,"public DerivativeStructure linearCombination(final DerivativeStructure a1, final DerivativeStructure b1,"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,845,"final DerivativeStructure a2, final DerivativeStructure b2,"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,846,"final DerivativeStructure a3, final DerivativeStructure b3) {"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,848,"// compute an accurate value, taking care of cancellations"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,849,"final double accurateValue = MathArrays.linearCombination(a1.getValue(), b1.getValue(),"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,850,"a2.getValue(), b2.getValue(),"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,851,"a3.getValue(), b3.getValue());"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,853,"// compute a simple value, with all partial derivatives"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,854,final DerivativeStructure simpleValue = a1.multiply(b1).add(a2.multiply(b2)).add(a3.multiply(b3));
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,856,// create a result with accurate value and all derivatives (not necessarily as accurate as the value)
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,857,final double[] data = simpleValue.getAllDerivatives();
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,858,data[0] = accurateValue;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,859,"return new DerivativeStructure(getFreeParameters(), getOrder(), data);"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,863,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,864,"public DerivativeStructure linearCombination(final double a1, final DerivativeStructure b1,"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,865,"final double a2, final DerivativeStructure b2,"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,866,"final double a3, final DerivativeStructure b3) {"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,868,"// compute an accurate value, taking care of cancellations"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,869,"final double accurateValue = MathArrays.linearCombination(a1, b1.getValue(),"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,870,"a2, b2.getValue(),"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,871,"a3, b3.getValue());"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,873,"// compute a simple value, with all partial derivatives"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,874,final DerivativeStructure simpleValue = b1.multiply(a1).add(b2.multiply(a2)).add(b3.multiply(a3));
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,876,// create a result with accurate value and all derivatives (not necessarily as accurate as the value)
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,877,final double[] data = simpleValue.getAllDerivatives();
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,878,data[0] = accurateValue;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,879,"return new DerivativeStructure(getFreeParameters(), getOrder(), data);"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,883,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,884,"public DerivativeStructure linearCombination(final DerivativeStructure a1, final DerivativeStructure b1,"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,885,"final DerivativeStructure a2, final DerivativeStructure b2,"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,886,"final DerivativeStructure a3, final DerivativeStructure b3,"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,887,"final DerivativeStructure a4, final DerivativeStructure b4) {"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,889,"// compute an accurate value, taking care of cancellations"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,890,"final double accurateValue = MathArrays.linearCombination(a1.getValue(), b1.getValue(),"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,891,"a2.getValue(), b2.getValue(),"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,892,"a3.getValue(), b3.getValue(),"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,893,"a4.getValue(), b4.getValue());"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,895,"// compute a simple value, with all partial derivatives"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,896,final DerivativeStructure simpleValue = a1.multiply(b1).add(a2.multiply(b2)).add(a3.multiply(b3)).add(a4.multiply(b4));
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,898,// create a result with accurate value and all derivatives (not necessarily as accurate as the value)
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,899,final double[] data = simpleValue.getAllDerivatives();
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,900,data[0] = accurateValue;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,901,"return new DerivativeStructure(getFreeParameters(), getOrder(), data);"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,905,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,906,"public DerivativeStructure linearCombination(final double a1, final DerivativeStructure b1,"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,907,"final double a2, final DerivativeStructure b2,"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,908,"final double a3, final DerivativeStructure b3,"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,909,"final double a4, final DerivativeStructure b4) {"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,911,"// compute an accurate value, taking care of cancellations"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,912,"final double accurateValue = MathArrays.linearCombination(a1, b1.getValue(),"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,913,"a2, b2.getValue(),"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,914,"a3, b3.getValue(),"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,915,"a4, b4.getValue());"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,917,"// compute a simple value, with all partial derivatives"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,918,final DerivativeStructure simpleValue = b1.multiply(a1).add(b2.multiply(a2)).add(b3.multiply(a3)).add(b4.multiply(a4));
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,920,// create a result with accurate value and all derivatives (not necessarily as accurate as the value)
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,921,final double[] data = simpleValue.getAllDerivatives();
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,922,data[0] = accurateValue;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,923,"return new DerivativeStructure(getFreeParameters(), getOrder(), data);"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,928,* Test for the equality of two derivative structures.
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,929,* <p>
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,930,* Derivative structures are considered equal if they have the same number
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,931,"* of free parameters, the same derivation order, and the same derivatives."
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,932,* </p>
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,933,* @param other Object to test for equality to this
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,934,* @return true if two derivative structures are equal
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,935,* @since 3.2
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,937,@Override
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,938,public boolean equals(Object other) {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,940,if (this == other) {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,941,return true;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,944,if (other instanceof DerivativeStructure) {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,945,final DerivativeStructure rhs = (DerivativeStructure)other;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,946,return (getFreeParameters() == rhs.getFreeParameters()) &&
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,947,(getOrder() == rhs.getOrder()) &&
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,948,"MathArrays.equals(data, rhs.data);"
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,951,return false;
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,956,* Get a hashCode for the derivative structure.
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,957,* @return a hash code value for this object
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,958,* @since 3.2
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,960,@Override
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,961,public int hashCode() {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,962,return 227 + 229 * getFreeParameters() + 233 * getOrder() + 239 * MathUtils.hash(data);
False,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,22,mport org.apache.commons.math3.FieldElement;
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,22,import org.apache.commons.math3.ExtendedFieldElement;
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,23,import org.apache.commons.math3.exception.DimensionMismatchException;
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,24,import org.apache.commons.math3.util.FastMath;
False,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,96,ublic class Dfp implements FieldElement<Dfp> {
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,98,public class Dfp implements ExtendedFieldElement<Dfp> {
False,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,1181,ublic int log10()  {
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,1183,public int intLog10()  {
False,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2432,nt exponent = (int)(y.log10() * 3.32);
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2434,int exponent = (int)(y.intLog10() * 3.32);
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2508,/** {@inheritDoc}
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2509,* @since 3.2
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2511,public double getReal() {
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2512,return toDouble();
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2515,/** {@inheritDoc}
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2516,* @since 3.2
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2518,public Dfp add(final double a) {
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2519,return add(newInstance(a));
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2522,/** {@inheritDoc}
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2523,* @since 3.2
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2525,public Dfp subtract(final double a) {
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2526,return subtract(newInstance(a));
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2529,/** {@inheritDoc}
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2530,* @since 3.2
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2532,public Dfp multiply(final double a) {
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2533,return multiply(newInstance(a));
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2536,/** {@inheritDoc}
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2537,* @since 3.2
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2539,public Dfp divide(final double a) {
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2540,return divide(newInstance(a));
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2543,/** {@inheritDoc}
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2544,* @since 3.2
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2546,public Dfp remainder(final double a) {
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2547,return remainder(newInstance(a));
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2550,/** {@inheritDoc}
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2551,* @since 3.2
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2553,public long round() {
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2554,return FastMath.round(toDouble());
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2557,/** {@inheritDoc}
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2558,* @since 3.2
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2560,public Dfp signum() {
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2561,if (isNaN() || isZero()) {
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2562,return this;
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2563,} else {
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2564,return newInstance(sign > 0 ? +1 : -1);
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2568,/** {@inheritDoc}
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2569,* @since 3.2
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2571,public Dfp copySign(final double sign) {
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2572,long s = Double.doubleToLongBits(sign);
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2573,if ((sign >= 0 && s >= 0) || (sign < 0 && s < 0)) { // Sign is currently OK
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2574,return this;
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2576,return negate(); // flip sign
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2579,/** {@inheritDoc}
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2580,* @since 3.2
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2582,public Dfp scalb(final int n) {
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2583,"return multiply(DfpMath.pow(getTwo(), n));"
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2586,/** {@inheritDoc}
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2587,* @since 3.2
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2589,public Dfp hypot(final Dfp y) {
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2590,return multiply(this).add(y.multiply(y)).sqrt();
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2593,/** {@inheritDoc}
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2594,* @since 3.2
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2596,public Dfp cbrt() {
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2597,return rootN(3);
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2600,/** {@inheritDoc}
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2601,* @since 3.2
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2603,public Dfp rootN(final int n) {
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2604,"return DfpMath.pow(this, getOne().divide(n));"
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2607,/** {@inheritDoc}
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2608,* @since 3.2
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2610,public Dfp pow(final double p) {
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2611,"return DfpMath.pow(this, newInstance(p));"
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2614,/** {@inheritDoc}
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2615,* @since 3.2
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2617,public Dfp pow(final int n) {
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2618,"return DfpMath.pow(this, n);"
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2621,/** {@inheritDoc}
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2622,* @since 3.2
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2624,public Dfp pow(final Dfp e) {
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2625,"return DfpMath.pow(this, e);"
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2628,/** {@inheritDoc}
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2629,* @since 3.2
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2631,public Dfp exp() {
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2632,return DfpMath.exp(this);
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2635,/** {@inheritDoc}
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2636,* @since 3.2
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2638,public Dfp expm1() {
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2639,return DfpMath.exp(this).subtract(getOne());
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2642,/** {@inheritDoc}
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2643,* @since 3.2
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2645,public Dfp log() {
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2646,return DfpMath.log(this);
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2649,/** {@inheritDoc}
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2650,* @since 3.2
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2652,public Dfp log1p() {
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2653,return DfpMath.log(this.add(getOne()));
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2656,/** {@inheritDoc}
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2657,* @since 3.2
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2659,public Dfp log10() {
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2660,return DfpMath.log(this).divide(DfpMath.log(newInstance(10)));
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2663,/** {@inheritDoc}
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2664,* @since 3.2
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2666,public Dfp cos() {
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2667,return DfpMath.cos(this);
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2670,/** {@inheritDoc}
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2671,* @since 3.2
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2673,public Dfp sin() {
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2674,return DfpMath.sin(this);
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2677,/** {@inheritDoc}
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2678,* @since 3.2
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2680,public Dfp tan() {
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2681,return DfpMath.tan(this);
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2684,/** {@inheritDoc}
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2685,* @since 3.2
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2687,public Dfp acos() {
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2688,return DfpMath.acos(this);
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2691,/** {@inheritDoc}
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2692,* @since 3.2
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2694,public Dfp asin() {
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2695,return DfpMath.asin(this);
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2698,/** {@inheritDoc}
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2699,* @since 3.2
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2701,public Dfp atan() {
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2702,return DfpMath.atan(this);
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2705,/** {@inheritDoc}
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2706,* @since 3.2
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2708,public Dfp atan2(final Dfp x)
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2709,throws DimensionMismatchException {
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2711,// compute r = sqrt(x^2+y^2)
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2712,final Dfp r = x.multiply(x).add(multiply(this)).sqrt();
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2714,if (x.sign >= 0) {
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2716,"// compute atan2(y, x) = 2 atan(y / (r + x))"
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2717,return getTwo().multiply(divide(r.add(x)).atan());
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2719,} else {
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2721,"// compute atan2(y, x) = +/- pi - 2 atan(y / (r - x))"
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2722,final Dfp tmp = getTwo().multiply(divide(r.subtract(x)).atan());
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2723,final Dfp pmPi = newInstance((tmp.sign <= 0) ? -FastMath.PI : FastMath.PI);
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2724,return pmPi.subtract(tmp);
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2730,/** {@inheritDoc}
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2731,* @since 3.2
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2733,public Dfp cosh() {
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2734,return DfpMath.exp(this).add(DfpMath.exp(negate())).divide(2);
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2737,/** {@inheritDoc}
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2738,* @since 3.2
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2740,public Dfp sinh() {
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2741,return DfpMath.exp(this).subtract(DfpMath.exp(negate())).divide(2);
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2744,/** {@inheritDoc}
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2745,* @since 3.2
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2747,public Dfp tanh() {
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2748,final Dfp ePlus  = DfpMath.exp(this);
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2749,final Dfp eMinus = DfpMath.exp(negate());
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2750,return ePlus.add(eMinus).divide(ePlus.subtract(eMinus));
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2753,/** {@inheritDoc}
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2754,* @since 3.2
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2756,public Dfp acosh() {
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2757,return multiply(this).subtract(getOne()).sqrt().add(this).log();
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2760,/** {@inheritDoc}
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2761,* @since 3.2
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2763,public Dfp asinh() {
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2764,return multiply(this).add(getOne()).sqrt().add(this).log();
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2767,/** {@inheritDoc}
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2768,* @since 3.2
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2770,public Dfp atanh() {
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2771,return getOne().add(this).divide(getOne().subtract(this)).log().divide(2);
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2774,/** {@inheritDoc}
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2775,* @since 3.2
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2777,"public Dfp linearCombination(final Dfp[] a, final Dfp[] b)"
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2778,throws DimensionMismatchException {
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2779,if (a.length != b.length) {
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2780,"throw new DimensionMismatchException(a.length, b.length);"
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2782,Dfp r = getZero();
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2783,for (int i = 0; i < a.length; ++i) {
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2784,r = r.add(a[i].multiply(b[i]));
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2786,return r;
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2789,/** {@inheritDoc}
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2790,* @since 3.2
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2792,"public Dfp linearCombination(final double[] a, final Dfp[] b)"
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2793,throws DimensionMismatchException {
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2794,if (a.length != b.length) {
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2795,"throw new DimensionMismatchException(a.length, b.length);"
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2797,Dfp r = getZero();
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2798,for (int i = 0; i < a.length; ++i) {
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2799,r = r.add(b[i].multiply(a[i]));
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2801,return r;
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2804,/** {@inheritDoc}
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2805,* @since 3.2
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2807,"public Dfp linearCombination(final Dfp a1, final Dfp b1, final Dfp a2, final Dfp b2) {"
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2808,return a1.multiply(b1).add(a2.multiply(b2));
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2811,/** {@inheritDoc}
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2812,* @since 3.2
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2814,"public Dfp linearCombination(final double a1, final Dfp b1, final double a2, final Dfp b2) {"
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2815,return b1.multiply(a1).add(b2.multiply(a2));
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2818,/** {@inheritDoc}
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2819,* @since 3.2
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2821,"public Dfp linearCombination(final Dfp a1, final Dfp b1,"
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2822,"final Dfp a2, final Dfp b2,"
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2823,"final Dfp a3, final Dfp b3) {"
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2824,return a1.multiply(b1).add(a2.multiply(b2)).add(a3.multiply(b3));
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2827,/** {@inheritDoc}
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2828,* @since 3.2
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2830,"public Dfp linearCombination(final double a1, final Dfp b1,"
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2831,"final double a2, final Dfp b2,"
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2832,"final double a3, final Dfp b3) {"
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2833,return b1.multiply(a1).add(b2.multiply(a2)).add(b3.multiply(a3));
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2836,/** {@inheritDoc}
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2837,* @since 3.2
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2839,"public Dfp linearCombination(final Dfp a1, final Dfp b1, final Dfp a2, final Dfp b2,"
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2840,"final Dfp a3, final Dfp b3, final Dfp a4, final Dfp b4) {"
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2841,return a1.multiply(b1).add(a2.multiply(b2)).add(a3.multiply(b3)).add(a4.multiply(b4));
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2844,/** {@inheritDoc}
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2845,* @since 3.2
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2847,"public Dfp linearCombination(final double a1, final Dfp b1, final double a2, final Dfp b2,"
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2848,"final double a3, final Dfp b3, final double a4, final Dfp b4) {"
True,src/main/java/org/apache/commons/math3/dfp/Dfp.java,src/main/java/org/apache/commons/math3/dfp/Dfp.java,2849,return b1.multiply(a1).add(b2.multiply(a2)).add(b3.multiply(a3)).add(b4.multiply(a4));
False,src/main/java/org/apache/commons/math3/dfp/DfpDec.java,src/main/java/org/apache/commons/math3/dfp/DfpDec.java,323,nc = power10(log10() - getDecimalDigits() + 1);
True,src/main/java/org/apache/commons/math3/dfp/DfpDec.java,src/main/java/org/apache/commons/math3/dfp/DfpDec.java,323,inc = power10(intLog10() - getDecimalDigits() + 1);
False,src/main/java/org/apache/commons/math3/dfp/DfpDec.java,src/main/java/org/apache/commons/math3/dfp/DfpDec.java,336,nc = power10(log10());
True,src/main/java/org/apache/commons/math3/dfp/DfpDec.java,src/main/java/org/apache/commons/math3/dfp/DfpDec.java,336,inc = power10(intLog10());
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,22,import org.apache.commons.math3.ExtendedFieldElement;
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,23,mport org.apache.commons.math3.analysis.differentiation.DerivativeStructure;
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,31, This class is a re-implementation of {@link Rotation} using {@link DerivativeStructure}.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,31,* This class is a re-implementation of {@link Rotation} using {@link ExtendedFieldElement}.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,34,* @param <T> the type of the field elements
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,40,ublic class RotationDS implements Serializable {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,41,public class FieldRotation<T extends ExtendedFieldElement<T>> implements Serializable {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,43,rivate static final long serialVersionUID = 20130215l;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,44,private static final long serialVersionUID = 20130224l;
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,46,rivate final DerivativeStructure q0;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,47,private final T q0;
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,49,rivate final DerivativeStructure q1;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,50,private final T q1;
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,52,rivate final DerivativeStructure q2;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,53,private final T q2;
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,55,rivate final DerivativeStructure q3;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,56,private final T q3;
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,75,"ublic RotationDS(final DerivativeStructure q0, final DerivativeStructure q1,"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,76,"inal DerivativeStructure q2, final DerivativeStructure q3,"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,77,inal boolean needsNormalization) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,76,"public FieldRotation(final T q0, final T q1, final T q2, final T q3, final boolean needsNormalization) {"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,81,inal DerivativeStructure inv =
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,80,final T inv =
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,101," {@link #applyTo(Vector3DDS) apply} the instance to +i, we will get"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,100,"* {@link #applyTo(FieldVector3D) apply} the instance to +i, we will get"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,117,"ublic RotationDS(final Vector3DDS axis, final DerivativeStructure angle)"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,116,"public FieldRotation(final FieldVector3D<T> axis, final T angle)"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,120,inal DerivativeStructure norm = axis.getNorm();
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,121,f (norm.getValue() == 0) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,119,final T norm = axis.getNorm();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,120,if (norm.getReal() == 0) {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,125,inal DerivativeStructure halfAngle = angle.multiply(-0.5);
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,126,inal DerivativeStructure coeff = halfAngle.sin().divide(norm);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,124,final T halfAngle = angle.multiply(-0.5);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,125,final T coeff = halfAngle.sin().divide(norm);
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,165,"ublic RotationDS(final DerivativeStructure[][] m, final double threshold)"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,164,"public FieldRotation(final T[][] m, final double threshold)"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,177,"inal DerivativeStructure[][] ort = orthogonalizeMatrix(m, threshold);"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,176,"final T[][] ort = orthogonalizeMatrix(m, threshold);"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,180,inal DerivativeStructure d0 = ort[1][1].multiply(ort[2][2]).subtract(ort[2][1].multiply(ort[1][2]));
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,181,inal DerivativeStructure d1 = ort[0][1].multiply(ort[2][2]).subtract(ort[2][1].multiply(ort[0][2]));
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,182,inal DerivativeStructure d2 = ort[0][1].multiply(ort[1][2]).subtract(ort[1][1].multiply(ort[0][2]));
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,183,inal DerivativeStructure det =
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,179,final T d0 = ort[1][1].multiply(ort[2][2]).subtract(ort[2][1].multiply(ort[1][2]));
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,180,final T d1 = ort[0][1].multiply(ort[2][2]).subtract(ort[2][1].multiply(ort[0][2]));
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,181,final T d2 = ort[0][1].multiply(ort[1][2]).subtract(ort[1][1].multiply(ort[0][2]));
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,182,final T det =
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,185,f (det.getValue() < 0.0) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,184,if (det.getReal() < 0.0) {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,191,inal DerivativeStructure[] quat = mat2quat(ort);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,190,final T[] quat = mat2quat(ort);
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,218,"ublic RotationDS(Vector3DDS u1, Vector3DDS u2, Vector3DDS v1, Vector3DDS v2)"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,217,"public FieldRotation(FieldVector3D<T> u1, FieldVector3D<T> u2, FieldVector3D<T> v1, FieldVector3D<T> v2)"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,223,inal Vector3DDS u3 = u1.crossProduct(u2).normalize();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,222,final FieldVector3D<T> u3 = u1.crossProduct(u2).normalize();
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,229,inal Vector3DDS v3 = v1.crossProduct(v2).normalize();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,228,final FieldVector3D<T> v3 = v1.crossProduct(v2).normalize();
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,234,inal DerivativeStructure[][] m = new DerivativeStructure[][] {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,236,"athArrays.linearCombination(u1.getX(), v1.getX(), u2.getX(), v2.getX(), u3.getX(), v3.getX()),"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,237,"athArrays.linearCombination(u1.getY(), v1.getX(), u2.getY(), v2.getX(), u3.getY(), v3.getX()),"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,238,"athArrays.linearCombination(u1.getZ(), v1.getX(), u2.getZ(), v2.getX(), u3.getZ(), v3.getX())"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,241,"athArrays.linearCombination(u1.getX(), v1.getY(), u2.getX(), v2.getY(), u3.getX(), v3.getY()),"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,242,"athArrays.linearCombination(u1.getY(), v1.getY(), u2.getY(), v2.getY(), u3.getY(), v3.getY()),"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,243,"athArrays.linearCombination(u1.getZ(), v1.getY(), u2.getZ(), v2.getY(), u3.getZ(), v3.getY())"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,246,"athArrays.linearCombination(u1.getX(), v1.getZ(), u2.getX(), v2.getZ(), u3.getX(), v3.getZ()),"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,247,"athArrays.linearCombination(u1.getY(), v1.getZ(), u2.getY(), v2.getZ(), u3.getY(), v3.getZ()),"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,248,"athArrays.linearCombination(u1.getZ(), v1.getZ(), u2.getZ(), v2.getZ(), u3.getZ(), v3.getZ())"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,252,erivativeStructure[] quat = mat2quat(m);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,233,"final T[][] array = MathArrays.buildArray(u1.getX().getField(), 3, 3);"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,234,array[0][0] = u1.getX().multiply(v1.getX()).add(u2.getX().multiply(v2.getX())).add(u3.getX().multiply(v3.getX()));
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,235,array[0][1] = u1.getY().multiply(v1.getX()).add(u2.getY().multiply(v2.getX())).add(u3.getY().multiply(v3.getX()));
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,236,array[0][2] = u1.getZ().multiply(v1.getX()).add(u2.getZ().multiply(v2.getX())).add(u3.getZ().multiply(v3.getX()));
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,237,array[1][0] = u1.getX().multiply(v1.getY()).add(u2.getX().multiply(v2.getY())).add(u3.getX().multiply(v3.getY()));
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,238,array[1][1] = u1.getY().multiply(v1.getY()).add(u2.getY().multiply(v2.getY())).add(u3.getY().multiply(v3.getY()));
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,239,array[1][2] = u1.getZ().multiply(v1.getY()).add(u2.getZ().multiply(v2.getY())).add(u3.getZ().multiply(v3.getY()));
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,240,array[2][0] = u1.getX().multiply(v1.getZ()).add(u2.getX().multiply(v2.getZ())).add(u3.getX().multiply(v3.getZ()));
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,241,array[2][1] = u1.getY().multiply(v1.getZ()).add(u2.getY().multiply(v2.getZ())).add(u3.getY().multiply(v3.getZ()));
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,242,array[2][2] = u1.getZ().multiply(v1.getZ()).add(u2.getZ().multiply(v2.getZ())).add(u3.getZ().multiply(v3.getZ()));
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,244,T[] quat = mat2quat(array);
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,273,"ublic RotationDS(final Vector3DDS u, final Vector3DDS v) throws MathArithmeticException {"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,265,"public FieldRotation(final FieldVector3D<T> u, final FieldVector3D<T> v) throws MathArithmeticException {"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,275,inal DerivativeStructure normProduct = u.getNorm().multiply(v.getNorm());
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,276,f (normProduct.getValue() == 0) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,267,final T normProduct = u.getNorm().multiply(v.getNorm());
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,268,if (normProduct.getReal() == 0) {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,280,inal DerivativeStructure dot = u.dotProduct(v);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,272,final T dot = u.dotProduct(v);
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,282,f (dot.getValue() < ((2.0e-15 - 1.0) * normProduct.getValue())) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,274,if (dot.getReal() < ((2.0e-15 - 1.0) * normProduct.getReal())) {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,285,inal Vector3DDS w = u.orthogonal();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,277,final FieldVector3D<T> w = u.orthogonal();
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,294,inal DerivativeStructure coeff = q0.multiply(normProduct).multiply(2.0).reciprocal();
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,295,inal Vector3DDS q = v.crossProduct(u);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,286,final T coeff = q0.multiply(normProduct).multiply(2.0).reciprocal();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,287,final FieldVector3D<T> q = v.crossProduct(u);
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,322,"ublic RotationDS(final RotationOrder order, final DerivativeStructure alpha1,"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,323,"inal DerivativeStructure alpha2, final DerivativeStructure alpha3) {"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,324,inal int p = alpha1.getFreeParameters();
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,325,inal int o  = alpha1.getOrder();
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,326,inal RotationDS r1 =
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,327,"ew RotationDS(new Vector3DDS(new DerivativeStructure(p, o, order.getA1().getX()),"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,328,"ew DerivativeStructure(p, o, order.getA1().getY()),"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,329,"ew DerivativeStructure(p, o, order.getA1().getZ())),"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,330,lpha1);
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,331,inal RotationDS r2 =
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,332,"ew RotationDS(new Vector3DDS(new DerivativeStructure(p, o, order.getA2().getX()),"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,333,"ew DerivativeStructure(p, o, order.getA2().getY()),"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,334,"ew DerivativeStructure(p, o, order.getA2().getZ())),"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,335,lpha2);
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,336,inal RotationDS r3 =
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,337,"ew RotationDS(new Vector3DDS(new DerivativeStructure(p, o, order.getA3().getX()),"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,338,"ew DerivativeStructure(p, o, order.getA3().getY()),"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,339,"ew DerivativeStructure(p, o, order.getA3().getZ())),"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,340,lpha3);
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,341,inal RotationDS composed = r1.applyTo(r2.applyTo(r3));
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,314,"public FieldRotation(final RotationOrder order, final T alpha1, final T alpha2, final T alpha3) {"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,315,final T one = alpha1.getField().getOne();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,316,"final FieldRotation<T> r1 = new FieldRotation<T>(new FieldVector3D<T>(one, order.getA1()), alpha1);"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,317,"final FieldRotation<T> r2 = new FieldRotation<T>(new FieldVector3D<T>(one, order.getA2()), alpha2);"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,318,"final FieldRotation<T> r3 = new FieldRotation<T>(new FieldVector3D<T>(one, order.getA3()), alpha3);"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,319,final FieldRotation<T> composed = r1.applyTo(r2.applyTo(r3));
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,352,rivate static DerivativeStructure[] mat2quat(final DerivativeStructure[][] ort) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,330,private T[] mat2quat(final T[][] ort) {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,354,inal DerivativeStructure[] quat = new DerivativeStructure[4];
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,332,"final T[] quat = MathArrays.buildArray(ort[0][0].getField(), 4);"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,367,erivativeStructure s = ort[0][0].add(ort[1][1]).add(ort[2][2]);
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,368,f (s.getValue() > -0.19) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,345,T s = ort[0][0].add(ort[1][1]).add(ort[2][2]);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,346,if (s.getReal() > -0.19) {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,371,erivativeStructure inv = quat[0].reciprocal().multiply(0.25);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,349,T inv = quat[0].reciprocal().multiply(0.25);
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,377,f (s.getValue() > -0.19) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,355,if (s.getReal() > -0.19) {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,380,erivativeStructure inv = quat[1].reciprocal().multiply(0.25);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,358,T inv = quat[1].reciprocal().multiply(0.25);
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,386,f (s.getValue() > -0.19) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,364,if (s.getReal() > -0.19) {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,389,erivativeStructure inv = quat[2].reciprocal().multiply(0.25);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,367,T inv = quat[2].reciprocal().multiply(0.25);
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,397,erivativeStructure inv = quat[3].reciprocal().multiply(0.25);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,375,T inv = quat[3].reciprocal().multiply(0.25);
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,416,ublic RotationDS revert() {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,417,"eturn new RotationDS(q0.negate(), q1, q2, q3, false);"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,394,public FieldRotation<T> revert() {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,395,"return new FieldRotation<T>(q0.negate(), q1, q2, q3, false);"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,423,ublic DerivativeStructure getQ0() {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,401,public T getQ0() {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,430,ublic DerivativeStructure getQ1() {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,408,public T getQ1() {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,437,ublic DerivativeStructure getQ2() {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,415,public T getQ2() {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,444,ublic DerivativeStructure getQ3() {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,422,public T getQ3() {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,450," @see #Rotation(Vector3DDS, DerivativeStructure)"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,428,"* @see #Rotation(FieldVector3D, T)"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,452,ublic Vector3DDS getAxis() {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,453,inal DerivativeStructure squaredSine = q1.multiply(q1).add(q2.multiply(q2)).add(q3.multiply(q3));
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,454,f (squaredSine.getValue() == 0) {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,455,inal Field<DerivativeStructure> field = squaredSine.getField();
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,456,"eturn new Vector3DDS(field.getOne(), field.getZero(), field.getZero());"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,457, else if (q0.getValue() < 0) {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,458,erivativeStructure inverse = squaredSine.sqrt().reciprocal();
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,459,"eturn new Vector3DDS(q1.multiply(inverse), q2.multiply(inverse), q3.multiply(inverse));"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,430,public FieldVector3D<T> getAxis() {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,431,final T squaredSine = q1.multiply(q1).add(q2.multiply(q2)).add(q3.multiply(q3));
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,432,if (squaredSine.getReal() == 0) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,433,final Field<T> field = squaredSine.getField();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,434,"return new FieldVector3D<T>(field.getOne(), field.getZero(), field.getZero());"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,435,} else if (q0.getReal() < 0) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,436,T inverse = squaredSine.sqrt().reciprocal();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,437,"return new FieldVector3D<T>(q1.multiply(inverse), q2.multiply(inverse), q3.multiply(inverse));"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,461,inal DerivativeStructure inverse = squaredSine.sqrt().reciprocal().negate();
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,462,"eturn new Vector3DDS(q1.multiply(inverse), q2.multiply(inverse), q3.multiply(inverse));"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,439,final T inverse = squaredSine.sqrt().reciprocal().negate();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,440,"return new FieldVector3D<T>(q1.multiply(inverse), q2.multiply(inverse), q3.multiply(inverse));"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,467," @see #Rotation(Vector3DDS, DerivativeStructure)"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,445,"* @see #Rotation(FieldVector3D, T)"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,469,ublic DerivativeStructure getAngle() {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,470,f ((q0.getValue() < -0.1) || (q0.getValue() > 0.1)) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,447,public T getAngle() {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,448,if ((q0.getReal() < -0.1) || (q0.getReal() > 0.1)) {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,472, else if (q0.getValue() < 0) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,450,} else if (q0.getReal() < 0) {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,513,ublic DerivativeStructure[] getAngles(final RotationOrder order)
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,491,public T[] getAngles(final RotationOrder order)
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,523,"ector3DDS v1 = applyTo(vector(0, 0, 1));"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,524,"inal Vector3DDS v2 = applyInverseTo(vector(1, 0, 0));"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,525,f  ((v2.getZ().getValue() < -0.9999999999) || (v2.getZ().getValue() > 0.9999999999)) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,501,"FieldVector3D<T> v1 = applyTo(vector(0, 0, 1));"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,502,"final FieldVector3D<T> v2 = applyInverseTo(vector(1, 0, 0));"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,503,if  ((v2.getZ().getReal() < -0.9999999999) || (v2.getZ().getReal() > 0.9999999999)) {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,528,eturn new DerivativeStructure[] {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,529,"erivativeStructure.atan2(v1.getY().negate(), v1.getZ()),"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,530,"2.getZ().asin(),"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,531,"erivativeStructure.atan2(v2.getY().negate(), v2.getX())"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,506,"return buildArray(v1.getY().negate().atan2(v1.getZ()),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,507,"v2.getZ().asin(),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,508,v2.getY().negate().atan2(v2.getX()));
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,541,"inal Vector3DDS v1 = applyTo(vector(0, 1, 0));"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,542,"inal Vector3DDS v2 = applyInverseTo(vector(1, 0, 0));"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,543,f ((v2.getY().getValue() < -0.9999999999) || (v2.getY().getValue() > 0.9999999999)) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,517,"final FieldVector3D<T> v1 = applyTo(vector(0, 1, 0));"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,518,"final FieldVector3D<T> v2 = applyInverseTo(vector(1, 0, 0));"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,519,if ((v2.getY().getReal() < -0.9999999999) || (v2.getY().getReal() > 0.9999999999)) {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,546,eturn new DerivativeStructure[] {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,547,"erivativeStructure.atan2(v1.getZ(), v1.getY()),"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,548,"2.getY().asin().negate(),"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,549,"erivativeStructure.atan2(v2.getZ(), v2.getX())"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,522,"return buildArray(v1.getZ().atan2(v1.getY()),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,523,"v2.getY().asin().negate(),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,524,v2.getZ().atan2(v2.getX()));
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,559,"inal Vector3DDS v1 = applyTo(vector(0, 0, 1));"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,560,"inal Vector3DDS v2 = applyInverseTo(vector(0, 1, 0));"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,561,f ((v2.getZ().getValue() < -0.9999999999) || (v2.getZ().getValue() > 0.9999999999)) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,533,"final FieldVector3D<T> v1 = applyTo(vector(0, 0, 1));"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,534,"final FieldVector3D<T> v2 = applyInverseTo(vector(0, 1, 0));"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,535,if ((v2.getZ().getReal() < -0.9999999999) || (v2.getZ().getReal() > 0.9999999999)) {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,564,eturn new DerivativeStructure[] {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,565,"erivativeStructure.atan2(v1.getX(), v1.getZ()),"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,566,"2.getZ().asin().negate(),"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,567,"erivativeStructure.atan2(v2.getX(), v2.getY())"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,538,"return buildArray(v1.getX().atan2(v1.getZ()),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,539,"v2.getZ().asin().negate(),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,540,v2.getX().atan2(v2.getY()));
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,577,"inal Vector3DDS v1 = applyTo(vector(1, 0, 0));"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,578,"inal Vector3DDS v2 = applyInverseTo(vector(0, 1, 0));"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,579,f ((v2.getX().getValue() < -0.9999999999) || (v2.getX().getValue() > 0.9999999999)) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,549,"final FieldVector3D<T> v1 = applyTo(vector(1, 0, 0));"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,550,"final FieldVector3D<T> v2 = applyInverseTo(vector(0, 1, 0));"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,551,if ((v2.getX().getReal() < -0.9999999999) || (v2.getX().getReal() > 0.9999999999)) {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,582,eturn new DerivativeStructure[] {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,583,"erivativeStructure.atan2(v1.getZ().negate(), v1.getX()),"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,584,"2.getX().asin(),"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,585,"erivativeStructure.atan2(v2.getZ().negate(), v2.getY())"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,554,"return buildArray(v1.getZ().negate().atan2(v1.getX()),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,555,"v2.getX().asin(),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,556,v2.getZ().negate().atan2(v2.getY()));
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,595,"inal Vector3DDS v1 = applyTo(vector(0, 1, 0));"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,596,"inal Vector3DDS v2 = applyInverseTo(vector(0, 0, 1));"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,597,f ((v2.getY().getValue() < -0.9999999999) || (v2.getY().getValue() > 0.9999999999)) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,565,"final FieldVector3D<T> v1 = applyTo(vector(0, 1, 0));"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,566,"final FieldVector3D<T> v2 = applyInverseTo(vector(0, 0, 1));"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,567,if ((v2.getY().getReal() < -0.9999999999) || (v2.getY().getReal() > 0.9999999999)) {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,600,eturn new DerivativeStructure[] {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,601,"erivativeStructure.atan2(v1.getX().negate(), v1.getY()),"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,602,"2.getY().asin(),"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,603,"erivativeStructure.atan2(v2.getX().negate(), v2.getZ())"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,570,"return buildArray(v1.getX().negate().atan2(v1.getY()),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,571,"v2.getY().asin(),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,572,v2.getX().negate().atan2(v2.getZ()));
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,613,"inal Vector3DDS v1 = applyTo(vector(1, 0, 0));"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,614,"inal Vector3DDS v2 = applyInverseTo(vector(0, 0, 1));"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,615,f ((v2.getX().getValue() < -0.9999999999) || (v2.getX().getValue() > 0.9999999999)) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,581,"final FieldVector3D<T> v1 = applyTo(vector(1, 0, 0));"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,582,"final FieldVector3D<T> v2 = applyInverseTo(vector(0, 0, 1));"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,583,if ((v2.getX().getReal() < -0.9999999999) || (v2.getX().getReal() > 0.9999999999)) {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,618,eturn new DerivativeStructure[] {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,619,"erivativeStructure.atan2(v1.getY(), v1.getX()),"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,620,"2.getX().asin().negate(),"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,621,"erivativeStructure.atan2(v2.getY(), v2.getZ())"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,586,"return buildArray(v1.getY().atan2(v1.getX()),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,587,"v2.getX().asin().negate(),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,588,v2.getY().atan2(v2.getZ()));
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,631,"inal Vector3DDS v1 = applyTo(vector(1, 0, 0));"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,632,"inal Vector3DDS v2 = applyInverseTo(vector(1, 0, 0));"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,633,f ((v2.getX().getValue() < -0.9999999999) || (v2.getX().getValue() > 0.9999999999)) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,597,"final FieldVector3D<T> v1 = applyTo(vector(1, 0, 0));"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,598,"final FieldVector3D<T> v2 = applyInverseTo(vector(1, 0, 0));"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,599,if ((v2.getX().getReal() < -0.9999999999) || (v2.getX().getReal() > 0.9999999999)) {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,636,eturn new DerivativeStructure[] {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,637,"erivativeStructure.atan2(v1.getY(), v1.getZ().negate()),"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,638,"2.getX().acos(),"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,639,"erivativeStructure.atan2(v2.getY(), v2.getZ())"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,602,"return buildArray(v1.getY().atan2(v1.getZ().negate()),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,603,"v2.getX().acos(),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,604,v2.getY().atan2(v2.getZ()));
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,649,"inal Vector3DDS v1 = applyTo(vector(1, 0, 0));"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,650,"inal Vector3DDS v2 = applyInverseTo(vector(1, 0, 0));"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,651,f ((v2.getX().getValue() < -0.9999999999) || (v2.getX().getValue() > 0.9999999999)) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,613,"final FieldVector3D<T> v1 = applyTo(vector(1, 0, 0));"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,614,"final FieldVector3D<T> v2 = applyInverseTo(vector(1, 0, 0));"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,615,if ((v2.getX().getReal() < -0.9999999999) || (v2.getX().getReal() > 0.9999999999)) {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,654,eturn new DerivativeStructure[] {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,655,"erivativeStructure.atan2(v1.getZ(), v1.getY()),"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,656,"2.getX().acos(),"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,657,"erivativeStructure.atan2(v2.getZ(), v2.getY().negate())"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,618,"return buildArray(v1.getZ().atan2(v1.getY()),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,619,"v2.getX().acos(),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,620,v2.getZ().atan2(v2.getY().negate()));
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,667,"inal Vector3DDS v1 = applyTo(vector(0, 1, 0));"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,668,"inal Vector3DDS v2 = applyInverseTo(vector(0, 1, 0));"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,669,f ((v2.getY().getValue() < -0.9999999999) || (v2.getY().getValue() > 0.9999999999)) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,629,"final FieldVector3D<T> v1 = applyTo(vector(0, 1, 0));"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,630,"final FieldVector3D<T> v2 = applyInverseTo(vector(0, 1, 0));"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,631,if ((v2.getY().getReal() < -0.9999999999) || (v2.getY().getReal() > 0.9999999999)) {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,672,eturn new DerivativeStructure[] {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,673,"erivativeStructure.atan2(v1.getX(), v1.getZ()),"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,674,"2.getY().acos(),"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,675,"erivativeStructure.atan2(v2.getX(), v2.getZ().negate())"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,634,"return buildArray(v1.getX().atan2(v1.getZ()),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,635,"v2.getY().acos(),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,636,v2.getX().atan2(v2.getZ().negate()));
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,685,"inal Vector3DDS v1 = applyTo(vector(0, 1, 0));"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,686,"inal Vector3DDS v2 = applyInverseTo(vector(0, 1, 0));"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,687,f ((v2.getY().getValue() < -0.9999999999) || (v2.getY().getValue() > 0.9999999999)) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,645,"final FieldVector3D<T> v1 = applyTo(vector(0, 1, 0));"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,646,"final FieldVector3D<T> v2 = applyInverseTo(vector(0, 1, 0));"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,647,if ((v2.getY().getReal() < -0.9999999999) || (v2.getY().getReal() > 0.9999999999)) {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,690,eturn new DerivativeStructure[] {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,691,"erivativeStructure.atan2(v1.getZ(), v1.getX().negate()),"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,692,"2.getY().acos(),"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,693,"erivativeStructure.atan2(v2.getZ(), v2.getX())"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,650,"return buildArray(v1.getZ().atan2(v1.getX().negate()),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,651,"v2.getY().acos(),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,652,v2.getZ().atan2(v2.getX()));
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,703,"inal Vector3DDS v1 = applyTo(vector(0, 0, 1));"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,704,"inal Vector3DDS v2 = applyInverseTo(vector(0, 0, 1));"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,705,f ((v2.getZ().getValue() < -0.9999999999) || (v2.getZ().getValue() > 0.9999999999)) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,661,"final FieldVector3D<T> v1 = applyTo(vector(0, 0, 1));"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,662,"final FieldVector3D<T> v2 = applyInverseTo(vector(0, 0, 1));"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,663,if ((v2.getZ().getReal() < -0.9999999999) || (v2.getZ().getReal() > 0.9999999999)) {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,708,eturn new DerivativeStructure[] {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,709,"erivativeStructure.atan2(v1.getX(), v1.getY().negate()),"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,710,"2.getZ().acos(),"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,711,"erivativeStructure.atan2(v2.getX(), v2.getY())"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,666,"return buildArray(v1.getX().atan2(v1.getY().negate()),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,667,"v2.getZ().acos(),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,668,v2.getX().atan2(v2.getY()));
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,721,"inal Vector3DDS v1 = applyTo(vector(0, 0, 1));"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,722,"inal Vector3DDS v2 = applyInverseTo(vector(0, 0, 1));"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,723,f ((v2.getZ().getValue() < -0.9999999999) || (v2.getZ().getValue() > 0.9999999999)) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,677,"final FieldVector3D<T> v1 = applyTo(vector(0, 0, 1));"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,678,"final FieldVector3D<T> v2 = applyInverseTo(vector(0, 0, 1));"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,679,if ((v2.getZ().getReal() < -0.9999999999) || (v2.getZ().getReal() > 0.9999999999)) {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,726,eturn new DerivativeStructure[] {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,727,"erivativeStructure.atan2(v1.getY(), v1.getX()),"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,728,"2.getZ().acos(),"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,729,"erivativeStructure.atan2(v2.getY(), v2.getX().negate())"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,682,"return buildArray(v1.getY().atan2(v1.getX()),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,683,"v2.getZ().acos(),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,684,v2.getY().atan2(v2.getX().negate()));
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,736,** Create a constant vector with appropriate derivation parameters.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,690,/** Create a dimension 3 array.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,691,* @param a0 first array element
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,692,* @param a1 second array element
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,693,* @param a2 third array element
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,694,* @return new array
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,696,"private T[] buildArray(final T a0, final T a1, final T a2) {"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,697,"final T[] array = MathArrays.buildArray(a0.getField(), 3);"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,698,array[0] = a0;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,699,array[1] = a1;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,700,array[2] = a2;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,701,return array;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,704,/** Create a constant vector.
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,742,"rivate Vector3DDS vector(final double x, final double y, final double z) {"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,743,inal int parameters = q0.getFreeParameters();
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,744,inal int order      = q0.getOrder();
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,745,"eturn new Vector3DDS(new DerivativeStructure(parameters, order, x),"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,746,"ew DerivativeStructure(parameters, order, y),"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,747,"ew DerivativeStructure(parameters, order, z));"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,710,"private FieldVector3D<T> vector(final double x, final double y, final double z) {"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,711,final T zero = q0.getField().getZero();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,712,"return new FieldVector3D<T>(zero.add(x), zero.add(y), zero.add(z));"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,753,ublic DerivativeStructure[][] getMatrix() {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,718,public T[][] getMatrix() {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,756,inal DerivativeStructure q0q0  = q0.multiply(q0);
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,757,inal DerivativeStructure q0q1  = q0.multiply(q1);
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,758,inal DerivativeStructure q0q2  = q0.multiply(q2);
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,759,inal DerivativeStructure q0q3  = q0.multiply(q3);
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,760,inal DerivativeStructure q1q1  = q1.multiply(q1);
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,761,inal DerivativeStructure q1q2  = q1.multiply(q2);
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,762,inal DerivativeStructure q1q3  = q1.multiply(q3);
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,763,inal DerivativeStructure q2q2  = q2.multiply(q2);
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,764,inal DerivativeStructure q2q3  = q2.multiply(q3);
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,765,inal DerivativeStructure q3q3  = q3.multiply(q3);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,721,final T q0q0  = q0.multiply(q0);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,722,final T q0q1  = q0.multiply(q1);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,723,final T q0q2  = q0.multiply(q2);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,724,final T q0q3  = q0.multiply(q3);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,725,final T q1q1  = q1.multiply(q1);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,726,final T q1q2  = q1.multiply(q2);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,727,final T q1q3  = q1.multiply(q3);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,728,final T q2q2  = q2.multiply(q2);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,729,final T q2q3  = q2.multiply(q3);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,730,final T q3q3  = q3.multiply(q3);
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,768,inal DerivativeStructure[][] m = new DerivativeStructure[3][];
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,769,[0] = new DerivativeStructure[3];
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,770,[1] = new DerivativeStructure[3];
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,771,[2] = new DerivativeStructure[3];
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,733,"final T[][] m = MathArrays.buildArray(q0.getField(), 3, 3);"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,793,"eturn new Rotation(q0.getValue(), q1.getValue(), q2.getValue(), q3.getValue(), false);"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,755,"return new Rotation(q0.getReal(), q1.getReal(), q2.getReal(), q3.getReal(), false);"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,800,ublic Vector3DDS applyTo(final Vector3DDS u) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,762,public FieldVector3D<T> applyTo(final FieldVector3D<T> u) {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,802,inal DerivativeStructure x = u.getX();
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,803,inal DerivativeStructure y = u.getY();
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,804,inal DerivativeStructure z = u.getZ();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,764,final T x = u.getX();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,765,final T y = u.getY();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,766,final T z = u.getZ();
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,806,inal DerivativeStructure s = q1.multiply(x).add(q2.multiply(y)).add(q3.multiply(z));
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,768,final T s = q1.multiply(x).add(q2.multiply(y)).add(q3.multiply(z));
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,808,"eturn new Vector3DDS(q0.multiply(x.multiply(q0).subtract(q2.multiply(z).subtract(q3.multiply(y)))).add(s.multiply(q1)).multiply(2).subtract(x),"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,809,"0.multiply(y.multiply(q0).subtract(q3.multiply(x).subtract(q1.multiply(z)))).add(s.multiply(q2)).multiply(2).subtract(y),"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,810,0.multiply(z.multiply(q0).subtract(q1.multiply(y).subtract(q2.multiply(x)))).add(s.multiply(q3)).multiply(2).subtract(z));
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,770,"return new FieldVector3D<T>(q0.multiply(x.multiply(q0).subtract(q2.multiply(z).subtract(q3.multiply(y)))).add(s.multiply(q1)).multiply(2).subtract(x),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,771,"q0.multiply(y.multiply(q0).subtract(q3.multiply(x).subtract(q1.multiply(z)))).add(s.multiply(q2)).multiply(2).subtract(y),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,772,q0.multiply(z.multiply(q0).subtract(q1.multiply(y).subtract(q2.multiply(x)))).add(s.multiply(q3)).multiply(2).subtract(z));
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,818,ublic Vector3DDS applyTo(final Vector3D u) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,780,public FieldVector3D<T> applyTo(final Vector3D u) {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,824,inal DerivativeStructure s = q1.multiply(x).add(q2.multiply(y)).add(q3.multiply(z));
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,786,final T s = q1.multiply(x).add(q2.multiply(y)).add(q3.multiply(z));
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,826,"eturn new Vector3DDS(q0.multiply(q0.multiply(x).subtract(q2.multiply(z).subtract(q3.multiply(y)))).add(s.multiply(q1)).multiply(2).subtract(x),"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,827,"0.multiply(q0.multiply(y).subtract(q3.multiply(x).subtract(q1.multiply(z)))).add(s.multiply(q2)).multiply(2).subtract(y),"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,828,0.multiply(q0.multiply(z).subtract(q1.multiply(y).subtract(q2.multiply(x)))).add(s.multiply(q3)).multiply(2).subtract(z));
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,788,"return new FieldVector3D<T>(q0.multiply(q0.multiply(x).subtract(q2.multiply(z).subtract(q3.multiply(y)))).add(s.multiply(q1)).multiply(2).subtract(x),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,789,"q0.multiply(q0.multiply(y).subtract(q3.multiply(x).subtract(q1.multiply(z)))).add(s.multiply(q2)).multiply(2).subtract(y),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,790,q0.multiply(q0.multiply(z).subtract(q1.multiply(y).subtract(q2.multiply(x)))).add(s.multiply(q3)).multiply(2).subtract(z));
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,837,"ublic void applyTo(final DerivativeStructure[] in, final DerivativeStructure[] out) {"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,799,"public void applyTo(final T[] in, final T[] out) {"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,839,inal DerivativeStructure x = in[0];
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,840,inal DerivativeStructure y = in[1];
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,841,inal DerivativeStructure z = in[2];
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,801,final T x = in[0];
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,802,final T y = in[1];
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,803,final T z = in[2];
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,843,inal DerivativeStructure s = q1.multiply(x).add(q2.multiply(y)).add(q3.multiply(z));
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,805,final T s = q1.multiply(x).add(q2.multiply(y)).add(q3.multiply(z));
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,855,"ublic void applyTo(final double[] in, final DerivativeStructure[] out) {"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,817,"public void applyTo(final double[] in, final T[] out) {"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,861,inal DerivativeStructure s = q1.multiply(x).add(q2.multiply(y)).add(q3.multiply(z));
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,823,final T s = q1.multiply(x).add(q2.multiply(y)).add(q3.multiply(z));
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,874,"ublic static Vector3DDS applyTo(final Rotation r, final Vector3DDS u) {"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,836,"public static <T extends ExtendedFieldElement<T>> FieldVector3D<T> applyTo(final Rotation r, final FieldVector3D<T> u) {"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,876,inal DerivativeStructure x = u.getX();
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,877,inal DerivativeStructure y = u.getY();
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,878,inal DerivativeStructure z = u.getZ();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,838,final T x = u.getX();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,839,final T y = u.getY();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,840,final T z = u.getZ();
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,880,inal DerivativeStructure s = x.multiply(r.getQ1()).add(y.multiply(r.getQ2())).add(z.multiply(r.getQ3()));
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,842,final T s = x.multiply(r.getQ1()).add(y.multiply(r.getQ2())).add(z.multiply(r.getQ3()));
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,882,"eturn new Vector3DDS(x.multiply(r.getQ0()).subtract(z.multiply(r.getQ2()).subtract(y.multiply(r.getQ3()))).multiply(r.getQ0()).add(s.multiply(r.getQ1())).multiply(2).subtract(x),"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,883,".multiply(r.getQ0()).subtract(x.multiply(r.getQ3()).subtract(z.multiply(r.getQ1()))).multiply(r.getQ0()).add(s.multiply(r.getQ2())).multiply(2).subtract(y),"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,884,.multiply(r.getQ0()).subtract(y.multiply(r.getQ1()).subtract(x.multiply(r.getQ2()))).multiply(r.getQ0()).add(s.multiply(r.getQ3())).multiply(2).subtract(z));
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,844,"return new FieldVector3D<T>(x.multiply(r.getQ0()).subtract(z.multiply(r.getQ2()).subtract(y.multiply(r.getQ3()))).multiply(r.getQ0()).add(s.multiply(r.getQ1())).multiply(2).subtract(x),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,845,"y.multiply(r.getQ0()).subtract(x.multiply(r.getQ3()).subtract(z.multiply(r.getQ1()))).multiply(r.getQ0()).add(s.multiply(r.getQ2())).multiply(2).subtract(y),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,846,z.multiply(r.getQ0()).subtract(y.multiply(r.getQ1()).subtract(x.multiply(r.getQ2()))).multiply(r.getQ0()).add(s.multiply(r.getQ3())).multiply(2).subtract(z));
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,892,ublic Vector3DDS applyInverseTo(final Vector3DDS u) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,854,public FieldVector3D<T> applyInverseTo(final FieldVector3D<T> u) {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,894,inal DerivativeStructure x = u.getX();
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,895,inal DerivativeStructure y = u.getY();
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,896,inal DerivativeStructure z = u.getZ();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,856,final T x = u.getX();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,857,final T y = u.getY();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,858,final T z = u.getZ();
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,898,inal DerivativeStructure s  = q1.multiply(x).add(q2.multiply(y)).add(q3.multiply(z));
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,899,inal DerivativeStructure m0 = q0.negate();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,860,final T s  = q1.multiply(x).add(q2.multiply(y)).add(q3.multiply(z));
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,861,final T m0 = q0.negate();
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,901,"eturn new Vector3DDS(m0.multiply(x.multiply(m0).subtract(q2.multiply(z).subtract(q3.multiply(y)))).add(s.multiply(q1)).multiply(2).subtract(x),"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,902,"0.multiply(y.multiply(m0).subtract(q3.multiply(x).subtract(q1.multiply(z)))).add(s.multiply(q2)).multiply(2).subtract(y),"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,903,0.multiply(z.multiply(m0).subtract(q1.multiply(y).subtract(q2.multiply(x)))).add(s.multiply(q3)).multiply(2).subtract(z));
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,863,"return new FieldVector3D<T>(m0.multiply(x.multiply(m0).subtract(q2.multiply(z).subtract(q3.multiply(y)))).add(s.multiply(q1)).multiply(2).subtract(x),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,864,"m0.multiply(y.multiply(m0).subtract(q3.multiply(x).subtract(q1.multiply(z)))).add(s.multiply(q2)).multiply(2).subtract(y),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,865,m0.multiply(z.multiply(m0).subtract(q1.multiply(y).subtract(q2.multiply(x)))).add(s.multiply(q3)).multiply(2).subtract(z));
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,911,ublic Vector3DDS applyInverseTo(final Vector3D u) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,873,public FieldVector3D<T> applyInverseTo(final Vector3D u) {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,917,inal DerivativeStructure s  = q1.multiply(x).add(q2.multiply(y)).add(q3.multiply(z));
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,918,inal DerivativeStructure m0 = q0.negate();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,879,final T s  = q1.multiply(x).add(q2.multiply(y)).add(q3.multiply(z));
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,880,final T m0 = q0.negate();
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,920,"eturn new Vector3DDS(m0.multiply(m0.multiply(x).subtract(q2.multiply(z).subtract(q3.multiply(y)))).add(s.multiply(q1)).multiply(2).subtract(x),"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,921,"0.multiply(m0.multiply(y).subtract(q3.multiply(x).subtract(q1.multiply(z)))).add(s.multiply(q2)).multiply(2).subtract(y),"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,922,0.multiply(m0.multiply(z).subtract(q1.multiply(y).subtract(q2.multiply(x)))).add(s.multiply(q3)).multiply(2).subtract(z));
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,882,"return new FieldVector3D<T>(m0.multiply(m0.multiply(x).subtract(q2.multiply(z).subtract(q3.multiply(y)))).add(s.multiply(q1)).multiply(2).subtract(x),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,883,"m0.multiply(m0.multiply(y).subtract(q3.multiply(x).subtract(q1.multiply(z)))).add(s.multiply(q2)).multiply(2).subtract(y),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,884,m0.multiply(m0.multiply(z).subtract(q1.multiply(y).subtract(q2.multiply(x)))).add(s.multiply(q3)).multiply(2).subtract(z));
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,931,"ublic void applyInverseTo(final DerivativeStructure[] in, final DerivativeStructure[] out) {"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,893,"public void applyInverseTo(final T[] in, final T[] out) {"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,933,inal DerivativeStructure x = in[0];
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,934,inal DerivativeStructure y = in[1];
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,935,inal DerivativeStructure z = in[2];
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,895,final T x = in[0];
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,896,final T y = in[1];
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,897,final T z = in[2];
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,937,inal DerivativeStructure s = q1.multiply(x).add(q2.multiply(y)).add(q3.multiply(z));
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,938,inal DerivativeStructure m0 = q0.negate();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,899,final T s = q1.multiply(x).add(q2.multiply(y)).add(q3.multiply(z));
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,900,final T m0 = q0.negate();
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,950,"ublic void applyInverseTo(final double[] in, final DerivativeStructure[] out) {"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,912,"public void applyInverseTo(final double[] in, final T[] out) {"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,956,inal DerivativeStructure s = q1.multiply(x).add(q2.multiply(y)).add(q3.multiply(z));
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,957,inal DerivativeStructure m0 = q0.negate();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,918,final T s = q1.multiply(x).add(q2.multiply(y)).add(q3.multiply(z));
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,919,final T m0 = q0.negate();
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,970,"ublic static Vector3DDS applyInverseTo(final Rotation r, final Vector3DDS u) {"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,932,"public static <T extends ExtendedFieldElement<T>> FieldVector3D<T> applyInverseTo(final Rotation r, final FieldVector3D<T> u) {"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,972,inal DerivativeStructure x = u.getX();
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,973,inal DerivativeStructure y = u.getY();
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,974,inal DerivativeStructure z = u.getZ();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,934,final T x = u.getX();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,935,final T y = u.getY();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,936,final T z = u.getZ();
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,976,inal DerivativeStructure s  = x.multiply(r.getQ1()).add(y.multiply(r.getQ2())).add(z.multiply(r.getQ3()));
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,938,final T s  = x.multiply(r.getQ1()).add(y.multiply(r.getQ2())).add(z.multiply(r.getQ3()));
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,979,"eturn new Vector3DDS(x.multiply(m0).subtract(z.multiply(r.getQ2()).subtract(y.multiply(r.getQ3()))).multiply(m0).add(s.multiply(r.getQ1())).multiply(2).subtract(x),"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,980,".multiply(m0).subtract(x.multiply(r.getQ3()).subtract(z.multiply(r.getQ1()))).multiply(m0).add(s.multiply(r.getQ2())).multiply(2).subtract(y),"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,981,.multiply(m0).subtract(y.multiply(r.getQ1()).subtract(x.multiply(r.getQ2()))).multiply(m0).add(s.multiply(r.getQ3())).multiply(2).subtract(z));
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,941,"return new FieldVector3D<T>(x.multiply(m0).subtract(z.multiply(r.getQ2()).subtract(y.multiply(r.getQ3()))).multiply(m0).add(s.multiply(r.getQ1())).multiply(2).subtract(x),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,942,"y.multiply(m0).subtract(x.multiply(r.getQ3()).subtract(z.multiply(r.getQ1()))).multiply(m0).add(s.multiply(r.getQ2())).multiply(2).subtract(y),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,943,z.multiply(m0).subtract(y.multiply(r.getQ1()).subtract(x.multiply(r.getQ2()))).multiply(m0).add(s.multiply(r.getQ3())).multiply(2).subtract(z));
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,994,ublic RotationDS applyTo(final RotationDS r) {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,995,"eturn new RotationDS(r.q0.multiply(q0).subtract(r.q1.multiply(q1).add(r.q2.multiply(q2)).add(r.q3.multiply(q3))),"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,996,".q1.multiply(q0).add(r.q0.multiply(q1)).add(r.q2.multiply(q3).subtract(r.q3.multiply(q2))),"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,997,".q2.multiply(q0).add(r.q0.multiply(q2)).add(r.q3.multiply(q1).subtract(r.q1.multiply(q3))),"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,998,".q3.multiply(q0).add(r.q0.multiply(q3)).add(r.q1.multiply(q2).subtract(r.q2.multiply(q1))),"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,999,alse);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,956,public FieldRotation<T> applyTo(final FieldRotation<T> r) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,957,"return new FieldRotation<T>(r.q0.multiply(q0).subtract(r.q1.multiply(q1).add(r.q2.multiply(q2)).add(r.q3.multiply(q3))),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,958,"r.q1.multiply(q0).add(r.q0.multiply(q1)).add(r.q2.multiply(q3).subtract(r.q3.multiply(q2))),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,959,"r.q2.multiply(q0).add(r.q0.multiply(q2)).add(r.q3.multiply(q1).subtract(r.q1.multiply(q3))),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,960,"r.q3.multiply(q0).add(r.q0.multiply(q3)).add(r.q1.multiply(q2).subtract(r.q2.multiply(q1))),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,961,false);
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,1011,ublic RotationDS applyTo(final Rotation r) {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,1012,"eturn new RotationDS(q0.multiply(r.getQ0()).subtract(q1.multiply(r.getQ1()).add(q2.multiply(r.getQ2())).add(q3.multiply(r.getQ3()))),"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,1013,"0.multiply(r.getQ1()).add(q1.multiply(r.getQ0())).add(q3.multiply(r.getQ2()).subtract(q2.multiply(r.getQ3()))),"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,1014,"0.multiply(r.getQ2()).add(q2.multiply(r.getQ0())).add(q1.multiply(r.getQ3()).subtract(q3.multiply(r.getQ1()))),"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,1015,"0.multiply(r.getQ3()).add(q3.multiply(r.getQ0())).add(q2.multiply(r.getQ1()).subtract(q1.multiply(r.getQ2()))),"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,1016,alse);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,973,public FieldRotation<T> applyTo(final Rotation r) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,974,"return new FieldRotation<T>(q0.multiply(r.getQ0()).subtract(q1.multiply(r.getQ1()).add(q2.multiply(r.getQ2())).add(q3.multiply(r.getQ3()))),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,975,"q0.multiply(r.getQ1()).add(q1.multiply(r.getQ0())).add(q3.multiply(r.getQ2()).subtract(q2.multiply(r.getQ3()))),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,976,"q0.multiply(r.getQ2()).add(q2.multiply(r.getQ0())).add(q1.multiply(r.getQ3()).subtract(q3.multiply(r.getQ1()))),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,977,"q0.multiply(r.getQ3()).add(q3.multiply(r.getQ0())).add(q2.multiply(r.getQ1()).subtract(q1.multiply(r.getQ2()))),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,978,false);
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,1029,"ublic static RotationDS applyTo(final Rotation r1, final RotationDS rInner) {"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,1030,"eturn new RotationDS(rInner.q0.multiply(r1.getQ0()).subtract(rInner.q1.multiply(r1.getQ1()).add(rInner.q2.multiply(r1.getQ2())).add(rInner.q3.multiply(r1.getQ3()))),"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,1031,"Inner.q1.multiply(r1.getQ0()).add(rInner.q0.multiply(r1.getQ1())).add(rInner.q2.multiply(r1.getQ3()).subtract(rInner.q3.multiply(r1.getQ2()))),"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,1032,"Inner.q2.multiply(r1.getQ0()).add(rInner.q0.multiply(r1.getQ2())).add(rInner.q3.multiply(r1.getQ1()).subtract(rInner.q1.multiply(r1.getQ3()))),"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,1033,"Inner.q3.multiply(r1.getQ0()).add(rInner.q0.multiply(r1.getQ3())).add(rInner.q1.multiply(r1.getQ2()).subtract(rInner.q2.multiply(r1.getQ1()))),"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,1034,alse);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,991,"public static <T extends ExtendedFieldElement<T>> FieldRotation<T> applyTo(final Rotation r1, final FieldRotation<T> rInner) {"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,992,"return new FieldRotation<T>(rInner.q0.multiply(r1.getQ0()).subtract(rInner.q1.multiply(r1.getQ1()).add(rInner.q2.multiply(r1.getQ2())).add(rInner.q3.multiply(r1.getQ3()))),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,993,"rInner.q1.multiply(r1.getQ0()).add(rInner.q0.multiply(r1.getQ1())).add(rInner.q2.multiply(r1.getQ3()).subtract(rInner.q3.multiply(r1.getQ2()))),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,994,"rInner.q2.multiply(r1.getQ0()).add(rInner.q0.multiply(r1.getQ2())).add(rInner.q3.multiply(r1.getQ1()).subtract(rInner.q1.multiply(r1.getQ3()))),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,995,"rInner.q3.multiply(r1.getQ0()).add(rInner.q0.multiply(r1.getQ3())).add(rInner.q1.multiply(r1.getQ2()).subtract(rInner.q2.multiply(r1.getQ1()))),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,996,false);
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,1048,ublic RotationDS applyInverseTo(final RotationDS r) {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,1049,"eturn new RotationDS(r.q0.multiply(q0).add(r.q1.multiply(q1).add(r.q2.multiply(q2)).add(r.q3.multiply(q3))).negate(),"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,1050,".q0.multiply(q1).add(r.q2.multiply(q3).subtract(r.q3.multiply(q2))).subtract(r.q1.multiply(q0)),"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,1051,".q0.multiply(q2).add(r.q3.multiply(q1).subtract(r.q1.multiply(q3))).subtract(r.q2.multiply(q0)),"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,1052,".q0.multiply(q3).add(r.q1.multiply(q2).subtract(r.q2.multiply(q1))).subtract(r.q3.multiply(q0)),"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,1053,alse);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,1010,public FieldRotation<T> applyInverseTo(final FieldRotation<T> r) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,1011,"return new FieldRotation<T>(r.q0.multiply(q0).add(r.q1.multiply(q1).add(r.q2.multiply(q2)).add(r.q3.multiply(q3))).negate(),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,1012,"r.q0.multiply(q1).add(r.q2.multiply(q3).subtract(r.q3.multiply(q2))).subtract(r.q1.multiply(q0)),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,1013,"r.q0.multiply(q2).add(r.q3.multiply(q1).subtract(r.q1.multiply(q3))).subtract(r.q2.multiply(q0)),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,1014,"r.q0.multiply(q3).add(r.q1.multiply(q2).subtract(r.q2.multiply(q1))).subtract(r.q3.multiply(q0)),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,1015,false);
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,1067,ublic RotationDS applyInverseTo(final Rotation r) {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,1068,"eturn new RotationDS(q0.multiply(r.getQ0()).add(q1.multiply(r.getQ1()).add(q2.multiply(r.getQ2())).add(q3.multiply(r.getQ3()))).negate(),"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,1069,"1.multiply(r.getQ0()).add(q3.multiply(r.getQ2()).subtract(q2.multiply(r.getQ3()))).subtract(q0.multiply(r.getQ1())),"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,1070,"2.multiply(r.getQ0()).add(q1.multiply(r.getQ3()).subtract(q3.multiply(r.getQ1()))).subtract(q0.multiply(r.getQ2())),"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,1071,"3.multiply(r.getQ0()).add(q2.multiply(r.getQ1()).subtract(q1.multiply(r.getQ2()))).subtract(q0.multiply(r.getQ3())),"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,1072,alse);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,1029,public FieldRotation<T> applyInverseTo(final Rotation r) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,1030,"return new FieldRotation<T>(q0.multiply(r.getQ0()).add(q1.multiply(r.getQ1()).add(q2.multiply(r.getQ2())).add(q3.multiply(r.getQ3()))).negate(),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,1031,"q1.multiply(r.getQ0()).add(q3.multiply(r.getQ2()).subtract(q2.multiply(r.getQ3()))).subtract(q0.multiply(r.getQ1())),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,1032,"q2.multiply(r.getQ0()).add(q1.multiply(r.getQ3()).subtract(q3.multiply(r.getQ1()))).subtract(q0.multiply(r.getQ2())),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,1033,"q3.multiply(r.getQ0()).add(q2.multiply(r.getQ1()).subtract(q1.multiply(r.getQ2()))).subtract(q0.multiply(r.getQ3())),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,1034,false);
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,1087,"ublic static RotationDS applyInverseTo(final Rotation rOuter, final RotationDS rInner) {"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,1088,"eturn new RotationDS(rInner.q0.multiply(rOuter.getQ0()).add(rInner.q1.multiply(rOuter.getQ1()).add(rInner.q2.multiply(rOuter.getQ2())).add(rInner.q3.multiply(rOuter.getQ3()))).negate(),"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,1089,"Inner.q0.multiply(rOuter.getQ1()).add(rInner.q2.multiply(rOuter.getQ3()).subtract(rInner.q3.multiply(rOuter.getQ2()))).subtract(rInner.q1.multiply(rOuter.getQ0())),"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,1090,"Inner.q0.multiply(rOuter.getQ2()).add(rInner.q3.multiply(rOuter.getQ1()).subtract(rInner.q1.multiply(rOuter.getQ3()))).subtract(rInner.q2.multiply(rOuter.getQ0())),"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,1091,"Inner.q0.multiply(rOuter.getQ3()).add(rInner.q1.multiply(rOuter.getQ2()).subtract(rInner.q2.multiply(rOuter.getQ1()))).subtract(rInner.q3.multiply(rOuter.getQ0())),"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,1092,alse);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,1049,"public static <T extends ExtendedFieldElement<T>> FieldRotation<T> applyInverseTo(final Rotation rOuter, final FieldRotation<T> rInner) {"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,1050,"return new FieldRotation<T>(rInner.q0.multiply(rOuter.getQ0()).add(rInner.q1.multiply(rOuter.getQ1()).add(rInner.q2.multiply(rOuter.getQ2())).add(rInner.q3.multiply(rOuter.getQ3()))).negate(),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,1051,"rInner.q0.multiply(rOuter.getQ1()).add(rInner.q2.multiply(rOuter.getQ3()).subtract(rInner.q3.multiply(rOuter.getQ2()))).subtract(rInner.q1.multiply(rOuter.getQ0())),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,1052,"rInner.q0.multiply(rOuter.getQ2()).add(rInner.q3.multiply(rOuter.getQ1()).subtract(rInner.q1.multiply(rOuter.getQ3()))).subtract(rInner.q2.multiply(rOuter.getQ0())),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,1053,"rInner.q0.multiply(rOuter.getQ3()).add(rInner.q1.multiply(rOuter.getQ2()).subtract(rInner.q2.multiply(rOuter.getQ1()))).subtract(rInner.q3.multiply(rOuter.getQ0())),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,1054,false);
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,1105,"rivate DerivativeStructure[][] orthogonalizeMatrix(final DerivativeStructure[][] m,"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,1106,inal double threshold)
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,1067,"private T[][] orthogonalizeMatrix(final T[][] m, final double threshold)"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,1109,erivativeStructure x00 = m[0][0];
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,1110,erivativeStructure x01 = m[0][1];
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,1111,erivativeStructure x02 = m[0][2];
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,1112,erivativeStructure x10 = m[1][0];
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,1113,erivativeStructure x11 = m[1][1];
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,1114,erivativeStructure x12 = m[1][2];
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,1115,erivativeStructure x20 = m[2][0];
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,1116,erivativeStructure x21 = m[2][1];
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,1117,erivativeStructure x22 = m[2][2];
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,1070,T x00 = m[0][0];
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,1071,T x01 = m[0][1];
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,1072,T x02 = m[0][2];
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,1073,T x10 = m[1][0];
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,1074,T x11 = m[1][1];
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,1075,T x12 = m[1][2];
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,1076,T x20 = m[2][0];
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,1077,T x21 = m[2][1];
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,1078,T x22 = m[2][2];
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,1121,inal DerivativeStructure[][] o = new DerivativeStructure[3][3];
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,1082,"final T[][] o = MathArrays.buildArray(m[0][0].getField(), 3, 3);"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,1128,inal DerivativeStructure mx00 = m[0][0].multiply(x00).add(m[1][0].multiply(x10)).add(m[2][0].multiply(x20));
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,1129,inal DerivativeStructure mx10 = m[0][1].multiply(x00).add(m[1][1].multiply(x10)).add(m[2][1].multiply(x20));
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,1130,inal DerivativeStructure mx20 = m[0][2].multiply(x00).add(m[1][2].multiply(x10)).add(m[2][2].multiply(x20));
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,1131,inal DerivativeStructure mx01 = m[0][0].multiply(x01).add(m[1][0].multiply(x11)).add(m[2][0].multiply(x21));
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,1132,inal DerivativeStructure mx11 = m[0][1].multiply(x01).add(m[1][1].multiply(x11)).add(m[2][1].multiply(x21));
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,1133,inal DerivativeStructure mx21 = m[0][2].multiply(x01).add(m[1][2].multiply(x11)).add(m[2][2].multiply(x21));
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,1134,inal DerivativeStructure mx02 = m[0][0].multiply(x02).add(m[1][0].multiply(x12)).add(m[2][0].multiply(x22));
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,1135,inal DerivativeStructure mx12 = m[0][1].multiply(x02).add(m[1][1].multiply(x12)).add(m[2][1].multiply(x22));
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,1136,inal DerivativeStructure mx22 = m[0][2].multiply(x02).add(m[1][2].multiply(x12)).add(m[2][2].multiply(x22));
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,1089,final T mx00 = m[0][0].multiply(x00).add(m[1][0].multiply(x10)).add(m[2][0].multiply(x20));
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,1090,final T mx10 = m[0][1].multiply(x00).add(m[1][1].multiply(x10)).add(m[2][1].multiply(x20));
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,1091,final T mx20 = m[0][2].multiply(x00).add(m[1][2].multiply(x10)).add(m[2][2].multiply(x20));
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,1092,final T mx01 = m[0][0].multiply(x01).add(m[1][0].multiply(x11)).add(m[2][0].multiply(x21));
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,1093,final T mx11 = m[0][1].multiply(x01).add(m[1][1].multiply(x11)).add(m[2][1].multiply(x21));
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,1094,final T mx21 = m[0][2].multiply(x01).add(m[1][2].multiply(x11)).add(m[2][2].multiply(x21));
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,1095,final T mx02 = m[0][0].multiply(x02).add(m[1][0].multiply(x12)).add(m[2][0].multiply(x22));
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,1096,final T mx12 = m[0][1].multiply(x02).add(m[1][1].multiply(x12)).add(m[2][1].multiply(x22));
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,1097,final T mx22 = m[0][2].multiply(x02).add(m[1][2].multiply(x12)).add(m[2][2].multiply(x22));
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,1150,inal double corr00 = o[0][0].getValue() - m[0][0].getValue();
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,1151,inal double corr01 = o[0][1].getValue() - m[0][1].getValue();
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,1152,inal double corr02 = o[0][2].getValue() - m[0][2].getValue();
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,1153,inal double corr10 = o[1][0].getValue() - m[1][0].getValue();
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,1154,inal double corr11 = o[1][1].getValue() - m[1][1].getValue();
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,1155,inal double corr12 = o[1][2].getValue() - m[1][2].getValue();
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,1156,inal double corr20 = o[2][0].getValue() - m[2][0].getValue();
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,1157,inal double corr21 = o[2][1].getValue() - m[2][1].getValue();
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,1158,inal double corr22 = o[2][2].getValue() - m[2][2].getValue();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,1111,final double corr00 = o[0][0].getReal() - m[0][0].getReal();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,1112,final double corr01 = o[0][1].getReal() - m[0][1].getReal();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,1113,final double corr02 = o[0][2].getReal() - m[0][2].getReal();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,1114,final double corr10 = o[1][0].getReal() - m[1][0].getReal();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,1115,final double corr11 = o[1][1].getReal() - m[1][1].getReal();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,1116,final double corr12 = o[1][2].getReal() - m[1][2].getReal();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,1117,final double corr20 = o[2][0].getReal() - m[2][0].getReal();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,1118,final double corr21 = o[2][1].getReal() - m[2][1].getReal();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,1119,final double corr22 = o[2][2].getReal() - m[2][2].getReal();
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,1214,"ublic static DerivativeStructure distance(final RotationDS r1, final RotationDS r2) {"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java,1175,"public static <T extends ExtendedFieldElement<T>> T distance(final FieldRotation<T> r1, final FieldRotation<T> r2) {"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,18,package org.apache.commons.math3.geometry.euclidean.threed;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,20,import java.io.Serializable;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,21,import java.text.NumberFormat;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,23,import org.apache.commons.math3.ExtendedFieldElement;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,24,import org.apache.commons.math3.exception.DimensionMismatchException;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,25,import org.apache.commons.math3.exception.MathArithmeticException;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,26,import org.apache.commons.math3.exception.util.LocalizedFormats;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,27,import org.apache.commons.math3.util.FastMath;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,28,import org.apache.commons.math3.util.MathArrays;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,31,* This class is a re-implementation of {@link Vector3D} using {@link ExtendedFieldElement}.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,32,* <p>Instance of this class are guaranteed to be immutable.</p>
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,33,* @param <T> the type of the field elements
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,34,* @version $Id$
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,35,* @since 3.2
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,37,public class FieldVector3D<T extends ExtendedFieldElement<T>> implements Serializable {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,39,/** Serializable version identifier. */
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,40,private static final long serialVersionUID = 20130224L;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,42,/** Abscissa. */
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,43,private final T x;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,45,/** Ordinate. */
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,46,private final T y;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,48,/** Height. */
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,49,private final T z;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,51,/** Simple constructor.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,52,* Build a vector from its coordinates
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,53,* @param x abscissa
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,54,* @param y ordinate
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,55,* @param z height
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,56,* @see #getX()
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,57,* @see #getY()
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,58,* @see #getZ()
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,60,"public FieldVector3D(final T x, final T y, final T z) {"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,61,this.x = x;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,62,this.y = y;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,63,this.z = z;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,66,/** Simple constructor.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,67,* Build a vector from its coordinates
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,68,* @param v coordinates array
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,69,* @exception DimensionMismatchException if array does not have 3 elements
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,70,* @see #toArray()
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,72,public FieldVector3D(final T[] v) throws DimensionMismatchException {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,73,if (v.length != 3) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,74,"throw new DimensionMismatchException(v.length, 3);"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,76,this.x = v[0];
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,77,this.y = v[1];
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,78,this.z = v[2];
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,81,/** Simple constructor.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,82,* Build a vector from its azimuthal coordinates
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,83,* @param alpha azimuth (&alpha;) around Z
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,84,"*              (0 is +X, &pi;/2 is +Y, &pi; is -X and 3&pi;/2 is -Y)"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,85,"* @param delta elevation (&delta;) above (XY) plane, from -&pi;/2 to +&pi;/2"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,86,* @see #getAlpha()
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,87,* @see #getDelta()
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,89,"public FieldVector3D(final T alpha, final T delta) {"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,90,T cosDelta = delta.cos();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,91,this.x = alpha.cos().multiply(cosDelta);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,92,this.y = alpha.sin().multiply(cosDelta);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,93,this.z = delta.sin();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,96,/** Multiplicative constructor
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,97,* Build a vector from another one and a scale factor.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,98,* The vector built will be a * u
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,99,* @param a scale factor
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,100,* @param u base (unscaled) vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,102,"public FieldVector3D(final T a, final FieldVector3D<T>u) {"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,103,this.x = a.multiply(u.x);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,104,this.y = a.multiply(u.y);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,105,this.z = a.multiply(u.z);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,108,/** Multiplicative constructor
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,109,* Build a vector from another one and a scale factor.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,110,* The vector built will be a * u
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,111,* @param a scale factor
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,112,* @param u base (unscaled) vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,114,"public FieldVector3D(final T a, final Vector3D u) {"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,115,this.x = a.multiply(u.getX());
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,116,this.y = a.multiply(u.getY());
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,117,this.z = a.multiply(u.getZ());
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,120,/** Multiplicative constructor
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,121,* Build a vector from another one and a scale factor.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,122,* The vector built will be a * u
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,123,* @param a scale factor
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,124,* @param u base (unscaled) vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,126,"public FieldVector3D(final double a, final FieldVector3D<T> u) {"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,127,this.x = u.x.multiply(a);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,128,this.y = u.y.multiply(a);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,129,this.z = u.z.multiply(a);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,132,/** Linear constructor
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,133,* Build a vector from two other ones and corresponding scale factors.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,134,* The vector built will be a1 * u1 + a2 * u2
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,135,* @param a1 first scale factor
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,136,* @param u1 first base (unscaled) vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,137,* @param a2 second scale factor
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,138,* @param u2 second base (unscaled) vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,140,"public FieldVector3D(final T a1, final FieldVector3D<T> u1,"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,141,"final T a2, final FieldVector3D<T> u2) {"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,142,final T prototype = a1;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,143,"this.x = prototype.linearCombination(a1, u1.getX(), a2, u2.getX());"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,144,"this.y = prototype.linearCombination(a1, u1.getY(), a2, u2.getY());"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,145,"this.z = prototype.linearCombination(a1, u1.getZ(), a2, u2.getZ());"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,148,/** Linear constructor
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,149,* Build a vector from two other ones and corresponding scale factors.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,150,* The vector built will be a1 * u1 + a2 * u2
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,151,* @param a1 first scale factor
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,152,* @param u1 first base (unscaled) vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,153,* @param a2 second scale factor
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,154,* @param u2 second base (unscaled) vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,156,"public FieldVector3D(final T a1, final Vector3D u1,"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,157,"final T a2, final Vector3D u2) {"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,158,final T prototype = a1;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,159,"this.x = prototype.linearCombination(u1.getX(), a1, u2.getX(), a2);"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,160,"this.y = prototype.linearCombination(u1.getY(), a1, u2.getY(), a2);"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,161,"this.z = prototype.linearCombination(u1.getZ(), a1, u2.getZ(), a2);"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,164,/** Linear constructor
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,165,* Build a vector from two other ones and corresponding scale factors.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,166,* The vector built will be a1 * u1 + a2 * u2
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,167,* @param a1 first scale factor
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,168,* @param u1 first base (unscaled) vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,169,* @param a2 second scale factor
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,170,* @param u2 second base (unscaled) vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,172,"public FieldVector3D(final double a1, final FieldVector3D<T> u1,"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,173,"final double a2, final FieldVector3D<T> u2) {"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,174,final T prototype = u1.getX();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,175,"this.x = prototype.linearCombination(a1, u1.getX(), a2, u2.getX());"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,176,"this.y = prototype.linearCombination(a1, u1.getY(), a2, u2.getY());"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,177,"this.z = prototype.linearCombination(a1, u1.getZ(), a2, u2.getZ());"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,180,/** Linear constructor
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,181,* Build a vector from three other ones and corresponding scale factors.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,182,* The vector built will be a1 * u1 + a2 * u2 + a3 * u3
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,183,* @param a1 first scale factor
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,184,* @param u1 first base (unscaled) vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,185,* @param a2 second scale factor
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,186,* @param u2 second base (unscaled) vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,187,* @param a3 third scale factor
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,188,* @param u3 third base (unscaled) vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,190,"public FieldVector3D(final T a1, final FieldVector3D<T> u1,"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,191,"final T a2, final FieldVector3D<T> u2,"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,192,"final T a3, final FieldVector3D<T> u3) {"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,193,final T prototype = a1;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,194,"this.x = prototype.linearCombination(a1, u1.getX(), a2, u2.getX(), a3, u3.getX());"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,195,"this.y = prototype.linearCombination(a1, u1.getY(), a2, u2.getY(), a3, u3.getY());"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,196,"this.z = prototype.linearCombination(a1, u1.getZ(), a2, u2.getZ(), a3, u3.getZ());"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,199,/** Linear constructor
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,200,* Build a vector from three other ones and corresponding scale factors.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,201,* The vector built will be a1 * u1 + a2 * u2 + a3 * u3
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,202,* @param a1 first scale factor
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,203,* @param u1 first base (unscaled) vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,204,* @param a2 second scale factor
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,205,* @param u2 second base (unscaled) vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,206,* @param a3 third scale factor
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,207,* @param u3 third base (unscaled) vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,209,"public FieldVector3D(final T a1, final Vector3D u1,"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,210,"final T a2, final Vector3D u2,"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,211,"final T a3, final Vector3D u3) {"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,212,final T prototype = a1;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,213,"this.x = prototype.linearCombination(u1.getX(), a1, u2.getX(), a2, u3.getX(), a3);"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,214,"this.y = prototype.linearCombination(u1.getY(), a1, u2.getY(), a2, u3.getY(), a3);"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,215,"this.z = prototype.linearCombination(u1.getZ(), a1, u2.getZ(), a2, u3.getZ(), a3);"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,218,/** Linear constructor
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,219,* Build a vector from three other ones and corresponding scale factors.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,220,* The vector built will be a1 * u1 + a2 * u2 + a3 * u3
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,221,* @param a1 first scale factor
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,222,* @param u1 first base (unscaled) vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,223,* @param a2 second scale factor
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,224,* @param u2 second base (unscaled) vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,225,* @param a3 third scale factor
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,226,* @param u3 third base (unscaled) vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,228,"public FieldVector3D(final double a1, final FieldVector3D<T> u1,"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,229,"final double a2, final FieldVector3D<T> u2,"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,230,"final double a3, final FieldVector3D<T> u3) {"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,231,final T prototype = u1.getX();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,232,"this.x = prototype.linearCombination(a1, u1.getX(), a2, u2.getX(), a3, u3.getX());"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,233,"this.y = prototype.linearCombination(a1, u1.getY(), a2, u2.getY(), a3, u3.getY());"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,234,"this.z = prototype.linearCombination(a1, u1.getZ(), a2, u2.getZ(), a3, u3.getZ());"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,237,/** Linear constructor
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,238,* Build a vector from four other ones and corresponding scale factors.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,239,* The vector built will be a1 * u1 + a2 * u2 + a3 * u3 + a4 * u4
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,240,* @param a1 first scale factor
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,241,* @param u1 first base (unscaled) vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,242,* @param a2 second scale factor
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,243,* @param u2 second base (unscaled) vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,244,* @param a3 third scale factor
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,245,* @param u3 third base (unscaled) vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,246,* @param a4 fourth scale factor
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,247,* @param u4 fourth base (unscaled) vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,249,"public FieldVector3D(final T a1, final FieldVector3D<T> u1,"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,250,"final T a2, final FieldVector3D<T> u2,"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,251,"final T a3, final FieldVector3D<T> u3,"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,252,"final T a4, final FieldVector3D<T> u4) {"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,253,final T prototype = a1;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,254,"this.x = prototype.linearCombination(a1, u1.getX(), a2, u2.getX(), a3, u3.getX(), a4, u4.getX());"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,255,"this.y = prototype.linearCombination(a1, u1.getY(), a2, u2.getY(), a3, u3.getY(), a4, u4.getY());"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,256,"this.z = prototype.linearCombination(a1, u1.getZ(), a2, u2.getZ(), a3, u3.getZ(), a4, u4.getZ());"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,259,/** Linear constructor
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,260,* Build a vector from four other ones and corresponding scale factors.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,261,* The vector built will be a1 * u1 + a2 * u2 + a3 * u3 + a4 * u4
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,262,* @param a1 first scale factor
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,263,* @param u1 first base (unscaled) vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,264,* @param a2 second scale factor
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,265,* @param u2 second base (unscaled) vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,266,* @param a3 third scale factor
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,267,* @param u3 third base (unscaled) vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,268,* @param a4 fourth scale factor
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,269,* @param u4 fourth base (unscaled) vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,271,"public FieldVector3D(final T a1, final Vector3D u1,"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,272,"final T a2, final Vector3D u2,"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,273,"final T a3, final Vector3D u3,"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,274,"final T a4, final Vector3D u4) {"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,275,final T prototype = a1;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,276,"this.x = prototype.linearCombination(u1.getX(), a1, u2.getX(), a2, u3.getX(), a3, u4.getX(), a4);"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,277,"this.y = prototype.linearCombination(u1.getY(), a1, u2.getY(), a2, u3.getY(), a3, u4.getY(), a4);"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,278,"this.z = prototype.linearCombination(u1.getZ(), a1, u2.getZ(), a2, u3.getZ(), a3, u4.getZ(), a4);"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,281,/** Linear constructor
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,282,* Build a vector from four other ones and corresponding scale factors.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,283,* The vector built will be a1 * u1 + a2 * u2 + a3 * u3 + a4 * u4
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,284,* @param a1 first scale factor
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,285,* @param u1 first base (unscaled) vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,286,* @param a2 second scale factor
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,287,* @param u2 second base (unscaled) vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,288,* @param a3 third scale factor
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,289,* @param u3 third base (unscaled) vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,290,* @param a4 fourth scale factor
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,291,* @param u4 fourth base (unscaled) vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,293,"public FieldVector3D(final double a1, final FieldVector3D<T> u1,"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,294,"final double a2, final FieldVector3D<T> u2,"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,295,"final double a3, final FieldVector3D<T> u3,"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,296,"final double a4, final FieldVector3D<T> u4) {"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,297,final T prototype = u1.getX();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,298,"this.x = prototype.linearCombination(a1, u1.getX(), a2, u2.getX(), a3, u3.getX(), a4, u4.getX());"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,299,"this.y = prototype.linearCombination(a1, u1.getY(), a2, u2.getY(), a3, u3.getY(), a4, u4.getY());"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,300,"this.z = prototype.linearCombination(a1, u1.getZ(), a2, u2.getZ(), a3, u3.getZ(), a4, u4.getZ());"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,303,/** Get the abscissa of the vector.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,304,* @return abscissa of the vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,305,"* @see #Vector3D(T, T, T)"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,307,public T getX() {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,308,return x;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,311,/** Get the ordinate of the vector.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,312,* @return ordinate of the vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,313,"* @see #Vector3D(T, T, T)"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,315,public T getY() {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,316,return y;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,319,/** Get the height of the vector.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,320,* @return height of the vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,321,"* @see #Vector3D(T, T, T)"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,323,public T getZ() {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,324,return z;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,327,/** Get the vector coordinates as a dimension 3 array.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,328,* @return vector coordinates
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,329,* @see #Vector3D(T[])
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,331,public T[] toArray() {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,332,"final T[] array = MathArrays.buildArray(x.getField(), 3);"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,333,array[0] = x;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,334,array[1] = y;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,335,array[2] = z;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,336,return array;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,339,/** Convert to a constant vector without derivatives.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,340,* @return a constant vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,342,public Vector3D toVector3D() {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,343,"return new Vector3D(x.getReal(), y.getReal(), z.getReal());"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,346,/** Get the L<sub>1</sub> norm for the vector.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,347,* @return L<sub>1</sub> norm for the vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,349,public T getNorm1() {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,350,return x.abs().add(y.abs()).add(z.abs());
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,353,/** Get the L<sub>2</sub> norm for the vector.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,354,* @return Euclidean norm for the vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,356,public T getNorm() {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,357,"// there are no cancellation problems here, so we use the straightforward formula"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,358,return x.multiply(x).add(y.multiply(y)).add(z.multiply(z)).sqrt();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,361,/** Get the square of the norm for the vector.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,362,* @return square of the Euclidean norm for the vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,364,public T getNormSq() {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,365,"// there are no cancellation problems here, so we use the straightforward formula"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,366,return x.multiply(x).add(y.multiply(y)).add(z.multiply(z));
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,369,/** Get the L<sub>&infin;</sub> norm for the vector.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,370,* @return L<sub>&infin;</sub> norm for the vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,372,public T getNormInf() {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,373,final T xAbs = x.abs();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,374,final T yAbs = y.abs();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,375,final T zAbs = z.abs();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,376,if (xAbs.getReal() <= yAbs.getReal()) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,377,if (yAbs.getReal() <= zAbs.getReal()) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,378,return zAbs;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,379,} else {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,380,return yAbs;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,382,} else {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,383,if (xAbs.getReal() <= zAbs.getReal()) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,384,return zAbs;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,385,} else {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,386,return xAbs;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,391,/** Get the azimuth of the vector.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,392,"* @return azimuth (&alpha;) of the vector, between -&pi; and +&pi;"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,393,"* @see #Vector3D(T, T)"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,395,public T getAlpha() {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,396,return y.atan2(x);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,399,/** Get the elevation of the vector.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,400,"* @return elevation (&delta;) of the vector, between -&pi;/2 and +&pi;/2"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,401,"* @see #Vector3D(T, T)"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,403,public T getDelta() {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,404,return z.divide(getNorm()).asin();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,407,/** Add a vector to the instance.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,408,* @param v vector to add
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,409,* @return a new vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,411,public FieldVector3D<T> add(final FieldVector3D<T> v) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,412,"return new FieldVector3D<T>(x.add(v.x), y.add(v.y), z.add(v.z));"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,415,/** Add a vector to the instance.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,416,* @param v vector to add
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,417,* @return a new vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,419,public FieldVector3D<T> add(final Vector3D v) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,420,"return new FieldVector3D<T>(x.add(v.getX()), y.add(v.getY()), z.add(v.getZ()));"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,423,/** Add a scaled vector to the instance.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,424,* @param factor scale factor to apply to v before adding it
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,425,* @param v vector to add
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,426,* @return a new vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,428,"public FieldVector3D<T> add(final T factor, final FieldVector3D<T> v) {"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,429,"return new FieldVector3D<T>(x.getField().getOne(), this, factor, v);"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,432,/** Add a scaled vector to the instance.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,433,* @param factor scale factor to apply to v before adding it
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,434,* @param v vector to add
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,435,* @return a new vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,437,"public FieldVector3D<T> add(final T factor, final Vector3D v) {"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,438,"return new FieldVector3D<T>(x.add(factor.multiply(v.getX())),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,439,"y.add(factor.multiply(v.getY())),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,440,z.add(factor.multiply(v.getZ())));
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,443,/** Add a scaled vector to the instance.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,444,* @param factor scale factor to apply to v before adding it
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,445,* @param v vector to add
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,446,* @return a new vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,448,"public FieldVector3D<T> add(final double factor, final FieldVector3D<T> v) {"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,449,"return new FieldVector3D<T>(1.0, this, factor, v);"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,452,/** Add a scaled vector to the instance.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,453,* @param factor scale factor to apply to v before adding it
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,454,* @param v vector to add
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,455,* @return a new vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,457,"public FieldVector3D<T> add(final double factor, final Vector3D v) {"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,458,"return new FieldVector3D<T>(x.add(factor * v.getX()),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,459,"y.add(factor * v.getY()),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,460,z.add(factor * v.getZ()));
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,463,/** Subtract a vector from the instance.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,464,* @param v vector to subtract
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,465,* @return a new vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,467,public FieldVector3D<T> subtract(final FieldVector3D<T> v) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,468,"return new FieldVector3D<T>(x.subtract(v.x), y.subtract(v.y), z.subtract(v.z));"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,471,/** Subtract a vector from the instance.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,472,* @param v vector to subtract
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,473,* @return a new vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,475,public FieldVector3D<T> subtract(final Vector3D v) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,476,"return new FieldVector3D<T>(x.subtract(v.getX()), y.subtract(v.getY()), z.subtract(v.getZ()));"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,479,/** Subtract a scaled vector from the instance.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,480,* @param factor scale factor to apply to v before subtracting it
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,481,* @param v vector to subtract
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,482,* @return a new vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,484,"public FieldVector3D<T> subtract(final T factor, final FieldVector3D<T> v) {"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,485,"return new FieldVector3D<T>(x.getField().getOne(), this, factor.negate(), v);"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,488,/** Subtract a scaled vector from the instance.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,489,* @param factor scale factor to apply to v before subtracting it
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,490,* @param v vector to subtract
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,491,* @return a new vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,493,"public FieldVector3D<T> subtract(final T factor, final Vector3D v) {"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,494,"return new FieldVector3D<T>(x.subtract(factor.multiply(v.getX())),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,495,"y.subtract(factor.multiply(v.getY())),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,496,z.subtract(factor.multiply(v.getZ())));
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,499,/** Subtract a scaled vector from the instance.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,500,* @param factor scale factor to apply to v before subtracting it
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,501,* @param v vector to subtract
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,502,* @return a new vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,504,"public FieldVector3D<T> subtract(final double factor, final FieldVector3D<T> v) {"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,505,"return new FieldVector3D<T>(1.0, this, -factor, v);"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,508,/** Subtract a scaled vector from the instance.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,509,* @param factor scale factor to apply to v before subtracting it
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,510,* @param v vector to subtract
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,511,* @return a new vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,513,"public FieldVector3D<T> subtract(final double factor, final Vector3D v) {"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,514,"return new FieldVector3D<T>(x.subtract(factor * v.getX()),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,515,"y.subtract(factor * v.getY()),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,516,z.subtract(factor * v.getZ()));
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,519,/** Get a normalized vector aligned with the instance.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,520,* @return a new normalized vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,521,* @exception MathArithmeticException if the norm is zero
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,523,public FieldVector3D<T> normalize() throws MathArithmeticException {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,524,final T s = getNorm();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,525,if (s.getReal() == 0) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,526,throw new MathArithmeticException(LocalizedFormats.CANNOT_NORMALIZE_A_ZERO_NORM_VECTOR);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,528,return scalarMultiply(s.reciprocal());
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,531,/** Get a vector orthogonal to the instance.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,532,* <p>There are an infinite number of normalized vectors orthogonal
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,533,* to the instance. This method picks up one of them almost
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,534,* arbitrarily. It is useful when one needs to compute a reference
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,535,* frame with one of the axes in a predefined direction. The
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,536,* following example shows how to build a frame having the k axis
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,537,* aligned with the known vector u :
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,538,* <pre><code>
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,539,*   Vector3D k = u.normalize();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,540,*   Vector3D i = k.orthogonal();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,541,"*   Vector3D j = Vector3D.crossProduct(k, i);"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,542,* </code></pre></p>
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,543,* @return a new normalized vector orthogonal to the instance
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,544,* @exception MathArithmeticException if the norm of the instance is null
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,546,public FieldVector3D<T> orthogonal() throws MathArithmeticException {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,548,final double threshold = 0.6 * getNorm().getReal();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,549,if (threshold == 0) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,550,throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,553,if (FastMath.abs(x.getReal()) <= threshold) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,554,final T inverse  = y.multiply(y).add(z.multiply(z)).sqrt().reciprocal();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,555,"return new FieldVector3D<T>(inverse.getField().getZero(), inverse.multiply(z), inverse.multiply(y).negate());"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,556,} else if (FastMath.abs(y.getReal()) <= threshold) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,557,final T inverse  = x.multiply(x).add(z.multiply(z)).sqrt().reciprocal();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,558,"return new FieldVector3D<T>(inverse.multiply(z).negate(), inverse.getField().getZero(), inverse.multiply(x));"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,559,} else {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,560,final T inverse  = x.multiply(x).add(y.multiply(y)).sqrt().reciprocal();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,561,"return new FieldVector3D<T>(inverse.multiply(y), inverse.multiply(x).negate(), inverse.getField().getZero());"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,566,/** Compute the angular separation between the instance and another vector.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,567,* <p>This method computes the angular separation between two
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,568,* vectors using the dot product for well separated vectors and the
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,569,* cross product for almost aligned vectors. This allows to have a
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,570,"* good accuracy in all cases, even for vectors very close to each"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,571,* other.</p>
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,572,* @param v second vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,573,* @return angular separation between the instance and v
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,574,* @exception MathArithmeticException if either vector has a null norm
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,576,public T angle(FieldVector3D<T> v) throws MathArithmeticException {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,578,final T normProduct = getNorm().multiply(v.getNorm());
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,579,if (normProduct.getReal() == 0) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,580,throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,583,final T dot = dotProduct(v);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,584,final double threshold = normProduct.getReal() * 0.9999;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,585,if ((dot.getReal() < -threshold) || (dot.getReal() > threshold)) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,586,"// the vectors are almost aligned, compute using the sine"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,587,FieldVector3D<T> v3 = crossProduct(v);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,588,if (dot.getReal() >= 0) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,589,return v3.getNorm().divide(normProduct).asin();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,591,return v3.getNorm().divide(normProduct).asin().subtract(FastMath.PI).negate();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,594,// the vectors are sufficiently separated to use the cosine
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,595,return dot.divide(normProduct).acos();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,599,/** Get the opposite of the instance.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,600,* @return a new vector which is opposite to the instance
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,602,public FieldVector3D<T> negate() {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,603,"return new FieldVector3D<T>(x.negate(), y.negate(), z.negate());"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,606,/** Multiply the instance by a scalar.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,607,* @param a scalar
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,608,* @return a new vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,610,public FieldVector3D<T> scalarMultiply(final T a) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,611,"return new FieldVector3D<T>(x.multiply(a), y.multiply(a), z.multiply(a));"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,614,/** Multiply the instance by a scalar.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,615,* @param a scalar
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,616,* @return a new vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,618,public FieldVector3D<T> scalarMultiply(final double a) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,619,"return new FieldVector3D<T>(x.multiply(a), y.multiply(a), z.multiply(a));"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,623,* Returns true if any coordinate of this vector is NaN; false otherwise
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,624,* @return  true if any coordinate of this vector is NaN; false otherwise
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,626,public boolean isNaN() {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,627,return Double.isNaN(x.getReal()) || Double.isNaN(y.getReal()) || Double.isNaN(z.getReal());
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,631,* Returns true if any coordinate of this vector is infinite and none are NaN;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,632,* false otherwise
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,633,* @return  true if any coordinate of this vector is infinite and none are NaN;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,634,* false otherwise
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,636,public boolean isInfinite() {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,637,return !isNaN() && (Double.isInfinite(x.getReal()) || Double.isInfinite(y.getReal()) || Double.isInfinite(z.getReal()));
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,641,* Test for the equality of two 3D vectors.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,642,* <p>
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,643,"* If all coordinates of two 3D vectors are exactly the same, and none are"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,644,"* <code>T.NaN</code>, the two 3D vectors are considered to be equal."
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,645,* </p>
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,646,* <p>
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,647,* <code>NaN</code> coordinates are considered to affect globally the vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,648,"* and be equals to each other - i.e, if either (or all) coordinates of the"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,649,"* 3D vector are equal to <code>T.NaN</code>, the 3D vector is equal to"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,650,* {@link #NaN}.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,651,* </p>
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,653,* @param other Object to test for equality to this
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,654,"* @return true if two 3D vector objects are equal, false if"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,655,"*         object is null, not an instance of Vector3D, or"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,656,*         not equal to this Vector3D instance
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,659,@Override
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,660,public boolean equals(Object other) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,662,if (this == other) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,663,return true;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,666,if (other instanceof FieldVector3D) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,667,"@SuppressWarnings(""unchecked"")"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,668,final FieldVector3D<T> rhs = (FieldVector3D<T>) other;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,669,if (rhs.isNaN()) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,670,return this.isNaN();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,673,return x.equals(rhs.x) && y.equals(rhs.y) && z.equals(rhs.z);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,676,return false;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,680,* Get a hashCode for the 3D vector.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,681,* <p>
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,682,* All NaN values have the same hash code.</p>
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,684,* @return a hash code value for this object
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,686,@Override
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,687,public int hashCode() {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,688,if (isNaN()) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,689,return 409;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,691,return 311 * (107 * x.hashCode() + 83 * y.hashCode() +  z.hashCode());
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,694,/** Compute the dot-product of the instance and another vector.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,695,* <p>
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,696,* The implementation uses specific multiplication and addition
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,697,* algorithms to preserve accuracy and reduce cancellation effects.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,698,* It should be very accurate even for nearly orthogonal vectors.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,699,* </p>
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,700,"* @see MathArrays#linearCombination(double, double, double, double, double, double)"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,701,* @param v second vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,702,* @return the dot product this.v
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,704,public T dotProduct(final FieldVector3D<T> v) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,705,"return x.linearCombination(x, v.x, y, v.y, z, v.z);"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,708,/** Compute the dot-product of the instance and another vector.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,709,* <p>
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,710,* The implementation uses specific multiplication and addition
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,711,* algorithms to preserve accuracy and reduce cancellation effects.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,712,* It should be very accurate even for nearly orthogonal vectors.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,713,* </p>
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,714,"* @see MathArrays#linearCombination(double, double, double, double, double, double)"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,715,* @param v second vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,716,* @return the dot product this.v
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,718,public T dotProduct(final Vector3D v) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,719,"return x.linearCombination(v.getX(), x, v.getY(), y, v.getZ(), z);"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,722,/** Compute the cross-product of the instance with another vector.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,723,* @param v other vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,724,* @return the cross product this ^ v as a new Vector3D
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,726,public FieldVector3D<T> crossProduct(final FieldVector3D<T> v) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,727,"return new FieldVector3D<T>(x.linearCombination(y, v.z, z.negate(), v.y),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,728,"y.linearCombination(z, v.x, x.negate(), v.z),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,729,"z.linearCombination(x, v.y, y.negate(), v.x));"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,732,/** Compute the cross-product of the instance with another vector.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,733,* @param v other vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,734,* @return the cross product this ^ v as a new Vector3D
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,736,public FieldVector3D<T> crossProduct(final Vector3D v) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,737,"return new FieldVector3D<T>(x.linearCombination(v.getZ(), y, -v.getY(), z),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,738,"y.linearCombination(v.getX(), z, -v.getZ(), x),"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,739,"z.linearCombination(v.getY(), x, -v.getX(), y));"
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,742,/** Compute the distance between the instance and another vector according to the L<sub>1</sub> norm.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,743,* <p>Calling this method is equivalent to calling:
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,744,* <code>q.subtract(p).getNorm1()</code> except that no intermediate
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,745,* vector is built</p>
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,746,* @param v second vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,747,* @return the distance between the instance and p according to the L<sub>1</sub> norm
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,749,public T distance1(final FieldVector3D<T> v) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,750,final T dx = v.x.subtract(x).abs();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,751,final T dy = v.y.subtract(y).abs();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,752,final T dz = v.z.subtract(z).abs();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,753,return dx.add(dy).add(dz);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,756,/** Compute the distance between the instance and another vector according to the L<sub>1</sub> norm.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,757,* <p>Calling this method is equivalent to calling:
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,758,* <code>q.subtract(p).getNorm1()</code> except that no intermediate
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,759,* vector is built</p>
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,760,* @param v second vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,761,* @return the distance between the instance and p according to the L<sub>1</sub> norm
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,763,public T distance1(final Vector3D v) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,764,final T dx = x.subtract(v.getX()).abs();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,765,final T dy = y.subtract(v.getY()).abs();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,766,final T dz = z.subtract(v.getZ()).abs();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,767,return dx.add(dy).add(dz);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,770,/** Compute the distance between the instance and another vector according to the L<sub>2</sub> norm.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,771,* <p>Calling this method is equivalent to calling:
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,772,* <code>q.subtract(p).getNorm()</code> except that no intermediate
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,773,* vector is built</p>
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,774,* @param v second vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,775,* @return the distance between the instance and p according to the L<sub>2</sub> norm
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,777,public T distance(final FieldVector3D<T> v) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,778,final T dx = v.x.subtract(x);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,779,final T dy = v.y.subtract(y);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,780,final T dz = v.z.subtract(z);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,781,return dx.multiply(dx).add(dy.multiply(dy)).add(dz.multiply(dz)).sqrt();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,784,/** Compute the distance between the instance and another vector according to the L<sub>2</sub> norm.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,785,* <p>Calling this method is equivalent to calling:
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,786,* <code>q.subtract(p).getNorm()</code> except that no intermediate
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,787,* vector is built</p>
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,788,* @param v second vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,789,* @return the distance between the instance and p according to the L<sub>2</sub> norm
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,791,public T distance(final Vector3D v) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,792,final T dx = x.subtract(v.getX());
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,793,final T dy = y.subtract(v.getY());
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,794,final T dz = z.subtract(v.getZ());
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,795,return dx.multiply(dx).add(dy.multiply(dy)).add(dz.multiply(dz)).sqrt();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,798,/** Compute the distance between the instance and another vector according to the L<sub>&infin;</sub> norm.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,799,* <p>Calling this method is equivalent to calling:
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,800,* <code>q.subtract(p).getNormInf()</code> except that no intermediate
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,801,* vector is built</p>
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,802,* @param v second vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,803,* @return the distance between the instance and p according to the L<sub>&infin;</sub> norm
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,805,public T distanceInf(final FieldVector3D<T> v) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,806,final T dx = v.x.subtract(x).abs();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,807,final T dy = v.y.subtract(y).abs();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,808,final T dz = v.z.subtract(z).abs();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,809,if (dx.getReal() <= dy.getReal()) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,810,if (dy.getReal() <= dz.getReal()) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,811,return dz;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,812,} else {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,813,return dy;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,815,} else {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,816,if (dx.getReal() <= dz.getReal()) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,817,return dz;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,818,} else {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,819,return dx;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,824,/** Compute the distance between the instance and another vector according to the L<sub>&infin;</sub> norm.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,825,* <p>Calling this method is equivalent to calling:
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,826,* <code>q.subtract(p).getNormInf()</code> except that no intermediate
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,827,* vector is built</p>
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,828,* @param v second vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,829,* @return the distance between the instance and p according to the L<sub>&infin;</sub> norm
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,831,public T distanceInf(final Vector3D v) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,832,final T dx = x.subtract(v.getX()).abs();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,833,final T dy = y.subtract(v.getY()).abs();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,834,final T dz = z.subtract(v.getZ()).abs();
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,835,if (dx.getReal() <= dy.getReal()) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,836,if (dy.getReal() <= dz.getReal()) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,837,return dz;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,838,} else {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,839,return dy;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,841,} else {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,842,if (dx.getReal() <= dz.getReal()) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,843,return dz;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,844,} else {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,845,return dx;
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,850,/** Compute the square of the distance between the instance and another vector.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,851,* <p>Calling this method is equivalent to calling:
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,852,* <code>q.subtract(p).getNormSq()</code> except that no intermediate
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,853,* vector is built</p>
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,854,* @param v second vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,855,* @return the square of the distance between the instance and p
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,857,public T distanceSq(final FieldVector3D<T> v) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,858,final T dx = v.x.subtract(x);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,859,final T dy = v.y.subtract(y);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,860,final T dz = v.z.subtract(z);
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,861,return dx.multiply(dx).add(dy.multiply(dy)).add(dz.multiply(dz));
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,864,/** Compute the square of the distance between the instance and another vector.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,865,* <p>Calling this method is equivalent to calling:
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,866,* <code>q.subtract(p).getNormSq()</code> except that no intermediate
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,867,* vector is built</p>
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,868,* @param v second vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,869,* @return the square of the distance between the instance and p
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,871,public T distanceSq(final Vector3D v) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,872,final T dx = x.subtract(v.getX());
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,873,final T dy = y.subtract(v.getY());
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,874,final T dz = z.subtract(v.getZ());
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,875,return dx.multiply(dx).add(dy.multiply(dy)).add(dz.multiply(dz));
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,878,/** Get a string representation of this vector.
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,879,* @return a string representation of this vector
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,881,@Override
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,882,public String toString() {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,883,return Vector3DFormat.getInstance().format(toVector3D());
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,886,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,887,public String toString(final NumberFormat format) {
True,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java,888,return new Vector3DFormat(format).format(toVector3D());
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,4, this work for additional information regarding copyright ownership.
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,7, the License.  You may obtain a copy of the License at
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,14, See the License for the specific language governing permissions and
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,15, limitations under the License.
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,18,ackage org.apache.commons.math3.geometry.euclidean.threed;
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,20,mport java.io.Serializable;
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,21,mport java.text.NumberFormat;
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,23,mport org.apache.commons.math3.analysis.differentiation.DerivativeStructure;
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,24,mport org.apache.commons.math3.exception.DimensionMismatchException;
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,25,mport org.apache.commons.math3.exception.MathArithmeticException;
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,26,mport org.apache.commons.math3.exception.util.LocalizedFormats;
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,27,mport org.apache.commons.math3.util.FastMath;
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,28,mport org.apache.commons.math3.util.MathArrays;
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,31, This class is a re-implementation of {@link Vector3D} using {@link DerivativeStructure}.
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,32, <p>Instance of this class are guaranteed to be immutable.</p>
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,33, @version $Id$
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,34, @since 3.2
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,36,ublic class Vector3DDS implements Serializable {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,38,** Serializable version identifier. */
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,39,rivate static final long serialVersionUID = 20130214L;
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,41,** Abscissa. */
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,42,rivate final DerivativeStructure x;
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,44,** Ordinate. */
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,45,rivate final DerivativeStructure y;
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,47,** Height. */
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,48,rivate final DerivativeStructure z;
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,50,** Simple constructor.
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,51, Build a vector from its coordinates
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,52, @param x abscissa
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,53, @param y ordinate
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,54, @param z height
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,55, @see #getX()
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,56, @see #getY()
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,57, @see #getZ()
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,59,"ublic Vector3DDS(final DerivativeStructure x,"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,60,"inal DerivativeStructure y,"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,61,inal DerivativeStructure z) {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,62,his.x = x;
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,63,his.y = y;
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,64,his.z = z;
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,67,** Simple constructor.
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,68, Build a vector from its coordinates
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,69, @param v coordinates array
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,70, @exception DimensionMismatchException if array does not have 3 elements
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,71, @see #toArray()
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,73,ublic Vector3DDS(final DerivativeStructure[] v) throws DimensionMismatchException {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,74,f (v.length != 3) {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,75,"hrow new DimensionMismatchException(v.length, 3);"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,77,his.x = v[0];
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,78,his.y = v[1];
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,79,his.z = v[2];
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,82,** Simple constructor.
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,83, Build a vector from its azimuthal coordinates
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,84, @param alpha azimuth (&alpha;) around Z
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,85,"              (0 is +X, &pi;/2 is +Y, &pi; is -X and 3&pi;/2 is -Y)"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,86," @param delta elevation (&delta;) above (XY) plane, from -&pi;/2 to +&pi;/2"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,87, @see #getAlpha()
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,88, @see #getDelta()
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,90,"ublic Vector3DDS(final DerivativeStructure alpha, final DerivativeStructure delta) {"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,91,erivativeStructure cosDelta = delta.cos();
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,92,his.x = alpha.cos().multiply(cosDelta);
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,93,his.y = alpha.sin().multiply(cosDelta);
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,94,his.z = delta.sin();
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,97,** Multiplicative constructor
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,98, Build a vector from another one and a scale factor.
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,99, The vector built will be a * u
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,100, @param a scale factor
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,101, @param u base (unscaled) vector
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,103,"ublic Vector3DDS(final DerivativeStructure a, final Vector3DDS u) {"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,104,his.x = a.multiply(u.x);
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,105,his.y = a.multiply(u.y);
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,106,his.z = a.multiply(u.z);
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,109,** Multiplicative constructor
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,110, Build a vector from another one and a scale factor.
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,111, The vector built will be a * u
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,112, @param a scale factor
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,113, @param u base (unscaled) vector
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,115,"ublic Vector3DDS(final DerivativeStructure a, final Vector3D u) {"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,116,his.x = a.multiply(u.getX());
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,117,his.y = a.multiply(u.getY());
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,118,his.z = a.multiply(u.getZ());
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,121,** Multiplicative constructor
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,122, Build a vector from another one and a scale factor.
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,123, The vector built will be a * u
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,124, @param a scale factor
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,125, @param u base (unscaled) vector
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,127,"ublic Vector3DDS(final double a, final Vector3DDS u) {"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,128,his.x = u.x.multiply(a);
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,129,his.y = u.y.multiply(a);
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,130,his.z = u.z.multiply(a);
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,133,** Linear constructor
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,134, Build a vector from two other ones and corresponding scale factors.
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,135, The vector built will be a1 * u1 + a2 * u2
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,136, @param a1 first scale factor
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,137, @param u1 first base (unscaled) vector
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,138, @param a2 second scale factor
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,139, @param u2 second base (unscaled) vector
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,141,"ublic Vector3DDS(final DerivativeStructure a1, final Vector3DDS u1,"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,142,"inal DerivativeStructure a2, final Vector3DDS u2) {"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,143,his.x = a1.multiply(u1.x).add(a2.multiply(u2.x));
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,144,his.y = a1.multiply(u1.y).add(a2.multiply(u2.y));
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,145,his.z = a1.multiply(u1.z).add(a2.multiply(u2.z));
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,148,** Linear constructor
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,149, Build a vector from two other ones and corresponding scale factors.
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,150, The vector built will be a1 * u1 + a2 * u2
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,151, @param a1 first scale factor
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,152, @param u1 first base (unscaled) vector
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,153, @param a2 second scale factor
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,154, @param u2 second base (unscaled) vector
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,156,"ublic Vector3DDS(final DerivativeStructure a1, final Vector3D u1,"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,157,"inal DerivativeStructure a2, final Vector3D u2) {"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,158,his.x = a1.multiply(u1.getX()).add(a2.multiply(u2.getX()));
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,159,his.y = a1.multiply(u1.getY()).add(a2.multiply(u2.getY()));
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,160,his.z = a1.multiply(u1.getZ()).add(a2.multiply(u2.getZ()));
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,163,** Linear constructor
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,164, Build a vector from two other ones and corresponding scale factors.
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,165, The vector built will be a1 * u1 + a2 * u2
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,166, @param a1 first scale factor
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,167, @param u1 first base (unscaled) vector
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,168, @param a2 second scale factor
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,169, @param u2 second base (unscaled) vector
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,171,"ublic Vector3DDS(final double a1, final Vector3DDS u1,"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,172,"inal double a2, final Vector3DDS u2) {"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,173,his.x = u1.x.multiply(a1).add(u2.x.multiply(a2));
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,174,his.y = u1.y.multiply(a1).add(u2.y.multiply(a2));
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,175,his.z = u1.z.multiply(a1).add(u2.z.multiply(a2));
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,178,** Linear constructor
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,179, Build a vector from three other ones and corresponding scale factors.
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,180, The vector built will be a1 * u1 + a2 * u2 + a3 * u3
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,181, @param a1 first scale factor
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,182, @param u1 first base (unscaled) vector
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,183, @param a2 second scale factor
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,184, @param u2 second base (unscaled) vector
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,185, @param a3 third scale factor
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,186, @param u3 third base (unscaled) vector
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,188,"ublic Vector3DDS(final DerivativeStructure a1, final Vector3DDS u1,"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,189,"inal DerivativeStructure a2, final Vector3DDS u2,"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,190,"inal DerivativeStructure a3, final Vector3DDS u3) {"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,191,his.x = a1.multiply(u1.x).add(a2.multiply(u2.x)).add(a3.multiply(u3.x));
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,192,his.y = a1.multiply(u1.y).add(a2.multiply(u2.y)).add(a3.multiply(u3.y));
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,193,his.z = a1.multiply(u1.z).add(a2.multiply(u2.z)).add(a3.multiply(u3.z));
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,196,** Linear constructor
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,197, Build a vector from three other ones and corresponding scale factors.
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,198, The vector built will be a1 * u1 + a2 * u2 + a3 * u3
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,199, @param a1 first scale factor
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,200, @param u1 first base (unscaled) vector
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,201, @param a2 second scale factor
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,202, @param u2 second base (unscaled) vector
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,203, @param a3 third scale factor
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,204, @param u3 third base (unscaled) vector
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,206,"ublic Vector3DDS(final DerivativeStructure a1, final Vector3D u1,"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,207,"inal DerivativeStructure a2, final Vector3D u2,"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,208,"inal DerivativeStructure a3, final Vector3D u3) {"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,209,his.x = a1.multiply(u1.getX()).add(a2.multiply(u2.getX())).add(a3.multiply(u3.getX()));
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,210,his.y = a1.multiply(u1.getY()).add(a2.multiply(u2.getY())).add(a3.multiply(u3.getY()));
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,211,his.z = a1.multiply(u1.getZ()).add(a2.multiply(u2.getZ())).add(a3.multiply(u3.getZ()));
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,214,** Linear constructor
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,215, Build a vector from three other ones and corresponding scale factors.
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,216, The vector built will be a1 * u1 + a2 * u2 + a3 * u3
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,217, @param a1 first scale factor
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,218, @param u1 first base (unscaled) vector
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,219, @param a2 second scale factor
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,220, @param u2 second base (unscaled) vector
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,221, @param a3 third scale factor
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,222, @param u3 third base (unscaled) vector
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,224,"ublic Vector3DDS(final double a1, final Vector3DDS u1,"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,225,"inal double a2, final Vector3DDS u2,"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,226,"inal double a3, final Vector3DDS u3) {"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,227,his.x = u1.x.multiply(a1).add(u2.x.multiply(a2)).add(u3.x.multiply(a3));
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,228,his.y = u1.y.multiply(a1).add(u2.y.multiply(a2)).add(u3.y.multiply(a3));
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,229,his.z = u1.z.multiply(a1).add(u2.z.multiply(a2)).add(u3.z.multiply(a3));
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,232,** Linear constructor
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,233, Build a vector from four other ones and corresponding scale factors.
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,234, The vector built will be a1 * u1 + a2 * u2 + a3 * u3 + a4 * u4
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,235, @param a1 first scale factor
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,236, @param u1 first base (unscaled) vector
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,237, @param a2 second scale factor
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,238, @param u2 second base (unscaled) vector
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,239, @param a3 third scale factor
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,240, @param u3 third base (unscaled) vector
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,241, @param a4 fourth scale factor
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,242, @param u4 fourth base (unscaled) vector
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,244,"ublic Vector3DDS(final DerivativeStructure a1, final Vector3DDS u1,"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,245,"inal DerivativeStructure a2, final Vector3DDS u2,"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,246,"inal DerivativeStructure a3, final Vector3DDS u3,"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,247,"inal DerivativeStructure a4, final Vector3DDS u4) {"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,248,his.x = a1.multiply(u1.x).add(a2.multiply(u2.x)).add(a3.multiply(u3.x)).add(a4.multiply(u4.x));
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,249,his.y = a1.multiply(u1.y).add(a2.multiply(u2.y)).add(a3.multiply(u3.y)).add(a4.multiply(u4.y));
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,250,his.z = a1.multiply(u1.z).add(a2.multiply(u2.z)).add(a3.multiply(u3.z)).add(a4.multiply(u4.z));
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,253,** Linear constructor
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,254, Build a vector from four other ones and corresponding scale factors.
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,255, The vector built will be a1 * u1 + a2 * u2 + a3 * u3 + a4 * u4
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,256, @param a1 first scale factor
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,257, @param u1 first base (unscaled) vector
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,258, @param a2 second scale factor
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,259, @param u2 second base (unscaled) vector
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,260, @param a3 third scale factor
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,261, @param u3 third base (unscaled) vector
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,262, @param a4 fourth scale factor
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,263, @param u4 fourth base (unscaled) vector
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,265,"ublic Vector3DDS(final DerivativeStructure a1, final Vector3D u1,"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,266,"inal DerivativeStructure a2, final Vector3D u2,"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,267,"inal DerivativeStructure a3, final Vector3D u3,"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,268,"inal DerivativeStructure a4, final Vector3D u4) {"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,269,his.x = a1.multiply(u1.getX()).add(a2.multiply(u2.getX())).add(a3.multiply(u3.getX())).add(a4.multiply(u4.getX()));
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,270,his.y = a1.multiply(u1.getY()).add(a2.multiply(u2.getY())).add(a3.multiply(u3.getY())).add(a4.multiply(u4.getY()));
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,271,his.z = a1.multiply(u1.getZ()).add(a2.multiply(u2.getZ())).add(a3.multiply(u3.getZ())).add(a4.multiply(u4.getZ()));
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,274,** Linear constructor
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,275, Build a vector from four other ones and corresponding scale factors.
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,276, The vector built will be a1 * u1 + a2 * u2 + a3 * u3 + a4 * u4
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,277, @param a1 first scale factor
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,278, @param u1 first base (unscaled) vector
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,279, @param a2 second scale factor
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,280, @param u2 second base (unscaled) vector
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,281, @param a3 third scale factor
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,282, @param u3 third base (unscaled) vector
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,283, @param a4 fourth scale factor
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,284, @param u4 fourth base (unscaled) vector
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,286,"ublic Vector3DDS(final double a1, final Vector3DDS u1,"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,287,"inal double a2, final Vector3DDS u2,"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,288,"inal double a3, final Vector3DDS u3,"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,289,"inal double a4, final Vector3DDS u4) {"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,290,his.x = u1.x.multiply(a1).add(u2.x.multiply(a2)).add(u3.x.multiply(a3)).add(u4.x.multiply(a4));
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,291,his.y = u1.y.multiply(a1).add(u2.y.multiply(a2)).add(u3.y.multiply(a3)).add(u4.y.multiply(a4));
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,292,his.z = u1.z.multiply(a1).add(u2.z.multiply(a2)).add(u3.z.multiply(a3)).add(u4.z.multiply(a4));
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,295,** Get the abscissa of the vector.
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,296, @return abscissa of the vector
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,297," @see #Vector3D(DerivativeStructure, DerivativeStructure, DerivativeStructure)"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,299,ublic DerivativeStructure getX() {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,300,eturn x;
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,303,** Get the ordinate of the vector.
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,304, @return ordinate of the vector
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,305," @see #Vector3D(DerivativeStructure, DerivativeStructure, DerivativeStructure)"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,307,ublic DerivativeStructure getY() {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,308,eturn y;
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,311,** Get the height of the vector.
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,312, @return height of the vector
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,313," @see #Vector3D(DerivativeStructure, DerivativeStructure, DerivativeStructure)"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,315,ublic DerivativeStructure getZ() {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,316,eturn z;
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,319,** Get the vector coordinates as a dimension 3 array.
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,320, @return vector coordinates
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,321, @see #Vector3D(DerivativeStructure[])
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,323,ublic DerivativeStructure[] toArray() {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,324,"eturn new DerivativeStructure[] { x, y, z };"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,327,** Convert to a constant vector without derivatives.
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,328, @return a constant vector
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,330,ublic Vector3D toVector3D() {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,331,"eturn new Vector3D(x.getValue(), y.getValue(), z.getValue());"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,334,** Get the L<sub>1</sub> norm for the vector.
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,335, @return L<sub>1</sub> norm for the vector
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,337,ublic DerivativeStructure getNorm1() {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,338,eturn x.abs().add(y.abs()).add(z.abs());
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,341,** Get the L<sub>2</sub> norm for the vector.
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,342, @return Euclidean norm for the vector
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,344,ublic DerivativeStructure getNorm() {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,345,"/ there are no cancellation problems here, so we use the straightforward formula"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,346,eturn x.multiply(x).add(y.multiply(y)).add(z.multiply(z)).sqrt();
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,349,** Get the square of the norm for the vector.
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,350, @return square of the Euclidean norm for the vector
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,352,ublic DerivativeStructure getNormSq() {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,353,"/ there are no cancellation problems here, so we use the straightforward formula"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,354,eturn x.multiply(x).add(y.multiply(y)).add(z.multiply(z));
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,357,** Get the L<sub>&infin;</sub> norm for the vector.
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,358, @return L<sub>&infin;</sub> norm for the vector
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,360,ublic DerivativeStructure getNormInf() {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,361,inal DerivativeStructure xAbs = x.abs();
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,362,inal DerivativeStructure yAbs = y.abs();
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,363,inal DerivativeStructure zAbs = z.abs();
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,364,f (xAbs.getValue() <= yAbs.getValue()) {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,365,f (yAbs.getValue() <= zAbs.getValue()) {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,366,eturn zAbs;
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,367, else {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,368,eturn yAbs;
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,370, else {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,371,f (xAbs.getValue() <= zAbs.getValue()) {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,372,eturn zAbs;
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,373, else {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,374,eturn xAbs;
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,379,** Get the azimuth of the vector.
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,380," @return azimuth (&alpha;) of the vector, between -&pi; and +&pi;"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,381," @see #Vector3D(DerivativeStructure, DerivativeStructure)"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,383,ublic DerivativeStructure getAlpha() {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,384,"eturn DerivativeStructure.atan2(y, x);"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,387,** Get the elevation of the vector.
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,388," @return elevation (&delta;) of the vector, between -&pi;/2 and +&pi;/2"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,389," @see #Vector3D(DerivativeStructure, DerivativeStructure)"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,391,ublic DerivativeStructure getDelta() {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,392,eturn z.divide(getNorm()).asin();
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,395,** Add a vector to the instance.
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,396, @param v vector to add
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,397, @return a new vector
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,399,ublic Vector3DDS add(final Vector3DDS v) {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,400,"eturn new Vector3DDS(x.add(v.x), y.add(v.y), z.add(v.z));"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,403,** Add a vector to the instance.
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,404, @param v vector to add
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,405, @return a new vector
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,407,ublic Vector3DDS add(final Vector3D v) {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,408,"eturn new Vector3DDS(x.add(v.getX()), y.add(v.getY()), z.add(v.getZ()));"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,411,** Add a scaled vector to the instance.
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,412, @param factor scale factor to apply to v before adding it
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,413, @param v vector to add
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,414, @return a new vector
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,416,"ublic Vector3DDS add(final DerivativeStructure factor, final Vector3DDS v) {"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,417,"eturn new Vector3DDS(x.add(factor.multiply(v.x)),"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,418,".add(factor.multiply(v.y)),"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,419,.add(factor.multiply(v.z)));
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,422,** Add a scaled vector to the instance.
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,423, @param factor scale factor to apply to v before adding it
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,424, @param v vector to add
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,425, @return a new vector
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,427,"ublic Vector3DDS add(final DerivativeStructure factor, final Vector3D v) {"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,428,"eturn new Vector3DDS(x.add(factor.multiply(v.getX())),"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,429,".add(factor.multiply(v.getY())),"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,430,.add(factor.multiply(v.getZ())));
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,433,** Add a scaled vector to the instance.
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,434, @param factor scale factor to apply to v before adding it
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,435, @param v vector to add
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,436, @return a new vector
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,438,"ublic Vector3DDS add(final double factor, final Vector3DDS v) {"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,439,"eturn new Vector3DDS(x.add(v.x.multiply(factor)),"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,440,".add(v.y.multiply(factor)),"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,441,.add(v.z.multiply(factor)));
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,444,** Add a scaled vector to the instance.
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,445, @param factor scale factor to apply to v before adding it
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,446, @param v vector to add
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,447, @return a new vector
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,449,"ublic Vector3DDS add(final double factor, final Vector3D v) {"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,450,"eturn new Vector3DDS(x.add(factor * v.getX()),"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,451,".add(factor * v.getY()),"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,452,.add(factor * v.getZ()));
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,455,** Subtract a vector from the instance.
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,456, @param v vector to subtract
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,457, @return a new vector
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,459,ublic Vector3DDS subtract(final Vector3DDS v) {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,460,"eturn new Vector3DDS(x.subtract(v.x), y.subtract(v.y), z.subtract(v.z));"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,463,** Subtract a vector from the instance.
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,464, @param v vector to subtract
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,465, @return a new vector
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,467,ublic Vector3DDS subtract(final Vector3D v) {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,468,"eturn new Vector3DDS(x.subtract(v.getX()), y.subtract(v.getY()), z.subtract(v.getZ()));"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,471,** Subtract a scaled vector from the instance.
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,472, @param factor scale factor to apply to v before subtracting it
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,473, @param v vector to subtract
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,474, @return a new vector
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,476,"ublic Vector3DDS subtract(final DerivativeStructure factor, final Vector3DDS v) {"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,477,"eturn new Vector3DDS(x.subtract(factor.multiply(v.x)),"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,478,".subtract(factor.multiply(v.y)),"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,479,.subtract(factor.multiply(v.z)));
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,482,** Subtract a scaled vector from the instance.
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,483, @param factor scale factor to apply to v before subtracting it
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,484, @param v vector to subtract
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,485, @return a new vector
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,487,"ublic Vector3DDS subtract(final DerivativeStructure factor, final Vector3D v) {"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,488,"eturn new Vector3DDS(x.subtract(factor.multiply(v.getX())),"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,489,".subtract(factor.multiply(v.getY())),"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,490,.subtract(factor.multiply(v.getZ())));
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,493,** Subtract a scaled vector from the instance.
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,494, @param factor scale factor to apply to v before subtracting it
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,495, @param v vector to subtract
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,496, @return a new vector
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,498,"ublic Vector3DDS subtract(final double factor, final Vector3DDS v) {"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,499,"eturn new Vector3DDS(x.subtract(v.x.multiply(factor)),"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,500,".subtract(v.y.multiply(factor)),"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,501,.subtract(v.z.multiply(factor)));
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,504,** Subtract a scaled vector from the instance.
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,505, @param factor scale factor to apply to v before subtracting it
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,506, @param v vector to subtract
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,507, @return a new vector
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,509,"ublic Vector3DDS subtract(final double factor, final Vector3D v) {"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,510,"eturn new Vector3DDS(x.subtract(factor * v.getX()),"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,511,".subtract(factor * v.getY()),"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,512,.subtract(factor * v.getZ()));
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,515,** Get a normalized vector aligned with the instance.
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,516, @return a new normalized vector
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,517, @exception MathArithmeticException if the norm is zero
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,519,ublic Vector3DDS normalize() throws MathArithmeticException {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,520,inal DerivativeStructure s = getNorm();
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,521,f (s.getValue() == 0) {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,522,hrow new MathArithmeticException(LocalizedFormats.CANNOT_NORMALIZE_A_ZERO_NORM_VECTOR);
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,524,eturn scalarMultiply(s.reciprocal());
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,527,** Get a vector orthogonal to the instance.
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,528, <p>There are an infinite number of normalized vectors orthogonal
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,529, to the instance. This method picks up one of them almost
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,530, arbitrarily. It is useful when one needs to compute a reference
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,531, frame with one of the axes in a predefined direction. The
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,532, following example shows how to build a frame having the k axis
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,533, aligned with the known vector u :
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,534, <pre><code>
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,535,   Vector3D k = u.normalize();
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,536,   Vector3D i = k.orthogonal();
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,537,"   Vector3D j = Vector3D.crossProduct(k, i);"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,538, </code></pre></p>
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,539, @return a new normalized vector orthogonal to the instance
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,540, @exception MathArithmeticException if the norm of the instance is null
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,542,ublic Vector3DDS orthogonal() throws MathArithmeticException {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,544,inal double threshold = 0.6 * getNorm().getValue();
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,545,f (threshold == 0) {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,546,hrow new MathArithmeticException(LocalizedFormats.ZERO_NORM);
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,549,f (FastMath.abs(x.getValue()) <= threshold) {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,550,inal DerivativeStructure inverse  = y.multiply(y).add(z.multiply(z)).sqrt().reciprocal();
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,551,"eturn new Vector3DDS(inverse.getField().getZero(), inverse.multiply(z), inverse.multiply(y).negate());"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,552, else if (FastMath.abs(y.getValue()) <= threshold) {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,553,inal DerivativeStructure inverse  = x.multiply(x).add(z.multiply(z)).sqrt().reciprocal();
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,554,"eturn new Vector3DDS(inverse.multiply(z).negate(), inverse.getField().getZero(), inverse.multiply(x));"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,555, else {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,556,inal DerivativeStructure inverse  = x.multiply(x).add(y.multiply(y)).sqrt().reciprocal();
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,557,"eturn new Vector3DDS(inverse.multiply(y), inverse.multiply(x).negate(), inverse.getField().getZero());"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,562,** Compute the angular separation between two vectors.
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,563, <p>This method computes the angular separation between two
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,564, vectors using the dot product for well separated vectors and the
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,565, cross product for almost aligned vectors. This allows to have a
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,566," good accuracy in all cases, even for vectors very close to each"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,567, other.</p>
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,568, @param v1 first vector
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,569, @param v2 second vector
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,570, @return angular separation between v1 and v2
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,571, @exception MathArithmeticException if either vector has a null norm
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,573,"ublic static DerivativeStructure angle(Vector3DDS v1, Vector3DDS v2) throws MathArithmeticException {"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,575,inal DerivativeStructure normProduct = v1.getNorm().multiply(v2.getNorm());
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,576,f (normProduct.getValue() == 0) {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,577,hrow new MathArithmeticException(LocalizedFormats.ZERO_NORM);
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,580,inal DerivativeStructure dot = v1.dotProduct(v2);
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,581,inal double threshold = normProduct.getValue() * 0.9999;
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,582,f ((dot.getValue() < -threshold) || (dot.getValue() > threshold)) {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,583,"/ the vectors are almost aligned, compute using the sine"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,584,"ector3DDS v3 = crossProduct(v1, v2);"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,585,f (dot.getValue() >= 0) {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,586,eturn v3.getNorm().divide(normProduct).asin();
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,588,eturn v3.getNorm().divide(normProduct).asin().subtract(FastMath.PI).negate();
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,591,/ the vectors are sufficiently separated to use the cosine
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,592,eturn dot.divide(normProduct).acos();
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,596,** Get the opposite of the instance.
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,597, @return a new vector which is opposite to the instance
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,599,ublic Vector3DDS negate() {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,600,"eturn new Vector3DDS(x.negate(), y.negate(), z.negate());"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,603,** Multiply the instance by a scalar.
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,604, @param a scalar
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,605, @return a new vector
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,607,ublic Vector3DDS scalarMultiply(final DerivativeStructure a) {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,608,"eturn new Vector3DDS(x.multiply(a), y.multiply(a), z.multiply(a));"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,611,** Multiply the instance by a scalar.
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,612, @param a scalar
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,613, @return a new vector
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,615,ublic Vector3DDS scalarMultiply(final double a) {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,616,"eturn new Vector3DDS(x.multiply(a), y.multiply(a), z.multiply(a));"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,620, Returns true if any coordinate of this vector is NaN; false otherwise
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,621, @return  true if any coordinate of this vector is NaN; false otherwise
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,623,ublic boolean isNaN() {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,624,eturn Double.isNaN(x.getValue()) || Double.isNaN(y.getValue()) || Double.isNaN(z.getValue());
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,628, Returns true if any coordinate of this vector is infinite and none are NaN;
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,629, false otherwise
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,630, @return  true if any coordinate of this vector is infinite and none are NaN;
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,631, false otherwise
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,633,ublic boolean isInfinite() {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,634,eturn !isNaN() && (Double.isInfinite(x.getValue()) || Double.isInfinite(y.getValue()) || Double.isInfinite(z.getValue()));
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,638, Test for the equality of two 3D vectors.
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,639, <p>
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,640," If all coordinates of two 3D vectors are exactly the same, and none are"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,641," <code>DerivativeStructure.NaN</code>, the two 3D vectors are considered to be equal."
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,642, </p>
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,643, <p>
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,644, <code>NaN</code> coordinates are considered to affect globally the vector
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,645," and be equals to each other - i.e, if either (or all) coordinates of the"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,646," 3D vector are equal to <code>DerivativeStructure.NaN</code>, the 3D vector is equal to"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,647, {@link #NaN}.
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,648, </p>
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,650, @param other Object to test for equality to this
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,651," @return true if two 3D vector objects are equal, false if"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,652,"         object is null, not an instance of Vector3D, or"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,653,         not equal to this Vector3D instance
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,656,Override
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,657,ublic boolean equals(Object other) {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,659,f (this == other) {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,660,eturn true;
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,663,f (other instanceof Vector3DDS) {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,664,inal Vector3DDS rhs = (Vector3DDS)other;
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,665,f (rhs.isNaN()) {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,666,eturn this.isNaN();
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,669,"eturn MathArrays.equals(x.getAllDerivatives(), rhs.x.getAllDerivatives()) &&"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,670,"athArrays.equals(y.getAllDerivatives(), rhs.y.getAllDerivatives()) &&"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,671,"athArrays.equals(z.getAllDerivatives(), rhs.z.getAllDerivatives());"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,674,eturn false;
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,678, Get a hashCode for the 3D vector.
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,679, <p>
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,680, All NaN values have the same hash code.</p>
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,682, @return a hash code value for this object
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,684,Override
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,685,ublic int hashCode() {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,686,f (isNaN()) {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,687,eturn 409;
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,689,eturn 311 * (107 * x.hashCode() + 83 * y.hashCode() +  z.hashCode());
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,692,** Compute the dot-product of the instance and another vector.
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,693, <p>
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,694, The implementation uses specific multiplication and addition
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,695, algorithms to preserve accuracy and reduce cancellation effects.
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,696, It should be very accurate even for nearly orthogonal vectors.
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,697, </p>
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,698," @see MathArrays#linearCombination(double, double, double, double, double, double)"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,699, @param v second vector
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,700, @return the dot product this.v
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,702,ublic DerivativeStructure dotProduct(final Vector3DDS v) {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,703,"eturn MathArrays.linearCombination(x, v.x, y, v.y, z, v.z);"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,706,** Compute the dot-product of the instance and another vector.
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,707, <p>
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,708, The implementation uses specific multiplication and addition
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,709, algorithms to preserve accuracy and reduce cancellation effects.
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,710, It should be very accurate even for nearly orthogonal vectors.
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,711, </p>
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,712," @see MathArrays#linearCombination(double, double, double, double, double, double)"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,713, @param v second vector
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,714, @return the dot product this.v
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,716,ublic DerivativeStructure dotProduct(final Vector3D v) {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,717,"eturn MathArrays.linearCombination(v.getX(), x, v.getY(), y, v.getZ(), z);"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,720,** Compute the cross-product of the instance with another vector.
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,721, @param v other vector
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,722, @return the cross product this ^ v as a new Vector3D
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,724,ublic Vector3DDS crossProduct(final Vector3DDS v) {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,725,"eturn new Vector3DDS(MathArrays.linearCombination(y, v.z, z.negate(), v.y),"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,726,"athArrays.linearCombination(z, v.x, x.negate(), v.z),"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,727,"athArrays.linearCombination(x, v.y, y.negate(), v.x));"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,730,** Compute the cross-product of the instance with another vector.
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,731, @param v other vector
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,732, @return the cross product this ^ v as a new Vector3D
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,734,ublic Vector3DDS crossProduct(final Vector3D v) {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,735,"eturn new Vector3DDS(MathArrays.linearCombination(v.getZ(), y, v.getY(), z.negate()),"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,736,"athArrays.linearCombination(v.getX(), z, v.getZ(), x.negate()),"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,737,"athArrays.linearCombination(v.getY(), x, v.getX(), y.negate()));"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,740,** Compute the distance between the instance and another vector according to the L<sub>1</sub> norm.
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,741, <p>Calling this method is equivalent to calling:
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,742, <code>q.subtract(p).getNorm1()</code> except that no intermediate
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,743, vector is built</p>
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,744, @param v second vector
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,745, @return the distance between the instance and p according to the L<sub>1</sub> norm
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,747,ublic DerivativeStructure distance1(final Vector3DDS v) {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,748,inal DerivativeStructure dx = v.x.subtract(x).abs();
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,749,inal DerivativeStructure dy = v.y.subtract(y).abs();
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,750,inal DerivativeStructure dz = v.z.subtract(z).abs();
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,751,eturn dx.add(dy).add(dz);
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,754,** Compute the distance between the instance and another vector according to the L<sub>1</sub> norm.
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,755, <p>Calling this method is equivalent to calling:
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,756, <code>q.subtract(p).getNorm1()</code> except that no intermediate
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,757, vector is built</p>
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,758, @param v second vector
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,759, @return the distance between the instance and p according to the L<sub>1</sub> norm
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,761,ublic DerivativeStructure distance1(final Vector3D v) {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,762,inal DerivativeStructure dx = x.subtract(v.getX()).abs();
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,763,inal DerivativeStructure dy = y.subtract(v.getY()).abs();
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,764,inal DerivativeStructure dz = z.subtract(v.getZ()).abs();
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,765,eturn dx.add(dy).add(dz);
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,768,** Compute the distance between the instance and another vector according to the L<sub>2</sub> norm.
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,769, <p>Calling this method is equivalent to calling:
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,770, <code>q.subtract(p).getNorm()</code> except that no intermediate
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,771, vector is built</p>
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,772, @param v second vector
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,773, @return the distance between the instance and p according to the L<sub>2</sub> norm
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,775,ublic DerivativeStructure distance(final Vector3DDS v) {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,776,inal DerivativeStructure dx = v.x.subtract(x);
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,777,inal DerivativeStructure dy = v.y.subtract(y);
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,778,inal DerivativeStructure dz = v.z.subtract(z);
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,779,eturn dx.multiply(dx).add(dy.multiply(dy)).add(dz.multiply(dz)).sqrt();
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,782,** Compute the distance between the instance and another vector according to the L<sub>2</sub> norm.
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,783, <p>Calling this method is equivalent to calling:
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,784, <code>q.subtract(p).getNorm()</code> except that no intermediate
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,785, vector is built</p>
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,786, @param v second vector
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,787, @return the distance between the instance and p according to the L<sub>2</sub> norm
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,789,ublic DerivativeStructure distance(final Vector3D v) {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,790,inal DerivativeStructure dx = x.subtract(v.getX());
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,791,inal DerivativeStructure dy = y.subtract(v.getY());
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,792,inal DerivativeStructure dz = z.subtract(v.getZ());
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,793,eturn dx.multiply(dx).add(dy.multiply(dy)).add(dz.multiply(dz)).sqrt();
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,796,** Compute the distance between the instance and another vector according to the L<sub>&infin;</sub> norm.
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,797, <p>Calling this method is equivalent to calling:
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,798, <code>q.subtract(p).getNormInf()</code> except that no intermediate
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,799, vector is built</p>
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,800, @param v second vector
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,801, @return the distance between the instance and p according to the L<sub>&infin;</sub> norm
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,803,ublic DerivativeStructure distanceInf(final Vector3DDS v) {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,804,inal DerivativeStructure dx = v.x.subtract(x).abs();
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,805,inal DerivativeStructure dy = v.y.subtract(y).abs();
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,806,inal DerivativeStructure dz = v.z.subtract(z).abs();
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,807,f (dx.getValue() <= dy.getValue()) {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,808,f (dy.getValue() <= dz.getValue()) {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,809,eturn dz;
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,810, else {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,811,eturn dy;
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,813, else {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,814,f (dx.getValue() <= dz.getValue()) {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,815,eturn dz;
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,816, else {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,817,eturn dx;
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,822,** Compute the distance between the instance and another vector according to the L<sub>&infin;</sub> norm.
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,823, <p>Calling this method is equivalent to calling:
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,824, <code>q.subtract(p).getNormInf()</code> except that no intermediate
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,825, vector is built</p>
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,826, @param v second vector
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,827, @return the distance between the instance and p according to the L<sub>&infin;</sub> norm
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,829,ublic DerivativeStructure distanceInf(final Vector3D v) {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,830,inal DerivativeStructure dx = x.subtract(v.getX()).abs();
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,831,inal DerivativeStructure dy = y.subtract(v.getY()).abs();
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,832,inal DerivativeStructure dz = z.subtract(v.getZ()).abs();
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,833,f (dx.getValue() <= dy.getValue()) {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,834,f (dy.getValue() <= dz.getValue()) {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,835,eturn dz;
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,836, else {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,837,eturn dy;
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,839, else {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,840,f (dx.getValue() <= dz.getValue()) {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,841,eturn dz;
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,842, else {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,843,eturn dx;
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,848,** Compute the square of the distance between the instance and another vector.
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,849, <p>Calling this method is equivalent to calling:
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,850, <code>q.subtract(p).getNormSq()</code> except that no intermediate
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,851, vector is built</p>
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,852, @param v second vector
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,853, @return the square of the distance between the instance and p
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,855,ublic DerivativeStructure distanceSq(final Vector3DDS v) {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,856,inal DerivativeStructure dx = v.x.subtract(x);
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,857,inal DerivativeStructure dy = v.y.subtract(y);
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,858,inal DerivativeStructure dz = v.z.subtract(z);
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,859,eturn dx.multiply(dx).add(dy.multiply(dy)).add(dz.multiply(dz));
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,862,** Compute the square of the distance between the instance and another vector.
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,863, <p>Calling this method is equivalent to calling:
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,864, <code>q.subtract(p).getNormSq()</code> except that no intermediate
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,865, vector is built</p>
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,866, @param v second vector
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,867, @return the square of the distance between the instance and p
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,869,ublic DerivativeStructure distanceSq(final Vector3D v) {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,870,inal DerivativeStructure dx = x.subtract(v.getX());
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,871,inal DerivativeStructure dy = y.subtract(v.getY());
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,872,inal DerivativeStructure dz = z.subtract(v.getZ());
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,873,eturn dx.multiply(dx).add(dy.multiply(dy)).add(dz.multiply(dz));
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,876,** Compute the dot-product of two vectors.
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,877, @param v1 first vector
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,878, @param v2 second vector
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,879, @return the dot product v1.v2
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,881,"ublic static DerivativeStructure dotProduct(Vector3DDS v1, Vector3DDS v2) {"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,882,eturn v1.dotProduct(v2);
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,885,** Compute the dot-product of two vectors.
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,886, @param v1 first vector
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,887, @param v2 second vector
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,888, @return the dot product v1.v2
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,890,"ublic static DerivativeStructure dotProduct(Vector3DDS v1, Vector3D v2) {"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,891,eturn v1.dotProduct(v2);
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,894,** Compute the dot-product of two vectors.
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,895, @param v1 first vector
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,896, @param v2 second vector
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,897, @return the dot product v1.v2
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,899,"ublic static DerivativeStructure dotProduct(Vector3D v1, Vector3DDS v2) {"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,900,eturn v2.dotProduct(v1);
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,903,** Compute the cross-product of two vectors.
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,904, @param v1 first vector
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,905, @param v2 second vector
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,906, @return the cross product v1 ^ v2 as a new Vector
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,908,"ublic static Vector3DDS crossProduct(final Vector3DDS v1, final Vector3DDS v2) {"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,909,eturn v1.crossProduct(v2);
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,912,** Compute the cross-product of two vectors.
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,913, @param v1 first vector
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,914, @param v2 second vector
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,915, @return the cross product v1 ^ v2 as a new Vector
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,917,"ublic static Vector3DDS crossProduct(final Vector3DDS v1, final Vector3D v2) {"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,918,eturn v1.crossProduct(v2);
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,921,** Compute the cross-product of two vectors.
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,922, @param v1 first vector
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,923, @param v2 second vector
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,924, @return the cross product v1 ^ v2 as a new Vector
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,926,"ublic static Vector3DDS crossProduct(final Vector3D v1, final Vector3DDS v2) {"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,927,eturn v2.crossProduct(v1).negate();
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,930,** Compute the distance between two vectors according to the L<sub>1</sub> norm.
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,931, <p>Calling this method is equivalent to calling:
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,932, <code>v1.subtract(v2).getNorm1()</code> except that no intermediate
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,933, vector is built</p>
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,934, @param v1 first vector
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,935, @param v2 second vector
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,936, @return the distance between v1 and v2 according to the L<sub>1</sub> norm
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,938,"ublic static DerivativeStructure distance1(Vector3DDS v1, Vector3DDS v2) {"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,939,eturn v1.distance1(v2);
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,942,** Compute the distance between two vectors according to the L<sub>1</sub> norm.
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,943, <p>Calling this method is equivalent to calling:
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,944, <code>v1.subtract(v2).getNorm1()</code> except that no intermediate
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,945, vector is built</p>
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,946, @param v1 first vector
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,947, @param v2 second vector
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,948, @return the distance between v1 and v2 according to the L<sub>1</sub> norm
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,950,"ublic static DerivativeStructure distance1(Vector3DDS v1, Vector3D v2) {"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,951,eturn v1.distance1(v2);
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,954,** Compute the distance between two vectors according to the L<sub>1</sub> norm.
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,955, <p>Calling this method is equivalent to calling:
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,956, <code>v1.subtract(v2).getNorm1()</code> except that no intermediate
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,957, vector is built</p>
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,958, @param v1 first vector
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,959, @param v2 second vector
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,960, @return the distance between v1 and v2 according to the L<sub>1</sub> norm
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,962,"ublic static DerivativeStructure distance1(Vector3D v1, Vector3DDS v2) {"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,963,eturn v2.distance1(v1);
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,966,** Compute the distance between two vectors according to the L<sub>2</sub> norm.
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,967, <p>Calling this method is equivalent to calling:
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,968, <code>v1.subtract(v2).getNorm()</code> except that no intermediate
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,969, vector is built</p>
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,970, @param v1 first vector
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,971, @param v2 second vector
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,972, @return the distance between v1 and v2 according to the L<sub>2</sub> norm
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,974,"ublic static DerivativeStructure distance(Vector3DDS v1, Vector3DDS v2) {"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,975,eturn v1.distance(v2);
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,978,** Compute the distance between two vectors according to the L<sub>2</sub> norm.
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,979, <p>Calling this method is equivalent to calling:
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,980, <code>v1.subtract(v2).getNorm()</code> except that no intermediate
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,981, vector is built</p>
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,982, @param v1 first vector
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,983, @param v2 second vector
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,984, @return the distance between v1 and v2 according to the L<sub>2</sub> norm
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,986,"ublic static DerivativeStructure distance(Vector3DDS v1, Vector3D v2) {"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,987,eturn v1.distance(v2);
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,990,** Compute the distance between two vectors according to the L<sub>2</sub> norm.
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,991, <p>Calling this method is equivalent to calling:
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,992, <code>v1.subtract(v2).getNorm()</code> except that no intermediate
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,993, vector is built</p>
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,994, @param v1 first vector
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,995, @param v2 second vector
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,996, @return the distance between v1 and v2 according to the L<sub>2</sub> norm
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,998,"ublic static DerivativeStructure distance(Vector3D v1, Vector3DDS v2) {"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,999,eturn v2.distance(v1);
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,1002,** Compute the distance between two vectors according to the L<sub>&infin;</sub> norm.
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,1003, <p>Calling this method is equivalent to calling:
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,1004, <code>v1.subtract(v2).getNormInf()</code> except that no intermediate
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,1005, vector is built</p>
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,1006, @param v1 first vector
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,1007, @param v2 second vector
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,1008, @return the distance between v1 and v2 according to the L<sub>&infin;</sub> norm
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,1010,"ublic static DerivativeStructure distanceInf(Vector3DDS v1, Vector3DDS v2) {"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,1011,eturn v1.distanceInf(v2);
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,1014,** Compute the distance between two vectors according to the L<sub>&infin;</sub> norm.
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,1015, <p>Calling this method is equivalent to calling:
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,1016, <code>v1.subtract(v2).getNormInf()</code> except that no intermediate
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,1017, vector is built</p>
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,1018, @param v1 first vector
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,1019, @param v2 second vector
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,1020, @return the distance between v1 and v2 according to the L<sub>&infin;</sub> norm
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,1022,"ublic static DerivativeStructure distanceInf(Vector3DDS v1, Vector3D v2) {"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,1023,eturn v1.distanceInf(v2);
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,1026,** Compute the distance between two vectors according to the L<sub>&infin;</sub> norm.
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,1027, <p>Calling this method is equivalent to calling:
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,1028, <code>v1.subtract(v2).getNormInf()</code> except that no intermediate
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,1029, vector is built</p>
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,1030, @param v1 first vector
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,1031, @param v2 second vector
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,1032, @return the distance between v1 and v2 according to the L<sub>&infin;</sub> norm
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,1034,"ublic static DerivativeStructure distanceInf(Vector3D v1, Vector3DDS v2) {"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,1035,eturn v2.distanceInf(v1);
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,1038,** Compute the square of the distance between two vectors.
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,1039, <p>Calling this method is equivalent to calling:
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,1040, <code>v1.subtract(v2).getNormSq()</code> except that no intermediate
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,1041, vector is built</p>
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,1042, @param v1 first vector
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,1043, @param v2 second vector
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,1044, @return the square of the distance between v1 and v2
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,1046,"ublic static DerivativeStructure distanceSq(Vector3DDS v1, Vector3DDS v2) {"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,1047,eturn v1.distanceSq(v2);
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,1050,** Compute the square of the distance between two vectors.
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,1051, <p>Calling this method is equivalent to calling:
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,1052, <code>v1.subtract(v2).getNormSq()</code> except that no intermediate
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,1053, vector is built</p>
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,1054, @param v1 first vector
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,1055, @param v2 second vector
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,1056, @return the square of the distance between v1 and v2
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,1058,"ublic static DerivativeStructure distanceSq(Vector3DDS v1, Vector3D v2) {"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,1059,eturn v1.distanceSq(v2);
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,1062,** Compute the square of the distance between two vectors.
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,1063, <p>Calling this method is equivalent to calling:
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,1064, <code>v1.subtract(v2).getNormSq()</code> except that no intermediate
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,1065, vector is built</p>
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,1066, @param v1 first vector
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,1067, @param v2 second vector
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,1068, @return the square of the distance between v1 and v2
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,1070,"ublic static DerivativeStructure distanceSq(Vector3D v1, Vector3DDS v2) {"
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,1071,eturn v2.distanceSq(v1);
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,1074,** Get a string representation of this vector.
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,1075, @return a string representation of this vector
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,1077,Override
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,1078,ublic String toString() {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,1079,eturn Vector3DFormat.getInstance().format(toVector3D());
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,1082,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,1083,ublic String toString(final NumberFormat format) {
False,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDS.java,1084,eturn new Vector3DFormat(format).format(toVector3D());
False,src/main/java/org/apache/commons/math3/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math3/linear/SparseFieldVector.java,20,mport java.lang.reflect.Array;
True,src/main/java/org/apache/commons/math3/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math3/linear/SparseFieldVector.java,23,import org.apache.commons.math3.exception.DimensionMismatchException;
False,src/main/java/org/apache/commons/math3/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math3/linear/SparseFieldVector.java,28,mport org.apache.commons.math3.exception.DimensionMismatchException;
True,src/main/java/org/apache/commons/math3/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math3/linear/SparseFieldVector.java,29,import org.apache.commons.math3.util.MathArrays;
False,src/main/java/org/apache/commons/math3/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math3/linear/SparseFieldVector.java,482,[] res = buildArray(virtualSize);
True,src/main/java/org/apache/commons/math3/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math3/linear/SparseFieldVector.java,482,"T[] res = MathArrays.buildArray(field, virtualSize);"
False,src/main/java/org/apache/commons/math3/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math3/linear/SparseFieldVector.java,533, Build an array of elements.
False,src/main/java/org/apache/commons/math3/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math3/linear/SparseFieldVector.java,535, @param length Size of the array to build.
False,src/main/java/org/apache/commons/math3/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math3/linear/SparseFieldVector.java,536, @return a new array.
False,src/main/java/org/apache/commons/math3/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math3/linear/SparseFieldVector.java,538,"SuppressWarnings(""unchecked"") // field is type T"
False,src/main/java/org/apache/commons/math3/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math3/linear/SparseFieldVector.java,539,rivate T[] buildArray(final int length) {
False,src/main/java/org/apache/commons/math3/linear/SparseFieldVector.java,src/main/java/org/apache/commons/math3/linear/SparseFieldVector.java,540,"eturn (T[]) Array.newInstance(field.getRuntimeClass(), length);"
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,19,import org.apache.commons.math3.ExtendedFieldElement;
False,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,20,mport org.apache.commons.math3.FieldElement;
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,21,import org.apache.commons.math3.exception.DimensionMismatchException;
False,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,25, {@link FieldElement} interface.
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,26,* {@link ExtendedFieldElement} interface.
False,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,30,"ublic class Decimal64 extends Number implements FieldElement<Decimal64>,"
False,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,31,omparable<Decimal64> {
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,31,public class Decimal64 extends Number
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,32,"implements ExtendedFieldElement<Decimal64>, Comparable<Decimal64> {"
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,306,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,307,public double getReal() {
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,308,return value;
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,311,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,312,public Decimal64 add(final double a) {
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,313,return new Decimal64(value + a);
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,316,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,317,public Decimal64 subtract(final double a) {
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,318,return new Decimal64(value - a);
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,321,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,322,public Decimal64 multiply(final double a) {
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,323,return new Decimal64(value * a);
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,326,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,327,public Decimal64 divide(final double a) {
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,328,return new Decimal64(value / a);
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,331,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,332,public Decimal64 remainder(final double a) {
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,333,return new Decimal64(value % a);
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,336,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,337,public Decimal64 remainder(final Decimal64 a) {
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,338,return new Decimal64(value % a.value);
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,341,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,342,public Decimal64 abs() {
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,343,return new Decimal64(FastMath.abs(value));
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,346,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,347,public Decimal64 ceil() {
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,348,return new Decimal64(FastMath.ceil(value));
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,351,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,352,public Decimal64 floor() {
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,353,return new Decimal64(FastMath.floor(value));
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,356,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,357,public Decimal64 rint() {
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,358,return new Decimal64(FastMath.rint(value));
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,361,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,362,public long round() {
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,363,return FastMath.round(value);
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,366,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,367,public Decimal64 signum() {
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,368,return new Decimal64(FastMath.signum(value));
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,371,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,372,public Decimal64 copySign(final double sign) {
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,373,"return new Decimal64(FastMath.copySign(value, sign));"
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,376,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,377,public Decimal64 scalb(final int n) {
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,378,"return new Decimal64(FastMath.scalb(value, n));"
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,381,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,382,public Decimal64 hypot(final Decimal64 y) {
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,383,"return new Decimal64(FastMath.hypot(value, y.value));"
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,386,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,387,public Decimal64 sqrt() {
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,388,return new Decimal64(FastMath.sqrt(value));
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,391,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,392,public Decimal64 cbrt() {
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,393,return new Decimal64(FastMath.cbrt(value));
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,396,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,397,public Decimal64 rootN(final int n) {
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,398,"return new Decimal64(FastMath.pow(value, 1.0 / n));"
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,401,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,402,public Decimal64 pow(final double p) {
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,403,"return new Decimal64(FastMath.pow(value, p));"
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,406,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,407,public Decimal64 pow(final int n) {
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,408,"return new Decimal64(FastMath.pow(value, n));"
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,411,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,412,public Decimal64 pow(final Decimal64 e) {
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,413,"return new Decimal64(FastMath.pow(value, e.value));"
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,416,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,417,public Decimal64 exp() {
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,418,return new Decimal64(FastMath.exp(value));
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,421,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,422,public Decimal64 expm1() {
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,423,return new Decimal64(FastMath.expm1(value));
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,426,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,427,public Decimal64 log() {
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,428,return new Decimal64(FastMath.log(value));
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,431,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,432,public Decimal64 log1p() {
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,433,return new Decimal64(FastMath.log1p(value));
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,436,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,437,public Decimal64 log10() {
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,438,return new Decimal64(FastMath.log10(value));
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,441,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,442,public Decimal64 cos() {
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,443,return new Decimal64(FastMath.cos(value));
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,446,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,447,public Decimal64 sin() {
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,448,return new Decimal64(FastMath.sin(value));
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,451,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,452,public Decimal64 tan() {
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,453,return new Decimal64(FastMath.tan(value));
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,456,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,457,public Decimal64 acos() {
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,458,return new Decimal64(FastMath.acos(value));
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,461,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,462,public Decimal64 asin() {
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,463,return new Decimal64(FastMath.asin(value));
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,466,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,467,public Decimal64 atan() {
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,468,return new Decimal64(FastMath.atan(value));
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,471,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,472,public Decimal64 atan2(final Decimal64 x) {
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,473,"return new Decimal64(FastMath.atan2(value, x.value));"
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,476,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,477,public Decimal64 cosh() {
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,478,return new Decimal64(FastMath.cosh(value));
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,481,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,482,public Decimal64 sinh() {
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,483,return new Decimal64(FastMath.sinh(value));
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,486,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,487,public Decimal64 tanh() {
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,488,return new Decimal64(FastMath.tanh(value));
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,491,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,492,public Decimal64 acosh() {
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,493,return new Decimal64(FastMath.acosh(value));
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,496,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,497,public Decimal64 asinh() {
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,498,return new Decimal64(FastMath.asinh(value));
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,501,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,502,public Decimal64 atanh() {
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,503,return new Decimal64(FastMath.atanh(value));
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,506,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,507,"public Decimal64 linearCombination(final Decimal64[] a, final Decimal64[] b)"
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,508,throws DimensionMismatchException {
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,509,if (a.length != b.length) {
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,510,"throw new DimensionMismatchException(a.length, b.length);"
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,512,final double[] aDouble = new double[a.length];
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,513,final double[] bDouble = new double[b.length];
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,514,for (int i = 0; i < a.length; ++i) {
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,515,aDouble[i] = a[i].value;
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,516,bDouble[i] = b[i].value;
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,518,"return new Decimal64(MathArrays.linearCombination(aDouble, bDouble));"
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,521,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,522,"public Decimal64 linearCombination(final double[] a, final Decimal64[] b)"
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,523,throws DimensionMismatchException {
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,524,if (a.length != b.length) {
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,525,"throw new DimensionMismatchException(a.length, b.length);"
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,527,final double[] bDouble = new double[b.length];
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,528,for (int i = 0; i < a.length; ++i) {
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,529,bDouble[i] = b[i].value;
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,531,"return new Decimal64(MathArrays.linearCombination(a, bDouble));"
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,534,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,535,"public Decimal64 linearCombination(final Decimal64 a1, final Decimal64 b1,"
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,536,"final Decimal64 a2, final Decimal64 b2) {"
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,537,"return new Decimal64(MathArrays.linearCombination(a1.value, b1.value,"
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,538,"a2.value, b2.value));"
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,541,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,542,"public Decimal64 linearCombination(final double a1, final Decimal64 b1,"
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,543,"final double a2, final Decimal64 b2) {"
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,544,"return new Decimal64(MathArrays.linearCombination(a1, b1.value,"
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,545,"a2, b2.value));"
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,548,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,549,"public Decimal64 linearCombination(final Decimal64 a1, final Decimal64 b1,"
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,550,"final Decimal64 a2, final Decimal64 b2,"
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,551,"final Decimal64 a3, final Decimal64 b3) {"
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,552,"return new Decimal64(MathArrays.linearCombination(a1.value, b1.value,"
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,553,"a2.value, b2.value,"
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,554,"a3.value, b3.value));"
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,557,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,558,"public Decimal64 linearCombination(final double a1, final Decimal64 b1,"
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,559,"final double a2, final Decimal64 b2,"
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,560,"final double a3, final Decimal64 b3) {"
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,561,"return new Decimal64(MathArrays.linearCombination(a1, b1.value,"
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,562,"a2, b2.value,"
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,563,"a3, b3.value));"
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,566,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,567,"public Decimal64 linearCombination(final Decimal64 a1, final Decimal64 b1,"
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,568,"final Decimal64 a2, final Decimal64 b2,"
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,569,"final Decimal64 a3, final Decimal64 b3,"
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,570,"final Decimal64 a4, final Decimal64 b4) {"
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,571,"return new Decimal64(MathArrays.linearCombination(a1.value, b1.value,"
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,572,"a2.value, b2.value,"
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,573,"a3.value, b3.value,"
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,574,"a4.value, b4.value));"
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,577,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,578,"public Decimal64 linearCombination(final double a1, final Decimal64 b1,"
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,579,"final double a2, final Decimal64 b2,"
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,580,"final double a3, final Decimal64 b3,"
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,581,"final double a4, final Decimal64 b4) {"
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,582,"return new Decimal64(MathArrays.linearCombination(a1, b1.value,"
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,583,"a2, b2.value,"
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,584,"a3, b3.value,"
True,src/main/java/org/apache/commons/math3/util/Decimal64.java,src/main/java/org/apache/commons/math3/util/Decimal64.java,585,"a4, b4.value));"
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,20,mport java.util.List;
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,20,import java.lang.reflect.Array;
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,22,mport java.util.Comparator;
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,22,import java.util.Arrays;
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,24,import java.util.Comparator;
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,25,import java.util.List;
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,25,mport org.apache.commons.math3.analysis.differentiation.DerivativeStructure;
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,27,import org.apache.commons.math3.Field;
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,29,import org.apache.commons.math3.exception.MathArithmeticException;
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,30,import org.apache.commons.math3.exception.MathIllegalArgumentException;
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,32,mport org.apache.commons.math3.exception.MathIllegalArgumentException;
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,34,mport org.apache.commons.math3.exception.MathArithmeticException;
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1122, Compute a linear combination accurately.
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1123, This method computes the sum of the products
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1124, <code>a<sub>i</sub> b<sub>i</sub></code> to high accuracy.
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1125, It does so by using specific multiplication and addition algorithms to
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1126, preserve accuracy and reduce cancellation effects.
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1127, <br/>
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1128, It is based on the 2005 paper
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1129," <a href=""http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.2.1547"">"
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1130," Accurate Sum and Dot Product</a> by Takeshi Ogita, Siegfried M. Rump,"
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1131, and Shin'ichi Oishi published in SIAM J. Sci. Comput.
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1133, @param a Factors.
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1134, @param b Factors.
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1135, @return <code>&Sigma;<sub>i</sub> a<sub>i</sub> b<sub>i</sub></code>.
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1136, @throws DimensionMismatchException if arrays dimensions don't match
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1137, @since 3.2
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1139,"ublic static DerivativeStructure linearCombination(final DerivativeStructure[] a, final DerivativeStructure[] b)"
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1140,hrows DimensionMismatchException {
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1142,"/ compute an accurate value, taking care of cancellations"
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1143,inal double[] aDouble = new double[a.length];
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1144,or (int i = 0; i < a.length; ++i) {
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1145,Double[i] = a[i].getValue();
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1147,inal double[] bDouble = new double[b.length];
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1148,or (int i = 0; i < b.length; ++i) {
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1149,Double[i] = b[i].getValue();
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1151,"inal double accurateValue = MathArrays.linearCombination(aDouble, bDouble);"
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1153,"/ compute a simple value, with all partial derivatives"
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1154,erivativeStructure simpleValue = a[0].getField().getZero();
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1155,or (int i = 0; i < a.length; ++i) {
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1156,impleValue = simpleValue.add(a[i].multiply(b[i]));
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1159,/ create a result with accurate value and all derivatives (not necessarily as accurate as the value)
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1160,inal double[] data = simpleValue.getAllDerivatives();
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1161,ata[0] = accurateValue;
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1162,"eturn new DerivativeStructure(simpleValue.getFreeParameters(), simpleValue.getOrder(), data);"
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1167, Compute a linear combination accurately.
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1168, This method computes the sum of the products
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1169, <code>a<sub>i</sub> b<sub>i</sub></code> to high accuracy.
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1170, It does so by using specific multiplication and addition algorithms to
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1171, preserve accuracy and reduce cancellation effects.
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1172, <br/>
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1173, It is based on the 2005 paper
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1174," <a href=""http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.2.1547"">"
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1175," Accurate Sum and Dot Product</a> by Takeshi Ogita, Siegfried M. Rump,"
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1176, and Shin'ichi Oishi published in SIAM J. Sci. Comput.
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1178, @param a Factors.
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1179, @param b Factors.
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1180, @return <code>&Sigma;<sub>i</sub> a<sub>i</sub> b<sub>i</sub></code>.
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1181, @throws DimensionMismatchException if arrays dimensions don't match
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1183,"ublic static DerivativeStructure linearCombination(final double[] a, final DerivativeStructure[] b)"
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1184,hrows DimensionMismatchException {
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1186,"/ compute an accurate value, taking care of cancellations"
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1187,inal double[] bDouble = new double[b.length];
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1188,or (int i = 0; i < b.length; ++i) {
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1189,Double[i] = b[i].getValue();
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1191,"inal double accurateValue = MathArrays.linearCombination(a, bDouble);"
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1193,"/ compute a simple value, with all partial derivatives"
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1194,erivativeStructure simpleValue = b[0].getField().getZero();
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1195,or (int i = 0; i < a.length; ++i) {
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1196,impleValue = simpleValue.add(b[i].multiply(a[i]));
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1199,/ create a result with accurate value and all derivatives (not necessarily as accurate as the value)
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1200,inal double[] data = simpleValue.getAllDerivatives();
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1201,ata[0] = accurateValue;
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1202,"eturn new DerivativeStructure(simpleValue.getFreeParameters(), simpleValue.getOrder(), data);"
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1207, Compute a linear combination accurately.
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1208, <p>
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1209, This method computes a<sub>1</sub>&times;b<sub>1</sub> +
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1210, a<sub>2</sub>&times;b<sub>2</sub>
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1211, to high accuracy. It does so by using specific multiplication and
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1212, addition algorithms to preserve accuracy and reduce cancellation effects.
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1213, It is based on the 2005 paper <a
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1214," href=""http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.2.1547"">"
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1215," Accurate Sum and Dot Product</a> by Takeshi Ogita,"
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1216," Siegfried M. Rump, and Shin'ichi Oishi published in SIAM J. Sci. Comput."
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1217, </p>
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1218, @param a1 first factor of the first term
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1219, @param b1 second factor of the first term
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1220, @param a2 first factor of the second term
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1221, @param b2 second factor of the second term
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1222, @return a<sub>1</sub>&times;b<sub>1</sub> +
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1223, a<sub>2</sub>&times;b<sub>2</sub>
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1224," @see #linearCombination(DerivativeStructure, DerivativeStructure, DerivativeStructure, DerivativeStructure, DerivativeStructure, DerivativeStructure)"
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1225," @see #linearCombination(DerivativeStructure, DerivativeStructure, DerivativeStructure, DerivativeStructure, DerivativeStructure, DerivativeStructure, DerivativeStructure, DerivativeStructure)"
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1226, @since 3.2
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1228,"ublic static DerivativeStructure linearCombination(final DerivativeStructure a1, final DerivativeStructure b1,"
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1229,"inal DerivativeStructure a2, final DerivativeStructure b2) {"
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1231,"/ compute an accurate value, taking care of cancellations"
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1232,"inal double accurateValue = MathArrays.linearCombination(a1.getValue(), b1.getValue(),"
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1233,"2.getValue(), b2.getValue());"
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1235,"/ compute a simple value, with all partial derivatives"
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1236,inal DerivativeStructure simpleValue = a1.multiply(b1).add(a2.multiply(b2));
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1238,/ create a result with accurate value and all derivatives (not necessarily as accurate as the value)
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1239,inal double[] data = simpleValue.getAllDerivatives();
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1240,ata[0] = accurateValue;
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1241,"eturn new DerivativeStructure(simpleValue.getFreeParameters(), simpleValue.getOrder(), data);"
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1246, Compute a linear combination accurately.
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1247, <p>
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1248, This method computes a<sub>1</sub>&times;b<sub>1</sub> +
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1249, a<sub>2</sub>&times;b<sub>2</sub>
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1250, to high accuracy. It does so by using specific multiplication and
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1251, addition algorithms to preserve accuracy and reduce cancellation effects.
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1252, It is based on the 2005 paper <a
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1253," href=""http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.2.1547"">"
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1254," Accurate Sum and Dot Product</a> by Takeshi Ogita,"
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1255," Siegfried M. Rump, and Shin'ichi Oishi published in SIAM J. Sci. Comput."
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1256, </p>
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1257, @param a1 first factor of the first term
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1258, @param b1 second factor of the first term
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1259, @param a2 first factor of the second term
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1260, @param b2 second factor of the second term
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1261, @return a<sub>1</sub>&times;b<sub>1</sub> +
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1262, a<sub>2</sub>&times;b<sub>2</sub>
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1263," @see #linearCombination(double, DerivativeStructure, double, DerivativeStructure, double, DerivativeStructure)"
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1264," @see #linearCombination(double, DerivativeStructure, double, DerivativeStructure, double, DerivativeStructure, double, DerivativeStructure)"
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1265, @since 3.2
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1267,"ublic static DerivativeStructure linearCombination(final double a1, final DerivativeStructure b1,"
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1268,"inal double a2, final DerivativeStructure b2) {"
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1270,"/ compute an accurate value, taking care of cancellations"
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1271,"inal double accurateValue = MathArrays.linearCombination(a1, b1.getValue(),"
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1272,"2, b2.getValue());"
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1274,"/ compute a simple value, with all partial derivatives"
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1275,inal DerivativeStructure simpleValue = b1.multiply(a1).add(b2.multiply(a2));
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1277,/ create a result with accurate value and all derivatives (not necessarily as accurate as the value)
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1278,inal double[] data = simpleValue.getAllDerivatives();
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1279,ata[0] = accurateValue;
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1280,"eturn new DerivativeStructure(simpleValue.getFreeParameters(), simpleValue.getOrder(), data);"
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1285, Compute a linear combination accurately.
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1286, <p>
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1287, This method computes a<sub>1</sub>&times;b<sub>1</sub> +
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1288, a<sub>2</sub>&times;b<sub>2</sub> + a<sub>3</sub>&times;b<sub>3</sub>
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1289, to high accuracy. It does so by using specific multiplication and
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1290, addition algorithms to preserve accuracy and reduce cancellation effects.
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1291, It is based on the 2005 paper <a
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1292," href=""http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.2.1547"">"
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1293," Accurate Sum and Dot Product</a> by Takeshi Ogita,"
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1294," Siegfried M. Rump, and Shin'ichi Oishi published in SIAM J. Sci. Comput."
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1295, </p>
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1296, @param a1 first factor of the first term
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1297, @param b1 second factor of the first term
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1298, @param a2 first factor of the second term
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1299, @param b2 second factor of the second term
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1300, @param a3 first factor of the third term
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1301, @param b3 second factor of the third term
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1302, @return a<sub>1</sub>&times;b<sub>1</sub> +
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1303, a<sub>2</sub>&times;b<sub>2</sub> + a<sub>3</sub>&times;b<sub>3</sub>
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1304," @see #linearCombination(DerivativeStructure, DerivativeStructure, DerivativeStructure, DerivativeStructure)"
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1305," @see #linearCombination(DerivativeStructure, DerivativeStructure, DerivativeStructure, DerivativeStructure, DerivativeStructure, DerivativeStructure, DerivativeStructure, DerivativeStructure)"
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1306, @since 3.2
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1308,"ublic static DerivativeStructure linearCombination(final DerivativeStructure a1, final DerivativeStructure b1,"
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1309,"inal DerivativeStructure a2, final DerivativeStructure b2,"
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1310,"inal DerivativeStructure a3, final DerivativeStructure b3) {"
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1312,"/ compute an accurate value, taking care of cancellations"
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1313,"inal double accurateValue = MathArrays.linearCombination(a1.getValue(), b1.getValue(),"
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1314,"2.getValue(), b2.getValue(),"
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1315,"3.getValue(), b3.getValue());"
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1317,"/ compute a simple value, with all partial derivatives"
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1318,inal DerivativeStructure simpleValue = a1.multiply(b1).add(a2.multiply(b2)).add(a3.multiply(b3));
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1320,/ create a result with accurate value and all derivatives (not necessarily as accurate as the value)
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1321,inal double[] data = simpleValue.getAllDerivatives();
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1322,ata[0] = accurateValue;
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1323,"eturn new DerivativeStructure(simpleValue.getFreeParameters(), simpleValue.getOrder(), data);"
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1328, Compute a linear combination accurately.
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1329, <p>
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1330, This method computes a<sub>1</sub>&times;b<sub>1</sub> +
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1331, a<sub>2</sub>&times;b<sub>2</sub> + a<sub>3</sub>&times;b<sub>3</sub>
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1332, to high accuracy. It does so by using specific multiplication and
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1333, addition algorithms to preserve accuracy and reduce cancellation effects.
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1334, It is based on the 2005 paper <a
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1335," href=""http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.2.1547"">"
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1336," Accurate Sum and Dot Product</a> by Takeshi Ogita,"
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1337," Siegfried M. Rump, and Shin'ichi Oishi published in SIAM J. Sci. Comput."
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1338, </p>
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1339, @param a1 first factor of the first term
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1340, @param b1 second factor of the first term
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1341, @param a2 first factor of the second term
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1342, @param b2 second factor of the second term
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1343, @param a3 first factor of the third term
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1344, @param b3 second factor of the third term
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1345, @return a<sub>1</sub>&times;b<sub>1</sub> +
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1346, a<sub>2</sub>&times;b<sub>2</sub> + a<sub>3</sub>&times;b<sub>3</sub>
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1347," @see #linearCombination(double, DerivativeStructure, double, DerivativeStructure)"
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1348," @see #linearCombination(double, DerivativeStructure, double, DerivativeStructure, double, DerivativeStructure, double, DerivativeStructure)"
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1349, @since 3.2
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1351,"ublic static DerivativeStructure linearCombination(final double a1, final DerivativeStructure b1,"
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1352,"inal double a2, final DerivativeStructure b2,"
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1353,"inal double a3, final DerivativeStructure b3) {"
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1355,"/ compute an accurate value, taking care of cancellations"
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1356,"inal double accurateValue = MathArrays.linearCombination(a1, b1.getValue(),"
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1357,"2, b2.getValue(),"
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1358,"3, b3.getValue());"
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1360,"/ compute a simple value, with all partial derivatives"
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1361,inal DerivativeStructure simpleValue = b1.multiply(a1).add(b2.multiply(a2)).add(b3.multiply(a3));
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1363,/ create a result with accurate value and all derivatives (not necessarily as accurate as the value)
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1364,inal double[] data = simpleValue.getAllDerivatives();
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1365,ata[0] = accurateValue;
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1366,"eturn new DerivativeStructure(simpleValue.getFreeParameters(), simpleValue.getOrder(), data);"
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1371, Compute a linear combination accurately.
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1372, <p>
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1373, This method computes a<sub>1</sub>&times;b<sub>1</sub> +
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1374, a<sub>2</sub>&times;b<sub>2</sub> + a<sub>3</sub>&times;b<sub>3</sub> +
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1375, a<sub>4</sub>&times;b<sub>4</sub>
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1376, to high accuracy. It does so by using specific multiplication and
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1377, addition algorithms to preserve accuracy and reduce cancellation effects.
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1378, It is based on the 2005 paper <a
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1379," href=""http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.2.1547"">"
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1380," Accurate Sum and Dot Product</a> by Takeshi Ogita,"
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1381," Siegfried M. Rump, and Shin'ichi Oishi published in SIAM J. Sci. Comput."
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1382, </p>
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1383, @param a1 first factor of the first term
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1384, @param b1 second factor of the first term
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1385, @param a2 first factor of the second term
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1386, @param b2 second factor of the second term
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1387, @param a3 first factor of the third term
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1388, @param b3 second factor of the third term
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1389, @param a4 first factor of the third term
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1390, @param b4 second factor of the third term
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1391, @return a<sub>1</sub>&times;b<sub>1</sub> +
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1392, a<sub>2</sub>&times;b<sub>2</sub> + a<sub>3</sub>&times;b<sub>3</sub> +
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1393, a<sub>4</sub>&times;b<sub>4</sub>
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1394," @see #linearCombination(DerivativeStructure, DerivativeStructure, DerivativeStructure, DerivativeStructure)"
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1395," @see #linearCombination(DerivativeStructure, DerivativeStructure, DerivativeStructure, DerivativeStructure, DerivativeStructure, DerivativeStructure)"
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1396, @since 3.2
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1398,"ublic static DerivativeStructure linearCombination(final DerivativeStructure a1, final DerivativeStructure b1,"
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1399,"inal DerivativeStructure a2, final DerivativeStructure b2,"
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1400,"inal DerivativeStructure a3, final DerivativeStructure b3,"
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1401,"inal DerivativeStructure a4, final DerivativeStructure b4) {"
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1403,"/ compute an accurate value, taking care of cancellations"
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1404,"inal double accurateValue = MathArrays.linearCombination(a1.getValue(), b1.getValue(),"
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1405,"2.getValue(), b2.getValue(),"
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1406,"3.getValue(), b3.getValue(),"
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1407,"4.getValue(), b4.getValue());"
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1409,"/ compute a simple value, with all partial derivatives"
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1410,inal DerivativeStructure simpleValue = a1.multiply(b1).add(a2.multiply(b2)).add(a3.multiply(b3)).add(a4.multiply(b4));
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1412,/ create a result with accurate value and all derivatives (not necessarily as accurate as the value)
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1413,inal double[] data = simpleValue.getAllDerivatives();
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1414,ata[0] = accurateValue;
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1415,"eturn new DerivativeStructure(simpleValue.getFreeParameters(), simpleValue.getOrder(), data);"
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1420, Compute a linear combination accurately.
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1421, <p>
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1422, This method computes a<sub>1</sub>&times;b<sub>1</sub> +
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1423, a<sub>2</sub>&times;b<sub>2</sub> + a<sub>3</sub>&times;b<sub>3</sub> +
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1424, a<sub>4</sub>&times;b<sub>4</sub>
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1425, to high accuracy. It does so by using specific multiplication and
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1426, addition algorithms to preserve accuracy and reduce cancellation effects.
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1427, It is based on the 2005 paper <a
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1428," href=""http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.2.1547"">"
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1429," Accurate Sum and Dot Product</a> by Takeshi Ogita,"
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1430," Siegfried M. Rump, and Shin'ichi Oishi published in SIAM J. Sci. Comput."
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1431, </p>
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1432, @param a1 first factor of the first term
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1433, @param b1 second factor of the first term
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1434, @param a2 first factor of the second term
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1435, @param b2 second factor of the second term
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1436, @param a3 first factor of the third term
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1437, @param b3 second factor of the third term
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1438, @param a4 first factor of the third term
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1439, @param b4 second factor of the third term
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1440, @return a<sub>1</sub>&times;b<sub>1</sub> +
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1441, a<sub>2</sub>&times;b<sub>2</sub> + a<sub>3</sub>&times;b<sub>3</sub> +
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1442, a<sub>4</sub>&times;b<sub>4</sub>
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1443," @see #linearCombination(double, DerivativeStructure, double, DerivativeStructure)"
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1444," @see #linearCombination(double, DerivativeStructure, double, DerivativeStructure, double, DerivativeStructure)"
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1445, @since 3.2
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1447,"ublic static DerivativeStructure linearCombination(final double a1, final DerivativeStructure b1,"
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1448,"inal double a2, final DerivativeStructure b2,"
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1449,"inal double a3, final DerivativeStructure b3,"
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1450,"inal double a4, final DerivativeStructure b4) {"
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1452,"/ compute an accurate value, taking care of cancellations"
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1453,"inal double accurateValue = MathArrays.linearCombination(a1, b1.getValue(),"
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1454,"2, b2.getValue(),"
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1455,"3, b3.getValue(),"
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1456,"4, b4.getValue());"
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1458,"/ compute a simple value, with all partial derivatives"
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1459,inal DerivativeStructure simpleValue = b1.multiply(a1).add(b2.multiply(a2)).add(b3.multiply(a3)).add(b4.multiply(a4));
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1461,/ create a result with accurate value and all derivatives (not necessarily as accurate as the value)
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1462,inal double[] data = simpleValue.getAllDerivatives();
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1463,ata[0] = accurateValue;
False,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1464,"eturn new DerivativeStructure(simpleValue.getFreeParameters(), simpleValue.getOrder(), data);"
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1279,/** Build an array of elements.
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1280,* <p>
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1281,* Arrays are filled with field.getZero()
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1282,* </p>
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1283,* @param <T> the type of the field elements
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1284,* @param field field to which array elements belong
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1285,* @param length of the array
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1286,* @return a new array
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1288,"public static <T> T[] buildArray(final Field<T> field, final int length) {"
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1289,"@SuppressWarnings(""unchecked"") // OK because field must be correct class"
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1290,"T[] array = (T[]) Array.newInstance(field.getRuntimeClass(), length);"
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1291,"Arrays.fill(array, field.getZero());"
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1292,return array;
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1295,/** Build a double dimension  array of elements.
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1296,* <p>
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1297,* Arrays are filled with field.getZero()
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1298,* </p>
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1299,* @param <T> the type of the field elements
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1300,* @param field field to which array elements belong
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1301,* @param rows number of rows in the array
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1302,* @param columns number of columns (may be negative to build partial
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1303,* arrays in the same way <code>new Field[rows][]</code> works)
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1304,* @return a new array
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1306,"@SuppressWarnings(""unchecked"")"
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1307,"public static <T> T[][] buildArray(final Field<T> field, final int rows, final int columns) {"
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1308,final T[][] array;
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1309,if (columns < 0) {
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1310,"T[] dummyRow = buildArray(field, 0);"
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1311,"array = (T[][]) Array.newInstance(dummyRow.getClass(), rows);"
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1312,} else {
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1313,"array = (T[][]) Array.newInstance(field.getRuntimeClass(),"
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1314,new int[] {
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1315,"rows, columns"
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1317,for (int i = 0; i < rows; ++i) {
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1318,"Arrays.fill(array[i], field.getZero());"
True,src/main/java/org/apache/commons/math3/util/MathArrays.java,src/main/java/org/apache/commons/math3/util/MathArrays.java,1321,return array;
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,27,import org.apache.commons.math3.random.Well1024a;
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,1271,@Test
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,1272,public void testLinearCombination1DSDS() {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,1273,final DerivativeStructure[] a = new DerivativeStructure[] {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,1274,"new DerivativeStructure(6, 1, 0, -1321008684645961.0 / 268435456.0),"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,1275,"new DerivativeStructure(6, 1, 1, -5774608829631843.0 / 268435456.0),"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,1276,"new DerivativeStructure(6, 1, 2, -7645843051051357.0 / 8589934592.0)"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,1278,final DerivativeStructure[] b = new DerivativeStructure[] {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,1279,"new DerivativeStructure(6, 1, 3, -5712344449280879.0 / 2097152.0),"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,1280,"new DerivativeStructure(6, 1, 4, -4550117129121957.0 / 2097152.0),"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,1281,"new DerivativeStructure(6, 1, 5, 8846951984510141.0 / 131072.0)"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,1284,"final DerivativeStructure abSumInline = a[0].linearCombination(a[0], b[0], a[1], b[1], a[2], b[2]);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,1285,"final DerivativeStructure abSumArray = a[0].linearCombination(a, b);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,1287,"Assert.assertEquals(abSumInline.getValue(), abSumArray.getValue(), 0);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,1288,"Assert.assertEquals(-1.8551294182586248737720779899, abSumInline.getValue(), 1.0e-15);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,1289,"Assert.assertEquals(b[0].getValue(), abSumInline.getPartialDerivative(1, 0, 0, 0, 0, 0), 1.0e-15);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,1290,"Assert.assertEquals(b[1].getValue(), abSumInline.getPartialDerivative(0, 1, 0, 0, 0, 0), 1.0e-15);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,1291,"Assert.assertEquals(b[2].getValue(), abSumInline.getPartialDerivative(0, 0, 1, 0, 0, 0), 1.0e-15);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,1292,"Assert.assertEquals(a[0].getValue(), abSumInline.getPartialDerivative(0, 0, 0, 1, 0, 0), 1.0e-15);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,1293,"Assert.assertEquals(a[1].getValue(), abSumInline.getPartialDerivative(0, 0, 0, 0, 1, 0), 1.0e-15);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,1294,"Assert.assertEquals(a[2].getValue(), abSumInline.getPartialDerivative(0, 0, 0, 0, 0, 1), 1.0e-15);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,1298,@Test
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,1299,public void testLinearCombination1DoubleDS() {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,1300,final double[] a = new double[] {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,1301,"-1321008684645961.0 / 268435456.0,"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,1302,"-5774608829631843.0 / 268435456.0,"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,1303,-7645843051051357.0 / 8589934592.0
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,1305,final DerivativeStructure[] b = new DerivativeStructure[] {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,1306,"new DerivativeStructure(3, 1, 0, -5712344449280879.0 / 2097152.0),"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,1307,"new DerivativeStructure(3, 1, 1, -4550117129121957.0 / 2097152.0),"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,1308,"new DerivativeStructure(3, 1, 2, 8846951984510141.0 / 131072.0)"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,1311,"final DerivativeStructure abSumInline = b[0].linearCombination(a[0], b[0],"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,1312,"a[1], b[1],"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,1313,"a[2], b[2]);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,1314,"final DerivativeStructure abSumArray = b[0].linearCombination(a, b);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,1316,"Assert.assertEquals(abSumInline.getValue(), abSumArray.getValue(), 0);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,1317,"Assert.assertEquals(-1.8551294182586248737720779899, abSumInline.getValue(), 1.0e-15);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,1318,"Assert.assertEquals(a[0], abSumInline.getPartialDerivative(1, 0, 0), 1.0e-15);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,1319,"Assert.assertEquals(a[1], abSumInline.getPartialDerivative(0, 1, 0), 1.0e-15);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,1320,"Assert.assertEquals(a[2], abSumInline.getPartialDerivative(0, 0, 1), 1.0e-15);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,1324,@Test
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,1325,public void testLinearCombination2DSDS() {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,1326,// we compare accurate versus naive dot product implementations
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,1327,// on regular vectors (i.e. not extreme cases like in the previous test)
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,1328,Well1024a random = new Well1024a(0xc6af886975069f11l);
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,1330,for (int i = 0; i < 10000; ++i) {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,1331,final DerivativeStructure[] u = new DerivativeStructure[4];
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,1332,final DerivativeStructure[] v = new DerivativeStructure[4];
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,1333,for (int j = 0; j < u.length; ++j) {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,1334,"u[j] = new DerivativeStructure(u.length, 1, j, 1e17 * random.nextDouble());"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,1335,"v[j] = new DerivativeStructure(u.length, 1, 1e17 * random.nextDouble());"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,1338,"DerivativeStructure lin = u[0].linearCombination(u[0], v[0], u[1], v[1]);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,1339,double ref = u[0].getValue() * v[0].getValue() +
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,1340,u[1].getValue() * v[1].getValue();
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,1341,"Assert.assertEquals(ref, lin.getValue(), 1.0e-15 * FastMath.abs(ref));"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,1342,"Assert.assertEquals(v[0].getValue(), lin.getPartialDerivative(1, 0, 0, 0), 1.0e-15 * FastMath.abs(v[0].getValue()));"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,1343,"Assert.assertEquals(v[1].getValue(), lin.getPartialDerivative(0, 1, 0, 0), 1.0e-15 * FastMath.abs(v[1].getValue()));"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,1345,"lin = u[0].linearCombination(u[0], v[0], u[1], v[1], u[2], v[2]);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,1346,ref = u[0].getValue() * v[0].getValue() +
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,1347,u[1].getValue() * v[1].getValue() +
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,1348,u[2].getValue() * v[2].getValue();
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,1349,"Assert.assertEquals(ref, lin.getValue(), 1.0e-15 * FastMath.abs(ref));"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,1350,"Assert.assertEquals(v[0].getValue(), lin.getPartialDerivative(1, 0, 0, 0), 1.0e-15 * FastMath.abs(v[0].getValue()));"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,1351,"Assert.assertEquals(v[1].getValue(), lin.getPartialDerivative(0, 1, 0, 0), 1.0e-15 * FastMath.abs(v[1].getValue()));"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,1352,"Assert.assertEquals(v[2].getValue(), lin.getPartialDerivative(0, 0, 1, 0), 1.0e-15 * FastMath.abs(v[2].getValue()));"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,1354,"lin = u[0].linearCombination(u[0], v[0], u[1], v[1], u[2], v[2], u[3], v[3]);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,1355,ref = u[0].getValue() * v[0].getValue() +
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,1356,u[1].getValue() * v[1].getValue() +
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,1357,u[2].getValue() * v[2].getValue() +
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,1358,u[3].getValue() * v[3].getValue();
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,1359,"Assert.assertEquals(ref, lin.getValue(), 1.0e-15 * FastMath.abs(ref));"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,1360,"Assert.assertEquals(v[0].getValue(), lin.getPartialDerivative(1, 0, 0, 0), 1.0e-15 * FastMath.abs(v[0].getValue()));"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,1361,"Assert.assertEquals(v[1].getValue(), lin.getPartialDerivative(0, 1, 0, 0), 1.0e-15 * FastMath.abs(v[1].getValue()));"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,1362,"Assert.assertEquals(v[2].getValue(), lin.getPartialDerivative(0, 0, 1, 0), 1.0e-15 * FastMath.abs(v[2].getValue()));"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,1363,"Assert.assertEquals(v[3].getValue(), lin.getPartialDerivative(0, 0, 0, 1), 1.0e-15 * FastMath.abs(v[3].getValue()));"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,1368,@Test
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,1369,public void testLinearCombination2DoubleDS() {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,1370,// we compare accurate versus naive dot product implementations
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,1371,// on regular vectors (i.e. not extreme cases like in the previous test)
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,1372,Well1024a random = new Well1024a(0xc6af886975069f11l);
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,1374,for (int i = 0; i < 10000; ++i) {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,1375,final double[] u = new double[4];
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,1376,final DerivativeStructure[] v = new DerivativeStructure[4];
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,1377,for (int j = 0; j < u.length; ++j) {
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,1378,u[j] = 1e17 * random.nextDouble();
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,1379,"v[j] = new DerivativeStructure(u.length, 1, j, 1e17 * random.nextDouble());"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,1382,"DerivativeStructure lin = v[0].linearCombination(u[0], v[0], u[1], v[1]);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,1383,double ref = u[0] * v[0].getValue() +
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,1384,u[1] * v[1].getValue();
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,1385,"Assert.assertEquals(ref, lin.getValue(), 1.0e-15 * FastMath.abs(ref));"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,1386,"Assert.assertEquals(u[0], lin.getPartialDerivative(1, 0, 0, 0), 1.0e-15 * FastMath.abs(v[0].getValue()));"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,1387,"Assert.assertEquals(u[1], lin.getPartialDerivative(0, 1, 0, 0), 1.0e-15 * FastMath.abs(v[1].getValue()));"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,1389,"lin = v[0].linearCombination(u[0], v[0], u[1], v[1], u[2], v[2]);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,1390,ref = u[0] * v[0].getValue() +
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,1391,u[1] * v[1].getValue() +
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,1392,u[2] * v[2].getValue();
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,1393,"Assert.assertEquals(ref, lin.getValue(), 1.0e-15 * FastMath.abs(ref));"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,1394,"Assert.assertEquals(u[0], lin.getPartialDerivative(1, 0, 0, 0), 1.0e-15 * FastMath.abs(v[0].getValue()));"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,1395,"Assert.assertEquals(u[1], lin.getPartialDerivative(0, 1, 0, 0), 1.0e-15 * FastMath.abs(v[1].getValue()));"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,1396,"Assert.assertEquals(u[2], lin.getPartialDerivative(0, 0, 1, 0), 1.0e-15 * FastMath.abs(v[2].getValue()));"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,1398,"lin = v[0].linearCombination(u[0], v[0], u[1], v[1], u[2], v[2], u[3], v[3]);"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,1399,ref = u[0] * v[0].getValue() +
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,1400,u[1] * v[1].getValue() +
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,1401,u[2] * v[2].getValue() +
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,1402,u[3] * v[3].getValue();
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,1403,"Assert.assertEquals(ref, lin.getValue(), 1.0e-15 * FastMath.abs(ref));"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,1404,"Assert.assertEquals(u[0], lin.getPartialDerivative(1, 0, 0, 0), 1.0e-15 * FastMath.abs(v[0].getValue()));"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,1405,"Assert.assertEquals(u[1], lin.getPartialDerivative(0, 1, 0, 0), 1.0e-15 * FastMath.abs(v[1].getValue()));"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,1406,"Assert.assertEquals(u[2], lin.getPartialDerivative(0, 0, 1, 0), 1.0e-15 * FastMath.abs(v[2].getValue()));"
True,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,1407,"Assert.assertEquals(u[3], lin.getPartialDerivative(0, 0, 0, 1), 1.0e-15 * FastMath.abs(v[3].getValue()));"
False,src/test/java/org/apache/commons/math3/dfp/DfpTest.java,src/test/java/org/apache/commons/math3/dfp/DfpTest.java,1438,"ssert.assertEquals(""log10 #1"", 1, field.newDfp(""12"").log10());"
False,src/test/java/org/apache/commons/math3/dfp/DfpTest.java,src/test/java/org/apache/commons/math3/dfp/DfpTest.java,1439,"ssert.assertEquals(""log10 #2"", 2, field.newDfp(""123"").log10());"
False,src/test/java/org/apache/commons/math3/dfp/DfpTest.java,src/test/java/org/apache/commons/math3/dfp/DfpTest.java,1440,"ssert.assertEquals(""log10 #3"", 3, field.newDfp(""1234"").log10());"
False,src/test/java/org/apache/commons/math3/dfp/DfpTest.java,src/test/java/org/apache/commons/math3/dfp/DfpTest.java,1441,"ssert.assertEquals(""log10 #4"", 4, field.newDfp(""12345"").log10());"
False,src/test/java/org/apache/commons/math3/dfp/DfpTest.java,src/test/java/org/apache/commons/math3/dfp/DfpTest.java,1442,"ssert.assertEquals(""log10 #5"", 5, field.newDfp(""123456"").log10());"
False,src/test/java/org/apache/commons/math3/dfp/DfpTest.java,src/test/java/org/apache/commons/math3/dfp/DfpTest.java,1443,"ssert.assertEquals(""log10 #6"", 6, field.newDfp(""1234567"").log10());"
False,src/test/java/org/apache/commons/math3/dfp/DfpTest.java,src/test/java/org/apache/commons/math3/dfp/DfpTest.java,1444,"ssert.assertEquals(""log10 #6"", 7, field.newDfp(""12345678"").log10());"
False,src/test/java/org/apache/commons/math3/dfp/DfpTest.java,src/test/java/org/apache/commons/math3/dfp/DfpTest.java,1445,"ssert.assertEquals(""log10 #7"", 8, field.newDfp(""123456789"").log10());"
False,src/test/java/org/apache/commons/math3/dfp/DfpTest.java,src/test/java/org/apache/commons/math3/dfp/DfpTest.java,1446,"ssert.assertEquals(""log10 #8"", 9, field.newDfp(""1234567890"").log10());"
False,src/test/java/org/apache/commons/math3/dfp/DfpTest.java,src/test/java/org/apache/commons/math3/dfp/DfpTest.java,1447,"ssert.assertEquals(""log10 #9"", 10, field.newDfp(""12345678901"").log10());"
False,src/test/java/org/apache/commons/math3/dfp/DfpTest.java,src/test/java/org/apache/commons/math3/dfp/DfpTest.java,1448,"ssert.assertEquals(""log10 #10"", 11, field.newDfp(""123456789012"").log10());"
False,src/test/java/org/apache/commons/math3/dfp/DfpTest.java,src/test/java/org/apache/commons/math3/dfp/DfpTest.java,1449,"ssert.assertEquals(""log10 #11"", 12, field.newDfp(""1234567890123"").log10());"
False,src/test/java/org/apache/commons/math3/dfp/DfpTest.java,src/test/java/org/apache/commons/math3/dfp/DfpTest.java,1451,"ssert.assertEquals(""log10 #12"", 0, field.newDfp(""2"").log10());"
False,src/test/java/org/apache/commons/math3/dfp/DfpTest.java,src/test/java/org/apache/commons/math3/dfp/DfpTest.java,1452,"ssert.assertEquals(""log10 #13"", 0, field.newDfp(""1"").log10());"
False,src/test/java/org/apache/commons/math3/dfp/DfpTest.java,src/test/java/org/apache/commons/math3/dfp/DfpTest.java,1453,"ssert.assertEquals(""log10 #14"", -1, field.newDfp(""0.12"").log10());"
False,src/test/java/org/apache/commons/math3/dfp/DfpTest.java,src/test/java/org/apache/commons/math3/dfp/DfpTest.java,1454,"ssert.assertEquals(""log10 #15"", -2, field.newDfp(""0.012"").log10());"
True,src/test/java/org/apache/commons/math3/dfp/DfpTest.java,src/test/java/org/apache/commons/math3/dfp/DfpTest.java,1438,"Assert.assertEquals(""log10 #1"", 1, field.newDfp(""12"").intLog10());"
True,src/test/java/org/apache/commons/math3/dfp/DfpTest.java,src/test/java/org/apache/commons/math3/dfp/DfpTest.java,1439,"Assert.assertEquals(""log10 #2"", 2, field.newDfp(""123"").intLog10());"
True,src/test/java/org/apache/commons/math3/dfp/DfpTest.java,src/test/java/org/apache/commons/math3/dfp/DfpTest.java,1440,"Assert.assertEquals(""log10 #3"", 3, field.newDfp(""1234"").intLog10());"
True,src/test/java/org/apache/commons/math3/dfp/DfpTest.java,src/test/java/org/apache/commons/math3/dfp/DfpTest.java,1441,"Assert.assertEquals(""log10 #4"", 4, field.newDfp(""12345"").intLog10());"
True,src/test/java/org/apache/commons/math3/dfp/DfpTest.java,src/test/java/org/apache/commons/math3/dfp/DfpTest.java,1442,"Assert.assertEquals(""log10 #5"", 5, field.newDfp(""123456"").intLog10());"
True,src/test/java/org/apache/commons/math3/dfp/DfpTest.java,src/test/java/org/apache/commons/math3/dfp/DfpTest.java,1443,"Assert.assertEquals(""log10 #6"", 6, field.newDfp(""1234567"").intLog10());"
True,src/test/java/org/apache/commons/math3/dfp/DfpTest.java,src/test/java/org/apache/commons/math3/dfp/DfpTest.java,1444,"Assert.assertEquals(""log10 #6"", 7, field.newDfp(""12345678"").intLog10());"
True,src/test/java/org/apache/commons/math3/dfp/DfpTest.java,src/test/java/org/apache/commons/math3/dfp/DfpTest.java,1445,"Assert.assertEquals(""log10 #7"", 8, field.newDfp(""123456789"").intLog10());"
True,src/test/java/org/apache/commons/math3/dfp/DfpTest.java,src/test/java/org/apache/commons/math3/dfp/DfpTest.java,1446,"Assert.assertEquals(""log10 #8"", 9, field.newDfp(""1234567890"").intLog10());"
True,src/test/java/org/apache/commons/math3/dfp/DfpTest.java,src/test/java/org/apache/commons/math3/dfp/DfpTest.java,1447,"Assert.assertEquals(""log10 #9"", 10, field.newDfp(""12345678901"").intLog10());"
True,src/test/java/org/apache/commons/math3/dfp/DfpTest.java,src/test/java/org/apache/commons/math3/dfp/DfpTest.java,1448,"Assert.assertEquals(""log10 #10"", 11, field.newDfp(""123456789012"").intLog10());"
True,src/test/java/org/apache/commons/math3/dfp/DfpTest.java,src/test/java/org/apache/commons/math3/dfp/DfpTest.java,1449,"Assert.assertEquals(""log10 #11"", 12, field.newDfp(""1234567890123"").intLog10());"
True,src/test/java/org/apache/commons/math3/dfp/DfpTest.java,src/test/java/org/apache/commons/math3/dfp/DfpTest.java,1451,"Assert.assertEquals(""log10 #12"", 0, field.newDfp(""2"").intLog10());"
True,src/test/java/org/apache/commons/math3/dfp/DfpTest.java,src/test/java/org/apache/commons/math3/dfp/DfpTest.java,1452,"Assert.assertEquals(""log10 #13"", 0, field.newDfp(""1"").intLog10());"
True,src/test/java/org/apache/commons/math3/dfp/DfpTest.java,src/test/java/org/apache/commons/math3/dfp/DfpTest.java,1453,"Assert.assertEquals(""log10 #14"", -1, field.newDfp(""0.12"").intLog10());"
True,src/test/java/org/apache/commons/math3/dfp/DfpTest.java,src/test/java/org/apache/commons/math3/dfp/DfpTest.java,1454,"Assert.assertEquals(""log10 #15"", -2, field.newDfp(""0.012"").intLog10());"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,33,ublic class RotationDSTest {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,33,public class FieldRotationDSTest {
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,38,"otationDS r = createRotation(1, 0, 0, 0, false);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,38,"FieldRotation<DerivativeStructure> r = createRotation(1, 0, 0, 0, false);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,61,"otationDS r = new RotationDS(createAxis(10, 10, 10), createAngle(2 * FastMath.PI / 3));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,61,"FieldRotation<DerivativeStructure> r = new FieldRotation<DerivativeStructure>(createAxis(10, 10, 10), createAngle(2 * FastMath.PI / 3));"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,70,"ew RotationDS(createAxis(0, 0, 0), createAngle(2 * FastMath.PI / 3));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,70,"new FieldRotation<DerivativeStructure>(createAxis(0, 0, 0), createAngle(2 * FastMath.PI / 3));"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,75," = new RotationDS(createAxis(0, 0, 1), createAngle(1.5 * FastMath.PI));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,75,"r = new FieldRotation<DerivativeStructure>(createAxis(0, 0, 1), createAngle(1.5 * FastMath.PI));"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,79," = new RotationDS(createAxis(0, 1, 0), createAngle(FastMath.PI));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,79,"r = new FieldRotation<DerivativeStructure>(createAxis(0, 1, 0), createAngle(FastMath.PI));"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,93,"otationDS r = createRotation(a, b, c, d, true);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,93,"FieldRotation<DerivativeStructure> r = createRotation(a, b, c, d, true);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,115,otationDS reverted = r.revert();
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,116,otationDS rrT = r.applyTo(reverted);
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,115,FieldRotation<DerivativeStructure> reverted = r.revert();
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,116,FieldRotation<DerivativeStructure> rrT = r.applyTo(reverted);
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,134,otationDS rTr = reverted.applyTo(r);
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,134,FieldRotation<DerivativeStructure> rTr = reverted.applyTo(r);
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,152,"ssert.assertEquals(r.getAngle().getValue(), reverted.getAngle().getValue(), 1.0e-15);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,153,"ssert.assertEquals(-1, Vector3DDS.dotProduct(r.getAxis(), reverted.getAxis()).getValue(), 1.0e-15);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,152,"Assert.assertEquals(r.getAngle().getReal(), reverted.getAngle().getReal(), 1.0e-15);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,153,"Assert.assertEquals(-1, r.getAxis().dotProduct(reverted.getAxis()).getReal(), 1.0e-15);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,159,"ector3DDS u = createVector(3, 2, 1);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,160,"ector3DDS v = createVector(-4, 2, 2);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,161,"otationDS r = new RotationDS(u, v);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,159,"FieldVector3D<DerivativeStructure> u = createVector(3, 2, 1);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,160,"FieldVector3D<DerivativeStructure> v = createVector(-4, 2, 2);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,161,"FieldRotation<DerivativeStructure> r = new FieldRotation<DerivativeStructure>(u, v);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,164,"heckAngle(new RotationDS(u, u.negate()).getAngle(), FastMath.PI);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,164,"checkAngle(new FieldRotation<DerivativeStructure>(u, u.negate()).getAngle(), FastMath.PI);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,167,"ew RotationDS(u, createVector(0, 0, 0));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,167,"new FieldRotation<DerivativeStructure>(u, createVector(0, 0, 0));"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,178,"ector3DDS u1 = createVector(3, 0, 0);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,179,"ector3DDS u2 = createVector(0, 5, 0);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,180,"ector3DDS v1 = createVector(0, 0, 2);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,181,"ector3DDS v2 = createVector(-2, 0, 2);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,182,"otationDS r = new RotationDS(u1, u2, v1, v2);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,178,"FieldVector3D<DerivativeStructure> u1 = createVector(3, 0, 0);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,179,"FieldVector3D<DerivativeStructure> u2 = createVector(0, 5, 0);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,180,"FieldVector3D<DerivativeStructure> v1 = createVector(0, 0, 2);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,181,"FieldVector3D<DerivativeStructure> v2 = createVector(-2, 0, 2);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,182,"FieldRotation<DerivativeStructure> r = new FieldRotation<DerivativeStructure>(u1, u2, v1, v2);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,186," = new RotationDS(u1, u2, u1.negate(), u2.negate());"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,187,ector3DDS axis = r.getAxis();
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,188,"f (Vector3DDS.dotProduct(axis, createVector(0, 0, 1)).getValue() > 0) {"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,186,"r = new FieldRotation<DerivativeStructure>(u1, u2, u1.negate(), u2.negate());"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,187,FieldVector3D<DerivativeStructure> axis = r.getAxis();
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,188,"if (axis.dotProduct(createVector(0, 0, 1)).getReal() > 0) {"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,196," = new RotationDS(createVector(1, 0, 0),  createVector(0, 1, 0),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,196,"r = new FieldRotation<DerivativeStructure>(createVector(1, 0, 0),  createVector(0, 1, 0),"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,201," = new RotationDS(u1, u2, u1, Vector3DDS.crossProduct(u1, u2));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,201,"r = new FieldRotation<DerivativeStructure>(u1, u2, u1, u1.crossProduct(u2));"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,204,"heckRotationDS(new RotationDS(u1, u2, u1, u2), 1, 0, 0, 0);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,204,"checkRotationDS(new FieldRotation<DerivativeStructure>(u1, u2, u1, u2), 1, 0, 0, 0);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,207,"ew RotationDS(u1, u2, createVector(0, 0, 0), v2);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,207,"new FieldRotation<DerivativeStructure>(u1, u2, createVector(0, 0, 0), v2);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,282,"otationDS r = createRotation(m1, 1.0e-7);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,282,"FieldRotation<DerivativeStructure> r = createRotation(m1, 1.0e-7);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,293,ouble d00 = m2[0][0] - m3[0][0].getValue();
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,294,ouble d01 = m2[0][1] - m3[0][1].getValue();
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,295,ouble d02 = m2[0][2] - m3[0][2].getValue();
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,296,ouble d10 = m2[1][0] - m3[1][0].getValue();
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,297,ouble d11 = m2[1][1] - m3[1][1].getValue();
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,298,ouble d12 = m2[1][2] - m3[1][2].getValue();
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,299,ouble d20 = m2[2][0] - m3[2][0].getValue();
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,300,ouble d21 = m2[2][1] - m3[2][1].getValue();
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,301,ouble d22 = m2[2][2] - m3[2][2].getValue();
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,293,double d00 = m2[0][0] - m3[0][0].getReal();
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,294,double d01 = m2[0][1] - m3[0][1].getReal();
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,295,double d02 = m2[0][2] - m3[0][2].getReal();
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,296,double d10 = m2[1][0] - m3[1][0].getReal();
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,297,double d11 = m2[1][1] - m3[1][1].getReal();
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,298,double d12 = m2[1][2] - m3[1][2].getReal();
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,299,double d20 = m2[2][0] - m3[2][0].getReal();
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,300,double d21 = m2[2][1] - m3[2][1].getReal();
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,301,double d22 = m2[2][2] - m3[2][2].getReal();
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,325,ouble m3tm3 = m3[i][0].getValue() * m3[j][0].getValue() +
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,326,3[i][1].getValue() * m3[j][1].getValue() +
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,327,3[i][2].getValue() * m3[j][2].getValue();
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,325,double m3tm3 = m3[i][0].getReal() * m3[j][0].getReal() +
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,326,m3[i][1].getReal() * m3[j][1].getReal() +
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,327,m3[i][2].getReal() * m3[j][2].getReal();
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,337,"ew Vector3DDS(m3[0][0], m3[1][0], m3[2][0]));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,337,"new FieldVector3D<DerivativeStructure>(m3[0][0], m3[1][0], m3[2][0]));"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,339,"ew Vector3DDS(m3[0][1], m3[1][1], m3[2][1]));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,339,"new FieldVector3D<DerivativeStructure>(m3[0][1], m3[1][1], m3[2][1]));"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,341,"ew Vector3DDS(m3[0][2], m3[1][2], m3[2][2]));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,341,"new FieldVector3D<DerivativeStructure>(m3[0][2], m3[1][2], m3[2][2]));"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,374,"otationDS r = new RotationDS(CardanOrders[i],"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,374,"FieldRotation<DerivativeStructure> r = new FieldRotation<DerivativeStructure>(CardanOrders[i],"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,396,"otationDS r = new RotationDS(EulerOrders[i],"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,396,"FieldRotation<DerivativeStructure> r = new FieldRotation<DerivativeStructure>(EulerOrders[i],"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,422,"otationDS r = new RotationDS(CardanOrders[i],"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,422,"FieldRotation<DerivativeStructure> r = new FieldRotation<DerivativeStructure>(CardanOrders[i],"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,443,"otationDS r = new RotationDS(EulerOrders[i],"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,443,"FieldRotation<DerivativeStructure> r = new FieldRotation<DerivativeStructure>(EulerOrders[i],"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,462,"otationDS r1 = new RotationDS(createVector(2, -3, 5), createAngle(1.7));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,462,"FieldRotation<DerivativeStructure> r1 = new FieldRotation<DerivativeStructure>(createVector(2, -3, 5), createAngle(1.7));"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,464,"otationDS r2 = new RotationDS(r1.getQ0().multiply(n), r1.getQ1().multiply(n),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,464,"FieldRotation<DerivativeStructure> r2 = new FieldRotation<DerivativeStructure>(r1.getQ0().multiply(n), r1.getQ1().multiply(n),"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,470,"ector3DDS u = createVector(x, y, z);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,470,"FieldVector3D<DerivativeStructure> u = createVector(x, y, z);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,478,"r1.getQ0().getValue(), -r1.getQ1().getValue(),"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,479,"r1.getQ2().getValue(), -r1.getQ3().getValue());"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,478,"-r1.getQ0().getReal(), -r1.getQ1().getReal(),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,479,"-r1.getQ2().getReal(), -r1.getQ3().getReal());"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,486,"otationDS r1       = new RotationDS(createVector(2, -3, 5), createAngle(1.7));"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,487,"otationDS r2       = new RotationDS(createVector(-1, 3, 2), createAngle(0.3));"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,488,otationDS r3       = r2.applyTo(r1);
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,489,otationDS r3Double = r2.applyTo(r1.toRotation());
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,486,"FieldRotation<DerivativeStructure> r1       = new FieldRotation<DerivativeStructure>(createVector(2, -3, 5), createAngle(1.7));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,487,"FieldRotation<DerivativeStructure> r2       = new FieldRotation<DerivativeStructure>(createVector(-1, 3, 2), createAngle(0.3));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,488,FieldRotation<DerivativeStructure> r3       = r2.applyTo(r1);
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,489,"FieldRotation<DerivativeStructure> r3Double = r2.applyTo(new Rotation(r1.getQ0().getReal(),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,490,"r1.getQ1().getReal(),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,491,"r1.getQ2().getReal(),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,492,"r1.getQ3().getReal(),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,493,false));
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,494,"ector3DDS u = createVector(x, y, z);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,498,"FieldVector3D<DerivativeStructure> u = createVector(x, y, z);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,506,"otationDS r1 = new RotationDS(createVector(2, -3, 5), createAngle(1.7));"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,507,"otationDS r2 = new RotationDS(createVector(-1, 3, 2), createAngle(0.3));"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,508,otationDS r3 = r2.applyInverseTo(r1);
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,509,otationDS r3Double = r2.applyInverseTo(r1.toRotation());
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,510,"FieldRotation<DerivativeStructure> r1 = new FieldRotation<DerivativeStructure>(createVector(2, -3, 5), createAngle(1.7));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,511,"FieldRotation<DerivativeStructure> r2 = new FieldRotation<DerivativeStructure>(createVector(-1, 3, 2), createAngle(0.3));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,512,FieldRotation<DerivativeStructure> r3 = r2.applyInverseTo(r1);
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,513,"FieldRotation<DerivativeStructure> r3Double = r2.applyInverseTo(new Rotation(r1.getQ0().getReal(),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,514,"r1.getQ1().getReal(),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,515,"r1.getQ2().getReal(),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,516,"r1.getQ3().getReal(),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,517,false));
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,514,"ector3DDS u = createVector(x, y, z);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,522,"FieldVector3D<DerivativeStructure> u = createVector(x, y, z);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,530,"otationDS r = new RotationDS(createVector(unit[0], unit[1], unit[2]),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,538,"FieldRotation<DerivativeStructure> r = new FieldRotation<DerivativeStructure>(createVector(unit[0], unit[1], unit[2]),"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,536,"ector3DDS uds   = createVector(x, y, z);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,537,ector3DDS ruds  = r.applyTo(uds);
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,538,ector3DDS rIuds = r.applyInverseTo(uds);
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,544,"FieldVector3D<DerivativeStructure> uds   = createVector(x, y, z);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,545,FieldVector3D<DerivativeStructure> ruds  = r.applyTo(uds);
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,546,FieldVector3D<DerivativeStructure> rIuds = r.applyInverseTo(uds);
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,540,ector3DDS ru    = r.applyTo(u);
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,541,ector3DDS rIu   = r.applyInverseTo(u);
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,548,FieldVector3D<DerivativeStructure> ru    = r.applyTo(u);
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,549,FieldVector3D<DerivativeStructure> rIu   = r.applyInverseTo(u);
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,547,"heckVector(ruds, new Vector3DDS(ruArray));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,555,"checkVector(ruds, new FieldVector3D<DerivativeStructure>(ruArray));"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,549,"heckVector(rIuds, new Vector3DDS(rIuArray));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,557,"checkVector(rIuds, new FieldVector3D<DerivativeStructure>(rIuArray));"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,566,"otationDS r1Prime = new RotationDS(new DerivativeStructure(4, 1, 0, r1.getQ0()),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,574,"FieldRotation<DerivativeStructure> r1Prime = new FieldRotation<DerivativeStructure>(new DerivativeStructure(4, 1, 0, r1.getQ0()),"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,572,"otationDS r2 = new RotationDS(createVector(unit2[0], unit2[1], unit2[2]),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,580,"FieldRotation<DerivativeStructure> r2 = new FieldRotation<DerivativeStructure>(createVector(unit2[0], unit2[1], unit2[2]),"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,575,"otationDS rA = RotationDS.applyTo(r1, r2);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,576,otationDS rB = r1Prime.applyTo(r2);
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,577,"otationDS rC = RotationDS.applyInverseTo(r1, r2);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,578,otationDS rD = r1Prime.applyInverseTo(r2);
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,583,"FieldRotation<DerivativeStructure> rA = FieldRotation.applyTo(r1, r2);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,584,FieldRotation<DerivativeStructure> rB = r1Prime.applyTo(r2);
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,585,"FieldRotation<DerivativeStructure> rC = FieldRotation.applyInverseTo(r1, r2);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,586,FieldRotation<DerivativeStructure> rD = r1Prime.applyInverseTo(r2);
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,584,"ector3DDS uds   = createVector(x, y, z);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,585,"heckVector(r1Prime.applyTo(uds), RotationDS.applyTo(r1, uds));"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,586,"heckVector(r1Prime.applyInverseTo(uds), RotationDS.applyInverseTo(r1, uds));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,592,"FieldVector3D<DerivativeStructure> uds   = createVector(x, y, z);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,593,"checkVector(r1Prime.applyTo(uds), FieldRotation.applyTo(r1, uds));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,594,"checkVector(r1Prime.applyInverseTo(uds), FieldRotation.applyInverseTo(r1, uds));"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,611,"otationDS r    = new RotationDS(createAxis(kx, ky, kz), createAngle(theta));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,619,"FieldRotation<DerivativeStructure> r    = new FieldRotation<DerivativeStructure>(createAxis(kx, ky, kz), createAngle(theta));"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,625,"ector3DDS v = r.applyTo(createVector(x, y, z));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,633,"FieldVector3D<DerivativeStructure> v = r.applyTo(createVector(x, y, z));"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,633,"ssert.assertEquals(rt.getX(), v.getX().getValue(), eps);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,634,"ssert.assertEquals(rt.getY(), v.getY().getValue(), eps);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,635,"ssert.assertEquals(rt.getZ(), v.getZ().getValue(), eps);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,641,"Assert.assertEquals(rt.getX(), v.getX().getReal(), eps);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,642,"Assert.assertEquals(rt.getY(), v.getY().getReal(), eps);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,643,"Assert.assertEquals(rt.getZ(), v.getZ().getReal(), eps);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,675,"otationDS r = new RotationDS(createAxis(2, -3, 5), createAngle(1.7));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,683,"FieldRotation<DerivativeStructure> r = new FieldRotation<DerivativeStructure>(createAxis(2, -3, 5), createAngle(1.7));"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,680,"ector3DDS u = createVector(x, y, z);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,681,ector3DDS v = r.applyTo(u);
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,688,"FieldVector3D<DerivativeStructure> u = createVector(x, y, z);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,689,FieldVector3D<DerivativeStructure> v = r.applyTo(u);
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,684,"ssert.assertEquals(v.getX().getValue(), out[0].getValue(), 1.0e-10);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,685,"ssert.assertEquals(v.getY().getValue(), out[1].getValue(), 1.0e-10);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,686,"ssert.assertEquals(v.getZ().getValue(), out[2].getValue(), 1.0e-10);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,692,"Assert.assertEquals(v.getX().getReal(), out[0].getReal(), 1.0e-10);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,693,"Assert.assertEquals(v.getY().getReal(), out[1].getReal(), 1.0e-10);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,694,"Assert.assertEquals(v.getZ().getReal(), out[2].getReal(), 1.0e-10);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,688,"ssert.assertEquals(u.getX().getValue(), out[0].getValue(), 1.0e-10);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,689,"ssert.assertEquals(u.getY().getValue(), out[1].getValue(), 1.0e-10);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,690,"ssert.assertEquals(u.getZ().getValue(), out[2].getValue(), 1.0e-10);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,696,"Assert.assertEquals(u.getX().getReal(), out[0].getReal(), 1.0e-10);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,697,"Assert.assertEquals(u.getY().getReal(), out[1].getReal(), 1.0e-10);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,698,"Assert.assertEquals(u.getZ().getReal(), out[2].getReal(), 1.0e-10);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,703,"otationDS r = new RotationDS(createVector(2, -3, 5), createAngle(1.7));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,711,"FieldRotation<DerivativeStructure> r = new FieldRotation<DerivativeStructure>(createVector(2, -3, 5), createAngle(1.7));"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,706,"ector3DDS u = createVector(FastMath.cos(lambda) * FastMath.cos(phi),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,714,"FieldVector3D<DerivativeStructure> u = createVector(FastMath.cos(lambda) * FastMath.cos(phi),"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,717,"ssert.assertEquals(in[0].getValue(), rebuilt[0].getValue(), 1.0e-12);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,718,"ssert.assertEquals(in[1].getValue(), rebuilt[1].getValue(), 1.0e-12);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,719,"ssert.assertEquals(in[2].getValue(), rebuilt[2].getValue(), 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,725,"Assert.assertEquals(in[0].getReal(), rebuilt[0].getReal(), 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,726,"Assert.assertEquals(in[1].getReal(), rebuilt[1].getReal(), 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,727,"Assert.assertEquals(in[2].getReal(), rebuilt[2].getReal(), 1.0e-12);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,726,"ector3DDS u = createVector(FastMath.cos(lambda) * FastMath.cos(phi),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,734,"FieldVector3D<DerivativeStructure> u = createVector(FastMath.cos(lambda) * FastMath.cos(phi),"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,734," = new RotationDS(createVector(0, 0, 1), createAngle(FastMath.PI));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,742,"r = new FieldRotation<DerivativeStructure>(createVector(0, 0, 1), createAngle(FastMath.PI));"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,737,"ector3DDS u = createVector(FastMath.cos(lambda) * FastMath.cos(phi),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,745,"FieldVector3D<DerivativeStructure> u = createVector(FastMath.cos(lambda) * FastMath.cos(phi),"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,749,"ector3DDS u1 = createVector(-1321008684645961.0 /  268435456.0,"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,757,"FieldVector3D<DerivativeStructure> u1 = createVector(-1321008684645961.0 /  268435456.0,"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,752,"ector3DDS u2 =createVector( -5712344449280879.0 /    2097152.0,"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,760,"FieldVector3D<DerivativeStructure> u2 =createVector( -5712344449280879.0 /    2097152.0,"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,755,"otationDS rot = new RotationDS(u1, u2, createVector(1, 0, 0),createVector(0, 0, 1));"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,756,"ssert.assertEquals( 0.6228370359608200639829222, rot.getQ0().getValue(), 1.0e-15);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,757,"ssert.assertEquals( 0.0257707621456498790029987, rot.getQ1().getValue(), 1.0e-15);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,758,"ssert.assertEquals(-0.0000000002503012255839931, rot.getQ2().getValue(), 1.0e-15);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,759,"ssert.assertEquals(-0.7819270390861109450724902, rot.getQ3().getValue(), 1.0e-15);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,763,"FieldRotation<DerivativeStructure> rot = new FieldRotation<DerivativeStructure>(u1, u2, createVector(1, 0, 0),createVector(0, 0, 1));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,764,"Assert.assertEquals( 0.6228370359608200639829222, rot.getQ0().getReal(), 1.0e-15);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,765,"Assert.assertEquals( 0.0257707621456498790029987, rot.getQ1().getReal(), 1.0e-15);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,766,"Assert.assertEquals(-0.0000000002503012255839931, rot.getQ2().getReal(), 1.0e-15);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,767,"Assert.assertEquals(-0.7819270390861109450724902, rot.getQ3().getReal(), 1.0e-15);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,764,"ector3DDS u1 = createVector(0.9999988431610581, -0.0015210774290851095, 0.0);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,765,"ector3DDS u2 = createVector(0.0, 0.0, 1.0);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,772,"FieldVector3D<DerivativeStructure> u1 = createVector(0.9999988431610581, -0.0015210774290851095, 0.0);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,773,"FieldVector3D<DerivativeStructure> u2 = createVector(0.0, 0.0, 1.0);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,767,"ector3DDS v1 = createVector(0.9999999999999999, 0.0, 0.0);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,768,"ector3DDS v2 = createVector(0.0, 0.0, -1.0);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,775,"FieldVector3D<DerivativeStructure> v1 = createVector(0.9999999999999999, 0.0, 0.0);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,776,"FieldVector3D<DerivativeStructure> v2 = createVector(0.0, 0.0, -1.0);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,770,"otationDS quat = new RotationDS(u1, u2, v1, v2);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,771,ouble q2 = quat.getQ0().getValue() * quat.getQ0().getValue() +
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,772,uat.getQ1().getValue() * quat.getQ1().getValue() +
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,773,uat.getQ2().getValue() * quat.getQ2().getValue() +
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,774,uat.getQ3().getValue() * quat.getQ3().getValue();
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,778,"FieldRotation<DerivativeStructure> quat = new FieldRotation<DerivativeStructure>(u1, u2, v1, v2);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,779,double q2 = quat.getQ0().getReal() * quat.getQ0().getReal() +
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,780,quat.getQ1().getReal() * quat.getQ1().getReal() +
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,781,quat.getQ2().getReal() * quat.getQ2().getReal() +
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,782,quat.getQ3().getReal() * quat.getQ3().getReal();
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,776,"ssert.assertEquals(0.0, Vector3DDS.angle(v1, quat.applyTo(u1)).getValue(), 1.0e-14);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,777,"ssert.assertEquals(0.0, Vector3DDS.angle(v2, quat.applyTo(u2)).getValue(), 1.0e-14);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,784,"Assert.assertEquals(0.0, v1.angle(quat.applyTo(u1)).getReal(), 1.0e-14);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,785,"Assert.assertEquals(0.0, v2.angle(quat.applyTo(u2)).getReal(), 1.0e-14);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,782,"ssert.assertEquals(a1.getValue(), MathUtils.normalizeAngle(a2, a1.getValue()), 1.0e-10);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,790,"Assert.assertEquals(a1.getReal(), MathUtils.normalizeAngle(a2, a1.getReal()), 1.0e-10);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,785,"rivate void checkRotationDS(RotationDS r, double q0, double q1, double q2, double q3) {"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,786,"otationDS rPrime = createRotation(q0, q1, q2, q3, false);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,787,"ssert.assertEquals(0, RotationDS.distance(r, rPrime).getValue(), 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,793,"private void checkRotationDS(FieldRotation<DerivativeStructure> r, double q0, double q1, double q2, double q3) {"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,794,"FieldRotation<DerivativeStructure> rPrime = createRotation(q0, q1, q2, q3, false);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,795,"Assert.assertEquals(0, FieldRotation.distance(r, rPrime).getReal(), 1.0e-12);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,790,"rivate RotationDS createRotation(double q0, double q1, double q2, double q3,"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,798,"private FieldRotation<DerivativeStructure> createRotation(double q0, double q1, double q2, double q3,"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,792,"eturn new RotationDS(new DerivativeStructure(4, 1, 0, q0),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,800,"return new FieldRotation<DerivativeStructure>(new DerivativeStructure(4, 1, 0, q0),"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,799,"rivate RotationDS createRotation(double[][] m, double threshold) {"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,807,"private FieldRotation<DerivativeStructure> createRotation(double[][] m, double threshold) {"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,808,"eturn new RotationDS(mds, threshold);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,816,"return new FieldRotation<DerivativeStructure>(mds, threshold);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,811,"rivate Vector3DDS createVector(double x, double y, double z) {"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,812,"eturn new Vector3DDS(new DerivativeStructure(4, 1, x),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,819,"private FieldVector3D<DerivativeStructure> createVector(double x, double y, double z) {"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,820,"return new FieldVector3D<DerivativeStructure>(new DerivativeStructure(4, 1, x),"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,817,"rivate Vector3DDS createAxis(double x, double y, double z) {"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,818,"eturn new Vector3DDS(new DerivativeStructure(4, 1, 0, x),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,825,"private FieldVector3D<DerivativeStructure> createAxis(double x, double y, double z) {"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,826,"return new FieldVector3D<DerivativeStructure>(new DerivativeStructure(4, 1, 0, x),"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,827,"rivate void checkVector(Vector3DDS u, Vector3DDS v) {"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,828,"ssert.assertEquals(u.getX().getValue(), v.getX().getValue(), 1.0e-12);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,829,"ssert.assertEquals(u.getY().getValue(), v.getY().getValue(), 1.0e-12);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,830,"ssert.assertEquals(u.getZ().getValue(), v.getZ().getValue(), 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,835,"private void checkVector(FieldVector3D<DerivativeStructure> u, FieldVector3D<DerivativeStructure> v) {"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,836,"Assert.assertEquals(u.getX().getReal(), v.getX().getReal(), 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,837,"Assert.assertEquals(u.getY().getReal(), v.getY().getReal(), 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java,838,"Assert.assertEquals(u.getZ().getReal(), v.getZ().getReal(), 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,14,* See the License for the specific language governing permissions and
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,15,* limitations under the License.
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,18,package org.apache.commons.math3.geometry.euclidean.threed;
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,20,import org.apache.commons.math3.dfp.Dfp;
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,21,import org.apache.commons.math3.dfp.DfpField;
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,22,import org.apache.commons.math3.exception.MathArithmeticException;
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,23,import org.apache.commons.math3.exception.MathIllegalArgumentException;
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,24,import org.apache.commons.math3.random.UnitSphereRandomVectorGenerator;
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,25,import org.apache.commons.math3.random.Well1024a;
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,26,import org.apache.commons.math3.util.FastMath;
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,27,import org.apache.commons.math3.util.MathUtils;
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,28,import org.junit.Assert;
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,29,import org.junit.Test;
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,32,public class FieldRotationDfpTest {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,34,@Test
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,35,public void testIdentity() {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,37,"FieldRotation<Dfp> r = createRotation(1, 0, 0, 0, false);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,38,"checkVector(r.applyTo(createVector(1, 0, 0)), createVector(1, 0, 0));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,39,"checkVector(r.applyTo(createVector(0, 1, 0)), createVector(0, 1, 0));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,40,"checkVector(r.applyTo(createVector(0, 0, 1)), createVector(0, 0, 1));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,41,"checkAngle(r.getAngle(), 0);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,43,"r = createRotation(-1, 0, 0, 0, false);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,44,"checkVector(r.applyTo(createVector(1, 0, 0)), createVector(1, 0, 0));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,45,"checkVector(r.applyTo(createVector(0, 1, 0)), createVector(0, 1, 0));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,46,"checkVector(r.applyTo(createVector(0, 0, 1)), createVector(0, 0, 1));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,47,"checkAngle(r.getAngle(), 0);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,49,"r = createRotation(42, 0, 0, 0, true);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,50,"checkVector(r.applyTo(createVector(1, 0, 0)), createVector(1, 0, 0));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,51,"checkVector(r.applyTo(createVector(0, 1, 0)), createVector(0, 1, 0));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,52,"checkVector(r.applyTo(createVector(0, 0, 1)), createVector(0, 0, 1));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,53,"checkAngle(r.getAngle(), 0);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,57,@Test
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,58,public void testAxisAngle() throws MathIllegalArgumentException {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,60,"FieldRotation<Dfp> r = new FieldRotation<Dfp>(createAxis(10, 10, 10), createAngle(2 * FastMath.PI / 3));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,61,"checkVector(r.applyTo(createVector(1, 0, 0)), createVector(0, 1, 0));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,62,"checkVector(r.applyTo(createVector(0, 1, 0)), createVector(0, 0, 1));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,63,"checkVector(r.applyTo(createVector(0, 0, 1)), createVector(1, 0, 0));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,64,double s = 1 / FastMath.sqrt(3);
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,65,"checkVector(r.getAxis(), createVector(s, s, s));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,66,"checkAngle(r.getAngle(), 2 * FastMath.PI / 3);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,68,try {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,69,"new FieldRotation<Dfp>(createAxis(0, 0, 0), createAngle(2 * FastMath.PI / 3));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,70,"Assert.fail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,71,} catch (MathIllegalArgumentException e) {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,74,"r = new FieldRotation<Dfp>(createAxis(0, 0, 1), createAngle(1.5 * FastMath.PI));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,75,"checkVector(r.getAxis(), createVector(0, 0, -1));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,76,"checkAngle(r.getAngle(), 0.5 * FastMath.PI);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,78,"r = new FieldRotation<Dfp>(createAxis(0, 1, 0), createAngle(FastMath.PI));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,79,"checkVector(r.getAxis(), createVector(0, 1, 0));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,80,"checkAngle(r.getAngle(), FastMath.PI);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,82,"checkVector(createRotation(1, 0, 0, 0, false).getAxis(), createVector(1, 0, 0));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,86,@Test
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,87,public void testRevert() {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,88,double a = 0.001;
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,89,double b = 0.36;
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,90,double c = 0.48;
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,91,double d = 0.8;
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,92,"FieldRotation<Dfp> r = createRotation(a, b, c, d, true);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,93,FieldRotation<Dfp> reverted = r.revert();
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,94,FieldRotation<Dfp> rrT = r.applyTo(reverted);
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,95,"checkRotationDS(rrT, 1, 0, 0, 0);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,96,FieldRotation<Dfp> rTr = reverted.applyTo(r);
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,97,"checkRotationDS(rTr, 1, 0, 0, 0);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,98,"Assert.assertEquals(r.getAngle().getReal(), reverted.getAngle().getReal(), 1.0e-15);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,99,"Assert.assertEquals(-1, r.getAxis().dotProduct(reverted.getAxis()).getReal(), 1.0e-15);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,102,@Test
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,103,public void testVectorOnePair() throws MathArithmeticException {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,105,"FieldVector3D<Dfp> u = createVector(3, 2, 1);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,106,"FieldVector3D<Dfp> v = createVector(-4, 2, 2);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,107,"FieldRotation<Dfp> r = new FieldRotation<Dfp>(u, v);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,108,"checkVector(r.applyTo(u.scalarMultiply(v.getNorm())), v.scalarMultiply(u.getNorm()));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,110,"checkAngle(new FieldRotation<Dfp>(u, u.negate()).getAngle(), FastMath.PI);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,112,try {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,113,"new FieldRotation<Dfp>(u, createVector(0, 0, 0));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,114,"Assert.fail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,115,} catch (MathArithmeticException e) {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,116,// expected behavior
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,121,@Test
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,122,public void testVectorTwoPairs() throws MathArithmeticException {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,124,"FieldVector3D<Dfp> u1 = createVector(3, 0, 0);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,125,"FieldVector3D<Dfp> u2 = createVector(0, 5, 0);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,126,"FieldVector3D<Dfp> v1 = createVector(0, 0, 2);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,127,"FieldVector3D<Dfp> v2 = createVector(-2, 0, 2);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,128,"FieldRotation<Dfp> r = new FieldRotation<Dfp>(u1, u2, v1, v2);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,129,"checkVector(r.applyTo(createVector(1, 0, 0)), createVector(0, 0, 1));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,130,"checkVector(r.applyTo(createVector(0, 1, 0)), createVector(-1, 0, 0));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,132,"r = new FieldRotation<Dfp>(u1, u2, u1.negate(), u2.negate());"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,133,FieldVector3D<Dfp> axis = r.getAxis();
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,134,"if (axis.dotProduct(createVector(0, 0, 1)).getReal() > 0) {"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,135,"checkVector(axis, createVector(0, 0, 1));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,136,} else {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,137,"checkVector(axis, createVector(0, 0, -1));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,139,"checkAngle(r.getAngle(), FastMath.PI);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,141,double sqrt = FastMath.sqrt(2) / 2;
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,142,"r = new FieldRotation<Dfp>(createVector(1, 0, 0),  createVector(0, 1, 0),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,143,"createVector(0.5, 0.5,  sqrt),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,144,"createVector(0.5, 0.5, -sqrt));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,145,"checkRotationDS(r, sqrt, 0.5, 0.5, 0);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,147,"r = new FieldRotation<Dfp>(u1, u2, u1, u1.crossProduct(u2));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,148,"checkRotationDS(r, sqrt, -sqrt, 0, 0);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,150,"checkRotationDS(new FieldRotation<Dfp>(u1, u2, u1, u2), 1, 0, 0, 0);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,152,try {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,153,"new FieldRotation<Dfp>(u1, u2, createVector(0, 0, 0), v2);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,154,"Assert.fail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,155,} catch (MathArithmeticException e) {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,156,// expected behavior
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,161,@Test
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,162,public void testMatrix()
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,163,throws NotARotationMatrixException {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,165,try {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,166,createRotation(new double[][] {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,167,"{ 0.0, 1.0, 0.0 },"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,168,"{ 1.0, 0.0, 0.0 }"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,169,"}, 1.0e-7);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,170,"Assert.fail(""Expecting NotARotationMatrixException"");"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,171,} catch (NotARotationMatrixException nrme) {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,172,// expected behavior
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,175,try {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,176,createRotation(new double[][] {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,177,"{  0.445888,  0.797184, -0.407040 },"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,178,"{  0.821760, -0.184320,  0.539200 },"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,179,"{ -0.354816,  0.574912,  0.737280 }"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,180,"}, 1.0e-7);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,181,"Assert.fail(""Expecting NotARotationMatrixException"");"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,182,} catch (NotARotationMatrixException nrme) {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,183,// expected behavior
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,186,try {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,187,createRotation(new double[][] {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,188,"{  0.4,  0.8, -0.4 },"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,189,"{ -0.4,  0.6,  0.7 },"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,190,"{  0.8, -0.2,  0.5 }"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,191,"}, 1.0e-15);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,192,"Assert.fail(""Expecting NotARotationMatrixException"");"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,193,} catch (NotARotationMatrixException nrme) {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,194,// expected behavior
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,197,checkRotationDS(createRotation(new double[][] {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,198,"{  0.445888,  0.797184, -0.407040 },"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,199,"{ -0.354816,  0.574912,  0.737280 },"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,200,"{  0.821760, -0.184320,  0.539200 }"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,201,"}, 1.0e-10),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,202,"0.8, 0.288, 0.384, 0.36);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,204,checkRotationDS(createRotation(new double[][] {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,205,"{  0.539200,  0.737280,  0.407040 },"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,206,"{  0.184320, -0.574912,  0.797184 },"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,207,"{  0.821760, -0.354816, -0.445888 }"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,208,"}, 1.0e-10),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,209,"0.36, 0.8, 0.288, 0.384);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,211,checkRotationDS(createRotation(new double[][] {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,212,"{ -0.445888,  0.797184, -0.407040 },"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,213,"{  0.354816,  0.574912,  0.737280 },"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,214,"{  0.821760,  0.184320, -0.539200 }"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,215,"}, 1.0e-10),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,216,"0.384, 0.36, 0.8, 0.288);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,218,checkRotationDS(createRotation(new double[][] {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,219,"{ -0.539200,  0.737280,  0.407040 },"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,220,"{ -0.184320, -0.574912,  0.797184 },"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,221,"{  0.821760,  0.354816,  0.445888 }"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,222,"}, 1.0e-10),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,223,"0.288, 0.384, 0.36, 0.8);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,225,"double[][] m1 = { { 0.0, 1.0, 0.0 },"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,226,"{ 0.0, 0.0, 1.0 },"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,227,"{ 1.0, 0.0, 0.0 } };"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,228,"FieldRotation<Dfp> r = createRotation(m1, 1.0e-7);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,229,"checkVector(r.applyTo(createVector(1, 0, 0)), createVector(0, 0, 1));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,230,"checkVector(r.applyTo(createVector(0, 1, 0)), createVector(1, 0, 0));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,231,"checkVector(r.applyTo(createVector(0, 0, 1)), createVector(0, 1, 0));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,233,"double[][] m2 = { { 0.83203, -0.55012, -0.07139 },"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,234,"{ 0.48293,  0.78164, -0.39474 },"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,235,"{ 0.27296,  0.29396,  0.91602 } };"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,236,"r = createRotation(m2, 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,238,Dfp[][] m3 = r.getMatrix();
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,239,double d00 = m2[0][0] - m3[0][0].getReal();
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,240,double d01 = m2[0][1] - m3[0][1].getReal();
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,241,double d02 = m2[0][2] - m3[0][2].getReal();
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,242,double d10 = m2[1][0] - m3[1][0].getReal();
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,243,double d11 = m2[1][1] - m3[1][1].getReal();
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,244,double d12 = m2[1][2] - m3[1][2].getReal();
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,245,double d20 = m2[2][0] - m3[2][0].getReal();
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,246,double d21 = m2[2][1] - m3[2][1].getReal();
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,247,double d22 = m2[2][2] - m3[2][2].getReal();
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,249,Assert.assertTrue(FastMath.abs(d00) < 6.0e-6);
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,250,Assert.assertTrue(FastMath.abs(d01) < 6.0e-6);
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,251,Assert.assertTrue(FastMath.abs(d02) < 6.0e-6);
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,252,Assert.assertTrue(FastMath.abs(d10) < 6.0e-6);
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,253,Assert.assertTrue(FastMath.abs(d11) < 6.0e-6);
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,254,Assert.assertTrue(FastMath.abs(d12) < 6.0e-6);
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,255,Assert.assertTrue(FastMath.abs(d20) < 6.0e-6);
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,256,Assert.assertTrue(FastMath.abs(d21) < 6.0e-6);
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,257,Assert.assertTrue(FastMath.abs(d22) < 6.0e-6);
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,259,Assert.assertTrue(FastMath.abs(d00) > 4.0e-7);
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,260,Assert.assertTrue(FastMath.abs(d01) > 4.0e-7);
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,261,Assert.assertTrue(FastMath.abs(d02) > 4.0e-7);
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,262,Assert.assertTrue(FastMath.abs(d10) > 4.0e-7);
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,263,Assert.assertTrue(FastMath.abs(d11) > 4.0e-7);
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,264,Assert.assertTrue(FastMath.abs(d12) > 4.0e-7);
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,265,Assert.assertTrue(FastMath.abs(d20) > 4.0e-7);
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,266,Assert.assertTrue(FastMath.abs(d21) > 4.0e-7);
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,267,Assert.assertTrue(FastMath.abs(d22) > 4.0e-7);
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,269,for (int i = 0; i < 3; ++i) {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,270,for (int j = 0; j < 3; ++j) {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,271,double m3tm3 = m3[i][0].getReal() * m3[j][0].getReal() +
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,272,m3[i][1].getReal() * m3[j][1].getReal() +
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,273,m3[i][2].getReal() * m3[j][2].getReal();
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,274,if (i == j) {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,275,Assert.assertTrue(FastMath.abs(m3tm3 - 1.0) < 1.0e-10);
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,276,} else {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,277,Assert.assertTrue(FastMath.abs(m3tm3) < 1.0e-10);
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,282,"checkVector(r.applyTo(createVector(1, 0, 0)),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,283,"new FieldVector3D<Dfp>(m3[0][0], m3[1][0], m3[2][0]));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,284,"checkVector(r.applyTo(createVector(0, 1, 0)),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,285,"new FieldVector3D<Dfp>(m3[0][1], m3[1][1], m3[2][1]));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,286,"checkVector(r.applyTo(createVector(0, 0, 1)),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,287,"new FieldVector3D<Dfp>(m3[0][2], m3[1][2], m3[2][2]));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,289,"double[][] m4 = { { 1.0,  0.0,  0.0 },"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,290,"{ 0.0, -1.0,  0.0 },"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,291,"{ 0.0,  0.0, -1.0 } };"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,292,"r = createRotation(m4, 1.0e-7);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,293,"checkAngle(r.getAngle(), FastMath.PI);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,295,try {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,296,"double[][] m5 = { { 0.0, 0.0, 1.0 },"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,297,"{ 0.0, 1.0, 0.0 },"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,298,"{ 1.0, 0.0, 0.0 } };"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,299,"r = createRotation(m5, 1.0e-7);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,300,"Assert.fail(""got "" + r + "", should have caught an exception"");"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,301,} catch (NotARotationMatrixException e) {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,302,// expected
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,307,@Test
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,308,public void testAngles()
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,309,throws CardanEulerSingularityException {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,311,DfpField field = new DfpField(15);
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,313,RotationOrder[] CardanOrders = {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,314,"RotationOrder.XYZ, RotationOrder.XZY, RotationOrder.YXZ,"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,315,"RotationOrder.YZX, RotationOrder.ZXY, RotationOrder.ZYX"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,318,for (int i = 0; i < CardanOrders.length; ++i) {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,319,for (double alpha1 = 0.1; alpha1 < 6.2; alpha1 += 2.0) {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,320,for (double alpha2 = -1.55; alpha2 < 1.55; alpha2 += 0.8) {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,321,for (double alpha3 = 0.1; alpha3 < 6.2; alpha3 += 2.0) {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,322,"FieldRotation<Dfp> r = new FieldRotation<Dfp>(CardanOrders[i],"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,323,"field.newDfp(alpha1),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,324,"field.newDfp(alpha2),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,325,field.newDfp(alpha3));
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,326,Dfp[] angles = r.getAngles(CardanOrders[i]);
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,327,"checkAngle(angles[0], alpha1);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,328,"checkAngle(angles[1], alpha2);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,329,"checkAngle(angles[2], alpha3);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,335,RotationOrder[] EulerOrders = {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,336,"RotationOrder.XYX, RotationOrder.XZX, RotationOrder.YXY,"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,337,"RotationOrder.YZY, RotationOrder.ZXZ, RotationOrder.ZYZ"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,340,for (int i = 0; i < EulerOrders.length; ++i) {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,341,for (double alpha1 = 0.1; alpha1 < 6.2; alpha1 += 2.0) {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,342,for (double alpha2 = 0.05; alpha2 < 3.1; alpha2 += 0.8) {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,343,for (double alpha3 = 0.1; alpha3 < 6.2; alpha3 += 2.0) {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,344,"FieldRotation<Dfp> r = new FieldRotation<Dfp>(EulerOrders[i],"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,345,"field.newDfp(alpha1),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,346,"field.newDfp(alpha2),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,347,field.newDfp(alpha3));
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,348,Dfp[] angles = r.getAngles(EulerOrders[i]);
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,349,"checkAngle(angles[0], alpha1);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,350,"checkAngle(angles[1], alpha2);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,351,"checkAngle(angles[2], alpha3);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,359,@Test
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,360,public void testSingularities() {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,362,DfpField field = new DfpField(20);
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,363,RotationOrder[] CardanOrders = {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,364,"RotationOrder.XYZ, RotationOrder.XZY, RotationOrder.YXZ,"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,365,"RotationOrder.YZX, RotationOrder.ZXY, RotationOrder.ZYX"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,368,"double[] singularCardanAngle = { FastMath.PI / 2, -FastMath.PI / 2 };"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,369,for (int i = 0; i < CardanOrders.length; ++i) {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,370,for (int j = 0; j < singularCardanAngle.length; ++j) {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,371,"FieldRotation<Dfp> r = new FieldRotation<Dfp>(CardanOrders[i],"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,372,"field.newDfp(0.1),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,373,"field.newDfp(singularCardanAngle[j]),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,374,field.newDfp(0.3));
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,375,try {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,376,r.getAngles(CardanOrders[i]);
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,377,"Assert.fail(""an exception should have been caught"");"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,378,} catch (CardanEulerSingularityException cese) {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,379,// expected behavior
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,384,RotationOrder[] EulerOrders = {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,385,"RotationOrder.XYX, RotationOrder.XZX, RotationOrder.YXY,"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,386,"RotationOrder.YZY, RotationOrder.ZXZ, RotationOrder.ZYZ"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,389,"double[] singularEulerAngle = { 0, FastMath.PI };"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,390,for (int i = 0; i < EulerOrders.length; ++i) {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,391,for (int j = 0; j < singularEulerAngle.length; ++j) {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,392,"FieldRotation<Dfp> r = new FieldRotation<Dfp>(EulerOrders[i],"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,393,"field.newDfp(0.1),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,394,"field.newDfp(singularEulerAngle[j]),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,395,field.newDfp(0.3));
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,396,try {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,397,r.getAngles(EulerOrders[i]);
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,398,"Assert.fail(""an exception should have been caught"");"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,399,} catch (CardanEulerSingularityException cese) {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,400,// expected behavior
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,408,@Test
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,409,public void testQuaternion() throws MathIllegalArgumentException {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,411,"FieldRotation<Dfp> r1 = new FieldRotation<Dfp>(createVector(2, -3, 5), createAngle(1.7));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,412,double n = 23.5;
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,413,"FieldRotation<Dfp> r2 = new FieldRotation<Dfp>(r1.getQ0().multiply(n), r1.getQ1().multiply(n),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,414,"r1.getQ2().multiply(n), r1.getQ3().multiply(n),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,415,true);
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,416,for (double x = -0.9; x < 0.9; x += 0.2) {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,417,for (double y = -0.9; y < 0.9; y += 0.2) {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,418,for (double z = -0.9; z < 0.9; z += 0.2) {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,419,"FieldVector3D<Dfp> u = createVector(x, y, z);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,420,"checkVector(r2.applyTo(u), r1.applyTo(u));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,425,"r1 = createRotation(0.288,  0.384,  0.36,  0.8, false);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,426,"checkRotationDS(r1,"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,427,"-r1.getQ0().getReal(), -r1.getQ1().getReal(),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,428,"-r1.getQ2().getReal(), -r1.getQ3().getReal());"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,432,@Test
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,433,public void testCompose() throws MathIllegalArgumentException {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,435,"FieldRotation<Dfp> r1       = new FieldRotation<Dfp>(createVector(2, -3, 5), createAngle(1.7));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,436,"FieldRotation<Dfp> r2       = new FieldRotation<Dfp>(createVector(-1, 3, 2), createAngle(0.3));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,437,FieldRotation<Dfp> r3       = r2.applyTo(r1);
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,438,"FieldRotation<Dfp> r3Double = r2.applyTo(new Rotation(r1.getQ0().getReal(),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,439,"r1.getQ1().getReal(),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,440,"r1.getQ2().getReal(),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,441,"r1.getQ3().getReal(),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,442,false));
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,444,for (double x = -0.9; x < 0.9; x += 0.2) {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,445,for (double y = -0.9; y < 0.9; y += 0.2) {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,446,for (double z = -0.9; z < 0.9; z += 0.2) {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,447,"FieldVector3D<Dfp> u = createVector(x, y, z);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,448,"checkVector(r2.applyTo(r1.applyTo(u)), r3.applyTo(u));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,449,"checkVector(r2.applyTo(r1.applyTo(u)), r3Double.applyTo(u));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,456,@Test
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,457,public void testComposeInverse() throws MathIllegalArgumentException {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,459,"FieldRotation<Dfp> r1 = new FieldRotation<Dfp>(createVector(2, -3, 5), createAngle(1.7));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,460,"FieldRotation<Dfp> r2 = new FieldRotation<Dfp>(createVector(-1, 3, 2), createAngle(0.3));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,461,FieldRotation<Dfp> r3 = r2.applyInverseTo(r1);
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,462,"FieldRotation<Dfp> r3Double = r2.applyInverseTo(new Rotation(r1.getQ0().getReal(),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,463,"r1.getQ1().getReal(),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,464,"r1.getQ2().getReal(),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,465,"r1.getQ3().getReal(),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,466,false));
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,468,for (double x = -0.9; x < 0.9; x += 0.2) {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,469,for (double y = -0.9; y < 0.9; y += 0.2) {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,470,for (double z = -0.9; z < 0.9; z += 0.2) {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,471,"FieldVector3D<Dfp> u = createVector(x, y, z);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,472,"checkVector(r2.applyInverseTo(r1.applyTo(u)), r3.applyTo(u));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,473,"checkVector(r2.applyInverseTo(r1.applyTo(u)), r3Double.applyTo(u));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,480,@Test
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,481,public void testDoubleVectors() throws MathIllegalArgumentException {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,483,Well1024a random = new Well1024a(0x180b41cfeeffaf67l);
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,484,"UnitSphereRandomVectorGenerator g = new UnitSphereRandomVectorGenerator(3, random);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,485,for (int i = 0; i < 10; ++i) {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,486,double[] unit = g.nextVector();
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,487,"FieldRotation<Dfp> r = new FieldRotation<Dfp>(createVector(unit[0], unit[1], unit[2]),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,488,createAngle(random.nextDouble()));
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,490,for (double x = -0.9; x < 0.9; x += 0.4) {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,491,for (double y = -0.9; y < 0.9; y += 0.4) {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,492,for (double z = -0.9; z < 0.9; z += 0.4) {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,493,"FieldVector3D<Dfp> uds   = createVector(x, y, z);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,494,FieldVector3D<Dfp> ruds  = r.applyTo(uds);
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,495,FieldVector3D<Dfp> rIuds = r.applyInverseTo(uds);
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,496,"Vector3D   u     = new Vector3D(x, y, z);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,497,FieldVector3D<Dfp> ru    = r.applyTo(u);
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,498,FieldVector3D<Dfp> rIu   = r.applyInverseTo(u);
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,499,Dfp[] ruArray = new Dfp[3];
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,500,"r.applyTo(new double[] { x, y, z}, ruArray);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,501,Dfp[] rIuArray = new Dfp[3];
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,502,"r.applyInverseTo(new double[] { x, y, z}, rIuArray);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,503,"checkVector(ruds, ru);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,504,"checkVector(ruds, new FieldVector3D<Dfp>(ruArray));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,505,"checkVector(rIuds, rIu);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,506,"checkVector(rIuds, new FieldVector3D<Dfp>(rIuArray));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,514,@Test
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,515,public void testDoubleRotations() throws MathIllegalArgumentException {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,517,DfpField field = new DfpField(20);
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,518,Well1024a random = new Well1024a(0x180b41cfeeffaf67l);
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,519,"UnitSphereRandomVectorGenerator g = new UnitSphereRandomVectorGenerator(3, random);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,520,for (int i = 0; i < 10; ++i) {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,521,double[] unit1 = g.nextVector();
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,522,"Rotation r1 = new Rotation(new Vector3D(unit1[0], unit1[1], unit1[2]),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,523,random.nextDouble());
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,524,"FieldRotation<Dfp> r1Prime = new FieldRotation<Dfp>(field.newDfp(r1.getQ0()),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,525,"field.newDfp(r1.getQ1()),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,526,"field.newDfp(r1.getQ2()),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,527,"field.newDfp(r1.getQ3()),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,528,false);
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,529,double[] unit2 = g.nextVector();
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,530,"FieldRotation<Dfp> r2 = new FieldRotation<Dfp>(createVector(unit2[0], unit2[1], unit2[2]),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,531,createAngle(random.nextDouble()));
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,533,"FieldRotation<Dfp> rA = FieldRotation.applyTo(r1, r2);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,534,FieldRotation<Dfp> rB = r1Prime.applyTo(r2);
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,535,"FieldRotation<Dfp> rC = FieldRotation.applyInverseTo(r1, r2);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,536,FieldRotation<Dfp> rD = r1Prime.applyInverseTo(r2);
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,538,for (double x = -0.9; x < 0.9; x += 0.4) {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,539,for (double y = -0.9; y < 0.9; y += 0.4) {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,540,for (double z = -0.9; z < 0.9; z += 0.4) {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,542,"FieldVector3D<Dfp> uds   = createVector(x, y, z);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,543,"checkVector(r1Prime.applyTo(uds), FieldRotation.applyTo(r1, uds));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,544,"checkVector(r1Prime.applyInverseTo(uds), FieldRotation.applyInverseTo(r1, uds));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,545,"checkVector(rA.applyTo(uds), rB.applyTo(uds));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,546,"checkVector(rA.applyInverseTo(uds), rB.applyInverseTo(uds));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,547,"checkVector(rC.applyTo(uds), rD.applyTo(uds));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,548,"checkVector(rC.applyInverseTo(uds), rD.applyInverseTo(uds));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,557,@Test
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,558,public void testArray() throws MathIllegalArgumentException {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,560,"FieldRotation<Dfp> r = new FieldRotation<Dfp>(createAxis(2, -3, 5), createAngle(1.7));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,562,for (double x = -0.9; x < 0.9; x += 0.2) {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,563,for (double y = -0.9; y < 0.9; y += 0.2) {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,564,for (double z = -0.9; z < 0.9; z += 0.2) {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,565,"FieldVector3D<Dfp> u = createVector(x, y, z);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,566,FieldVector3D<Dfp> v = r.applyTo(u);
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,567,Dfp[] out = new Dfp[3];
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,568,"r.applyTo(new Dfp[] { u.getX(), u.getY(), u.getZ() }, out);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,569,"Assert.assertEquals(v.getX().getReal(), out[0].getReal(), 1.0e-10);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,570,"Assert.assertEquals(v.getY().getReal(), out[1].getReal(), 1.0e-10);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,571,"Assert.assertEquals(v.getZ().getReal(), out[2].getReal(), 1.0e-10);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,572,"r.applyInverseTo(out, out);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,573,"Assert.assertEquals(u.getX().getReal(), out[0].getReal(), 1.0e-10);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,574,"Assert.assertEquals(u.getY().getReal(), out[1].getReal(), 1.0e-10);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,575,"Assert.assertEquals(u.getZ().getReal(), out[2].getReal(), 1.0e-10);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,582,@Test
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,583,public void testApplyInverseTo() throws MathIllegalArgumentException {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,585,Dfp[] in      = new Dfp[3];
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,586,Dfp[] out     = new Dfp[3];
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,587,Dfp[] rebuilt = new Dfp[3];
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,588,"FieldRotation<Dfp> r = new FieldRotation<Dfp>(createVector(2, -3, 5), createAngle(1.7));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,589,for (double lambda = 0; lambda < 6.2; lambda += 0.2) {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,590,for (double phi = -1.55; phi < 1.55; phi += 0.2) {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,591,"FieldVector3D<Dfp> u = createVector(FastMath.cos(lambda) * FastMath.cos(phi),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,592,"FastMath.sin(lambda) * FastMath.cos(phi),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,593,FastMath.sin(phi));
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,594,r.applyInverseTo(r.applyTo(u));
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,595,"checkVector(u, r.applyInverseTo(r.applyTo(u)));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,596,"checkVector(u, r.applyTo(r.applyInverseTo(u)));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,597,in[0] = u.getX();
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,598,in[1] = u.getY();
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,599,in[2] = u.getZ();
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,600,"r.applyTo(in, out);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,601,"r.applyInverseTo(out, rebuilt);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,602,"Assert.assertEquals(in[0].getReal(), rebuilt[0].getReal(), 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,603,"Assert.assertEquals(in[1].getReal(), rebuilt[1].getReal(), 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,604,"Assert.assertEquals(in[2].getReal(), rebuilt[2].getReal(), 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,608,"r = createRotation(1, 0, 0, 0, false);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,609,for (double lambda = 0; lambda < 6.2; lambda += 0.2) {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,610,for (double phi = -1.55; phi < 1.55; phi += 0.2) {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,611,"FieldVector3D<Dfp> u = createVector(FastMath.cos(lambda) * FastMath.cos(phi),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,612,"FastMath.sin(lambda) * FastMath.cos(phi),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,613,FastMath.sin(phi));
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,614,"checkVector(u, r.applyInverseTo(r.applyTo(u)));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,615,"checkVector(u, r.applyTo(r.applyInverseTo(u)));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,619,"r = new FieldRotation<Dfp>(createVector(0, 0, 1), createAngle(FastMath.PI));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,620,for (double lambda = 0; lambda < 6.2; lambda += 0.2) {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,621,for (double phi = -1.55; phi < 1.55; phi += 0.2) {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,622,"FieldVector3D<Dfp> u = createVector(FastMath.cos(lambda) * FastMath.cos(phi),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,623,"FastMath.sin(lambda) * FastMath.cos(phi),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,624,FastMath.sin(phi));
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,625,"checkVector(u, r.applyInverseTo(r.applyTo(u)));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,626,"checkVector(u, r.applyTo(r.applyInverseTo(u)));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,632,@Test
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,633,public void testIssue639() throws MathArithmeticException{
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,634,"FieldVector3D<Dfp> u1 = createVector(-1321008684645961.0 /  268435456.0,"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,635,"-5774608829631843.0 /  268435456.0,"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,636,-3822921525525679.0 / 4294967296.0);
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,637,"FieldVector3D<Dfp> u2 =createVector( -5712344449280879.0 /    2097152.0,"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,638,"-2275058564560979.0 /    1048576.0,"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,639,4423475992255071.0 /      65536.0);
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,640,"FieldRotation<Dfp> rot = new FieldRotation<Dfp>(u1, u2, createVector(1, 0, 0),createVector(0, 0, 1));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,641,"Assert.assertEquals( 0.6228370359608200639829222, rot.getQ0().getReal(), 1.0e-15);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,642,"Assert.assertEquals( 0.0257707621456498790029987, rot.getQ1().getReal(), 1.0e-15);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,643,"Assert.assertEquals(-0.0000000002503012255839931, rot.getQ2().getReal(), 1.0e-15);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,644,"Assert.assertEquals(-0.7819270390861109450724902, rot.getQ3().getReal(), 1.0e-15);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,647,@Test
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,648,public void testIssue801() throws MathArithmeticException {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,649,"FieldVector3D<Dfp> u1 = createVector(0.9999988431610581, -0.0015210774290851095, 0.0);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,650,"FieldVector3D<Dfp> u2 = createVector(0.0, 0.0, 1.0);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,652,"FieldVector3D<Dfp> v1 = createVector(0.9999999999999999, 0.0, 0.0);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,653,"FieldVector3D<Dfp> v2 = createVector(0.0, 0.0, -1.0);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,655,"FieldRotation<Dfp> quat = new FieldRotation<Dfp>(u1, u2, v1, v2);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,656,double q2 = quat.getQ0().getReal() * quat.getQ0().getReal() +
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,657,quat.getQ1().getReal() * quat.getQ1().getReal() +
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,658,quat.getQ2().getReal() * quat.getQ2().getReal() +
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,659,quat.getQ3().getReal() * quat.getQ3().getReal();
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,660,"Assert.assertEquals(1.0, q2, 1.0e-14);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,661,"Assert.assertEquals(0.0, v1.angle(quat.applyTo(u1)).getReal(), 1.0e-14);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,662,"Assert.assertEquals(0.0, v2.angle(quat.applyTo(u2)).getReal(), 1.0e-14);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,666,"private void checkAngle(Dfp a1, double a2) {"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,667,"Assert.assertEquals(a1.getReal(), MathUtils.normalizeAngle(a2, a1.getReal()), 1.0e-10);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,670,"private void checkRotationDS(FieldRotation<Dfp> r, double q0, double q1, double q2, double q3) {"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,671,"FieldRotation<Dfp> rPrime = createRotation(q0, q1, q2, q3, false);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,672,"Assert.assertEquals(0, FieldRotation.distance(r, rPrime).getReal(), 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,675,"private FieldRotation<Dfp> createRotation(double q0, double q1, double q2, double q3,"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,676,boolean needsNormalization) {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,677,DfpField field = new DfpField(20);
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,678,"return new FieldRotation<Dfp>(field.newDfp(q0),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,679,"field.newDfp(q1),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,680,"field.newDfp(q2),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,681,"field.newDfp(q3),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,682,needsNormalization);
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,685,"private FieldRotation<Dfp> createRotation(double[][] m, double threshold) {"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,686,DfpField field = new DfpField(20);
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,687,Dfp[][] mds = new Dfp[m.length][m[0].length];
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,688,for (int i = 0; i < m.length; ++i) {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,689,for (int j = 0; j < m[i].length; ++j) {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,690,mds[i][j] = field.newDfp(m[i][j]);
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,693,"return new FieldRotation<Dfp>(mds, threshold);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,696,"private FieldVector3D<Dfp> createVector(double x, double y, double z) {"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,697,DfpField field = new DfpField(20);
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,698,"return new FieldVector3D<Dfp>(field.newDfp(x), field.newDfp(y), field.newDfp(z));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,701,"private FieldVector3D<Dfp> createAxis(double x, double y, double z) {"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,702,DfpField field = new DfpField(20);
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,703,"return new FieldVector3D<Dfp>(field.newDfp(x), field.newDfp(y), field.newDfp(z));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,706,private Dfp createAngle(double alpha) {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,707,return new DfpField(20).newDfp(alpha);
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,710,"private void checkVector(FieldVector3D<Dfp> u, FieldVector3D<Dfp> v) {"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,711,"Assert.assertEquals(u.getX().getReal(), v.getX().getReal(), 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,712,"Assert.assertEquals(u.getY().getReal(), v.getY().getReal(), 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java,713,"Assert.assertEquals(u.getZ().getReal(), v.getZ().getReal(), 1.0e-12);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,34,ublic class Vector3DDSTest {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,34,public class FieldVector3DTest {
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,41,"ector3DDS u = new Vector3DDS(2,"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,42,"ew Vector3DDS(new DerivativeStructure(2, 1, 0,  FastMath.PI / 3),"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,43,"ew DerivativeStructure(2, 1, 1, -FastMath.PI / 4)));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,42,"FieldVector3D<DerivativeStructure> u = new FieldVector3D<DerivativeStructure>(2,"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,43,"new FieldVector3D<DerivativeStructure>(new DerivativeStructure(2, 1, 0,  FastMath.PI / 3),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,44,"new DerivativeStructure(2, 1, 1, -FastMath.PI / 4)));"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,52,"heckVector(new Vector3DDS(2, createVector(1, 0,  0, 3)),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,53,"checkVector(new FieldVector3D<DerivativeStructure>(2, createVector(1, 0,  0, 3)),"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,54,"heckVector(new Vector3DDS(new DerivativeStructure(4, 1, 3,  2.0),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,55,"checkVector(new FieldVector3D<DerivativeStructure>(new DerivativeStructure(4, 1, 3,  2.0),"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,57,"heckVector(new Vector3DDS(new DerivativeStructure(4, 1, 3,  2.0),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,58,"checkVector(new FieldVector3D<DerivativeStructure>(new DerivativeStructure(4, 1, 3,  2.0),"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,61,"heckVector(new Vector3DDS(2, createVector(1, 0,  0, 3),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,62,"checkVector(new FieldVector3D<DerivativeStructure>(2, createVector(1, 0,  0, 3),"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,64,"heckVector(new Vector3DDS(new DerivativeStructure(4, 1, 3,  2.0),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,65,"checkVector(new FieldVector3D<DerivativeStructure>(new DerivativeStructure(4, 1, 3,  2.0),"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,69,"heckVector(new Vector3DDS(new DerivativeStructure(4, 1, 3,  2.0),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,70,"checkVector(new FieldVector3D<DerivativeStructure>(new DerivativeStructure(4, 1, 3,  2.0),"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,75,"heckVector(new Vector3DDS(2, createVector(1, 0, 0, 3),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,76,"checkVector(new FieldVector3D<DerivativeStructure>(2, createVector(1, 0, 0, 3),"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,79,"heckVector(new Vector3DDS(new DerivativeStructure(4, 1, 3,  2.0),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,80,"checkVector(new FieldVector3D<DerivativeStructure>(new DerivativeStructure(4, 1, 3,  2.0),"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,86,"heckVector(new Vector3DDS(new DerivativeStructure(4, 1, 3,  2.0),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,87,"checkVector(new FieldVector3D<DerivativeStructure>(new DerivativeStructure(4, 1, 3,  2.0),"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,94,"heckVector(new Vector3DDS(2, createVector(1, 0, 0, 3),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,95,"checkVector(new FieldVector3D<DerivativeStructure>(2, createVector(1, 0, 0, 3),"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,99,"heckVector(new Vector3DDS(new DerivativeStructure(4, 1, 3,  2.0),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,100,"checkVector(new FieldVector3D<DerivativeStructure>(new DerivativeStructure(4, 1, 3,  2.0),"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,108,"heckVector(new Vector3DDS(new DerivativeStructure(4, 1, 3,  2.0),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,109,"checkVector(new FieldVector3D<DerivativeStructure>(new DerivativeStructure(4, 1, 3,  2.0),"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,118,heckVector(new Vector3DDS(new DerivativeStructure[] {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,119,checkVector(new FieldVector3D<DerivativeStructure>(new DerivativeStructure[] {
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,129,"ector3DDS u1 = createVector(1, 2, 3, 3);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,130,"ector3DDS v  = createVector(1, 2, 3 + 10 * Precision.EPSILON, 3);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,130,"FieldVector3D<DerivativeStructure> u1 = createVector(1, 2, 3, 3);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,131,"FieldVector3D<DerivativeStructure> v  = createVector(1, 2, 3 + 10 * Precision.EPSILON, 3);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,132,"ssert.assertTrue(u1.equals(new Vector3DDS(new DerivativeStructure(3, 1, 0, 1.0),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,133,"Assert.assertTrue(u1.equals(new FieldVector3D<DerivativeStructure>(new DerivativeStructure(3, 1, 0, 1.0),"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,135,"ssert.assertFalse(u1.equals(new Vector3DDS(new DerivativeStructure(3, 1, 1.0),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,136,"Assert.assertFalse(u1.equals(new FieldVector3D<DerivativeStructure>(new DerivativeStructure(3, 1, 1.0),"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,138,"ssert.assertFalse(u1.equals(new Vector3DDS(new DerivativeStructure(3, 1, 0, 1.0),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,139,"Assert.assertFalse(u1.equals(new FieldVector3D<DerivativeStructure>(new DerivativeStructure(3, 1, 0, 1.0),"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,141,"ssert.assertFalse(u1.equals(new Vector3DDS(new DerivativeStructure(3, 1, 0, 1.0),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,142,"Assert.assertFalse(u1.equals(new FieldVector3D<DerivativeStructure>(new DerivativeStructure(3, 1, 0, 1.0),"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,152,"ector3DDS u = createVector(1, 2, 3, 3);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,153,"ector3DDS v = createVector(1, 2, 3 + 10 * Precision.EPSILON, 3);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,153,"FieldVector3D<DerivativeStructure> u = createVector(1, 2, 3, 3);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,154,"FieldVector3D<DerivativeStructure> v = createVector(1, 2, 3 + 10 * Precision.EPSILON, 3);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,184,ew Vector3DDS(new DerivativeStructure[] {
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,185,new FieldVector3D<DerivativeStructure>(new DerivativeStructure[] {
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,192,"ector3DDS v = createVector(1, 2, 3, 3);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,193,ssert.assertTrue(FastMath.abs(v.getX().getValue() - 1) < 1.0e-12);
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,194,ssert.assertTrue(FastMath.abs(v.getY().getValue() - 2) < 1.0e-12);
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,195,ssert.assertTrue(FastMath.abs(v.getZ().getValue() - 3) < 1.0e-12);
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,193,"FieldVector3D<DerivativeStructure> v = createVector(1, 2, 3, 3);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,194,Assert.assertTrue(FastMath.abs(v.getX().getReal() - 1) < 1.0e-12);
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,195,Assert.assertTrue(FastMath.abs(v.getY().getReal() - 2) < 1.0e-12);
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,196,Assert.assertTrue(FastMath.abs(v.getZ().getReal() - 3) < 1.0e-12);
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,197,ssert.assertTrue(FastMath.abs(coordinates[0].getValue() - 1) < 1.0e-12);
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,198,ssert.assertTrue(FastMath.abs(coordinates[1].getValue() - 2) < 1.0e-12);
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,199,ssert.assertTrue(FastMath.abs(coordinates[2].getValue() - 3) < 1.0e-12);
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,198,Assert.assertTrue(FastMath.abs(coordinates[0].getReal() - 1) < 1.0e-12);
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,199,Assert.assertTrue(FastMath.abs(coordinates[1].getReal() - 2) < 1.0e-12);
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,200,Assert.assertTrue(FastMath.abs(coordinates[2].getReal() - 3) < 1.0e-12);
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,204,"ssert.assertEquals( 0.0, createVector(0, 0, 0, 3).getNorm1().getValue(), 0);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,205,"ssert.assertEquals( 6.0, createVector(1, -2, 3, 3).getNorm1().getValue(), 0);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,205,"Assert.assertEquals( 0.0, createVector(0, 0, 0, 3).getNorm1().getReal(), 0);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,206,"Assert.assertEquals( 6.0, createVector(1, -2, 3, 3).getNorm1().getReal(), 0);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,214,"ssert.assertEquals(0.0, createVector(0, 0, 0, 3).getNorm().getValue(), 0);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,215,"ssert.assertEquals(r, createVector(1, 2, 3, 3).getNorm().getValue(), 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,215,"Assert.assertEquals(0.0, createVector(0, 0, 0, 3).getNorm().getReal(), 0);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,216,"Assert.assertEquals(r, createVector(1, 2, 3, 3).getNorm().getReal(), 1.0e-12);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,223,"ssert.assertEquals(0.0, createVector(0, 0, 0, 3).getNormSq().getValue(), 0);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,224,"ssert.assertEquals(14, createVector(1, 2, 3, 3).getNormSq().getValue(), 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,224,"Assert.assertEquals(0.0, createVector(0, 0, 0, 3).getNormSq().getReal(), 0);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,225,"Assert.assertEquals(14, createVector(1, 2, 3, 3).getNormSq().getReal(), 1.0e-12);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,232,"ssert.assertEquals( 0.0, createVector(0, 0, 0, 3).getNormInf().getValue(), 0);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,233,"ssert.assertEquals( 3.0, createVector(1, -2, 3, 3).getNormInf().getValue(), 0);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,233,"Assert.assertEquals( 0.0, createVector(0, 0, 0, 3).getNormInf().getReal(), 0);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,234,"Assert.assertEquals( 3.0, createVector(1, -2, 3, 3).getNormInf().getReal(), 0);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,237,"ssert.assertEquals( 3.0, createVector(2, -1, 3, 3).getNormInf().getValue(), 0);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,238,"Assert.assertEquals( 3.0, createVector(2, -1, 3, 3).getNormInf().getReal(), 0);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,241,"ssert.assertEquals( 3.0, createVector(1, -3, 2, 3).getNormInf().getValue(), 0);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,242,"Assert.assertEquals( 3.0, createVector(1, -3, 2, 3).getNormInf().getReal(), 0);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,245,"ssert.assertEquals( 3.0, createVector(2, -3, 1, 3).getNormInf().getValue(), 0);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,246,"Assert.assertEquals( 3.0, createVector(2, -3, 1, 3).getNormInf().getReal(), 0);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,249,"ssert.assertEquals( 3.0, createVector(3, -1, 2, 3).getNormInf().getValue(), 0);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,250,"Assert.assertEquals( 3.0, createVector(3, -1, 2, 3).getNormInf().getReal(), 0);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,253,"ssert.assertEquals( 3.0, createVector(3, -2, 1, 3).getNormInf().getValue(), 0);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,254,"Assert.assertEquals( 3.0, createVector(3, -2, 1, 3).getNormInf().getReal(), 0);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,261,"ector3DDS v1 = createVector(1, -2, 3, 3);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,262,"ector3DDS v2 = createVector(-4, 2, 0, 3);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,263,"ssert.assertEquals(0.0, Vector3DDS.distance1(createVector(-1, 0, 0, 3), createVector(-1, 0, 0, 3)).getValue(), 0);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,264,"erivativeStructure distance = Vector3DDS.distance1(v1, v2);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,265,"ssert.assertEquals(12.0, distance.getValue(), 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,262,"FieldVector3D<DerivativeStructure> v1 = createVector(1, -2, 3, 3);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,263,"FieldVector3D<DerivativeStructure> v2 = createVector(-4, 2, 0, 3);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,264,"Assert.assertEquals(0.0, createVector(-1, 0, 0, 3).distance1(createVector(-1, 0, 0, 3)).getReal(), 0);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,265,DerivativeStructure distance = v1.distance1(v2);
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,266,"Assert.assertEquals(12.0, distance.getReal(), 1.0e-12);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,269,"istance = Vector3DDS.distance1(v1, new Vector3D(-4, 2, 0));"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,270,"ssert.assertEquals(12.0, distance.getValue(), 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,270,"distance = v1.distance1(new Vector3D(-4, 2, 0));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,271,"Assert.assertEquals(12.0, distance.getReal(), 1.0e-12);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,274,"istance = Vector3DDS.distance1(new Vector3D(-4, 2, 0), v1);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,275,"ssert.assertEquals(12.0, distance.getValue(), 1.0e-12);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,276,"ssert.assertEquals( 1, distance.getPartialDerivative(1, 0, 0), 1.0e-12);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,277,"ssert.assertEquals(-1, distance.getPartialDerivative(0, 1, 0), 1.0e-12);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,278,"ssert.assertEquals( 1, distance.getPartialDerivative(0, 0, 1), 1.0e-12);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,279,"ssert.assertEquals(v1.subtract(v2).getNorm1().getValue(), Vector3DDS.distance1(v1, v2).getValue(), 1.0e-12);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,284,"ector3DDS v1 = createVector(1, -2, 3, 3);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,285,"ector3DDS v2 = createVector(-4, 2, 0, 3);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,286,"ssert.assertEquals(0.0, Vector3DDS.distance(createVector(-1, 0, 0, 3), createVector(-1, 0, 0, 3)).getValue(), 0);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,287,"erivativeStructure distance = Vector3DDS.distance(v1, v2);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,288,"ssert.assertEquals(FastMath.sqrt(50), distance.getValue(), 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,279,"FieldVector3D<DerivativeStructure> v1 = createVector(1, -2, 3, 3);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,280,"FieldVector3D<DerivativeStructure> v2 = createVector(-4, 2, 0, 3);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,281,"Assert.assertEquals(0.0, createVector(-1, 0, 0, 3).distance(createVector(-1, 0, 0, 3)).getReal(), 0);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,282,DerivativeStructure distance = v1.distance(v2);
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,283,"Assert.assertEquals(FastMath.sqrt(50), distance.getReal(), 1.0e-12);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,292,"istance = Vector3DDS.distance(v1, new Vector3D(-4, 2, 0));"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,293,"ssert.assertEquals(FastMath.sqrt(50), distance.getValue(), 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,287,"distance = v1.distance(new Vector3D(-4, 2, 0));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,288,"Assert.assertEquals(FastMath.sqrt(50), distance.getReal(), 1.0e-12);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,297,"istance = Vector3DDS.distance(new Vector3D(-4, 2, 0), v1);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,298,"ssert.assertEquals(FastMath.sqrt(50), distance.getValue(), 1.0e-12);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,299,"ssert.assertEquals( 5 / FastMath.sqrt(50), distance.getPartialDerivative(1, 0, 0), 1.0e-12);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,300,"ssert.assertEquals(-4 / FastMath.sqrt(50), distance.getPartialDerivative(0, 1, 0), 1.0e-12);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,301,"ssert.assertEquals( 3 / FastMath.sqrt(50), distance.getPartialDerivative(0, 0, 1), 1.0e-12);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,302,"ssert.assertEquals(v1.subtract(v2).getNorm().getValue(), Vector3DDS.distance(v1, v2).getValue(), 1.0e-12);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,307,"ector3DDS v1 = createVector(1, -2, 3, 3);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,308,"ector3DDS v2 = createVector(-4, 2, 0, 3);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,309,"ssert.assertEquals(0.0, Vector3DDS.distanceSq(createVector(-1, 0, 0, 3), createVector(-1, 0, 0, 3)).getValue(), 0);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,310,"erivativeStructure distanceSq = Vector3DDS.distanceSq(v1, v2);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,311,"ssert.assertEquals(50.0, distanceSq.getValue(), 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,296,"FieldVector3D<DerivativeStructure> v1 = createVector(1, -2, 3, 3);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,297,"FieldVector3D<DerivativeStructure> v2 = createVector(-4, 2, 0, 3);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,298,"Assert.assertEquals(0.0, createVector(-1, 0, 0, 3).distanceSq(createVector(-1, 0, 0, 3)).getReal(), 0);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,299,DerivativeStructure distanceSq = v1.distanceSq(v2);
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,300,"Assert.assertEquals(50.0, distanceSq.getReal(), 1.0e-12);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,315,"istanceSq = Vector3DDS.distanceSq(v1, new Vector3D(-4, 2, 0));"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,316,"ssert.assertEquals(50.0, distanceSq.getValue(), 1.0e-12);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,317,"ssert.assertEquals(10, distanceSq.getPartialDerivative(1, 0, 0), 1.0e-12);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,318,"ssert.assertEquals(-8, distanceSq.getPartialDerivative(0, 1, 0), 1.0e-12);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,319,"ssert.assertEquals( 6, distanceSq.getPartialDerivative(0, 0, 1), 1.0e-12);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,320,"istanceSq = Vector3DDS.distanceSq(new Vector3D(-4, 2, 0), v1);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,321,"ssert.assertEquals(50.0, distanceSq.getValue(), 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,304,"distanceSq = v1.distanceSq(new Vector3D(-4, 2, 0));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,305,"Assert.assertEquals(50.0, distanceSq.getReal(), 1.0e-12);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,325,"ssert.assertEquals(Vector3DDS.distance(v1, v2).multiply(Vector3DDS.distance(v1, v2)).getValue(),"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,326,"ector3DDS.distanceSq(v1, v2).getValue(), 1.0e-12);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,331,"ector3DDS v1 = createVector(1, -2, 3, 3);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,332,"ector3DDS v2 = createVector(-4, 2, 0, 3);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,333,"ssert.assertEquals(0.0, Vector3DDS.distanceInf(createVector(-1, 0, 0, 3), createVector(-1, 0, 0, 3)).getValue(), 0);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,334,"erivativeStructure distance = Vector3DDS.distanceInf(v1, v2);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,335,"ssert.assertEquals(5.0, distance.getValue(), 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,313,"FieldVector3D<DerivativeStructure> v1 = createVector(1, -2, 3, 3);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,314,"FieldVector3D<DerivativeStructure> v2 = createVector(-4, 2, 0, 3);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,315,"Assert.assertEquals(0.0, createVector(-1, 0, 0, 3).distanceInf(createVector(-1, 0, 0, 3)).getReal(), 0);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,316,DerivativeStructure distance = v1.distanceInf(v2);
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,317,"Assert.assertEquals(5.0, distance.getReal(), 1.0e-12);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,339,"istance = Vector3DDS.distanceInf(v1, new Vector3D(-4, 2, 0));"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,340,"ssert.assertEquals(5.0, distance.getValue(), 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,321,"distance = v1.distanceInf(new Vector3D(-4, 2, 0));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,322,"Assert.assertEquals(5.0, distance.getReal(), 1.0e-12);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,344,"istance = Vector3DDS.distanceInf(new Vector3D(-4, 2, 0), v1);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,345,"ssert.assertEquals(5.0, distance.getValue(), 1.0e-12);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,346,"ssert.assertEquals(1, distance.getPartialDerivative(1, 0, 0), 1.0e-12);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,347,"ssert.assertEquals(0, distance.getPartialDerivative(0, 1, 0), 1.0e-12);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,348,"ssert.assertEquals(0, distance.getPartialDerivative(0, 0, 1), 1.0e-12);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,349,"ssert.assertEquals(v1.subtract(v2).getNormInf().getValue(), Vector3DDS.distanceInf(v1, v2).getValue(), 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,326,"Assert.assertEquals(v1.subtract(v2).getNormInf().getReal(), v1.distanceInf(v2).getReal(), 1.0e-12);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,352,"ector3DDS.distanceInf(createVector( 1, -2, 3, 3),"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,353,"reateVector(-4,  2, 0, 3)).getValue(),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,329,"createVector( 1, -2, 3, 3).distanceInf(createVector(-4,  2, 0, 3)).getReal(),"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,356,"ector3DDS.distanceInf(createVector( 1, 3, -2, 3),"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,357,"reateVector(-4, 0,  2, 3)).getValue(),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,332,"createVector( 1, 3, -2, 3).distanceInf(createVector(-4, 0,  2, 3)).getReal(),"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,360,"ector3DDS.distanceInf(createVector(-2,  1, 3, 3),"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,361,"reateVector( 2, -4, 0, 3)).getValue(),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,335,"createVector(-2,  1, 3, 3).distanceInf(createVector( 2, -4, 0, 3)).getReal(),"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,364,"ector3DDS.distanceInf(createVector(-2, 3,  1, 3),"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,365,"reateVector( 2, 0, -4, 3)).getValue(),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,338,"createVector(-2, 3,  1, 3).distanceInf(createVector( 2, 0, -4, 3)).getReal(),"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,368,"ector3DDS.distanceInf(createVector(3, -2,  1, 3),"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,369,"reateVector(0,  2, -4, 3)).getValue(),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,341,"createVector(3, -2,  1, 3).distanceInf(createVector(0,  2, -4, 3)).getReal(),"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,372,"ector3DDS.distanceInf(createVector(3,  1, -2, 3),"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,373,"reateVector(0, -4,  2, 3)).getValue(),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,344,"createVector(3,  1, -2, 3).distanceInf(createVector(0, -4,  2, 3)).getReal(),"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,377,"ector3DDS.distanceInf(createVector( 1, -2, 3, 3),"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,378,"ew Vector3D(-4,  2, 0)).getValue(),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,348,"createVector( 1, -2, 3, 3).distanceInf(new Vector3D(-4,  2, 0)).getReal(),"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,381,"ector3DDS.distanceInf(createVector( 1, 3, -2, 3),"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,382,"ew Vector3D(-4, 0,  2)).getValue(),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,351,"createVector( 1, 3, -2, 3).distanceInf(new Vector3D(-4, 0,  2)).getReal(),"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,385,"ector3DDS.distanceInf(createVector(-2,  1, 3, 3),"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,386,"ew Vector3D( 2, -4, 0)).getValue(),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,354,"createVector(-2,  1, 3, 3).distanceInf(new Vector3D( 2, -4, 0)).getReal(),"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,389,"ector3DDS.distanceInf(createVector(-2, 3,  1, 3),"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,390,"ew Vector3D( 2, 0, -4)).getValue(),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,357,"createVector(-2, 3,  1, 3).distanceInf(new Vector3D( 2, 0, -4)).getReal(),"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,393,"ector3DDS.distanceInf(createVector(3, -2,  1, 3),"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,394,"ew Vector3D(0,  2, -4)).getValue(),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,360,"createVector(3, -2,  1, 3).distanceInf(new Vector3D(0,  2, -4)).getReal(),"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,397,"ector3DDS.distanceInf(createVector(3,  1, -2, 3),"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,398,"ew Vector3D(0, -4,  2)).getValue(),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,363,"createVector(3,  1, -2, 3).distanceInf(new Vector3D(0, -4,  2)).getReal(),"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,405,"ector3DDS v1 = createVector(1, 2, 3, 3);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,406,"ector3DDS v2 = createVector(-3, -2, -1, 3);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,370,"FieldVector3D<DerivativeStructure> v1 = createVector(1, 2, 3, 3);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,371,"FieldVector3D<DerivativeStructure> v2 = createVector(-3, -2, -1, 3);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,428,"ector3DDS v1 = createVector(1, 2, 3, 3);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,429,"ector3DDS v2 = createVector(-3, -2, -1, 3);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,393,"FieldVector3D<DerivativeStructure> v1 = createVector(1, 2, 3, 3);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,394,"FieldVector3D<DerivativeStructure> v2 = createVector(-3, -2, -1, 3);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,451,"ector3DDS v = createVector(1, 2, 3, 3);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,416,"FieldVector3D<DerivativeStructure> v = createVector(1, 2, 3, 3);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,460,"ector3DDS v1 = createVector(2, 1, -4, 3);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,461,"ector3DDS v2 = createVector(3, 1, -1, 3);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,425,"FieldVector3D<DerivativeStructure> v1 = createVector(2, 1, -4, 3);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,426,"FieldVector3D<DerivativeStructure> v2 = createVector(3, 1, -1, 3);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,463,"ssert.assertTrue(FastMath.abs(Vector3DDS.dotProduct(v1, v2).getValue() - 11) < 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,428,Assert.assertTrue(FastMath.abs(v1.dotProduct(v2).getReal() - 11) < 1.0e-12);
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,465,"ector3DDS v3 = Vector3DDS.crossProduct(v1, v2);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,430,FieldVector3D<DerivativeStructure> v3 = v1.crossProduct(v2);
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,468,"ssert.assertTrue(FastMath.abs(Vector3DDS.dotProduct(v1, v3).getValue()) < 1.0e-12);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,469,"ssert.assertTrue(FastMath.abs(Vector3DDS.dotProduct(v2, v3).getValue()) < 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,433,Assert.assertTrue(FastMath.abs(v1.dotProduct(v3).getReal()) < 1.0e-12);
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,434,Assert.assertTrue(FastMath.abs(v2.dotProduct(v3).getReal()) < 1.0e-12);
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,474,"ector3DDS v1 = createVector(9070467121.0, 4535233560.0, 1, 3);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,475,"ector3DDS v2 = createVector(9070467123.0, 4535233561.0, 1, 3);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,476,"heckVector(Vector3DDS.crossProduct(v1, v2), -1, 2, 1);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,439,"FieldVector3D<DerivativeStructure> v1 = createVector(9070467121.0, 4535233560.0, 1, 3);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,440,"FieldVector3D<DerivativeStructure> v2 = createVector(9070467123.0, 4535233561.0, 1, 3);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,441,"checkVector(v1.crossProduct(v2), -1, 2, 1);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,479,"ector3DDS big1   = new Vector3DDS(scale, v1);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,480,"ector3DDS small2 = new Vector3DDS(1 / scale, v2);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,481,"heckVector(Vector3DDS.crossProduct(big1, small2), -1, 2, 1);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,444,"FieldVector3D<DerivativeStructure> big1   = new FieldVector3D<DerivativeStructure>(scale, v1);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,445,"FieldVector3D<DerivativeStructure> small2 = new FieldVector3D<DerivativeStructure>(1 / scale, v2);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,446,"checkVector(big1.crossProduct(small2), -1, 2, 1);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,487,"ssert.assertEquals(0,           createVector(1, 0, 0, 3).getAlpha().getValue(), 1.0e-10);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,488,"ssert.assertEquals(0,           createVector(1, 0, 0, 3).getDelta().getValue(), 1.0e-10);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,489,"ssert.assertEquals(FastMath.PI / 2, createVector(0, 1, 0, 3).getAlpha().getValue(), 1.0e-10);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,490,"ssert.assertEquals(0,           createVector(0, 1, 0, 3).getDelta().getValue(), 1.0e-10);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,491,"ssert.assertEquals(FastMath.PI / 2, createVector(0, 0, 1, 3).getDelta().getValue(), 1.0e-10);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,452,"Assert.assertEquals(0,           createVector(1, 0, 0, 3).getAlpha().getReal(), 1.0e-10);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,453,"Assert.assertEquals(0,           createVector(1, 0, 0, 3).getDelta().getReal(), 1.0e-10);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,454,"Assert.assertEquals(FastMath.PI / 2, createVector(0, 1, 0, 3).getAlpha().getReal(), 1.0e-10);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,455,"Assert.assertEquals(0,           createVector(0, 1, 0, 3).getDelta().getReal(), 1.0e-10);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,456,"Assert.assertEquals(FastMath.PI / 2, createVector(0, 0, 1, 3).getDelta().getReal(), 1.0e-10);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,493,"ector3DDS u = createVector(-1, 1, -1, 3);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,494,"ssert.assertEquals(3 * FastMath.PI /4, u.getAlpha().getValue(), 1.0e-10);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,495,"ssert.assertEquals(-1.0 / FastMath.sqrt(3), u.getDelta().sin().getValue(), 1.0e-10);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,458,"FieldVector3D<DerivativeStructure> u = createVector(-1, 1, -1, 3);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,459,"Assert.assertEquals(3 * FastMath.PI /4, u.getAlpha().getReal(), 1.0e-10);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,460,"Assert.assertEquals(-1.0 / FastMath.sqrt(3), u.getDelta().sin().getReal(), 1.0e-10);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,500,"ector3DDS v1 = createVector(2, -1, 4, 3);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,465,"FieldVector3D<DerivativeStructure> v1 = createVector(2, -1, 4, 3);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,502,ector3DDS  k = v1.normalize();
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,503,ector3DDS  i = k.orthogonal();
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,504,ector3DDS v2 = k.scalarMultiply(FastMath.cos(1.2)).add(i.scalarMultiply(FastMath.sin(1.2)));
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,467,FieldVector3D<DerivativeStructure>  k = v1.normalize();
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,468,FieldVector3D<DerivativeStructure>  i = k.orthogonal();
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,469,FieldVector3D<DerivativeStructure> v2 = k.scalarMultiply(FastMath.cos(1.2)).add(i.scalarMultiply(FastMath.sin(1.2)));
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,506,"ssert.assertTrue(FastMath.abs(Vector3DDS.angle(v1, v2).getValue() - 1.2) < 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,471,Assert.assertTrue(FastMath.abs(v1.angle(v2).getReal() - 1.2) < 1.0e-12);
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,511,"ssert.assertEquals(1.0, createVector(5, -4, 2, 3).normalize().getNorm().getValue(), 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,476,"Assert.assertEquals(1.0, createVector(5, -4, 2, 3).normalize().getNorm().getReal(), 1.0e-12);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,528,"ector3DDS v1 = createVector(0.1, 2.5, 1.3, 3);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,529,"ssert.assertEquals(0.0, Vector3DDS.dotProduct(v1, v1.orthogonal()).getValue(), 1.0e-12);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,530,"ector3DDS v2 = createVector(2.3, -0.003, 7.6, 3);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,531,"ssert.assertEquals(0.0, Vector3DDS.dotProduct(v2, v2.orthogonal()).getValue(), 1.0e-12);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,532,"ector3DDS v3 = createVector(-1.7, 1.4, 0.2, 3);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,533,"ssert.assertEquals(0.0, Vector3DDS.dotProduct(v3, v3.orthogonal()).getValue(), 1.0e-12);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,534,"ector3DDS v4 = createVector(4.2, 0.1, -1.8, 3);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,535,"ssert.assertEquals(0.0, Vector3DDS.dotProduct(v4, v4.orthogonal()).getValue(), 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,493,"FieldVector3D<DerivativeStructure> v1 = createVector(0.1, 2.5, 1.3, 3);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,494,"Assert.assertEquals(0.0, v1.dotProduct(v1.orthogonal()).getReal(), 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,495,"FieldVector3D<DerivativeStructure> v2 = createVector(2.3, -0.003, 7.6, 3);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,496,"Assert.assertEquals(0.0, v2.dotProduct(v2.orthogonal()).getReal(), 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,497,"FieldVector3D<DerivativeStructure> v3 = createVector(-1.7, 1.4, 0.2, 3);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,498,"Assert.assertEquals(0.0, v3.dotProduct(v3.orthogonal()).getReal(), 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,499,"FieldVector3D<DerivativeStructure> v4 = createVector(4.2, 0.1, -1.8, 3);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,500,"Assert.assertEquals(0.0, v4.dotProduct(v4.orthogonal()).getReal(), 1.0e-12);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,547,"ector3DDS.angle(createVector(1, 2, 3, 3), createVector(4, 5, 6, 3)).getValue(),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,512,"createVector(1, 2, 3, 3).angle(createVector(4, 5, 6, 3)).getReal(),"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,550,"ector3DDS.angle(createVector(1, 2, 3, 3), createVector(2, 4, 6.000001, 3)).getValue(),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,515,"createVector(1, 2, 3, 3).angle(createVector(2, 4, 6.000001, 3)).getReal(),"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,553,"ector3DDS.angle(createVector(1, 2, 3, 3), createVector(-2, -4, -6.000001, 3)).getValue(),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,518,"createVector(1, 2, 3, 3).angle(createVector(-2, -4, -6.000001, 3)).getReal(),"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,556,"ector3DDS.angle(createVector(0, 0, 0, 3), createVector(1, 0, 0, 3));"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,521,"createVector(0, 0, 0, 3).angle(createVector(1, 0, 0, 3));"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,568,"ector3DDS u1 = createVector(-1321008684645961.0 /  268435456.0,"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,533,"FieldVector3D<DerivativeStructure> u1 = createVector(-1321008684645961.0 /  268435456.0,"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,571,"ector3DDS u2 = createVector(-5712344449280879.0 /    2097152.0,"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,536,"FieldVector3D<DerivativeStructure> u2 = createVector(-5712344449280879.0 /    2097152.0,"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,576,"ssert.assertEquals(0.0, sNaive.getValue(), 1.0e-30);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,577,"ssert.assertEquals(-2088690039198397.0 / 1125899906842624.0, sAccurate.getValue(), 1.0e-16);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,541,"Assert.assertEquals(0.0, sNaive.getReal(), 1.0e-30);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,542,"Assert.assertEquals(-2088690039198397.0 / 1125899906842624.0, sAccurate.getReal(), 1.0e-16);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,594,"ector3DDS uds = createVector(ux, uy, uz, 3);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,595,"ector3DDS vds = createVector(vx, vy, vz, 3);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,559,"FieldVector3D<DerivativeStructure> uds = createVector(ux, uy, uz, 3);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,560,"FieldVector3D<DerivativeStructure> vds = createVector(vx, vy, vz, 3);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,598,"erivativeStructure sAccurate = Vector3DDS.dotProduct(uds, vds);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,599,"ssert.assertEquals(sNaive, sAccurate.getValue(), 2.5e-16 * sNaive);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,563,DerivativeStructure sAccurate = uds.dotProduct(vds);
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,564,"Assert.assertEquals(sNaive, sAccurate.getReal(), 2.5e-16 * sNaive);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,604,"Accurate = Vector3DDS.dotProduct(uds, v);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,605,"ssert.assertEquals(sNaive, sAccurate.getValue(), 2.5e-16 * sNaive);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,606,"ssert.assertEquals(vx, sAccurate.getPartialDerivative(1, 0, 0), 2.5e-16 * sNaive);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,607,"ssert.assertEquals(vy, sAccurate.getPartialDerivative(0, 1, 0), 2.5e-16 * sNaive);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,608,"ssert.assertEquals(vz, sAccurate.getPartialDerivative(0, 0, 1), 2.5e-16 * sNaive);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,610,"Accurate = Vector3DDS.dotProduct(v, uds);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,611,"ssert.assertEquals(sNaive, sAccurate.getValue(), 2.5e-16 * sNaive);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,569,sAccurate = uds.dotProduct(v);
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,570,"Assert.assertEquals(sNaive, sAccurate.getReal(), 2.5e-16 * sNaive);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,626,"inal Vector3DDS u1 = createVector(-1321008684645961.0 /   268435456.0,"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,585,"final FieldVector3D<DerivativeStructure> u1 = createVector(-1321008684645961.0 /   268435456.0,"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,629,"inal Vector3DDS u2 = createVector( 1796571811118507.0 /  2147483648.0,"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,588,"final FieldVector3D<DerivativeStructure> u2 = createVector( 1796571811118507.0 /  2147483648.0,"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,632,"inal Vector3DDS u3 = createVector(12753243807587107.0 / 18446744073709551616.0,"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,591,"final FieldVector3D<DerivativeStructure> u3 = createVector(12753243807587107.0 / 18446744073709551616.0,"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,635,"ector3DDS cNaive = new Vector3DDS(u1.getY().multiply(u2.getZ()).subtract(u1.getZ().multiply(u2.getY())),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,594,"FieldVector3D<DerivativeStructure> cNaive = new FieldVector3D<DerivativeStructure>(u1.getY().multiply(u2.getZ()).subtract(u1.getZ().multiply(u2.getY())),"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,638,ector3DDS cAccurate = u1.crossProduct(u2);
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,639,ssert.assertTrue(u3.distance(cNaive).getValue() > 2.9 * u3.getNorm().getValue());
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,640,"ssert.assertEquals(0.0, u3.distance(cAccurate).getValue(), 1.0e-30 * cAccurate.getNorm().getValue());"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,597,FieldVector3D<DerivativeStructure> cAccurate = u1.crossProduct(u2);
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,598,Assert.assertTrue(u3.distance(cNaive).getReal() > 2.9 * u3.getNorm().getReal());
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,599,"Assert.assertEquals(0.0, u3.distance(cAccurate).getReal(), 1.0e-30 * cAccurate.getNorm().getReal());"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,657,"ector3DDS uds = createVector(ux, uy, uz, 3);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,658,"ector3DDS vds = createVector(vx, vy, vz, 3);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,616,"FieldVector3D<DerivativeStructure> uds = createVector(ux, uy, uz, 3);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,617,"FieldVector3D<DerivativeStructure> vds = createVector(vx, vy, vz, 3);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,661,"heckVector(Vector3DDS.crossProduct(uds, vds),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,620,"checkVector(uds.crossProduct(vds),"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,667,"heckVector(Vector3DDS.crossProduct(uds, v),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,626,"checkVector(uds.crossProduct(v),"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,673,"heckVector(Vector3DDS.crossProduct(v, uds),"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,674,"cNaive.getX(), -cNaive.getY(), -cNaive.getZ(),"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,675,", -vz,  vy,"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,676,"z,   0, -vx,"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,677,"vy,  vx,   0);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,682,"rivate Vector3DDS createVector(double x, double y, double z, int params) {"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,683,"eturn new Vector3DDS(new DerivativeStructure(params, 1, 0, x),"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,635,"private FieldVector3D<DerivativeStructure> createVector(double x, double y, double z, int params) {"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,636,"return new FieldVector3D<DerivativeStructure>(new DerivativeStructure(params, 1, 0, x),"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,688,"rivate void checkVector(Vector3DDS v, double x, double y, double z) {"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,689,"ssert.assertEquals(x, v.getX().getValue(), 1.0e-12);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,690,"ssert.assertEquals(y, v.getY().getValue(), 1.0e-12);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,691,"ssert.assertEquals(z, v.getZ().getValue(), 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,641,"private void checkVector(FieldVector3D<DerivativeStructure> v, double x, double y, double z) {"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,642,"Assert.assertEquals(x, v.getX().getReal(), 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,643,"Assert.assertEquals(y, v.getY().getReal(), 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,644,"Assert.assertEquals(z, v.getZ().getReal(), 1.0e-12);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,694,"rivate void checkVector(Vector3DDS v, double x, double y, double z,"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,647,"private void checkVector(FieldVector3D<DerivativeStructure> v, double x, double y, double z,"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,698,"ssert.assertEquals(x, v.getX().getValue(), 1.0e-12);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,699,"ssert.assertEquals(y, v.getY().getValue(), 1.0e-12);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,700,"ssert.assertEquals(z, v.getZ().getValue(), 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,651,"Assert.assertEquals(x, v.getX().getReal(), 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,652,"Assert.assertEquals(y, v.getY().getReal(), 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,653,"Assert.assertEquals(z, v.getZ().getReal(), 1.0e-12);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,712,"rivate void checkVector(Vector3DDS v, double x, double y, double z,"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,665,"private void checkVector(FieldVector3D<DerivativeStructure> v, double x, double y, double z,"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,716,"ssert.assertEquals(x, v.getX().getValue(), 1.0e-12);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,717,"ssert.assertEquals(y, v.getY().getValue(), 1.0e-12);"
False,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,718,"ssert.assertEquals(z, v.getZ().getValue(), 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,669,"Assert.assertEquals(x, v.getX().getReal(), 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,670,"Assert.assertEquals(y, v.getY().getReal(), 1.0e-12);"
True,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DDSTest.java,src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java,671,"Assert.assertEquals(z, v.getZ().getReal(), 1.0e-12);"
False,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,18,mport org.apache.commons.math3.analysis.differentiation.DerivativeStructure;
False,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,19,mport org.apache.commons.math3.exception.NonMonotonicSequenceException;
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,18,import org.apache.commons.math3.TestUtils;
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,20,import org.apache.commons.math3.exception.MathArithmeticException;
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,21,import org.apache.commons.math3.exception.MathIllegalArgumentException;
True,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,22,import org.apache.commons.math3.exception.NonMonotonicSequenceException;
False,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,24,mport org.apache.commons.math3.exception.MathArithmeticException;
False,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,25,mport org.apache.commons.math3.exception.MathIllegalArgumentException;
False,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,27,mport org.apache.commons.math3.TestUtils;
False,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,723,Test
False,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,724,ublic void testLinearCombination1DSDS() {
False,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,725,inal DerivativeStructure[] a = new DerivativeStructure[] {
False,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,726,"ew DerivativeStructure(6, 1, 0, -1321008684645961.0 / 268435456.0),"
False,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,727,"ew DerivativeStructure(6, 1, 1, -5774608829631843.0 / 268435456.0),"
False,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,728,"ew DerivativeStructure(6, 1, 2, -7645843051051357.0 / 8589934592.0)"
False,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,730,inal DerivativeStructure[] b = new DerivativeStructure[] {
False,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,731,"ew DerivativeStructure(6, 1, 3, -5712344449280879.0 / 2097152.0),"
False,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,732,"ew DerivativeStructure(6, 1, 4, -4550117129121957.0 / 2097152.0),"
False,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,733,"ew DerivativeStructure(6, 1, 5, 8846951984510141.0 / 131072.0)"
False,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,736,"inal DerivativeStructure abSumInline = MathArrays.linearCombination(a[0], b[0],"
False,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,737,"[1], b[1],"
False,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,738,"[2], b[2]);"
False,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,739,"inal DerivativeStructure abSumArray = MathArrays.linearCombination(a, b);"
False,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,741,"ssert.assertEquals(abSumInline.getValue(), abSumArray.getValue(), 0);"
False,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,742,"ssert.assertEquals(-1.8551294182586248737720779899, abSumInline.getValue(), 1.0e-15);"
False,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,743,"ssert.assertEquals(b[0].getValue(), abSumInline.getPartialDerivative(1, 0, 0, 0, 0, 0), 1.0e-15);"
False,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,744,"ssert.assertEquals(b[1].getValue(), abSumInline.getPartialDerivative(0, 1, 0, 0, 0, 0), 1.0e-15);"
False,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,745,"ssert.assertEquals(b[2].getValue(), abSumInline.getPartialDerivative(0, 0, 1, 0, 0, 0), 1.0e-15);"
False,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,746,"ssert.assertEquals(a[0].getValue(), abSumInline.getPartialDerivative(0, 0, 0, 1, 0, 0), 1.0e-15);"
False,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,747,"ssert.assertEquals(a[1].getValue(), abSumInline.getPartialDerivative(0, 0, 0, 0, 1, 0), 1.0e-15);"
False,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,748,"ssert.assertEquals(a[2].getValue(), abSumInline.getPartialDerivative(0, 0, 0, 0, 0, 1), 1.0e-15);"
False,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,752,Test
False,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,753,ublic void testLinearCombination1DoubleDS() {
False,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,754,inal double[] a = new double[] {
False,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,755,"1321008684645961.0 / 268435456.0,"
False,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,756,"5774608829631843.0 / 268435456.0,"
False,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,757,7645843051051357.0 / 8589934592.0
False,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,759,inal DerivativeStructure[] b = new DerivativeStructure[] {
False,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,760,"ew DerivativeStructure(3, 1, 0, -5712344449280879.0 / 2097152.0),"
False,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,761,"ew DerivativeStructure(3, 1, 1, -4550117129121957.0 / 2097152.0),"
False,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,762,"ew DerivativeStructure(3, 1, 2, 8846951984510141.0 / 131072.0)"
False,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,765,"inal DerivativeStructure abSumInline = MathArrays.linearCombination(a[0], b[0],"
False,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,766,"[1], b[1],"
False,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,767,"[2], b[2]);"
False,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,768,"inal DerivativeStructure abSumArray = MathArrays.linearCombination(a, b);"
False,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,770,"ssert.assertEquals(abSumInline.getValue(), abSumArray.getValue(), 0);"
False,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,771,"ssert.assertEquals(-1.8551294182586248737720779899, abSumInline.getValue(), 1.0e-15);"
False,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,772,"ssert.assertEquals(a[0], abSumInline.getPartialDerivative(1, 0, 0), 1.0e-15);"
False,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,773,"ssert.assertEquals(a[1], abSumInline.getPartialDerivative(0, 1, 0), 1.0e-15);"
False,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,774,"ssert.assertEquals(a[2], abSumInline.getPartialDerivative(0, 0, 1), 1.0e-15);"
False,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,778,Test
False,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,779,ublic void testLinearCombination2DSDS() {
False,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,780,/ we compare accurate versus naive dot product implementations
False,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,781,/ on regular vectors (i.e. not extreme cases like in the previous test)
False,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,782,ell1024a random = new Well1024a(0xc6af886975069f11l);
False,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,784,or (int i = 0; i < 10000; ++i) {
False,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,785,inal DerivativeStructure[] u = new DerivativeStructure[4];
False,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,786,inal DerivativeStructure[] v = new DerivativeStructure[4];
False,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,787,or (int j = 0; j < u.length; ++j) {
False,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,788,"[j] = new DerivativeStructure(u.length, 1, j, 1e17 * random.nextDouble());"
False,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,789,"[j] = new DerivativeStructure(u.length, 1, 1e17 * random.nextDouble());"
False,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,792,"erivativeStructure lin = MathArrays.linearCombination(u[0], v[0], u[1], v[1]);"
False,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,793,ouble ref = u[0].getValue() * v[0].getValue() +
False,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,794,[1].getValue() * v[1].getValue();
False,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,795,"ssert.assertEquals(ref, lin.getValue(), 1.0e-15 * FastMath.abs(ref));"
False,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,796,"ssert.assertEquals(v[0].getValue(), lin.getPartialDerivative(1, 0, 0, 0), 1.0e-15 * FastMath.abs(v[0].getValue()));"
False,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,797,"ssert.assertEquals(v[1].getValue(), lin.getPartialDerivative(0, 1, 0, 0), 1.0e-15 * FastMath.abs(v[1].getValue()));"
False,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,799,"in = MathArrays.linearCombination(u[0], v[0], u[1], v[1], u[2], v[2]);"
False,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,800,ef = u[0].getValue() * v[0].getValue() +
False,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,801,[1].getValue() * v[1].getValue() +
False,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,802,[2].getValue() * v[2].getValue();
False,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,803,"ssert.assertEquals(ref, lin.getValue(), 1.0e-15 * FastMath.abs(ref));"
False,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,804,"ssert.assertEquals(v[0].getValue(), lin.getPartialDerivative(1, 0, 0, 0), 1.0e-15 * FastMath.abs(v[0].getValue()));"
False,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,805,"ssert.assertEquals(v[1].getValue(), lin.getPartialDerivative(0, 1, 0, 0), 1.0e-15 * FastMath.abs(v[1].getValue()));"
False,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,806,"ssert.assertEquals(v[2].getValue(), lin.getPartialDerivative(0, 0, 1, 0), 1.0e-15 * FastMath.abs(v[2].getValue()));"
False,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,808,"in = MathArrays.linearCombination(u[0], v[0], u[1], v[1], u[2], v[2], u[3], v[3]);"
False,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,809,ef = u[0].getValue() * v[0].getValue() +
False,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,810,[1].getValue() * v[1].getValue() +
False,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,811,[2].getValue() * v[2].getValue() +
False,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,812,[3].getValue() * v[3].getValue();
False,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,813,"ssert.assertEquals(ref, lin.getValue(), 1.0e-15 * FastMath.abs(ref));"
False,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,814,"ssert.assertEquals(v[0].getValue(), lin.getPartialDerivative(1, 0, 0, 0), 1.0e-15 * FastMath.abs(v[0].getValue()));"
False,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,815,"ssert.assertEquals(v[1].getValue(), lin.getPartialDerivative(0, 1, 0, 0), 1.0e-15 * FastMath.abs(v[1].getValue()));"
False,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,816,"ssert.assertEquals(v[2].getValue(), lin.getPartialDerivative(0, 0, 1, 0), 1.0e-15 * FastMath.abs(v[2].getValue()));"
False,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,817,"ssert.assertEquals(v[3].getValue(), lin.getPartialDerivative(0, 0, 0, 1), 1.0e-15 * FastMath.abs(v[3].getValue()));"
False,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,822,Test
False,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,823,ublic void testLinearCombination2DoubleDS() {
False,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,824,/ we compare accurate versus naive dot product implementations
False,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,825,/ on regular vectors (i.e. not extreme cases like in the previous test)
False,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,826,ell1024a random = new Well1024a(0xc6af886975069f11l);
False,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,828,or (int i = 0; i < 10000; ++i) {
False,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,829,inal double[] u = new double[4];
False,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,830,inal DerivativeStructure[] v = new DerivativeStructure[4];
False,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,831,or (int j = 0; j < u.length; ++j) {
False,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,832,[j] = 1e17 * random.nextDouble();
False,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,833,"[j] = new DerivativeStructure(u.length, 1, j, 1e17 * random.nextDouble());"
False,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,836,"erivativeStructure lin = MathArrays.linearCombination(u[0], v[0], u[1], v[1]);"
False,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,837,ouble ref = u[0] * v[0].getValue() +
False,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,838,[1] * v[1].getValue();
False,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,839,"ssert.assertEquals(ref, lin.getValue(), 1.0e-15 * FastMath.abs(ref));"
False,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,840,"ssert.assertEquals(u[0], lin.getPartialDerivative(1, 0, 0, 0), 1.0e-15 * FastMath.abs(v[0].getValue()));"
False,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,841,"ssert.assertEquals(u[1], lin.getPartialDerivative(0, 1, 0, 0), 1.0e-15 * FastMath.abs(v[1].getValue()));"
False,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,843,"in = MathArrays.linearCombination(u[0], v[0], u[1], v[1], u[2], v[2]);"
False,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,844,ef = u[0] * v[0].getValue() +
False,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,845,[1] * v[1].getValue() +
False,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,846,[2] * v[2].getValue();
False,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,847,"ssert.assertEquals(ref, lin.getValue(), 1.0e-15 * FastMath.abs(ref));"
False,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,848,"ssert.assertEquals(u[0], lin.getPartialDerivative(1, 0, 0, 0), 1.0e-15 * FastMath.abs(v[0].getValue()));"
False,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,849,"ssert.assertEquals(u[1], lin.getPartialDerivative(0, 1, 0, 0), 1.0e-15 * FastMath.abs(v[1].getValue()));"
False,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,850,"ssert.assertEquals(u[2], lin.getPartialDerivative(0, 0, 1, 0), 1.0e-15 * FastMath.abs(v[2].getValue()));"
False,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,852,"in = MathArrays.linearCombination(u[0], v[0], u[1], v[1], u[2], v[2], u[3], v[3]);"
False,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,853,ef = u[0] * v[0].getValue() +
False,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,854,[1] * v[1].getValue() +
False,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,855,[2] * v[2].getValue() +
False,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,856,[3] * v[3].getValue();
False,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,857,"ssert.assertEquals(ref, lin.getValue(), 1.0e-15 * FastMath.abs(ref));"
False,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,858,"ssert.assertEquals(u[0], lin.getPartialDerivative(1, 0, 0, 0), 1.0e-15 * FastMath.abs(v[0].getValue()));"
False,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,859,"ssert.assertEquals(u[1], lin.getPartialDerivative(0, 1, 0, 0), 1.0e-15 * FastMath.abs(v[1].getValue()));"
False,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,860,"ssert.assertEquals(u[2], lin.getPartialDerivative(0, 0, 1, 0), 1.0e-15 * FastMath.abs(v[2].getValue()));"
False,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,src/test/java/org/apache/commons/math3/util/MathArraysTest.java,861,"ssert.assertEquals(u[3], lin.getPartialDerivative(0, 0, 0, 1), 1.0e-15 * FastMath.abs(v[3].getValue()));"
True,src/test/java/org/apache/commons/math3/util/MathUtilsTest.java,src/test/java/org/apache/commons/math3/util/MathUtilsTest.java,16,import org.apache.commons.math3.distribution.RealDistribution;
True,src/test/java/org/apache/commons/math3/util/MathUtilsTest.java,src/test/java/org/apache/commons/math3/util/MathUtilsTest.java,17,import org.apache.commons.math3.distribution.UniformRealDistribution;
False,src/test/java/org/apache/commons/math3/util/MathUtilsTest.java,src/test/java/org/apache/commons/math3/util/MathUtilsTest.java,21,mport org.apache.commons.math3.distribution.RealDistribution;
False,src/test/java/org/apache/commons/math3/util/MathUtilsTest.java,src/test/java/org/apache/commons/math3/util/MathUtilsTest.java,22,mport org.apache.commons.math3.distribution.UniformRealDistribution;

is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math3/stat/correlation/SpearmansCorrelation.java,src/main/java/org/apache/commons/math3/stat/correlation/SpearmansCorrelation.java,20,import java.util.ArrayList;
True,src/main/java/org/apache/commons/math3/stat/correlation/SpearmansCorrelation.java,src/main/java/org/apache/commons/math3/stat/correlation/SpearmansCorrelation.java,21,import java.util.HashSet;
True,src/main/java/org/apache/commons/math3/stat/correlation/SpearmansCorrelation.java,src/main/java/org/apache/commons/math3/stat/correlation/SpearmansCorrelation.java,22,import java.util.List;
True,src/main/java/org/apache/commons/math3/stat/correlation/SpearmansCorrelation.java,src/main/java/org/apache/commons/math3/stat/correlation/SpearmansCorrelation.java,23,import java.util.Set;
True,src/main/java/org/apache/commons/math3/stat/correlation/SpearmansCorrelation.java,src/main/java/org/apache/commons/math3/stat/correlation/SpearmansCorrelation.java,30,import org.apache.commons.math3.stat.ranking.NaNStrategy;
False,src/main/java/org/apache/commons/math3/stat/correlation/SpearmansCorrelation.java,src/main/java/org/apache/commons/math3/stat/correlation/SpearmansCorrelation.java,29, <p>Spearman's rank correlation. This implementation performs a rank
True,src/main/java/org/apache/commons/math3/stat/correlation/SpearmansCorrelation.java,src/main/java/org/apache/commons/math3/stat/correlation/SpearmansCorrelation.java,35,* Spearman's rank correlation. This implementation performs a rank
False,src/main/java/org/apache/commons/math3/stat/correlation/SpearmansCorrelation.java,src/main/java/org/apache/commons/math3/stat/correlation/SpearmansCorrelation.java,31, on the ranked data.</p>
False,src/main/java/org/apache/commons/math3/stat/correlation/SpearmansCorrelation.java,src/main/java/org/apache/commons/math3/stat/correlation/SpearmansCorrelation.java,33," <p>By default, ranks are computed using {@link NaturalRanking} with default"
True,src/main/java/org/apache/commons/math3/stat/correlation/SpearmansCorrelation.java,src/main/java/org/apache/commons/math3/stat/correlation/SpearmansCorrelation.java,37,* on the ranked data.
True,src/main/java/org/apache/commons/math3/stat/correlation/SpearmansCorrelation.java,src/main/java/org/apache/commons/math3/stat/correlation/SpearmansCorrelation.java,38,* <p>
True,src/main/java/org/apache/commons/math3/stat/correlation/SpearmansCorrelation.java,src/main/java/org/apache/commons/math3/stat/correlation/SpearmansCorrelation.java,39,"* By default, ranks are computed using {@link NaturalRanking} with default"
False,src/main/java/org/apache/commons/math3/stat/correlation/SpearmansCorrelation.java,src/main/java/org/apache/commons/math3/stat/correlation/SpearmansCorrelation.java,35, The ranking algorithm can be set using a constructor argument.</p>
True,src/main/java/org/apache/commons/math3/stat/correlation/SpearmansCorrelation.java,src/main/java/org/apache/commons/math3/stat/correlation/SpearmansCorrelation.java,41,* The ranking algorithm can be set using a constructor argument.
True,src/main/java/org/apache/commons/math3/stat/correlation/SpearmansCorrelation.java,src/main/java/org/apache/commons/math3/stat/correlation/SpearmansCorrelation.java,66,* <p>
True,src/main/java/org/apache/commons/math3/stat/correlation/SpearmansCorrelation.java,src/main/java/org/apache/commons/math3/stat/correlation/SpearmansCorrelation.java,67,* From version 4.0 onwards this constructor will throw an exception
True,src/main/java/org/apache/commons/math3/stat/correlation/SpearmansCorrelation.java,src/main/java/org/apache/commons/math3/stat/correlation/SpearmansCorrelation.java,68,* if the provided {@link NaturalRanking} uses a {@link NaNStrategy#REMOVED} strategy.
True,src/main/java/org/apache/commons/math3/stat/correlation/SpearmansCorrelation.java,src/main/java/org/apache/commons/math3/stat/correlation/SpearmansCorrelation.java,92,* <p>
True,src/main/java/org/apache/commons/math3/stat/correlation/SpearmansCorrelation.java,src/main/java/org/apache/commons/math3/stat/correlation/SpearmansCorrelation.java,93,* From version 4.0 onwards this constructor will throw an exception
True,src/main/java/org/apache/commons/math3/stat/correlation/SpearmansCorrelation.java,src/main/java/org/apache/commons/math3/stat/correlation/SpearmansCorrelation.java,94,* if the provided {@link NaturalRanking} uses a {@link NaNStrategy#REMOVED} strategy.
False,src/main/java/org/apache/commons/math3/stat/correlation/SpearmansCorrelation.java,src/main/java/org/apache/commons/math3/stat/correlation/SpearmansCorrelation.java,90,his.data = dataMatrix.copy();
False,src/main/java/org/apache/commons/math3/stat/correlation/SpearmansCorrelation.java,src/main/java/org/apache/commons/math3/stat/correlation/SpearmansCorrelation.java,92,ankTransform(data);
True,src/main/java/org/apache/commons/math3/stat/correlation/SpearmansCorrelation.java,src/main/java/org/apache/commons/math3/stat/correlation/SpearmansCorrelation.java,102,this.data = rankTransform(dataMatrix);
False,src/main/java/org/apache/commons/math3/stat/correlation/SpearmansCorrelation.java,src/main/java/org/apache/commons/math3/stat/correlation/SpearmansCorrelation.java,128,ublic RealMatrix computeCorrelationMatrix(RealMatrix matrix) {
False,src/main/java/org/apache/commons/math3/stat/correlation/SpearmansCorrelation.java,src/main/java/org/apache/commons/math3/stat/correlation/SpearmansCorrelation.java,129,ealMatrix matrixCopy = matrix.copy();
False,src/main/java/org/apache/commons/math3/stat/correlation/SpearmansCorrelation.java,src/main/java/org/apache/commons/math3/stat/correlation/SpearmansCorrelation.java,130,ankTransform(matrixCopy);
True,src/main/java/org/apache/commons/math3/stat/correlation/SpearmansCorrelation.java,src/main/java/org/apache/commons/math3/stat/correlation/SpearmansCorrelation.java,138,public RealMatrix computeCorrelationMatrix(final RealMatrix matrix) {
True,src/main/java/org/apache/commons/math3/stat/correlation/SpearmansCorrelation.java,src/main/java/org/apache/commons/math3/stat/correlation/SpearmansCorrelation.java,139,final RealMatrix matrixCopy = rankTransform(matrix);
False,src/main/java/org/apache/commons/math3/stat/correlation/SpearmansCorrelation.java,src/main/java/org/apache/commons/math3/stat/correlation/SpearmansCorrelation.java,142,ublic RealMatrix computeCorrelationMatrix(double[][] matrix) {
True,src/main/java/org/apache/commons/math3/stat/correlation/SpearmansCorrelation.java,src/main/java/org/apache/commons/math3/stat/correlation/SpearmansCorrelation.java,151,public RealMatrix computeCorrelationMatrix(final double[][] matrix) {
False,src/main/java/org/apache/commons/math3/stat/correlation/SpearmansCorrelation.java,src/main/java/org/apache/commons/math3/stat/correlation/SpearmansCorrelation.java,162,"eturn new PearsonsCorrelation().correlation(rankingAlgorithm.rank(xArray),"
False,src/main/java/org/apache/commons/math3/stat/correlation/SpearmansCorrelation.java,src/main/java/org/apache/commons/math3/stat/correlation/SpearmansCorrelation.java,163,ankingAlgorithm.rank(yArray));
True,src/main/java/org/apache/commons/math3/stat/correlation/SpearmansCorrelation.java,src/main/java/org/apache/commons/math3/stat/correlation/SpearmansCorrelation.java,171,double[] x = xArray;
True,src/main/java/org/apache/commons/math3/stat/correlation/SpearmansCorrelation.java,src/main/java/org/apache/commons/math3/stat/correlation/SpearmansCorrelation.java,172,double[] y = yArray;
True,src/main/java/org/apache/commons/math3/stat/correlation/SpearmansCorrelation.java,src/main/java/org/apache/commons/math3/stat/correlation/SpearmansCorrelation.java,173,if (rankingAlgorithm instanceof NaturalRanking &&
True,src/main/java/org/apache/commons/math3/stat/correlation/SpearmansCorrelation.java,src/main/java/org/apache/commons/math3/stat/correlation/SpearmansCorrelation.java,174,NaNStrategy.REMOVED == ((NaturalRanking) rankingAlgorithm).getNanStrategy()) {
True,src/main/java/org/apache/commons/math3/stat/correlation/SpearmansCorrelation.java,src/main/java/org/apache/commons/math3/stat/correlation/SpearmansCorrelation.java,175,final Set<Integer> nanPositions = new HashSet<Integer>();
True,src/main/java/org/apache/commons/math3/stat/correlation/SpearmansCorrelation.java,src/main/java/org/apache/commons/math3/stat/correlation/SpearmansCorrelation.java,177,nanPositions.addAll(getNaNPositions(xArray));
True,src/main/java/org/apache/commons/math3/stat/correlation/SpearmansCorrelation.java,src/main/java/org/apache/commons/math3/stat/correlation/SpearmansCorrelation.java,178,nanPositions.addAll(getNaNPositions(yArray));
True,src/main/java/org/apache/commons/math3/stat/correlation/SpearmansCorrelation.java,src/main/java/org/apache/commons/math3/stat/correlation/SpearmansCorrelation.java,180,"x = removeValues(xArray, nanPositions);"
True,src/main/java/org/apache/commons/math3/stat/correlation/SpearmansCorrelation.java,src/main/java/org/apache/commons/math3/stat/correlation/SpearmansCorrelation.java,181,"y = removeValues(yArray, nanPositions);"
True,src/main/java/org/apache/commons/math3/stat/correlation/SpearmansCorrelation.java,src/main/java/org/apache/commons/math3/stat/correlation/SpearmansCorrelation.java,183,"return new PearsonsCorrelation().correlation(rankingAlgorithm.rank(x), rankingAlgorithm.rank(y));"
False,src/main/java/org/apache/commons/math3/stat/correlation/SpearmansCorrelation.java,src/main/java/org/apache/commons/math3/stat/correlation/SpearmansCorrelation.java,169, using the current <code>rankingAlgorithm</code>
True,src/main/java/org/apache/commons/math3/stat/correlation/SpearmansCorrelation.java,src/main/java/org/apache/commons/math3/stat/correlation/SpearmansCorrelation.java,189,* using the current <code>rankingAlgorithm</code>.
True,src/main/java/org/apache/commons/math3/stat/correlation/SpearmansCorrelation.java,src/main/java/org/apache/commons/math3/stat/correlation/SpearmansCorrelation.java,192,* @return a rank-transformed matrix
False,src/main/java/org/apache/commons/math3/stat/correlation/SpearmansCorrelation.java,src/main/java/org/apache/commons/math3/stat/correlation/SpearmansCorrelation.java,173,rivate void rankTransform(RealMatrix matrix) {
False,src/main/java/org/apache/commons/math3/stat/correlation/SpearmansCorrelation.java,src/main/java/org/apache/commons/math3/stat/correlation/SpearmansCorrelation.java,174,or (int i = 0; i < matrix.getColumnDimension(); i++) {
False,src/main/java/org/apache/commons/math3/stat/correlation/SpearmansCorrelation.java,src/main/java/org/apache/commons/math3/stat/correlation/SpearmansCorrelation.java,175,"atrix.setColumn(i, rankingAlgorithm.rank(matrix.getColumn(i)));"
True,src/main/java/org/apache/commons/math3/stat/correlation/SpearmansCorrelation.java,src/main/java/org/apache/commons/math3/stat/correlation/SpearmansCorrelation.java,194,private RealMatrix rankTransform(final RealMatrix matrix) {
True,src/main/java/org/apache/commons/math3/stat/correlation/SpearmansCorrelation.java,src/main/java/org/apache/commons/math3/stat/correlation/SpearmansCorrelation.java,195,RealMatrix transformed = null;
True,src/main/java/org/apache/commons/math3/stat/correlation/SpearmansCorrelation.java,src/main/java/org/apache/commons/math3/stat/correlation/SpearmansCorrelation.java,197,if (rankingAlgorithm instanceof NaturalRanking &&
True,src/main/java/org/apache/commons/math3/stat/correlation/SpearmansCorrelation.java,src/main/java/org/apache/commons/math3/stat/correlation/SpearmansCorrelation.java,198,((NaturalRanking) rankingAlgorithm).getNanStrategy() == NaNStrategy.REMOVED) {
True,src/main/java/org/apache/commons/math3/stat/correlation/SpearmansCorrelation.java,src/main/java/org/apache/commons/math3/stat/correlation/SpearmansCorrelation.java,199,final Set<Integer> nanPositions = new HashSet<Integer>();
True,src/main/java/org/apache/commons/math3/stat/correlation/SpearmansCorrelation.java,src/main/java/org/apache/commons/math3/stat/correlation/SpearmansCorrelation.java,200,for (int i = 0; i < matrix.getColumnDimension(); i++) {
True,src/main/java/org/apache/commons/math3/stat/correlation/SpearmansCorrelation.java,src/main/java/org/apache/commons/math3/stat/correlation/SpearmansCorrelation.java,201,nanPositions.addAll(getNaNPositions(matrix.getColumn(i)));
True,src/main/java/org/apache/commons/math3/stat/correlation/SpearmansCorrelation.java,src/main/java/org/apache/commons/math3/stat/correlation/SpearmansCorrelation.java,204,"// if we have found NaN values, we have to update the matrix size"
True,src/main/java/org/apache/commons/math3/stat/correlation/SpearmansCorrelation.java,src/main/java/org/apache/commons/math3/stat/correlation/SpearmansCorrelation.java,205,if (!nanPositions.isEmpty()) {
True,src/main/java/org/apache/commons/math3/stat/correlation/SpearmansCorrelation.java,src/main/java/org/apache/commons/math3/stat/correlation/SpearmansCorrelation.java,206,"transformed = new BlockRealMatrix(matrix.getRowDimension() - nanPositions.size(),"
True,src/main/java/org/apache/commons/math3/stat/correlation/SpearmansCorrelation.java,src/main/java/org/apache/commons/math3/stat/correlation/SpearmansCorrelation.java,207,matrix.getColumnDimension());
True,src/main/java/org/apache/commons/math3/stat/correlation/SpearmansCorrelation.java,src/main/java/org/apache/commons/math3/stat/correlation/SpearmansCorrelation.java,208,for (int i = 0; i < transformed.getColumnDimension(); i++) {
True,src/main/java/org/apache/commons/math3/stat/correlation/SpearmansCorrelation.java,src/main/java/org/apache/commons/math3/stat/correlation/SpearmansCorrelation.java,209,"transformed.setColumn(i, removeValues(matrix.getColumn(i), nanPositions));"
True,src/main/java/org/apache/commons/math3/stat/correlation/SpearmansCorrelation.java,src/main/java/org/apache/commons/math3/stat/correlation/SpearmansCorrelation.java,214,if (transformed == null) {
True,src/main/java/org/apache/commons/math3/stat/correlation/SpearmansCorrelation.java,src/main/java/org/apache/commons/math3/stat/correlation/SpearmansCorrelation.java,215,transformed = matrix.copy();
True,src/main/java/org/apache/commons/math3/stat/correlation/SpearmansCorrelation.java,src/main/java/org/apache/commons/math3/stat/correlation/SpearmansCorrelation.java,218,for (int i = 0; i < transformed.getColumnDimension(); i++) {
True,src/main/java/org/apache/commons/math3/stat/correlation/SpearmansCorrelation.java,src/main/java/org/apache/commons/math3/stat/correlation/SpearmansCorrelation.java,219,"transformed.setColumn(i, rankingAlgorithm.rank(transformed.getColumn(i)));"
True,src/main/java/org/apache/commons/math3/stat/correlation/SpearmansCorrelation.java,src/main/java/org/apache/commons/math3/stat/correlation/SpearmansCorrelation.java,222,return transformed;
True,src/main/java/org/apache/commons/math3/stat/correlation/SpearmansCorrelation.java,src/main/java/org/apache/commons/math3/stat/correlation/SpearmansCorrelation.java,226,* Returns a list containing the indices of NaN values in the input array.
True,src/main/java/org/apache/commons/math3/stat/correlation/SpearmansCorrelation.java,src/main/java/org/apache/commons/math3/stat/correlation/SpearmansCorrelation.java,228,* @param input the input array
True,src/main/java/org/apache/commons/math3/stat/correlation/SpearmansCorrelation.java,src/main/java/org/apache/commons/math3/stat/correlation/SpearmansCorrelation.java,229,* @return a list of NaN positions in the input array
True,src/main/java/org/apache/commons/math3/stat/correlation/SpearmansCorrelation.java,src/main/java/org/apache/commons/math3/stat/correlation/SpearmansCorrelation.java,231,private List<Integer> getNaNPositions(final double[] input) {
True,src/main/java/org/apache/commons/math3/stat/correlation/SpearmansCorrelation.java,src/main/java/org/apache/commons/math3/stat/correlation/SpearmansCorrelation.java,232,final List<Integer> positions = new ArrayList<Integer>();
True,src/main/java/org/apache/commons/math3/stat/correlation/SpearmansCorrelation.java,src/main/java/org/apache/commons/math3/stat/correlation/SpearmansCorrelation.java,233,for (int i = 0; i < input.length; i++) {
True,src/main/java/org/apache/commons/math3/stat/correlation/SpearmansCorrelation.java,src/main/java/org/apache/commons/math3/stat/correlation/SpearmansCorrelation.java,234,if (Double.isNaN(input[i])) {
True,src/main/java/org/apache/commons/math3/stat/correlation/SpearmansCorrelation.java,src/main/java/org/apache/commons/math3/stat/correlation/SpearmansCorrelation.java,235,positions.add(i);
True,src/main/java/org/apache/commons/math3/stat/correlation/SpearmansCorrelation.java,src/main/java/org/apache/commons/math3/stat/correlation/SpearmansCorrelation.java,238,return positions;
True,src/main/java/org/apache/commons/math3/stat/correlation/SpearmansCorrelation.java,src/main/java/org/apache/commons/math3/stat/correlation/SpearmansCorrelation.java,242,* Removes all values from the input array at the specified indices.
True,src/main/java/org/apache/commons/math3/stat/correlation/SpearmansCorrelation.java,src/main/java/org/apache/commons/math3/stat/correlation/SpearmansCorrelation.java,244,* @param input the input array
True,src/main/java/org/apache/commons/math3/stat/correlation/SpearmansCorrelation.java,src/main/java/org/apache/commons/math3/stat/correlation/SpearmansCorrelation.java,245,* @param indices a set containing the indices to be removed
True,src/main/java/org/apache/commons/math3/stat/correlation/SpearmansCorrelation.java,src/main/java/org/apache/commons/math3/stat/correlation/SpearmansCorrelation.java,246,* @return the input array without the values at the specified indices
True,src/main/java/org/apache/commons/math3/stat/correlation/SpearmansCorrelation.java,src/main/java/org/apache/commons/math3/stat/correlation/SpearmansCorrelation.java,248,"private double[] removeValues(final double[] input, final Set<Integer> indices) {"
True,src/main/java/org/apache/commons/math3/stat/correlation/SpearmansCorrelation.java,src/main/java/org/apache/commons/math3/stat/correlation/SpearmansCorrelation.java,249,if (indices.isEmpty()) {
True,src/main/java/org/apache/commons/math3/stat/correlation/SpearmansCorrelation.java,src/main/java/org/apache/commons/math3/stat/correlation/SpearmansCorrelation.java,250,return input;
True,src/main/java/org/apache/commons/math3/stat/correlation/SpearmansCorrelation.java,src/main/java/org/apache/commons/math3/stat/correlation/SpearmansCorrelation.java,252,final double[] result = new double[input.length - indices.size()];
True,src/main/java/org/apache/commons/math3/stat/correlation/SpearmansCorrelation.java,src/main/java/org/apache/commons/math3/stat/correlation/SpearmansCorrelation.java,253,"for (int i = 0, j = 0; i < input.length; i++) {"
True,src/main/java/org/apache/commons/math3/stat/correlation/SpearmansCorrelation.java,src/main/java/org/apache/commons/math3/stat/correlation/SpearmansCorrelation.java,254,if (!indices.contains(i)) {
True,src/main/java/org/apache/commons/math3/stat/correlation/SpearmansCorrelation.java,src/main/java/org/apache/commons/math3/stat/correlation/SpearmansCorrelation.java,255,result[j++] = input[i];
True,src/main/java/org/apache/commons/math3/stat/correlation/SpearmansCorrelation.java,src/main/java/org/apache/commons/math3/stat/correlation/SpearmansCorrelation.java,258,return result;
True,src/test/java/org/apache/commons/math3/stat/correlation/SpearmansRankCorrelationTest.java,src/test/java/org/apache/commons/math3/stat/correlation/SpearmansRankCorrelationTest.java,21,import org.apache.commons.math3.linear.MatrixUtils;
True,src/test/java/org/apache/commons/math3/stat/correlation/SpearmansRankCorrelationTest.java,src/test/java/org/apache/commons/math3/stat/correlation/SpearmansRankCorrelationTest.java,23,import org.apache.commons.math3.stat.ranking.NaNStrategy;
True,src/test/java/org/apache/commons/math3/stat/correlation/SpearmansRankCorrelationTest.java,src/test/java/org/apache/commons/math3/stat/correlation/SpearmansRankCorrelationTest.java,24,import org.apache.commons.math3.stat.ranking.NaturalRanking;
True,src/test/java/org/apache/commons/math3/stat/correlation/SpearmansRankCorrelationTest.java,src/test/java/org/apache/commons/math3/stat/correlation/SpearmansRankCorrelationTest.java,124,@Test
True,src/test/java/org/apache/commons/math3/stat/correlation/SpearmansRankCorrelationTest.java,src/test/java/org/apache/commons/math3/stat/correlation/SpearmansRankCorrelationTest.java,125,public void testMath891Array() {
True,src/test/java/org/apache/commons/math3/stat/correlation/SpearmansRankCorrelationTest.java,src/test/java/org/apache/commons/math3/stat/correlation/SpearmansRankCorrelationTest.java,126,"final double[] xArray = new double[] { Double.NaN, 1.9, 2, 100, 3 };"
True,src/test/java/org/apache/commons/math3/stat/correlation/SpearmansRankCorrelationTest.java,src/test/java/org/apache/commons/math3/stat/correlation/SpearmansRankCorrelationTest.java,127,"final double[] yArray = new double[] { 10, 2, 10, Double.NaN, 4 };"
True,src/test/java/org/apache/commons/math3/stat/correlation/SpearmansRankCorrelationTest.java,src/test/java/org/apache/commons/math3/stat/correlation/SpearmansRankCorrelationTest.java,129,NaturalRanking ranking = new NaturalRanking(NaNStrategy.REMOVED);
True,src/test/java/org/apache/commons/math3/stat/correlation/SpearmansRankCorrelationTest.java,src/test/java/org/apache/commons/math3/stat/correlation/SpearmansRankCorrelationTest.java,130,SpearmansCorrelation spearman = new SpearmansCorrelation(ranking);
True,src/test/java/org/apache/commons/math3/stat/correlation/SpearmansRankCorrelationTest.java,src/test/java/org/apache/commons/math3/stat/correlation/SpearmansRankCorrelationTest.java,132,"Assert.assertEquals(0.5, spearman.correlation(xArray, yArray), Double.MIN_VALUE);"
True,src/test/java/org/apache/commons/math3/stat/correlation/SpearmansRankCorrelationTest.java,src/test/java/org/apache/commons/math3/stat/correlation/SpearmansRankCorrelationTest.java,135,@Test
True,src/test/java/org/apache/commons/math3/stat/correlation/SpearmansRankCorrelationTest.java,src/test/java/org/apache/commons/math3/stat/correlation/SpearmansRankCorrelationTest.java,136,public void testMath891Matrix() {
True,src/test/java/org/apache/commons/math3/stat/correlation/SpearmansRankCorrelationTest.java,src/test/java/org/apache/commons/math3/stat/correlation/SpearmansRankCorrelationTest.java,137,"final double[] xArray = new double[] { Double.NaN, 1.9, 2, 100, 3 };"
True,src/test/java/org/apache/commons/math3/stat/correlation/SpearmansRankCorrelationTest.java,src/test/java/org/apache/commons/math3/stat/correlation/SpearmansRankCorrelationTest.java,138,"final double[] yArray = new double[] { 10, 2, 10, Double.NaN, 4 };"
True,src/test/java/org/apache/commons/math3/stat/correlation/SpearmansRankCorrelationTest.java,src/test/java/org/apache/commons/math3/stat/correlation/SpearmansRankCorrelationTest.java,140,"RealMatrix matrix = MatrixUtils.createRealMatrix(xArray.length, 2);"
True,src/test/java/org/apache/commons/math3/stat/correlation/SpearmansRankCorrelationTest.java,src/test/java/org/apache/commons/math3/stat/correlation/SpearmansRankCorrelationTest.java,141,for (int i = 0; i < xArray.length; i++) {
True,src/test/java/org/apache/commons/math3/stat/correlation/SpearmansRankCorrelationTest.java,src/test/java/org/apache/commons/math3/stat/correlation/SpearmansRankCorrelationTest.java,142,"matrix.addToEntry(i, 0, xArray[i]);"
True,src/test/java/org/apache/commons/math3/stat/correlation/SpearmansRankCorrelationTest.java,src/test/java/org/apache/commons/math3/stat/correlation/SpearmansRankCorrelationTest.java,143,"matrix.addToEntry(i, 1, yArray[i]);"
True,src/test/java/org/apache/commons/math3/stat/correlation/SpearmansRankCorrelationTest.java,src/test/java/org/apache/commons/math3/stat/correlation/SpearmansRankCorrelationTest.java,146,// compute correlation
True,src/test/java/org/apache/commons/math3/stat/correlation/SpearmansRankCorrelationTest.java,src/test/java/org/apache/commons/math3/stat/correlation/SpearmansRankCorrelationTest.java,147,NaturalRanking ranking = new NaturalRanking(NaNStrategy.REMOVED);
True,src/test/java/org/apache/commons/math3/stat/correlation/SpearmansRankCorrelationTest.java,src/test/java/org/apache/commons/math3/stat/correlation/SpearmansRankCorrelationTest.java,148,"SpearmansCorrelation spearman = new SpearmansCorrelation(matrix, ranking);"
True,src/test/java/org/apache/commons/math3/stat/correlation/SpearmansRankCorrelationTest.java,src/test/java/org/apache/commons/math3/stat/correlation/SpearmansRankCorrelationTest.java,150,"Assert.assertEquals(0.5, spearman.getCorrelationMatrix().getEntry(0, 1), Double.MIN_VALUE);"

is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,21,import org.apache.commons.math.ode.sampling.FixedStepHandler;
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,22,import org.apache.commons.math.ode.sampling.StepHandler;
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,23,import org.apache.commons.math.ode.sampling.StepInterpolator;
False,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,34, {@link FixedStepHandler} object is called at the beginning time of
False,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,35," the integration t0 and also at times t0+h, t0+2h, ... If the"
False,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,36," integration range is an integer multiple of the stepsize, then the"
False,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,37," last point handled will be the endpoint of the integration tend, if"
False,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,38," not, the last point will belong to the interval [tend - h ;"
False,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,39, tend].</p>
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,37,* {@link FixedStepHandler} object is called at normalized times. The
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,38,* normalized times can be influenced by the {@link StepNormalizerMode} and
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,39,* {@link StepNormalizerBounds}.</p>
False,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,41," <p>There is no constraint on the integrator, it can use any"
False,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,42, timestep it needs (time steps longer or shorter than the fixed time
False,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,43, step and non-integer ratios are all allowed).</p>
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,41,"* <p>There is no constraint on the integrator, it can use any time step"
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,42,* it needs (time steps longer or shorter than the fixed time step and
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,43,* non-integer ratios are all allowed).</p>
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,45,* <p>
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,46,"* <table border=""1"" align=""center"">"
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,47,"* <tr BGCOLOR=""#CCCCFF""><td colspan=6><font size=""+2"">Examples (step size = 0.5)</font></td></tr>"
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,48,"* <tr BGCOLOR=""#EEEEFF""><font size=""+1""><td>Start time</td><td>End time</td>"
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,49,*  <td>Direction</td><td>{@link StepNormalizerMode Mode}</td>
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,50,*  <td>{@link StepNormalizerBounds Bounds}</td><td>Output</td></font></tr>
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,51,"* <tr><td>0.3</td><td>3.1</td><td>forward</td><td>{@link StepNormalizerMode#INCREMENT INCREMENT}</td><td>{@link StepNormalizerBounds#NEITHER NEITHER}</td><td>0.8, 1.3, 1.8, 2.3, 2.8</td></tr>"
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,52,"* <tr><td>0.3</td><td>3.1</td><td>forward</td><td>{@link StepNormalizerMode#INCREMENT INCREMENT}</td><td>{@link StepNormalizerBounds#FIRST FIRST}</td><td>0.3, 0.8, 1.3, 1.8, 2.3, 2.8</td></tr>"
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,53,"* <tr><td>0.3</td><td>3.1</td><td>forward</td><td>{@link StepNormalizerMode#INCREMENT INCREMENT}</td><td>{@link StepNormalizerBounds#LAST LAST}</td><td>0.8, 1.3, 1.8, 2.3, 2.8, 3.1</td></tr>"
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,54,"* <tr><td>0.3</td><td>3.1</td><td>forward</td><td>{@link StepNormalizerMode#INCREMENT INCREMENT}</td><td>{@link StepNormalizerBounds#BOTH BOTH}</td><td>0.3, 0.8, 1.3, 1.8, 2.3, 2.8, 3.1</td></tr>"
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,55,"* <tr><td>0.3</td><td>3.1</td><td>forward</td><td>{@link StepNormalizerMode#MULTIPLES MULTIPLES}</td><td>{@link StepNormalizerBounds#NEITHER NEITHER}</td><td>0.5, 1.0, 1.5, 2.0, 2.5, 3.0</td></tr>"
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,56,"* <tr><td>0.3</td><td>3.1</td><td>forward</td><td>{@link StepNormalizerMode#MULTIPLES MULTIPLES}</td><td>{@link StepNormalizerBounds#FIRST FIRST}</td><td>0.3, 0.5, 1.0, 1.5, 2.0, 2.5, 3.0</td></tr>"
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,57,"* <tr><td>0.3</td><td>3.1</td><td>forward</td><td>{@link StepNormalizerMode#MULTIPLES MULTIPLES}</td><td>{@link StepNormalizerBounds#LAST LAST}</td><td>0.5, 1.0, 1.5, 2.0, 2.5, 3.0, 3.1</td></tr>"
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,58,"* <tr><td>0.3</td><td>3.1</td><td>forward</td><td>{@link StepNormalizerMode#MULTIPLES MULTIPLES}</td><td>{@link StepNormalizerBounds#BOTH BOTH}</td><td>0.3, 0.5, 1.0, 1.5, 2.0, 2.5, 3.0, 3.1</td></tr>"
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,59,"* <tr><td>0.0</td><td>3.0</td><td>forward</td><td>{@link StepNormalizerMode#INCREMENT INCREMENT}</td><td>{@link StepNormalizerBounds#NEITHER NEITHER}</td><td>0.5, 1.0, 1.5, 2.0, 2.5, 3.0</td></tr>"
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,60,"* <tr><td>0.0</td><td>3.0</td><td>forward</td><td>{@link StepNormalizerMode#INCREMENT INCREMENT}</td><td>{@link StepNormalizerBounds#FIRST FIRST}</td><td>0.0, 0.5, 1.0, 1.5, 2.0, 2.5, 3.0</td></tr>"
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,61,"* <tr><td>0.0</td><td>3.0</td><td>forward</td><td>{@link StepNormalizerMode#INCREMENT INCREMENT}</td><td>{@link StepNormalizerBounds#LAST LAST}</td><td>0.5, 1.0, 1.5, 2.0, 2.5, 3.0</td></tr>"
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,62,"* <tr><td>0.0</td><td>3.0</td><td>forward</td><td>{@link StepNormalizerMode#INCREMENT INCREMENT}</td><td>{@link StepNormalizerBounds#BOTH BOTH}</td><td>0.0, 0.5, 1.0, 1.5, 2.0, 2.5, 3.0</td></tr>"
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,63,"* <tr><td>0.0</td><td>3.0</td><td>forward</td><td>{@link StepNormalizerMode#MULTIPLES MULTIPLES}</td><td>{@link StepNormalizerBounds#NEITHER NEITHER}</td><td>0.5, 1.0, 1.5, 2.0, 2.5, 3.0</td></tr>"
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,64,"* <tr><td>0.0</td><td>3.0</td><td>forward</td><td>{@link StepNormalizerMode#MULTIPLES MULTIPLES}</td><td>{@link StepNormalizerBounds#FIRST FIRST}</td><td>0.0, 0.5, 1.0, 1.5, 2.0, 2.5, 3.0</td></tr>"
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,65,"* <tr><td>0.0</td><td>3.0</td><td>forward</td><td>{@link StepNormalizerMode#MULTIPLES MULTIPLES}</td><td>{@link StepNormalizerBounds#LAST LAST}</td><td>0.5, 1.0, 1.5, 2.0, 2.5, 3.0</td></tr>"
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,66,"* <tr><td>0.0</td><td>3.0</td><td>forward</td><td>{@link StepNormalizerMode#MULTIPLES MULTIPLES}</td><td>{@link StepNormalizerBounds#BOTH BOTH}</td><td>0.0, 0.5, 1.0, 1.5, 2.0, 2.5, 3.0</td></tr>"
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,67,"* <tr><td>3.1</td><td>0.3</td><td>backward</td><td>{@link StepNormalizerMode#INCREMENT INCREMENT}</td><td>{@link StepNormalizerBounds#NEITHER NEITHER}</td><td>2.6, 2.1, 1.6, 1.1, 0.6</td></tr>"
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,68,"* <tr><td>3.1</td><td>0.3</td><td>backward</td><td>{@link StepNormalizerMode#INCREMENT INCREMENT}</td><td>{@link StepNormalizerBounds#FIRST FIRST}</td><td>3.1, 2.6, 2.1, 1.6, 1.1, 0.6</td></tr>"
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,69,"* <tr><td>3.1</td><td>0.3</td><td>backward</td><td>{@link StepNormalizerMode#INCREMENT INCREMENT}</td><td>{@link StepNormalizerBounds#LAST LAST}</td><td>2.6, 2.1, 1.6, 1.1, 0.6, 0.3</td></tr>"
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,70,"* <tr><td>3.1</td><td>0.3</td><td>backward</td><td>{@link StepNormalizerMode#INCREMENT INCREMENT}</td><td>{@link StepNormalizerBounds#BOTH BOTH}</td><td>3.1, 2.6, 2.1, 1.6, 1.1, 0.6, 0.3</td></tr>"
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,71,"* <tr><td>3.1</td><td>0.3</td><td>backward</td><td>{@link StepNormalizerMode#MULTIPLES MULTIPLES}</td><td>{@link StepNormalizerBounds#NEITHER NEITHER}</td><td>3.0, 2.5, 2.0, 1.5, 1.0, 0.5</td></tr>"
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,72,"* <tr><td>3.1</td><td>0.3</td><td>backward</td><td>{@link StepNormalizerMode#MULTIPLES MULTIPLES}</td><td>{@link StepNormalizerBounds#FIRST FIRST}</td><td>3.1, 3.0, 2.5, 2.0, 1.5, 1.0, 0.5</td></tr>"
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,73,"* <tr><td>3.1</td><td>0.3</td><td>backward</td><td>{@link StepNormalizerMode#MULTIPLES MULTIPLES}</td><td>{@link StepNormalizerBounds#LAST LAST}</td><td>3.0, 2.5, 2.0, 1.5, 1.0, 0.5, 0.3</td></tr>"
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,74,"* <tr><td>3.1</td><td>0.3</td><td>backward</td><td>{@link StepNormalizerMode#MULTIPLES MULTIPLES}</td><td>{@link StepNormalizerBounds#BOTH BOTH}</td><td>3.1, 3.0, 2.5, 2.0, 1.5, 1.0, 0.5, 0.3</td></tr>"
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,75,"* <tr><td>3.0</td><td>0.0</td><td>backward</td><td>{@link StepNormalizerMode#INCREMENT INCREMENT}</td><td>{@link StepNormalizerBounds#NEITHER NEITHER}</td><td>2.5, 2.0, 1.5, 1.0, 0.5, 0.0</td></tr>"
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,76,"* <tr><td>3.0</td><td>0.0</td><td>backward</td><td>{@link StepNormalizerMode#INCREMENT INCREMENT}</td><td>{@link StepNormalizerBounds#FIRST FIRST}</td><td>3.0, 2.5, 2.0, 1.5, 1.0, 0.5, 0.0</td></tr>"
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,77,"* <tr><td>3.0</td><td>0.0</td><td>backward</td><td>{@link StepNormalizerMode#INCREMENT INCREMENT}</td><td>{@link StepNormalizerBounds#LAST LAST}</td><td>2.5, 2.0, 1.5, 1.0, 0.5, 0.0</td></tr>"
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,78,"* <tr><td>3.0</td><td>0.0</td><td>backward</td><td>{@link StepNormalizerMode#INCREMENT INCREMENT}</td><td>{@link StepNormalizerBounds#BOTH BOTH}</td><td>3.0, 2.5, 2.0, 1.5, 1.0, 0.5, 0.0</td></tr>"
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,79,"* <tr><td>3.0</td><td>0.0</td><td>backward</td><td>{@link StepNormalizerMode#MULTIPLES MULTIPLES}</td><td>{@link StepNormalizerBounds#NEITHER NEITHER}</td><td>2.5, 2.0, 1.5, 1.0, 0.5, 0.0</td></tr>"
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,80,"* <tr><td>3.0</td><td>0.0</td><td>backward</td><td>{@link StepNormalizerMode#MULTIPLES MULTIPLES}</td><td>{@link StepNormalizerBounds#FIRST FIRST}</td><td>3.0, 2.5, 2.0, 1.5, 1.0, 0.5, 0.0</td></tr>"
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,81,"* <tr><td>3.0</td><td>0.0</td><td>backward</td><td>{@link StepNormalizerMode#MULTIPLES MULTIPLES}</td><td>{@link StepNormalizerBounds#LAST LAST}</td><td>2.5, 2.0, 1.5, 1.0, 0.5, 0.0</td></tr>"
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,82,"* <tr><td>3.0</td><td>0.0</td><td>backward</td><td>{@link StepNormalizerMode#MULTIPLES MULTIPLES}</td><td>{@link StepNormalizerBounds#BOTH BOTH}</td><td>3.0, 2.5, 2.0, 1.5, 1.0, 0.5, 0.0</td></tr>"
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,83,* </table>
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,84,* </p>
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,88,* @see StepNormalizerMode
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,89,* @see StepNormalizerBounds
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,101,/** First step time. */
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,102,private double firstTime;
False,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,62,** Last State vector. */
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,107,/** Last state vector. */
False,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,65,** Last Derivatives vector. */
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,110,/** Last derivatives vector. */
False,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,71,** Simple constructor.
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,116,/** The step normalizer bounds settings to use. */
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,117,private final StepNormalizerBounds bounds;
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,119,/** The step normalizer mode to use. */
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,120,private final StepNormalizerMode mode;
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,122,/** Simple constructor. Uses {@link StepNormalizerMode#INCREMENT INCREMENT}
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,123,"* mode, and {@link StepNormalizerBounds#FIRST FIRST} bounds setting, for"
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,124,* backwards compatibility.
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,129,"this(h, handler, StepNormalizerMode.INCREMENT,"
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,130,StepNormalizerBounds.FIRST);
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,133,/** Simple constructor. Uses {@link StepNormalizerBounds#FIRST FIRST}
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,134,* bounds setting.
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,135,* @param h fixed time step (sign is not used)
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,136,* @param handler fixed time step handler to wrap
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,137,* @param mode step normalizer mode to use
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,138,* @since 3.0
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,140,"public StepNormalizer(final double h, final FixedStepHandler handler,"
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,141,final StepNormalizerMode mode) {
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,142,"this(h, handler, mode, StepNormalizerBounds.FIRST);"
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,145,/** Simple constructor. Uses {@link StepNormalizerMode#INCREMENT INCREMENT}
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,146,* mode.
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,147,* @param h fixed time step (sign is not used)
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,148,* @param handler fixed time step handler to wrap
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,149,* @param bounds step normalizer bounds setting to use
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,150,* @since 3.0
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,152,"public StepNormalizer(final double h, final FixedStepHandler handler,"
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,153,final StepNormalizerBounds bounds) {
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,154,"this(h, handler, StepNormalizerMode.INCREMENT, bounds);"
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,157,/** Simple constructor.
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,158,* @param h fixed time step (sign is not used)
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,159,* @param handler fixed time step handler to wrap
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,160,* @param mode step normalizer mode to use
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,161,* @param bounds step normalizer bounds setting to use
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,162,* @since 3.0
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,164,"public StepNormalizer(final double h, final FixedStepHandler handler,"
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,165,"final StepNormalizerMode mode,"
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,166,final StepNormalizerBounds bounds) {
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,169,this.mode    = mode;
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,170,this.bounds  = bounds;
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,189,firstTime       = Double.NaN;
False,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,115,"ublic void handleStep(final StepInterpolator interpolator, final boolean isLast)"
False,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,116,hrows MathUserException {
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,209,"public void handleStep(final StepInterpolator interpolator,"
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,210,final boolean isLast) throws MathUserException {
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,211,"// The first time, update the last state with the start information."
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,213,firstTime = interpolator.getPreviousTime();
False,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,125,/ take the integration direction into account
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,219,// Take the integration direction into account.
False,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,127,f (! forward) {
False,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,128, = -h;
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,221,if (!forward) h = -h;
False,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,133,ouble nextTime = lastTime + h;
False,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,134,oolean nextInStep = forward ^ (nextTime > interpolator.getCurrentTime());
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,224,double nextTime = (mode == StepNormalizerMode.INCREMENT) ?
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,225,lastTime + h :
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,226,(FastMath.floor(lastTime / h) + 1) * h;
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,227,"boolean nextInStep = isNextInStep(nextTime, interpolator);"
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,229,// Output the stored previous step.
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,230,doNormalizedStep(false);
False,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,137,/ output the stored previous step
False,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,138,"andler.handleStep(lastTime, lastState, lastDerivatives, false);"
False,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,140,/ store the next step
False,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,141,astTime = nextTime;
False,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,142,nterpolator.setInterpolatedTime(lastTime);
False,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,143,"ystem.arraycopy(interpolator.getInterpolatedState(), 0,"
False,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,144,"astState, 0, lastState.length);"
False,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,145,"ystem.arraycopy(interpolator.getInterpolatedDerivatives(), 0,"
False,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,146,"astDerivatives, 0, lastDerivatives.length);"
False,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,148,extTime  += h;
False,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,149,extInStep = forward ^ (nextTime > interpolator.getCurrentTime());
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,232,// Store the next step as last step.
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,233,"storeStep(interpolator, nextTime);"
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,235,// Move on to the next step.
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,236,nextTime += h;
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,237,"nextInStep = isNextInStep(nextTime, interpolator);"
False,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,154,"/ there will be no more steps,"
False,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,155,/ the stored one should be flagged as being the last
False,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,156,"andler.handleStep(lastTime, lastState, lastDerivatives, true);"
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,241,// There will be no more steps. The stored one should be given to
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,242,// the handler. We may have to output one more step. Only the last
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,243,// one of those should be flagged as being the last.
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,244,boolean addLast = bounds.lastIncluded() &&
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,245,lastTime != interpolator.getCurrentTime();
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,246,doNormalizedStep(!addLast);
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,247,if (addLast) {
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,248,"storeStep(interpolator, interpolator.getCurrentTime());"
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,249,doNormalizedStep(true);
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,255,* Returns a value indicating whether the next normalized time is in the
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,256,* current step.
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,257,* @param nextTime the next normalized time
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,258,"* @param interpolator interpolator for the last accepted step, to use to"
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,259,* get the end time of the current step
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,260,* @return value indicating whether the next normalized time is in the
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,261,* current step
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,263,"private boolean isNextInStep(double nextTime,"
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,264,StepInterpolator interpolator) {
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,265,return forward ? nextTime <= interpolator.getCurrentTime()
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,266,: nextTime >= interpolator.getCurrentTime();
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,270,* Invokes the underlying step handler for the current normalized step.
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,271,* @param isLast true if the step is the last one
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,272,* @throws MathUserException this exception is propagated to the
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,273,* caller if the underlying user function triggers one
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,275,private void doNormalizedStep(boolean isLast) throws MathUserException {
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,276,if (!bounds.firstIncluded() && firstTime == lastTime) return;
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,277,"handler.handleStep(lastTime, lastState, lastDerivatives, isLast);"
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,280,/** Stores the interpolated information for the given time in the current
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,281,* state.
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,282,"* @param interpolator interpolator for the last accepted step, to use to"
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,283,* get the interpolated information
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,284,* @param t the time for which to store the interpolated information
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,286,"private void storeStep(StepInterpolator interpolator, double t) {"
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,287,lastTime = t;
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,288,interpolator.setInterpolatedTime(lastTime);
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,289,"System.arraycopy(interpolator.getInterpolatedState(), 0,"
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,290,"lastState, 0, lastState.length);"
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,291,"System.arraycopy(interpolator.getInterpolatedDerivatives(), 0,"
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java,292,"lastDerivatives, 0, lastDerivatives.length);"
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerBounds.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerBounds.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerBounds.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerBounds.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerBounds.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerBounds.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerBounds.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerBounds.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerBounds.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerBounds.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerBounds.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerBounds.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerBounds.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerBounds.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerBounds.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerBounds.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerBounds.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerBounds.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerBounds.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerBounds.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerBounds.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerBounds.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerBounds.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerBounds.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerBounds.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerBounds.java,18,package org.apache.commons.math.ode.sampling;
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerBounds.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerBounds.java,20,/** {@link StepNormalizer Step normalizer} bounds settings. They influence
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerBounds.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerBounds.java,21,* whether the underlying fixed step size step handler is called for the first
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerBounds.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerBounds.java,22,* and last points. Note that if the last point coincides with a normalized
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerBounds.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerBounds.java,23,"* point, then the underlying fixed step size step handler is always called,"
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerBounds.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerBounds.java,24,* regardless of these settings.
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerBounds.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerBounds.java,25,* @see StepNormalizer
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerBounds.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerBounds.java,26,* @see StepNormalizerMode
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerBounds.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerBounds.java,27,* @version $Id$
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerBounds.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerBounds.java,28,* @since 3.0
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerBounds.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerBounds.java,30,public enum StepNormalizerBounds {
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerBounds.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerBounds.java,31,/** Do not include the first and last points. */
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerBounds.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerBounds.java,32,"NEITHER(false, false),"
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerBounds.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerBounds.java,34,"/** Include the first point, but not the last point. */"
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerBounds.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerBounds.java,35,"FIRST(true, false),"
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerBounds.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerBounds.java,37,"/** Include the last point, but not the first point. */"
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerBounds.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerBounds.java,38,"LAST(false, true),"
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerBounds.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerBounds.java,40,/** Include both the first and last points. */
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerBounds.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerBounds.java,41,"BOTH(true, true);"
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerBounds.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerBounds.java,43,/** Whether the first point should be passed to the underlying fixed
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerBounds.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerBounds.java,44,* step size step handler.
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerBounds.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerBounds.java,46,private final boolean first;
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerBounds.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerBounds.java,48,/** Whether the last point should be passed to the underlying fixed
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerBounds.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerBounds.java,49,* step size step handler.
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerBounds.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerBounds.java,51,private final boolean last;
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerBounds.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerBounds.java,54,* Simple constructor.
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerBounds.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerBounds.java,55,* @param first Whether the first point should be passed to the
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerBounds.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerBounds.java,56,* underlying fixed step size step handler.
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerBounds.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerBounds.java,57,* @param last Whether the last point should be passed to the
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerBounds.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerBounds.java,58,* underlying fixed step size step handler.
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerBounds.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerBounds.java,60,"private StepNormalizerBounds(final boolean first, final boolean last) {"
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerBounds.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerBounds.java,61,this.first = first;
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerBounds.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerBounds.java,62,this.last = last;
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerBounds.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerBounds.java,66,* Returns a value indicating whether the first point should be passed
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerBounds.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerBounds.java,67,* to the underlying fixed step size step handler.
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerBounds.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerBounds.java,68,* @return value indicating whether the first point should be passed
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerBounds.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerBounds.java,69,* to the underlying fixed step size step handler.
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerBounds.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerBounds.java,71,public boolean firstIncluded() {
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerBounds.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerBounds.java,72,return first;
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerBounds.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerBounds.java,76,* Returns a value indicating whether the last point should be passed
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerBounds.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerBounds.java,77,* to the underlying fixed step size step handler.
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerBounds.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerBounds.java,78,* @return value indicating whether the last point should be passed
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerBounds.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerBounds.java,79,* to the underlying fixed step size step handler.
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerBounds.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerBounds.java,81,public boolean lastIncluded() {
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerBounds.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerBounds.java,82,return last;
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerMode.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerMode.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerMode.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerMode.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerMode.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerMode.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerMode.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerMode.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerMode.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerMode.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerMode.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerMode.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerMode.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerMode.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerMode.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerMode.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerMode.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerMode.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerMode.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerMode.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerMode.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerMode.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerMode.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerMode.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerMode.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerMode.java,18,package org.apache.commons.math.ode.sampling;
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerMode.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerMode.java,21,/** {@link StepNormalizer Step normalizer} modes. Determines how the step size
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerMode.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerMode.java,22,* is interpreted.
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerMode.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerMode.java,23,* @see StepNormalizer
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerMode.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerMode.java,24,* @see StepNormalizerBounds
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerMode.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerMode.java,25,* @version $Id$
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerMode.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerMode.java,26,* @since 3.0
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerMode.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerMode.java,28,public enum StepNormalizerMode {
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerMode.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerMode.java,30,"* Steps are fixed increments of the start value. In other words, they"
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerMode.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerMode.java,31,* are relative to the start value.
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerMode.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerMode.java,33,"* <p>If the integration start time is t0, then the points handled by"
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerMode.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerMode.java,34,* the underlying fixed step size step handler are t0 (depending on
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerMode.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerMode.java,35,"* the {@link StepNormalizerBounds bounds settings}), t0+h, t0+2h, ...</p>"
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerMode.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerMode.java,37,* <p>If the integration range is an integer multiple of the step size
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerMode.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerMode.java,38,"* (h), then the last point handled will be the end point of the"
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerMode.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerMode.java,39,"* integration (tend). If not, the last point may be the end point"
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerMode.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerMode.java,40,"* tend, or it may be a point belonging to the interval [tend - h ;"
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerMode.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerMode.java,41,"* tend], depending on the {@link StepNormalizerBounds bounds settings}."
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerMode.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerMode.java,42,* </p>
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerMode.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerMode.java,44,* @see StepNormalizer
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerMode.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerMode.java,45,* @see StepNormalizerBounds
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerMode.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerMode.java,47,"INCREMENT,"
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerMode.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerMode.java,49,"/** Steps are multiples of a fixed value. In other words, they are"
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerMode.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerMode.java,50,* relative to the first multiple of the step size that is encountered
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerMode.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerMode.java,51,* after the start value.
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerMode.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerMode.java,53,"* <p>If the integration start time is t0, and the first multiple of"
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerMode.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerMode.java,54,"* the fixed step size that is encountered is t1, then the points"
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerMode.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerMode.java,55,* handled by the underlying fixed step size step handler are t0
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerMode.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerMode.java,56,"* (depending on the {@link StepNormalizerBounds bounds settings}), t1,"
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerMode.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerMode.java,57,"* t1+h, t1+2h, ...</p>"
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerMode.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerMode.java,59,* <p>If the end point of the integration range (tend) is an integer
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerMode.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerMode.java,60,"* multiple of the step size (h) added to t1, then the last point"
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerMode.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerMode.java,61,"* handled will be the end point of the integration (tend). If not,"
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerMode.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerMode.java,62,"* the last point may be the end point tend, or it may be a point"
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerMode.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerMode.java,63,"* belonging to the interval [tend - h ; tend], depending on the"
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerMode.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerMode.java,64,* {@link StepNormalizerBounds bounds settings}.</p>
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerMode.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerMode.java,66,* @see StepNormalizer
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerMode.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerMode.java,67,* @see StepNormalizerBounds
True,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerMode.java,src/main/java/org/apache/commons/math/ode/sampling/StepNormalizerMode.java,69,MULTIPLES;
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputOverlapTest.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputOverlapTest.java,1,package org.apache.commons.math.ode.sampling;
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputOverlapTest.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputOverlapTest.java,3,"/** Step normalizer output tests, for problems where the first and last points"
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputOverlapTest.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputOverlapTest.java,4,* are overlap fixed points.
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputOverlapTest.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputOverlapTest.java,6,public class StepNormalizerOutputOverlapTest extends StepNormalizerOutputTestBase {
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputOverlapTest.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputOverlapTest.java,7,@Override
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputOverlapTest.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputOverlapTest.java,8,protected double getStart() {
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputOverlapTest.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputOverlapTest.java,9,return 0.0;
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputOverlapTest.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputOverlapTest.java,12,@Override
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputOverlapTest.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputOverlapTest.java,13,protected double getEnd() {
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputOverlapTest.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputOverlapTest.java,14,return 10.0;
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputOverlapTest.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputOverlapTest.java,17,@Override
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputOverlapTest.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputOverlapTest.java,18,protected double[] getExpInc() {
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputOverlapTest.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputOverlapTest.java,19,"return new double[] { 0.0, 0.5, 1.0, 1.5, 2.0, 2.5, 3.0, 3.5, 4.0,"
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputOverlapTest.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputOverlapTest.java,20,"4.5, 5.0, 5.5, 6.0, 6.5, 7.0, 7.5, 8.0, 8.5,"
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputOverlapTest.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputOverlapTest.java,21,"9.0, 9.5, 10.0 };"
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputOverlapTest.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputOverlapTest.java,24,@Override
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputOverlapTest.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputOverlapTest.java,25,protected double[] getExpIncRev() {
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputOverlapTest.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputOverlapTest.java,26,"return new double[] { 10.0, 9.5, 9.0, 8.5, 8.0, 7.5, 7.0, 6.5,"
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputOverlapTest.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputOverlapTest.java,27,"6.0, 5.5, 5.0, 4.5, 4.0, 3.5, 3.0, 2.5,"
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputOverlapTest.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputOverlapTest.java,28,"2.0, 1.5, 1.0, 0.5, 0.0 };"
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputOverlapTest.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputOverlapTest.java,31,@Override
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputOverlapTest.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputOverlapTest.java,32,protected double[] getExpMul() {
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputOverlapTest.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputOverlapTest.java,33,"return new double[] { 0.0, 0.5, 1.0, 1.5, 2.0, 2.5, 3.0, 3.5, 4.0,"
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputOverlapTest.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputOverlapTest.java,34,"4.5, 5.0, 5.5, 6.0, 6.5, 7.0, 7.5, 8.0, 8.5,"
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputOverlapTest.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputOverlapTest.java,35,"9.0, 9.5, 10.0 };"
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputOverlapTest.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputOverlapTest.java,38,@Override
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputOverlapTest.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputOverlapTest.java,39,protected double[] getExpMulRev() {
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputOverlapTest.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputOverlapTest.java,40,"return new double[] { 10.0, 9.5, 9.0, 8.5, 8.0, 7.5, 7.0, 6.5,"
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputOverlapTest.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputOverlapTest.java,41,"6.0, 5.5, 5.0, 4.5, 4.0, 3.5, 3.0, 2.5,"
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputOverlapTest.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputOverlapTest.java,42,"2.0, 1.5, 1.0, 0.5, 0.0 };"
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputOverlapTest.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputOverlapTest.java,45,@Override
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputOverlapTest.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputOverlapTest.java,46,protected int[][] getO() {
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputOverlapTest.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputOverlapTest.java,47,"return new int[][] {{1, 0}, {1, 0}, {0, 0}, {0, 0},"
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputOverlapTest.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputOverlapTest.java,48,"{1, 0}, {1, 0}, {0, 0}, {0, 0},"
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputOverlapTest.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputOverlapTest.java,49,"{1, 0}, {1, 0}, {0, 0}, {0, 0},"
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputOverlapTest.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputOverlapTest.java,50,"{1, 0}, {1, 0}, {0, 0}, {0, 0}};"
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTest.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTest.java,1,package org.apache.commons.math.ode.sampling;
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTest.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTest.java,3,"/** Step normalizer output tests, for problems where the first and last points"
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTest.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTest.java,4,* are not fixed points.
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTest.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTest.java,6,public class StepNormalizerOutputTest extends StepNormalizerOutputTestBase {
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTest.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTest.java,7,@Override
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTest.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTest.java,8,protected double getStart() {
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTest.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTest.java,9,return 0.3;
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTest.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTest.java,12,@Override
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTest.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTest.java,13,protected double getEnd() {
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTest.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTest.java,14,return 10.1;
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTest.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTest.java,17,@Override
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTest.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTest.java,18,protected double[] getExpInc() {
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTest.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTest.java,19,"return new double[] { 0.3, 0.8, 1.3, 1.8, 2.3, 2.8, 3.3, 3.8, 4.3,"
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTest.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTest.java,20,"4.8, 5.3, 5.8, 6.3, 6.8, 7.3, 7.8, 8.3, 8.8,"
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTest.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTest.java,21,"9.3, 9.8, 10.1 };"
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTest.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTest.java,24,@Override
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTest.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTest.java,25,protected double[] getExpIncRev() {
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTest.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTest.java,26,"return new double[] { 10.1, 9.6, 9.1, 8.6, 8.1, 7.6, 7.1, 6.6,"
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTest.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTest.java,27,"6.1, 5.6, 5.1, 4.6, 4.1, 3.6, 3.1, 2.6,"
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTest.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTest.java,28,"2.1, 1.6, 1.1, 0.6, 0.3 };"
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTest.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTest.java,31,@Override
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTest.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTest.java,32,protected double[] getExpMul() {
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTest.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTest.java,33,"return new double[] { 0.3, 0.5, 1.0, 1.5, 2.0, 2.5, 3.0, 3.5, 4.0,"
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTest.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTest.java,34,"4.5, 5.0, 5.5, 6.0, 6.5, 7.0, 7.5, 8.0, 8.5,"
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTest.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTest.java,35,"9.0, 9.5, 10.0, 10.1 };"
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTest.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTest.java,38,@Override
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTest.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTest.java,39,protected double[] getExpMulRev() {
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTest.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTest.java,40,"return new double[] { 10.1, 10.0, 9.5, 9.0, 8.5, 8.0, 7.5, 7.0,"
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTest.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTest.java,41,"6.5, 6.0, 5.5, 5.0, 4.5, 4.0, 3.5, 3.0, 2.5,"
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTest.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTest.java,42,"2.0, 1.5, 1.0, 0.5, 0.3 };"
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTest.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTest.java,45,@Override
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTest.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTest.java,46,protected int[][] getO() {
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTest.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTest.java,47,"return new int[][] {{1, 1}, {1, 1}, {0, 1}, {0, 1},"
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTest.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTest.java,48,"{1, 0}, {1, 0}, {0, 0}, {0, 0},"
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTest.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTest.java,49,"{1, 1}, {1, 1}, {0, 1}, {0, 1},"
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTest.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTest.java,50,"{1, 0}, {1, 0}, {0, 0}, {0, 0}};"
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,1,package org.apache.commons.math.ode.sampling;
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,3,import static org.junit.Assert.assertArrayEquals;
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,5,import java.util.ArrayList;
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,6,import java.util.List;
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,8,import org.apache.commons.math.exception.MathUserException;
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,9,import org.apache.commons.math.ode.FirstOrderDifferentialEquations;
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,10,import org.apache.commons.math.ode.FirstOrderIntegrator;
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,11,import org.apache.commons.math.ode.IntegratorException;
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,12,import org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator;
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,13,import org.junit.Test;
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,15,/** Base class for step normalizer output tests. */
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,16,public abstract class StepNormalizerOutputTestBase
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,17,"implements FirstOrderDifferentialEquations, FixedStepHandler"
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,19,/** The normalized output time values. */
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,20,private List<Double> output;
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,23,* Returns the start time.
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,24,* @return the start time
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,26,protected abstract double getStart();
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,29,* Returns the end time.
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,30,* @return the end time
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,32,protected abstract double getEnd();
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,35,* Returns the expected normalized output time values for increment mode.
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,36,* @return the expected normalized output time values for increment mode
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,38,protected abstract double[] getExpInc();
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,41,* Returns the expected reversed normalized output time values for
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,42,* increment mode.
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,43,* @return the expected reversed normalized output time values for
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,44,* increment mode
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,46,protected abstract double[] getExpIncRev();
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,49,* Returns the expected normalized output time values for multiples mode.
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,50,* @return the expected normalized output time values for multiples mode
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,52,protected abstract double[] getExpMul();
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,55,* Returns the expected reversed normalized output time values for
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,56,* multiples mode.
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,57,* @return the expected reversed normalized output time values for
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,58,* multiples mode
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,60,protected abstract double[] getExpMulRev();
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,63,"* Returns the offsets for the unit tests below, in the order they are"
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,64,"* given below. For each test, the left and right offsets are returned."
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,65,"* @return the offsets for the unit tests below, in the order they are"
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,66,* given below
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,68,protected abstract int[][] getO();
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,71,"* Get the array, given left and right offsets."
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,72,* @param a the input array
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,73,* @param offsetL the left side offset
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,74,* @param offsetR the right side offset
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,75,* @return the modified array
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,77,"private double[] getArray(double[] a, int offsetL, int offsetR) {"
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,78,double[] copy = new double[a.length - offsetR - offsetL];
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,79,"System.arraycopy(a, offsetL, copy, 0, copy.length);"
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,80,return copy;
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,83,@Test
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,84,"public void testIncNeither() throws MathUserException, IntegratorException {"
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,85,"double[] exp = getArray(getExpInc(), getO()[0][0], getO()[0][1]);"
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,86,"doTest(StepNormalizerMode.INCREMENT, StepNormalizerBounds.NEITHER, exp, false);"
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,89,@Test
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,90,"public void testIncNeitherRev() throws MathUserException, IntegratorException {"
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,91,"double[] exp = getArray(getExpIncRev(), getO()[1][0], getO()[1][1]);"
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,92,"doTest(StepNormalizerMode.INCREMENT, StepNormalizerBounds.NEITHER, exp, true);"
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,95,@Test
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,96,"public void testIncFirst() throws MathUserException, IntegratorException {"
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,97,"double[] exp = getArray(getExpInc(), getO()[2][0], getO()[2][1]);"
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,98,"doTest(StepNormalizerMode.INCREMENT, StepNormalizerBounds.FIRST, exp, false);"
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,101,@Test
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,102,"public void testIncFirstRev() throws MathUserException, IntegratorException {"
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,103,"double[] exp = getArray(getExpIncRev(), getO()[3][0], getO()[3][1]);"
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,104,"doTest(StepNormalizerMode.INCREMENT, StepNormalizerBounds.FIRST, exp, true);"
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,107,@Test
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,108,"public void testIncLast() throws MathUserException, IntegratorException {"
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,109,"double[] exp = getArray(getExpInc(), getO()[4][0], getO()[4][1]);"
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,110,"doTest(StepNormalizerMode.INCREMENT, StepNormalizerBounds.LAST, exp, false);"
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,113,@Test
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,114,"public void testIncLastRev() throws MathUserException, IntegratorException {"
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,115,"double[] exp = getArray(getExpIncRev(), getO()[5][0], getO()[5][1]);"
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,116,"doTest(StepNormalizerMode.INCREMENT, StepNormalizerBounds.LAST, exp, true);"
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,119,@Test
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,120,"public void testIncBoth() throws MathUserException, IntegratorException {"
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,121,"double[] exp = getArray(getExpInc(), getO()[6][0], getO()[6][1]);"
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,122,"doTest(StepNormalizerMode.INCREMENT, StepNormalizerBounds.BOTH, exp, false);"
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,125,@Test
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,126,"public void testIncBothRev() throws MathUserException, IntegratorException {"
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,127,"double[] exp = getArray(getExpIncRev(), getO()[7][0], getO()[7][1]);"
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,128,"doTest(StepNormalizerMode.INCREMENT, StepNormalizerBounds.BOTH, exp, true);"
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,131,@Test
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,132,"public void testMulNeither() throws MathUserException, IntegratorException {"
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,133,"double[] exp = getArray(getExpMul(), getO()[8][0], getO()[8][1]);"
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,134,"doTest(StepNormalizerMode.MULTIPLES, StepNormalizerBounds.NEITHER, exp, false);"
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,137,@Test
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,138,"public void testMulNeitherRev() throws MathUserException, IntegratorException {"
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,139,"double[] exp = getArray(getExpMulRev(), getO()[9][0], getO()[9][1]);"
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,140,"doTest(StepNormalizerMode.MULTIPLES, StepNormalizerBounds.NEITHER, exp, true);"
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,143,@Test
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,144,"public void testMulFirst() throws MathUserException, IntegratorException {"
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,145,"double[] exp = getArray(getExpMul(), getO()[10][0], getO()[10][1]);"
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,146,"doTest(StepNormalizerMode.MULTIPLES, StepNormalizerBounds.FIRST, exp, false);"
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,149,@Test
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,150,"public void testMulFirstRev() throws MathUserException, IntegratorException {"
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,151,"double[] exp = getArray(getExpMulRev(), getO()[11][0], getO()[11][1]);"
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,152,"doTest(StepNormalizerMode.MULTIPLES, StepNormalizerBounds.FIRST, exp, true);"
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,155,@Test
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,156,"public void testMulLast() throws MathUserException, IntegratorException {"
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,157,"double[] exp = getArray(getExpMul(), getO()[12][0], getO()[12][1]);"
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,158,"doTest(StepNormalizerMode.MULTIPLES, StepNormalizerBounds.LAST, exp, false);"
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,161,@Test
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,162,"public void testMulLastRev() throws MathUserException, IntegratorException {"
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,163,"double[] exp = getArray(getExpMulRev(), getO()[13][0], getO()[13][1]);"
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,164,"doTest(StepNormalizerMode.MULTIPLES, StepNormalizerBounds.LAST, exp, true);"
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,167,@Test
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,168,"public void testMulBoth() throws MathUserException, IntegratorException {"
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,169,"double[] exp = getArray(getExpMul(), getO()[14][0], getO()[14][1]);"
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,170,"doTest(StepNormalizerMode.MULTIPLES, StepNormalizerBounds.BOTH, exp, false);"
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,173,@Test
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,174,"public void testMulBothRev() throws MathUserException, IntegratorException {"
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,175,"double[] exp = getArray(getExpMulRev(), getO()[15][0], getO()[15][1]);"
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,176,"doTest(StepNormalizerMode.MULTIPLES, StepNormalizerBounds.BOTH, exp, true);"
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,180,"* The actual step normalizer output test code, shared by all the unit"
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,181,* tests.
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,183,* @param mode the step normalizer mode to use
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,184,* @param bounds the step normalizer bounds setting to use
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,185,* @param expected the expected output (normalized time points)
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,186,* @param reverse whether to reverse the integration direction
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,188,"private void doTest(StepNormalizerMode mode, StepNormalizerBounds bounds,"
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,189,"double[] expected, boolean reverse)"
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,190,"throws MathUserException, IntegratorException"
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,192,// Forward test.
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,193,FirstOrderIntegrator integ = new GraggBulirschStoerIntegrator(
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,194,"1e-8, 1.0, 1e-5, 1e-5);"
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,195,"integ.addStepHandler(new StepNormalizer(0.5, this, mode, bounds));"
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,196,double[] y   = {0.0};
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,197,double start = reverse ? getEnd()   : getStart();
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,198,double end   = reverse ? getStart() : getEnd();
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,199,output       = new ArrayList<Double>();
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,200,"integ.integrate(this, start, y, end, y);"
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,201,double[] actual = new double[output.size()];
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,202,for(int i = 0; i < actual.length; i++) {
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,203,actual[i] = output.get(i);
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,205,"assertArrayEquals(expected, actual, 1e-5);"
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,208,/** {@inheritDoc} */
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,209,public int getDimension() {
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,210,return 1;
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,213,/** {@inheritDoc} */
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,214,"public void computeDerivatives(double t, double[] y, double[] yDot)"
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,215,throws MathUserException {
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,216,yDot[0] = y[0];
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,219,/** {@inheritDoc} */
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,220,"public void handleStep(double t, double[] y, double[] yDot, boolean isLast)"
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,221,throws MathUserException {
True,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java,222,output.add(t);

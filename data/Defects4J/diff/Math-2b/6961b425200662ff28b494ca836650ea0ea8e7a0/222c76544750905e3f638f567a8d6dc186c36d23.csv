is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,19,import org.apache.commons.math.distribution.NormalDistribution;
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,24,import org.apache.commons.math.stat.ranking.NaNStrategy;
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,25,import org.apache.commons.math.stat.ranking.NaturalRanking;
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,26,import org.apache.commons.math.stat.ranking.TiesStrategy;
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,27,import org.apache.commons.math.util.FastMath;
False,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,25, An interface for Mann-Whitney U test (also called Wilcoxon rank-sum test).
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,30,* An implementation of the Mann-Whitney U test (also called Wilcoxon rank-sum test).
False,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,29,ublic interface MannWhitneyUTest {
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,34,public class MannWhitneyUTest {
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,36,/** Ranking algorithm. */
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,37,private NaturalRanking naturalRanking;
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,40,* Create a test instance using where NaN's are left in place and ties get
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,41,* the average of applicable ranks. Use this unless you are very sure of
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,42,* what you are doing.
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,44,public MannWhitneyUTest() {
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,45,"naturalRanking = new NaturalRanking(NaNStrategy.FIXED,"
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,46,TiesStrategy.AVERAGE);
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,50,* Create a test instance using the given strategies for NaN's and ties.
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,51,* Only use this if you are sure of what you are doing.
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,53,* @param nanStrategy
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,54,*            specifies the strategy that should be used for Double.NaN's
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,55,* @param tiesStrategy
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,56,*            specifies the strategy that should be used for ties
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,58,"public MannWhitneyUTest(final NaNStrategy nanStrategy,"
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,59,final TiesStrategy tiesStrategy) {
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,60,"naturalRanking = new NaturalRanking(nanStrategy, tiesStrategy);"
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,64,* Ensures that the provided arrays fulfills the assumptions.
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,66,* @param x first sample
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,67,* @param y second sample
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,68,* @throws NullArgumentException if {@code x} or {@code y} are {@code null}.
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,69,* @throws NoDataException if {@code x} or {@code y} are zero-length.
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,71,"private void ensureDataConformance(final double[] x, final double[] y)"
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,72,"throws NullArgumentException, NoDataException {"
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,74,if (x == null ||
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,75,y == null) {
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,76,throw new NullArgumentException();
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,78,if (x.length == 0 ||
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,79,y.length == 0) {
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,80,throw new NoDataException();
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,84,/** Concatenate the samples into one array.
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,85,* @param x first sample
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,86,* @param y second sample
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,87,* @return concatenated array
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,89,"private double[] concatenateSamples(final double[] x, final double[] y) {"
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,90,final double[] z = new double[x.length + y.length];
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,92,"System.arraycopy(x, 0, z, 0, x.length);"
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,93,"System.arraycopy(y, 0, z, x.length, y.length);"
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,95,return z;
False,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,59,"ouble mannWhitneyU(final double[] x, final double[] y)"
False,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,60,"hrows NullArgumentException, NoDataException;"
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,126,"public double mannWhitneyU(final double[] x, final double[] y)"
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,127,"throws NullArgumentException, NoDataException {"
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,129,"ensureDataConformance(x, y);"
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,131,"final double[] z = concatenateSamples(x, y);"
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,132,final double[] ranks = naturalRanking.rank(z);
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,134,double sumRankX = 0;
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,137,* The ranks for x is in the first x.length entries in ranks because x
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,138,* is in the first x.length entries in z
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,140,for (int i = 0; i < x.length; ++i) {
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,141,sumRankX += ranks[i];
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,145,"* U1 = R1 - (n1 * (n1 + 1)) / 2 where R1 is sum of ranks for sample 1,"
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,146,"* e.g. x, n1 is the number of observations in sample 1."
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,148,final double U1 = sumRankX - (x.length * (x.length + 1)) / 2;
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,151,* It can be shown that U1 + U2 = n1 * n2
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,153,final double U2 = x.length * y.length - U1;
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,155,"return FastMath.max(U1, U2);"
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,159,* @param Umin smallest Mann-Whitney U value
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,160,* @param n1 number of subjects in first sample
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,161,* @param n2 number of subjects in second sample
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,162,* @return two-sided asymptotic p-value
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,163,* @throws ConvergenceException if the p-value can not be computed
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,164,* due to a convergence error
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,165,* @throws MaxCountExceededException if the maximum number of
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,166,* iterations is exceeded
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,168,"private double calculateAsymptoticPValue(final double Umin,"
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,169,"final int n1,"
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,170,final int n2)
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,171,"throws ConvergenceException, MaxCountExceededException {"
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,173,final int n1n2prod = n1 * n2;
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,175,// http://en.wikipedia.org/wiki/Mann%E2%80%93Whitney_U#Normal_approximation
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,176,final double EU = (double) n1n2prod / 2.0;
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,177,final double VarU = (double) (n1n2prod * (n1 + n2 + 1)) / 12.0;
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,179,final double z = (Umin - EU) / FastMath.sqrt(VarU);
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,181,"final NormalDistribution standardNormal = new NormalDistribution(0, 1);"
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,183,return 2 * standardNormal.cumulativeProbability(z);
False,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,79, </p>
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,203,* </p><p>
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,204,* Ties give rise to biased variance at the moment. See e.g. <a
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,205,"* href=""http://mlsc.lboro.ac.uk/resources/statistics/Mannwhitney.pdf"""
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,206,* >http://mlsc.lboro.ac.uk/resources/statistics/Mannwhitney.pdf</a>.</p>
False,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,91,"ouble mannWhitneyUTest(final double[] x, final double[] y)"
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,218,"public double mannWhitneyUTest(final double[] x, final double[] y)"
False,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,93,"onvergenceException, MaxCountExceededException;"
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,220,"ConvergenceException, MaxCountExceededException {"
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,222,"ensureDataConformance(x, y);"
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,224,"final double Umax = mannWhitneyU(x, y);"
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,227,* It can be shown that U1 + U2 = n1 * n2
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,229,final double Umin = x.length * y.length - Umax;
True,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTest.java,231,"return calculateAsymptoticPValue(Umin, x.length, y.length);"
False,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,4, this work for additional information regarding copyright ownership.
False,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,7, the License.  You may obtain a copy of the License at
False,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,14, See the License for the specific language governing permissions and
False,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,15, limitations under the License.
False,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,17,ackage org.apache.commons.math.stat.inference;
False,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,19,mport org.apache.commons.math.distribution.NormalDistribution;
False,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,20,mport org.apache.commons.math.exception.ConvergenceException;
False,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,21,mport org.apache.commons.math.exception.MaxCountExceededException;
False,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,22,mport org.apache.commons.math.exception.NoDataException;
False,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,23,mport org.apache.commons.math.exception.NullArgumentException;
False,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,24,mport org.apache.commons.math.stat.ranking.NaNStrategy;
False,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,25,mport org.apache.commons.math.stat.ranking.NaturalRanking;
False,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,26,mport org.apache.commons.math.stat.ranking.TiesStrategy;
False,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,27,mport org.apache.commons.math.util.FastMath;
False,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,30, An implementation of the Mann-Whitney U test (also called Wilcoxon rank-sum
False,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,31, test).
False,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,33, @version $Id$
False,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,35,ublic class MannWhitneyUTestImpl implements MannWhitneyUTest {
False,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,37,** Ranking algorithm. */
False,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,38,rivate NaturalRanking naturalRanking;
False,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,41, Create a test instance using where NaN's are left in place and ties get
False,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,42, the average of applicable ranks. Use this unless you are very sure of
False,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,43, what you are doing.
False,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,45,ublic MannWhitneyUTestImpl() {
False,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,46,"aturalRanking = new NaturalRanking(NaNStrategy.FIXED,"
False,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,47,iesStrategy.AVERAGE);
False,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,51, Create a test instance using the given strategies for NaN's and ties.
False,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,52, Only use this if you are sure of what you are doing.
False,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,54, @param nanStrategy
False,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,55,            specifies the strategy that should be used for Double.NaN's
False,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,56, @param tiesStrategy
False,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,57,            specifies the strategy that should be used for ties
False,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,59,"ublic MannWhitneyUTestImpl(final NaNStrategy nanStrategy,"
False,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,60,inal TiesStrategy tiesStrategy) {
False,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,61,"aturalRanking = new NaturalRanking(nanStrategy, tiesStrategy);"
False,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,65, Ensures that the provided arrays fulfills the assumptions.
False,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,67, @param x first sample
False,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,68, @param y second sample
False,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,69, @throws NullArgumentException if {@code x} or {@code y} are {@code null}.
False,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,70, @throws NoDataException if {@code x} or {@code y} are zero-length.
False,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,72,"rivate void ensureDataConformance(final double[] x, final double[] y)"
False,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,73,"hrows NullArgumentException, NoDataException {"
False,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,75,f (x == null ||
False,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,76, == null) {
False,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,77,hrow new NullArgumentException();
False,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,79,f (x.length == 0 ||
False,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,80,.length == 0) {
False,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,81,hrow new NoDataException();
False,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,85,** Concatenate the samples into one array.
False,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,86, @param x first sample
False,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,87, @param y second sample
False,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,88, @return concatenated array
False,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,90,"rivate double[] concatenateSamples(final double[] x, final double[] y) {"
False,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,91,inal double[] z = new double[x.length + y.length];
False,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,93,"ystem.arraycopy(x, 0, z, 0, x.length);"
False,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,94,"ystem.arraycopy(y, 0, z, x.length, y.length);"
False,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,96,eturn z;
False,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,99,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,100,"ublic double mannWhitneyU(final double[] x, final double[] y)"
False,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,101,"hrows NullArgumentException, NoDataException {"
False,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,103,"nsureDataConformance(x, y);"
False,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,105,"inal double[] z = concatenateSamples(x, y);"
False,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,106,inal double[] ranks = naturalRanking.rank(z);
False,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,108,ouble sumRankX = 0;
False,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,111, The ranks for x is in the first x.length entries in ranks because x
False,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,112, is in the first x.length entries in z
False,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,114,or (int i = 0; i < x.length; ++i) {
False,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,115,umRankX += ranks[i];
False,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,119," U1 = R1 - (n1 * (n1 + 1)) / 2 where R1 is sum of ranks for sample 1,"
False,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,120," e.g. x, n1 is the number of observations in sample 1."
False,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,122,inal double U1 = sumRankX - (x.length * (x.length + 1)) / 2;
False,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,125, It can be shown that U1 + U2 = n1 * n2
False,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,127,inal double U2 = x.length * y.length - U1;
False,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,129,"eturn FastMath.max(U1, U2);"
False,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,133, @param Umin smallest Mann-Whitney U value
False,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,134, @param n1 number of subjects in first sample
False,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,135, @param n2 number of subjects in second sample
False,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,136, @return two-sided asymptotic p-value
False,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,137, @throws ConvergenceException if the p-value can not be computed
False,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,138, due to a convergence error
False,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,139, @throws MaxCountExceededException if the maximum number of
False,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,140, iterations is exceeded
False,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,142,"rivate double calculateAsymptoticPValue(final double Umin,"
False,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,143,"inal int n1,"
False,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,144,inal int n2)
False,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,145,"hrows ConvergenceException, MaxCountExceededException {"
False,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,147,inal int n1n2prod = n1 * n2;
False,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,149,/ http://en.wikipedia.org/wiki/Mann%E2%80%93Whitney_U#Normal_approximation
False,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,150,inal double EU = (double) n1n2prod / 2.0;
False,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,151,inal double VarU = (double) (n1n2prod * (n1 + n2 + 1)) / 12.0;
False,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,153,inal double z = (Umin - EU) / FastMath.sqrt(VarU);
False,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,155,"inal NormalDistribution standardNormal = new NormalDistribution(0, 1);"
False,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,157,eturn 2 * standardNormal.cumulativeProbability(z);
False,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,161, Ties give rise to biased variance at the moment. See e.g. <a
False,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,162," href=""http://mlsc.lboro.ac.uk/resources/statistics/Mannwhitney.pdf"""
False,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,163, >http://mlsc.lboro.ac.uk/resources/statistics/Mannwhitney.pdf</a>.
False,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,165, {@inheritDoc}
False,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,167,"ublic double mannWhitneyUTest(final double[] x, final double[] y)"
False,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,168,"hrows NullArgumentException, NoDataException,"
False,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,169,"onvergenceException, MaxCountExceededException {"
False,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,171,"nsureDataConformance(x, y);"
False,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,173,"inal double Umax = mannWhitneyU(x, y);"
False,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,176, It can be shown that U1 + U2 = n1 * n2
False,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,178,inal double Umin = x.length * y.length - Umax;
False,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/MannWhitneyUTestImpl.java,180,"eturn calculateAsymptoticPValue(Umin, x.length, y.length);"
True,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,19,import org.apache.commons.math.distribution.FDistribution;
True,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,25,import org.apache.commons.math.exception.util.LocalizedFormats;
True,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,26,import org.apache.commons.math.stat.descriptive.summary.Sum;
True,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,27,import org.apache.commons.math.stat.descriptive.summary.SumOfSquares;
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,28, An interface for one-way ANOVA (analysis of variance).
True,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,32,* Implements one-way ANOVA (analysis of variance) statistics.
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,34, </p>
True,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,38,* </p><p>
True,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,39,* Uses the {@link org.apache.commons.math.distribution.FDistribution
True,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,40,* commons-math F Distribution implementation} to estimate exact p-values.</p>
True,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,41,* <p>This implementation is based on a description at
True,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,42,* http://faculty.vassar.edu/lowry/ch13pt1.html</p>
True,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,43,* <pre>
True,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,44,"* Abbreviations: bg = between groups,"
True,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,45,"*                wg = within groups,"
True,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,46,*                ss = sum squared deviations
True,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,47,* </pre>
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,39,ublic interface OneWayAnova {
True,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,52,public class OneWayAnova {
True,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,55,* Default constructor.
True,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,57,public OneWayAnova() {
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,50, contain at least two values.</li></ul></p>
True,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,69,* contain at least two values.</li></ul></p><p>
True,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,70,* This implementation computes the F statistic using the definitional
True,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,71,* formula<pre>
True,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,72,*   F = msbg/mswg</pre>
True,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,73,* where<pre>
True,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,74,*  msbg = between group mean square
True,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,75,*  mswg = within group mean square</pre>
True,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,76,"* are as defined <a href=""http://faculty.vassar.edu/lowry/ch13pt1.html"">"
True,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,77,* here</a></p>
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,60,ouble anovaFValue(Collection<double[]> categoryData)
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,61,"hrows NullArgumentException, DimensionMismatchException;"
True,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,87,public double anovaFValue(final Collection<double[]> categoryData)
True,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,88,"throws NullArgumentException, DimensionMismatchException {"
True,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,90,AnovaStats a = anovaStats(categoryData);
True,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,91,return a.F;
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,72, contain at least two values.</li></ul></p>
True,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,104,* contain at least two values.</li></ul></p><p>
True,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,105,* This implementation uses the
True,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,106,* {@link org.apache.commons.math.distribution.FDistribution
True,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,107,* commons-math F Distribution implementation} to estimate the exact
True,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,108,"* p-value, using the formula<pre>"
True,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,109,*   p = 1 - cumulativeProbability(F)</pre>
True,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,110,* where <code>F</code> is the F value and <code>cumulativeProbability</code>
True,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,111,* is the commons-math implementation of the F distribution.</p>
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,84,ouble anovaPValue(Collection<double[]> categoryData)
True,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,123,public double anovaPValue(final Collection<double[]> categoryData)
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,86,"onvergenceException, MaxCountExceededException;"
True,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,125,"ConvergenceException, MaxCountExceededException {"
True,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,127,AnovaStats a = anovaStats(categoryData);
True,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,128,"FDistribution fdist = new FDistribution(a.dfbg, a.dfwg);"
True,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,129,return 1.0 - fdist.cumulativeProbability(a.F);
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,99, </li></ul></p>
True,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,144,* </li></ul></p><p>
True,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,145,* This implementation uses the
True,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,146,* {@link org.apache.commons.math.distribution.FDistribution
True,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,147,* commons-math F Distribution implementation} to estimate the exact
True,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,148,"* p-value, using the formula<pre>"
True,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,149,*   p = 1 - cumulativeProbability(F)</pre>
True,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,150,* where <code>F</code> is the F value and <code>cumulativeProbability</code>
True,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,151,* is the commons-math implementation of the F distribution.</p>
True,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,152,* <p>True is returned iff the estimated p-value is less than alpha.</p>
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,114,"oolean anovaTest(Collection<double[]> categoryData, double alpha)"
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,115,"hrows NullArgumentException, DimensionMismatchException, OutOfRangeException,"
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,116,"onvergenceException, MaxCountExceededException;"
True,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,167,"public boolean anovaTest(final Collection<double[]> categoryData,"
True,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,168,final double alpha)
True,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,169,"throws NullArgumentException, DimensionMismatchException,"
True,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,170,"OutOfRangeException, ConvergenceException, MaxCountExceededException {"
True,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,172,if ((alpha <= 0) || (alpha > 0.5)) {
True,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,173,throw new OutOfRangeException(
True,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,174,"LocalizedFormats.OUT_OF_BOUND_SIGNIFICANCE_LEVEL,"
True,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,175,"alpha, 0, 0.5);"
True,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,177,return anovaPValue(categoryData) < alpha;
True,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,182,* This method actually does the calculations (except P-value).
True,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,184,* @param categoryData <code>Collection</code> of <code>double[]</code>
True,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,185,* arrays each containing data for one category
True,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,186,* @return computed AnovaStats
True,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,187,* @throws NullArgumentException if <code>categoryData</code> is <code>null</code>
True,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,188,* @throws DimensionMismatchException if the length of the <code>categoryData</code>
True,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,189,* array is less than 2 or a contained <code>double[]</code> array does not contain
True,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,190,* at least two values
True,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,192,private AnovaStats anovaStats(final Collection<double[]> categoryData)
True,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,193,"throws NullArgumentException, DimensionMismatchException {"
True,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,195,if (categoryData == null) {
True,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,196,throw new NullArgumentException();
True,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,199,// check if we have enough categories
True,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,200,if (categoryData.size() < 2) {
True,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,201,throw new DimensionMismatchException(
True,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,202,"LocalizedFormats.TWO_OR_MORE_CATEGORIES_REQUIRED,"
True,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,203,"categoryData.size(), 2);"
True,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,206,// check if each category has enough data and all is double[]
True,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,207,for (double[] array : categoryData) {
True,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,208,if (array.length <= 1) {
True,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,209,throw new DimensionMismatchException(
True,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,210,"LocalizedFormats.TWO_OR_MORE_VALUES_IN_CATEGORY_REQUIRED,"
True,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,211,"array.length, 2);"
True,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,215,int dfwg = 0;
True,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,216,double sswg = 0;
True,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,217,Sum totsum = new Sum();
True,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,218,SumOfSquares totsumsq = new SumOfSquares();
True,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,219,int totnum = 0;
True,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,221,for (double[] data : categoryData) {
True,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,223,Sum sum = new Sum();
True,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,224,SumOfSquares sumsq = new SumOfSquares();
True,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,225,int num = 0;
True,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,227,for (int i = 0; i < data.length; i++) {
True,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,228,double val = data[i];
True,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,230,// within category
True,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,231,num++;
True,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,232,sum.increment(val);
True,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,233,sumsq.increment(val);
True,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,235,// for all categories
True,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,236,totnum++;
True,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,237,totsum.increment(val);
True,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,238,totsumsq.increment(val);
True,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,240,dfwg += num - 1;
True,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,241,double ss = sumsq.getResult() - sum.getResult() * sum.getResult() / num;
True,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,242,sswg += ss;
True,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,244,double sst = totsumsq.getResult() - totsum.getResult() *
True,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,245,totsum.getResult()/totnum;
True,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,246,double ssbg = sst - sswg;
True,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,247,int dfbg = categoryData.size() - 1;
True,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,248,double msbg = ssbg/dfbg;
True,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,249,double mswg = sswg/dfwg;
True,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,250,double F = msbg/mswg;
True,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,252,"return new AnovaStats(dfbg, dfwg, F);"
True,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,256,"Convenience class to pass dfbg,dfwg,F values around within AnovaImpl."
True,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,257,No get/set methods provided.
True,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,259,private static class AnovaStats {
True,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,261,/** Degrees of freedom in numerator (between groups). */
True,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,262,private final int dfbg;
True,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,264,/** Degrees of freedom in denominator (within groups). */
True,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,265,private final int dfwg;
True,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,267,/** Statistic. */
True,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,268,private final double F;
True,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,271,* Constructor
True,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,272,* @param dfbg degrees of freedom in numerator (between groups)
True,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,273,* @param dfwg degrees of freedom in denominator (within groups)
True,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,274,* @param F statistic
True,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,276,"private AnovaStats(int dfbg, int dfwg, double F) {"
True,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,277,this.dfbg = dfbg;
True,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,278,this.dfwg = dfwg;
True,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,279,this.F = F;
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,4, this work for additional information regarding copyright ownership.
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,7, the License.  You may obtain a copy of the License at
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,14, See the License for the specific language governing permissions and
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,15, limitations under the License.
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,17,ackage org.apache.commons.math.stat.inference;
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,19,mport java.util.Collection;
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,21,mport org.apache.commons.math.distribution.FDistribution;
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,22,mport org.apache.commons.math.exception.ConvergenceException;
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,23,mport org.apache.commons.math.exception.DimensionMismatchException;
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,24,mport org.apache.commons.math.exception.MaxCountExceededException;
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,25,mport org.apache.commons.math.exception.NullArgumentException;
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,26,mport org.apache.commons.math.exception.OutOfRangeException;
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,27,mport org.apache.commons.math.exception.util.LocalizedFormats;
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,28,mport org.apache.commons.math.stat.descriptive.summary.Sum;
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,29,mport org.apache.commons.math.stat.descriptive.summary.SumOfSquares;
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,33, Implements one-way ANOVA statistics defined in the {@link OneWayAnova}
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,34, interface.
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,36, <p>Uses the
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,37, {@link org.apache.commons.math.distribution.FDistribution
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,38,  commons-math F Distribution implementation} to estimate exact p-values.</p>
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,40, <p>This implementation is based on a description at
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,41, http://faculty.vassar.edu/lowry/ch13pt1.html</p>
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,42, <pre>
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,43," Abbreviations: bg = between groups,"
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,44,"                wg = within groups,"
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,45,                ss = sum squared deviations
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,46, </pre>
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,48, @since 1.2
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,49, @version $Id$
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,51,ublic class OneWayAnovaImpl implements OneWayAnova  {
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,54, Default constructor.
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,56,ublic OneWayAnovaImpl() {
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,60, {@inheritDoc}<p>
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,61, This implementation computes the F statistic using the definitional
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,62, formula<pre>
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,63,   F = msbg/mswg</pre>
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,64, where<pre>
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,65,  msbg = between group mean square
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,66,  mswg = within group mean square</pre>
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,67," are as defined <a href=""http://faculty.vassar.edu/lowry/ch13pt1.html"">"
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,68, here</a></p>
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,70,ublic double anovaFValue(final Collection<double[]> categoryData)
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,71,"hrows NullArgumentException, DimensionMismatchException {"
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,73,novaStats a = anovaStats(categoryData);
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,74,eturn a.F;
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,79, {@inheritDoc}<p>
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,80, This implementation uses the
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,81, {@link org.apache.commons.math.distribution.FDistribution
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,82, commons-math F Distribution implementation} to estimate the exact
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,83," p-value, using the formula<pre>"
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,84,   p = 1 - cumulativeProbability(F)</pre>
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,85, where <code>F</code> is the F value and <code>cumulativeProbability</code>
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,86, is the commons-math implementation of the F distribution.</p>
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,88,ublic double anovaPValue(final Collection<double[]> categoryData)
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,89,"hrows NullArgumentException, DimensionMismatchException,"
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,90,"onvergenceException, MaxCountExceededException {"
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,92,novaStats a = anovaStats(categoryData);
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,93,"Distribution fdist = new FDistribution(a.dfbg, a.dfwg);"
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,94,eturn 1.0 - fdist.cumulativeProbability(a.F);
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,99, {@inheritDoc}<p>
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,100, This implementation uses the
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,101, {@link org.apache.commons.math.distribution.FDistribution
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,102, commons-math F Distribution implementation} to estimate the exact
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,103," p-value, using the formula<pre>"
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,104,   p = 1 - cumulativeProbability(F)</pre>
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,105, where <code>F</code> is the F value and <code>cumulativeProbability</code>
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,106, is the commons-math implementation of the F distribution.</p>
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,107, <p>True is returned iff the estimated p-value is less than alpha.</p>
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,109,"ublic boolean anovaTest(final Collection<double[]> categoryData,"
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,110,inal double alpha)
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,111,"hrows NullArgumentException, DimensionMismatchException,"
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,112,"utOfRangeException, ConvergenceException, MaxCountExceededException {"
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,114,f ((alpha <= 0) || (alpha > 0.5)) {
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,115,hrow new OutOfRangeException(
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,116,"ocalizedFormats.OUT_OF_BOUND_SIGNIFICANCE_LEVEL,"
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,117,"lpha, 0, 0.5);"
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,119,eturn anovaPValue(categoryData) < alpha;
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,125, This method actually does the calculations (except P-value).
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,127, @param categoryData <code>Collection</code> of <code>double[]</code>
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,128, arrays each containing data for one category
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,129, @return computed AnovaStats
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,130, @throws NullArgumentException if <code>categoryData</code> is <code>null</code>
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,131, @throws DimensionMismatchException if the length of the <code>categoryData</code>
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,132, array is less than 2 or a contained <code>double[]</code> array does not contain
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,133, at least two values
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,135,rivate AnovaStats anovaStats(final Collection<double[]> categoryData)
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,136,"hrows NullArgumentException, DimensionMismatchException {"
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,138,f (categoryData == null) {
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,139,hrow new NullArgumentException();
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,142,/ check if we have enough categories
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,143,f (categoryData.size() < 2) {
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,144,hrow new DimensionMismatchException(
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,145,"ocalizedFormats.TWO_OR_MORE_CATEGORIES_REQUIRED,"
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,146,"ategoryData.size(), 2);"
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,149,/ check if each category has enough data and all is double[]
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,150,or (double[] array : categoryData) {
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,151,f (array.length <= 1) {
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,152,hrow new DimensionMismatchException(
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,153,"ocalizedFormats.TWO_OR_MORE_VALUES_IN_CATEGORY_REQUIRED,"
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,154,"rray.length, 2);"
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,158,nt dfwg = 0;
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,159,ouble sswg = 0;
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,160,um totsum = new Sum();
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,161,umOfSquares totsumsq = new SumOfSquares();
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,162,nt totnum = 0;
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,164,or (double[] data : categoryData) {
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,166,um sum = new Sum();
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,167,umOfSquares sumsq = new SumOfSquares();
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,168,nt num = 0;
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,170,or (int i = 0; i < data.length; i++) {
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,171,ouble val = data[i];
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,173,/ within category
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,174,um++;
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,175,um.increment(val);
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,176,umsq.increment(val);
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,178,/ for all categories
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,179,otnum++;
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,180,otsum.increment(val);
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,181,otsumsq.increment(val);
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,183,fwg += num - 1;
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,184,ouble ss = sumsq.getResult() - sum.getResult() * sum.getResult() / num;
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,185,swg += ss;
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,187,ouble sst = totsumsq.getResult() - totsum.getResult() *
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,188,otsum.getResult()/totnum;
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,189,ouble ssbg = sst - sswg;
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,190,nt dfbg = categoryData.size() - 1;
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,191,ouble msbg = ssbg/dfbg;
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,192,ouble mswg = sswg/dfwg;
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,193,ouble F = msbg/mswg;
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,195,"eturn new AnovaStats(dfbg, dfwg, F);"
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,199,"onvenience class to pass dfbg,dfwg,F values around within AnovaImpl."
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,200,o get/set methods provided.
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,202,rivate static class AnovaStats {
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,204,** Degrees of freedom in numerator (between groups). */
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,205,rivate final int dfbg;
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,207,** Degrees of freedom in denominator (within groups). */
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,208,rivate final int dfwg;
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,210,** Statistic. */
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,211,rivate final double F;
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,214, Constructor
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,215, @param dfbg degrees of freedom in numerator (between groups)
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,216, @param dfwg degrees of freedom in denominator (within groups)
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,217, @param F statistic
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,219,"rivate AnovaStats(int dfbg, int dfwg, double F) {"
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,220,his.dfbg = dfbg;
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,221,his.dfwg = dfwg;
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,222,his.F = F;
True,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,21,import org.apache.commons.math.exception.ConvergenceException;
True,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,22,import org.apache.commons.math.exception.DimensionMismatchException;
True,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,23,import org.apache.commons.math.exception.MaxCountExceededException;
True,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,24,import org.apache.commons.math.exception.NullArgumentException;
True,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,25,import org.apache.commons.math.exception.OutOfRangeException;
False,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,32,** Singleton TTest instance using default implementation. */
True,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,37,/** Singleton TTest instance. */
False,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,35,** Singleton ChiSquareTest instance using default implementation. */
True,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,40,/** Singleton ChiSquareTest instance. */
False,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,38,** Singleton ChiSquareTest instance using default implementation. */
True,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,43,/** Singleton ChiSquareTest instance. */
False,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,42,** Singleton OneWayAnova instance using default implementation. */
False,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,43,rivate static final OneWayAnova ONE_WAY_ANANOVA = new OneWayAnovaImpl();
True,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,47,/** Singleton OneWayAnova instance. */
True,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,48,private static final OneWayAnova ONE_WAY_ANANOVA = new OneWayAnova();
True,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,50,/** Singleton MannWhitneyUTest instance using default ranking. */
True,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,51,private static final MannWhitneyUTest MANN_WHITNEY_U_TEST = new MannWhitneyUTest();
True,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,53,/** Singleton WilcoxonSignedRankTest instance. */
True,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,54,private static final WilcoxonSignedRankTest WILCOXON_SIGNED_RANK_TEST =
True,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,55,new WilcoxonSignedRankTest();
False,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,77,"eturn T_TEST. homoscedasticTTest(sample1, sample2, alpha);"
True,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,89,"return T_TEST.homoscedasticTTest(sample1, sample2, alpha);"
False,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,177,"eturn T_TEST. tTest(mu, sampleStats, alpha);"
True,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,189,"return T_TEST.tTest(mu, sampleStats, alpha);"
False,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,210,"eturn T_TEST. tTest(sampleStats1, sampleStats2, alpha);"
True,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,222,"return T_TEST.tTest(sampleStats1, sampleStats2, alpha);"
False,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,260,"eturn CHI_SQUARE_TEST. chiSquareTest(counts, alpha);"
True,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,272,"return CHI_SQUARE_TEST.chiSquareTest(counts, alpha);"
False,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,308,ublic static double oneWayAnovaFValue(Collection<double[]> categoryData)
False,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,309,"hrows IllegalArgumentException, MathException {"
True,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,320,public static double oneWayAnovaFValue(final Collection<double[]> categoryData)
True,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,321,"throws NullArgumentException, DimensionMismatchException {"
False,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,318,ublic static double oneWayAnovaPValue(Collection<double[]> categoryData)
False,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,319,"hrows IllegalArgumentException, MathException {"
True,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,330,public static double oneWayAnovaPValue(final Collection<double[]> categoryData)
True,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,331,"throws NullArgumentException, DimensionMismatchException,"
True,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,332,"ConvergenceException, MaxCountExceededException {"
False,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,328,"ublic static boolean oneWayAnovaTest(Collection<double[]> categoryData, double alpha)"
False,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,329,"hrows IllegalArgumentException, MathException {"
True,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,341,"public static boolean oneWayAnovaTest(final Collection<double[]> categoryData,"
True,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,342,final double alpha)
True,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,343,"throws NullArgumentException, DimensionMismatchException,"
True,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,344,"OutOfRangeException, ConvergenceException, MaxCountExceededException {"
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,19,import org.apache.commons.math.distribution.NormalDistribution;
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,26,import org.apache.commons.math.stat.ranking.NaNStrategy;
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,27,import org.apache.commons.math.stat.ranking.NaturalRanking;
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,28,import org.apache.commons.math.stat.ranking.TiesStrategy;
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,29,import org.apache.commons.math.util.FastMath;
False,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,27, An interface for Wilcoxon signed-rank test.
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,32,* An implementation of the Wilcoxon signed-rank test.
False,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,31,ublic interface WilcoxonSignedRankTest {
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,36,public class WilcoxonSignedRankTest {
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,38,/** Ranking algorithm. */
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,39,private NaturalRanking naturalRanking;
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,42,* Create a test instance where NaN's are left in place and ties get
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,43,* the average of applicable ranks. Use this unless you are very sure
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,44,* of what you are doing.
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,46,public WilcoxonSignedRankTest() {
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,47,"naturalRanking = new NaturalRanking(NaNStrategy.FIXED,"
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,48,TiesStrategy.AVERAGE);
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,52,* Create a test instance using the given strategies for NaN's and ties.
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,53,* Only use this if you are sure of what you are doing.
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,55,* @param nanStrategy
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,56,*            specifies the strategy that should be used for Double.NaN's
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,57,* @param tiesStrategy
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,58,*            specifies the strategy that should be used for ties
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,60,"public WilcoxonSignedRankTest(final NaNStrategy nanStrategy,"
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,61,final TiesStrategy tiesStrategy) {
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,62,"naturalRanking = new NaturalRanking(nanStrategy, tiesStrategy);"
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,66,* Ensures that the provided arrays fulfills the assumptions.
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,68,* @param x first sample
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,69,* @param y second sample
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,70,* @throws NullArgumentException if {@code x} or {@code y} are {@code null}.
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,71,* @throws NoDataException if {@code x} or {@code y} are zero-length.
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,72,* @throws DimensionMismatchException if {@code x} and {@code y} do not
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,73,* have the same length.
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,75,"private void ensureDataConformance(final double[] x, final double[] y)"
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,76,"throws NullArgumentException, NoDataException, DimensionMismatchException {"
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,78,if (x == null ||
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,79,y == null) {
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,80,throw new NullArgumentException();
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,82,if (x.length == 0 ||
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,83,y.length == 0) {
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,84,throw new NoDataException();
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,86,if (y.length != x.length) {
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,87,"throw new DimensionMismatchException(y.length, x.length);"
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,92,* Calculates y[i] - x[i] for all i
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,94,* @param x first sample
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,95,* @param y second sample
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,96,* @return z = y - x
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,98,"private double[] calculateDifferences(final double[] x, final double[] y) {"
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,100,final double[] z = new double[x.length];
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,102,for (int i = 0; i < x.length; ++i) {
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,103,z[i] = y[i] - x[i];
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,106,return z;
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,110,* Calculates |z[i]| for all i
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,112,* @param z sample
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,113,* @return |z|
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,114,* @throws NullArgumentException if {@code z} is {@code null}
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,115,* @throws NoDataException if {@code z} is zero-length.
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,117,private double[] calculateAbsoluteDifferences(final double[] z)
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,118,"throws NullArgumentException, NoDataException {"
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,120,if (z == null) {
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,121,throw new NullArgumentException();
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,124,if (z.length == 0) {
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,125,throw new NoDataException();
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,128,final double[] zAbs = new double[z.length];
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,130,for (int i = 0; i < z.length; ++i) {
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,131,zAbs[i] = FastMath.abs(z[i]);
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,134,return zAbs;
False,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,68,"ouble wilcoxonSignedRank(final double[] x, final double[] y)"
False,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,69,"hrows NullArgumentException, NoDataException, DimensionMismatchException;"
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,172,"public double wilcoxonSignedRank(final double[] x, final double[] y)"
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,173,"throws NullArgumentException, NoDataException, DimensionMismatchException {"
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,175,"ensureDataConformance(x, y);"
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,177,// throws IllegalArgumentException if x and y are not correctly
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,178,// specified
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,179,"final double[] z = calculateDifferences(x, y);"
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,180,final double[] zAbs = calculateAbsoluteDifferences(z);
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,182,final double[] ranks = naturalRanking.rank(zAbs);
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,184,double Wplus = 0;
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,186,for (int i = 0; i < z.length; ++i) {
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,187,if (z[i] > 0) {
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,188,Wplus += ranks[i];
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,192,final int N = x.length;
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,193,final double Wminus = (((double) (N * (N + 1))) / 2.0) - Wplus;
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,195,"return FastMath.max(Wplus, Wminus);"
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,199,* Algorithm inspired by
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,200,* http://www.fon.hum.uva.nl/Service/Statistics/Signed_Rank_Algorihms.html#C
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,201,"* by Rob van Son, Institute of Phonetic Sciences & IFOTT,"
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,202,* University of Amsterdam
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,204,* @param Wmax largest Wilcoxon signed rank value
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,205,* @param N number of subjects (corresponding to x.length)
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,206,* @return two-sided exact p-value
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,208,"private double calculateExactPValue(final double Wmax, final int N) {"
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,210,// Total number of outcomes (equal to 2^N but a lot faster)
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,211,final int m = 1 << N;
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,213,int largerRankSums = 0;
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,215,for (int i = 0; i < m; ++i) {
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,216,int rankSum = 0;
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,218,// Generate all possible rank sums
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,219,for (int j = 0; j < N; ++j) {
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,221,// (i >> j) & 1 extract i's j-th bit from the right
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,222,if (((i >> j) & 1) == 1) {
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,223,rankSum += j + 1;
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,227,if (rankSum >= Wmax) {
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,228,++largerRankSums;
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,233,"* largerRankSums / m gives the one-sided p-value, so it's multiplied"
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,234,* with 2 to get the two-sided p-value
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,236,return 2 * ((double) largerRankSums) / ((double) m);
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,240,* @param Wmin smallest Wilcoxon signed rank value
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,241,* @param N number of subjects (corresponding to x.length)
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,242,* @return two-sided asymptotic p-value
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,244,"private double calculateAsymptoticPValue(final double Wmin, final int N) {"
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,246,final double ES = (double) (N * (N + 1)) / 4.0;
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,248,/* Same as (but saves computations):
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,249,* final double VarW = ((double) (N * (N + 1) * (2*N + 1))) / 24;
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,251,final double VarS = ES * ((double) (2 * N + 1) / 6.0);
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,253,// - 0.5 is a continuity correction
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,254,final double z = (Wmin - ES - 0.5) / FastMath.sqrt(VarS);
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,256,"final NormalDistribution standardNormal = new NormalDistribution(0, 1);"
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,258,return 2*standardNormal.cumulativeProbability(z);
False,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,113,"ouble wilcoxonSignedRankTest(final double[] x, final double[] y, boolean exactPValue)"
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,303,"public double wilcoxonSignedRankTest(final double[] x, final double[] y,"
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,304,final boolean exactPValue)
False,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,115,"umberIsTooLargeException, ConvergenceException, MaxCountExceededException;"
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,306,"NumberIsTooLargeException, ConvergenceException, MaxCountExceededException {"
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,308,"ensureDataConformance(x, y);"
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,310,final int N = x.length;
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,311,"final double Wmax = wilcoxonSignedRank(x, y);"
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,313,if (exactPValue && N > 30) {
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,314,"throw new NumberIsTooLargeException(N, 30, true);"
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,317,if (exactPValue) {
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,318,"return calculateExactPValue(Wmax, N);"
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,319,} else {
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,320,final double Wmin = ( (double)(N*(N+1)) / 2.0 ) - Wmax;
True,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTest.java,321,"return calculateAsymptoticPValue(Wmin, N);"
False,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,4, this work for additional information regarding copyright ownership.
False,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,7, the License.  You may obtain a copy of the License at
False,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,14, See the License for the specific language governing permissions and
False,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,15, limitations under the License.
False,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,17,ackage org.apache.commons.math.stat.inference;
False,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,19,mport org.apache.commons.math.distribution.NormalDistribution;
False,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,20,mport org.apache.commons.math.exception.ConvergenceException;
False,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,21,mport org.apache.commons.math.exception.DimensionMismatchException;
False,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,22,mport org.apache.commons.math.exception.MaxCountExceededException;
False,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,23,mport org.apache.commons.math.exception.NoDataException;
False,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,24,mport org.apache.commons.math.exception.NullArgumentException;
False,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,25,mport org.apache.commons.math.exception.NumberIsTooLargeException;
False,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,26,mport org.apache.commons.math.stat.ranking.NaNStrategy;
False,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,27,mport org.apache.commons.math.stat.ranking.NaturalRanking;
False,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,28,mport org.apache.commons.math.stat.ranking.TiesStrategy;
False,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,29,mport org.apache.commons.math.util.FastMath;
False,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,32, An implementation of the Wilcoxon signed-rank test.
False,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,34, @version $Id$
False,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,36,ublic class WilcoxonSignedRankTestImpl implements WilcoxonSignedRankTest {
False,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,38,** Ranking algorithm. */
False,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,39,rivate NaturalRanking naturalRanking;
False,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,42, Create a test instance where NaN's are left in place and ties get
False,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,43, the average of applicable ranks. Use this unless you are very sure
False,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,44, of what you are doing.
False,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,46,ublic WilcoxonSignedRankTestImpl() {
False,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,47,"aturalRanking = new NaturalRanking(NaNStrategy.FIXED,"
False,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,48,iesStrategy.AVERAGE);
False,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,52, Create a test instance using the given strategies for NaN's and ties.
False,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,53, Only use this if you are sure of what you are doing.
False,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,55, @param nanStrategy
False,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,56,            specifies the strategy that should be used for Double.NaN's
False,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,57, @param tiesStrategy
False,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,58,            specifies the strategy that should be used for ties
False,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,60,"ublic WilcoxonSignedRankTestImpl(final NaNStrategy nanStrategy,"
False,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,61,inal TiesStrategy tiesStrategy) {
False,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,62,"aturalRanking = new NaturalRanking(nanStrategy, tiesStrategy);"
False,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,66, Ensures that the provided arrays fulfills the assumptions.
False,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,68, @param x first sample
False,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,69, @param y second sample
False,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,70, @throws NullArgumentException if {@code x} or {@code y} are {@code null}.
False,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,71, @throws NoDataException if {@code x} or {@code y} are zero-length.
False,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,72, @throws DimensionMismatchException if {@code x} and {@code y} do not
False,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,73, have the same length.
False,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,75,"rivate void ensureDataConformance(final double[] x, final double[] y)"
False,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,76,"hrows NullArgumentException, NoDataException, DimensionMismatchException {"
False,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,78,f (x == null ||
False,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,79, == null) {
False,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,80,hrow new NullArgumentException();
False,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,82,f (x.length == 0 ||
False,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,83,.length == 0) {
False,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,84,hrow new NoDataException();
False,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,86,f (y.length != x.length) {
False,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,87,"hrow new DimensionMismatchException(y.length, x.length);"
False,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,92, Calculates y[i] - x[i] for all i
False,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,94, @param x first sample
False,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,95, @param y second sample
False,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,96, @return z = y - x
False,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,98,"rivate double[] calculateDifferences(final double[] x, final double[] y) {"
False,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,100,inal double[] z = new double[x.length];
False,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,102,or (int i = 0; i < x.length; ++i) {
False,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,103,[i] = y[i] - x[i];
False,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,106,eturn z;
False,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,110, Calculates |z[i]| for all i
False,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,112, @param z sample
False,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,113, @return |z|
False,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,114, @throws NullArgumentException if {@code z} is {@code null}
False,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,115, @throws NoDataException if {@code z} is zero-length.
False,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,117,rivate double[] calculateAbsoluteDifferences(final double[] z)
False,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,118,"hrows NullArgumentException, NoDataException {"
False,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,120,f (z == null) {
False,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,121,hrow new NullArgumentException();
False,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,124,f (z.length == 0) {
False,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,125,hrow new NoDataException();
False,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,128,inal double[] zAbs = new double[z.length];
False,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,130,or (int i = 0; i < z.length; ++i) {
False,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,131,Abs[i] = FastMath.abs(z[i]);
False,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,134,eturn zAbs;
False,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,137,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,138,"ublic double wilcoxonSignedRank(final double[] x, final double[] y)"
False,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,139,"hrows NullArgumentException, NoDataException, DimensionMismatchException {"
False,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,141,"nsureDataConformance(x, y);"
False,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,143,/ throws IllegalArgumentException if x and y are not correctly
False,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,144,/ specified
False,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,145,"inal double[] z = calculateDifferences(x, y);"
False,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,146,inal double[] zAbs = calculateAbsoluteDifferences(z);
False,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,148,inal double[] ranks = naturalRanking.rank(zAbs);
False,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,150,ouble Wplus = 0;
False,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,152,or (int i = 0; i < z.length; ++i) {
False,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,153,f (z[i] > 0) {
False,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,154,plus += ranks[i];
False,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,158,inal int N = x.length;
False,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,159,inal double Wminus = (((double) (N * (N + 1))) / 2.0) - Wplus;
False,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,161,"eturn FastMath.max(Wplus, Wminus);"
False,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,165, Algorithm inspired by
False,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,166, http://www.fon.hum.uva.nl/Service/Statistics/Signed_Rank_Algorihms.html#C
False,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,167," by Rob van Son, Institute of Phonetic Sciences & IFOTT,"
False,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,168, University of Amsterdam
False,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,170, @param Wmax largest Wilcoxon signed rank value
False,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,171, @param N number of subjects (corresponding to x.length)
False,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,172, @return two-sided exact p-value
False,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,174,"rivate double calculateExactPValue(final double Wmax, final int N) {"
False,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,176,/ Total number of outcomes (equal to 2^N but a lot faster)
False,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,177,inal int m = 1 << N;
False,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,179,nt largerRankSums = 0;
False,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,181,or (int i = 0; i < m; ++i) {
False,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,182,nt rankSum = 0;
False,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,184,/ Generate all possible rank sums
False,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,185,or (int j = 0; j < N; ++j) {
False,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,187,/ (i >> j) & 1 extract i's j-th bit from the right
False,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,188,f (((i >> j) & 1) == 1) {
False,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,189,ankSum += j + 1;
False,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,193,f (rankSum >= Wmax) {
False,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,194,+largerRankSums;
False,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,199," largerRankSums / m gives the one-sided p-value, so it's multiplied"
False,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,200, with 2 to get the two-sided p-value
False,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,202,eturn 2 * ((double) largerRankSums) / ((double) m);
False,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,206, @param Wmin smallest Wilcoxon signed rank value
False,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,207, @param N number of subjects (corresponding to x.length)
False,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,208, @return two-sided asymptotic p-value
False,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,210,"rivate double calculateAsymptoticPValue(final double Wmin, final int N) {"
False,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,212,inal double ES = (double) (N * (N + 1)) / 4.0;
False,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,214,* Same as (but saves computations):
False,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,215, final double VarW = ((double) (N * (N + 1) * (2*N + 1))) / 24;
False,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,217,inal double VarS = ES * ((double) (2 * N + 1) / 6.0);
False,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,219,/ - 0.5 is a continuity correction
False,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,220,inal double z = (Wmin - ES - 0.5) / FastMath.sqrt(VarS);
False,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,222,"inal NormalDistribution standardNormal = new NormalDistribution(0, 1);"
False,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,224,eturn 2*standardNormal.cumulativeProbability(z);
False,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,227,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,228,"ublic double wilcoxonSignedRankTest(final double[] x, final double[] y,"
False,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,229,inal boolean exactPValue)
False,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,230,"hrows NullArgumentException, NoDataException, DimensionMismatchException,"
False,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,231,"umberIsTooLargeException, ConvergenceException, MaxCountExceededException {"
False,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,233,"nsureDataConformance(x, y);"
False,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,235,inal int N = x.length;
False,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,236,"inal double Wmax = wilcoxonSignedRank(x, y);"
False,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,238,f (exactPValue && N > 30) {
False,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,239,"hrow new NumberIsTooLargeException(N, 30, true);"
False,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,242,f (exactPValue) {
False,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,243,"eturn calculateExactPValue(Wmax, N);"
False,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,244, else {
False,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,245,inal double Wmin = ( (double)(N*(N+1)) / 2.0 ) - Wmax;
False,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestImpl.java,246,"eturn calculateAsymptoticPValue(Wmin, N);"
False,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,33,rotected MannWhitneyUTest testStatistic = new MannWhitneyUTestImpl();
True,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,src/test/java/org/apache/commons/math/stat/inference/MannWhitneyUTestTest.java,33,protected MannWhitneyUTest testStatistic = new MannWhitneyUTest();
False,src/test/java/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,src/test/java/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,35,rotected OneWayAnova testStatistic = new OneWayAnovaImpl();
True,src/test/java/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,src/test/java/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,35,protected OneWayAnova testStatistic = new OneWayAnova();
False,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,453,rivate OneWayAnova oneWayAnova = new OneWayAnovaImpl();
True,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,453,private OneWayAnova oneWayAnova = new OneWayAnova();
False,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,28, Test cases for the ChiSquareTestImpl class.
True,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,28,* Test cases for the WilcoxonSignedRangTest class.
False,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,35,rotected WilcoxonSignedRankTest testStatistic = new WilcoxonSignedRankTestImpl();
True,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,src/test/java/org/apache/commons/math/stat/inference/WilcoxonSignedRankTestTest.java,35,protected WilcoxonSignedRankTest testStatistic = new WilcoxonSignedRankTest();

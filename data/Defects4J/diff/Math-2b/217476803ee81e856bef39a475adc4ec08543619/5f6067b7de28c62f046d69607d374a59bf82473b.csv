is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,140,"return optimize(maxEval, f, goal, startPoint, null, null);"
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,144,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,146,"public RealPointValuePair optimize(int maxEval, final FUNC f,"
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,147,"final GoalType goal,"
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,148,"double[] startPoint,"
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,149,"double[] lowerBound, double[] upperBound) {"
False,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,150, == 0 ? startPoint : generator.nextVector());
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,160,"i == 0 ? startPoint : generator.nextVector(),"
True,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java,161,"lowerBound, upperBound);"
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,59,* Optimize an objective function.
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,61,* @param f Objective function.
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,62,* @param goalType Type of optimization goal: either
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,63,* {@link GoalType#MAXIMIZE} or {@link GoalType#MINIMIZE}.
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,64,* @param startPoint Start point for optimization.
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,65,* @param maxEval Maximum number of function evaluations.
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,66,* @param lowerBound Lower bound for each of the parameters.
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,67,* @param upperBound Upper bound for each of the parameters.
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,68,* @return the point/value pair giving the optimal value for objective
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,69,* function.
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,70,* @throws org.apache.commons.math.exception.DimensionMismatchException
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,71,* if the array sizes are wrong.
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,72,* @throws org.apache.commons.math.exception.TooManyEvaluationsException
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,73,* if the maximal number of evaluations is exceeded.
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,74,* @throws org.apache.commons.math.exception.NullArgumentException if
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,75,"* {@code f}, {@code goalType} or {@code startPoint} is {@code null}."
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,77,"RealPointValuePair optimize(int maxEval, FUNC f, GoalType goalType,"
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,78,"double[] startPoint,"
True,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java,79,"double[] lowerBound, double[] upperBound);"
True,src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractScalarOptimizer.java,51,/** Lower bounds. */
True,src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractScalarOptimizer.java,52,private double[] lowerBound;
True,src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractScalarOptimizer.java,53,/** Upper bounds. */
True,src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractScalarOptimizer.java,54,private double[] upperBound;
True,src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractScalarOptimizer.java,108,"return optimize(maxEval, f, goalType, startPoint, null, null);"
True,src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractScalarOptimizer.java,111,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractScalarOptimizer.java,112,"public RealPointValuePair optimize(int maxEval, FUNC f, GoalType goalType,"
True,src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractScalarOptimizer.java,113,"double[] startPoint,"
True,src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractScalarOptimizer.java,114,"double[] lower, double[] upper) {"
True,src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractScalarOptimizer.java,134,final int dim = startPoint.length;
True,src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractScalarOptimizer.java,135,if (lower == null) {
True,src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractScalarOptimizer.java,136,lowerBound = new double[dim];
True,src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractScalarOptimizer.java,137,for (int i = 0; i < dim; i++) {
True,src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractScalarOptimizer.java,138,lowerBound[i] = Double.NEGATIVE_INFINITY;
True,src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractScalarOptimizer.java,140,} else {
True,src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractScalarOptimizer.java,141,lowerBound = lower.clone();
True,src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractScalarOptimizer.java,143,if (upper == null) {
True,src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractScalarOptimizer.java,144,upperBound = new double[dim];
True,src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractScalarOptimizer.java,145,for (int i = 0; i < dim; i++) {
True,src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractScalarOptimizer.java,146,upperBound[i] = Double.POSITIVE_INFINITY;
True,src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractScalarOptimizer.java,148,} else {
True,src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractScalarOptimizer.java,149,upperBound = upper.clone();
True,src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractScalarOptimizer.java,171,* @return the lower bounds.
True,src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractScalarOptimizer.java,173,public double[] getLowerBound() {
True,src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractScalarOptimizer.java,174,return lowerBound.clone();
True,src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractScalarOptimizer.java,178,* @return the upper bounds.
True,src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractScalarOptimizer.java,180,public double[] getUpperBound() {
True,src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractScalarOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractScalarOptimizer.java,181,return upperBound.clone();
True,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,76,"return optimize(maxEval, f, goalType, startPoint, null, null);"
True,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,79,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,80,@Override
True,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,81,"public RealPointValuePair optimize(int maxEval,"
True,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,82,"final DifferentiableMultivariateRealFunction f,"
True,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,83,"final GoalType goalType,"
True,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,84,"final double[] startPoint,"
True,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,85,"double[] lowerBound, double[] upperBound) {"
False,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,79,"eturn super.optimize(maxEval, f, goalType, startPoint);"
True,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,89,"return super.optimize(maxEval, f, goalType,"
True,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,90,"startPoint,"
True,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java,91,"lowerBound, upperBound);"

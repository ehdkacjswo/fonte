is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math/analysis/solvers/BaseBracketedSecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseBracketedSecantSolver.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/main/java/org/apache/commons/math/analysis/solvers/BaseBracketedSecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseBracketedSecantSolver.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/main/java/org/apache/commons/math/analysis/solvers/BaseBracketedSecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseBracketedSecantSolver.java,4, this work for additional information regarding copyright ownership.
False,src/main/java/org/apache/commons/math/analysis/solvers/BaseBracketedSecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseBracketedSecantSolver.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/main/java/org/apache/commons/math/analysis/solvers/BaseBracketedSecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseBracketedSecantSolver.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/main/java/org/apache/commons/math/analysis/solvers/BaseBracketedSecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseBracketedSecantSolver.java,7, the License.  You may obtain a copy of the License at
False,src/main/java/org/apache/commons/math/analysis/solvers/BaseBracketedSecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseBracketedSecantSolver.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/main/java/org/apache/commons/math/analysis/solvers/BaseBracketedSecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseBracketedSecantSolver.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/main/java/org/apache/commons/math/analysis/solvers/BaseBracketedSecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseBracketedSecantSolver.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/main/java/org/apache/commons/math/analysis/solvers/BaseBracketedSecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseBracketedSecantSolver.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/main/java/org/apache/commons/math/analysis/solvers/BaseBracketedSecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseBracketedSecantSolver.java,14, See the License for the specific language governing permissions and
False,src/main/java/org/apache/commons/math/analysis/solvers/BaseBracketedSecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseBracketedSecantSolver.java,15, limitations under the License.
False,src/main/java/org/apache/commons/math/analysis/solvers/BaseBracketedSecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseBracketedSecantSolver.java,18,ackage org.apache.commons.math.analysis.solvers;
False,src/main/java/org/apache/commons/math/analysis/solvers/BaseBracketedSecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseBracketedSecantSolver.java,21, Base class for <em>Secant</em> methods that guarantee convergence
False,src/main/java/org/apache/commons/math/analysis/solvers/BaseBracketedSecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseBracketedSecantSolver.java,22, by maintaining a {@link BracketedUnivariateRealSolver bracketed solution}.
False,src/main/java/org/apache/commons/math/analysis/solvers/BaseBracketedSecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseBracketedSecantSolver.java,24, @since 3.0
False,src/main/java/org/apache/commons/math/analysis/solvers/BaseBracketedSecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseBracketedSecantSolver.java,25, @version $Id$
False,src/main/java/org/apache/commons/math/analysis/solvers/BaseBracketedSecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseBracketedSecantSolver.java,27,ublic class BaseBracketedSecantSolver extends BaseSecantSolver
False,src/main/java/org/apache/commons/math/analysis/solvers/BaseBracketedSecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseBracketedSecantSolver.java,28,mplements BracketedUnivariateRealSolver {
False,src/main/java/org/apache/commons/math/analysis/solvers/BaseBracketedSecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseBracketedSecantSolver.java,30, Construct a solver with default accuracy (1e-6).
False,src/main/java/org/apache/commons/math/analysis/solvers/BaseBracketedSecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseBracketedSecantSolver.java,32, @param method Method.
False,src/main/java/org/apache/commons/math/analysis/solvers/BaseBracketedSecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseBracketedSecantSolver.java,34,rotected BaseBracketedSecantSolver(Method method) {
False,src/main/java/org/apache/commons/math/analysis/solvers/BaseBracketedSecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseBracketedSecantSolver.java,35,"uper(DEFAULT_ABSOLUTE_ACCURACY, method);"
False,src/main/java/org/apache/commons/math/analysis/solvers/BaseBracketedSecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseBracketedSecantSolver.java,39, Construct a solver.
False,src/main/java/org/apache/commons/math/analysis/solvers/BaseBracketedSecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseBracketedSecantSolver.java,41, @param absoluteAccuracy absolute accuracy
False,src/main/java/org/apache/commons/math/analysis/solvers/BaseBracketedSecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseBracketedSecantSolver.java,42, @param method Method.
False,src/main/java/org/apache/commons/math/analysis/solvers/BaseBracketedSecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseBracketedSecantSolver.java,44,"rotected BaseBracketedSecantSolver(final double absoluteAccuracy,"
False,src/main/java/org/apache/commons/math/analysis/solvers/BaseBracketedSecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseBracketedSecantSolver.java,45,ethod method) {
False,src/main/java/org/apache/commons/math/analysis/solvers/BaseBracketedSecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseBracketedSecantSolver.java,46,"uper(absoluteAccuracy, method);"
False,src/main/java/org/apache/commons/math/analysis/solvers/BaseBracketedSecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseBracketedSecantSolver.java,50, Construct a solver.
False,src/main/java/org/apache/commons/math/analysis/solvers/BaseBracketedSecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseBracketedSecantSolver.java,52, @param relativeAccuracy relative accuracy
False,src/main/java/org/apache/commons/math/analysis/solvers/BaseBracketedSecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseBracketedSecantSolver.java,53, @param absoluteAccuracy absolute accuracy
False,src/main/java/org/apache/commons/math/analysis/solvers/BaseBracketedSecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseBracketedSecantSolver.java,54, @param method Method.
False,src/main/java/org/apache/commons/math/analysis/solvers/BaseBracketedSecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseBracketedSecantSolver.java,56,"rotected BaseBracketedSecantSolver(final double relativeAccuracy,"
False,src/main/java/org/apache/commons/math/analysis/solvers/BaseBracketedSecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseBracketedSecantSolver.java,57,"inal double absoluteAccuracy,"
False,src/main/java/org/apache/commons/math/analysis/solvers/BaseBracketedSecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseBracketedSecantSolver.java,58,ethod method) {
False,src/main/java/org/apache/commons/math/analysis/solvers/BaseBracketedSecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseBracketedSecantSolver.java,59,"uper(relativeAccuracy, absoluteAccuracy, method);"
False,src/main/java/org/apache/commons/math/analysis/solvers/BaseBracketedSecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseBracketedSecantSolver.java,62,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/analysis/solvers/BaseBracketedSecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseBracketedSecantSolver.java,63,ublic AllowedSolutions getAllowedSolutions() {
False,src/main/java/org/apache/commons/math/analysis/solvers/BaseBracketedSecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseBracketedSecantSolver.java,64,eturn allowedSolutions;
False,src/main/java/org/apache/commons/math/analysis/solvers/BaseBracketedSecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseBracketedSecantSolver.java,67,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/analysis/solvers/BaseBracketedSecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseBracketedSecantSolver.java,68,ublic void setAllowedSolutions(final AllowedSolutions allowedSolutions) {
False,src/main/java/org/apache/commons/math/analysis/solvers/BaseBracketedSecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseBracketedSecantSolver.java,69,his.allowedSolutions = allowedSolutions;
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,21,import org.apache.commons.math.analysis.UnivariateRealFunction;
False,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,24, Base class for all <em>Secant</em>-based methods for root-finding
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,25,* Base class for all bracketing <em>Secant</em>-based methods for root-finding
False,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,27," <p>Implementation of the {@link SecantSolver <em>Secant</em>},"
False,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,28," {@link RegulaFalsiSolver <em>Regula Falsi</em>}, and"
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,28,"* <p>Implementation of the {@link RegulaFalsiSolver <em>Regula Falsi</em>}, and"
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,41,* <p>The  {@link SecantSolver <em>secant<em>} method is <em>not</emp> a
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,42,* bracketing method so it is not implemented here. It has a separate
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,43,* implementation.</p>
False,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,44,ublic abstract class BaseSecantSolver extends AbstractUnivariateRealSolver {
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,48,public abstract class BaseSecantSolver
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,49,extends AbstractUnivariateRealSolver
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,50,implements BracketedUnivariateRealSolver<UnivariateRealFunction> {
False,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,48,rotected AllowedSolutions allowedSolutions = AllowedSolutions.EITHER_SIDE;
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,56,private AllowedSolutions allowedSolutions;
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,69,this.allowedSolutions = AllowedSolutions.ANY_SIDE;
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,84,this.allowedSolutions = AllowedSolutions.ANY_SIDE;
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,88,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,89,"public double solve(final int maxEval, final UnivariateRealFunction f,"
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,90,"final double min, final double max,"
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,91,final AllowedSolutions allowedSolutions) {
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,92,"return solve(maxEval, f, min, max, min + 0.5 * (max - min), allowedSolutions);"
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,95,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,96,"public double solve(final int maxEval, final UnivariateRealFunction f,"
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,97,"final double min, final double max, final double startValue,"
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,98,final AllowedSolutions allowedSolutions) {
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,99,this.allowedSolutions = allowedSolutions;
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,100,"return super.solve(maxEval, f, min, max, startValue);"
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,105,"public double solve(final int maxEval, final UnivariateRealFunction f,"
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,106,"final double min, final double max, final double startValue) {"
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,107,"return solve(maxEval, f, min, max, startValue, AllowedSolutions.ANY_SIDE);"
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,110,/** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,105,/ larger than the right bound. Not used for the original Secant
False,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,106,/ method.
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,137,// larger than the right bound.
False,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,123,f (method == Method.SECANT) {
False,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,124,0 = x1;
False,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,125,0 = f1;
False,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,126,1 = x;
False,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,127,1 = fx;
False,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,128, else if (f1 * fx < 0) {
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,154,if (f1 * fx < 0) {
False,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,154,ase EITHER_SIDE:
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,180,case ANY_SIDE:
False,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,186,ase EITHER_SIDE:
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,212,case ANY_SIDE:
False,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,205,** The original {@link SecantSolver <em>Secant</em>} method. */
False,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,206,"ECANT,"
False,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,218,"EGASUS,"
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java,242,PEGASUS;
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,20,import org.apache.commons.math.util.FastMath;
False,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,39,ublic class SecantSolver extends BaseSecantSolver {
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,41,public class SecantSolver extends AbstractUnivariateRealSolver {
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,43,/** Default absolute accuracy. */
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,44,protected static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;
False,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,42,"uper(DEFAULT_ABSOLUTE_ACCURACY, Method.SECANT);"
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,48,super(DEFAULT_ABSOLUTE_ACCURACY);
False,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,51,"uper(absoluteAccuracy, Method.SECANT);"
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,57,super(absoluteAccuracy);
False,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,62,"uper(relativeAccuracy, absoluteAccuracy, Method.SECANT);"
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,68,"super(relativeAccuracy, absoluteAccuracy);"
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,71,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,72,@Override
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,73,protected final double doSolve() {
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,74,// Get initial solution
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,75,double x0 = getMin();
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,76,double x1 = getMax();
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,77,double f0 = computeObjectiveValue(x0);
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,78,double f1 = computeObjectiveValue(x1);
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,80,"// If one of the bounds is the exact root, return it. Since these are"
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,81,"// not under-approximations or over-approximations, we can return them"
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,82,// regardless of the allowed solutions.
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,83,if (f0 == 0.0) {
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,84,return x0;
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,86,if (f1 == 0.0) {
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,87,return x1;
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,90,// Verify bracketing of initial solution.
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,91,"verifyBracketing(x0, x1);"
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,93,// Get accuracies.
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,94,final double ftol = getFunctionValueAccuracy();
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,95,final double atol = getAbsoluteAccuracy();
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,96,final double rtol = getRelativeAccuracy();
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,98,// Keep finding better approximations.
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,99,while (true) {
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,101,// Calculate the next approximation.
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,102,final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,103,final double fx = computeObjectiveValue(x);
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,105,"// If the new approximation is the exact root, return it. Since"
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,106,"// this is not an under-approximation or an over-approximation,"
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,107,// we can return it regardless of the allowed solutions.
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,108,if (fx == 0.0) {
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,109,return x;
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,112,// Update the bounds with the new approximation.
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,113,x0 = x1;
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,114,f0 = f1;
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,115,x1 = x;
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,116,f1 = fx;
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,118,"// If the function value of the last approximation is too small,"
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,119,"// given the function value accuracy, then we can't get closer to"
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,120,// the root than we already are.
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,121,if (FastMath.abs(f1) <= ftol) {
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,122,return x1;
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,125,"// If the current interval is within the given accuracies, we"
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,126,// are satisfied with the current approximation.
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,127,"if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1), atol)) {"
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,128,return x1;

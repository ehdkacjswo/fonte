is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math/filter/DefaultMeasurementModel.java,src/main/java/org/apache/commons/math/filter/DefaultMeasurementModel.java,31,"* The measurement matrix, used to associate the measurement vector to the"
True,src/main/java/org/apache/commons/math/filter/DefaultMeasurementModel.java,src/main/java/org/apache/commons/math/filter/DefaultMeasurementModel.java,32,* internal state estimation vector.
True,src/main/java/org/apache/commons/math/filter/DefaultMeasurementModel.java,src/main/java/org/apache/commons/math/filter/DefaultMeasurementModel.java,37,* The measurement noise covariance matrix.
False,src/main/java/org/apache/commons/math/filter/DefaultMeasurementModel.java,src/main/java/org/apache/commons/math/filter/DefaultMeasurementModel.java,37, @param measurementMatrix
True,src/main/java/org/apache/commons/math/filter/DefaultMeasurementModel.java,src/main/java/org/apache/commons/math/filter/DefaultMeasurementModel.java,45,* @param measMatrix
False,src/main/java/org/apache/commons/math/filter/DefaultMeasurementModel.java,src/main/java/org/apache/commons/math/filter/DefaultMeasurementModel.java,39, @param measurementNoise
True,src/main/java/org/apache/commons/math/filter/DefaultMeasurementModel.java,src/main/java/org/apache/commons/math/filter/DefaultMeasurementModel.java,47,* @param measNoise
False,src/main/java/org/apache/commons/math/filter/DefaultMeasurementModel.java,src/main/java/org/apache/commons/math/filter/DefaultMeasurementModel.java,42,"ublic DefaultMeasurementModel(final double[][] measurementMatrix,"
False,src/main/java/org/apache/commons/math/filter/DefaultMeasurementModel.java,src/main/java/org/apache/commons/math/filter/DefaultMeasurementModel.java,43,inal double[][] measurementNoise) {
False,src/main/java/org/apache/commons/math/filter/DefaultMeasurementModel.java,src/main/java/org/apache/commons/math/filter/DefaultMeasurementModel.java,44,"his(new Array2DRowRealMatrix(measurementMatrix),"
False,src/main/java/org/apache/commons/math/filter/DefaultMeasurementModel.java,src/main/java/org/apache/commons/math/filter/DefaultMeasurementModel.java,45,ew Array2DRowRealMatrix(measurementNoise));
True,src/main/java/org/apache/commons/math/filter/DefaultMeasurementModel.java,src/main/java/org/apache/commons/math/filter/DefaultMeasurementModel.java,50,"public DefaultMeasurementModel(final double[][] measMatrix,"
True,src/main/java/org/apache/commons/math/filter/DefaultMeasurementModel.java,src/main/java/org/apache/commons/math/filter/DefaultMeasurementModel.java,51,final double[][] measNoise) {
True,src/main/java/org/apache/commons/math/filter/DefaultMeasurementModel.java,src/main/java/org/apache/commons/math/filter/DefaultMeasurementModel.java,52,"this(new Array2DRowRealMatrix(measMatrix),"
True,src/main/java/org/apache/commons/math/filter/DefaultMeasurementModel.java,src/main/java/org/apache/commons/math/filter/DefaultMeasurementModel.java,53,new Array2DRowRealMatrix(measNoise));
False,src/main/java/org/apache/commons/math/filter/DefaultMeasurementModel.java,src/main/java/org/apache/commons/math/filter/DefaultMeasurementModel.java,52, @param measurementMatrix
False,src/main/java/org/apache/commons/math/filter/DefaultMeasurementModel.java,src/main/java/org/apache/commons/math/filter/DefaultMeasurementModel.java,53, @param measurementNoise
True,src/main/java/org/apache/commons/math/filter/DefaultMeasurementModel.java,src/main/java/org/apache/commons/math/filter/DefaultMeasurementModel.java,60,* @param measMatrix
True,src/main/java/org/apache/commons/math/filter/DefaultMeasurementModel.java,src/main/java/org/apache/commons/math/filter/DefaultMeasurementModel.java,61,*            the measurement matrix
True,src/main/java/org/apache/commons/math/filter/DefaultMeasurementModel.java,src/main/java/org/apache/commons/math/filter/DefaultMeasurementModel.java,62,* @param measNoise
True,src/main/java/org/apache/commons/math/filter/DefaultMeasurementModel.java,src/main/java/org/apache/commons/math/filter/DefaultMeasurementModel.java,63,*            the measurement noise matrix
False,src/main/java/org/apache/commons/math/filter/DefaultMeasurementModel.java,src/main/java/org/apache/commons/math/filter/DefaultMeasurementModel.java,55,"ublic DefaultMeasurementModel(final RealMatrix measurementMatrix,"
False,src/main/java/org/apache/commons/math/filter/DefaultMeasurementModel.java,src/main/java/org/apache/commons/math/filter/DefaultMeasurementModel.java,56,inal RealMatrix measurementNoise) {
False,src/main/java/org/apache/commons/math/filter/DefaultMeasurementModel.java,src/main/java/org/apache/commons/math/filter/DefaultMeasurementModel.java,57,his.measurementMatrix = measurementMatrix;
False,src/main/java/org/apache/commons/math/filter/DefaultMeasurementModel.java,src/main/java/org/apache/commons/math/filter/DefaultMeasurementModel.java,58,his.measurementNoise = measurementNoise;
True,src/main/java/org/apache/commons/math/filter/DefaultMeasurementModel.java,src/main/java/org/apache/commons/math/filter/DefaultMeasurementModel.java,65,"public DefaultMeasurementModel(final RealMatrix measMatrix,"
True,src/main/java/org/apache/commons/math/filter/DefaultMeasurementModel.java,src/main/java/org/apache/commons/math/filter/DefaultMeasurementModel.java,66,final RealMatrix measNoise) {
True,src/main/java/org/apache/commons/math/filter/DefaultMeasurementModel.java,src/main/java/org/apache/commons/math/filter/DefaultMeasurementModel.java,67,this.measurementMatrix = measMatrix;
True,src/main/java/org/apache/commons/math/filter/DefaultMeasurementModel.java,src/main/java/org/apache/commons/math/filter/DefaultMeasurementModel.java,68,this.measurementNoise = measNoise;
True,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,32,"* The state transition matrix, used to advance the internal state"
True,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,33,* estimation each time-step.
True,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,38,"* The control matrix, used to integrate a control input into the state"
True,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,39,* estimation.
False,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,34,rivate RealMatrix processNoise;
False,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,35,rivate RealVector initialStateEstimate;
False,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,36,rivate RealMatrix initialErrorCovariance;
True,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,44,* The process noise covariance matrix.
True,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,46,private RealMatrix processNoiseCovMatrix;
True,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,49,* The initial state estimation of the observed process.
True,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,51,private RealVector initialStateEstimateVector;
True,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,54,* The initial error covariance matrix of the observed process.
True,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,56,private RealMatrix initialErrorCovMatrix;
False,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,42, @param stateTransitionMatrix
True,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,62,* @param stateTransition
False,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,44, @param controlMatrix
True,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,64,* @param control
False,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,53,"ublic DefaultProcessModel(final double[][] stateTransitionMatrix,"
False,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,54,"inal double[][] controlMatrix, final double[][] processNoise,"
True,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,73,"public DefaultProcessModel(final double[][] stateTransition,"
True,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,74,"final double[][] control, final double[][] processNoise,"
False,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,57,"his(new Array2DRowRealMatrix(stateTransitionMatrix),"
False,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,58,"ew Array2DRowRealMatrix(controlMatrix),"
False,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,59,"ew Array2DRowRealMatrix(processNoise), new ArrayRealVector("
False,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,60,"nitialStateEstimate), new Array2DRowRealMatrix("
False,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,61,nitialErrorCovariance));
True,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,77,"this(new Array2DRowRealMatrix(stateTransition),"
True,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,78,"new Array2DRowRealMatrix(control),"
True,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,79,"new Array2DRowRealMatrix(processNoise),"
True,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,80,"new ArrayRealVector(initialStateEstimate),"
True,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,81,new Array2DRowRealMatrix(initialErrorCovariance));
False,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,69, @param stateTransitionMatrix
True,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,89,* @param stateTransition
False,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,71, @param controlMatrix
True,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,91,* @param control
False,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,76,"ublic DefaultProcessModel(final double[][] stateTransitionMatrix,"
False,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,77,"inal double[][] controlMatrix, final double[][] processNoise) {"
False,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,78,"his(new Array2DRowRealMatrix(stateTransitionMatrix),"
False,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,79,"ew Array2DRowRealMatrix(controlMatrix),"
True,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,96,"public DefaultProcessModel(final double[][] stateTransition,"
True,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,97,"final double[][] control, final double[][] processNoise) {"
True,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,98,"this(new Array2DRowRealMatrix(stateTransition),"
True,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,99,"new Array2DRowRealMatrix(control),"
False,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,87, @param stateTransitionMatrix
True,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,107,* @param stateTransition
False,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,89, @param controlMatrix
True,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,109,* @param control
False,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,98,"ublic DefaultProcessModel(final RealMatrix stateTransitionMatrix,"
False,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,99,"inal RealMatrix controlMatrix, final RealMatrix processNoise,"
True,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,118,"public DefaultProcessModel(final RealMatrix stateTransition,"
True,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,119,"final RealMatrix control, final RealMatrix processNoise,"
False,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,102,his.stateTransitionMatrix = stateTransitionMatrix;
False,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,103,his.controlMatrix = controlMatrix;
False,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,104,his.processNoise = processNoise;
False,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,105,his.initialStateEstimate = initialStateEstimate;
False,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,106,his.initialErrorCovariance = initialErrorCovariance;
True,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,122,this.stateTransitionMatrix = stateTransition;
True,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,123,this.controlMatrix = control;
True,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,124,this.processNoiseCovMatrix = processNoise;
True,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,125,this.initialStateEstimateVector = initialStateEstimate;
True,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,126,this.initialErrorCovMatrix = initialErrorCovariance;
False,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,127,eturn processNoise;
True,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,147,return processNoiseCovMatrix;
False,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,134,eturn initialStateEstimate;
True,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,154,return initialStateEstimateVector;
False,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,141,eturn initialErrorCovariance;
True,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,src/main/java/org/apache/commons/math/filter/DefaultProcessModel.java,161,return initialErrorCovMatrix;
False,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,20,mport org.apache.commons.math.exception.NullArgumentException;
False,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,30,mport org.apache.commons.math.linear.SingularMatrixException;
False,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,34, Implementation of a Kalman filter to estimate the state <i>x<sub>k</sub> of a
False,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,35, discrete-time controlled process that is governed by the linear stochastic
False,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,36, difference equation:
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,32,* Implementation of a Kalman filter to estimate the state <i>x<sub>k</sub></i>
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,33,* of a discrete-time controlled process that is governed by the linear
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,34,* stochastic difference equation:
False,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,39, <i>x<sub>k</sub> = <b>A</b><i>x<sub>k-1</sub> + <b>B</b><i>u<sub>k-1</sub> + <i>w<sub>k-1</sub>
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,37,* <i>x<sub>k</sub></i> = <b>A</b><i>x<sub>k-1</sub></i> + <b>B</b><i>u<sub>k-1</sub></i> + <i>w<sub>k-1</sub></i>
False,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,42, with a measurement <i>x<sub>k</sub> that is
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,40,* with a measurement <i>x<sub>k</sub></i> that is
False,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,45, <i>z<sub>k</sub> = <b>H</b><i>x<sub>k</sub> + <i>v<sub>k</sub>.
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,43,* <i>z<sub>k</sub></i> = <b>H</b><i>x<sub>k</sub></i> + <i>v<sub>k</sub></i>.
False,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,48, The random variables <i>w<sub>k</sub> and <i>v<sub>k</sub> represent the
False,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,49, process and measurement noise and are assumed to be independent of each other
False,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,50, and distributed with normal probability (white noise).
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,46,* The random variables <i>w<sub>k</sub></i> and <i>v<sub>k</sub></i> represent
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,47,* the process and measurement noise and are assumed to be independent of each
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,48,* other and distributed with normal probability (white noise).
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,56,* <br/>
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,57,* <p>
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,58,* The Kalman filter is initialized with a {@link ProcessModel} and a
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,59,"* {@link MeasurementModel}, which contain the corresponding transformation and"
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,60,* noise covariance matrices. The parameter names used in the respective models
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,61,* correspond to the following names commonly used in the mathematical
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,62,* literature:
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,63,* <ul>
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,64,* <li>A - state transition matrix</li>
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,65,* <li>B - control input matrix</li>
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,66,* <li>H - measurement matrix</li>
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,67,* <li>Q - process noise covariance matrix</li>
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,68,* <li>R - measurement noise covariance matrix</li>
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,69,* <li>P - error covariance matrix</li>
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,70,* </ul>
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,71,* </p>
False,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,63, @see <a
False,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,64,"      href=""http://academic.csuohio.edu/simond/courses/eec644/kalman.pdf"">Kalman"
False,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,65,      filter example by Dan Simon</a>
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,77,"* @see <a href=""http://academic.csuohio.edu/simond/courses/eec644/kalman.pdf"">"
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,78,*      Kalman filter example by Dan Simon</a>
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,79,* @see ProcessModel
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,80,* @see MeasurementModel
False,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,72,"** The transition matrix, equivalent to A */"
False,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,73,rivate transient RealMatrix transitionMatrix;
False,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,74,** The transposed transition matrix */
False,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,75,rivate transient RealMatrix transitionMatrixT;
False,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,76,"** The control matrix, equivalent to B */"
False,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,77,rivate transient RealMatrix controlMatrix;
False,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,78,"** The measurement matrix, equivalent to H */"
False,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,79,rivate transient RealMatrix measurementMatrix;
False,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,80,** The transposed measurement matrix */
False,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,81,rivate transient RealMatrix measurementMatrixT;
False,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,82,"** The internal state estimation vector, equivalent to x hat */"
False,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,83,rivate transient RealVector stateEstimation;
False,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,84,"** The process noise covariance matrix, equivalent to Q */"
False,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,85,rivate transient RealMatrix processNoise;
False,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,86,"** The measurement noise covariance matrix, equivalent to R */"
False,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,87,rivate transient RealMatrix measurementNoise;
False,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,88,"** The error covariance matrix, equivalent to P */"
False,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,89,rivate transient RealMatrix errorCovariance;
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,86,/** The process model used by this filter instance. */
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,87,private final ProcessModel processModel;
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,88,/** The measurement model used by this filter instance. */
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,89,private final MeasurementModel measurementModel;
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,90,"/** The transition matrix, equivalent to A. */"
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,91,private RealMatrix transitionMatrix;
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,92,/** The transposed transition matrix. */
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,93,private RealMatrix transitionMatrixT;
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,94,"/** The control matrix, equivalent to B. */"
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,95,private RealMatrix controlMatrix;
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,96,"/** The measurement matrix, equivalent to H. */"
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,97,private RealMatrix measurementMatrix;
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,98,/** The transposed measurement matrix. */
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,99,private RealMatrix measurementMatrixT;
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,100,"/** The internal state estimation vector, equivalent to x hat. */"
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,101,private RealVector stateEstimation;
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,102,"/** The error covariance matrix, equivalent to P. */"
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,103,private RealMatrix errorCovariance;
False,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,95, @param processModel
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,109,* @param process
False,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,97, @param measurementModel
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,111,* @param measurement
False,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,99, @throws NullArgumentException
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,113,* @throws org.apache.commons.math.exception.NullArgumentException
False,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,107,"ublic KalmanFilter(final ProcessModel processModel,"
False,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,108,inal MeasurementModel measurementModel)
False,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,109,"hrows NullArgumentException, NonSquareMatrixException,"
False,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,110,atrixDimensionMismatchException {
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,121,"public KalmanFilter(final ProcessModel process,"
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,122,final MeasurementModel measurement) {
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,124,MathUtils.checkNotNull(process);
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,125,MathUtils.checkNotNull(measurement);
False,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,112,athUtils.checkNotNull(processModel);
False,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,113,athUtils.checkNotNull(measurementModel);
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,127,this.processModel = process;
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,128,this.measurementModel = measurement;
False,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,120,ontrolMatrix = (processModel.getControlMatrix() == null) ?
False,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,121,ew Array2DRowRealMatrix() :
False,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,122,rocessModel.getControlMatrix();
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,135,if (processModel.getControlMatrix() == null) {
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,136,controlMatrix = new Array2DRowRealMatrix();
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,137,} else {
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,138,controlMatrix = processModel.getControlMatrix();
False,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,128,rocessNoise = processModel.getProcessNoise();
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,145,// check that the process and measurement noise matrices are not null
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,146,// they will be directly accessed from the model as they may change
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,147,// over time
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,148,RealMatrix processNoise = processModel.getProcessNoise();
False,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,131,easurementNoise = measurementModel.getMeasurementNoise();
False,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,132,athUtils.checkNotNull(measurementNoise);
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,150,RealMatrix measNoise = measurementModel.getMeasurementNoise();
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,151,MathUtils.checkNotNull(measNoise);
False,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,135,/ available
False,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,136,tateEstimation = (processModel.getInitialStateEstimate() == null) ?
False,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,137,ew ArrayRealVector(transitionMatrix.getColumnDimension()) :
False,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,138,rocessModel.getInitialStateEstimate();
False,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,139,athUtils.checkNotNull(stateEstimation);
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,154,// available from the process model
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,155,if (processModel.getInitialStateEstimate() == null) {
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,156,stateEstimation =
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,157,new ArrayRealVector(transitionMatrix.getColumnDimension());
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,158,} else {
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,159,stateEstimation = processModel.getInitialStateEstimate();
False,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,147,/ available
False,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,148,rrorCovariance = (processModel.getInitialErrorCovariance() == null) ? processNoise
False,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,149,copy() : processModel.getInitialErrorCovariance();
False,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,150,athUtils.checkNotNull(errorCovariance);
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,168,// available from the process model
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,169,if (processModel.getInitialErrorCovariance() == null) {
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,170,errorCovariance = processNoise.copy();
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,171,} else {
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,172,errorCovariance = processModel.getInitialErrorCovariance();
False,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,184,f (measurementNoise.getRowDimension() != measurementMatrix.getRowDimension() ||
False,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,185,easurementNoise.getColumnDimension() != 1) {
False,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,186,"hrow new MatrixDimensionMismatchException(measurementNoise.getRowDimension(),"
False,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,187,"easurementNoise.getColumnDimension(),"
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,207,if (measNoise.getRowDimension() != measurementMatrix.getRowDimension() ||
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,208,measNoise.getColumnDimension() != 1) {
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,209,"throw new MatrixDimensionMismatchException(measNoise.getRowDimension(),"
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,210,"measNoise.getColumnDimension(),"
False,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,261,ublic void predict(final double[] u) throws DimensionMismatchException {
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,284,public void predict(final double[] u) {
False,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,273,ublic void predict(final RealVector u) throws DimensionMismatchException {
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,296,public void predict(final RealVector u) {
False,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,293,multiply(transitionMatrixT).add(processNoise);
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,316,.multiply(transitionMatrixT)
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,317,.add(processModel.getProcessNoise());
False,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,303, @throws SingularMatrixException
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,327,* @throws org.apache.commons.math.linear.SingularMatrixException
False,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,306,"ublic void correct(final double[] z) throws DimensionMismatchException,"
False,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,307,ingularMatrixException {
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,330,public void correct(final double[] z) {
False,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,318, @throws SingularMatrixException
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,341,* @throws org.apache.commons.math.linear.SingularMatrixException
False,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,321,"ublic void correct(final RealVector z) throws DimensionMismatchException,"
False,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,322,ingularMatrixException {
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,344,public void correct(final RealVector z) {
False,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,331,ealMatrix S = measurementMatrix.multiply(errorCovariance)
False,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,332,multiply(measurementMatrixT).add(measurementNoise);
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,353,RealMatrix s = measurementMatrix.multiply(errorCovariance)
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,354,.multiply(measurementMatrixT)
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,355,.add(measurementModel.getMeasurementNoise());
False,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,337,ecompositionSolver solver = new CholeskyDecompositionImpl(S).getSolver();
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,360,DecompositionSolver solver = new CholeskyDecompositionImpl(s).getSolver();
False,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,354,ealMatrix Identity = MatrixUtils.createRealIdentityMatrix(kalmanGain.getRowDimension());
False,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,355,rrorCovariance = Identity.subtract(kalmanGain.multiply(measurementMatrix)).multiply(errorCovariance);
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,377,RealMatrix identity = MatrixUtils.createRealIdentityMatrix(kalmanGain.getRowDimension());
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,378,errorCovariance = identity.subtract(kalmanGain.multiply(measurementMatrix)).multiply(errorCovariance);
False,src/main/java/org/apache/commons/math/filter/MeasurementModel.java,src/main/java/org/apache/commons/math/filter/MeasurementModel.java,35, Returns the measurement noise matrix.
True,src/main/java/org/apache/commons/math/filter/MeasurementModel.java,src/main/java/org/apache/commons/math/filter/MeasurementModel.java,35,* Returns the measurement noise matrix. This method is called by the
True,src/main/java/org/apache/commons/math/filter/MeasurementModel.java,src/main/java/org/apache/commons/math/filter/MeasurementModel.java,36,"* {@link KalmanFilter} every correct step, so implementations of this"
True,src/main/java/org/apache/commons/math/filter/MeasurementModel.java,src/main/java/org/apache/commons/math/filter/MeasurementModel.java,37,* interface may return a modified measurement noise depending on current
True,src/main/java/org/apache/commons/math/filter/MeasurementModel.java,src/main/java/org/apache/commons/math/filter/MeasurementModel.java,38,* iteration step.
True,src/main/java/org/apache/commons/math/filter/MeasurementModel.java,src/main/java/org/apache/commons/math/filter/MeasurementModel.java,41,* @see KalmanFilter#correct(double[])
True,src/main/java/org/apache/commons/math/filter/MeasurementModel.java,src/main/java/org/apache/commons/math/filter/MeasurementModel.java,42,* @see KalmanFilter#correct(org.apache.commons.math.linear.RealVector)
False,src/main/java/org/apache/commons/math/filter/ProcessModel.java,src/main/java/org/apache/commons/math/filter/ProcessModel.java,43, Returns the process noise matrix.
True,src/main/java/org/apache/commons/math/filter/ProcessModel.java,src/main/java/org/apache/commons/math/filter/ProcessModel.java,43,* Returns the process noise matrix. This method is called by the
True,src/main/java/org/apache/commons/math/filter/ProcessModel.java,src/main/java/org/apache/commons/math/filter/ProcessModel.java,44,"* {@link KalmanFilter} every predict step, so implementations of this"
True,src/main/java/org/apache/commons/math/filter/ProcessModel.java,src/main/java/org/apache/commons/math/filter/ProcessModel.java,45,* interface may return a modified process noise depending on current
True,src/main/java/org/apache/commons/math/filter/ProcessModel.java,src/main/java/org/apache/commons/math/filter/ProcessModel.java,46,* iteration step.
True,src/main/java/org/apache/commons/math/filter/ProcessModel.java,src/main/java/org/apache/commons/math/filter/ProcessModel.java,49,* @see KalmanFilter#predict()
True,src/main/java/org/apache/commons/math/filter/ProcessModel.java,src/main/java/org/apache/commons/math/filter/ProcessModel.java,50,* @see KalmanFilter#predict(double[])
True,src/main/java/org/apache/commons/math/filter/ProcessModel.java,src/main/java/org/apache/commons/math/filter/ProcessModel.java,51,* @see KalmanFilter#predict(RealVector)
False,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,4, this work for additional information regarding copyright ownership.
False,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,7, the License.  You may obtain a copy of the License at
False,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,14, See the License for the specific language governing permissions and
False,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,15, limitations under the License.
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,3,* contributor license agreements. See the NOTICE file distributed with this
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,4,* work for additional information regarding copyright ownership. The ASF
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,5,"* licenses this file to You under the Apache License, Version 2.0 (the"
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,6,"* ""License""); you may not use this file except in compliance with the License."
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,7,* You may obtain a copy of the License at
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,8,* http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,9,"* or agreed to in writing, software distributed under the License is"
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,10,"* distributed on an ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,11,"* KIND, either express or implied. See the License for the specific language"
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,12,* governing permissions and limitations under the License.
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,28,* Test for {@link KalmanFilter}.
True,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java,30,* @version $Id$

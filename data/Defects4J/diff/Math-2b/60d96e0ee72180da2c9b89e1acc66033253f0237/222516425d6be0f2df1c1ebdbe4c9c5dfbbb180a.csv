is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math/FieldElement.java,src/main/java/org/apache/commons/math/FieldElement.java,42,* Returns the additive inverse of {@code this} element.
True,src/main/java/org/apache/commons/math/FieldElement.java,src/main/java/org/apache/commons/math/FieldElement.java,43,* @return the opposite of {@code this}.
True,src/main/java/org/apache/commons/math/FieldElement.java,src/main/java/org/apache/commons/math/FieldElement.java,45,T negate();
True,src/main/java/org/apache/commons/math/FieldElement.java,src/main/java/org/apache/commons/math/FieldElement.java,72,* Returns the multiplicative inverse of {@code this} element.
True,src/main/java/org/apache/commons/math/FieldElement.java,src/main/java/org/apache/commons/math/FieldElement.java,73,* @return the inverse of {@code this}.
True,src/main/java/org/apache/commons/math/FieldElement.java,src/main/java/org/apache/commons/math/FieldElement.java,75,T reciprocal();
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,297,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,298,public Complex reciprocal() {
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,299,if (isNaN) {
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,300,return NaN;
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,303,if (real == 0.0 && imaginary == 0.0) {
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,304,return NaN;
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,307,if (isInfinite) {
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,308,return ZERO;
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,311,if (FastMath.abs(real) < FastMath.abs(imaginary)) {
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,312,double q = real / imaginary;
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,313,double scale = 1. / (real * q + imaginary);
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,314,"return createComplex(scale * q, -scale);"
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,315,} else {
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,316,double q = imaginary / real;
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,317,double scale = 1. / (imaginary * q + real);
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,318,"return createComplex(scale, -scale * q);"
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1940,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1941,public Dfp reciprocal() {
True,src/main/java/org/apache/commons/math/dfp/Dfp.java,src/main/java/org/apache/commons/math/dfp/Dfp.java,1942,return field.getOne().divide(this);
True,src/main/java/org/apache/commons/math/util/BigReal.java,src/main/java/org/apache/commons/math/util/BigReal.java,239,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/util/BigReal.java,src/main/java/org/apache/commons/math/util/BigReal.java,240,public BigReal negate() {
True,src/main/java/org/apache/commons/math/util/BigReal.java,src/main/java/org/apache/commons/math/util/BigReal.java,241,return new BigReal(d.negate());
True,src/main/java/org/apache/commons/math/util/BigReal.java,src/main/java/org/apache/commons/math/util/BigReal.java,249,/** {@inheritDoc}} */
True,src/main/java/org/apache/commons/math/util/BigReal.java,src/main/java/org/apache/commons/math/util/BigReal.java,250,public BigReal reciprocal(){
True,src/main/java/org/apache/commons/math/util/BigReal.java,src/main/java/org/apache/commons/math/util/BigReal.java,251,"return new BigReal(BigDecimal.ONE.divide(d, scale, roundingMode));"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,302,@Test
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,303,public void testReciprocal() {
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,304,"Complex z = new Complex(5.0, 6.0);"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,305,Complex act = z.reciprocal();
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,306,double expRe = 5.0 / 61.0;
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,307,double expIm = -6.0 / 61.0;
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,308,"Assert.assertEquals(expRe, act.getReal(), FastMath.ulp(expRe));"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,309,"Assert.assertEquals(expIm, act.getImaginary(), FastMath.ulp(expIm));"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,312,@Test
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,313,public void testReciprocalReal() {
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,314,"Complex z = new Complex(-2.0, 0.0);"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,315,"Assert.assertEquals(new Complex(-0.5, 0.0), z.reciprocal());"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,318,@Test
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,319,public void testReciprocalImaginary() {
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,320,"Complex z = new Complex(0.0, -2.0);"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,321,"Assert.assertEquals(new Complex(0.0, 0.5), z.reciprocal());"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,324,@Test
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,325,public void testReciprocalInf() {
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,326,"Complex z = new Complex(neginf, inf);"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,327,Assert.assertTrue(z.reciprocal().equals(Complex.ZERO));
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,329,"z = new Complex(1, inf).reciprocal();"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,330,"Assert.assertEquals(z, Complex.ZERO);"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,333,@Test
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,334,public void testReciprocalZero() {
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,335,"Assert.assertEquals(Complex.ZERO.reciprocal(), Complex.NaN);"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,338,@Test
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,339,public void testReciprocalNaN() {
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,340,Assert.assertTrue(Complex.NaN.reciprocal().isNaN());
False,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,58,/ Generic test function.  Takes params x and y and tests them for
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,58,// Generic test function.  Takes params x and y and tests them for
False,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,65,f (!x.equals(y) && !x.unequal(y))  // NaNs involved
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,65,if (!x.equals(y) && !x.unequal(y))  // NaNs involved
False,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,117,"ield.newDfp(""2""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,117,"field.newDfp(""2""),"
False,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,121,"ield.newDfp(""0""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,121,"field.newDfp(""0""),"
False,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,125,"ield.newDfp(""0""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,125,"field.newDfp(""0""),"
False,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,129,"ield.newDfp(""-2""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,129,"field.newDfp(""-2""),"
False,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,135,"ield.newDfp(""1.0000000000000001""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,135,"field.newDfp(""1.0000000000000001""),"
False,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,139,"ield.newDfp(""1""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,139,"field.newDfp(""1""),"
False,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,143,"ield.newDfp(""1.01""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,143,"field.newDfp(""1.01""),"
False,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,147,"ield.newDfp(""1.""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,147,"field.newDfp(""1.""),"
False,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,151,"ield.newDfp(""1.0000000000000002""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,151,"field.newDfp(""1.0000000000000002""),"
False,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,155,"ield.newDfp(""1.0000000000000001""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,155,"field.newDfp(""1.0000000000000001""),"
False,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,159,"ield.newDfp(""1.0000000000000002""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,159,"field.newDfp(""1.0000000000000002""),"
False,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,163,"ield.newDfp(""11.22222222222222222222""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,163,"field.newDfp(""11.22222222222222222222""),"
False,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,167,"ield.newDfp(""1111111111111111.2222""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,167,"field.newDfp(""1111111111111111.2222""),"
False,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,171,"ield.newDfp(""11111111111111111111""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,171,"field.newDfp(""11111111111111111111""),"
False,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,175,"ield.newDfp(""9.9999999999999999998e131071""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,175,"field.newDfp(""9.9999999999999999998e131071""),"
False,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,179,"inf,"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,179,"pinf,"
False,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,183,"inf,"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,183,"ninf,"
False,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,187,"ield.newDfp(""-9.9999999999999999998e131071""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,187,"field.newDfp(""-9.9999999999999999998e131071""),"
False,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,191,"ield.newDfp(""2e-131072""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,191,"field.newDfp(""2e-131072""),"
False,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,195,"ield.newDfp(""1e-131073""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,195,"field.newDfp(""1e-131073""),"
False,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,199,"ield.newDfp(""1e-131073""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,199,"field.newDfp(""1e-131073""),"
False,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,203,"ield.newDfp(""1e-131088""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,203,"field.newDfp(""1e-131088""),"
False,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,207,"ield.newDfp(""0""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,207,"field.newDfp(""0""),"
False,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,211,"ield.newDfp(""0.99999999999999999999""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,211,"field.newDfp(""0.99999999999999999999""),"
False,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,215,"ield.newDfp(""0.00000000000000000001""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,215,"field.newDfp(""0.00000000000000000001""),"
False,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,219,"ield.newDfp(""1""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,219,"field.newDfp(""1""),"
False,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,223,"ield.newDfp(""0""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,223,"field.newDfp(""0""),"
False,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,227,"ield.newDfp(""0""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,227,"field.newDfp(""0""),"
False,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,231,"ield.newDfp(""0""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,231,"field.newDfp(""0""),"
False,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,235,"ield.newDfp(""-0""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,235,"field.newDfp(""-0""),"
False,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,239,"ield.newDfp(""1e-20""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,239,"field.newDfp(""1e-20""),"
False,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,243,"ield.newDfp(""1e-40""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,243,"field.newDfp(""1e-40""),"
False,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,247,"an,"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,247,"nan,"
False,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,251,"an,"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,251,"nan,"
False,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,255,"inf,"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,255,"ninf,"
False,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,259,"inf,"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,259,"pinf,"
False,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,263,"inf,"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,263,"pinf,"
False,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,267,"inf,"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,267,"pinf,"
False,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,271,"inf,"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,271,"pinf,"
False,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,275,"inf,"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,275,"pinf,"
False,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,279,"inf,"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,279,"pinf,"
False,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,283,"inf,"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,283,"pinf,"
False,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,287,"inf,"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,287,"ninf,"
False,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,291,"inf,"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,291,"ninf,"
False,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,295,"inf,"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,295,"ninf,"
False,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,299,"inf,"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,299,"ninf,"
False,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,303,"inf,"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,303,"ninf,"
False,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,307,"inf,"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,307,"ninf,"
False,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,348,", ""Add #56"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,348,"0, ""Add #56"");"
False,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,352,", ""Add #57"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,352,"0, ""Add #57"");"
False,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,356,", ""Add #58"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,356,"0, ""Add #58"");"
False,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,360,", ""Add #59"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,360,"0, ""Add #59"");"
False,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,406,/ check flags
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,406,// check flags
False,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,494,/ check flags
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,494,// check flags
False,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,585,/ check flags
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,585,// check flags
False,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,676,/ check flags
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,676,// check flags
False,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,759,"ield.newDfp(""1""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,759,"field.newDfp(""1""),"
False,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,763,"ield.newDfp(""1""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,763,"field.newDfp(""1""),"
False,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,767,"ield.newDfp(""-1""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,767,"field.newDfp(""-1""),"
False,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,771,"ield.newDfp(""-1""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,771,"field.newDfp(""-1""),"
False,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,776,"ield.newDfp(""6""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,776,"field.newDfp(""6""),"
False,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,780,"ield.newDfp(""6""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,780,"field.newDfp(""6""),"
False,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,784,"ield.newDfp(""-6""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,784,"field.newDfp(""-6""),"
False,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,788,"ield.newDfp(""-6""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,788,"field.newDfp(""-6""),"
False,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,792,"ield.newDfp(""-6""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,792,"field.newDfp(""-6""),"
False,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,796,"ield.newDfp(""6""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,796,"field.newDfp(""6""),"
False,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,802,"ield.newDfp(""-0""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,802,"field.newDfp(""-0""),"
False,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,806,"ield.newDfp(""-0""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,806,"field.newDfp(""-0""),"
False,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,810,"ield.newDfp(""0""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,810,"field.newDfp(""0""),"
False,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,814,"ield.newDfp(""0""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,814,"field.newDfp(""0""),"
False,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,839,"fpField.FLAG_OVERFLOW, ""Multiply #19"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,839,"DfpField.FLAG_OVERFLOW, ""Multiply #19"");"
False,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,843,", ""Multiply #20"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,843,"0, ""Multiply #20"");"
False,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,847,"fpField.FLAG_OVERFLOW, ""Multiply #22"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,847,"DfpField.FLAG_OVERFLOW, ""Multiply #22"");"
False,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,851,", ""Multiply #23"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,851,"0, ""Multiply #23"");"
False,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,922,"an,"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,922,"nan,"
False,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,926,"an,"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,926,"nan,"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1038,@Test
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1039,public void testReciprocal()
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1041,"test(nan.reciprocal(),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1042,"nan,"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1043,"0, ""Reciprocal #1"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1045,"test(field.newDfp(""0"").reciprocal(),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1046,"pinf,"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1047,"DfpField.FLAG_DIV_ZERO, ""Reciprocal #2"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1049,"test(field.newDfp(""-0"").reciprocal(),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1050,"ninf,"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1051,"DfpField.FLAG_DIV_ZERO, ""Reciprocal #3"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1053,"test(field.newDfp(""3"").reciprocal(),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1054,"field.newDfp(""0.33333333333333333333""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1055,"DfpField.FLAG_INEXACT, ""Reciprocal #4"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1057,"test(field.newDfp(""6"").reciprocal(),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1058,"field.newDfp(""0.16666666666666666667""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1059,"DfpField.FLAG_INEXACT, ""Reciprocal #5"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1061,"test(field.newDfp(""1"").reciprocal(),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1062,"field.newDfp(""1""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1063,"0, ""Reciprocal #6"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1065,"test(field.newDfp(""-1"").reciprocal(),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1066,"field.newDfp(""-1""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1067,"0, ""Reciprocal #7"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1069,"test(pinf.reciprocal(),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1070,"field.newDfp(""0""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1071,"0, ""Reciprocal #8"");"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1073,"test(ninf.reciprocal(),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1074,"field.newDfp(""-0""),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1075,"0, ""Reciprocal #9"");"
False,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1042,"an,"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1082,"nan,"
False,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1161,"est(field.newDfp(""1e-131092"").nextAfter(ninf),"
True,src/test/java/org/apache/commons/math/dfp/DfpTest.java,src/test/java/org/apache/commons/math/dfp/DfpTest.java,1201,"test(field.newDfp(""1e-131092"").nextAfter(ninf),"
False,src/test/java/org/apache/commons/math/util/BigRealTest.java,src/test/java/org/apache/commons/math/util/BigRealTest.java,32,"ssert.assertEquals(1.625, new BigReal(new BigDecimal(""1.625"")).doubleValue(), 1.0e-15);"
False,src/test/java/org/apache/commons/math/util/BigRealTest.java,src/test/java/org/apache/commons/math/util/BigRealTest.java,33,"ssert.assertEquals(-5.0, new BigReal(new BigInteger(""-5"")).doubleValue(), 1.0e-15);"
False,src/test/java/org/apache/commons/math/util/BigRealTest.java,src/test/java/org/apache/commons/math/util/BigRealTest.java,34,"ssert.assertEquals(-5.0, new BigReal(new BigInteger(""-5""), MathContext.DECIMAL64).doubleValue(), 1.0e-15);"
False,src/test/java/org/apache/commons/math/util/BigRealTest.java,src/test/java/org/apache/commons/math/util/BigRealTest.java,35,"ssert.assertEquals(0.125, new BigReal(new BigInteger(""125""), 3).doubleValue(), 1.0e-15);"
False,src/test/java/org/apache/commons/math/util/BigRealTest.java,src/test/java/org/apache/commons/math/util/BigRealTest.java,36,"ssert.assertEquals(0.125, new BigReal(new BigInteger(""125""), 3, MathContext.DECIMAL64).doubleValue(), 1.0e-15);"
False,src/test/java/org/apache/commons/math/util/BigRealTest.java,src/test/java/org/apache/commons/math/util/BigRealTest.java,37,"ssert.assertEquals(1.625, new BigReal(new char[] { '1', '.', '6', '2', '5' }).doubleValue(), 1.0e-15);"
False,src/test/java/org/apache/commons/math/util/BigRealTest.java,src/test/java/org/apache/commons/math/util/BigRealTest.java,38,"ssert.assertEquals(1.625, new BigReal(new char[] { 'A', 'A', '1', '.', '6', '2', '5', '9' }, 2, 5).doubleValue(), 1.0e-15);"
False,src/test/java/org/apache/commons/math/util/BigRealTest.java,src/test/java/org/apache/commons/math/util/BigRealTest.java,39,"ssert.assertEquals(1.625, new BigReal(new char[] { 'A', 'A', '1', '.', '6', '2', '5', '9' }, 2, 5, MathContext.DECIMAL64).doubleValue(), 1.0e-15);"
False,src/test/java/org/apache/commons/math/util/BigRealTest.java,src/test/java/org/apache/commons/math/util/BigRealTest.java,40,"ssert.assertEquals(1.625, new BigReal(new char[] { '1', '.', '6', '2', '5' }, MathContext.DECIMAL64).doubleValue(), 1.0e-15);"
True,src/test/java/org/apache/commons/math/util/BigRealTest.java,src/test/java/org/apache/commons/math/util/BigRealTest.java,31,"Assert.assertEquals(1.625,"
True,src/test/java/org/apache/commons/math/util/BigRealTest.java,src/test/java/org/apache/commons/math/util/BigRealTest.java,32,"new BigReal(new BigDecimal(""1.625"")).doubleValue(),"
True,src/test/java/org/apache/commons/math/util/BigRealTest.java,src/test/java/org/apache/commons/math/util/BigRealTest.java,33,1.0e-15);
True,src/test/java/org/apache/commons/math/util/BigRealTest.java,src/test/java/org/apache/commons/math/util/BigRealTest.java,34,"Assert.assertEquals(-5.0,"
True,src/test/java/org/apache/commons/math/util/BigRealTest.java,src/test/java/org/apache/commons/math/util/BigRealTest.java,35,"new BigReal(new BigInteger(""-5"")).doubleValue(),"
True,src/test/java/org/apache/commons/math/util/BigRealTest.java,src/test/java/org/apache/commons/math/util/BigRealTest.java,36,1.0e-15);
True,src/test/java/org/apache/commons/math/util/BigRealTest.java,src/test/java/org/apache/commons/math/util/BigRealTest.java,37,"Assert.assertEquals(-5.0, new BigReal(new BigInteger(""-5""),"
True,src/test/java/org/apache/commons/math/util/BigRealTest.java,src/test/java/org/apache/commons/math/util/BigRealTest.java,38,MathContext.DECIMAL64)
True,src/test/java/org/apache/commons/math/util/BigRealTest.java,src/test/java/org/apache/commons/math/util/BigRealTest.java,39,".doubleValue(), 1.0e-15);"
True,src/test/java/org/apache/commons/math/util/BigRealTest.java,src/test/java/org/apache/commons/math/util/BigRealTest.java,40,Assert
True,src/test/java/org/apache/commons/math/util/BigRealTest.java,src/test/java/org/apache/commons/math/util/BigRealTest.java,41,".assertEquals(0.125,"
True,src/test/java/org/apache/commons/math/util/BigRealTest.java,src/test/java/org/apache/commons/math/util/BigRealTest.java,42,"new BigReal(new BigInteger(""125""), 3).doubleValue(),"
True,src/test/java/org/apache/commons/math/util/BigRealTest.java,src/test/java/org/apache/commons/math/util/BigRealTest.java,43,1.0e-15);
True,src/test/java/org/apache/commons/math/util/BigRealTest.java,src/test/java/org/apache/commons/math/util/BigRealTest.java,44,"Assert.assertEquals(0.125, new BigReal(new BigInteger(""125""), 3,"
True,src/test/java/org/apache/commons/math/util/BigRealTest.java,src/test/java/org/apache/commons/math/util/BigRealTest.java,45,MathContext.DECIMAL64)
True,src/test/java/org/apache/commons/math/util/BigRealTest.java,src/test/java/org/apache/commons/math/util/BigRealTest.java,46,".doubleValue(), 1.0e-15);"
True,src/test/java/org/apache/commons/math/util/BigRealTest.java,src/test/java/org/apache/commons/math/util/BigRealTest.java,47,"Assert.assertEquals(1.625, new BigReal(new char[] {"
True,src/test/java/org/apache/commons/math/util/BigRealTest.java,src/test/java/org/apache/commons/math/util/BigRealTest.java,48,"'1', '.', '6', '2', '5'"
True,src/test/java/org/apache/commons/math/util/BigRealTest.java,src/test/java/org/apache/commons/math/util/BigRealTest.java,49,"}).doubleValue(), 1.0e-15);"
True,src/test/java/org/apache/commons/math/util/BigRealTest.java,src/test/java/org/apache/commons/math/util/BigRealTest.java,50,"Assert.assertEquals(1.625, new BigReal(new char[] {"
True,src/test/java/org/apache/commons/math/util/BigRealTest.java,src/test/java/org/apache/commons/math/util/BigRealTest.java,51,"'A', 'A', '1', '.', '6', '2', '5', '9'"
True,src/test/java/org/apache/commons/math/util/BigRealTest.java,src/test/java/org/apache/commons/math/util/BigRealTest.java,52,"}, 2, 5).doubleValue(), 1.0e-15);"
True,src/test/java/org/apache/commons/math/util/BigRealTest.java,src/test/java/org/apache/commons/math/util/BigRealTest.java,53,"Assert.assertEquals(1.625, new BigReal(new char[] {"
True,src/test/java/org/apache/commons/math/util/BigRealTest.java,src/test/java/org/apache/commons/math/util/BigRealTest.java,54,"'A', 'A', '1', '.', '6', '2', '5', '9'"
True,src/test/java/org/apache/commons/math/util/BigRealTest.java,src/test/java/org/apache/commons/math/util/BigRealTest.java,55,"}, 2, 5, MathContext.DECIMAL64).doubleValue(), 1.0e-15);"
True,src/test/java/org/apache/commons/math/util/BigRealTest.java,src/test/java/org/apache/commons/math/util/BigRealTest.java,56,"Assert.assertEquals(1.625, new BigReal(new char[] {"
True,src/test/java/org/apache/commons/math/util/BigRealTest.java,src/test/java/org/apache/commons/math/util/BigRealTest.java,57,"'1', '.', '6', '2', '5'"
True,src/test/java/org/apache/commons/math/util/BigRealTest.java,src/test/java/org/apache/commons/math/util/BigRealTest.java,58,"}, MathContext.DECIMAL64).doubleValue(), 1.0e-15);"
False,src/test/java/org/apache/commons/math/util/BigRealTest.java,src/test/java/org/apache/commons/math/util/BigRealTest.java,42,"ssert.assertEquals(1.625, new BigReal(1.625, MathContext.DECIMAL64).doubleValue(), 1.0e-15);"
True,src/test/java/org/apache/commons/math/util/BigRealTest.java,src/test/java/org/apache/commons/math/util/BigRealTest.java,60,"Assert.assertEquals(1.625, new BigReal(1.625, MathContext.DECIMAL64)"
True,src/test/java/org/apache/commons/math/util/BigRealTest.java,src/test/java/org/apache/commons/math/util/BigRealTest.java,61,".doubleValue(), 1.0e-15);"
False,src/test/java/org/apache/commons/math/util/BigRealTest.java,src/test/java/org/apache/commons/math/util/BigRealTest.java,44,"ssert.assertEquals(-5.0, new BigReal(-5, MathContext.DECIMAL64).doubleValue(), 1.0e-15);"
True,src/test/java/org/apache/commons/math/util/BigRealTest.java,src/test/java/org/apache/commons/math/util/BigRealTest.java,63,"Assert.assertEquals(-5.0, new BigReal(-5, MathContext.DECIMAL64)"
True,src/test/java/org/apache/commons/math/util/BigRealTest.java,src/test/java/org/apache/commons/math/util/BigRealTest.java,64,".doubleValue(), 1.0e-15);"
False,src/test/java/org/apache/commons/math/util/BigRealTest.java,src/test/java/org/apache/commons/math/util/BigRealTest.java,46,"ssert.assertEquals(-5.0, new BigReal(-5l, MathContext.DECIMAL64).doubleValue(), 1.0e-15);"
True,src/test/java/org/apache/commons/math/util/BigRealTest.java,src/test/java/org/apache/commons/math/util/BigRealTest.java,66,"Assert.assertEquals(-5.0, new BigReal(-5l, MathContext.DECIMAL64)"
True,src/test/java/org/apache/commons/math/util/BigRealTest.java,src/test/java/org/apache/commons/math/util/BigRealTest.java,67,".doubleValue(), 1.0e-15);"
False,src/test/java/org/apache/commons/math/util/BigRealTest.java,src/test/java/org/apache/commons/math/util/BigRealTest.java,48,"ssert.assertEquals(1.625, new BigReal(""1.625"", MathContext.DECIMAL64).doubleValue(), 1.0e-15);"
True,src/test/java/org/apache/commons/math/util/BigRealTest.java,src/test/java/org/apache/commons/math/util/BigRealTest.java,69,"Assert.assertEquals(1.625, new BigReal(""1.625"", MathContext.DECIMAL64)"
True,src/test/java/org/apache/commons/math/util/BigRealTest.java,src/test/java/org/apache/commons/math/util/BigRealTest.java,70,".doubleValue(), 1.0e-15);"
False,src/test/java/org/apache/commons/math/util/BigRealTest.java,src/test/java/org/apache/commons/math/util/BigRealTest.java,75,"ssert.assertEquals( -7.5308643, a.subtract(b).doubleValue(), 1.0e-15);"
True,src/test/java/org/apache/commons/math/util/BigRealTest.java,src/test/java/org/apache/commons/math/util/BigRealTest.java,97,"Assert.assertEquals(-7.5308643, a.subtract(b).doubleValue(), 1.0e-15);"
True,src/test/java/org/apache/commons/math/util/BigRealTest.java,src/test/java/org/apache/commons/math/util/BigRealTest.java,100,@Test
True,src/test/java/org/apache/commons/math/util/BigRealTest.java,src/test/java/org/apache/commons/math/util/BigRealTest.java,101,public void testNegate() {
True,src/test/java/org/apache/commons/math/util/BigRealTest.java,src/test/java/org/apache/commons/math/util/BigRealTest.java,102,"BigReal a = new BigReal(""1.2345678"");"
True,src/test/java/org/apache/commons/math/util/BigRealTest.java,src/test/java/org/apache/commons/math/util/BigRealTest.java,103,"BigReal zero = new BigReal(""0.0000000"");"
True,src/test/java/org/apache/commons/math/util/BigRealTest.java,src/test/java/org/apache/commons/math/util/BigRealTest.java,104,"Assert.assertEquals(a.negate().add(a), zero);"
True,src/test/java/org/apache/commons/math/util/BigRealTest.java,src/test/java/org/apache/commons/math/util/BigRealTest.java,105,"Assert.assertEquals(a.add(a.negate()), zero);"
True,src/test/java/org/apache/commons/math/util/BigRealTest.java,src/test/java/org/apache/commons/math/util/BigRealTest.java,106,"Assert.assertEquals(zero, zero.negate());"
True,src/test/java/org/apache/commons/math/util/BigRealTest.java,src/test/java/org/apache/commons/math/util/BigRealTest.java,116,@Test
True,src/test/java/org/apache/commons/math/util/BigRealTest.java,src/test/java/org/apache/commons/math/util/BigRealTest.java,117,public void testReciprocal() {
True,src/test/java/org/apache/commons/math/util/BigRealTest.java,src/test/java/org/apache/commons/math/util/BigRealTest.java,118,"BigReal a = new BigReal(""1.2345678"");"
True,src/test/java/org/apache/commons/math/util/BigRealTest.java,src/test/java/org/apache/commons/math/util/BigRealTest.java,119,"double eps = FastMath.pow(10., -a.getScale());"
True,src/test/java/org/apache/commons/math/util/BigRealTest.java,src/test/java/org/apache/commons/math/util/BigRealTest.java,120,"BigReal one = new BigReal(""1.0000000"");"
True,src/test/java/org/apache/commons/math/util/BigRealTest.java,src/test/java/org/apache/commons/math/util/BigRealTest.java,121,BigReal b = a.reciprocal();
True,src/test/java/org/apache/commons/math/util/BigRealTest.java,src/test/java/org/apache/commons/math/util/BigRealTest.java,122,BigReal r = one.subtract(a.multiply(b));
True,src/test/java/org/apache/commons/math/util/BigRealTest.java,src/test/java/org/apache/commons/math/util/BigRealTest.java,123,Assert.assertTrue(FastMath.abs(r.doubleValue()) <= eps);
True,src/test/java/org/apache/commons/math/util/BigRealTest.java,src/test/java/org/apache/commons/math/util/BigRealTest.java,124,r = one.subtract(b.multiply(a));
True,src/test/java/org/apache/commons/math/util/BigRealTest.java,src/test/java/org/apache/commons/math/util/BigRealTest.java,125,Assert.assertTrue(FastMath.abs(r.doubleValue()) <= eps);
False,src/test/java/org/apache/commons/math/util/BigRealTest.java,src/test/java/org/apache/commons/math/util/BigRealTest.java,101,"igDecimal pi = new BigDecimal(""3.1415926535897932384626433832795028841971693993751"");"
True,src/test/java/org/apache/commons/math/util/BigRealTest.java,src/test/java/org/apache/commons/math/util/BigRealTest.java,144,BigDecimal pi = new BigDecimal(
True,src/test/java/org/apache/commons/math/util/BigRealTest.java,src/test/java/org/apache/commons/math/util/BigRealTest.java,145,"""3.1415926535897932384626433832795028841971693993751"");"
False,src/test/java/org/apache/commons/math/util/BigRealTest.java,src/test/java/org/apache/commons/math/util/BigRealTest.java,103,"ssert.assertEquals(new BigDecimal(0.5), new BigReal(1.0 / 2.0).bigDecimalValue());"
True,src/test/java/org/apache/commons/math/util/BigRealTest.java,src/test/java/org/apache/commons/math/util/BigRealTest.java,147,"Assert.assertEquals(new BigDecimal(0.5),"
True,src/test/java/org/apache/commons/math/util/BigRealTest.java,src/test/java/org/apache/commons/math/util/BigRealTest.java,148,new BigReal(1.0 / 2.0).bigDecimalValue());
False,src/test/java/org/apache/commons/math/util/BigRealTest.java,src/test/java/org/apache/commons/math/util/BigRealTest.java,124,"ew BigReal(3.0), BigReal.ONE, BigReal.ZERO,"
False,src/test/java/org/apache/commons/math/util/BigRealTest.java,src/test/java/org/apache/commons/math/util/BigRealTest.java,125,"ew BigReal(17), new BigReal(FastMath.PI),"
False,src/test/java/org/apache/commons/math/util/BigRealTest.java,src/test/java/org/apache/commons/math/util/BigRealTest.java,126,ew BigReal(-2.5)
True,src/test/java/org/apache/commons/math/util/BigRealTest.java,src/test/java/org/apache/commons/math/util/BigRealTest.java,169,"new BigReal(3.0), BigReal.ONE, BigReal.ZERO, new BigReal(17),"
True,src/test/java/org/apache/commons/math/util/BigRealTest.java,src/test/java/org/apache/commons/math/util/BigRealTest.java,170,"new BigReal(FastMath.PI), new BigReal(-2.5)"

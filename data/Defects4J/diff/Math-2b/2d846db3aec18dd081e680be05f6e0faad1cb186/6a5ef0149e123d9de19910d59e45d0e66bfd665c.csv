is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,104, The implementation of this method is based on equations 14-17 of:
True,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,104,* The implementation of this method is based on the modified Lentz algorithm as described
True,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,105,* on page 18 ff. in:
False,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,107,"   Eric W. Weisstein. ""Continued Fraction."" From MathWorld--A Wolfram Web"
False,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,108,"   Resource. <a target=""_blank"""
False,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,109,"   href=""http://mathworld.wolfram.com/ContinuedFraction.html"">"
False,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,110,   http://mathworld.wolfram.com/ContinuedFraction.html</a>
True,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,108,"*   I. J. Thompson,  A. R. Barnett. ""Coulomb and Bessel Functions of Complex Arguments and Order."""
True,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,109,"*   <a target=""_blank"" href=""http://www.fresco.org.uk/papers/Thompson-JCP64p490.pdf"">"
True,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,110,*   http://www.fresco.org.uk/papers/Thompson-JCP64p490.pdf</a>
False,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,113, The recurrence relationship defined in those equations can result in
False,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,114, very large intermediate results which can result in numerical overflow.
False,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,115," As a means to combat these overflow conditions, the intermediate results"
False,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,116, are scaled whenever they threaten to become numerically unstable.</p>
True,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,113,* Note: the implementation uses the terms a<sub>i</sub> and b<sub>i</sub> as defined in
True,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,114,"* <a href=""http://mathworld.wolfram.com/ContinuedFraction.html"">Continued Fraction / MathWorld</a>."
True,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,115,* </p>
False,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,125,ouble p0 = 1.0;
False,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,126,"ouble p1 = getA(0, x);"
False,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,127,ouble q0 = 0.0;
False,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,128,ouble q1 = 1.0;
False,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,129,ouble c = p1 / q1;
False,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,130,nt n = 0;
False,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,131,ouble relativeError = Double.MAX_VALUE;
False,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,132,hile (n < maxIterations && relativeError > epsilon) {
False,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,133,+n;
False,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,134,"ouble a = getA(n, x);"
False,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,135,"ouble b = getB(n, x);"
False,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,136,ouble p2 = a * p1 + b * p0;
False,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,137,ouble q2 = a * q1 + b * q0;
False,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,138,oolean infinite = false;
False,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,139,f (Double.isInfinite(p2) || Double.isInfinite(q2)) {
False,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,141, Need to scale. Try successive powers of the larger of a or b
False,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,142, up to 5th power. Throw ConvergenceException if one or both
False,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,143," of p2, q2 still overflow."
False,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,145,ouble scaleFactor = 1d;
False,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,146,ouble lastScaleFactor = 1d;
False,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,147,inal int maxPower = 5;
False,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,148,"inal double scale = FastMath.max(a,b);"
False,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,149,f (scale <= 0) {  // Can't scale
False,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,150,"hrow new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,"
False,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,151,);
False,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,153,nfinite = true;
False,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,154,or (int i = 0; i < maxPower; i++) {
False,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,155,astScaleFactor = scaleFactor;
False,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,156,caleFactor *= scale;
False,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,157,f (a != 0.0 && a > b) {
False,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,158,2 = p1 / lastScaleFactor + (b / scaleFactor * p0);
False,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,159,2 = q1 / lastScaleFactor + (b / scaleFactor * q0);
False,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,160, else if (b != 0) {
False,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,161,2 = (a / scaleFactor * p1) + p0 / lastScaleFactor;
False,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,162,2 = (a / scaleFactor * q1) + q0 / lastScaleFactor;
False,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,164,nfinite = Double.isInfinite(p2) || Double.isInfinite(q2);
False,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,165,f (!infinite) {
False,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,166,reak;
True,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,124,final double small = 1e-50;
True,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,125,"double hPrev = getA(0, x);"
True,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,127,// use the value of small as epsilon criteria for zero checks
True,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,128,"if (Precision.equals(hPrev, 0.0, small)) {"
True,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,129,hPrev = small;
False,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,171,f (infinite) {
False,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,172,/ Scaling failed
False,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,173,"hrow new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,"
False,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,174,);
True,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,132,int n = 1;
True,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,133,double dPrev = 0.0;
True,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,134,double cPrev = hPrev;
True,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,135,double hN = hPrev;
True,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,137,while (n < maxIterations) {
True,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,138,"final double a = getA(n, x);"
True,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,139,"final double b = getB(n, x);"
True,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,141,double dN = a + b * dPrev;
True,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,142,"if (Precision.equals(dN, 0.0, small)) {"
True,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,143,dN = small;
True,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,145,double cN = a + b / cPrev;
True,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,146,"if (Precision.equals(cN, 0.0, small)) {"
True,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,147,cN = small;
False,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,177,ouble r = p2 / q2;
True,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,150,dN = 1 / dN;
True,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,151,final double deltaN = cN * dN;
True,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,152,hN = hPrev * deltaN;
False,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,179,f (Double.isNaN(r)) {
True,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,154,if (Double.isInfinite(hN)) {
True,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,155,"throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,"
True,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,156,x);
True,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,158,if (Double.isNaN(hN)) {
False,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,183,elativeError = FastMath.abs(r / c - 1.0);
False,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,185,/ prepare for next iteration
False,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,186, = p2 / q2;
False,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,187,0 = p1;
False,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,188,1 = p2;
False,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,189,0 = q1;
False,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,190,1 = q2;
True,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,163,if (FastMath.abs(deltaN - 1.0) < epsilon) {
True,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,164,break;
True,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,167,dPrev = dN;
True,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,168,cPrev = cN;
True,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,169,hPrev = hN;
True,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,170,n++;
False,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,198,eturn c;
True,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,src/main/java/org/apache/commons/math3/util/ContinuedFraction.java,178,return hN;
True,src/test/java/org/apache/commons/math3/distribution/BinomialDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/BinomialDistributionTest.java,132,@Test
True,src/test/java/org/apache/commons/math3/distribution/BinomialDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/BinomialDistributionTest.java,133,public void testMath718() {
True,src/test/java/org/apache/commons/math3/distribution/BinomialDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/BinomialDistributionTest.java,134,// for large trials the evaluation of ContinuedFraction was inaccurate
True,src/test/java/org/apache/commons/math3/distribution/BinomialDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/BinomialDistributionTest.java,135,// do a sweep over several large trials to test if the current implementation is
True,src/test/java/org/apache/commons/math3/distribution/BinomialDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/BinomialDistributionTest.java,136,// numerically stable.
True,src/test/java/org/apache/commons/math3/distribution/BinomialDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/BinomialDistributionTest.java,138,for (int trials = 500000; trials < 20000000; trials += 100000) {
True,src/test/java/org/apache/commons/math3/distribution/BinomialDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/BinomialDistributionTest.java,139,"BinomialDistribution dist = new BinomialDistribution(trials, 0.5);"
True,src/test/java/org/apache/commons/math3/distribution/BinomialDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/BinomialDistributionTest.java,140,int p = dist.inverseCumulativeProbability(0.5);
True,src/test/java/org/apache/commons/math3/distribution/BinomialDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/BinomialDistributionTest.java,141,"Assert.assertEquals(trials / 2, p);"
True,src/test/java/org/apache/commons/math3/distribution/FDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/FDistributionTest.java,146,@Test
True,src/test/java/org/apache/commons/math3/distribution/FDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/FDistributionTest.java,147,public void testMath785() {
True,src/test/java/org/apache/commons/math3/distribution/FDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/FDistributionTest.java,148,// this test was failing due to inaccurate results from ContinuedFraction.
True,src/test/java/org/apache/commons/math3/distribution/FDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/FDistributionTest.java,150,try {
True,src/test/java/org/apache/commons/math3/distribution/FDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/FDistributionTest.java,151,double prob = 0.01;
True,src/test/java/org/apache/commons/math3/distribution/FDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/FDistributionTest.java,152,"FDistribution f = new FDistribution(200000, 200000);"
True,src/test/java/org/apache/commons/math3/distribution/FDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/FDistributionTest.java,153,double result = f.inverseCumulativeProbability(prob);
True,src/test/java/org/apache/commons/math3/distribution/FDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/FDistributionTest.java,154,Assert.assertTrue(result < 1.0);
True,src/test/java/org/apache/commons/math3/distribution/FDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/FDistributionTest.java,155,} catch (Exception e) {
True,src/test/java/org/apache/commons/math3/distribution/FDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/FDistributionTest.java,156,"Assert.fail(""Failing to calculate inverse cumulative probability"");"

is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,2," The Apache Software License, Version 1.1"
False,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
False,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,5, reserved.
False,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,7," Redistribution and use in source and binary forms, with or without"
False,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,8," modification, are permitted provided that the following conditions"
False,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,9, are met:
False,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,11, 1. Redistributions of source code must retain the above copyright
False,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,12,"    notice, this list of conditions and the following disclaimer."
False,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,14, 2. Redistributions in binary form must reproduce the above copyright
False,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,15,"    notice, this list of conditions and the following disclaimer in"
False,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,16,    the documentation and/or other materials provided with the
False,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,17,    distribution.
False,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,19," 3. The end-user documentation included with the redistribution, if"
False,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,20,"    any, must include the following acknowledgement:"
False,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,21,"       ""This product includes software developed by the"
False,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,22,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,23,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,24,    if and wherever such third-party acknowledgements normally appear.
False,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,26," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,27,"    Foundation"" must not be used to endorse or promote products derived"
False,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,28,    from this software without prior written permission. For written
False,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,29,"    permission, please contact apache@apache.org."
False,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,31," 5. Products derived from this software may not be called ""Apache"""
False,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,32,"    nor may ""Apache"" appear in their name without prior written"
False,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,33,    permission of the Apache Software Foundation.
False,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,38, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,39," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,46, SUCH DAMAGE.
False,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,49, This software consists of voluntary contributions made by many
False,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,50, individuals on behalf of the Apache Software Foundation.  For more
False,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,51," information on the Apache Software Foundation, please see"
False,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,52, <http://www.apache.org/>.
False,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,54,ackage org.apache.commons.math;
False,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,57, Error thrown when a numerical computation can not be performed because the
False,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,58, numerical result failed to converge to a finite value.
False,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,60, @version $Revision: 1.4 $ $Date: 2003/10/16 15:24:33 $
False,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,62,ublic class ConvergenceException extends MathException {
False,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,64, Default constructor.
False,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,66,ublic ConvergenceException() {
False,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,67,"his(null, null);"
False,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,71, Construct an exception with the given message.
False,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,72, @param message descriptive error message.
False,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,74,ublic ConvergenceException(String message) {
False,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,75,"his(message, null);"
False,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,79, Construct an exception with the given message and root cause.
False,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,80, @param message descriptive error message.
False,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,81, @param cause root cause.
False,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,83,"ublic ConvergenceException(String message, Throwable cause) {"
False,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,84,"uper(message, cause);"
False,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,88, Create an exception with a given root cause.
False,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,89, @param throwable caught exception causing this problem
False,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,91,ublic ConvergenceException(Throwable throwable) {
False,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,92,"his(null, throwable);"
False,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,2," The Apache Software License, Version 1.1"
False,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
False,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,5, reserved.
False,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,7," Redistribution and use in source and binary forms, with or without"
False,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,8," modification, are permitted provided that the following conditions"
False,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,9, are met:
False,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,11, 1. Redistributions of source code must retain the above copyright
False,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,12,"    notice, this list of conditions and the following disclaimer."
False,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,14, 2. Redistributions in binary form must reproduce the above copyright
False,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,15,"    notice, this list of conditions and the following disclaimer in"
False,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,16,    the documentation and/or other materials provided with the
False,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,17,    distribution.
False,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,19," 3. The end-user documentation included with the redistribution, if"
False,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,20,"    any, must include the following acknowledgement:"
False,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,21,"       ""This product includes software developed by the"
False,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,22,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,23,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,24,    if and wherever such third-party acknowledgements normally appear.
False,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,26," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,27,"    Foundation"" must not be used to endorse or promote products derived"
False,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,28,    from this software without prior written permission. For written
False,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,29,"    permission, please contact apache@apache.org."
False,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,31," 5. Products derived from this software may not be called ""Apache"""
False,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,32,"    nor may ""Apache"" appear in their name without prior written"
False,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,33,    permission of the Apache Software Foundation.
False,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,38, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,39," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,46, SUCH DAMAGE.
False,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,49, This software consists of voluntary contributions made by many
False,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,50, individuals on behalf of the Apache Software Foundation.  For more
False,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,51," information on the Apache Software Foundation, please see"
False,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,52, <http://www.apache.org/>.
False,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,54,ackage org.apache.commons.math;
False,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,57, Signals a configuration problem with any of the factory methods.
False,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,58, @version $Revision: 1.9 $ $Date: 2003/10/16 15:24:33 $
False,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,60,ublic class MathConfigurationException extends MathException {
False,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,63, Default constructor.
False,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,65,ublic MathConfigurationException() {
False,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,66,"his(null, null);"
False,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,70, Construct an exception with the given message.
False,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,71, @param message message describing the problem
False,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,73,ublic MathConfigurationException(final String message) {
False,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,74,"his(message, null);"
False,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,78, Construct an exception with the given message and root cause.
False,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,79, @param message message describing the problem
False,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,80, @param throwable caught exception causing this problem
False,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,82,ublic MathConfigurationException(
False,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,83,"inal String message,"
False,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,84,inal Throwable throwable) {
False,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,85,"uper(message, throwable);"
False,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,89, Construct an exception with the given root cause.
False,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,90, @param throwable caught exception causing this problem
False,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,92,ublic MathConfigurationException(final Throwable throwable) {
False,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,93,"his(null, throwable);"
False,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,2," The Apache Software License, Version 1.1"
False,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
False,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,5, reserved.
False,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,7," Redistribution and use in source and binary forms, with or without"
False,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,8," modification, are permitted provided that the following conditions"
False,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,9, are met:
False,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,11, 1. Redistributions of source code must retain the above copyright
False,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,12,"    notice, this list of conditions and the following disclaimer."
False,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,14, 2. Redistributions in binary form must reproduce the above copyright
False,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,15,"    notice, this list of conditions and the following disclaimer in"
False,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,16,    the documentation and/or other materials provided with the
False,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,17,    distribution.
False,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,19," 3. The end-user documentation included with the redistribution, if"
False,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,20,"    any, must include the following acknowledgement:"
False,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,21,"       ""This product includes software developed by the"
False,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,22,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,23,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,24,    if and wherever such third-party acknowledgements normally appear.
False,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,26," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,27,"    Foundation"" must not be used to endorse or promote products derived"
False,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,28,    from this software without prior written permission. For written
False,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,29,"    permission, please contact apache@apache.org."
False,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,31," 5. Products derived from this software may not be called ""Apache"""
False,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,32,"    nor may ""Apache"" appear in their name without prior written"
False,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,33,    permission of the Apache Software Foundation.
False,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,38, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,39," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,46, SUCH DAMAGE.
False,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,49, This software consists of voluntary contributions made by many
False,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,50, individuals on behalf of the Apache Software Foundation.  For more
False,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,51," information on the Apache Software Foundation, please see"
False,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,52, <http://www.apache.org/>.
False,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,54,ackage org.apache.commons.math;
False,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,56,mport org.apache.commons.lang.exception.NestableException;
False,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,59, A generic exception indicating problems in the math package.
False,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,60, @version $Revision: 1.8 $ $Date: 2003/10/16 15:24:33 $
False,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,62,ublic class MathException extends NestableException {
False,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,65, Constructs a MathException
False,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,67,ublic MathException() {
False,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,68,"his(null, null);"
False,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,72, Create an exception with a given error message.
False,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,73, @param message message describing the problem
False,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,75,ublic MathException(final String message) {
False,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,76,"his(message, null);"
False,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,80, Create an exception with a given error message and root cause.
False,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,81, @param message message describing the problem
False,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,82, @param throwable caught exception causing this problem
False,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,84,"ublic MathException(final String message, final Throwable throwable) {"
False,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,85,"uper(message, throwable);"
False,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,89, Create an exception with a given root cause.
False,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,90, @param throwable caught exception causing this problem
False,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,92,ublic MathException(final Throwable throwable) {
False,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,93,"his(null, throwable);"
False,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,2," The Apache Software License, Version 1.1"
False,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
False,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,5, reserved.
False,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,7," Redistribution and use in source and binary forms, with or without"
False,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,8," modification, are permitted provided that the following conditions"
False,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,9, are met:
False,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,11, 1. Redistributions of source code must retain the above copyright
False,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,12,"    notice, this list of conditions and the following disclaimer."
False,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,14, 2. Redistributions in binary form must reproduce the above copyright
False,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,15,"    notice, this list of conditions and the following disclaimer in"
False,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,16,    the documentation and/or other materials provided with the
False,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,17,    distribution.
False,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,19," 3. The end-user documentation included with the redistribution, if"
False,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,20,"    any, must include the following acknowledgement:"
False,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,21,"       ""This product includes software developed by the"
False,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,22,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,23,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,24,    if and wherever such third-party acknowledgements normally appear.
False,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,26," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,27,"    Foundation"" must not be used to endorse or promote products derived"
False,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,28,    from this software without prior written permission. For written
False,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,29,"    permission, please contact apache@apache.org."
False,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,31," 5. Products derived from this software may not be called ""Apache"""
False,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,32,"    nor may ""Apache"" appear in their name without prior written"
False,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,33,    permission of the Apache Software Foundation.
False,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,38, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,39," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,46, SUCH DAMAGE.
False,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,49, This software consists of voluntary contributions made by many
False,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,50, individuals on behalf of the Apache Software Foundation.  For more
False,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,51," information on the Apache Software Foundation, please see"
False,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,52, <http://www.apache.org/>.
False,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,54,ackage org.apache.commons.math.analysis;
False,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,56,mport org.apache.commons.math.MathException;
False,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,59, Provide the bisection algorithm for solving for zeros of real univariate
False,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,60, functions.  It will only search for one zero in the given interval.  The
False,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,61, function is supposed to be continuous but not necessarily smooth.
False,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,62, @version $Revision: 1.5 $ $Date: 2003/10/16 15:24:31 $
False,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,64,ublic class BisectionSolver extends UnivariateRealSolverImpl {
False,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,66, Construct a solver for the given function.
False,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,67, @param f function to solve.
False,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,69,ublic BisectionSolver(UnivariateRealFunction f) {
False,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,70,"uper(f, 100, 1E-6);"
False,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,74, Solve for a zero in the given interval.
False,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,75, @param min the lower bound for the interval.
False,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,76, @param max the upper bound for the interval.
False,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,77, @param initial the start value to use (ignored).
False,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,78, @return the value where the function is zero
False,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,79, @throws MathException if the iteration count was exceeded or the
False,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,80,  solver detects convergence problems otherwise.
False,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,82,"ublic double solve(double min, double max, double initial)"
False,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,83,hrows MathException {
False,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,85,"eturn solve(min, max);"
False,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,89, Solve for a zero root in the given interval.
False,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,90, @param min the lower bound for the interval.
False,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,91, @param max the upper bound for the interval.
False,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,92, @return the value where the function is zero
False,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,93, @throws MathException if the iteration count was exceeded or the
False,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,94,  solver detects convergence problems otherwise.
False,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,96,"ublic double solve(double min, double max) throws MathException {"
False,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,97,learResult();
False,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,99,ouble m;
False,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,100,ouble fm;
False,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,101,ouble fmin;
False,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,103,nt i = 0;
False,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,104,hile (i < maximalIterationCount) {
False,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,105," = midpoint(min, max);"
False,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,106,min = f.value(min);
False,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,107,m = f.value(m);
False,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,109,f (fm * fmin > 0.0) {
False,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,110,/ max and m bracket the root.
False,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,111,in = m;
False,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,112,min = fm;
False,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,113, else {
False,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,114,/ min and m bracket the root.
False,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,115,ax = m;
False,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,118,f (Math.abs(max - min) <= absoluteAccuracy) {
False,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,119," = midpoint(min, max);"
False,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,120,"etResult(m, i);"
False,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,121,eturn m;
False,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,123,+i;
False,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,126,"hrow new MathException(""Maximal iteration number exceeded"");"
False,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,130, Compute the midpoint of two values.
False,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,131, @param a first value.
False,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,132, @param b second value.
False,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,133, @return the midpoint.
False,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,135,"ublic static double midpoint(double a, double b) {"
False,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,136,eturn (a + b) * .5;
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,2," The Apache Software License, Version 1.1"
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,5, reserved.
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,7," Redistribution and use in source and binary forms, with or without"
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,8," modification, are permitted provided that the following conditions"
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,9, are met:
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,11, 1. Redistributions of source code must retain the above copyright
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,12,"    notice, this list of conditions and the following disclaimer."
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,14, 2. Redistributions in binary form must reproduce the above copyright
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,15,"    notice, this list of conditions and the following disclaimer in"
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,16,    the documentation and/or other materials provided with the
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,17,    distribution.
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,19," 3. The end-user documentation included with the redistribution, if"
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,20,"    any, must include the following acknowledgement:"
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,21,"       ""This product includes software developed by the"
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,22,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,23,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,24,    if and wherever such third-party acknowledgements normally appear.
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,26," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,27,"    Foundation"" must not be used to endorse or promote products derived"
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,28,    from this software without prior written permission. For written
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,29,"    permission, please contact apache@apache.org."
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,31," 5. Products derived from this software may not be called ""Apache"""
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,32,"    nor may ""Apache"" appear in their name without prior written"
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,33,    permission of the Apache Software Foundation.
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,38, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,39," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,46, SUCH DAMAGE.
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,49, This software consists of voluntary contributions made by many
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,50, individuals on behalf of the Apache Software Foundation.  For more
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,51," information on the Apache Software Foundation, please see"
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,52, <http://www.apache.org/>.
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,54,ackage org.apache.commons.math.analysis;
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,56,mport org.apache.commons.math.MathException;
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,59, Provide the Brent algorithm for solving for zeros of real univariate
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,60, functions.
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,61, It will only search for one zero in the given interval.
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,62, The function is supposed to be continuous but not necessarily smooth.
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,64, @version $Revision: 1.6 $ $Date: 2003/10/16 15:24:31 $
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,66,ublic class BrentSolver extends UnivariateRealSolverImpl {
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,68, Construct a solver for the given function.
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,69, @param f function to solve.
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,71,ublic BrentSolver(UnivariateRealFunction f) {
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,72,"uper(f, 100, 1E-6);"
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,76, Solve for a zero in the given interval.
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,77, @param min the lower bound for the interval.
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,78, @param max the upper bound for the interval.
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,79, @param initial the start value to use (ignored).
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,80, @return the value where the function is zero
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,81, @throws MathException if the iteration count was exceeded or the
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,82,  solver detects convergence problems otherwise.
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,84,"ublic double solve(double min, double max, double initial)"
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,85,hrows MathException {
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,87,"eturn solve(min, max);"
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,91, Solve for a zero root in the given interval.
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,92, @param min the lower bound for the interval.
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,93, @param max the upper bound for the interval.
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,94, @return the value where the function is zero
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,95, @throws MathException if the iteration count was exceeded or the
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,96,  solver detects convergence problems otherwise.
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,98,"ublic double solve(double min, double max) throws MathException {"
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,99,learResult();
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,100,/ Index 0 is the old approximation for the root.
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,101,/ Index 1 is the last calculated approximation  for the root.
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,102,/ Index 2 is a bracket for the root with respect to x1.
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,103,ouble x0 = min;
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,104,ouble x1 = max;
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,105,ouble y0 = f.value(x0);
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,106,ouble y1 = f.value(x1);
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,107,f ((y0 > 0) == (y1 > 0)) {
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,108,"hrow new MathException(""Interval doesn't bracket a zero."");"
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,110,ouble x2 = x0;
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,111,ouble y2 = y0;
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,112,ouble delta = x1 - x0;
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,113,ouble oldDelta = delta;
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,115,nt i = 0;
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,116,hile (i < maximalIterationCount) {
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,117,f (Math.abs(y2) < Math.abs(y1)) {
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,118,0 = x1;
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,119,1 = x2;
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,120,2 = x0;
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,121,0 = y1;
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,122,1 = y2;
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,123,2 = y0;
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,125,f (Math.abs(y1) <= functionValueAccuracy) {
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,126,/ Avoid division by very small values. Assume
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,127,/ the iteration has converged (the problem may
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,128,/ still be ill conditioned)
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,129,"etResult(x1, i);"
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,130,eturn result;
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,132,ouble dx = (x2 - x1);
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,133,ouble tolerance =
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,134,"ath.max(relativeAccuracy * Math.abs(x1), absoluteAccuracy);"
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,135,f (Math.abs(dx) <= tolerance) {
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,136,"etResult(x1, i);"
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,137,eturn result;
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,139,f ((Math.abs(oldDelta) < tolerance) ||
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,140,Math.abs(y0) <= Math.abs(y1))) {
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,141,/ Force bisection.
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,142,elta = 0.5 * dx;
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,143,ldDelta = delta;
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,144, else {
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,145,ouble r3 = y1 / y0;
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,146,ouble p;
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,147,ouble p1;
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,148,f (x0 == x2) {
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,149,/ Linear interpolation.
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,150, = dx * r3;
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,151,1 = 1.0 - r3;
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,152, else {
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,153,/ Inverse quadratic interpolation.
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,154,ouble r1 = y0 / y2;
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,155,ouble r2 = y1 / y2;
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,156, = r3 * (dx * r1 * (r1 - r2) - (x1 - x0) * (r2 - 1.0));
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,157,1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,159,f (p > 0.0) {
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,160,1 = -p1;
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,161, else {
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,162, = -p;
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,164,f (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,165, >= Math.abs(0.5 * oldDelta * p1)) {
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,166,/ Inverse quadratic interpolation gives a value
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,167,"/ in the wrong direction, or progress is slow."
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,168,/ Fall back to bisection.
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,169,elta = 0.5 * dx;
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,170,ldDelta = delta;
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,171, else {
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,172,ldDelta = delta;
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,173,elta = p / p1;
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,176,"/ Save old X1, Y1"
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,177,0 = x1;
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,178,0 = y1;
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,179,"/ Compute new X1, Y1"
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,180,f (Math.abs(delta) > tolerance) {
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,181,1 = x1 + delta;
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,182, else if (dx > 0.0) {
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,183,1 = x1 + 0.5 * tolerance;
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,184, else if (dx <= 0.0) {
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,185,1 = x1 - 0.5 * tolerance;
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,187,1 = f.value(x1);
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,188,f ((y1 > 0) == (y2 > 0)) {
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,189,2 = x0;
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,190,2 = y0;
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,191,elta = x1 - x0;
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,192,ldDelta = delta;
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,194,++;
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,196,"hrow new MathException(""Maximal iteration number exceeded."");"
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,2," The Apache Software License, Version 1.1"
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,5, reserved.
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,7," Redistribution and use in source and binary forms, with or without"
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,8," modification, are permitted provided that the following conditions"
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,9, are met:
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,11, 1. Redistributions of source code must retain the above copyright
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,12,"    notice, this list of conditions and the following disclaimer."
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,14, 2. Redistributions in binary form must reproduce the above copyright
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,15,"    notice, this list of conditions and the following disclaimer in"
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,16,    the documentation and/or other materials provided with the
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,17,    distribution.
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,19," 3. The end-user documentation included with the redistribution, if"
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,20,"    any, must include the following acknowledgement:"
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,21,"       ""This product includes software developed by the"
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,22,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,23,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,24,    if and wherever such third-party acknowledgements normally appear.
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,26," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,27,"    Foundation"" must not be used to endorse or promote products derived"
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,28,    from this software without prior written permission. For written
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,29,"    permission, please contact apache@apache.org."
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,31," 5. Products derived from this software may not be called ""Apache"""
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,32,"    nor may ""Apache"" appear in their name without prior written"
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,33,    permission of the Apache Software Foundation.
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,38, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,39," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,46, SUCH DAMAGE.
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,49, This software consists of voluntary contributions made by many
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,50, individuals on behalf of the Apache Software Foundation.  For more
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,51," information on the Apache Software Foundation, please see"
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,52, <http://www.apache.org/>.
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,54,ackage org.apache.commons.math.analysis;
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,56,mport java.util.Arrays;
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,58,mport org.apache.commons.math.MathException;
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,61, Represents a cubic spline function.
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,62, Spline functions map a certain interval of real numbers to real numbers.
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,63," A cubic spline consists of segments of cubic functions. For this class,"
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,64, polynominal coefficents are used.
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,65, Arguments outside of the domain cause an IllegalArgumentException.
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,67, @version $Revision: 1.5 $ $Date: 2003/10/16 15:24:31 $
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,69,ublic class CubicSplineFunction implements UnivariateRealFunction {
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,70,** Spline segment interval delimiters. Size is N+1 for N segments. */
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,71,rivate double xval[];
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,74, The spline segment's polynominal coefficients.
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,75," The first index runs over the intervals, size is N."
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,76," The second index adresses the coefficients in the segment, with"
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,77, index 0 being the absolute coefficient and index 3 the coefficient
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,78, for the third power.
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,79, The coefficients are setup so that x runs from 0 to xval[i+1]-xval[i].
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,81,rivate double c[][];
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,84, Construct a function with the given segment delimiters and polynomial
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,85, coefficients.
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,86, @param xval Spline segment interval delimiters
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,87, @param c spline segment's polynominal coefficients
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,89,"ublic CubicSplineFunction(double xval[], double c[][]) {"
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,90,uper();
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,91,"/ TODO: should copy the arguments here, for safety. This could be a major overhead."
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,92,his.xval = xval;
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,93,his.c = c;
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,97, Compute the value for the function.
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,98, @param x the point for which the function value should be computed
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,99, @return the value
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,100, @throws MathException if the function couldn't be computed due to
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,101,  missing additional data or other environmental problems.
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,102, @see UnivariateRealFunction#value(double)
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,104,ublic double value(double x) throws MathException {
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,105,f (x < xval[0] || x > xval[xval.length - 1]) {
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,106,"hrow new IllegalArgumentException(""Argument outside domain"");"
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,108,"nt i = Arrays.binarySearch(xval, x);"
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,109,f (i < 0) {
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,110, = -i - 2;
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,112, = x - xval[i];
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,113,eturn ((c[i][3] * x + c[i][2]) * x + c[i][1]) * x + c[i][0];
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,117, Compute the value for the first derivative of the function.
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,118, It is recommended to provide this method only if the first derivative is
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,119, analytical. Numerical derivatives may be acceptable in some cases.
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,120, An implementation should throw an UnsupportedOperationException if
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,121, this method is not implemented.
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,122, @param x the point for which the first derivative should be computed
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,123, @return the value
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,124, @throws MathException if the derivative couldn't be computed.
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,125, @see UnivariateRealFunction#firstDerivative(double)
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,127,ublic double firstDerivative(double x) throws MathException {
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,128,f (x < xval[0] || x > xval[xval.length - 1]) {
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,129,"hrow new IllegalArgumentException(""Argument outside domain"");"
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,131,"nt i = Arrays.binarySearch(xval, x);"
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,132,f (i < 0) {
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,133, = -i - 2;
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,135, = x - xval[i];
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,136,eturn (3 * c[i][3] * x + 2 * c[i][2]) * x + c[i][1];
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,140, Compute the value for the second derivative of the function.
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,141, It is recommended to provide this method only if the second derivative is
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,142, analytical. Numerical derivatives may be acceptable in some cases.
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,143, An implementation should throw an UnsupportedOperationException if
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,144, this method is not implemented.
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,145, @param x the point for which the first derivative should be computed
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,146, @return the value
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,147, @throws MathException if the second derivative couldn't be computed.
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,148, @see UnivariateRealFunction#secondDerivative(double)
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,150,ublic double secondDerivative(double x) throws MathException {
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,151,f (x < xval[0] || x > xval[xval.length - 1]) {
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,152,"hrow new IllegalArgumentException(""Argument outside domain"");"
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,154,"nt i = Arrays.binarySearch(xval, x);"
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,155,f (i < 0) {
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,156, = -i - 2;
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,158, = x - xval[i];
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,159,eturn 6 * c[i][3] * x + 2 * c[i][2];
False,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,2," The Apache Software License, Version 1.1"
False,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
False,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,5, reserved.
False,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,7," Redistribution and use in source and binary forms, with or without"
False,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,8," modification, are permitted provided that the following conditions"
False,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,9, are met:
False,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,11, 1. Redistributions of source code must retain the above copyright
False,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,12,"    notice, this list of conditions and the following disclaimer."
False,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,14, 2. Redistributions in binary form must reproduce the above copyright
False,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,15,"    notice, this list of conditions and the following disclaimer in"
False,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,16,    the documentation and/or other materials provided with the
False,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,17,    distribution.
False,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,19," 3. The end-user documentation included with the redistribution, if"
False,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,20,"    any, must include the following acknowledgement:"
False,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,21,"       ""This product includes software developed by the"
False,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,22,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,23,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,24,    if and wherever such third-party acknowledgements normally appear.
False,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,26," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,27,"    Foundation"" must not be used to endorse or promote products derived"
False,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,28,    from this software without prior written permission. For written
False,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,29,"    permission, please contact apache@apache.org."
False,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,31," 5. Products derived from this software may not be called ""Apache"""
False,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,32,"    nor may ""Apache"" appear in their name without prior written"
False,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,33,    permission of the Apache Software Foundation.
False,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,38, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,39," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,46, SUCH DAMAGE.
False,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,49, This software consists of voluntary contributions made by many
False,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,50, individuals on behalf of the Apache Software Foundation.  For more
False,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,51," information on the Apache Software Foundation, please see"
False,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,52, <http://www.apache.org/>.
False,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,54,ackage org.apache.commons.math.analysis;
False,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,56,mport org.apache.commons.math.MathException;
False,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,59, Provide the secant algorithm for solving for zeros of real univariate
False,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,60," functions. Because of forced bracketing, convergence is slower than"
False,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,61," the unrestricted secant algorithm. However, slow convergence of the"
False,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,62, Regula Falsi can be avoided.
False,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,63, It will only search for one zero in the given interval.
False,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,64, The function is supposed to be continuous but not necessarily smooth.
False,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,66, @version $Revision: 1.6 $ $Date: 2003/10/16 15:24:31 $
False,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,68,ublic class SecantSolver extends UnivariateRealSolverImpl {
False,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,70, Construct a solver for the given function.
False,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,71, @param f function to solve.
False,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,73,ublic SecantSolver(UnivariateRealFunction f) {
False,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,74,"uper(f, 100, 1E-6);"
False,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,78, Solve for a zero in the given interval.
False,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,79, @param min the lower bound for the interval.
False,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,80, @param max the upper bound for the interval.
False,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,81, @param initial the start value to use (ignored).
False,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,82, @return the value where the function is zero
False,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,83, @throws MathException if the iteration count was exceeded or the
False,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,84,  solver detects convergence problems otherwise.
False,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,86,"ublic double solve(double min, double max, double initial)"
False,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,87,hrows MathException {
False,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,89,"eturn solve(min, max);"
False,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,93, Solve for a zero root in the given interval.
False,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,94, @param min the lower bound for the interval.
False,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,95, @param max the upper bound for the interval.
False,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,96, @return the value where the function is zero
False,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,97, @throws MathException if the iteration count was exceeded or the
False,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,98,  solver detects convergence problems otherwise.
False,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,100,"ublic double solve(double min, double max) throws MathException {"
False,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,101,learResult();
False,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,102,/ Index 0 is the old approximation for the root.
False,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,103,/ Index 1 is the last calculated approximation  for the root.
False,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,104,/ Index 2 is a bracket for the root with respect to x0.
False,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,105,/ OldDelta is the length of the bracketing interval of the last
False,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,106,/ iteration.
False,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,107,ouble x0 = min;
False,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,108,ouble x1 = max;
False,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,109,ouble y0 = f.value(x0);
False,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,110,ouble y1 = f.value(x1);
False,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,111,f ((y0 > 0) == (y1 > 0)) {
False,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,112,"hrow new MathException(""Interval doesn't bracket a zero."");"
False,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,114,ouble x2 = x0;
False,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,115,ouble y2 = y0;
False,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,116,ouble oldDelta = x2 - x1;
False,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,117,nt i = 0;
False,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,118,hile (i < maximalIterationCount) {
False,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,119,f (Math.abs(y2) < Math.abs(y1)) {
False,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,120,0 = x1;
False,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,121,1 = x2;
False,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,122,2 = x0;
False,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,123,0 = y1;
False,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,124,1 = y2;
False,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,125,2 = y0;
False,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,127,f (Math.abs(y1) <= functionValueAccuracy) {
False,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,128,"etResult(x1, i);"
False,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,129,eturn result;
False,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,131,f (Math.abs(oldDelta) <
False,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,132,"ath.max(relativeAccuracy * Math.abs(x1), absoluteAccuracy)) {"
False,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,133,"etResult(x1, i);"
False,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,134,eturn result;
False,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,136,ouble delta;
False,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,137,f (Math.abs(y1) > Math.abs(y0)) {
False,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,138,/ Function value increased in last iteration. Force bisection.
False,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,139,elta = 0.5 * oldDelta;
False,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,140, else {
False,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,141,elta = (x0 - x1) / (1 - y0 / y1);
False,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,142,f (delta / oldDelta > 1) {
False,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,143,/ New approximation falls outside bracket.
False,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,144,/ Fall back to bisection.
False,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,145,elta = 0.5 * oldDelta;
False,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,148,0 = x1;
False,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,149,0 = y1;
False,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,150,1 = x1 + delta;
False,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,151,1 = f.value(x1);
False,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,152,f ((y1 > 0) == (y2 > 0)) {
False,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,153,"/ New bracket is (x0,x1)."
False,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,154,2 = x0;
False,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,155,2 = y0;
False,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,157,ldDelta = x2 - x1;
False,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,158,++;
False,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,160,"hrow new MathException(""Maximal iteration number exceeded"");"
False,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,2," The Apache Software License, Version 1.1"
False,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
False,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,5, reserved.
False,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,7," Redistribution and use in source and binary forms, with or without"
False,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,8," modification, are permitted provided that the following conditions"
False,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,9, are met:
False,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,11, 1. Redistributions of source code must retain the above copyright
False,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,12,"    notice, this list of conditions and the following disclaimer."
False,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,14, 2. Redistributions in binary form must reproduce the above copyright
False,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,15,"    notice, this list of conditions and the following disclaimer in"
False,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,16,    the documentation and/or other materials provided with the
False,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,17,    distribution.
False,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,19," 3. The end-user documentation included with the redistribution, if"
False,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,20,"    any, must include the following acknowledgement:"
False,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,21,"       ""This product includes software developed by the"
False,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,22,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,23,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,24,    if and wherever such third-party acknowledgements normally appear.
False,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,26," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,27,"    Foundation"" must not be used to endorse or promote products derived"
False,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,28,    from this software without prior written permission. For written
False,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,29,"    permission, please contact apache@apache.org."
False,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,31," 5. Products derived from this software may not be called ""Apache"""
False,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,32,"    nor may ""Apache"" appear in their name without prior written"
False,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,33,    permission of the Apache Software Foundation.
False,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,38, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,39," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,46, SUCH DAMAGE.
False,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,49, This software consists of voluntary contributions made by many
False,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,50, individuals on behalf of the Apache Software Foundation.  For more
False,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,51," information on the Apache Software Foundation, please see"
False,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,52, <http://www.apache.org/>.
False,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,54,ackage org.apache.commons.math.analysis;
False,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,57, Computes a natural spline interpolation for the data set.
False,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,59, @version $Revision: 1.7 $ $Date: 2003/10/16 15:24:31 $
False,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,62,ublic class SplineInterpolator implements UnivariateRealInterpolator {
False,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,63,** the natural spline coefficients. */
False,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,64,rivate double[][] c = null;
False,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,67, Computes an interpolating function for the data set.
False,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,68, @param xval the arguments for the interpolation points
False,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,69, @param yval the values for the interpolation points
False,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,70, @return a function which interpolates the data set
False,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,72,"ublic UnivariateRealFunction interpolate(double[] xval, double[] yval) {"
False,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,73,f (xval.length != yval.length) {
False,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,74,"hrow new IllegalArgumentException(""Dataset arrays must have same length."");"
False,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,77,f (c == null) {
False,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,78,/ Number of intervals. The number of data points is N+1.
False,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,79,nt n = xval.length - 1;
False,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,80,/ Check whether the xval vector has ascending values.
False,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,81,/ Separation should be checked too (not implemented: which criteria?).
False,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,82,or (int i = 0; i < n; i++) {
False,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,83,f (xval[i] >= xval[i + 1]) {
False,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,84,"hrow new IllegalArgumentException(""Dataset must specify sorted, ascending x values."");"
False,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,87,"/ Vectors for the equation system. There are n-1 equations for the unknowns s[i] (1<=i<=N-1),"
False,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,88,"/ which are second order derivatives for the spline at xval[i]. At the end points, s[0]=s[N]=0."
False,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,89,"/ Vectors are offset by -1, except the lower diagonal vector which is offset by -2. Layout:"
False,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,90,/ d[0]*s[1]+u[0]*s[2]                                           = b[0]
False,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,91,/ l[0]*s[1]+d[1]*s[2]+u[1]*s[3]                                 = b[1]
False,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,92,/           l[1]*s[2]+d[2]*s[3]+u[2]*s[4]                       = b[2]
False,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,94,/                     l[N-4]*s[N-3]+d[N-3]*s[N-2]+u[N-3]*s[N-1] = b[N-3]
False,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,95,/                                   l[N-3]*s[N-2]+d[N-2]*s[N-1] = b[N-2]
False,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,96,/ Vector b is the right hand side (RHS) of the system.
False,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,97,ouble b[] = new double[n - 1];
False,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,98,/ Vector d is diagonal of the matrix and also holds the computed solution.
False,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,99,ouble d[] = new double[n - 1];
False,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,100,/ Setup right hand side and diagonal.
False,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,101,ouble dquot = (yval[1] - yval[0]) / (xval[1] - xval[0]);
False,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,102,or (int i = 0; i < n - 1; i++) {
False,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,103,/ TODO avoid recomputing the term
False,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,104,/    (yval[i + 2] - yval[i + 1]) / (xval[i + 2] - xval[i + 1])
False,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,105,/ take it from the previous loop pass. Note: the interesting part of performance
False,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,106,"/ loss is the range check in the array access, not the computation itself."
False,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,107,ouble dquotNext =
False,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,108,yval[i + 2] - yval[i + 1]) / (xval[i + 2] - xval[i + 1]);
False,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,109,[i] = 6.0 * (dquotNext - dquot);
False,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,110,[i] = 2.0 * (xval[i + 2] - xval[i]);
False,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,111,quot = dquotNext;
False,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,113,/ u[] and l[] (for the upper and lower diagonal respectively) are not
False,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,114,"/ really needed, the computation is folded into the system solving loops."
False,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,115,/ Keep this for documentation purposes:
False,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,116,/double u[] = new double[n - 2]; // upper diagonal
False,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,117,/double l[] = new double[n - 2]; // lower diagonal
False,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,118,/ Set up upper and lower diagonal. Keep the offsets in mind.
False,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,119,/for (int i = 0; i < n - 2; i++) {
False,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,120,/  u[i] = xval[i + 2] - xval[i + 1];
False,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,121,/  l[i] = xval[i + 2] - xval[i + 1];
False,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,123,/ Solve the system: forward pass.
False,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,124,or (int i = 0; i < n - 2; i++) {
False,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,125,ouble delta = xval[i + 2] - xval[i + 1];
False,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,126,ouble deltaquot = delta / d[i];
False,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,127,[i + 1] -= delta * deltaquot;
False,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,128,[i + 1] -= b[i] * deltaquot;
False,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,130,/ Solve the system: backward pass.
False,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,131,[n - 2] = b[n - 2] / d[n - 2];
False,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,132,or (int i = n - 3; i >= 0; i--) {
False,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,133,[i] = (b[i] - (xval[i + 2] - xval[i + 1]) * d[i + 1]) / d[i];
False,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,135,/ Compute coefficients as usual polynomial coefficients.
False,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,136,"/ Not the best with respect to roundoff on evaluation, but simple."
False,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,137, = new double[n][4];
False,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,138,ouble delta = xval[1] - xval[0];
False,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,139,[0][3] = d[0] / delta / 6.0;
False,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,140,[0][2] = 0.0;
False,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,141,[0][1] = (yval[1] - yval[0]) / delta - d[0] * delta / 6.0;
False,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,142,or (int i = 1; i < n - 2; i++) {
False,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,143,elta = xval[i + 1] - xval[i];
False,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,144,[i][3] = (d[i] - d[i - 1]) / delta / 6.0;
False,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,145,[i][2] = d[i - 1] / 2.0;
False,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,146,[i][1] =
False,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,147,yval[i + 1] - yval[i]) / delta -
False,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,148,d[i] / 2.0 - d[i - 1]) * delta / 3.0;
False,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,150,elta = (xval[n] - xval[n - 1]);
False,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,151,[n - 1][3] = -d[n - 2] / delta / 6.0;
False,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,152,[n - 1][2] = d[n - 2] / 2.0;
False,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,153,[n - 1][1] =
False,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,154,yval[n] - yval[n - 1]) / delta - d[n - 2] * delta / 3.0;
False,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,155,or (int i = 0; i < n; i++) {
False,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,156,[i][0] = yval[i];
False,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,160,"/ TODO: copy xval, unless copied in CubicSplineFunction constructor"
False,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,161,"eturn new CubicSplineFunction(xval, c);"
False,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,2," The Apache Software License, Version 1.1"
False,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
False,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,5, reserved.
False,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,7," Redistribution and use in source and binary forms, with or without"
False,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,8," modification, are permitted provided that the following conditions"
False,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,9, are met:
False,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,11, 1. Redistributions of source code must retain the above copyright
False,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,12,"    notice, this list of conditions and the following disclaimer."
False,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,14, 2. Redistributions in binary form must reproduce the above copyright
False,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,15,"    notice, this list of conditions and the following disclaimer in"
False,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,16,    the documentation and/or other materials provided with the
False,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,17,    distribution.
False,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,19," 3. The end-user documentation included with the redistribution, if"
False,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,20,"    any, must include the following acknowledgement:"
False,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,21,"       ""This product includes software developed by the"
False,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,22,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,23,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,24,    if and wherever such third-party acknowledgements normally appear.
False,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,26," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,27,"    Foundation"" must not be used to endorse or promote products derived"
False,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,28,    from this software without prior written permission. For written
False,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,29,"    permission, please contact apache@apache.org."
False,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,31," 5. Products derived from this software may not be called ""Apache"""
False,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,32,"    nor may ""Apache"" appear in their name without prior written"
False,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,33,    permission of the Apache Software Foundation.
False,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,38, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,39," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,46, SUCH DAMAGE.
False,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,49, This software consists of voluntary contributions made by many
False,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,50, individuals on behalf of the Apache Software Foundation.  For more
False,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,51," information on the Apache Software Foundation, please see"
False,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,52, <http://www.apache.org/>.
False,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,54,ackage org.apache.commons.math.analysis;
False,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,56,mport org.apache.commons.math.MathException;
False,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,59, Provide an interface univariate real functions.
False,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,60, The object may held temporary data which is shared between calculations
False,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,61, of the value and the derivatives for the same argument. It is not guaranteed
False,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,62," that derivatives are evaluated after the value, the evaluation algorithm"
False,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,63, should throw an InvalidStateException if it can't cope with this.
False,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,65, @version $Revision: 1.6 $ $Date: 2003/10/16 15:24:31 $
False,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,67,ublic interface UnivariateRealFunction {
False,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,69, Compute the value for the function.
False,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,70, @param x the point for which the function value should be computed
False,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,71, @return the value
False,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,72, @throws MathException if the function couldn't be computed due to
False,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,73,  missing additional data or other environmental problems.
False,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,75,ublic double value(double x) throws MathException;
False,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,78, Compute the value for the first derivative of the function.
False,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,79, It is recommended to provide this method only if the first derivative is
False,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,80, analytical. Numerical derivatives may be acceptable in some cases.
False,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,81, An implementation should throw an UnsupportedOperationException if
False,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,82, this method is not implemented.
False,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,83, @param x the point for which the first derivative should be computed
False,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,84, @return the value
False,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,85, @throws MathException if the derivative couldn't be computed.
False,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,87,ublic double firstDerivative(double x) throws MathException;
False,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,90, Compute the value for the second derivative of the function.
False,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,91, It is recommended to provide this method only if the second derivative is
False,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,92, analytical. Numerical derivatives may be acceptable in some cases.
False,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,93, An implementation should throw an UnsupportedOperationException if
False,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,94, this method is not implemented.
False,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,95, @param x the point for which the first derivative should be computed
False,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,96, @return the value
False,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,97, @throws MathException if the second derivative couldn't be computed.
False,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,99,ublic double secondDerivative(double x) throws MathException;
False,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,2," The Apache Software License, Version 1.1"
False,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
False,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,5, reserved.
False,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,7," Redistribution and use in source and binary forms, with or without"
False,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,8," modification, are permitted provided that the following conditions"
False,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,9, are met:
False,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,11, 1. Redistributions of source code must retain the above copyright
False,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,12,"    notice, this list of conditions and the following disclaimer."
False,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,14, 2. Redistributions in binary form must reproduce the above copyright
False,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,15,"    notice, this list of conditions and the following disclaimer in"
False,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,16,    the documentation and/or other materials provided with the
False,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,17,    distribution.
False,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,19," 3. The end-user documentation included with the redistribution, if"
False,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,20,"    any, must include the following acknowledgement:"
False,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,21,"       ""This product includes software developed by the"
False,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,22,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,23,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,24,    if and wherever such third-party acknowledgements normally appear.
False,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,26," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,27,"    Foundation"" must not be used to endorse or promote products derived"
False,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,28,    from this software without prior written permission. For written
False,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,29,"    permission, please contact apache@apache.org."
False,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,31," 5. Products derived from this software may not be called ""Apache"""
False,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,32,"    nor may ""Apache"" appear in their name without prior written"
False,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,33,    permission of the Apache Software Foundation.
False,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,38, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,39," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,46, SUCH DAMAGE.
False,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,49, This software consists of voluntary contributions made by many
False,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,50, individuals on behalf of the Apache Software Foundation.  For more
False,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,51," information on the Apache Software Foundation, please see"
False,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,52, <http://www.apache.org/>.
False,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,54,ackage org.apache.commons.math.analysis;
False,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,56,mport org.apache.commons.math.MathException;
False,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,59, Interface for interpolating a data set.
False,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,61, @version $Revision: 1.5 $ $Date: 2003/10/16 15:24:31 $
False,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,63,ublic interface UnivariateRealInterpolator {
False,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,66, Computes an interpolating function for the data set.
False,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,67, @param xval the arguments for the interpolation points
False,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,68, @param yval the values for the interpolation points
False,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,69, @return a function which interpolates the data set
False,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,70, @throws MathException if arguments violate assumptions made by the
False,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,71,         interpolationg algorithm
False,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,73,"ublic UnivariateRealFunction interpolate(double xval[], double yval[])"
False,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,74,hrows MathException;
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,2," The Apache Software License, Version 1.1"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,5, reserved.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,7," Redistribution and use in source and binary forms, with or without"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,8," modification, are permitted provided that the following conditions"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,9, are met:
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,11, 1. Redistributions of source code must retain the above copyright
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,12,"    notice, this list of conditions and the following disclaimer."
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,14, 2. Redistributions in binary form must reproduce the above copyright
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,15,"    notice, this list of conditions and the following disclaimer in"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,16,    the documentation and/or other materials provided with the
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,17,    distribution.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,19," 3. The end-user documentation included with the redistribution, if"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,20,"    any, must include the following acknowledgement:"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,21,"       ""This product includes software developed by the"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,22,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,23,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,24,    if and wherever such third-party acknowledgements normally appear.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,26," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,27,"    Foundation"" must not be used to endorse or promote products derived"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,28,    from this software without prior written permission. For written
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,29,"    permission, please contact apache@apache.org."
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,31," 5. Products derived from this software may not be called ""Apache"""
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,32,"    nor may ""Apache"" appear in their name without prior written"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,33,    permission of the Apache Software Foundation.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,38, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,39," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,46, SUCH DAMAGE.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,49, This software consists of voluntary contributions made by many
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,50, individuals on behalf of the Apache Software Foundation.  For more
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,51," information on the Apache Software Foundation, please see"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,52, <http://www.apache.org/>.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,54,ackage org.apache.commons.math.analysis;
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,56,mport org.apache.commons.math.MathException;
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,59, Provide an interface to algorithms for solving for zeros of real univariate
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,60, functions.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,61, An implementation will only search for one zero in the given interval.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,63, @version $Revision: 1.6 $ $Date: 2003/10/16 15:24:31 $
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,65,ublic interface UnivariateRealSolver {
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,68, Set the upper limit for the number of iterations.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,70," Usually a high iteration count indicates convergence problems. However,"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,71," the ""reasonable value"" varies widely for different solvers, users are"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,72, advised to use the default value supplied by the solver.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,74, An exception will be thrown if the number is exceeded.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,76, @param count maximum number of iterations
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,78,ublic void setMaximalIterationCount(int count);
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,81, Get the upper limit for the number of iterations.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,83, @return the actual upper limit
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,85,ublic int getMaximalIterationCount();
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,88, Reset the upper limit for the number of iterations to the default.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,90, The default value is supplied by the solver implementation.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,92, @see #setMaximalIterationCount(int)
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,94,ublic void resetMaximalIterationCount();
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,97, Set the absolute accuracy.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,99, The default is usually choosen so taht roots in the interval
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,100, -10..-0.1 and +0.1..+10 can be found wit a reasonable accuracy. If the
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,101," expected absolute value of your roots is of much smaller magnitude, set"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,102, this to a smaller value.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,104, Solvers are advised to do a plausibility check with the relative
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,105," accuracy, but clients should not rely on this."
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,107, @param accuracy the accuracy.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,108, @throws MathException if the accuracy can't be achieved by the solver or
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,109,         is otherwise deemed unreasonable.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,111,ublic void setAbsoluteAccuracy(double accuracy) throws MathException;
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,114, Get the actual absolute accuracy.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,116, @return the accuracy
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,118,ublic double getAbsoluteAccuracy();
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,121, Reset the absolute accuracy to the default.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,123, The default value is provided by the solver implementation.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,125,ublic void resetAbsoluteAccuracy();
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,128, Set the relative accuracy.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,130, This is used to stop iterations if the absolute accuracy can't be
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,131, achieved due to large values or short mantissa length.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,133, If this should be the primary criterium for convergence rather then a
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,134," safety measure, set the absolute accuracy to a ridiculously small value,"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,135, like 1E-1000.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,137, @param accuracy the relative accuracy.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,138, @throws MathException if the accuracy can't be achieved by the solver or
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,139,         is otherwise deemed unreasonable.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,141,ublic void setRelativeAccuracy(double accuracy) throws MathException;
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,144, Get the actual relative accuracy.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,145, @return the accuracy
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,147,ublic double getRelativeAccuracy();
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,150, Reset the relative accuracy to the default.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,151, The default value is provided by the solver implementation.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,153,ublic void resetRelativeAccuracy();
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,156, Set the function value accuracy.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,158, This is used to determine whan an evaluated function value or some other
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,159, value which is used as divisor is zero.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,161, This is a safety guard and it shouldn't be necesary to change this in
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,162, general.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,164, @param accuracy the accuracy.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,165, @throws MathException if the accuracy can't be achieved by the solver or
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,166,         is otherwise deemed unreasonable.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,168,ublic void setFunctionValueAccuracy(double accuracy) throws MathException;
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,171, Get the actual function value accuracy.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,172, @return the accuracy
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,174,ublic double getFunctionValueAccuracy();
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,177, Reset the actual function accuracy to the default.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,178, The default value is provided by the solver implementation.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,180,ublic void resetFunctionValueAccuracy();
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,183, Solve for a zero root in the given interval.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,184, A solver may require that the interval brackets a single zero root.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,185, @param min the lower bound for the interval.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,186, @param max the upper bound for the interval.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,187, @return a value where the function is zero
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,188, @throws MathException if the iteration count was exceeded or the
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,189,  solver detects convergence problems otherwise.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,191,"ublic double solve(double min, double max) throws MathException;"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,194," Solve for a zero in the given interval, start at startValue."
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,195, A solver may require that the interval brackets a single zero root.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,196, @param min the lower bound for the interval.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,197, @param max the upper bound for the interval.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,198, @param startValue the start value to use
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,199, @return a value where the function is zero
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,200, @throws MathException if the iteration count was exceeded or the
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,201,  solver detects convergence problems otherwise.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,203,"ublic double solve(double min, double max, double startValue)"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,204,hrows MathException;
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,207, Get the result of the last run of the solver.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,208, @return the last result.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,209," @throws MathException if there is no result available, either"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,210, because no result was yet computed or the last attempt failed.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,212,ublic double getResult() throws MathException;
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,215, Get the number of iterations in the last run of the solver.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,216, This is mainly meant for testing purposes. It may occasionally
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,217, help track down performance problems: if the iteration count
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,218," is notoriously high, check whether the function is evaluated"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,219," properly, and whether another solver is more amenable to the"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,220, problem.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,221, @return the last iteration count.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,222," @throws MathException if there is no result available, either"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,223, because no result was yet computed or the last attempt failed.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,225,ublic int getIterationCount() throws MathException;
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,2," The Apache Software License, Version 1.1"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,5, reserved.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,7," Redistribution and use in source and binary forms, with or without"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,8," modification, are permitted provided that the following conditions"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,9, are met:
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,11, 1. Redistributions of source code must retain the above copyright
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,12,"    notice, this list of conditions and the following disclaimer."
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,14, 2. Redistributions in binary form must reproduce the above copyright
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,15,"    notice, this list of conditions and the following disclaimer in"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,16,    the documentation and/or other materials provided with the
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,17,    distribution.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,19," 3. The end-user documentation included with the redistribution, if"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,20,"    any, must include the following acknowledgement:"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,21,"       ""This product includes software developed by the"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,22,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,23,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,24,    if and wherever such third-party acknowledgements normally appear.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,26," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,27,"    Foundation"" must not be used to endorse or promote products derived"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,28,    from this software without prior written permission. For written
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,29,"    permission, please contact apache@apache.org."
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,31," 5. Products derived from this software may not be called ""Apache"""
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,32,"    nor may ""Apache"" appear in their name without prior written"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,33,    permission of the Apache Software Foundation.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,38, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,39," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,46, SUCH DAMAGE.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,49, This software consists of voluntary contributions made by many
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,50, individuals on behalf of the Apache Software Foundation.  For more
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,51," information on the Apache Software Foundation, please see"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,52, <http://www.apache.org/>.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,54,ackage org.apache.commons.math.analysis;
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,56,mport org.apache.commons.discovery.tools.DiscoverClass;
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,59, A factory to easily get a default solver and some convenience
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,60, functions.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,61," Because solvers are easily reusable, the factory does not"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,62, store configuration data and creates preconfigured solvers
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,63," (this may be controversial, because the configuration data"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,64, may also be used for the default solver used by the static
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,65, solve() method).
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,66, @version $Revision: 1.8 $ $Date: 2003/10/16 15:24:31 $
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,68,ublic abstract class UnivariateRealSolverFactory {
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,70, Default constructor.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,72,rotected UnivariateRealSolverFactory() {
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,76, Create a new factory.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,77, @return a new factory.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,79,ublic static UnivariateRealSolverFactory newInstance() {
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,80,nivariateRealSolverFactory factory = null;
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,81,ry {
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,82,iscoverClass dc = new DiscoverClass();
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,83,actory = (UnivariateRealSolverFactory) dc.newInstance(
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,84,"nivariateRealSolverFactory.class,"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,85,"org.apache.commons.math.analysis.UnivariateRealSolverFactoryImpl"");"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,86, catch(Exception ex) {
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,87,/ ignore as default implementation will be used.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,89,eturn factory;
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,93, Create a new {@link UnivariateRealSolver} for the given function.  The
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,94, actual solver returned is determined by the underlying factory.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,95, @param f the function.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,96, @return the new solver.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,98,ublic abstract UnivariateRealSolver newDefaultSolver(
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,99,nivariateRealFunction f);
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,102, Create a new {@link UnivariateRealSolver} for the given function.  The
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,103, solver is an implementation of the bisection method.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,104, @param f the function.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,105, @return the new solver.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,107,ublic abstract UnivariateRealSolver newBisectionSolver(
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,108,nivariateRealFunction f);
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,111, Create a new {@link UnivariateRealSolver} for the given function.  The
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,112, solver is an implementation of the Brent method.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,113, @param f the function.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,114, @return the new solver.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,116,ublic abstract UnivariateRealSolver newBrentSolver(
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,117,nivariateRealFunction f);
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,120, Create a new {@link UnivariateRealSolver} for the given function.  The
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,121, solver is an implementation of the secant method.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,122, @param f the function.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,123, @return the new solver.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,125,ublic abstract UnivariateRealSolver newSecantSolver(
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,126,nivariateRealFunction f);
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,2," The Apache Software License, Version 1.1"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,5, reserved.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,7," Redistribution and use in source and binary forms, with or without"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,8," modification, are permitted provided that the following conditions"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,9, are met:
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,11, 1. Redistributions of source code must retain the above copyright
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,12,"    notice, this list of conditions and the following disclaimer."
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,14, 2. Redistributions in binary form must reproduce the above copyright
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,15,"    notice, this list of conditions and the following disclaimer in"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,16,    the documentation and/or other materials provided with the
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,17,    distribution.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,19," 3. The end-user documentation included with the redistribution, if"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,20,"    any, must include the following acknowledgement:"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,21,"       ""This product includes software developed by the"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,22,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,23,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,24,    if and wherever such third-party acknowledgements normally appear.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,26," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,27,"    Foundation"" must not be used to endorse or promote products derived"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,28,    from this software without prior written permission. For written
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,29,"    permission, please contact apache@apache.org."
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,31," 5. Products derived from this software may not be called ""Apache"""
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,32,"    nor may ""Apache"" appear in their name without prior written"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,33,    permission of the Apache Software Foundation.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,38, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,39," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,46, SUCH DAMAGE.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,49, This software consists of voluntary contributions made by many
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,50, individuals on behalf of the Apache Software Foundation.  For more
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,51," information on the Apache Software Foundation, please see"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,52, <http://www.apache.org/>.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,54,ackage org.apache.commons.math.analysis;
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,58, A factory to easily get a default solver and some convenience
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,59, functions.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,60," Because solvers are easily reusable, the factory does not"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,61, store configuration data and creates preconfigured solvers
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,62," (this may be controversial, because the configuration data"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,63, may also be used for the default solver used by the static
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,64, solve() method).
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,65, @version $Revision: 1.4 $ $Date: 2003/10/16 15:24:31 $
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,67,ublic class UnivariateRealSolverFactoryImpl
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,68,xtends UnivariateRealSolverFactory {
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,71, Default constructor.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,73,ublic UnivariateRealSolverFactoryImpl() {
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,77, Create a new {@link UnivariateRealSolver} for the given function.  The
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,78, actual solver returned is determined by the underlying factory.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,80, This factory returns a {@link BrentSolver} instance.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,82, @param f the function.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,83, @return the new solver.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,85,ublic UnivariateRealSolver newDefaultSolver(UnivariateRealFunction f) {
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,86,eturn newBrentSolver(f);
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,90, Create a new {@link UnivariateRealSolver} for the given function.  The
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,91, solver is an implementation of the bisection method.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,92, @param f the function.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,93, @return the new solver.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,95,ublic UnivariateRealSolver newBisectionSolver(UnivariateRealFunction f) {
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,96,eturn new BisectionSolver(f);
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,100, Create a new {@link UnivariateRealSolver} for the given function.  The
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,101, solver is an implementation of the Brent method.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,102, @param f the function.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,103, @return the new solver.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,105,ublic UnivariateRealSolver newBrentSolver(UnivariateRealFunction f) {
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,106,eturn new BrentSolver(f);
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,110, Create a new {@link UnivariateRealSolver} for the given function.  The
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,111, solver is an implementation of the secant method.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,112, @param f the function.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,113, @return the new solver.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,115,ublic UnivariateRealSolver newSecantSolver(UnivariateRealFunction f) {
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,116,eturn new SecantSolver(f);
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,2," The Apache Software License, Version 1.1"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,5, reserved.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,7," Redistribution and use in source and binary forms, with or without"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,8," modification, are permitted provided that the following conditions"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,9, are met:
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,11, 1. Redistributions of source code must retain the above copyright
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,12,"    notice, this list of conditions and the following disclaimer."
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,14, 2. Redistributions in binary form must reproduce the above copyright
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,15,"    notice, this list of conditions and the following disclaimer in"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,16,    the documentation and/or other materials provided with the
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,17,    distribution.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,19," 3. The end-user documentation included with the redistribution, if"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,20,"    any, must include the following acknowledgement:"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,21,"       ""This product includes software developed by the"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,22,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,23,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,24,    if and wherever such third-party acknowledgements normally appear.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,26," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,27,"    Foundation"" must not be used to endorse or promote products derived"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,28,    from this software without prior written permission. For written
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,29,"    permission, please contact apache@apache.org."
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,31," 5. Products derived from this software may not be called ""Apache"""
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,32,"    nor may ""Apache"" appear in their name without prior written"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,33,    permission of the Apache Software Foundation.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,38, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,39," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,46, SUCH DAMAGE.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,49, This software consists of voluntary contributions made by many
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,50, individuals on behalf of the Apache Software Foundation.  For more
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,51," information on the Apache Software Foundation, please see"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,52, <http://www.apache.org/>.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,55,ackage org.apache.commons.math.analysis;
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,57,mport org.apache.commons.math.MathException;
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,60, Provide a default implementation for several functions useful to generic
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,61, solvers.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,63, @version $Revision: 1.5 $ $Date: 2003/10/16 15:24:31 $
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,65,ublic abstract class UnivariateRealSolverImpl
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,66,mplements UnivariateRealSolver {
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,68,** Maximum absolute error. */
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,69,rotected double absoluteAccuracy;
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,71,** Maximum relative error. */
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,72,rotected double relativeAccuracy;
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,74,** Maximum error of function. */
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,75,rotected double functionValueAccuracy;
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,77,** Maximum number of iterations. */
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,78,rotected int maximalIterationCount;
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,80,** Default maximum absolute error. */
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,81,rotected double defaultAbsoluteAccuracy;
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,83,** Default maximum relative error. */
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,84,rotected double defaultRelativeAccuracy;
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,86,** Default maximum error of function. */
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,87,rotected double defaultFunctionValueAccuracy;
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,89,** Default maximum number of iterations. */
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,90,rotected int defaultMaximalIterationCount;
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,92,** Indicates where a root has been computed. */
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,93,rotected boolean resultComputed = false;
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,95,** The last computed root. */
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,96,rotected double result;
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,98,/ Mainly for test framework.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,99,** The last iteration count. */
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,100,rotected int iterationCount;
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,102,** The function to solve. */
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,103,rotected UnivariateRealFunction f;
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,106, Construct a solver with given iteration count and accuracy.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,107, @param f the function to solve.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,108, @param defaultAbsoluteAccuracy maximum absolue error.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,109, @param defaultMaximalIterationCount maximum number of iterations.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,111,rotected UnivariateRealSolverImpl(
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,112,"nivariateRealFunction f,"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,113,"nt defaultMaximalIterationCount,"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,114,ouble defaultAbsoluteAccuracy) {
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,116,uper();
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,118,his.f = f;
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,119,his.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,120,his.defaultRelativeAccuracy = 1E-14;
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,121,his.defaultFunctionValueAccuracy = 1E-15;
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,122,his.absoluteAccuracy = defaultAbsoluteAccuracy;
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,123,his.relativeAccuracy = defaultRelativeAccuracy;
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,124,his.functionValueAccuracy = defaultFunctionValueAccuracy;
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,125,his.defaultMaximalIterationCount = defaultMaximalIterationCount;
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,126,his.maximalIterationCount = defaultMaximalIterationCount;
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,130, Access the last computed root.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,131, @return the last computed root.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,132, @throws MathException if no root has been computed.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,134,ublic double getResult() throws MathException {
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,135,f (resultComputed) {
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,136,eturn result;
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,137, else {
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,138,/ TODO: could this be an IllegalStateException instead?
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,139,"hrow new MathException(""No result available"");"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,144, Access the last iteration count.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,145, @return the last iteration count.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,146, @throws MathException if no root has been computed.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,149,ublic int getIterationCount() throws MathException {
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,150,f (resultComputed) {
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,151,eturn iterationCount;
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,152, else {
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,153,/ TODO: could this be an IllegalStateException instead?
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,154,"hrow new MathException(""No result available"");"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,159, Convenience function for implementations.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,160, @param result the result to set
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,161, @param iterationCount the iteration count to set
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,163,"rotected final void setResult(double result, int iterationCount) {"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,164,his.result = result;
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,165,his.iterationCount = iterationCount;
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,166,his.resultComputed = true;
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,170, Convenience function for implementations.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,172,rotected final void clearResult() {
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,173,his.resultComputed = false;
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,177, Set the absolute accuracy.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,179, @param accuracy the accuracy.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,180, @throws MathException if the accuracy can't be achieved by the solver or
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,181,         is otherwise deemed unreasonable.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,183,ublic void setAbsoluteAccuracy(double accuracy)
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,184,hrows MathException {
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,185,bsoluteAccuracy = accuracy;
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,189, Get the actual absolute accuracy.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,191, @return the accuracy
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,193,ublic double getAbsoluteAccuracy() {
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,194,eturn absoluteAccuracy;
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,198, Reset the absolute accuracy to the default.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,200,ublic void resetAbsoluteAccuracy() {
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,201,bsoluteAccuracy = defaultAbsoluteAccuracy;
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,205, Set the upper limit for the number of iterations.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,207, @param count maximum number of iterations
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,209,ublic void setMaximalIterationCount(int count) {
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,210,aximalIterationCount = count;
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,214, Get the upper limit for the number of iterations.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,216, @return the actual upper limit
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,218,ublic int getMaximalIterationCount() {
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,219,eturn maximalIterationCount;
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,223, Reset the upper limit for the number of iterations to the default.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,225,ublic void resetMaximalIterationCount() {
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,226,aximalIterationCount = defaultMaximalIterationCount;
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,230, Set the relative accuracy.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,232, @param accuracy the relative accuracy.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,233, @throws MathException if the accuracy can't be achieved by the solver or
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,234,         is otherwise deemed unreasonable.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,236,ublic void setRelativeAccuracy(double accuracy) throws MathException {
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,237,elativeAccuracy = accuracy;
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,241, Get the actual relative accuracy.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,242, @return the accuracy
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,244,ublic double getRelativeAccuracy() {
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,245,eturn relativeAccuracy;
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,249, Reset the relative accuracy to the default.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,251,ublic void resetRelativeAccuracy() {
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,252,elativeAccuracy = defaultRelativeAccuracy;
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,256, Set the function value accuracy.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,258, @param accuracy the accuracy.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,259, @throws MathException if the accuracy can't be achieved by the solver or
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,260,         is otherwise deemed unreasonable.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,262,ublic void setFunctionValueAccuracy(double accuracy)
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,263,hrows MathException {
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,264,unctionValueAccuracy = accuracy;
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,268, Get the actual function value accuracy.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,269, @return the accuracy
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,271,ublic double getFunctionValueAccuracy() {
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,272,eturn functionValueAccuracy;
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,276, Reset the actual function accuracy to the default.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,278,ublic void resetFunctionValueAccuracy() {
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,279,unctionValueAccuracy = defaultFunctionValueAccuracy;
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,2," The Apache Software License, Version 1.1"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,5, reserved.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,7," Redistribution and use in source and binary forms, with or without"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,8," modification, are permitted provided that the following conditions"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,9, are met:
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,11, 1. Redistributions of source code must retain the above copyright
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,12,"    notice, this list of conditions and the following disclaimer."
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,14, 2. Redistributions in binary form must reproduce the above copyright
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,15,"    notice, this list of conditions and the following disclaimer in"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,16,    the documentation and/or other materials provided with the
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,17,    distribution.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,19," 3. The end-user documentation included with the redistribution, if"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,20,"    any, must include the following acknowledgement:"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,21,"       ""This product includes software developed by the"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,22,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,23,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,24,    if and wherever such third-party acknowledgements normally appear.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,26," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,27,"    Foundation"" must not be used to endorse or promote products derived"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,28,    from this software without prior written permission. For written
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,29,"    permission, please contact apache@apache.org."
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,31," 5. Products derived from this software may not be called ""Apache"""
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,32,"    nor may ""Apache"" appear in their name without prior written"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,33,    permission of the Apache Software Foundation.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,38, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,39," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,46, SUCH DAMAGE.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,49, This software consists of voluntary contributions made by many
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,50, individuals on behalf of the Apache Software Foundation.  For more
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,51," information on the Apache Software Foundation, please see"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,52, <http://www.apache.org/>.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,54,ackage org.apache.commons.math.analysis;
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,56,mport org.apache.commons.math.MathException;
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,59, Utility routines for {@link UnivariateRealSolver} objects.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,60, @version $Revision: 1.3 $ $Date: 2003/10/16 15:24:31 $
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,62,ublic class UnivariateRealSolverUtils {
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,64, Default constructor.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,66,rivate UnivariateRealSolverUtils() {
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,67,uper();
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,71, Method to solve for zeros of real univariate functions.  A
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,72, default solver is created and used for solving.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,73, @param f the function.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,74, @param x0 the lower bound for the interval.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,75, @param x1 the upper bound for the interval.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,76, @return a value where the function is zero.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,77, @throws MathException if the iteration count was exceeded or the
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,78,         solver detects convergence problems otherwise.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,80,"ublic static double solve(UnivariateRealFunction f, double x0, double x1)"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,81,hrows MathException
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,83,f(f == null){
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,84,"hrow new IllegalArgumentException(""f can not be null."");"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,87,eturn UnivariateRealSolverFactory.newInstance().newDefaultSolver(f)
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,88,"solve(x0, x1);"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,92, Convience method to solve for zeros of real univariate functions.  A
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,93, default solver is created and used for solving.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,94, @param f the function.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,95, @param x0 the lower bound for the interval.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,96, @param x1 the upper bound for the interval.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,97, @param absoluteAccuracy the accuracy to be used by the solver.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,98, @return a value where the function is zero.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,99, @throws MathException if the iteration count was exceeded or the
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,100,         solver detects convergence problems otherwise.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,102,ublic static double solve(
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,103,"nivariateRealFunction f,"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,104,"ouble x0,"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,105,"ouble x1,"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,106,ouble absoluteAccuracy)
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,107,hrows MathException
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,109,f(f == null){
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,110,"hrow new IllegalArgumentException(""f can not be null."");"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,113,nivariateRealSolver solver = UnivariateRealSolverFactory.newInstance()
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,114,newDefaultSolver(f);
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,115,olver.setAbsoluteAccuracy(absoluteAccuracy);
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,116,"eturn solver.solve(x0, x1);"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,120," For a function, f, this method returns two values, a and b that bracket"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,121," a root of f.  That is to say, there exists a value c between a and b"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,122, such that f(c) = 0.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,124, @param function the function
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,125, @param initial midpoint of the returned range.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,126," @param lowerBound for numerical safety, a never is less than this value."
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,127," @param upperBound for numerical safety, b never is greater than this"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,128,                   value.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,129," @return a two element array holding {a, b}."
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,130, @throws MathException if a root can not be bracketted.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,132,"ublic static double[] bracket(UnivariateRealFunction function,"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,133,"ouble initial,"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,134,"ouble lowerBound,"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,135,ouble upperBound) throws MathException {
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,136,"eturn bracket( function, initial, lowerBound, upperBound,"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,137,nteger.MAX_VALUE ) ;
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,141," For a function, f, this method returns two values, a and b that bracket"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,142," a root of f.  That is to say, there exists a value c between a and b"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,143, such that f(c) = 0.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,145, @param function the function
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,146, @param initial midpoint of the returned range.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,147," @param lowerBound for numerical safety, a never is less than this value."
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,148," @param upperBound for numerical safety, b never is greater than this"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,149,                   value.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,150," @param maximumIterations to guard against infinite looping, maximum"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,151,                          number of iterations to perform
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,152," @return a two element array holding {a, b}."
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,153, @throws MathException if a root can not be bracketted.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,155,"ublic static double[] bracket(UnivariateRealFunction function,"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,156,"ouble initial,"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,157,"ouble lowerBound,"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,158,"ouble upperBound,"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,159,nt maximumIterations) throws MathException {
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,160,ouble a = initial;
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,161,ouble b = initial;
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,162,ouble fa;
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,163,ouble fb;
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,164,nt numIterations = 0 ;
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,166,o {
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,167," = Math.max(a - 1.0, lowerBound);"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,168," = Math.min(b + 1.0, upperBound);"
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,169,a = function.value(a);
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,170,b = function.value(b);
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,171,umIterations += 1 ;
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,172, while ( (fa * fb > 0.0) && ( numIterations < maximumIterations ) );
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,174,"eturn new double[]{a, b};"
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,2," The Apache Software License, Version 1.1"
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,5, reserved.
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,7," Redistribution and use in source and binary forms, with or without"
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,8," modification, are permitted provided that the following conditions"
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,9, are met:
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,11, 1. Redistributions of source code must retain the above copyright
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,12,"    notice, this list of conditions and the following disclaimer."
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,14, 2. Redistributions in binary form must reproduce the above copyright
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,15,"    notice, this list of conditions and the following disclaimer in"
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,16,    the documentation and/or other materials provided with the
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,17,    distribution.
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,19," 3. The end-user documentation included with the redistribution,"
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,20,"    if any, must include the following acknowledgment:"
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,21,"       ""This product includes software developed by the"
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,22,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,23,"    Alternately, this acknowledgment may appear in the software itself,"
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,24,    if and wherever such third-party acknowledgments normally appear.
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,26," 4. The names ""Apache"" and ""Apache Software Foundation"" and"
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,27,"    ""Apache Geronimo"" must not be used to endorse or promote products"
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,28,    derived from this software without prior written permission. For
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,29,"    written permission, please contact apache@apache.org."
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,31," 5. Products derived from this software may not be called ""Apache"","
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,32,"    ""Apache Geronimo"", nor may ""Apache"" appear in their name, without"
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,33,    prior written permission of the Apache Software Foundation.
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,38, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,39," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,46, SUCH DAMAGE.
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,49, This software consists of voluntary contributions made by many
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,50, individuals on behalf of the Apache Software Foundation.  For more
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,51," information on the Apache Software Foundation, please see"
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,52, <http://www.apache.org/>.
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,57,ackage org.apache.commons.math.complex;
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,60, Reference:
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,61,   http://myweb.lmu.edu/dmsmith/ZMLIB.pdf
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,63, @version $Revision: 1.1 $ $Date: 2003/10/30 19:42:43 $
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,65,ublic class Complex {
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,67,** The square root of -1. */
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,68,"ublic static final Complex I = new Complex(0.0, 1.0);"
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,71,"ublic static final Complex NaN = new Complex(Double.NaN, Double.NaN);"
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,73,** 1. */
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,74,"ublic static final Complex ONE = new Complex(1.0, 0.0);"
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,76,** The imaginary part. */
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,77,rotected double imaginary;
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,79,** The real part. */
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,80,rotected double real;
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,83, Create a complex number given the real and imaginary parts.
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,84, @param real the real part.
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,85, @param imaginary the imaginary part.
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,87,"ublic Complex(double real, double imaginary) {"
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,88,uper();
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,89,his.real = real;
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,90,his.imaginary = imaginary;
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,94, Return the absolute value of this complex number.
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,95, @return the absolute value.
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,97,ublic double abs() {
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,98,f (isNaN()) {
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,99,eturn Double.NaN;
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,101,eturn Math.sqrt(squareSum());
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,105, Return the sum of this complex number and the given complex number.
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,106, @param rhs the other complex number.
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,107, @return the complex number sum.
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,109,ublic Complex add(Complex rhs) {
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,110,f (isNaN() || rhs.isNaN()) {
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,111,eturn NaN;
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,114,"eturn new Complex(real + rhs.getReal(),"
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,115,maginary + rhs.getImaginary());
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,119, Return the conjugate of this complex number.
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,120, @return the conjugate.
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,122,ublic Complex conjugate() {
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,123,f (isNaN()) {
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,124,eturn NaN;
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,127,"eturn new Complex(real, -imaginary);"
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,131, Return the quotient of this complex number and the given complex number.
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,132, @param rhs the other complex number.
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,133, @return the complex number quotient.
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,135,ublic Complex divide(Complex rhs) {
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,136,f (isNaN() || rhs.isNaN()) {
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,137,eturn NaN;
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,140,f (Math.abs(rhs.getReal()) < Math.abs(rhs.getImaginary())) {
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,141,ouble q = rhs.getReal() / rhs.getImaginary();
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,142,ouble d = (rhs.getReal() * q) + rhs.getImaginary();
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,143,"eturn new Complex(((real * q) + imaginary) / d,"
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,144,(imaginary * q) - real) / d);
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,145, else {
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,146,ouble q = rhs.getImaginary() / rhs.getReal();
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,147,ouble d = (rhs.getImaginary() * q) + rhs.getReal();
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,148,"eturn new Complex(((imaginary * q) + real) / d,"
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,149,imaginary - (real * q)) / d);
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,156,ublic boolean equals(Object other) {
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,157,oolean ret;
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,159,f (this == other) {
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,160,et = true;
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,161, else if (other == null) {
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,162,et = false;
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,163, else {
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,164,ry {
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,165,omplex rhs = (Complex)other;
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,166,et = (Double.doubleToRawLongBits(real) ==
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,167,ouble.doubleToRawLongBits(rhs.getReal())) &&
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,168,Double.doubleToRawLongBits(imaginary) ==
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,169,ouble.doubleToRawLongBits(rhs.getImaginary()));
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,170, catch (ClassCastException ex) {
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,171,/ ignore exception
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,172,et = false;
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,176,eturn ret;
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,180, Access the imaginary part.
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,181, @return the imaginary part.
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,183,ublic double getImaginary() {
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,184,eturn imaginary;
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,188, Access the real part.
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,189, @return the real part.
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,191,ublic double getReal() {
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,192,eturn real;
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,196, Returns true if this complex number is the special Not-a-Number (NaN)
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,197, value.
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,198, @return true if the value represented by this object is NaN; false
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,199,         otherwise.
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,201,ublic boolean isNaN() {
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,202,eturn Double.isNaN(real) || Double.isNaN(imaginary);
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,206, Return the product of this complex number and the given complex number.
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,207, @param rhs the other complex number.
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,208, @return the complex number product.
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,210,ublic Complex multiply(Complex rhs) {
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,211,f (isNaN() || rhs.isNaN()) {
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,212,eturn NaN;
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,215,ouble p = (real + imaginary) * (rhs.getReal() + rhs.getImaginary());
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,216,ouble ac = real * rhs.getReal();
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,217,ouble bd = imaginary * rhs.getImaginary();
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,218,"eturn new Complex(ac - bd, p - ac - bd);"
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,222, Return the additive inverse of this complex number.
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,223, @return the negation of this complex number.
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,225,ublic Complex negate() {
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,226,f (isNaN()) {
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,227,eturn NaN;
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,230,"eturn new Complex(-real, -imaginary);"
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,234, Return the sum of the squared terms.
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,235, @return the square sum.
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,237,rivate double squareSum() {
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,238,eturn real * real + imaginary * imaginary;
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,242, Return the difference between this complex number and the given complex
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,243, number.
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,244, @param rhs the other complex number.
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,245, @return the complex number difference.
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,247,ublic Complex subtract(Complex rhs) {
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,248,f (isNaN() || rhs.isNaN()) {
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,249,eturn NaN;
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,252,"eturn new Complex(real - rhs.getReal(),"
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,253,maginary - rhs.getImaginary());
False,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,2," The Apache Software License, Version 1.1"
False,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
False,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,5, reserved.
False,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,7," Redistribution and use in source and binary forms, with or without"
False,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,8," modification, are permitted provided that the following conditions"
False,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,9, are met:
False,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,11, 1. Redistributions of source code must retain the above copyright
False,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,12,"    notice, this list of conditions and the following disclaimer."
False,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,14, 2. Redistributions in binary form must reproduce the above copyright
False,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,15,"    notice, this list of conditions and the following disclaimer in"
False,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,16,    the documentation and/or other materials provided with the
False,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,17,    distribution.
False,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,19," 3. The end-user documentation included with the redistribution,"
False,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,20,"    if any, must include the following acknowledgment:"
False,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,21,"       ""This product includes software developed by the"
False,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,22,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,23,"    Alternately, this acknowledgment may appear in the software itself,"
False,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,24,    if and wherever such third-party acknowledgments normally appear.
False,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,26," 4. The names ""Apache"" and ""Apache Software Foundation"" and"
False,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,27,"    ""Apache Geronimo"" must not be used to endorse or promote products"
False,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,28,    derived from this software without prior written permission. For
False,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,29,"    written permission, please contact apache@apache.org."
False,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,31," 5. Products derived from this software may not be called ""Apache"","
False,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,32,"    ""Apache Geronimo"", nor may ""Apache"" appear in their name, without"
False,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,33,    prior written permission of the Apache Software Foundation.
False,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,38, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,39," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,46, SUCH DAMAGE.
False,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,49, This software consists of voluntary contributions made by many
False,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,50, individuals on behalf of the Apache Software Foundation.  For more
False,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,51," information on the Apache Software Foundation, please see"
False,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,52, <http://www.apache.org/>.
False,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,57,ackage org.apache.commons.math.complex;
False,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,59,mport org.apache.commons.math.util.MathUtils;
False,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,62, Reference:
False,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,63,   http://myweb.lmu.edu/dmsmith/ZMLIB.pdf
False,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,65, @version $Revision: 1.1 $ $Date: 2003/10/30 19:42:43 $
False,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,67,ublic class ComplexMath {
False,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,72,rivate ComplexMath() {
False,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,73,uper();
False,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,79,ublic static Complex acos(Complex z) {
False,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,80,f (z.isNaN()) {
False,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,81,eturn Complex.NaN;
False,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,84,eturn Complex.I.negate().multiply(log(z.add(
False,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,85,omplex.I.multiply(sqrt1z(z)))));
False,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,91,ublic static Complex asin(Complex z) {
False,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,92,f (z.isNaN()) {
False,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,93,eturn Complex.NaN;
False,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,96,eturn Complex.I.negate().multiply(log(sqrt1z(z).add(
False,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,97,omplex.I.multiply(z))));
False,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,103,ublic static Complex atan(Complex z) {
False,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,104,f (z.isNaN()) {
False,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,105,eturn Complex.NaN;
False,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,108,eturn Complex.I.multiply(
False,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,109,og(Complex.I.add(z).divide(Complex.I.subtract(z))))
False,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,110,"multiply(new Complex(2.0, 0.0));"
False,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,116,ublic static Complex cos(Complex z) {
False,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,117,f (z.isNaN()) {
False,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,118,eturn Complex.NaN;
False,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,121,ouble a = z.getReal();
False,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,122,ouble b = z.getImaginary();
False,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,124,"eturn new Complex(Math.cos(a) * MathUtils.cosh(b),"
False,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,125,Math.sin(a) * MathUtils.sinh(b));
False,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,131,ublic static Complex cosh(Complex z) {
False,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,132,f (z.isNaN()) {
False,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,133,eturn Complex.NaN;
False,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,136,ouble a = z.getReal();
False,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,137,ouble b = z.getImaginary();
False,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,139,"eturn new Complex(MathUtils.cosh(a) * Math.cos(b),"
False,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,140,athUtils.sinh(a) * Math.sin(b));
False,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,146,ublic static Complex exp(Complex z) {
False,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,147,f (z.isNaN()) {
False,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,148,eturn Complex.NaN;
False,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,151,ouble b = z.getImaginary();
False,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,152,ouble expA = Math.exp(z.getReal());
False,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,153,ouble sinB = Math.sin(b);
False,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,154,ouble cosB = Math.cos(b);
False,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,155,"eturn new Complex(expA * cosB, expA * sinB);"
False,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,161,ublic static Complex log(Complex z) {
False,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,162,f (z.isNaN()) {
False,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,163,eturn Complex.NaN;
False,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,166,"eturn new Complex(Math.log(z.abs()),"
False,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,167,"ath.atan2(z.getImaginary(), z.getReal()));"
False,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,173,"ublic static Complex pow(Complex y, Complex x) {"
False,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,174,eturn exp(x.multiply(log(y)));
False,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,180,ublic static Complex sin(Complex z) {
False,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,181,f (z.isNaN()) {
False,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,182,eturn Complex.NaN;
False,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,185,ouble a = z.getReal();
False,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,186,ouble b = z.getImaginary();
False,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,188,"eturn new Complex(Math.sin(a) * MathUtils.cosh(b),"
False,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,189,ath.cos(a) * MathUtils.sinh(b));
False,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,195,ublic static Complex sinh(Complex z) {
False,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,196,f (z.isNaN()) {
False,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,197,eturn Complex.NaN;
False,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,200,ouble a = z.getReal();
False,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,201,ouble b = z.getImaginary();
False,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,203,"eturn new Complex(MathUtils.sinh(a) * Math.cos(b),"
False,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,204,athUtils.cosh(a) * Math.sin(b));
False,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,210,ublic static Complex sqrt(Complex z) {
False,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,211,f (z.isNaN()) {
False,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,212,eturn Complex.NaN;
False,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,215,ouble a = z.getReal();
False,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,216,ouble b = z.getImaginary();
False,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,218,ouble t = Math.sqrt((Math.abs(a) + z.abs()) / 2.0);
False,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,219,f (a >= 0.0) {
False,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,220,"eturn new Complex(t, b / (2.0 * t));"
False,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,221, else {
False,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,222,ouble s = (b > 0.0 ? 1.0 : (b < 0.0 ? -1.0 : 0.0));
False,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,223,"eturn new Complex(Math.abs(z.getImaginary()) / (2.0 * t), s * t);"
False,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,228, Returns the square root of 1 - z^2.
False,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,229, @return the square root of 1 - z^2.
False,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,231,ublic static Complex sqrt1z(Complex z) {
False,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,232,eturn sqrt(Complex.ONE.subtract(z.multiply(z)));
False,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,238,ublic static Complex tan(Complex z) {
False,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,239,f (z.isNaN()) {
False,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,240,eturn Complex.NaN;
False,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,243,ouble a2 = 2.0 * z.getReal();
False,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,244,ouble b2 = 2.0 * z.getImaginary();
False,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,245,ouble d = Math.cos(a2) + MathUtils.cosh(b2);
False,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,247,"eturn new Complex(Math.sin(a2) / d, MathUtils.sinh(b2) / 2);"
False,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,253,ublic static Complex tanh(Complex z) {
False,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,254,f (z.isNaN()) {
False,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,255,eturn Complex.NaN;
False,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,258,ouble a2 = 2.0 * z.getReal();
False,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,259,ouble b2 = 2.0 * z.getImaginary();
False,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,260,ouble d = MathUtils.cosh(a2) + Math.cos(b2);
False,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,262,"eturn new Complex(MathUtils.sinh(a2) / d, Math.sin(b2) / 2);"
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,2," The Apache Software License, Version 1.1"
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,5, reserved.
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,7," Redistribution and use in source and binary forms, with or without"
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,8," modification, are permitted provided that the following conditions"
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,9, are met:
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,11, 1. Redistributions of source code must retain the above copyright
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,12,"    notice, this list of conditions and the following disclaimer."
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,14, 2. Redistributions in binary form must reproduce the above copyright
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,15,"    notice, this list of conditions and the following disclaimer in"
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,16,    the documentation and/or other materials provided with the
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,17,    distribution.
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,19," 3. The end-user documentation included with the redistribution, if"
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,20,"    any, must include the following acknowledgement:"
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,21,"       ""This product includes software developed by the"
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,22,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,23,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,24,    if and wherever such third-party acknowledgements normally appear.
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,26," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,27,"    Foundation"" must not be used to endorse or promote products derived"
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,28,    from this software without prior written permission. For written
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,29,"    permission, please contact apache@apache.org."
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,31," 5. Products derived from this software may not be called ""Apache"""
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,32,"    nor may ""Apache"" appear in their name without prior written"
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,33,    permission of the Apache Software Foundation.
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,38, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,39," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,46, SUCH DAMAGE.
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,49, This software consists of voluntary contributions made by many
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,50, individuals on behalf of the Apache Software Foundation.  For more
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,51," information on the Apache Software Foundation, please see"
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,52, <http://www.apache.org/>.
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,54,ackage org.apache.commons.math.stat.distribution;
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,56,mport org.apache.commons.math.MathException;
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,57,mport org.apache.commons.math.analysis.UnivariateRealFunction;
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,58,mport org.apache.commons.math.analysis.UnivariateRealSolverUtils;
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,61, Base class for various continuous distributions.  It provides default
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,62, implementations for some of the methods that do not vary from distribution
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,63, to distribution.
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,65, @version $Revision: 1.11 $ $Date: 2003/10/16 15:24:29 $
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,67,ublic abstract class AbstractContinuousDistribution
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,68,mplements ContinuousDistribution {
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,71, Default constructor.
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,73,rotected AbstractContinuousDistribution() {
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,74,uper();
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,78," For this distribution, X, this method returns P(x0 &lt; X &lt; x1).  This"
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,79, is accomplished by using the equality P(x0 &lt; X &lt; x1) =
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,80, P(X &lt; x1) - P(X &lt; x0).
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,82, @param x0 the lower bound
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,83, @param x1 the upper bound
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,84, @return the cummulative probability.
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,86,"ublic double cummulativeProbability(double x0, double x1) {"
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,87,eturn cummulativeProbability(x1) - cummulativeProbability(x0);
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,91," For this distribution, X, this method returns the critical point x, such"
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,92, that P(X &lt; x) = <code>p</code>.
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,94, @param p the desired probability
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,95," @return x, such that P(X &lt; x) = <code>p</code>"
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,97,ublic double inverseCummulativeProbability(final double p) {
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,98,f (p < 0.0 || p > 1.0) {
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,99,hrow new IllegalArgumentException(
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,100,"p must be between 0.0 and 1.0, inclusive."");"
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,103,"/ by default, do simple root finding using bracketing and bisection."
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,104,/ subclasses can overide if there is a better method.
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,105,nivariateRealFunction rootFindingFunction =
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,106,ew UnivariateRealFunction() {
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,108,ublic double value(double x) throws MathException {
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,109,eturn cummulativeProbability(x) - p;
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,112,ublic double firstDerivative(double x) throws MathException {
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,113,eturn 0;
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,116,ublic double secondDerivative(double x) throws MathException {
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,117,eturn 0;
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,121,ry {
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,122,/ bracket root
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,123,"ouble[] bracket = UnivariateRealSolverUtils.bracket(rootFindingFunction,"
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,124,"etInitialDomain(p), getDomainLowerBound(p),"
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,125,etDomainUpperBound(p));
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,127,/ find root
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,128,ouble root = UnivariateRealSolverUtils.solve(
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,129,"ootFindingFunction, bracket[0], bracket[1]);"
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,131,eturn root;
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,132, catch (MathException ex) {
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,133,/ this should never happen.
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,134,eturn Double.NaN;
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,139," Access the initial domain value, based on <code>p</code>, used to"
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,140, bracket a CDF root.  This method is used by
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,141, {@link #inverseCummulativeProbability(double)} to find critical values.
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,143, @param p the desired probability for the critical value
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,144, @return initial domain value
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,146,rotected abstract double getInitialDomain(double p);
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,149," Access the domain value lower bound, based on <code>p</code>, used to"
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,150, bracket a CDF root.  This method is used by
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,151, {@link #inverseCummulativeProbability(double)} to find critical values.
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,153, @param p the desired probability for the critical value
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,154," @return domain value lower bound, i.e."
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,155,         P(X &lt; <i>lower bound</i>) &lt; <code>p</code>
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,157,rotected abstract double getDomainLowerBound(double p);
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,160," Access the domain value upper bound, based on <code>p</code>, used to"
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,161, bracket a CDF root.  This method is used by
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,162, {@link #inverseCummulativeProbability(double)} to find critical values.
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,164, @param p the desired probability for the critical value
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,165," @return domain value upper bound, i.e."
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,166,         P(X &lt; <i>upper bound</i>) &gt; <code>p</code>
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,168,rotected abstract double getDomainUpperBound(double p);
False,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,2," The Apache Software License, Version 1.1"
False,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
False,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,5, reserved.
False,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,7," Redistribution and use in source and binary forms, with or without"
False,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,8," modification, are permitted provided that the following conditions"
False,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,9, are met:
False,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,11, 1. Redistributions of source code must retain the above copyright
False,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,12,"    notice, this list of conditions and the following disclaimer."
False,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,14, 2. Redistributions in binary form must reproduce the above copyright
False,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,15,"    notice, this list of conditions and the following disclaimer in"
False,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,16,    the documentation and/or other materials provided with the
False,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,17,    distribution.
False,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,19," 3. The end-user documentation included with the redistribution, if"
False,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,20,"    any, must include the following acknowledgement:"
False,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,21,"       ""This product includes software developed by the"
False,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,22,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,23,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,24,    if and wherever such third-party acknowledgements normally appear.
False,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,26," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,27,"    Foundation"" must not be used to endorse or promote products derived"
False,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,28,    from this software without prior written permission. For written
False,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,29,"    permission, please contact apache@apache.org."
False,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,31," 5. Products derived from this software may not be called ""Apache"""
False,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,32,"    nor may ""Apache"" appear in their name without prior written"
False,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,33,    permission of the Apache Software Foundation.
False,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,38, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,39," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,46, SUCH DAMAGE.
False,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,49, This software consists of voluntary contributions made by many
False,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,50, individuals on behalf of the Apache Software Foundation.  For more
False,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,51," information on the Apache Software Foundation, please see"
False,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,52, <http://www.apache.org/>.
False,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,54,ackage org.apache.commons.math.stat.distribution;
False,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,58, Base class for various discrete distributions.  It provides default
False,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,59, implementations for some of the methods that do not vary from distribution
False,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,60, to distribution.
False,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,62, @version $Revision: 1.4 $ $Date: 2003/10/16 15:24:29 $
False,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,64,ublic abstract class AbstractDiscreteDistribution
False,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,65,mplements DiscreteDistribution {
False,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,68, Default constructor.
False,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,70,rotected AbstractDiscreteDistribution() {
False,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,71,uper();
False,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,75," For this disbution, X, this method returns P(x0 &le; X &le; x1)."
False,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,76," @param x0 the inclusive, lower bound"
False,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,77," @param x1 the inclusive, upper bound"
False,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,78, @return the cummulative probability.
False,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,80,"ublic double cummulativeProbability(int x0, int x1) {"
False,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,81,eturn cummulativeProbability(x1) -
False,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,82,ummulativeProbability(x0 - 1);
False,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,86," For this distribution, X, this method returns the critical point x, such"
False,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,87, that P(X &le; x) &le; <code>p</code>.
False,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,89, @param p the desired probability
False,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,90," @return x, such that P(X &lt; x) = <code>p</code>"
False,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,92,ublic int inverseCummulativeProbability(final double p) {
False,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,93,f (p < 0.0 || p > 1.0) {
False,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,94,hrow new IllegalArgumentException(
False,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,95,"p must be between 0.0 and 1.0, inclusive."");"
False,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,98,"/ by default, do simple bisection."
False,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,99,/ subclasses can override if there is a better method.
False,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,100,nt x0 = getDomainLowerBound(p);
False,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,101,nt x1 = getDomainUpperBound(p);
False,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,102,ouble pm;
False,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,103,hile (x0 < x1) {
False,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,104,nt xm = x0 + (x1 - x0) / 2;
False,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,105,m = cummulativeProbability(xm);
False,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,106,f (pm > p) {
False,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,107,/ update x1
False,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,108,f (xm == x1) {
False,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,109,/ this can happen with integer division
False,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,110,/ simply decrement x1
False,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,111,-x1;
False,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,112, else {
False,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,113,/ update x1 normally
False,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,114,1 = xm;
False,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,116, else {
False,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,117,/ update x0
False,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,118,f (xm == x0) {
False,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,119,/ this can happen with integer division
False,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,120,/ simply increment x0
False,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,121,+x0;
False,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,122, else {
False,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,123,/ update x0 normally
False,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,124,0 = xm;
False,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,129,/ insure x0 is the correct critical point
False,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,130,m = cummulativeProbability(x0);
False,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,131,hile (pm > p) {
False,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,132,-x0;
False,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,133,m = cummulativeProbability(x0);
False,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,136,eturn x0;
False,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,140," Access the domain value lower bound, based on <code>p</code>, used to"
False,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,141, bracket a PDF root.  This method is used by
False,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,142, {@link #inverseCummulativeProbability(double)} to find critical values.
False,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,144, @param p the desired probability for the critical value
False,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,145," @return domain value lower bound, i.e."
False,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,146,         P(X &lt; <i>lower bound</i>) &lt; <code>p</code>
False,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,148,rotected abstract int getDomainLowerBound(double p);
False,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,151," Access the domain value upper bound, based on <code>p</code>, used to"
False,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,152, bracket a PDF root.  This method is used by
False,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,153, {@link #inverseCummulativeProbability(double)} to find critical values.
False,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,155, @param p the desired probability for the critical value
False,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,156," @return domain value upper bound, i.e."
False,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,157,         P(X &lt; <i>upper bound</i>) &gt; <code>p</code>
False,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,159,rotected abstract int getDomainUpperBound(double p);
False,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,2," The Apache Software License, Version 1.1"
False,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
False,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,5, reserved.
False,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,7," Redistribution and use in source and binary forms, with or without"
False,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,8," modification, are permitted provided that the following conditions"
False,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,9, are met:
False,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,11, 1. Redistributions of source code must retain the above copyright
False,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,12,"    notice, this list of conditions and the following disclaimer."
False,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,14, 2. Redistributions in binary form must reproduce the above copyright
False,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,15,"    notice, this list of conditions and the following disclaimer in"
False,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,16,    the documentation and/or other materials provided with the
False,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,17,    distribution.
False,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,19," 3. The end-user documentation included with the redistribution, if"
False,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,20,"    any, must include the following acknowledgement:"
False,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,21,"       ""This product includes software developed by the"
False,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,22,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,23,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,24,    if and wherever such third-party acknowledgements normally appear.
False,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,26," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,27,"    Foundation"" must not be used to endorse or promote products derived"
False,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,28,    from this software without prior written permission. For written
False,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,29,"    permission, please contact apache@apache.org."
False,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,31," 5. Products derived from this software may not be called ""Apache"""
False,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,32,"    nor may ""Apache"" appear in their name without prior written"
False,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,33,    permission of the Apache Software Foundation.
False,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,38, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,39," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,46, SUCH DAMAGE.
False,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,49, This software consists of voluntary contributions made by many
False,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,50, individuals on behalf of the Apache Software Foundation.  For more
False,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,51," information on the Apache Software Foundation, please see"
False,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,52, <http://www.apache.org/>.
False,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,54,ackage org.apache.commons.math.stat.distribution;
False,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,57, The Binomial Distribution.
False,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,59, Instances of BinomialDistribution objects should be created using
False,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,60," {@link DistributionFactory#createBinomialDistribution(int, double)}."
False,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,62, References:
False,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,63, <ul>
False,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,64," <li><a href=""http://mathworld.wolfram.com/BinomialDistribution.html"">"
False,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,65, Binomial Distribution</a></li>
False,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,66, </ul>
False,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,68, @version $Revision: 1.4 $ $Date: 2003/10/16 15:24:29 $
False,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,70,ublic interface BinomialDistribution extends DiscreteDistribution {
False,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,72, Access the number of trials for this distribution.
False,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,73, @return the number of trials.
False,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,75,nt getNumberOfTrials();
False,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,78, Access the probability of success for this distribution.
False,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,79, @return the probability of success.
False,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,81,ouble getProbabilityOfSuccess();
False,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,84, Change the number of trials for this distribution.
False,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,85, @param trials the new number of trials.
False,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,87,oid setNumberOfTrials(int trials);
False,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,90, Change the probability of success for this distribution.
False,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,91, @param p the new probability of success.
False,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,93,oid setProbabilityOfSuccess(double p);
False,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,2," The Apache Software License, Version 1.1"
False,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
False,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,5, reserved.
False,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,7," Redistribution and use in source and binary forms, with or without"
False,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,8," modification, are permitted provided that the following conditions"
False,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,9, are met:
False,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,11, 1. Redistributions of source code must retain the above copyright
False,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,12,"    notice, this list of conditions and the following disclaimer."
False,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,14, 2. Redistributions in binary form must reproduce the above copyright
False,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,15,"    notice, this list of conditions and the following disclaimer in"
False,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,16,    the documentation and/or other materials provided with the
False,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,17,    distribution.
False,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,19," 3. The end-user documentation included with the redistribution, if"
False,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,20,"    any, must include the following acknowledgement:"
False,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,21,"       ""This product includes software developed by the"
False,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,22,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,23,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,24,    if and wherever such third-party acknowledgements normally appear.
False,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,26," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,27,"    Foundation"" must not be used to endorse or promote products derived"
False,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,28,    from this software without prior written permission. For written
False,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,29,"    permission, please contact apache@apache.org."
False,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,31," 5. Products derived from this software may not be called ""Apache"""
False,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,32,"    nor may ""Apache"" appear in their name without prior written"
False,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,33,    permission of the Apache Software Foundation.
False,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,38, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,39," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,46, SUCH DAMAGE.
False,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,49, This software consists of voluntary contributions made by many
False,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,50, individuals on behalf of the Apache Software Foundation.  For more
False,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,51," information on the Apache Software Foundation, please see"
False,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,52, <http://www.apache.org/>.
False,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,54,ackage org.apache.commons.math.stat.distribution;
False,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,56,mport org.apache.commons.logging.LogFactory;
False,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,57,mport org.apache.commons.math.MathException;
False,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,58,mport org.apache.commons.math.special.Beta;
False,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,59,mport org.apache.commons.math.util.MathUtils;
False,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,62, The default implementation of {@link BinomialDistribution}.
False,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,64, @version $Revision: 1.3 $ $Date: 2003/10/16 15:24:29 $
False,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,66,ublic class BinomialDistributionImpl extends AbstractDiscreteDistribution
False,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,67,mplements BinomialDistribution {
False,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,69,** The number of trials. */
False,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,70,rivate int numberOfTrials;
False,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,72,** The probability of success. */
False,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,73,rivate double probabilityOfSuccess;
False,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,76, Create a binomial distribution with the given number of trials and
False,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,77, probability of success.
False,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,78, @param trials the number of trials.
False,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,79, @param p the probability of success.
False,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,81,"ublic BinomialDistributionImpl(int trials, double p) {"
False,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,82,uper();
False,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,83,etNumberOfTrials(trials);
False,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,84,etProbabilityOfSuccess(p);
False,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,88, Access the number of trials for this distribution.
False,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,89, @return the number of trials.
False,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,91,ublic int getNumberOfTrials() {
False,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,92,eturn numberOfTrials;
False,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,96, Access the probability of success for this distribution.
False,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,97, @return the probability of success.
False,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,99,ublic double getProbabilityOfSuccess() {
False,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,100,eturn probabilityOfSuccess;
False,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,104, Change the number of trials for this distribution.
False,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,105, @param trials the new number of trials.
False,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,107,ublic void setNumberOfTrials(int trials) {
False,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,108,f (trials < 0) {
False,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,109,hrow new IllegalArgumentException(
False,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,110,"number of trials must be non-negative."");"
False,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,112,umberOfTrials = trials;
False,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,116, Change the probability of success for this distribution.
False,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,117, @param p the new probability of success.
False,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,119,ublic void setProbabilityOfSuccess(double p) {
False,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,120,f (p < 0.0 || p > 1.0) {
False,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,121,hrow new IllegalArgumentException(
False,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,122,"probability of success must be between 0.0 and 1.0, inclusive."");"
False,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,124,robabilityOfSuccess = p;
False,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,128," Access the domain value lower bound, based on <code>p</code>, used to"
False,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,129, bracket a PDF root.
False,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,131, @param p the desired probability for the critical value
False,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,132," @return domain value lower bound, i.e."
False,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,133,         P(X &lt; <i>lower bound</i>) &lt; <code>p</code>
False,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,135,rotected int getDomainLowerBound(double p) {
False,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,136,eturn -1;
False,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,140," Access the domain value upper bound, based on <code>p</code>, used to"
False,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,141, bracket a PDF root.
False,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,143, @param p the desired probability for the critical value
False,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,144," @return domain value upper bound, i.e."
False,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,145,         P(X &lt; <i>upper bound</i>) &gt; <code>p</code>
False,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,147,rotected int getDomainUpperBound(double p) {
False,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,148,eturn getNumberOfTrials();
False,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,152," For this disbution, X, this method returns P(X &le; x)."
False,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,153, @param x the value at which the PDF is evaluated.
False,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,154, @return PDF for this distribution.
False,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,156,ublic double cummulativeProbability(int x) {
False,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,157,ouble ret;
False,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,158,f (x < 0) {
False,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,159,et = 0.0;
False,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,160, else if (x >= getNumberOfTrials()) {
False,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,161,et = 1.0;
False,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,162, else {
False,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,163,ry {
False,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,164,"et = 1.0 - Beta.regularizedBeta(getProbabilityOfSuccess(),"
False,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,165," + 1.0, getNumberOfTrials() - x);"
False,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,166, catch (MathException ex) {
False,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,167,ogFactory.getLog(getClass()).error(
False,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,168,"Failed to compute cummulative probability, returning NaN."","
False,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,169,x);
False,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,170,et = Double.NaN;
False,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,173,eturn ret;
False,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,177," For this disbution, X, this method returns P(X = x)."
False,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,178, @param x the value at which the PMF is evaluated.
False,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,179, @return PMF for this distribution.
False,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,181,ublic double probability(int x) {
False,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,182,ouble ret;
False,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,183,f (x < 0 || x > getNumberOfTrials()) {
False,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,184,et = 0.0;
False,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,185, else {
False,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,186,"et = MathUtils.binomialCoefficientDouble(getNumberOfTrials(), x) *"
False,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,187,"ath.pow(getProbabilityOfSuccess(), x) *"
False,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,188,"ath.pow(1.0 - getProbabilityOfSuccess(),"
False,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,189,etNumberOfTrials() - x);
False,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,191,eturn ret;
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,2," The Apache Software License, Version 1.1"
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,5, reserved.
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,7," Redistribution and use in source and binary forms, with or without"
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,8," modification, are permitted provided that the following conditions"
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,9, are met:
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,11, 1. Redistributions of source code must retain the above copyright
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,12,"    notice, this list of conditions and the following disclaimer."
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,14, 2. Redistributions in binary form must reproduce the above copyright
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,15,"    notice, this list of conditions and the following disclaimer in"
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,16,    the documentation and/or other materials provided with the
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,17,    distribution.
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,19," 3. The end-user documentation included with the redistribution, if"
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,20,"    any, must include the following acknowledgement:"
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,21,"       ""This product includes software developed by the"
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,22,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,23,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,24,    if and wherever such third-party acknowledgements normally appear.
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,26," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,27,"    Foundation"" must not be used to endorse or promote products derived"
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,28,    from this software without prior written permission. For written
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,29,"    permission, please contact apache@apache.org."
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,31," 5. Products derived from this software may not be called ""Apache"""
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,32,"    nor may ""Apache"" appear in their name without prior written"
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,33,    permission of the Apache Software Foundation.
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,38, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,39," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,46, SUCH DAMAGE.
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,49, This software consists of voluntary contributions made by many
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,50, individuals on behalf of the Apache Software Foundation.  For more
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,51," information on the Apache Software Foundation, please see"
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,52, <http://www.apache.org/>.
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,54,ackage org.apache.commons.math.stat.distribution;
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,57, The Chi-Squared Distribution.
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,59, Instances of ChiSquaredDistribution objects should be created using
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,60, {@link DistributionFactory#createChiSquareDistribution(double)}.
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,62, References:
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,63, <ul>
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,64," <li><a href=""http://mathworld.wolfram.com/Chi-SquaredDistribution.html"">"
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,65, Chi-Squared Distribution</a></li>
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,66, </ul>
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,68, @version $Revision: 1.7 $ $Date: 2003/10/16 15:24:29 $
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,70,ublic interface ChiSquaredDistribution extends ContinuousDistribution {
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,72, Modify the degrees of freedom.
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,73, @param degreesOfFreedom the new degrees of freedom.
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,75,oid setDegreesOfFreedom(double degreesOfFreedom);
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,78, Access the degrees of freedom.
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,79, @return the degrees of freedom.
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,81,ouble getDegreesOfFreedom();
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,2," The Apache Software License, Version 1.1"
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,5, reserved.
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,7," Redistribution and use in source and binary forms, with or without"
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,8," modification, are permitted provided that the following conditions"
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,9, are met:
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,11, 1. Redistributions of source code must retain the above copyright
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,12,"    notice, this list of conditions and the following disclaimer."
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,14, 2. Redistributions in binary form must reproduce the above copyright
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,15,"    notice, this list of conditions and the following disclaimer in"
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,16,    the documentation and/or other materials provided with the
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,17,    distribution.
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,19," 3. The end-user documentation included with the redistribution, if"
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,20,"    any, must include the following acknowledgement:"
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,21,"       ""This product includes software developed by the"
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,22,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,23,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,24,    if and wherever such third-party acknowledgements normally appear.
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,26," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,27,"    Foundation"" must not be used to endorse or promote products derived"
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,28,    from this software without prior written permission. For written
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,29,"    permission, please contact apache@apache.org."
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,31," 5. Products derived from this software may not be called ""Apache"""
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,32,"    nor may ""Apache"" appear in their name without prior written"
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,33,    permission of the Apache Software Foundation.
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,38, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,39," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,46, SUCH DAMAGE.
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,49, This software consists of voluntary contributions made by many
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,50, individuals on behalf of the Apache Software Foundation.  For more
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,51," information on the Apache Software Foundation, please see"
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,52, <http://www.apache.org/>.
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,54,ackage org.apache.commons.math.stat.distribution;
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,57, The default implementation of {@link ChiSquaredDistribution}
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,59, @version $Revision: 1.7 $ $Date: 2003/10/16 15:24:29 $
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,61,ublic class ChiSquaredDistributionImpl
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,62,xtends AbstractContinuousDistribution
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,63,mplements ChiSquaredDistribution {
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,65,** Internal Gamma distribution. */
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,66,rivate GammaDistribution gamma;
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,69, Create a Chi-Squared distribution with the given degrees of freedom.
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,70, @param degreesOfFreedom degrees of freedom.
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,72,ublic ChiSquaredDistributionImpl(double degreesOfFreedom) {
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,73,uper();
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,74,etGamma(DistributionFactory.newInstance().createGammaDistribution(
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,75,"egreesOfFreedom / 2.0, 2.0));"
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,79, Modify the degrees of freedom.
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,80, @param degreesOfFreedom the new degrees of freedom.
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,82,ublic void setDegreesOfFreedom(double degreesOfFreedom) {
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,83,etGamma().setAlpha(degreesOfFreedom / 2.0);
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,87, Access the degrees of freedom.
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,88, @return the degrees of freedom.
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,90,ublic double getDegreesOfFreedom() {
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,91,eturn getGamma().getAlpha() * 2.0;
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,95," For this disbution, X, this method returns P(X &lt; x)."
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,96, @param x the value at which the CDF is evaluated.
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,97, @return CDF for this distribution.
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,99,ublic double cummulativeProbability(double x) {
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,100,eturn getGamma().cummulativeProbability(x);
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,104," Access the domain value lower bound, based on <code>p</code>, used to"
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,105, bracket a CDF root.  This method is used by
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,106, {@link #inverseCummulativeProbability(double)} to find critical values.
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,108, @param p the desired probability for the critical value
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,109," @return domain value lower bound, i.e."
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,110,         P(X &lt; <i>lower bound</i>) &lt; <code>p</code>
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,112,rotected double getDomainLowerBound(double p) {
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,113,eturn Double.MIN_VALUE * getGamma().getBeta();
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,117," Access the domain value upper bound, based on <code>p</code>, used to"
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,118, bracket a CDF root.  This method is used by
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,119, {@link #inverseCummulativeProbability(double)} to find critical values.
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,121, @param p the desired probability for the critical value
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,122," @return domain value upper bound, i.e."
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,123,         P(X &lt; <i>upper bound</i>) &gt; <code>p</code>
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,125,rotected double getDomainUpperBound(double p) {
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,126,/ NOTE: chi squared is skewed to the left
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,127,"/ NOTE: therefore, P(X < &mu;) > .5"
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,129,ouble ret;
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,131,f (p < .5) {
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,132,/ use mean
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,133,et = getDegreesOfFreedom();
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,134, else {
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,135,/ use max
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,136,et = Double.MAX_VALUE;
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,139,eturn ret;
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,143," Access the initial domain value, based on <code>p</code>, used to"
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,144, bracket a CDF root.  This method is used by
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,145, {@link #inverseCummulativeProbability(double)} to find critical values.
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,147, @param p the desired probability for the critical value
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,148, @return initial domain value
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,150,rotected double getInitialDomain(double p) {
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,151,/ NOTE: chi squared is skewed to the left
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,152,"/ NOTE: therefore, P(X < &mu;) > .5"
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,154,ouble ret;
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,156,f (p < .5) {
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,157,/ use 1/2 mean
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,158,et = getDegreesOfFreedom() * .5;
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,159, else {
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,160,/ use mean
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,161,et = getDegreesOfFreedom();
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,164,eturn ret;
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,168, Modify the Gamma distribution.
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,169, @param gamma the new distribution.
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,171,rivate void setGamma(GammaDistribution gamma) {
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,172,his.gamma = gamma;
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,176, Access the Gamma distribution.
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,177, @return the internal Gamma distribution.
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,179,rivate GammaDistribution getGamma() {
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,180,eturn gamma;
False,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,2," The Apache Software License, Version 1.1"
False,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
False,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,5, reserved.
False,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,7," Redistribution and use in source and binary forms, with or without"
False,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,8," modification, are permitted provided that the following conditions"
False,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,9, are met:
False,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,11, 1. Redistributions of source code must retain the above copyright
False,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,12,"    notice, this list of conditions and the following disclaimer."
False,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,14, 2. Redistributions in binary form must reproduce the above copyright
False,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,15,"    notice, this list of conditions and the following disclaimer in"
False,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,16,    the documentation and/or other materials provided with the
False,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,17,    distribution.
False,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,19," 3. The end-user documentation included with the redistribution, if"
False,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,20,"    any, must include the following acknowledgement:"
False,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,21,"       ""This product includes software developed by the"
False,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,22,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,23,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,24,    if and wherever such third-party acknowledgements normally appear.
False,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,26," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,27,"    Foundation"" must not be used to endorse or promote products derived"
False,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,28,    from this software without prior written permission. For written
False,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,29,"    permission, please contact apache@apache.org."
False,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,31," 5. Products derived from this software may not be called ""Apache"""
False,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,32,"    nor may ""Apache"" appear in their name without prior written"
False,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,33,    permission of the Apache Software Foundation.
False,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,38, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,39," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,46, SUCH DAMAGE.
False,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,49, This software consists of voluntary contributions made by many
False,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,50, individuals on behalf of the Apache Software Foundation.  For more
False,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,51," information on the Apache Software Foundation, please see"
False,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,52, <http://www.apache.org/>.
False,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,54,ackage org.apache.commons.math.stat.distribution;
False,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,57, Base interface for various continuous distributions.
False,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,59, @version $Revision: 1.5 $ $Date: 2003/10/16 15:24:29 $
False,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,61,ublic interface ContinuousDistribution {
False,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,63," For this disbution, X, this method returns P(X &lt; x)."
False,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,64, @param x the value at which the CDF is evaluated.
False,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,65, @return CDF for this distribution.
False,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,67,ouble cummulativeProbability(double x);
False,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,70," For this disbution, X, this method returns P(x0 &lt; X &lt; x1)."
False,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,71, @param x0 the lower bound
False,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,72, @param x1 the upper bound
False,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,73, @return the cummulative probability.
False,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,75,"ouble cummulativeProbability(double x0, double x1);"
False,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,78," For this disbution, X, this method returns x such that P(X &lt; x) = p."
False,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,79, @param p the cummulative probability.
False,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,80, @return x.
False,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,82,ouble inverseCummulativeProbability(double p);
False,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,2," The Apache Software License, Version 1.1"
False,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
False,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,5, reserved.
False,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,7," Redistribution and use in source and binary forms, with or without"
False,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,8," modification, are permitted provided that the following conditions"
False,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,9, are met:
False,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,11, 1. Redistributions of source code must retain the above copyright
False,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,12,"    notice, this list of conditions and the following disclaimer."
False,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,14, 2. Redistributions in binary form must reproduce the above copyright
False,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,15,"    notice, this list of conditions and the following disclaimer in"
False,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,16,    the documentation and/or other materials provided with the
False,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,17,    distribution.
False,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,19," 3. The end-user documentation included with the redistribution, if"
False,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,20,"    any, must include the following acknowledgement:"
False,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,21,"       ""This product includes software developed by the"
False,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,22,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,23,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,24,    if and wherever such third-party acknowledgements normally appear.
False,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,26," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,27,"    Foundation"" must not be used to endorse or promote products derived"
False,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,28,    from this software without prior written permission. For written
False,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,29,"    permission, please contact apache@apache.org."
False,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,31," 5. Products derived from this software may not be called ""Apache"""
False,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,32,"    nor may ""Apache"" appear in their name without prior written"
False,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,33,    permission of the Apache Software Foundation.
False,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,38, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,39," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,46, SUCH DAMAGE.
False,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,49, This software consists of voluntary contributions made by many
False,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,50, individuals on behalf of the Apache Software Foundation.  For more
False,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,51," information on the Apache Software Foundation, please see"
False,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,52, <http://www.apache.org/>.
False,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,54,ackage org.apache.commons.math.stat.distribution;
False,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,57, Base interface for various discrete distributions.
False,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,59, @version $Revision: 1.3 $ $Date: 2003/10/16 15:24:29 $
False,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,61,ublic interface DiscreteDistribution {
False,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,63," For this disbution, X, this method returns P(X = x)."
False,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,64, @param x the value at which the PMF is evaluated.
False,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,65, @return PMF for this distribution.
False,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,67,ouble probability(int x);
False,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,70," For this disbution, X, this method returns P(X &le; x)."
False,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,71, @param x the value at which the PDF is evaluated.
False,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,72, @return PDF for this distribution.
False,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,74,ouble cummulativeProbability(int x);
False,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,77," For this disbution, X, this method returns P(x0 &le; X &le; x1)."
False,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,78," @param x0 the inclusive, lower bound"
False,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,79," @param x1 the inclusive, upper bound"
False,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,80, @return the cummulative probability.
False,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,82,"ouble cummulativeProbability(int x0, int x1);"
False,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,85," For this disbution, X, this method returns x such that P(X &le; x) <= p."
False,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,86, @param p the cummulative probability.
False,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,87, @return x.
False,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,89,nt inverseCummulativeProbability(double p);
False,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,2," The Apache Software License, Version 1.1"
False,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
False,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,5, reserved.
False,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,7," Redistribution and use in source and binary forms, with or without"
False,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,8," modification, are permitted provided that the following conditions"
False,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,9, are met:
False,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,11, 1. Redistributions of source code must retain the above copyright
False,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,12,"    notice, this list of conditions and the following disclaimer."
False,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,14, 2. Redistributions in binary form must reproduce the above copyright
False,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,15,"    notice, this list of conditions and the following disclaimer in"
False,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,16,    the documentation and/or other materials provided with the
False,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,17,    distribution.
False,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,19," 3. The end-user documentation included with the redistribution, if"
False,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,20,"    any, must include the following acknowledgement:"
False,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,21,"       ""This product includes software developed by the"
False,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,22,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,23,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,24,    if and wherever such third-party acknowledgements normally appear.
False,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,26," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,27,"    Foundation"" must not be used to endorse or promote products derived"
False,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,28,    from this software without prior written permission. For written
False,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,29,"    permission, please contact apache@apache.org."
False,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,31," 5. Products derived from this software may not be called ""Apache"""
False,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,32,"    nor may ""Apache"" appear in their name without prior written"
False,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,33,    permission of the Apache Software Foundation.
False,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,38, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,39," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,46, SUCH DAMAGE.
False,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,49, This software consists of voluntary contributions made by many
False,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,50, individuals on behalf of the Apache Software Foundation.  For more
False,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,51," information on the Apache Software Foundation, please see"
False,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,52, <http://www.apache.org/>.
False,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,55,ackage org.apache.commons.math.stat.distribution;
False,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,57,mport org.apache.commons.discovery.tools.DiscoverClass;
False,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,60, This factory provids the means to create common statistical distributions.
False,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,61, The following distributions are supported:
False,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,62, <ul>
False,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,63, <li>Binomial</li>
False,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,64, <li>Chi-Squared</li>
False,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,65, <li>Exponential</li>
False,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,66, <li>F</li>
False,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,67, <li>Gamma</li>
False,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,68, <li>Student's t</li>
False,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,69, </ul>
False,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,71, Common usage:<pre>
False,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,72, DistributionFactory factory = DistributionFactory.newInstance();
False,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,74, // create a Chi-Square distribution with 5 degrees of freedom.
False,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,75, ChiSquaredDistribution chi = factory.createChiSquareDistribution(5.0);
False,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,76, </pre>
False,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,78, @version $Revision: 1.14 $ $Date: 2003/10/16 15:24:29 $
False,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,80,ublic abstract class DistributionFactory {
False,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,82, Default constructor.
False,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,84,rotected DistributionFactory() {
False,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,85,uper();
False,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,89, Create an instance of a <code>DistributionFactory</code>
False,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,90, @return a new factory.
False,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,92,ublic static DistributionFactory newInstance() {
False,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,93,istributionFactory factory = null;
False,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,94,ry {
False,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,95,iscoverClass dc = new DiscoverClass();
False,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,96,actory = (DistributionFactory) dc.newInstance(
False,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,97,"istributionFactory.class,"
False,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,98,"org.apache.commons.math.stat.distribution.DistributionFactoryImpl"");"
False,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,99, catch(Exception ex) {
False,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,100,/ ignore as default implementation will be used.
False,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,102,eturn factory;
False,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,106, Create a binomial distribution with the given number of trials and
False,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,107, probability of success.
False,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,108, @param numberOfTrials the number of trials.
False,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,109, @param probabilityOfSuccess the probability of success.
False,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,110, @return a new binomial distribution.
False,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,112,ublic abstract BinomialDistribution createBinomialDistribution(
False,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,113,"nt numberOfTrials, double probabilityOfSuccess);"
False,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,116, Create a new chi-square distribution with the given degrees of freedom.
False,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,117, @param degreesOfFreedom degrees of freedom.
False,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,118, @return a new chi-square distribution.
False,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,120,ublic abstract ChiSquaredDistribution createChiSquareDistribution(
False,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,121,ouble degreesOfFreedom);
False,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,124, Create a new exponential distribution with the given degrees of freedom.
False,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,125, @param mean mean.
False,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,126, @return a new exponential distribution.
False,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,128,ublic abstract ExponentialDistribution createExponentialDistribution(
False,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,129,ouble mean);
False,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,132, Create a new F-distribution with the given degrees of freedom.
False,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,133, @param numeratorDegreesOfFreedom numerator degrees of freedom.
False,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,134, @param denominatorDegreesOfFreedom denominator degrees of freedom.
False,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,135, @return a new F-distribution.
False,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,137,ublic abstract FDistribution createFDistribution(
False,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,138,"ouble numeratorDegreesOfFreedom, double denominatorDegreesOfFreedom);"
False,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,141, Create a new gamma distribution with the given alpha and beta values.
False,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,142, @param alpha the shape parameter.
False,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,143, @param beta the scale parameter.
False,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,144, @return a new gamma distribution.
False,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,146,ublic abstract GammaDistribution createGammaDistribution(
False,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,147,"ouble alpha, double beta);"
False,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,150, Create a new t distribution with the given degrees of freedom.
False,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,151, @param degreesOfFreedom degrees of freedom.
False,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,152, @return a new t distribution.
False,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,154,ublic abstract TDistribution createTDistribution(double degreesOfFreedom);
False,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,157, Create a new hypergeometric distribution with the given the population
False,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,158," size, the number of successes in the population, and the sample size."
False,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,159, @param populationSize the population size.
False,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,160, @param numberOfSuccesses number of successes in the population.
False,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,161, @param sampleSize the sample size.
False,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,162, @return a new hypergeometric desitribution.
False,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,164,ublic abstract HypergeometricDistribution
False,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,165,"reateHypergeometricDistribution(int populationSize,"
False,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,166,"nt numberOfSuccesses, int sampleSize);"
False,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,2," The Apache Software License, Version 1.1"
False,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
False,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,5, reserved.
False,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,7," Redistribution and use in source and binary forms, with or without"
False,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,8," modification, are permitted provided that the following conditions"
False,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,9, are met:
False,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,11, 1. Redistributions of source code must retain the above copyright
False,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,12,"    notice, this list of conditions and the following disclaimer."
False,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,14, 2. Redistributions in binary form must reproduce the above copyright
False,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,15,"    notice, this list of conditions and the following disclaimer in"
False,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,16,    the documentation and/or other materials provided with the
False,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,17,    distribution.
False,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,19," 3. The end-user documentation included with the redistribution, if"
False,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,20,"    any, must include the following acknowledgement:"
False,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,21,"       ""This product includes software developed by the"
False,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,22,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,23,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,24,    if and wherever such third-party acknowledgements normally appear.
False,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,26," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,27,"    Foundation"" must not be used to endorse or promote products derived"
False,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,28,    from this software without prior written permission. For written
False,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,29,"    permission, please contact apache@apache.org."
False,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,31," 5. Products derived from this software may not be called ""Apache"""
False,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,32,"    nor may ""Apache"" appear in their name without prior written"
False,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,33,    permission of the Apache Software Foundation.
False,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,38, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,39," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,46, SUCH DAMAGE.
False,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,49, This software consists of voluntary contributions made by many
False,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,50, individuals on behalf of the Apache Software Foundation.  For more
False,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,51," information on the Apache Software Foundation, please see"
False,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,52, <http://www.apache.org/>.
False,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,54,ackage org.apache.commons.math.stat.distribution;
False,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,58, A concrete distribution factory.  This is the default factory used by
False,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,59, Commons-Math.
False,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,61, @version $Revision: 1.12 $ $Date: 2003/10/16 15:24:29 $
False,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,63,ublic class DistributionFactoryImpl extends DistributionFactory {
False,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,65, Default constructor.  Package scope to prevent unwanted instantiation.
False,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,67,ublic DistributionFactoryImpl() {
False,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,68,uper();
False,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,72, Create a new chi-square distribution with the given degrees of freedom.
False,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,73, @param degreesOfFreedom degrees of freedom.
False,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,74, @return a new chi-square distribution.
False,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,76,ublic ChiSquaredDistribution createChiSquareDistribution(
False,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,77,inal double degreesOfFreedom) {
False,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,79,eturn new ChiSquaredDistributionImpl(degreesOfFreedom);
False,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,83, Create a new gamma distribution the given alpha and beta values.
False,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,84, @param alpha the shape parameter.
False,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,85, @param beta the scale parameter.
False,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,86, @return a new gamma distribution.
False,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,88,ublic GammaDistribution createGammaDistribution(
False,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,89,"ouble alpha, double beta) {"
False,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,91,"eturn new GammaDistributionImpl(alpha, beta);"
False,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,95, Create a new t distribution with the given degrees of freedom.
False,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,96, @param degreesOfFreedom degrees of freedom.
False,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,97, @return a new t distribution.
False,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,99,ublic TDistribution createTDistribution(double degreesOfFreedom) {
False,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,100,eturn new TDistributionImpl(degreesOfFreedom);
False,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,104, Create a new F-distribution with the given degrees of freedom.
False,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,105, @param numeratorDegreesOfFreedom numerator degrees of freedom.
False,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,106, @param denominatorDegreesOfFreedom denominator degrees of freedom.
False,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,107, @return a new F-distribution.
False,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,109,ublic FDistribution createFDistribution(
False,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,110,"ouble numeratorDegreesOfFreedom,"
False,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,111,ouble denominatorDegreesOfFreedom) {
False,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,112,"eturn new FDistributionImpl(numeratorDegreesOfFreedom,"
False,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,113,enominatorDegreesOfFreedom);
False,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,117, Create a new exponential distribution with the given degrees of freedom.
False,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,118, @param mean mean.
False,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,119, @return a new exponential distribution.
False,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,121,ublic ExponentialDistribution createExponentialDistribution(double mean) {
False,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,122,eturn new ExponentialDistributionImpl(mean);
False,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,126, Create a binomial distribution with the given number of trials and
False,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,127, probability of success.
False,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,128, @param numberOfTrials the number of trials.
False,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,129, @param probabilityOfSuccess the probability of success.
False,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,130, @return a new binomial distribution.
False,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,132,ublic BinomialDistribution createBinomialDistribution(
False,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,133,"nt numberOfTrials, double probabilityOfSuccess) {"
False,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,134,"eturn new BinomialDistributionImpl(numberOfTrials,"
False,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,135,robabilityOfSuccess);
False,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,139, Create a new hypergeometric distribution with the given the population
False,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,140," size, the number of successes in the population, and the sample size."
False,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,141, @param populationSize the population size.
False,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,142, @param numberOfSuccesses number of successes in the population.
False,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,143, @param sampleSize the sample size.
False,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,144, @return a new hypergeometric desitribution.
False,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,146,ublic HypergeometricDistribution createHypergeometricDistribution(
False,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,147,"nt populationSize,"
False,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,148,"nt numberOfSuccesses,"
False,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,149,nt sampleSize)
False,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,151,"eturn new HypergeometricDistributionImpl(populationSize,"
False,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,152,"umberOfSuccesses, sampleSize);"
False,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,2," The Apache Software License, Version 1.1"
False,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
False,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,5, reserved.
False,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,7," Redistribution and use in source and binary forms, with or without"
False,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,8," modification, are permitted provided that the following conditions"
False,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,9, are met:
False,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,11, 1. Redistributions of source code must retain the above copyright
False,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,12,"    notice, this list of conditions and the following disclaimer."
False,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,14, 2. Redistributions in binary form must reproduce the above copyright
False,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,15,"    notice, this list of conditions and the following disclaimer in"
False,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,16,    the documentation and/or other materials provided with the
False,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,17,    distribution.
False,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,19," 3. The end-user documentation included with the redistribution, if"
False,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,20,"    any, must include the following acknowledgement:"
False,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,21,"       ""This product includes software developed by the"
False,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,22,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,23,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,24,    if and wherever such third-party acknowledgements normally appear.
False,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,26," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,27,"    Foundation"" must not be used to endorse or promote products derived"
False,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,28,    from this software without prior written permission. For written
False,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,29,"    permission, please contact apache@apache.org."
False,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,31," 5. Products derived from this software may not be called ""Apache"""
False,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,32,"    nor may ""Apache"" appear in their name without prior written"
False,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,33,    permission of the Apache Software Foundation.
False,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,38, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,39," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,46, SUCH DAMAGE.
False,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,49, This software consists of voluntary contributions made by many
False,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,50, individuals on behalf of the Apache Software Foundation.  For more
False,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,51," information on the Apache Software Foundation, please see"
False,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,52, <http://www.apache.org/>.
False,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,54,ackage org.apache.commons.math.stat.distribution;
False,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,57, The Exponential Distribution.
False,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,59, Instances of ExponentialDistribution objects should be created using
False,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,60, {@link DistributionFactory#createExponentialDistribution(double)}.
False,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,62, References:
False,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,63, <ul>
False,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,64," <li><a href=""http://mathworld.wolfram.com/ExponentialDistribution.html"">"
False,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,65, Exponential Distribution</a></li>
False,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,67, @version $Revision: 1.5 $ $Date: 2003/10/16 15:24:29 $
False,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,69,ublic interface ExponentialDistribution extends ContinuousDistribution {
False,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,71, Modify the mean.
False,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,72, @param mean the new mean.
False,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,74,oid setMean(double mean);
False,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,77, Access the mean.
False,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,78, @return the mean.
False,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,80,ouble getMean();
False,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,2," The Apache Software License, Version 1.1"
False,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
False,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,5, reserved.
False,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,7," Redistribution and use in source and binary forms, with or without"
False,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,8," modification, are permitted provided that the following conditions"
False,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,9, are met:
False,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,11, 1. Redistributions of source code must retain the above copyright
False,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,12,"    notice, this list of conditions and the following disclaimer."
False,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,14, 2. Redistributions in binary form must reproduce the above copyright
False,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,15,"    notice, this list of conditions and the following disclaimer in"
False,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,16,    the documentation and/or other materials provided with the
False,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,17,    distribution.
False,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,19," 3. The end-user documentation included with the redistribution, if"
False,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,20,"    any, must include the following acknowledgement:"
False,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,21,"       ""This product includes software developed by the"
False,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,22,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,23,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,24,    if and wherever such third-party acknowledgements normally appear.
False,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,26," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,27,"    Foundation"" must not be used to endorse or promote products derived"
False,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,28,    from this software without prior written permission. For written
False,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,29,"    permission, please contact apache@apache.org."
False,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,31," 5. Products derived from this software may not be called ""Apache"""
False,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,32,"    nor may ""Apache"" appear in their name without prior written"
False,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,33,    permission of the Apache Software Foundation.
False,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,38, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,39," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,46, SUCH DAMAGE.
False,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,49, This software consists of voluntary contributions made by many
False,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,50, individuals on behalf of the Apache Software Foundation.  For more
False,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,51," information on the Apache Software Foundation, please see"
False,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,52, <http://www.apache.org/>.
False,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,54,ackage org.apache.commons.math.stat.distribution;
False,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,57, The default implementation of {@link ExponentialDistribution}
False,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,59, @version $Revision: 1.6 $ $Date: 2003/10/16 15:24:29 $
False,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,61,ublic class ExponentialDistributionImpl
False,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,62,mplements ExponentialDistribution {
False,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,64,** The mean of this distribution. */
False,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,65,rivate double mean;
False,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,68, Create a exponential distribution with the given mean.
False,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,69, @param mean mean of this distribution.
False,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,71,ublic ExponentialDistributionImpl(double mean) {
False,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,72,uper();
False,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,73,etMean(mean);
False,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,77, Modify the mean.
False,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,78, @param mean the new mean.
False,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,80,ublic void setMean(double mean) {
False,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,81,f (mean <= 0.0) {
False,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,82,"hrow new IllegalArgumentException(""mean must be positive."");"
False,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,84,his.mean = mean;
False,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,88, Access the mean.
False,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,89, @return the mean.
False,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,91,ublic double getMean() {
False,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,92,eturn mean;
False,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,96," For this disbution, X, this method returns P(X &lt; x)."
False,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,98, The implementation of this method is based on:
False,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,99, <ul>
False,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,100, <li>
False,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,101," <a href=""http://mathworld.wolfram.com/ExponentialDistribution.html"">"
False,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,102," Exponential Distribution</a>, equation (1).</li>"
False,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,103, </ul>
False,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,105, @param x the value at which the CDF is evaluated.
False,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,106, @return CDF for this distribution.
False,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,108,ublic double cummulativeProbability(double x) {
False,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,109,ouble ret;
False,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,110,f (x <= 0.0) {
False,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,111,et = 0.0;
False,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,112, else {
False,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,113,et = 1.0 - Math.exp(-x / getMean());
False,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,115,eturn ret;
False,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,119," For this distribution, X, this method returns the critical point x, such"
False,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,120, that P(X &lt; x) = <code>p</code>.
False,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,122, @param p the desired probability
False,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,123," @return x, such that P(X &lt; x) = <code>p</code>"
False,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,125,ublic double inverseCummulativeProbability(double p) {
False,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,126,ouble ret;
False,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,128,f (p < 0.0 || p > 1.0) {
False,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,129,et = Double.NaN;
False,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,130, else if (p == 1.0) {
False,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,131,et = Double.POSITIVE_INFINITY;
False,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,132, else {
False,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,133,et = -getMean() * Math.log(1.0 - p);
False,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,136,eturn ret;
False,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,140," For this disbution, X, this method returns P(x0 &lt; X &lt; x1)."
False,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,141, @param x0 the lower bound
False,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,142, @param x1 the upper bound
False,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,143, @return the cummulative probability.
False,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,145,"ublic double cummulativeProbability(double x0, double x1) {"
False,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,146,eturn cummulativeProbability(x1) - cummulativeProbability(x0);
False,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,2," The Apache Software License, Version 1.1"
False,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
False,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,5, reserved.
False,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,7," Redistribution and use in source and binary forms, with or without"
False,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,8," modification, are permitted provided that the following conditions"
False,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,9, are met:
False,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,11, 1. Redistributions of source code must retain the above copyright
False,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,12,"    notice, this list of conditions and the following disclaimer."
False,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,14, 2. Redistributions in binary form must reproduce the above copyright
False,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,15,"    notice, this list of conditions and the following disclaimer in"
False,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,16,    the documentation and/or other materials provided with the
False,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,17,    distribution.
False,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,19," 3. The end-user documentation included with the redistribution, if"
False,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,20,"    any, must include the following acknowledgement:"
False,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,21,"       ""This product includes software developed by the"
False,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,22,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,23,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,24,    if and wherever such third-party acknowledgements normally appear.
False,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,26," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,27,"    Foundation"" must not be used to endorse or promote products derived"
False,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,28,    from this software without prior written permission. For written
False,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,29,"    permission, please contact apache@apache.org."
False,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,31," 5. Products derived from this software may not be called ""Apache"""
False,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,32,"    nor may ""Apache"" appear in their name without prior written"
False,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,33,    permission of the Apache Software Foundation.
False,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,38, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,39," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,46, SUCH DAMAGE.
False,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,49, This software consists of voluntary contributions made by many
False,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,50, individuals on behalf of the Apache Software Foundation.  For more
False,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,51," information on the Apache Software Foundation, please see"
False,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,52, <http://www.apache.org/>.
False,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,54,ackage org.apache.commons.math.stat.distribution;
False,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,57, F-Distribution.
False,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,59, Instances of FDistribution objects should be created using
False,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,60," {@link DistributionFactory#createFDistribution(double,double)}."
False,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,62, References:
False,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,63, <ul>
False,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,64," <li><a href=""http://mathworld.wolfram.com/F-Distribution.html"">"
False,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,65, F-Distribution</a></li>
False,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,66, </ul>
False,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,68, @version $Revision: 1.6 $ $Date: 2003/10/16 15:24:29 $
False,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,70,ublic interface FDistribution extends ContinuousDistribution {
False,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,72, Modify the numerator degrees of freedom.
False,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,73, @param degreesOfFreedom the new numerator degrees of freedom.
False,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,75,oid setNumeratorDegreesOfFreedom(double degreesOfFreedom);
False,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,78, Access the numerator degrees of freedom.
False,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,79, @return the numerator degrees of freedom.
False,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,81,ouble getNumeratorDegreesOfFreedom();
False,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,84, Modify the denominator degrees of freedom.
False,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,85, @param degreesOfFreedom the new denominator degrees of freedom.
False,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,87,oid setDenominatorDegreesOfFreedom(double degreesOfFreedom);
False,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,90, Access the denominator degrees of freedom.
False,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,91, @return the denominator degrees of freedom.
False,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,93,ouble getDenominatorDegreesOfFreedom();
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,2," The Apache Software License, Version 1.1"
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,5, reserved.
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,7," Redistribution and use in source and binary forms, with or without"
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,8," modification, are permitted provided that the following conditions"
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,9, are met:
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,11, 1. Redistributions of source code must retain the above copyright
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,12,"    notice, this list of conditions and the following disclaimer."
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,14, 2. Redistributions in binary form must reproduce the above copyright
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,15,"    notice, this list of conditions and the following disclaimer in"
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,16,    the documentation and/or other materials provided with the
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,17,    distribution.
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,19," 3. The end-user documentation included with the redistribution, if"
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,20,"    any, must include the following acknowledgement:"
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,21,"       ""This product includes software developed by the"
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,22,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,23,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,24,    if and wherever such third-party acknowledgements normally appear.
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,26," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,27,"    Foundation"" must not be used to endorse or promote products derived"
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,28,    from this software without prior written permission. For written
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,29,"    permission, please contact apache@apache.org."
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,31," 5. Products derived from this software may not be called ""Apache"""
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,32,"    nor may ""Apache"" appear in their name without prior written"
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,33,    permission of the Apache Software Foundation.
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,38, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,39," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,46, SUCH DAMAGE.
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,49, This software consists of voluntary contributions made by many
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,50, individuals on behalf of the Apache Software Foundation.  For more
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,51," information on the Apache Software Foundation, please see"
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,52, <http://www.apache.org/>.
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,54,ackage org.apache.commons.math.stat.distribution;
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,56,mport org.apache.commons.logging.LogFactory;
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,57,mport org.apache.commons.math.MathException;
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,58,mport org.apache.commons.math.special.Beta;
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,61, Default implementation of
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,62, {@link org.apache.commons.math.stat.distribution.FDistribution}.
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,64, @version $Revision: 1.6 $ $Date: 2003/10/16 15:24:29 $
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,66,ublic class FDistributionImpl
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,67,xtends AbstractContinuousDistribution
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,68,mplements FDistribution {
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,70,** The numerator degrees of freedom*/
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,71,rivate double numeratorDegreesOfFreedom;
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,73,** The numerator degrees of freedom*/
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,74,rivate double denominatorDegreesOfFreedom;
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,77, Create a F distribution using the given degrees of freedom.
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,78, @param numeratorDegreesOfFreedom the numerator degrees of freedom.
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,79, @param denominatorDegreesOfFreedom the denominator degrees of freedom.
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,81,"ublic FDistributionImpl(double numeratorDegreesOfFreedom,"
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,82,ouble denominatorDegreesOfFreedom) {
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,83,uper();
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,84,etNumeratorDegreesOfFreedom(numeratorDegreesOfFreedom);
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,85,etDenominatorDegreesOfFreedom(denominatorDegreesOfFreedom);
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,89," For this disbution, X, this method returns P(X &lt; x)."
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,91, The implementation of this method is based on:
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,92, <ul>
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,93, <li>
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,94," <a href=""http://mathworld.wolfram.com/F-Distribution.html"">"
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,95," F-Distribution</a>, equation (4).</li>"
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,96, </ul>
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,98, @param x the value at which the CDF is evaluated.
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,99, @return CDF for this distribution.
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,101,ublic double cummulativeProbability(double x) {
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,102,ouble ret;
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,103,f (x <= 0.0) {
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,104,et = 0.0;
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,105, else {
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,106,ouble n = getNumeratorDegreesOfFreedom();
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,107,ouble m = getDenominatorDegreesOfFreedom();
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,109,ry {
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,110,"et = Beta.regularizedBeta((n * x) / (m + n * x),"
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,111,".5 * n,"
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,112,.5 * m);
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,113, catch (MathException ex) {
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,114,ogFactory.getLog(getClass()).error(
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,115,"Failed to compute cummulative probability, returning NaN."","
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,116,x);
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,117,et = Double.NaN;
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,120,eturn ret;
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,124," Access the domain value lower bound, based on <code>p</code>, used to"
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,125, bracket a CDF root.  This method is used by
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,126, {@link #inverseCummulativeProbability(double)} to find critical values.
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,128, @param p the desired probability for the critical value
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,129," @return domain value lower bound, i.e."
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,130,         P(X &lt; <i>lower bound</i>) &lt; <code>p</code>
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,132,rotected double getDomainLowerBound(double p) {
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,133,eturn 0.0;
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,137," Access the domain value upper bound, based on <code>p</code>, used to"
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,138, bracket a CDF root.  This method is used by
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,139, {@link #inverseCummulativeProbability(double)} to find critical values.
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,141, @param p the desired probability for the critical value
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,142," @return domain value upper bound, i.e."
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,143,         P(X &lt; <i>upper bound</i>) &gt; <code>p</code>
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,145,rotected double getDomainUpperBound(double p) {
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,146,eturn Double.MAX_VALUE;
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,150," Access the initial domain value, based on <code>p</code>, used to"
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,151, bracket a CDF root.  This method is used by
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,152, {@link #inverseCummulativeProbability(double)} to find critical values.
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,154, @param p the desired probability for the critical value
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,155, @return initial domain value
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,157,rotected double getInitialDomain(double p) {
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,158,eturn getDenominatorDegreesOfFreedom() /
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,159,getDenominatorDegreesOfFreedom() - 2.0);
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,163, Modify the numerator degrees of freedom.
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,164, @param degreesOfFreedom the new numerator degrees of freedom.
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,166,ublic void setNumeratorDegreesOfFreedom(double degreesOfFreedom) {
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,167,f (degreesOfFreedom <= 0.0) {
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,168,hrow new IllegalArgumentException(
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,169,"degrees of freedom must be positive."");"
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,171,his.numeratorDegreesOfFreedom = degreesOfFreedom;
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,175, Access the numerator degrees of freedom.
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,176, @return the numerator degrees of freedom.
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,178,ublic double getNumeratorDegreesOfFreedom() {
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,179,eturn numeratorDegreesOfFreedom;
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,183, Modify the denominator degrees of freedom.
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,184, @param degreesOfFreedom the new denominator degrees of freedom.
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,186,ublic void setDenominatorDegreesOfFreedom(double degreesOfFreedom) {
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,187,f (degreesOfFreedom <= 0.0) {
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,188,hrow new IllegalArgumentException(
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,189,"degrees of freedom must be positive."");"
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,191,his.denominatorDegreesOfFreedom = degreesOfFreedom;
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,195, Access the denominator degrees of freedom.
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,196, @return the denominator degrees of freedom.
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,198,ublic double getDenominatorDegreesOfFreedom() {
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,199,eturn denominatorDegreesOfFreedom;
False,src/java/org/apache/commons/math/distribution/GammaDistribution.java,src/java/org/apache/commons/math/distribution/GammaDistribution.java,2," The Apache Software License, Version 1.1"
False,src/java/org/apache/commons/math/distribution/GammaDistribution.java,src/java/org/apache/commons/math/distribution/GammaDistribution.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
False,src/java/org/apache/commons/math/distribution/GammaDistribution.java,src/java/org/apache/commons/math/distribution/GammaDistribution.java,5, reserved.
False,src/java/org/apache/commons/math/distribution/GammaDistribution.java,src/java/org/apache/commons/math/distribution/GammaDistribution.java,7," Redistribution and use in source and binary forms, with or without"
False,src/java/org/apache/commons/math/distribution/GammaDistribution.java,src/java/org/apache/commons/math/distribution/GammaDistribution.java,8," modification, are permitted provided that the following conditions"
False,src/java/org/apache/commons/math/distribution/GammaDistribution.java,src/java/org/apache/commons/math/distribution/GammaDistribution.java,9, are met:
False,src/java/org/apache/commons/math/distribution/GammaDistribution.java,src/java/org/apache/commons/math/distribution/GammaDistribution.java,11, 1. Redistributions of source code must retain the above copyright
False,src/java/org/apache/commons/math/distribution/GammaDistribution.java,src/java/org/apache/commons/math/distribution/GammaDistribution.java,12,"    notice, this list of conditions and the following disclaimer."
False,src/java/org/apache/commons/math/distribution/GammaDistribution.java,src/java/org/apache/commons/math/distribution/GammaDistribution.java,14, 2. Redistributions in binary form must reproduce the above copyright
False,src/java/org/apache/commons/math/distribution/GammaDistribution.java,src/java/org/apache/commons/math/distribution/GammaDistribution.java,15,"    notice, this list of conditions and the following disclaimer in"
False,src/java/org/apache/commons/math/distribution/GammaDistribution.java,src/java/org/apache/commons/math/distribution/GammaDistribution.java,16,    the documentation and/or other materials provided with the
False,src/java/org/apache/commons/math/distribution/GammaDistribution.java,src/java/org/apache/commons/math/distribution/GammaDistribution.java,17,    distribution.
False,src/java/org/apache/commons/math/distribution/GammaDistribution.java,src/java/org/apache/commons/math/distribution/GammaDistribution.java,19," 3. The end-user documentation included with the redistribution, if"
False,src/java/org/apache/commons/math/distribution/GammaDistribution.java,src/java/org/apache/commons/math/distribution/GammaDistribution.java,20,"    any, must include the following acknowledgement:"
False,src/java/org/apache/commons/math/distribution/GammaDistribution.java,src/java/org/apache/commons/math/distribution/GammaDistribution.java,21,"       ""This product includes software developed by the"
False,src/java/org/apache/commons/math/distribution/GammaDistribution.java,src/java/org/apache/commons/math/distribution/GammaDistribution.java,22,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/java/org/apache/commons/math/distribution/GammaDistribution.java,src/java/org/apache/commons/math/distribution/GammaDistribution.java,23,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/java/org/apache/commons/math/distribution/GammaDistribution.java,src/java/org/apache/commons/math/distribution/GammaDistribution.java,24,    if and wherever such third-party acknowledgements normally appear.
False,src/java/org/apache/commons/math/distribution/GammaDistribution.java,src/java/org/apache/commons/math/distribution/GammaDistribution.java,26," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/java/org/apache/commons/math/distribution/GammaDistribution.java,src/java/org/apache/commons/math/distribution/GammaDistribution.java,27,"    Foundation"" must not be used to endorse or promote products derived"
False,src/java/org/apache/commons/math/distribution/GammaDistribution.java,src/java/org/apache/commons/math/distribution/GammaDistribution.java,28,    from this software without prior written permission. For written
False,src/java/org/apache/commons/math/distribution/GammaDistribution.java,src/java/org/apache/commons/math/distribution/GammaDistribution.java,29,"    permission, please contact apache@apache.org."
False,src/java/org/apache/commons/math/distribution/GammaDistribution.java,src/java/org/apache/commons/math/distribution/GammaDistribution.java,31," 5. Products derived from this software may not be called ""Apache"""
False,src/java/org/apache/commons/math/distribution/GammaDistribution.java,src/java/org/apache/commons/math/distribution/GammaDistribution.java,32,"    nor may ""Apache"" appear in their name without prior written"
False,src/java/org/apache/commons/math/distribution/GammaDistribution.java,src/java/org/apache/commons/math/distribution/GammaDistribution.java,33,    permission of the Apache Software Foundation.
False,src/java/org/apache/commons/math/distribution/GammaDistribution.java,src/java/org/apache/commons/math/distribution/GammaDistribution.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/java/org/apache/commons/math/distribution/GammaDistribution.java,src/java/org/apache/commons/math/distribution/GammaDistribution.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/java/org/apache/commons/math/distribution/GammaDistribution.java,src/java/org/apache/commons/math/distribution/GammaDistribution.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/java/org/apache/commons/math/distribution/GammaDistribution.java,src/java/org/apache/commons/math/distribution/GammaDistribution.java,38, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/java/org/apache/commons/math/distribution/GammaDistribution.java,src/java/org/apache/commons/math/distribution/GammaDistribution.java,39," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/java/org/apache/commons/math/distribution/GammaDistribution.java,src/java/org/apache/commons/math/distribution/GammaDistribution.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/java/org/apache/commons/math/distribution/GammaDistribution.java,src/java/org/apache/commons/math/distribution/GammaDistribution.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/java/org/apache/commons/math/distribution/GammaDistribution.java,src/java/org/apache/commons/math/distribution/GammaDistribution.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/java/org/apache/commons/math/distribution/GammaDistribution.java,src/java/org/apache/commons/math/distribution/GammaDistribution.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/java/org/apache/commons/math/distribution/GammaDistribution.java,src/java/org/apache/commons/math/distribution/GammaDistribution.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/java/org/apache/commons/math/distribution/GammaDistribution.java,src/java/org/apache/commons/math/distribution/GammaDistribution.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/java/org/apache/commons/math/distribution/GammaDistribution.java,src/java/org/apache/commons/math/distribution/GammaDistribution.java,46, SUCH DAMAGE.
False,src/java/org/apache/commons/math/distribution/GammaDistribution.java,src/java/org/apache/commons/math/distribution/GammaDistribution.java,49, This software consists of voluntary contributions made by many
False,src/java/org/apache/commons/math/distribution/GammaDistribution.java,src/java/org/apache/commons/math/distribution/GammaDistribution.java,50, individuals on behalf of the Apache Software Foundation.  For more
False,src/java/org/apache/commons/math/distribution/GammaDistribution.java,src/java/org/apache/commons/math/distribution/GammaDistribution.java,51," information on the Apache Software Foundation, please see"
False,src/java/org/apache/commons/math/distribution/GammaDistribution.java,src/java/org/apache/commons/math/distribution/GammaDistribution.java,52, <http://www.apache.org/>.
False,src/java/org/apache/commons/math/distribution/GammaDistribution.java,src/java/org/apache/commons/math/distribution/GammaDistribution.java,54,ackage org.apache.commons.math.stat.distribution;
False,src/java/org/apache/commons/math/distribution/GammaDistribution.java,src/java/org/apache/commons/math/distribution/GammaDistribution.java,57, The Gamma Distribution.
False,src/java/org/apache/commons/math/distribution/GammaDistribution.java,src/java/org/apache/commons/math/distribution/GammaDistribution.java,59, Instances of GammaDistribution objects should be created using
False,src/java/org/apache/commons/math/distribution/GammaDistribution.java,src/java/org/apache/commons/math/distribution/GammaDistribution.java,60," {@link DistributionFactory#createGammaDistribution(double,double)}."
False,src/java/org/apache/commons/math/distribution/GammaDistribution.java,src/java/org/apache/commons/math/distribution/GammaDistribution.java,62, References:
False,src/java/org/apache/commons/math/distribution/GammaDistribution.java,src/java/org/apache/commons/math/distribution/GammaDistribution.java,63, <ul>
False,src/java/org/apache/commons/math/distribution/GammaDistribution.java,src/java/org/apache/commons/math/distribution/GammaDistribution.java,64," <li><a href=""http://mathworld.wolfram.com/GammaDistribution.html"">"
False,src/java/org/apache/commons/math/distribution/GammaDistribution.java,src/java/org/apache/commons/math/distribution/GammaDistribution.java,65, Gamma Distribution</a></li>
False,src/java/org/apache/commons/math/distribution/GammaDistribution.java,src/java/org/apache/commons/math/distribution/GammaDistribution.java,66, </ul>
False,src/java/org/apache/commons/math/distribution/GammaDistribution.java,src/java/org/apache/commons/math/distribution/GammaDistribution.java,68, @version $Revision: 1.8 $ $Date: 2003/10/16 15:24:29 $
False,src/java/org/apache/commons/math/distribution/GammaDistribution.java,src/java/org/apache/commons/math/distribution/GammaDistribution.java,70,ublic interface GammaDistribution extends ContinuousDistribution {
False,src/java/org/apache/commons/math/distribution/GammaDistribution.java,src/java/org/apache/commons/math/distribution/GammaDistribution.java,72," Modify the shape parameter, alpha."
False,src/java/org/apache/commons/math/distribution/GammaDistribution.java,src/java/org/apache/commons/math/distribution/GammaDistribution.java,73, @param alpha the new shape parameter.
False,src/java/org/apache/commons/math/distribution/GammaDistribution.java,src/java/org/apache/commons/math/distribution/GammaDistribution.java,75,oid setAlpha(double alpha);
False,src/java/org/apache/commons/math/distribution/GammaDistribution.java,src/java/org/apache/commons/math/distribution/GammaDistribution.java,78," Access the shape parameter, alpha"
False,src/java/org/apache/commons/math/distribution/GammaDistribution.java,src/java/org/apache/commons/math/distribution/GammaDistribution.java,79, @return alpha.
False,src/java/org/apache/commons/math/distribution/GammaDistribution.java,src/java/org/apache/commons/math/distribution/GammaDistribution.java,81,ouble getAlpha();
False,src/java/org/apache/commons/math/distribution/GammaDistribution.java,src/java/org/apache/commons/math/distribution/GammaDistribution.java,84," Modify the scale parameter, beta."
False,src/java/org/apache/commons/math/distribution/GammaDistribution.java,src/java/org/apache/commons/math/distribution/GammaDistribution.java,85, @param beta the new scale parameter.
False,src/java/org/apache/commons/math/distribution/GammaDistribution.java,src/java/org/apache/commons/math/distribution/GammaDistribution.java,87,oid setBeta(double beta);
False,src/java/org/apache/commons/math/distribution/GammaDistribution.java,src/java/org/apache/commons/math/distribution/GammaDistribution.java,90," Access the scale parameter, beta"
False,src/java/org/apache/commons/math/distribution/GammaDistribution.java,src/java/org/apache/commons/math/distribution/GammaDistribution.java,91, @return beta.
False,src/java/org/apache/commons/math/distribution/GammaDistribution.java,src/java/org/apache/commons/math/distribution/GammaDistribution.java,93,ouble getBeta();
False,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,2," The Apache Software License, Version 1.1"
False,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
False,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,5, reserved.
False,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,7," Redistribution and use in source and binary forms, with or without"
False,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,8," modification, are permitted provided that the following conditions"
False,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,9, are met:
False,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,11, 1. Redistributions of source code must retain the above copyright
False,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,12,"    notice, this list of conditions and the following disclaimer."
False,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,14, 2. Redistributions in binary form must reproduce the above copyright
False,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,15,"    notice, this list of conditions and the following disclaimer in"
False,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,16,    the documentation and/or other materials provided with the
False,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,17,    distribution.
False,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,19," 3. The end-user documentation included with the redistribution, if"
False,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,20,"    any, must include the following acknowledgement:"
False,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,21,"       ""This product includes software developed by the"
False,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,22,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,23,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,24,    if and wherever such third-party acknowledgements normally appear.
False,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,26," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,27,"    Foundation"" must not be used to endorse or promote products derived"
False,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,28,    from this software without prior written permission. For written
False,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,29,"    permission, please contact apache@apache.org."
False,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,31," 5. Products derived from this software may not be called ""Apache"""
False,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,32,"    nor may ""Apache"" appear in their name without prior written"
False,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,33,    permission of the Apache Software Foundation.
False,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,38, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,39," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,46, SUCH DAMAGE.
False,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,49, This software consists of voluntary contributions made by many
False,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,50, individuals on behalf of the Apache Software Foundation.  For more
False,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,51," information on the Apache Software Foundation, please see"
False,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,52, <http://www.apache.org/>.
False,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,54,ackage org.apache.commons.math.stat.distribution;
False,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,56,mport org.apache.commons.logging.LogFactory;
False,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,57,mport org.apache.commons.math.MathException;
False,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,58,mport org.apache.commons.math.special.Gamma;
False,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,61, The default implementation of {@link GammaDistribution}
False,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,63, @version $Revision: 1.9 $ $Date: 2003/10/16 15:24:29 $
False,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,65,ublic class GammaDistributionImpl extends AbstractContinuousDistribution
False,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,66,mplements GammaDistribution {
False,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,68,** The shape parameter. */
False,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,69,rivate double alpha;
False,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,71,** The scale parameter. */
False,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,72,rivate double beta;
False,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,75, Create a new gamma distribution with the given alpha and beta values.
False,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,76, @param alpha the shape parameter.
False,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,77, @param beta the scale parameter.
False,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,79,"ublic GammaDistributionImpl(double alpha, double beta) {"
False,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,80,uper();
False,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,81,etAlpha(alpha);
False,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,82,etBeta(beta);
False,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,86," For this disbution, X, this method returns P(X &lt; x)."
False,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,88, The implementation of this method is based on:
False,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,89, <ul>
False,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,90, <li>
False,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,91," <a href=""http://mathworld.wolfram.com/Chi-SquaredDistribution.html"">"
False,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,92," Chi-Squared Distribution</a>, equation (9).</li>"
False,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,93," <li>Casella, G., & Berger, R. (1990). <i>Statistical Inference</i>."
False,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,94," Belmont, CA: Duxbury Press.</li>"
False,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,95, </ul>
False,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,97, @param x the value at which the CDF is evaluated.
False,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,98, @return CDF for this distribution.
False,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,100,ublic double cummulativeProbability(double x) {
False,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,101,ouble ret;
False,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,103,f (x <= 0.0) {
False,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,104,et = 0.0;
False,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,105, else {
False,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,106,ry {
False,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,107,"et = Gamma.regularizedGammaP(getAlpha(), x / getBeta());"
False,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,108, catch(MathException ex){
False,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,109,ogFactory.getLog(getClass()).error(
False,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,110,"Failed to compute cummulative probability, returning NaN."","
False,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,111,x);
False,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,112,et = Double.NaN;
False,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,116,eturn ret;
False,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,120," Modify the shape parameter, alpha."
False,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,121, @param alpha the new shape parameter.
False,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,123,ublic void setAlpha(double alpha) {
False,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,124,f (alpha <= 0.0) {
False,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,125,"hrow new IllegalArgumentException(""alpha must be positive"");"
False,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,127,his.alpha = alpha;
False,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,131," Access the shape parameter, alpha"
False,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,132, @return alpha.
False,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,134,ublic double getAlpha() {
False,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,135,eturn alpha;
False,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,139," Modify the scale parameter, beta."
False,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,140, @param beta the new scale parameter.
False,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,142,ublic void setBeta(double beta) {
False,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,143,f (beta <= 0.0) {
False,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,144,"hrow new IllegalArgumentException(""beta must be positive"");"
False,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,146,his.beta = beta;
False,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,150," Access the scale parameter, beta"
False,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,151, @return beta.
False,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,153,ublic double getBeta() {
False,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,154,eturn beta;
False,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,158," Access the domain value lower bound, based on <code>p</code>, used to"
False,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,159, bracket a CDF root.  This method is used by
False,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,160, {@link #inverseCummulativeProbability(double)} to find critical values.
False,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,162, @param p the desired probability for the critical value
False,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,163," @return domain value lower bound, i.e."
False,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,164,         P(X &lt; <i>lower bound</i>) &lt; <code>p</code>
False,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,165, TODO: try to improve on this estimate
False,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,167,rotected double getDomainLowerBound(double p) {
False,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,168,eturn Double.MIN_VALUE;
False,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,172," Access the domain value upper bound, based on <code>p</code>, used to"
False,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,173, bracket a CDF root.  This method is used by
False,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,174, {@link #inverseCummulativeProbability(double)} to find critical values.
False,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,176, @param p the desired probability for the critical value
False,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,177," @return domain value upper bound, i.e."
False,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,178,         P(X &lt; <i>upper bound</i>) &gt; <code>p</code>
False,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,179, TODO: try to improve on this estimate
False,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,181,rotected double getDomainUpperBound(double p) {
False,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,182,/ NOTE: gamma is skewed to the left
False,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,183,"/ NOTE: therefore, P(X < &mu;) > .5"
False,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,185,ouble ret;
False,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,187,f (p < .5) {
False,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,188,/ use mean
False,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,189,et = getAlpha() * getBeta();
False,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,190, else {
False,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,191,/ use max value
False,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,192,et = Double.MAX_VALUE;
False,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,195,eturn ret;
False,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,199," Access the initial domain value, based on <code>p</code>, used to"
False,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,200, bracket a CDF root.  This method is used by
False,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,201, {@link #inverseCummulativeProbability(double)} to find critical values.
False,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,203, @param p the desired probability for the critical value
False,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,204, @return initial domain value
False,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,205, TODO: try to improve on this estimate
False,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,207,rotected double getInitialDomain(double p) {
False,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,208,"/ Gamma is skewed to the left, therefore, P(X < &mu;) > .5"
False,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,210,ouble ret;
False,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,212,f (p < .5) {
False,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,213,/ use 1/2 mean
False,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,214,et = getAlpha() * getBeta() * .5;
False,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,215, else {
False,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,216,/ use mean
False,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,217,et = getAlpha() * getBeta();
False,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,220,eturn ret;
False,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,2," The Apache Software License, Version 1.1"
False,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
False,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,5, reserved.
False,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,7," Redistribution and use in source and binary forms, with or without"
False,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,8," modification, are permitted provided that the following conditions"
False,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,9, are met:
False,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,11, 1. Redistributions of source code must retain the above copyright
False,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,12,"    notice, this list of conditions and the following disclaimer."
False,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,14, 2. Redistributions in binary form must reproduce the above copyright
False,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,15,"    notice, this list of conditions and the following disclaimer in"
False,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,16,    the documentation and/or other materials provided with the
False,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,17,    distribution.
False,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,19," 3. The end-user documentation included with the redistribution, if"
False,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,20,"    any, must include the following acknowledgement:"
False,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,21,"       ""This product includes software developed by the"
False,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,22,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,23,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,24,    if and wherever such third-party acknowledgements normally appear.
False,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,26," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,27,"    Foundation"" must not be used to endorse or promote products derived"
False,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,28,    from this software without prior written permission. For written
False,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,29,"    permission, please contact apache@apache.org."
False,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,31," 5. Products derived from this software may not be called ""Apache"""
False,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,32,"    nor may ""Apache"" appear in their name without prior written"
False,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,33,    permission of the Apache Software Foundation.
False,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,38, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,39," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,46, SUCH DAMAGE.
False,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,49, This software consists of voluntary contributions made by many
False,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,50, individuals on behalf of the Apache Software Foundation.  For more
False,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,51," information on the Apache Software Foundation, please see"
False,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,52, <http://www.apache.org/>.
False,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,55,ackage org.apache.commons.math.stat.distribution;
False,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,58, The Hypergeometric Distribution.
False,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,60, Instances of HypergeometricDistribution objects should be created using
False,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,61," {@link DistributionFactory#createHypergeometricDistribution(int, int, int)}."
False,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,63, References:
False,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,64, <ul>
False,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,65," <li><a href=""http://mathworld.wolfram.com/HypergeometricDistribution.html"">"
False,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,66, Hypergeometric Distribution</a></li>
False,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,67, </ul>
False,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,69, @version $Revision: 1.3 $ $Date: 2003/10/16 15:24:29 $
False,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,71,ublic interface HypergeometricDistribution extends DiscreteDistribution {
False,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,73, Access the number of successes.
False,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,74, @return the number of successes.
False,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,76,ublic abstract int getNumberOfSuccesses();
False,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,79, Access the population size.
False,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,80, @return the population size.
False,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,82,ublic abstract int getPopulationSize();
False,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,85, Access the sample size.
False,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,86, @return the sample size.
False,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,88,ublic abstract int getSampleSize();
False,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,91, Modify the number of successes.
False,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,92, @param num the new number of successes.
False,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,94,ublic abstract void setNumberOfSuccesses(int num);
False,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,97, Modify the population size.
False,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,98, @param size the new population size.
False,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,100,ublic abstract void setPopulationSize(int size);
False,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,103, Modify the sample size.
False,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,104, @param size the new sample size.
False,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,106,ublic abstract void setSampleSize(int size);
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,2," The Apache Software License, Version 1.1"
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,5, reserved.
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,7," Redistribution and use in source and binary forms, with or without"
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,8," modification, are permitted provided that the following conditions"
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,9, are met:
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,11, 1. Redistributions of source code must retain the above copyright
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,12,"    notice, this list of conditions and the following disclaimer."
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,14, 2. Redistributions in binary form must reproduce the above copyright
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,15,"    notice, this list of conditions and the following disclaimer in"
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,16,    the documentation and/or other materials provided with the
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,17,    distribution.
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,19," 3. The end-user documentation included with the redistribution, if"
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,20,"    any, must include the following acknowledgement:"
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,21,"       ""This product includes software developed by the"
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,22,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,23,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,24,    if and wherever such third-party acknowledgements normally appear.
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,26," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,27,"    Foundation"" must not be used to endorse or promote products derived"
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,28,    from this software without prior written permission. For written
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,29,"    permission, please contact apache@apache.org."
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,31," 5. Products derived from this software may not be called ""Apache"""
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,32,"    nor may ""Apache"" appear in their name without prior written"
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,33,    permission of the Apache Software Foundation.
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,38, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,39," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,46, SUCH DAMAGE.
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,49, This software consists of voluntary contributions made by many
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,50, individuals on behalf of the Apache Software Foundation.  For more
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,51," information on the Apache Software Foundation, please see"
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,52, <http://www.apache.org/>.
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,55,ackage org.apache.commons.math.stat.distribution;
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,57,mport org.apache.commons.math.util.MathUtils;
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,60, The default implementation of {@link HypergeometricDistribution}.
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,62, @version $Revision: 1.3 $ $Date: 2003/10/16 15:24:29 $
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,64,ublic class HypergeometricDistributionImpl extends AbstractDiscreteDistribution
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,65,mplements HypergeometricDistribution
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,68,** The number of successes in the population. */
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,69,rivate int numberOfSuccesses;
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,71,** The population size. */
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,72,rivate int populationSize;
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,74,** The sample size. */
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,75,rivate int sampleSize;
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,78, Construct a new hypergeometric distribution with the given the population
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,79," size, the number of successes in the population, and the sample size."
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,80, @param populationSize the population size.
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,81, @param numberOfSuccesses number of successes in the population.
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,82, @param sampleSize the sample size.
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,84,"ublic HypergeometricDistributionImpl(int populationSize,"
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,85,"nt numberOfSuccesses, int sampleSize)"
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,87,uper();
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,88,etPopulationSize(populationSize);
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,89,etSampleSize(sampleSize);
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,90,etNumberOfSuccesses(numberOfSuccesses);
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,94," For this disbution, X, this method returns P(X &le; x)."
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,95, @param x the value at which the PDF is evaluated.
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,96, @return PDF for this distribution.
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,98,ublic double cummulativeProbability(int x) {
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,99,ouble ret;
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,101,nt n = getPopulationSize();
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,102,nt m = getNumberOfSuccesses();
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,103,nt k = getSampleSize();
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,105,"nt[] domain = getDomain(n, m, k);"
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,106,f (x < domain[0]) {
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,107,et = 0.0;
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,108, else if(x >= domain[1]) {
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,109,et = 1.0;
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,110, else {
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,111,et = 0.0;
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,112,or (int i = domain[0]; i <= x; ++i){
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,113,"et += probability(n, m, k, i);"
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,117,eturn ret;
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,121, Return the domain for the given hypergeometric distribution parameters.
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,122, @param n the population size.
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,123, @param m number of successes in the population.
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,124, @param k the sample size.
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,125, @return a two element array containing the lower and upper bounds of the
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,126,         hypergeometric distribution.
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,128,"rivate int[] getDomain(int n, int m, int k){"
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,129,eturn new int[]{
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,130,"etLowerDomain(n, m, k),"
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,131,"etUpperDomain(m, k)"
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,136," Access the domain value lower bound, based on <code>p</code>, used to"
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,137, bracket a PDF root.
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,139, @param p the desired probability for the critical value
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,140," @return domain value lower bound, i.e."
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,141,         P(X &lt; <i>lower bound</i>) &lt; <code>p</code>
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,143,rotected int getDomainLowerBound(double p) {
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,144,"eturn getLowerDomain(getPopulationSize(), getNumberOfSuccesses(),"
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,145,etSampleSize());
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,149," Access the domain value upper bound, based on <code>p</code>, used to"
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,150, bracket a PDF root.
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,152, @param p the desired probability for the critical value
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,153," @return domain value upper bound, i.e."
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,154,         P(X &lt; <i>upper bound</i>) &gt; <code>p</code>
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,156,rotected int getDomainUpperBound(double p) {
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,157,"eturn getUpperDomain(getSampleSize(), getNumberOfSuccesses());"
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,161, Return the lowest domain value for the given hypergeometric distribution
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,162, parameters.
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,163, @param n the population size.
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,164, @param m number of successes in the population.
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,165, @param k the sample size.
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,166, @return the lowest domain value of the hypergeometric distribution.
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,168,"rivate int getLowerDomain(int n, int m, int k) {"
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,169,"eturn Math.max(0, m - (n - k));"
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,173, Access the number of successes.
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,174, @return the number of successes.
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,176,ublic int getNumberOfSuccesses() {
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,177,eturn numberOfSuccesses;
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,181, Access the population size.
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,182, @return the population size.
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,184,ublic int getPopulationSize() {
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,185,eturn populationSize;
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,189, Access the sample size.
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,190, @return the sample size.
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,192,ublic int getSampleSize() {
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,193,eturn sampleSize;
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,197, Return the highest domain value for the given hypergeometric distribution
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,198, parameters.
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,199, @param m number of successes in the population.
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,200, @param k the sample size.
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,201, @return the highest domain value of the hypergeometric distribution.
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,203,"rivate int getUpperDomain(int m, int k){"
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,204,"eturn Math.min(k, m);"
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,208," For this disbution, X, this method returns P(X = x)."
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,209, @param x the value at which the PMF is evaluated.
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,210, @return PMF for this distribution.
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,212,ublic double probability(int x) {
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,213,ouble ret;
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,215,nt n = getPopulationSize();
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,216,nt m = getNumberOfSuccesses();
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,217,nt k = getSampleSize();
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,219,"nt[] domain = getDomain(n, m, k);"
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,220,f(x < domain[0] || x > domain[1]){
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,221,et = 0.0;
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,222, else {
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,223,"et = probability(n, m, k, x);"
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,226,eturn ret;
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,230," For the disbution, X, defined by the given hypergeometric distribution"
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,231," parameters, this method returns P(X = x)."
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,232, @param n the population size.
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,233, @param m number of successes in the population.
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,234, @param k the sample size.
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,235, @param x the value at which the PMF is evaluated.
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,236, @return PMF for the distribution.
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,238,"rivate double probability(int n, int m, int k, int x) {"
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,239,"eturn Math.exp(MathUtils.binomialCoefficientLog(m, x) +"
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,240,"athUtils.binomialCoefficientLog(n - m, k - x) -"
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,241,"athUtils.binomialCoefficientLog(n, k));"
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,245, Modify the number of successes.
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,246, @param num the new number of successes.
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,248,ublic void setNumberOfSuccesses(int num) {
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,249,f(num < 0){
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,250,hrow new IllegalArgumentException(
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,251,"number of successes must be non-negative."");"
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,253,umberOfSuccesses = num;
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,257, Modify the population size.
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,258, @param size the new population size.
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,260,ublic void setPopulationSize(int size) {
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,261,f(size <= 0){
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,262,hrow new IllegalArgumentException(
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,263,"population size must be positive."");"
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,265,opulationSize = size;
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,269, Modify the sample size.
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,270, @param size the new sample size.
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,272,ublic void setSampleSize(int size) {
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,273,f(size < 0){
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,274,hrow new IllegalArgumentException(
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,275,"sample size must be non-negative."");"
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,277,ampleSize = size;
False,src/java/org/apache/commons/math/distribution/TDistribution.java,src/java/org/apache/commons/math/distribution/TDistribution.java,2," The Apache Software License, Version 1.1"
False,src/java/org/apache/commons/math/distribution/TDistribution.java,src/java/org/apache/commons/math/distribution/TDistribution.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
False,src/java/org/apache/commons/math/distribution/TDistribution.java,src/java/org/apache/commons/math/distribution/TDistribution.java,5, reserved.
False,src/java/org/apache/commons/math/distribution/TDistribution.java,src/java/org/apache/commons/math/distribution/TDistribution.java,7," Redistribution and use in source and binary forms, with or without"
False,src/java/org/apache/commons/math/distribution/TDistribution.java,src/java/org/apache/commons/math/distribution/TDistribution.java,8," modification, are permitted provided that the following conditions"
False,src/java/org/apache/commons/math/distribution/TDistribution.java,src/java/org/apache/commons/math/distribution/TDistribution.java,9, are met:
False,src/java/org/apache/commons/math/distribution/TDistribution.java,src/java/org/apache/commons/math/distribution/TDistribution.java,11, 1. Redistributions of source code must retain the above copyright
False,src/java/org/apache/commons/math/distribution/TDistribution.java,src/java/org/apache/commons/math/distribution/TDistribution.java,12,"    notice, this list of conditions and the following disclaimer."
False,src/java/org/apache/commons/math/distribution/TDistribution.java,src/java/org/apache/commons/math/distribution/TDistribution.java,14, 2. Redistributions in binary form must reproduce the above copyright
False,src/java/org/apache/commons/math/distribution/TDistribution.java,src/java/org/apache/commons/math/distribution/TDistribution.java,15,"    notice, this list of conditions and the following disclaimer in"
False,src/java/org/apache/commons/math/distribution/TDistribution.java,src/java/org/apache/commons/math/distribution/TDistribution.java,16,    the documentation and/or other materials provided with the
False,src/java/org/apache/commons/math/distribution/TDistribution.java,src/java/org/apache/commons/math/distribution/TDistribution.java,17,    distribution.
False,src/java/org/apache/commons/math/distribution/TDistribution.java,src/java/org/apache/commons/math/distribution/TDistribution.java,19," 3. The end-user documentation included with the redistribution, if"
False,src/java/org/apache/commons/math/distribution/TDistribution.java,src/java/org/apache/commons/math/distribution/TDistribution.java,20,"    any, must include the following acknowledgement:"
False,src/java/org/apache/commons/math/distribution/TDistribution.java,src/java/org/apache/commons/math/distribution/TDistribution.java,21,"       ""This product includes software developed by the"
False,src/java/org/apache/commons/math/distribution/TDistribution.java,src/java/org/apache/commons/math/distribution/TDistribution.java,22,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/java/org/apache/commons/math/distribution/TDistribution.java,src/java/org/apache/commons/math/distribution/TDistribution.java,23,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/java/org/apache/commons/math/distribution/TDistribution.java,src/java/org/apache/commons/math/distribution/TDistribution.java,24,    if and wherever such third-party acknowledgements normally appear.
False,src/java/org/apache/commons/math/distribution/TDistribution.java,src/java/org/apache/commons/math/distribution/TDistribution.java,26," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/java/org/apache/commons/math/distribution/TDistribution.java,src/java/org/apache/commons/math/distribution/TDistribution.java,27,"    Foundation"" must not be used to endorse or promote products derived"
False,src/java/org/apache/commons/math/distribution/TDistribution.java,src/java/org/apache/commons/math/distribution/TDistribution.java,28,    from this software without prior written permission. For written
False,src/java/org/apache/commons/math/distribution/TDistribution.java,src/java/org/apache/commons/math/distribution/TDistribution.java,29,"    permission, please contact apache@apache.org."
False,src/java/org/apache/commons/math/distribution/TDistribution.java,src/java/org/apache/commons/math/distribution/TDistribution.java,31," 5. Products derived from this software may not be called ""Apache"""
False,src/java/org/apache/commons/math/distribution/TDistribution.java,src/java/org/apache/commons/math/distribution/TDistribution.java,32,"    nor may ""Apache"" appear in their name without prior written"
False,src/java/org/apache/commons/math/distribution/TDistribution.java,src/java/org/apache/commons/math/distribution/TDistribution.java,33,    permission of the Apache Software Foundation.
False,src/java/org/apache/commons/math/distribution/TDistribution.java,src/java/org/apache/commons/math/distribution/TDistribution.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/java/org/apache/commons/math/distribution/TDistribution.java,src/java/org/apache/commons/math/distribution/TDistribution.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/java/org/apache/commons/math/distribution/TDistribution.java,src/java/org/apache/commons/math/distribution/TDistribution.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/java/org/apache/commons/math/distribution/TDistribution.java,src/java/org/apache/commons/math/distribution/TDistribution.java,38, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/java/org/apache/commons/math/distribution/TDistribution.java,src/java/org/apache/commons/math/distribution/TDistribution.java,39," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/java/org/apache/commons/math/distribution/TDistribution.java,src/java/org/apache/commons/math/distribution/TDistribution.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/java/org/apache/commons/math/distribution/TDistribution.java,src/java/org/apache/commons/math/distribution/TDistribution.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/java/org/apache/commons/math/distribution/TDistribution.java,src/java/org/apache/commons/math/distribution/TDistribution.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/java/org/apache/commons/math/distribution/TDistribution.java,src/java/org/apache/commons/math/distribution/TDistribution.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/java/org/apache/commons/math/distribution/TDistribution.java,src/java/org/apache/commons/math/distribution/TDistribution.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/java/org/apache/commons/math/distribution/TDistribution.java,src/java/org/apache/commons/math/distribution/TDistribution.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/java/org/apache/commons/math/distribution/TDistribution.java,src/java/org/apache/commons/math/distribution/TDistribution.java,46, SUCH DAMAGE.
False,src/java/org/apache/commons/math/distribution/TDistribution.java,src/java/org/apache/commons/math/distribution/TDistribution.java,49, This software consists of voluntary contributions made by many
False,src/java/org/apache/commons/math/distribution/TDistribution.java,src/java/org/apache/commons/math/distribution/TDistribution.java,50, individuals on behalf of the Apache Software Foundation.  For more
False,src/java/org/apache/commons/math/distribution/TDistribution.java,src/java/org/apache/commons/math/distribution/TDistribution.java,51," information on the Apache Software Foundation, please see"
False,src/java/org/apache/commons/math/distribution/TDistribution.java,src/java/org/apache/commons/math/distribution/TDistribution.java,52, <http://www.apache.org/>.
False,src/java/org/apache/commons/math/distribution/TDistribution.java,src/java/org/apache/commons/math/distribution/TDistribution.java,54,ackage org.apache.commons.math.stat.distribution;
False,src/java/org/apache/commons/math/distribution/TDistribution.java,src/java/org/apache/commons/math/distribution/TDistribution.java,57, Student's t-Distribution.
False,src/java/org/apache/commons/math/distribution/TDistribution.java,src/java/org/apache/commons/math/distribution/TDistribution.java,59, Instances of TDistribution objects should be created using
False,src/java/org/apache/commons/math/distribution/TDistribution.java,src/java/org/apache/commons/math/distribution/TDistribution.java,60, {@link DistributionFactory#createTDistribution(double)}
False,src/java/org/apache/commons/math/distribution/TDistribution.java,src/java/org/apache/commons/math/distribution/TDistribution.java,62, References:
False,src/java/org/apache/commons/math/distribution/TDistribution.java,src/java/org/apache/commons/math/distribution/TDistribution.java,63, <ul>
False,src/java/org/apache/commons/math/distribution/TDistribution.java,src/java/org/apache/commons/math/distribution/TDistribution.java,64," <li><a href=""http://mathworld.wolfram.com/Studentst-Distribution.html"">"
False,src/java/org/apache/commons/math/distribution/TDistribution.java,src/java/org/apache/commons/math/distribution/TDistribution.java,65, Student's t-Distribution</a></li>
False,src/java/org/apache/commons/math/distribution/TDistribution.java,src/java/org/apache/commons/math/distribution/TDistribution.java,66, </ul>
False,src/java/org/apache/commons/math/distribution/TDistribution.java,src/java/org/apache/commons/math/distribution/TDistribution.java,68, @version $Revision: 1.5 $ $Date: 2003/10/16 15:24:29 $
False,src/java/org/apache/commons/math/distribution/TDistribution.java,src/java/org/apache/commons/math/distribution/TDistribution.java,70,ublic interface TDistribution extends ContinuousDistribution {
False,src/java/org/apache/commons/math/distribution/TDistribution.java,src/java/org/apache/commons/math/distribution/TDistribution.java,72, Modify the degrees of freedom.
False,src/java/org/apache/commons/math/distribution/TDistribution.java,src/java/org/apache/commons/math/distribution/TDistribution.java,73, @param degreesOfFreedom the new degrees of freedom.
False,src/java/org/apache/commons/math/distribution/TDistribution.java,src/java/org/apache/commons/math/distribution/TDistribution.java,75,oid setDegreesOfFreedom(double degreesOfFreedom);
False,src/java/org/apache/commons/math/distribution/TDistribution.java,src/java/org/apache/commons/math/distribution/TDistribution.java,78, Access the degrees of freedom.
False,src/java/org/apache/commons/math/distribution/TDistribution.java,src/java/org/apache/commons/math/distribution/TDistribution.java,79, @return the degrees of freedom.
False,src/java/org/apache/commons/math/distribution/TDistribution.java,src/java/org/apache/commons/math/distribution/TDistribution.java,81,ouble getDegreesOfFreedom();
False,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,2," The Apache Software License, Version 1.1"
False,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
False,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,5, reserved.
False,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,7," Redistribution and use in source and binary forms, with or without"
False,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,8," modification, are permitted provided that the following conditions"
False,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,9, are met:
False,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,11, 1. Redistributions of source code must retain the above copyright
False,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,12,"    notice, this list of conditions and the following disclaimer."
False,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,14, 2. Redistributions in binary form must reproduce the above copyright
False,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,15,"    notice, this list of conditions and the following disclaimer in"
False,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,16,    the documentation and/or other materials provided with the
False,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,17,    distribution.
False,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,19," 3. The end-user documentation included with the redistribution, if"
False,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,20,"    any, must include the following acknowledgement:"
False,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,21,"       ""This product includes software developed by the"
False,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,22,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,23,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,24,    if and wherever such third-party acknowledgements normally appear.
False,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,26," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,27,"    Foundation"" must not be used to endorse or promote products derived"
False,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,28,    from this software without prior written permission. For written
False,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,29,"    permission, please contact apache@apache.org."
False,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,31," 5. Products derived from this software may not be called ""Apache"""
False,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,32,"    nor may ""Apache"" appear in their name without prior written"
False,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,33,    permission of the Apache Software Foundation.
False,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,38, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,39," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,46, SUCH DAMAGE.
False,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,49, This software consists of voluntary contributions made by many
False,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,50, individuals on behalf of the Apache Software Foundation.  For more
False,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,51," information on the Apache Software Foundation, please see"
False,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,52, <http://www.apache.org/>.
False,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,54,ackage org.apache.commons.math.stat.distribution;
False,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,56,mport org.apache.commons.logging.LogFactory;
False,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,57,mport org.apache.commons.math.MathException;
False,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,58,mport org.apache.commons.math.special.Beta;
False,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,61, Default implementation of
False,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,62, {@link org.apache.commons.math.stat.distribution.TDistribution}.
False,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,64, @version $Revision: 1.6 $ $Date: 2003/10/16 15:24:29 $
False,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,66,ublic class TDistributionImpl
False,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,67,xtends AbstractContinuousDistribution
False,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,68,mplements TDistribution {
False,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,70,** The degrees of freedom*/
False,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,71,rivate double degreesOfFreedom;
False,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,74, Create a t distribution using the given degrees of freedom.
False,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,75, @param degreesOfFreedom the degrees of freedom.
False,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,77,ublic TDistributionImpl(double degreesOfFreedom) {
False,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,78,uper();
False,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,79,etDegreesOfFreedom(degreesOfFreedom);
False,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,83, Modify the degrees of freedom.
False,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,84, @param degreesOfFreedom the new degrees of freedom.
False,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,86,ublic void setDegreesOfFreedom(double degreesOfFreedom) {
False,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,87,f (degreesOfFreedom <= 0.0) {
False,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,88,hrow new IllegalArgumentException(
False,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,89,"degrees of freedom must be positive."");"
False,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,91,his.degreesOfFreedom = degreesOfFreedom;
False,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,95, Access the degrees of freedom.
False,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,96, @return the degrees of freedom.
False,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,98,ublic double getDegreesOfFreedom() {
False,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,99,eturn degreesOfFreedom;
False,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,103," For this disbution, X, this method returns P(X &lt; <code>x</code>)."
False,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,104, @param x the value at which the CDF is evaluated.
False,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,105, @return CDF evaluted at <code>x</code>.
False,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,107,ublic double cummulativeProbability(double x) {
False,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,108,ouble ret;
False,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,109,f (x == 0.0) {
False,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,110,et = 0.5;
False,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,111, else {
False,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,112,ouble t;
False,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,113,ry {
False,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,114, = Beta.regularizedBeta(
False,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,115,"etDegreesOfFreedom() / (getDegreesOfFreedom() + (x * x)),"
False,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,116,".5 * getDegreesOfFreedom(),"
False,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,117,.5);
False,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,118,f (x < 0.0) {
False,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,119,et = 0.5 * t;
False,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,120, else {
False,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,121,et = 1.0 - 0.5 * t;
False,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,123, catch (MathException ex) {
False,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,124,ogFactory.getLog(getClass()).error(
False,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,125,"Failed to compute cummulative probability, returning NaN."","
False,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,126,x);
False,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,127,et = Double.NaN;
False,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,131,eturn ret;
False,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,135," Access the domain value lower bound, based on <code>p</code>, used to"
False,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,136, bracket a CDF root.  This method is used by
False,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,137, {@link #inverseCummulativeProbability(double)} to find critical values.
False,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,139, @param p the desired probability for the critical value
False,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,140," @return domain value lower bound, i.e."
False,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,141,         P(X &lt; <i>lower bound</i>) &lt; <code>p</code>
False,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,143,rotected double getDomainLowerBound(double p) {
False,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,144,eturn -Double.MAX_VALUE;
False,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,148," Access the domain value upper bound, based on <code>p</code>, used to"
False,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,149, bracket a CDF root.  This method is used by
False,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,150, {@link #inverseCummulativeProbability(double)} to find critical values.
False,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,152, @param p the desired probability for the critical value
False,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,153," @return domain value upper bound, i.e."
False,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,154,         P(X &lt; <i>upper bound</i>) &gt; <code>p</code>
False,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,156,rotected double getDomainUpperBound(double p) {
False,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,157,eturn Double.MAX_VALUE;
False,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,161," Access the initial domain value, based on <code>p</code>, used to"
False,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,162, bracket a CDF root.  This method is used by
False,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,163, {@link #inverseCummulativeProbability(double)} to find critical values.
False,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,165, @param p the desired probability for the critical value
False,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,166, @return initial domain value
False,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,168,rotected double getInitialDomain(double p) {
False,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,169,eturn 0.0;
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,2," The Apache Software License, Version 1.1"
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,5, reserved.
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,7," Redistribution and use in source and binary forms, with or without"
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,8," modification, are permitted provided that the following conditions"
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,9, are met:
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,11, 1. Redistributions of source code must retain the above copyright
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,12,"    notice, this list of conditions and the following disclaimer."
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,14, 2. Redistributions in binary form must reproduce the above copyright
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,15,"    notice, this list of conditions and the following disclaimer in"
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,16,    the documentation and/or other materials provided with the
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,17,    distribution.
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,19," 3. The end-user documentation included with the redistribution, if"
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,20,"    any, must include the following acknowledgement:"
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,21,"       ""This product includes software developed by the"
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,22,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,23,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,24,    if and wherever such third-party acknowledgements normally appear.
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,26," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,27,"    Foundation"" must not be used to endorse or promote products derived"
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,28,    from this software without prior written permission. For written
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,29,"    permission, please contact apache@apache.org."
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,31," 5. Products derived from this software may not be called ""Apache"""
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,32,"    nor may ""Apache"" appear in their name without prior written"
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,33,    permission of the Apache Software Foundation.
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,38, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,39," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,46, SUCH DAMAGE.
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,49, This software consists of voluntary contributions made by many
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,50, individuals on behalf of the Apache Software Foundation.  For more
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,51," information on the Apache Software Foundation, please see"
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,52, <http://www.apache.org/>.
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,55,ackage org.apache.commons.math.linear;
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,58, Interface defining a real-valued matrix with basic algebraic operations
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,59, @version $Revision: 1.5 $ $Date: 2003/10/16 15:24:33 $
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,61,ublic interface RealMatrix {
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,64, Returns a (deep) copy of this.
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,66, @return matrix copy
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,68,ealMatrix copy();
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,71, Compute the sum of this and m.
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,73, @param m    matrix to be added
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,74, @return     this + m
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,75, @exception  IllegalArgumentException if m is not the same size as this
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,77,ealMatrix add(RealMatrix m) throws IllegalArgumentException;
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,80, Compute this minus m.
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,82, @param m    matrix to be subtracted
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,83, @return     this + m
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,84, @exception  IllegalArgumentException if m is not the same size as this
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,86,ealMatrix subtract(RealMatrix m) throws IllegalArgumentException;
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,89, Returns the rank of the matrix.
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,91, @return the rank of this matrix
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,93,nt getRank();
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,96, Returns the result of adding d to each entry of this.
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,98, @param d    value to be added to each entry
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,99, @return     d + this
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,101,ealMatrix scalarAdd(double d);
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,104, Returns the result multiplying each entry of this by d.
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,106, @param d    value to multiply all entries by
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,107, @return     d * this
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,109,ealMatrix scalarMultiply(double d);
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,112, Returns the result postmultiplying this by m.
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,114, @param m    matrix to postmultiply by
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,115, @return     this * m
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,116, @throws     IllegalArgumentException
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,117,             if columnDimension(this) != rowDimension(m)
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,119,ealMatrix multiply(RealMatrix m) throws IllegalArgumentException;
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,122, Returns matrix entries as a two-dimensional array.
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,124, @return    2-dimensional array of entries
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,126,ouble[][] getData();
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,129, Overwrites the underlying data for the matrix with
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,130, a fresh copy of <code>data</code>.
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,132, @param  data  2-dimensional array of entries
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,134,oid setData(double[][] data);
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,137," Returns the <a href=""http://mathworld.wolfram.com/"
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,138," MaximumAbsoluteRowSumNorm.html"">maximum absolute row sum norm</a>"
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,139, of the matrix.
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,141, @return norm
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,143,ouble getNorm();
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,146, Returns the entries in row number <code>row</code> as an array.
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,148, @param row the row to be fetched
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,149, @return array of entries in the row
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,150, @throws IllegalArgumentException if row > rowDimension
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,152,ouble[] getRow(int row) throws IllegalArgumentException;
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,155, Returns the entries in column number <code>col</code> as an array.
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,157, @param col  column to fetch
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,158, @return array of entries in the column
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,159, @throws IllegalArgumentException if column > columnDimension
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,161,ouble[] getColumn(int col) throws IllegalArgumentException;
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,164, Returns the entry in the specified row and column.
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,166, @param row  row location of entry to be fetched
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,167, @param column  column location of entry to be fetched
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,168," @return     matrix entry in row,column"
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,169, @throws     IllegalArgumentException if entry does not exist
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,171,"ouble getEntry(int row, int column) throws IllegalArgumentException;"
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,174, Sets the entry in the specified row and column to the specified value.
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,176, @param row    row location of entry to be set
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,177, @param column    column location of entry to be set
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,178, @param value  value to set
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,179, @throws IllegalArgumentException if entry does not exist
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,181,"oid setEntry(int row, int column, double value)"
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,182,hrows IllegalArgumentException;
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,185, Returns the transpose of this matrix.
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,187, @return transpose matrix
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,189,ealMatrix transpose();
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,192, Returns the inverse of this matrix.
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,194, @return inverse matrix
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,195, @throws IllegalArgumentException if *this is not invertible
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,197,ealMatrix inverse() throws IllegalArgumentException;
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,200, Returns the determinant of this matrix.
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,202, @return determinant
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,204,ouble getDeterminant();
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,207, Is this a square matrix?
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,208, @return true if the matrix is square (rowDimension = columnDimension)
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,210,oolean isSquare();
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,213, Is this a singular matrix?
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,214, @return true if the matrix is singular
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,216,oolean isSingular();
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,219, Returns the number of rows in the matrix.
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,221, @return rowDimension
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,223,nt getRowDimension();
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,226, Returns the number of columns in the matrix.
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,228, @return columnDimension
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,230,nt getColumnDimension();
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,233," Returns the <a href=""http://mathworld.wolfram.com/MatrixTrace.html"">"
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,234, trace</a> of the matrix (the sum of the elements on the main diagonal).
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,236, @return trace
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,238,ouble getTrace();
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,241, Returns the result of multiplying this by the vector <code>v</code>.
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,243, @param v the vector to operate on
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,244, @return this*v
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,245, @throws IllegalArgumentException if columnDimension != v.size()
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,247,ouble[] operate(double[] v) throws IllegalArgumentException;
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,250, Returns the result of premultiplying this by the vector <code>v</code>.
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,252, @param v the row vector to premultiply by
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,253, @return v*this
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,254, @throws IllegalArgumentException if rowDimension != v.size()
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,256,ealMatrix preMultiply(double[] v) throws IllegalArgumentException;
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,259, Returns the solution vector for a linear system with coefficient
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,260, matrix = this and constant vector = <code>b</code>.
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,262, @param b  constant vector
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,263," @return   vector of solution values to AX = b, where A is *this"
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,264, @throws   IllegalArgumentException if rowDimension != b.length or matrix
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,265,           is singular
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,267,ouble[] solve(double[] b) throws IllegalArgumentException;
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,270, Returns a matrix of (column) solution vectors for linear systems with
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,271, coefficient matrix = this and constant vectors = columns of
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,272, <code>b</code>.
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,274, @param b  matrix of constant vectors forming RHS of linear systems to
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,275, to solve
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,276, @return matrix of solution vectors
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,277, @throws IllegalArgumentException if rowDimension != row dimension of b
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,278, or this is not square or singular
False,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,280,ealMatrix solve(RealMatrix b) throws IllegalArgumentException;
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,2," The Apache Software License, Version 1.1"
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,5, reserved.
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,7," Redistribution and use in source and binary forms, with or without"
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,8," modification, are permitted provided that the following conditions"
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,9, are met:
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,11, 1. Redistributions of source code must retain the above copyright
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,12,"    notice, this list of conditions and the following disclaimer."
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,14, 2. Redistributions in binary form must reproduce the above copyright
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,15,"    notice, this list of conditions and the following disclaimer in"
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,16,    the documentation and/or other materials provided with the
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,17,    distribution.
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,19," 3. The end-user documentation included with the redistribution, if"
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,20,"    any, must include the following acknowledgement:"
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,21,"       ""This product includes software developed by the"
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,22,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,23,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,24,    if and wherever such third-party acknowledgements normally appear.
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,26," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,27,"    Foundation"" must not be used to endorse or promote products derived"
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,28,    from this software without prior written permission. For written
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,29,"    permission, please contact apache@apache.org."
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,31," 5. Products derived from this software may not be called ""Apache"""
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,32,"    nor may ""Apache"" appear in their name without prior written"
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,33,    permission of the Apache Software Foundation.
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,38, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,39," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,46, SUCH DAMAGE.
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,49, This software consists of voluntary contributions made by many
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,50, individuals on behalf of the Apache Software Foundation.  For more
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,51," information on the Apache Software Foundation, please see"
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,52, <http://www.apache.org/>.
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,55,ackage org.apache.commons.math.linear;
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,56,mport java.io.Serializable;
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,59, Implementation for RealMatrix using a double[][] array to store entries
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,60," and <a href=""http://www.math.gatech.edu/~bourbaki/"
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,61," math2601/Web-notes/2num.pdf"">LU decompostion</a> to support linear system"
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,62, solution and inverse.
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,63, <p>
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,64," The <a href=""http://www.math.gatech.edu/~bourbaki/math2601/Web-notes"
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,65," /2num.pdf"">LU decompostion</a> is performed as needed, to support the"
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,66, following operations: <ul>
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,67, <li>solve</li>
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,68, <li>isSingular</li>
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,69, <li>getDeterminant</li>
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,70, <li>inverse</li> </ul>
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,71, <p>
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,72, <strong>Usage note</strong>:<br>
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,73, The LU decomposition is stored and reused on subsequent calls.  If matrix
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,74," data are modified using any of the public setXxx methods, the saved"
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,75, decomposition is discarded.  If data are modified via references to the
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,76," underlying array obtained using <code>getDataRef()</code>, then the stored"
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,77," LU decomposition will not be discarded.  In this case, you need to"
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,78, explicitly invoke <code>LUDecompose()</code> to recompute the decomposition
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,79, before using any of the methods above.
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,81, @version $Revision: 1.6 $ $Date: 2003/10/16 15:24:33 $
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,83,"ublic class RealMatrixImpl implements RealMatrix, Serializable {"
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,85,** Entries of the matrix */
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,86,rivate double data[][] = null;
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,88,** Entries of LU decomposition.
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,89, All updates to data (other than luDecompostion) *must* set this to null
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,91,rivate double lu[][] = null;
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,93,** Pivot array associated with LU decompostion */
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,94,rivate int[] pivot = null;
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,96,** Parity of the permutation associated with the LU decomposition */
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,97,rivate int parity = 1;
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,99,** Bound to determine effective singularity in LU decomposition */
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,100,rivate static double TOO_SMALL = 10E-12;
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,103, Creates a matrix with no data
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,105,ublic RealMatrixImpl() {
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,109, Create a new RealMatrix with the supplied row and column dimensions.
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,111, @param rowDimension      the number of rows in the new matrix
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,112, @param columnDimension   the number of columns in the new matrix
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,114,"ublic RealMatrixImpl(int rowDimension,"
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,115,nt columnDimension) {
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,116,ata = new double[rowDimension][columnDimension];
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,117,u = null;
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,121, Create a new RealMatrix using the <code>data</code> as the underlying
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,122, data array.
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,123, <p>
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,124," The input array is copied, not referenced."
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,126, @param d data for new matrix
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,128,ublic RealMatrixImpl(double[][] d) {
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,129,his.copyIn(d);
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,130,u = null;
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,134, Create a new (column) RealMatrix using <code>v</code> as the
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,135, data for the unique column of the <code>v.length x 1</code> matrix
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,136, created.
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,137, <p>
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,138," The input array is copied, not referenced."
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,140, @param v column vector holding data for new matrix
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,142,ublic RealMatrixImpl(double[] v) {
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,143,nt nRows = v.length;
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,144,ata = new double[nRows][1];
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,145,or (int row = 0; row < nRows; row++) {
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,146,ata[row][0] = v[row];
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,151, Create a new RealMatrix which is a copy of this.
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,153, @return  the cloned matrix
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,155,ublic RealMatrix copy() {
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,156,eturn new RealMatrixImpl(this.copyOut());
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,160, Compute the sum of this and <code>m</code>.
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,162, @param m    matrix to be added
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,163, @return     this + m
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,164, @exception  IllegalArgumentException if m is not the same size as this
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,166,ublic RealMatrix add(RealMatrix m) throws IllegalArgumentException {
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,167,f (this.getColumnDimension() != m.getColumnDimension() ||
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,168,his.getRowDimension() != m.getRowDimension()) {
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,169,"hrow new IllegalArgumentException(""matrix dimension mismatch"");"
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,171,nt rowCount = this.getRowDimension();
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,172,nt columnCount = this.getColumnDimension();
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,173,ouble[][] outData = new double[rowCount][columnCount];
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,174,ouble[][] mData = m.getData();
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,175,or (int row = 0; row < rowCount; row++) {
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,176,or (int col = 0; col < columnCount; col++) {
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,177,utData[row][col] = data[row][col] + mData[row][col];
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,180,eturn new RealMatrixImpl(outData);
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,184, Compute  this minus <code>m</code>.
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,186, @param m    matrix to be subtracted
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,187, @return     this + m
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,188, @exception  IllegalArgumentException if m is not the same size as *this
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,190,ublic RealMatrix subtract(RealMatrix m) throws IllegalArgumentException {
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,191,f (this.getColumnDimension() != m.getColumnDimension() ||
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,192,his.getRowDimension() != m.getRowDimension()) {
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,193,"hrow new IllegalArgumentException(""matrix dimension mismatch"");"
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,195,nt rowCount = this.getRowDimension();
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,196,nt columnCount = this.getColumnDimension();
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,197,ouble[][] outData = new double[rowCount][columnCount];
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,198,ouble[][] mData = m.getData();
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,199,or (int row = 0; row < rowCount; row++) {
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,200,or (int col = 0; col < columnCount; col++) {
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,201,utData[row][col] = data[row][col] - mData[row][col];
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,204,eturn new RealMatrixImpl(outData);
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,208, Returns the rank of the matrix.
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,210, @return the rank of this matrix
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,212,ublic int getRank() {
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,213,/ FIXME: need to add singular value decomposition or drop this
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,214,"hrow new UnsupportedOperationException(""not implemented yet"");"
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,219, Returns the result of adding d to each entry of this.
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,221, @param d    value to be added to each entry
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,222, @return     d + this
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,224,ublic RealMatrix scalarAdd(double d) {
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,225,nt rowCount = this.getRowDimension();
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,226,nt columnCount = this.getColumnDimension();
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,227,ouble[][] outData = new double[rowCount][columnCount];
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,228,or (int row = 0; row < rowCount; row++) {
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,229,or (int col = 0; col < columnCount; col++) {
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,230,utData[row][col] = data[row][col] + d;
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,233,eturn new RealMatrixImpl(outData);
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,237, Returns the result multiplying each entry of this by <code>d</code>
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,238, @param d  value to multiply all entries by
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,239, @return d * this
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,241,ublic RealMatrix scalarMultiply(double d) {
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,242,nt rowCount = this.getRowDimension();
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,243,nt columnCount = this.getColumnDimension();
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,244,ouble[][] outData = new double[rowCount][columnCount];
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,245,or (int row = 0; row < rowCount; row++) {
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,246,or (int col = 0; col < columnCount; col++) {
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,247,utData[row][col] = data[row][col] * d;
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,250,eturn new RealMatrixImpl(outData);
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,254, Returns the result postmultiplying this by <code>m</code>.
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,255, @param m    matrix to postmultiply by
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,256, @return     this*m
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,257, @throws     IllegalArgumentException
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,258,             if columnDimension(this) != rowDimension(m)
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,260,ublic RealMatrix multiply(RealMatrix m) throws IllegalArgumentException {
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,261,f (this.getColumnDimension() != m.getRowDimension()) {
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,262,hrow new IllegalArgumentException
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,263,"""Matrices are not multiplication compatible."");"
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,265,nt nRows = this.getRowDimension();
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,266,nt nCols = this.getColumnDimension();
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,267,ouble[][] mData = m.getData();
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,268,ouble[][] outData =
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,269,ew double[nRows][nCols];
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,270,ouble sum = 0;
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,271,or (int row = 0; row < nRows; row++) {
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,272,or (int col = 0; col < nCols; col++) {
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,273,um = 0;
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,274,or (int i = 0; i < nCols; i++) {
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,275,um += data[row][i] * mData[i][col];
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,277,utData[row][col] = sum;
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,280,eturn new RealMatrixImpl(outData);
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,284, Returns matrix entries as a two-dimensional array.
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,285, <p>
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,286, Makes a fresh copy of the underlying data.
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,288, @return    2-dimensional array of entries
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,290,ublic double[][] getData() {
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,291,eturn copyOut();
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,295, Overwrites the underlying data for the matrix
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,296, with a fresh copy of <code>inData</code>.
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,298, @param  inData 2-dimensional array of entries
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,300,ublic void setData(double[][] inData) {
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,301,opyIn(inData);
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,302,u = null;
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,306, Returns a reference to the underlying data array.
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,307, <p>
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,308, Does not make a fresh copy of the underlying data.
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,310, @return 2-dimensional array of entries
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,312,ublic double[][] getDataRef() {
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,313,eturn data;
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,317, Overwrites the underlying data for the matrix
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,318, with a reference to <code>inData</code>.
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,319, <p>
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,320, Does not make a fresh copy of <code>data</code>.
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,322, @param  inData 2-dimensional array of entries
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,324,ublic void setDataRef(double[][] inData) {
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,325,his.data = inData;
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,326,u = null;
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,331, @return norm
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,333,ublic double getNorm() {
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,334,ouble maxColSum = 0;
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,335,or (int col = 0; col < this.getColumnDimension(); col++) {
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,336,ouble sum = 0;
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,337,or (int row = 0; row < this.getRowDimension(); row++) {
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,338,um += Math.abs(data[row][col]);
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,340,"axColSum = Math.max(maxColSum, sum);"
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,342,eturn maxColSum;
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,347, @param row  the row to be fetched
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,348, @return array of entries in the row
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,349, @throws IllegalArgumentException if row > rowDimension or row < 1
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,351,ublic double[] getRow(int row) throws IllegalArgumentException {
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,352,f (row > this.getRowDimension() || row < 1) {
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,353,"hrow new IllegalArgumentException(""illegal row argument"");"
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,355,nt ncols = this.getColumnDimension();
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,356,ouble[] out = new double[ncols];
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,357,"ystem.arraycopy(data[row - 1], 0, out, 0, ncols);"
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,358,eturn out;
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,362, @param col column to fetch
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,363, @return array of entries in the column
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,364, @throws IllegalArgumentException if column > columnDimension or
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,365, column < 1
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,367,ublic double[] getColumn(int col) throws IllegalArgumentException {
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,368,f (col > this.getColumnDimension() || col < 1) {
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,369,"hrow new IllegalArgumentException(""illegal column argument"");"
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,371,nt nRows = this.getRowDimension();
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,372,ouble[] out = new double[nRows];
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,373,or (int row = 0; row < nRows; row++) {
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,374,ut[row] = data[row][col - 1];
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,376,eturn out;
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,380, @param row  row location of entry to be fetched
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,381, @param column  column location of entry to be fetched
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,382," @return matrix entry in row,column"
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,383, @throws IllegalArgumentException if entry does not exist
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,385,"ublic double getEntry(int row, int column)"
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,386,hrows IllegalArgumentException {
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,387,f (row < 1 || column < 1 || row > this.getRowDimension() ||
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,388,olumn > this.getColumnDimension()) {
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,390,hrow new IllegalArgumentException
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,391,"""matrix entry does not exist"");"
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,393,eturn data[row - 1][column - 1];
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,397, @param row    row location of entry to be set
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,398, @param column    column location of entry to be set
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,399, @param value  value to set
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,400, @throws IllegalArgumentException if entry does not exist
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,402,"ublic void setEntry(int row, int column, double value)"
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,403,hrows IllegalArgumentException {
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,404,f (row < 1 || column < 1 || row > this.getRowDimension() ||
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,405,olumn > this.getColumnDimension()) {
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,407,hrow new IllegalArgumentException
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,408,"""matrix entry does not exist"");"
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,410,ata[row - 1][column - 1] = value;
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,411,u = null;
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,416, @return transpose matrix
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,418,ublic RealMatrix transpose() {
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,419,nt nRows = this.getRowDimension();
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,420,nt nCols = this.getColumnDimension();
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,421,"ealMatrixImpl out = new RealMatrixImpl(nCols, nRows);"
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,422,ouble[][] outData = out.getDataRef();
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,423,or (int row = 0; row < nRows; row++) {
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,424,or (int col = 0; col < nCols; col++) {
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,425,utData[col][row] = data[row][col];
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,428,eturn out;
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,432, @return inverse matrix
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,433, @throws IllegalArgumentException if this is not invertible
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,435,ublic RealMatrix inverse() throws IllegalArgumentException {
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,436,eturn solve(getIdentity(this.getRowDimension()));
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,440, @return determinant
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,441, @throws IllegalArgumentException if matrix is not square
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,443,ublic double getDeterminant() throws IllegalArgumentException {
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,444,f (!isSquare()) {
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,445,"hrow new IllegalArgumentException(""matrix is not square"");"
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,447,f (isSingular()) {  // note: this has side effect of attempting LU
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,448,eturn 0d;        //       decomp if lu == null
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,449, else {
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,450,ouble det = (double) parity;
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,451,or (int i = 0; i < this.getRowDimension(); i++) {
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,452,et *= lu[i][i];
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,454,eturn det;
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,459, @return true if the matrix is square (rowDimension = columnDimension)
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,461,ublic boolean isSquare() {
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,462,eturn (this.getColumnDimension() == this.getRowDimension());
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,466, @return true if the matrix is singular
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,468,ublic boolean isSingular() {
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,469,f (lu == null) {
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,470,ry {
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,471,UDecompose();
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,472,eturn false;
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,473, catch (IllegalArgumentException ex) {
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,474,eturn true;
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,476, else {            // LU decomp must have been successfully performed
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,477,eturn false;   // so the matrix is not singular
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,482, @return rowDimension
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,484,ublic int getRowDimension() {
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,485,eturn data.length;
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,489, @return columnDimension
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,491,ublic int getColumnDimension() {
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,492,eturn data[0].length;
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,496, @return trace
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,497, @throws IllegalArgumentException if the matrix is not square
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,499,ublic double getTrace() throws IllegalArgumentException {
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,500,f (!isSquare()) {
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,501,"hrow new IllegalArgumentException(""matrix is not square"");"
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,503,ouble trace = data[0][0];
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,504,or (int i = 1; i < this.getRowDimension(); i++) {
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,505,race += data[i][i];
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,507,eturn trace;
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,511, @param v vector to operate on
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,512, @throws IllegalArgumentException if columnDimension != v.length
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,513, @return resulting vector
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,515,ublic double[] operate(double[] v) throws IllegalArgumentException {
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,516,f (v.length != this.getColumnDimension()) {
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,517,"hrow new IllegalArgumentException(""vector has wrong length"");"
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,519,nt nRows = this.getRowDimension();
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,520,nt nCols = this.getColumnDimension();
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,521,ouble[] out = new double[v.length];
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,522,or (int row = 0; row < nRows; row++) {
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,523,ouble sum = 0;
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,524,or (int i = 0; i < nCols; i++) {
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,525,um += data[row][i] * v[i];
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,527,ut[row] = sum;
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,529,eturn out;
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,533, @param v vector to premultiply by
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,534, @throws IllegalArgumentException if rowDimension != v.length
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,535, @return resulting matrix
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,537,ublic RealMatrix preMultiply(double[] v) throws IllegalArgumentException {
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,538,nt nCols = this.getColumnDimension();
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,539,f (v.length != nCols) {
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,540,"hrow new IllegalArgumentException(""vector has wrong length"");"
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,542,"/ being a bit lazy here -- probably should implement directly, like"
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,543,/ operate
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,544,ealMatrix pm = new RealMatrixImpl(v).transpose();
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,545,eturn pm.multiply(this);
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,549, @param b  constant vector
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,550," @return   vector of solution values to AX = b, where A is this"
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,551, @throws   IllegalArgumentException if rowDimension != b.length or matrix
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,552,           is singular
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,554,ublic double[] solve(double[] b) throws IllegalArgumentException {
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,555,nt nRows = this.getRowDimension();
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,556,f (b.length != nRows) {
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,557,hrow new IllegalArgumentException
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,558,"""constant vector has wrong length"");"
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,560,ealMatrix bMatrix = new RealMatrixImpl(b);
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,561,ouble[][] solution = ((RealMatrixImpl) (solve(bMatrix))).getDataRef();
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,562,ouble[] out = new double[nRows];
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,563,or (int row = 0; row < nRows; row++) {
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,564,ut[row] = solution[row][0];
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,566,eturn out;
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,570," Uses LU decomposition, performing the composition if the matrix has"
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,571," not been decomposed, or if there have been changes to the matrix since"
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,572, the last decomposition.
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,574, @param b the constant vector
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,575, @return solution matrix
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,576, @throws IllegalArgumentException if this is singular or dimensions
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,577, do not match.
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,579,ublic RealMatrix solve(RealMatrix b) throws IllegalArgumentException {
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,580,f (!this.isSquare()) {
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,581,hrow new IllegalArgumentException
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,582,"""coefficient matrix is not square"");"
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,584,f (b.getRowDimension() != this.getRowDimension()) {
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,585,"hrow new IllegalArgumentException(""Incorrect row dimension"");"
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,587,f (this.isSingular()) {  // side effect: compute LU decomp
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,588,"hrow new IllegalArgumentException(""Matrix is singular."");"
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,591,nt nCol = this.getColumnDimension();
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,592,nt nColB = b.getColumnDimension();
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,593,nt nRowB = b.getRowDimension();
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,595,/ Apply permutations to b
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,596,ouble[][] bv = b.getData();
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,597,ouble[][] bp = new double[nRowB][nColB];
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,598,or (int row = 0; row < nRowB; row++) {
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,599,or (int col = 0; col < nColB; col++) {
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,600,p[row][col] = bv[pivot[row]][col];
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,603,v = null;
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,605,/ Solve LY = b
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,606,or (int col = 0; col < nCol; col++) {
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,607,or (int i = col + 1; i < nCol; i++) {
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,608,or (int j = 0; j < nColB; j++) {
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,609,p[i][j] -= bp[col][j] * lu[i][col];
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,614,/ Solve UX = Y
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,615,or (int col = nCol - 1; col >= 0; col--) {
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,616,or (int j = 0; j < nColB; j++) {
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,617,p[col][j] /= lu[col][col];
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,619,or (int i = 0; i < col; i++) {
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,620,or (int j = 0; j < nColB; j++) {
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,621,p[i][j] -= bp[col][j] * lu[i][col];
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,626,ealMatrixImpl outMat = new RealMatrixImpl(bp);
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,627,eturn outMat;
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,631," Computes a new <a href=""http://www.math.gatech.edu/~bourbaki/"
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,632," math2601/Web-notes/2num.pdf"">LU decompostion</a> for this matrix,"
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,633, storing the result for use by other methods.
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,634, <p>
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,635, <strong>Implementation Note</strong>:<br>
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,636," Uses <a href=""http://www.damtp.cam.ac.uk/user/fdl/"
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,637," people/sd/lectures/nummeth98/linear.htm"">Crout's algortithm</a>,"
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,638, with partial pivoting.
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,639, <p>
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,640, <strong>Usage Note</strong>:<br>
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,641, This method should rarely be invoked directly. Its only use is
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,642, to force recomputation of the LU decomposition when changes have been
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,643, made to the underlying data using direct array references. Changes
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,644, made using setXxx methods will trigger recomputation when needed
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,645, automatically.
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,647, @throws IllegalArgumentException if the matrix is singular
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,649,ublic void LUDecompose() throws IllegalArgumentException {
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,650,nt nRows = this.getRowDimension();
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,651,nt nCols = this.getColumnDimension();
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,652,f (nRows < nCols) {
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,653,hrow new IllegalArgumentException
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,654,"""LU decomposition requires row dimension >= column dimension"");"
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,656,u = this.getData();
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,658,/ Initialize pivot array and parity
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,659,ivot = new int[nRows];
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,660,or (int row = 0; row < nRows; row++) {
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,661,ivot[row] = row;
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,663,arity = 1;
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,665,/ Loop over columns
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,666,or (int col = 0; col < nCols; col++) {
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,668,ouble sum = 0;
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,670,/ upper
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,671,or (int row = 0; row < col; row++) {
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,672,um = lu[row][col];
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,673,or (int i = 0; i < row; i++) {
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,674,um -= lu[row][i] * lu[i][col];
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,676,u[row][col] = sum;
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,679,/ lower
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,680,nt max = col; // pivot row
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,681,ouble largest = 0d;
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,682,or (int row = col; row < nRows; row++) {
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,683,um = lu[row][col];
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,684,or (int i = 0; i < col; i++) {
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,685,um -= lu[row][i] * lu[i][col];
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,687,u[row][col] = sum;
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,689,/ maintain best pivot choice
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,690,f (Math.abs(sum) > largest) {
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,691,argest = Math.abs(sum);
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,692,ax = row;
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,696,/ Singularity check
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,697,f (Math.abs(lu[max][col]) < TOO_SMALL) {
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,698,u = null;
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,699,"hrow new IllegalArgumentException(""matrix is singular"");"
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,702,/ Pivot if necessary
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,703,f (max != col) {
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,704,ouble tmp = 0;
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,705,or (int i = 0; i < nCols; i++) {
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,706,mp = lu[max][i];
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,707,u[max][i] = lu[col][i];
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,708,u[col][i] = tmp;
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,710,nt temp = pivot[max];
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,711,ivot[max] = pivot[col];
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,712,ivot[col] = temp;
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,713,arity = -parity;
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,716,"/Divide the lower elements by the ""winning"" diagonal elt."
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,717,or (int row = col + 1; row < nRows; row++) {
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,718,u[row][col] /= lu[col][col];
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,723,/------------------------ Protected methods
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,726, Returns <code>dimension x dimension</code> identity matrix.
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,728, @param dimension dimension of identity matrix to generate
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,729, @return identity matrix
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,731,rotected RealMatrix getIdentity(int dimension) {
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,732,"ealMatrixImpl out = new RealMatrixImpl(dimension, dimension);"
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,733,ouble[][] d = out.getDataRef();
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,734,or (int row = 0; row < dimension; row++) {
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,735,or (int col = 0; col < dimension; col++) {
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,736,[row][col] = row == col ? 1d : 0d;
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,739,eturn out;
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,742,/------------------------ Private methods
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,745, Returns a fresh copy of the underlying data array.
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,747, @return a copy of the underlying data array.
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,749,rivate double[][] copyOut() {
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,750,nt nRows = this.getRowDimension();
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,751,ouble[][] out =
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,752,ew double[nRows][this.getColumnDimension()];
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,753,"/ can't copy 2-d array in one shot, otherwise get row references"
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,754,or (int i = 0; i < nRows; i++) {
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,755,"ystem.arraycopy(data[i], 0, out[i], 0, data[i].length);"
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,757,eturn out;
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,761, Replaces data with a fresh copy of the input array.
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,763, @param in data to copy in
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,765,rivate void copyIn(double[][] in) {
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,766,nt nRows = in.length;
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,767,nt nCols = in[0].length;
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,768,ata = new double[nRows][nCols];
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,769,"ystem.arraycopy(in, 0, data, 0, in.length);"
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,770,or (int i = 0; i < nRows ; i++) {
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,771,"ystem.arraycopy(in[i], 0, data[i], 0, nCols);"
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,773,u = null;
False,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,2," The Apache Software License, Version 1.1"
False,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
False,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,5, reserved.
False,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,7," Redistribution and use in source and binary forms, with or without"
False,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,8," modification, are permitted provided that the following conditions"
False,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,9, are met:
False,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,11, 1. Redistributions of source code must retain the above copyright
False,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,12,"    notice, this list of conditions and the following disclaimer."
False,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,14, 2. Redistributions in binary form must reproduce the above copyright
False,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,15,"    notice, this list of conditions and the following disclaimer in"
False,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,16,    the documentation and/or other materials provided with the
False,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,17,    distribution.
False,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,19," 3. The end-user documentation included with the redistribution, if"
False,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,20,"    any, must include the following acknowledgement:"
False,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,21,"       ""This product includes software developed by the"
False,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,22,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,23,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,24,    if and wherever such third-party acknowledgements normally appear.
False,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,26," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,27,"    Foundation"" must not be used to endorse or promote products derived"
False,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,28,    from this software without prior written permission. For written
False,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,29,"    permission, please contact apache@apache.org."
False,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,31," 5. Products derived from this software may not be called ""Apache"""
False,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,32,"    nor may ""Apache"" appear in their name without prior written"
False,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,33,    permission of the Apache Software Foundation.
False,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,38, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,39," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,46, SUCH DAMAGE.
False,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,49, This software consists of voluntary contributions made by many
False,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,50, individuals on behalf of the Apache Software Foundation.  For more
False,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,51," information on the Apache Software Foundation, please see"
False,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,52, <http://www.apache.org/>.
False,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,55,ackage org.apache.commons.math.random;
False,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,57,mport java.io.IOException;
False,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,58,mport java.io.File;
False,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,59,mport java.util.ArrayList;
False,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,61,mport org.apache.commons.math.stat.Univariate;
False,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,64," Represents an <a href=""http://random.mat.sbg.ac.at/~ste/dipl/node11.html"">"
False,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,65, empirical probability distribution</a> -- a probability distribution derived
False,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,66, from observed data without making any assumptions about the functional form
False,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,67, of the population distribution that the data come from.<p>
False,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,68," Implementations of this interface maintain data structures, called"
False,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,69," <i>distribution digests</i>, that describe empirical distributions and"
False,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,70, support the following operations: <ul>
False,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,71, <li>loading the distribution from a file of observed data values</li>
False,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,72," <li>saving and re-loading distribution digests to/from ""digest files"" </li>"
False,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,73," <li>dividing the input data into ""bin ranges"" and reporting bin frequency"
False,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,74,     counts (data for histogram)</li>
False,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,75, <li>reporting univariate statistics describing the full set of data values
False,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,76,     as well as the observations within each bin</li>
False,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,77, <li>generating random values from the distribution</li>
False,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,78, </ul>
False,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,79, Applications can use <code>EmpiricalDistribution</code> implementations to
False,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,80, build grouped frequnecy histograms representing the input data or to
False,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,81," generate random values ""like"" those in the input file -- i.e., the values"
False,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,82, generated will follow the distribution of the values in the file.
False,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,83, @version $Revision: 1.7 $ $Date: 2003/10/16 15:24:31 $
False,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,85,ublic interface EmpiricalDistribution {
False,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,88, Computes the empirical distribution from the input file
False,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,89, @param filePath fully qualified name of a file in the local file system
False,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,90, @throws IOException if an IO error occurs
False,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,92,oid load(String filePath) throws IOException;
False,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,95, Computes the empirical distribution from the input file
False,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,96, @param file url of the input file
False,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,97, @throws IOException if an IO error occurs
False,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,99,oid load(File file) throws IOException;
False,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,102, Generates a random value from this distribution.
False,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,103, <strong>Preconditions:</strong><ul>
False,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,104, <li>the distribution must be loaded before invoking this method</li></ul>
False,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,105, @return the random value.
False,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,106, @throws IllegalStateException if the distribution has not been loaded
False,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,108,ouble getNextValue() throws IllegalStateException;
False,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,112, Returns a Univariate describing this distribution.
False,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,113, <strong>Preconditions:</strong><ul>
False,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,114, <li>the distribution must be loaded before invoking this method</li></ul>
False,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,115, @return the sample statistics
False,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,116, @throws IllegalStateException if the distribution has not been loaded
False,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,118,nivariate getSampleStats() throws IllegalStateException;
False,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,121, Loads a saved distribution from a file.
False,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,122, @param file File reference for a file containing a digested distribution
False,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,123, @throws IOException if an error occurs reading the file
False,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,125,oid loadDistribution(File file) throws IOException;
False,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,128, Loads a saved distribution from a file.
False,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,129, @param filePath fully qualified file path for a file
False,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,130, containing a digested distribution
False,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,131, @throws IOException if an error occurs reading the file
False,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,133,oid loadDistribution(String filePath) throws IOException;
False,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,136, Saves distribution to a file. Overwrites the file if it exists.
False,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,137, <strong>Preconditions:</strong><ul>
False,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,138, <li>the distribution must be loaded before invoking this method</li></ul>
False,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,139, @param filePath fully qualified file path for the file to be written
False,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,140, @throws IOException if an error occurs reading the file
False,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,141, @throws IllegalStateException if the distribution has not been loaded
False,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,143,oid saveDistribution(String filePath) throws
False,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,144,"OException,IllegalStateException;"
False,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,147, Saves distribution to a file. Overwrites the file if it exists.
False,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,148, <strong>Preconditions:</strong><ul>
False,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,149, <li>the distribution must be loaded before invoking this method</li></ul>
False,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,150, @param file File reference for the file to be written
False,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,151, @throws IOException if an error occurs reading the file
False,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,152, @throws IllegalStateException if the distribution has not been loaded
False,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,154,"oid saveDistribution(File file) throws IOException,IllegalStateException;"
False,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,157, property indicating whether or not the distribution has been loaded
False,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,158, @return true if the distribution has been loaded
False,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,160,oolean isLoaded();
False,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,163, Returns the number of bins
False,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,164, @return the number of bins.
False,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,166,nt getBinCount();
False,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,169, Returns a list of Univariates containing statistics describing the
False,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,170, values in each of the bins.  The ArrayList is indexed on the bin number.
False,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,171, @return ArrayList of bin statistics.
False,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,173,rrayList getBinStats();
False,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,176, Returns the array of upper bounds for the bins.  Bins are: <br/>
False,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,177," [min,upperBounds[0]],(upperBounds[0],upperBounds[1]],...,"
False,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,178,"  (upperBounds[binCount-1],max]"
False,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,179, @return array of bin upper bounds
False,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,181,ouble[] getUpperBounds();
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,2," The Apache Software License, Version 1.1"
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,5, reserved.
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,7," Redistribution and use in source and binary forms, with or without"
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,8," modification, are permitted provided that the following conditions"
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,9, are met:
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,11, 1. Redistributions of source code must retain the above copyright
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,12,"    notice, this list of conditions and the following disclaimer."
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,14, 2. Redistributions in binary form must reproduce the above copyright
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,15,"    notice, this list of conditions and the following disclaimer in"
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,16,    the documentation and/or other materials provided with the
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,17,    distribution.
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,19," 3. The end-user documentation included with the redistribution, if"
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,20,"    any, must include the following acknowledgement:"
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,21,"       ""This product includes software developed by the"
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,22,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,23,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,24,    if and wherever such third-party acknowledgements normally appear.
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,26," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,27,"    Foundation"" must not be used to endorse or promote products derived"
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,28,    from this software without prior written permission. For written
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,29,"    permission, please contact apache@apache.org."
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,31," 5. Products derived from this software may not be called ""Apache"""
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,32,"    nor may ""Apache"" appear in their name without prior written"
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,33,    permission of the Apache Software Foundation.
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,38, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,39," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,46, SUCH DAMAGE.
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,49, This software consists of voluntary contributions made by many
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,50, individuals on behalf of the Apache Software Foundation.  For more
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,51," information on the Apache Software Foundation, please see"
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,52, <http://www.apache.org/>.
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,55,ackage org.apache.commons.math.random;
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,57,mport java.util.ArrayList;
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,58,mport java.io.Serializable;
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,59,mport java.io.BufferedReader;
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,60,mport java.io.FileReader;
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,61,mport java.io.File;
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,62,mport java.io.IOException;
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,64,mport org.apache.commons.math.stat.Univariate;
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,65,mport org.apache.commons.math.stat.UnivariateImpl;
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,68, Implements <code>EmpiricalDistribution</code> interface.  This implementation
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,69, uses what amounts to the
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,70," <a href=""http://nedwww.ipac.caltech.edu/level5/March02/Silverman/Silver2_6.html"">"
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,71, Variable Kernel Method</a> with Gaussian smoothing:<p>
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,72, <strong>Digesting the input file</strong>
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,73, <ol><li>Pass the file once to compute min and max.</li>
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,74," <li>Divide the range from min-max into <code>binCount</code> ""bins.""</li>"
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,75," <li>Pass the data file again, computing bin counts and univariate"
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,76,"     statistics (mean, std dev.) for each of the bins </li>"
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,77," <li>Divide the interval (0,1) into subintervals associated with the bins,"
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,78,     with the length of a bin's subinterval proportional to its count.</li></ol>
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,79, <strong>Generating random values from the distribution</strong><ol>
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,80," <li>Generate a uniformly distributed value in (0,1) </li>"
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,81, <li>Select the subinterval to which the value belongs.
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,82, <li>Generate a random Gaussian value with mean = mean of the associated
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,83,     bin and std dev = std dev of associated bin.</li></ol></p><p>
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,84,<strong>USAGE NOTES:</strong><ul>
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,85,<li>The <code>binCount</code> is set by default to 1000.  A good rule of thumb
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,86,    is to set the bin count to approximately the length of the input file divided
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,87,    by 10.  See TODO: add reference </li>
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,88,<li>The input file <i>must</i> be a plain text file containing one valid numeric
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,89,    entry per line.</li>
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,90, </ol></p>
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,92, @version $Revision: 1.7 $ $Date: 2003/10/16 15:24:31 $
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,94,"ublic class EmpiricalDistributionImpl implements Serializable,EmpiricalDistribution {"
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,97,** List of Univariate objects characterizing the bins */
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,98,rivate ArrayList binStats = null;
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,100,** Sample statistics */
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,101,nivariate sampleStats = null;
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,103,** number of bins */
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,104,rivate int binCount = 1000;
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,106,** is the distribution loaded? */
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,107,rivate boolean loaded = false;
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,109,"** upper bounds of subintervals in (0,1) ""belonging"" to the bins */"
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,110,rivate double[] upperBounds = null;
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,112,** RandomData instance to use in repeated calls to getNext() */
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,113,rivate RandomData randomData = new RandomDataImpl();
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,116, Creates a new EmpiricalDistribution  with the default bin count
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,118,ublic EmpiricalDistributionImpl() {
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,119,inStats = new ArrayList();
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,123, Creates a new EmpiricalDistribution  with the specified bin count
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,124, @param binCount number of bins
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,126,ublic EmpiricalDistributionImpl(int binCount) {
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,127,his.binCount = binCount;
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,128,inStats = new ArrayList();
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,132,ublic void load(String filePath) throws IOException {
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,133,ile file = new File(filePath);
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,134,oad(file);
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,138,ublic void load(File file) throws IOException {
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,139,/ Pass the file once to get sample stats
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,140,ufferedReader in = null;
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,141,ry {
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,142,n = new BufferedReader(new FileReader(file));
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,143,tring str = null;
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,144,ouble val = 0.0;
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,145,ampleStats = new UnivariateImpl();
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,146,hile ((str = in.readLine()) != null) {
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,147,al = new Double(str).doubleValue();
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,148,ampleStats.addValue(val);
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,150,n.close();
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,151,n = null;
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,152, finally {
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,153,f (in != null) try {in.close();} catch (Exception ex) {};
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,156,/ Load array of bin upper bounds -- evenly spaced from min - max
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,157,ouble min = sampleStats.getMin();
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,158,ouble max = sampleStats.getMax();
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,159,ouble delta = (max - min)/(new Double(binCount)).doubleValue();
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,160,ouble[] binUpperBounds = new double[binCount];
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,161,inUpperBounds[0] = min + delta;
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,162,or (int i = 1; i< binCount - 1; i++) {
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,163,inUpperBounds[i] = binUpperBounds[i-1] + delta;
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,165,inUpperBounds[binCount -1] = max;
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,167,/ Initialize binStats ArrayList
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,168,f (!binStats.isEmpty()) {
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,169,inStats.clear();
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,171,or (int i = 0; i < binCount; i++) {
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,172,nivariate stats = new UnivariateImpl();
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,173,"inStats.add(i,stats);"
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,176,"/ Pass the data again, filling data in binStats Array"
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,177,ry {
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,178,n = new BufferedReader(new FileReader(file));
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,179,tring str = null;
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,180,ouble val = 0.0d;
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,181,hile ((str = in.readLine()) != null) {
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,182,al = new Double(str).doubleValue();
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,184,/ Find bin and add value to binStats for the bin
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,185,oolean found = false;
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,186,nt i = 0;
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,187,hile (!found) {
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,188,f (i >= binCount) {
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,189,"hrow new RuntimeException(""bin alignment error"");"
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,191,f (val <= binUpperBounds[i]) {
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,192,ound = true;
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,193,nivariate stats = (Univariate)binStats.get(i);
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,194,tats.addValue(val);
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,196,++;
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,199,n.close();
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,200,n = null;
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,201, finally {
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,202,f (in != null) try {in.close();} catch (Exception ex) {};
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,205,/ Assign upperBounds based on bin counts
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,206,pperBounds = new double[binCount];
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,207,pperBounds[0] =
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,208,(double)((Univariate)binStats.get(0)).getN())/
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,209,double)sampleStats.getN();
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,210,or (int i = 1; i < binCount-1; i++) {
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,211,pperBounds[i] = upperBounds[i-1] +
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,212,(double)((Univariate)binStats.get(i)).getN())/
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,213,double)sampleStats.getN();
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,215,pperBounds[binCount-1] = 1.0d;
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,217,oaded = true;
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,221, Generates a random value from this distribution
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,222, @return the random value.
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,223, @throws IllegalStateException if the distribution has not been loaded
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,225,ublic double getNextValue() throws IllegalStateException {
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,227,f (!loaded) {
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,228,"hrow new IllegalStateException(""distribution not loaded"");"
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,231,"/ Start with a uniformly distributed random number in (0,1)"
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,232,ouble x = Math.random();
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,234,/ Use this to select the bin and generate a Gaussian within the bin
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,235,or (int i = 0; i < binCount; i++) {
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,236,f (x <= upperBounds[i]) {
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,237,nivariate stats = (Univariate)binStats.get(i);
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,238,f (stats.getN() > 0) {
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,239,f (stats.getStandardDeviation() > 0) {  // more than one obs
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,240,eturn randomData.nextGaussian
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,241,"stats.getMean(),stats.getStandardDeviation());"
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,242, else {
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,243,eturn stats.getMean(); // only one obs in bin
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,248,"hrow new RuntimeException(""No bin selected"");"
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,251,ublic void loadDistribution(String filePath) throws IOException {
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,252,"hrow new UnsupportedOperationException(""Not Implemented yet :-("");"
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,255,ublic void loadDistribution(File file) throws IOException {
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,256,"hrow new UnsupportedOperationException(""Not Implemented yet :-("");"
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,259,ublic void saveDistribution(String filePath) throws
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,260,"OException,IllegalStateException {"
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,261,"hrow new UnsupportedOperationException(""Not Implemented yet :-("");"
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,264,ublic void saveDistribution(File file) throws
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,265,"OException,IllegalStateException {"
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,266,"hrow new UnsupportedOperationException(""Not Implemented yet :-("");"
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,269,ublic Univariate getSampleStats() {
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,270,eturn sampleStats;
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,273,ublic int getBinCount() {
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,274,eturn binCount;
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,277,ublic ArrayList getBinStats() {
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,278,eturn binStats;
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,281,ublic double[] getUpperBounds() {
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,282,eturn upperBounds;
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,285,ublic boolean isLoaded() {
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,286,eturn loaded;
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,2," The Apache Software License, Version 1.1"
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,5, reserved.
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,7," Redistribution and use in source and binary forms, with or without"
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,8," modification, are permitted provided that the following conditions"
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,9, are met:
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,11, 1. Redistributions of source code must retain the above copyright
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,12,"    notice, this list of conditions and the following disclaimer."
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,14, 2. Redistributions in binary form must reproduce the above copyright
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,15,"    notice, this list of conditions and the following disclaimer in"
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,16,    the documentation and/or other materials provided with the
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,17,    distribution.
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,19," 3. The end-user documentation included with the redistribution, if"
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,20,"    any, must include the following acknowledgement:"
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,21,"       ""This product includes software developed by the"
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,22,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,23,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,24,    if and wherever such third-party acknowledgements normally appear.
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,26," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,27,"    Foundation"" must not be used to endorse or promote products derived"
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,28,    from this software without prior written permission. For written
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,29,"    permission, please contact apache@apache.org."
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,31," 5. Products derived from this software may not be called ""Apache"""
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,32,"    nor may ""Apache"" appear in their name without prior written"
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,33,    permission of the Apache Software Foundation.
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,38, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,39," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,46, SUCH DAMAGE.
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,49, This software consists of voluntary contributions made by many
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,50, individuals on behalf of the Apache Software Foundation.  For more
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,51," information on the Apache Software Foundation, please see"
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,52, <http://www.apache.org/>.
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,55,ackage org.apache.commons.math.random;
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,56,mport java.util.Collection;
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,59, Random data generation utilities
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,60, @version $Revision: 1.4 $ $Date: 2003/10/16 15:24:31 $
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,62,ublic interface RandomData {
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,64, Generates a random string of hex characters of length
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,65, <code>len</code>.
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,66, <p>
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,67," The generated string will be random, but not cryptographically"
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,68," secure. To generate cryptographically secure strings, use"
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,69, <code>nextSecureHexString</code>
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,70, <p>
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,71, <strong>Preconditions</strong>:<ul>
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,72, <li><code>len > 0</code> (otherwise an IllegalArgumentException
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,73,     is thrown.)</li>
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,74, </ul>
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,76, @param len the length of the string to be generated
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,77, @return random string of hex characters of length <code>len</code>
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,79,tring nextHexString(int len);
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,82, Generates a uniformly distributed random integer between
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,83, <code>lower</code> and <code>upper</code> (endpoints included).
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,84, <p>
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,85," The generated integer will be random, but not cryptographically secure."
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,86," To generate cryptographically secure integer sequences, use"
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,87, <code>nextSecureInt</code>.
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,88, <p>
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,89, <strong>Preconditions</strong>:<ul>
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,90, <li><code>lower < upper</code> (otherwise an IllegalArgumentException
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,91,     is thrown.)</li>
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,92, </ul>
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,94, @param lower lower bound for generated integer
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,95, @param upper upper bound for generated integer
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,96, @return a random integer greater than or equal to <code>lower</code>
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,97, and less than or equal to <code>upper</code>.
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,99,"nt nextInt(int lower, int upper);"
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,102, Generates a uniformly distributed random long integer between
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,103, <code>lower</code> and <code>upper</code> (endpoints included).
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,104, <p>
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,105," The generated long integer values will be random, but not"
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,106, cryptographically secure.
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,107," To generate cryptographically secure sequences of longs, use"
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,108, <code>nextSecureLong</code>
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,109, <p>
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,110, <strong>Preconditions</strong>:<ul>
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,111, <li><code>lower < upper</code> (otherwise an IllegalArgumentException
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,112,     is thrown.)</li>
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,113, </ul>
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,115, @param lower lower bound for generated integer
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,116, @param upper upper bound for generated integer
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,117, @return a random integer greater than or equal to <code>lower</code>
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,118, and less than or equal to <code>upper</code>.
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,120,"ong nextLong(long lower, long upper);"
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,123, Generates a random string of hex characters from a secure random
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,124, sequence.
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,125, <p>
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,126," If cryptographic security is not required,"
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,127, use <code>nextHexString()</code>.
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,128, <p>
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,129, <strong>Preconditions</strong>:<ul>
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,130, <li><code>len > 0</code> (otherwise an IllegalArgumentException
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,131,     is thrown.)</li>
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,132, </ul>
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,133, @param len length of return string
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,134, @return the random hex string
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,136,tring nextSecureHexString(int len);
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,139, Generates a uniformly distributed random integer between
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,140, <code>lower</code> and <code>upper</code> (endpoints included)
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,141, from a secure random sequence.
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,142, <p>
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,143, Sequences of integers generated using this method will be
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,144," cryptographically secure. If cryptographic security is not required,"
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,145, <code>nextInt</code> should be used instead of this method.
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,146, <p>
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,147, <strong>Definition</strong>:
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,148," <a href=""http://www.wikipedia.org/wiki/"
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,149," Cryptographically_secure_pseudo-random_number_generator"">"
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,150, Secure Random Sequence</a>
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,151, <p>
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,152, <strong>Preconditions</strong>:<ul>
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,153, <li><code>lower < upper</code> (otherwise an IllegalArgumentException
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,154,     is thrown.)</li>
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,155, </ul>
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,157, @param lower lower bound for generated integer
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,158, @param upper upper bound for generated integer
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,159, @return a random integer greater than or equal to <code>lower</code>
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,160, and less than or equal to <code>upper</code>.
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,162,"nt nextSecureInt(int lower, int upper);"
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,165, Generates a random long integer between <code>lower</code>
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,166, and <code>upper</code> (endpoints included).<p>
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,167, Sequences of long values generated using this method will be
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,168," cryptographically secure. If cryptographic security is not required,"
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,169, <code>nextLong</code> should be used instead of this method.
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,170, <p>
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,171, <strong>Definition</strong>:
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,172," <a href=""http://www.wikipedia.org/wiki/"
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,173," Cryptographically_secure_pseudo-random_number_generator"">"
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,174, Secure Random Sequence</a>
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,175, <p>
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,176, <strong>Preconditions</strong>:<ul>
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,177, <li><code>lower < upper</code> (otherwise an IllegalArgumentException
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,178,     is thrown.)</li>
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,179, </ul>
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,181, @param lower lower bound for generated integer
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,182, @param upper upper bound for generated integer
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,183, @return a long integer greater than or equal to <code>lower</code>
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,184, and less than or equal to <code>upper</code>.
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,186,"ong nextSecureLong(long lower, long upper);"
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,189, Generates a random value from the Poisson distribution with
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,190, the given mean.
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,191, <p>
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,192, <strong>Definition</strong>:
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,193," <a href=""http://www.itl.nist.gov/div898/handbook/"
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,194," eda/section3/eda366j.htm"">"
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,195, Poisson Distribution</a>
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,196, <p>
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,197, <strong>Preconditions</strong>: <ul>
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,198, <li>The specified mean <i>must</i> be positive (otherwise an
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,199,     IllegalArgumentException is thrown.)</li>
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,200, </ul>
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,201, @param mean Mean of the distribution
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,202, @return poisson deviate with the specified mean
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,204,ong nextPoisson(double mean);
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,207, Generates a random value from the
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,208, Normal (or Gaussian) distribution with the given mean
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,209, and standard deviation.
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,210, <p>
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,211, <strong>Definition</strong>:
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,212," <a href=""http://www.itl.nist.gov/div898/handbook/"
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,213," eda/section3/eda3661.htm"">"
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,214, Normal Distribution</a>
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,215, <p>
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,216, <strong>Preconditions</strong>: <ul>
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,217, <li><code>sigma > 0</code> (otherwise an IllegalArgumentException
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,218,     is thrown.)</li>
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,219, </ul>
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,220, @param mu Mean of the distribution
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,221, @param sigma Standard deviation of the distribution
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,222," @return random value from Gaussian distribution with mean = mu,"
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,223, standard deviation = sigma
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,225,"ouble nextGaussian(double mu, double sigma);"
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,228, Generates a random value from the exponential distribution
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,229, with expected value = <code>mean</code>.
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,230, <p>
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,231, <strong>Definition</strong>:
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,232," <a href=""http://www.itl.nist.gov/div898/handbook/"
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,233," eda/section3/eda3667.htm"">"
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,234, Exponential Distribution</a>
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,235, <p>
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,236, <strong>Preconditions</strong>: <ul>
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,237, <li><code>mu >= 0</code> (otherwise an IllegalArgumentException
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,238,     is thrown.)</li>
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,239, </ul>
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,240, @param mean Mean of the distribution
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,241, @return random value from exponential distribution
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,243,ouble nextExponential(double mean);
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,246, Generates a uniformly distributed random value from the open interval
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,247," (<code>lower</code>,<code>upper</code>) (i.e., endpoints excluded)."
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,248, <p>
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,249, <strong>Definition</strong>:
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,250," <a href=""http://www.itl.nist.gov/div898/handbook/"
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,251," eda/section3/eda3662.htm"">"
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,252, Uniform Distribution</a> <code>lower</code> and
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,253, <code>upper - lower</code> are the
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,254," <a href = ""http://www.itl.nist.gov/div898/handbook/eda/"
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,255," section3/eda364.htm"">"
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,256," location and scale parameters</a>, respectively."
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,257, <p>
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,258, <strong>Preconditions</strong>:<ul>
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,259, <li><code>lower < upper</code> (otherwise an IllegalArgumentException
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,260,     is thrown.)</li>
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,261, </ul>
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,263, @param lower lower endpoint of the interval of support
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,264, @param upper upper endpoint of the interval of support
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,265, @return uniformly distributed random value between lower
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,266, and upper (exclusive)
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,268,"ouble nextUniform(double lower, double upper);"
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,271, Generates an integer array of length <code>k</code> whose entries
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,272," are selected randomly, without repetition, from the integers <code>"
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,273, 0 through n-1</code> (inclusive).
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,274, <p>
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,275, Generated arrays represent permutations
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,276, of <code>n</code> taken <code>k</code> at a time.
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,277, <p>
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,278, <strong>Preconditions:</strong><ul>
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,279, <li> <code>k <= n</code></li>
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,280, <li> <code>n > 0</code> </li>
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,281, </ul>
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,282," If the preconditions are not met, an IllegalArgumentException is"
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,283, thrown.
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,285, @param n domain of the permutation
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,286, @param k size of the permutation
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,287, @return random k-permutation of n
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,289,"nt[] nextPermutation(int n, int k);"
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,292, Returns an array of <code>k</code> objects selected randomly
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,293, from the Collection <code>c</code>.
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,294, <p>
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,295, Sampling from <code>c</code>
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,296, is without replacement; but if <code>c</code> contains identical
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,297," objects, the sample may include repeats.  If all elements of <code>"
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,298," c</code> are distinct, the resulting object array represents a"
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,299," <a href=""http://rkb.home.cern.ch/rkb/AN16pp/"
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,300," node250.html#SECTION0002500000000000000000"">"
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,301, Simple Random Sample</a> of size
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,302, <code>k</code> from the elements of <code>c</code>.
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,303, <p>
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,304, <strong>Preconditions:</strong><ul>
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,305, <li> k must be less than or equal to the size of c </li>
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,306, <li> c must not be empty </li>
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,307, </ul>
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,308," If the preconditions are not met, an IllegalArgumentException is"
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,309, thrown.
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,311, @param c collection to be sampled
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,312, @param k size of the sample
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,313, @return random sample of k elements from c
False,src/java/org/apache/commons/math/random/RandomData.java,src/java/org/apache/commons/math/random/RandomData.java,315,"bject[] nextSample(Collection c, int k);"
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,2," The Apache Software License, Version 1.1"
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,5, reserved.
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,7," Redistribution and use in source and binary forms, with or without"
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,8," modification, are permitted provided that the following conditions"
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,9, are met:
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,11, 1. Redistributions of source code must retain the above copyright
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,12,"    notice, this list of conditions and the following disclaimer."
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,14, 2. Redistributions in binary form must reproduce the above copyright
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,15,"    notice, this list of conditions and the following disclaimer in"
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,16,    the documentation and/or other materials provided with the
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,17,    distribution.
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,19," 3. The end-user documentation included with the redistribution, if"
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,20,"    any, must include the following acknowledgement:"
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,21,"       ""This product includes software developed by the"
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,22,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,23,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,24,    if and wherever such third-party acknowledgements normally appear.
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,26," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,27,"    Foundation"" must not be used to endorse or promote products derived"
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,28,    from this software without prior written permission. For written
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,29,"    permission, please contact apache@apache.org."
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,31," 5. Products derived from this software may not be called ""Apache"""
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,32,"    nor may ""Apache"" appear in their name without prior written"
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,33,    permission of the Apache Software Foundation.
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,38, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,39," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,46, SUCH DAMAGE.
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,49, This software consists of voluntary contributions made by many
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,50, individuals on behalf of the Apache Software Foundation.  For more
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,51," information on the Apache Software Foundation, please see"
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,52, <http://www.apache.org/>.
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,55,ackage org.apache.commons.math.random;
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,57,mport java.security.MessageDigest;
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,58,mport java.security.SecureRandom;
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,59,mport java.security.NoSuchAlgorithmException;
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,60,mport java.security.NoSuchProviderException;
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,61,mport java.util.Random;
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,62,mport java.util.Collection;
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,65, Implements the <code>RandomData</code> interface using
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,66, <code>java.util.Random</code> and
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,67, <code>java.util.Random.SecureRandom</code> instances to generate data.
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,68, <p>
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,69, Supports reseeding the underlying
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,70," <a href=""http://www.wikipedia.org/wiki/Pseudo-random_number_generator"">"
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,71, PRNG</a>. The <code>SecurityProvider</code> and <code>Algorithm</code>
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,72, used by the <code>SecureRandom</code> instance can also be reset.
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,73, <p>
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,74," For details on the PRNGs, see the JDK documentation for"
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,75, <code>java.util.Random</code> and
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,76, <code>java.util.Random.SecureRandom</code>
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,77, <p>
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,78, <strong>Usage Notes</strong>: <ul>
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,79, <li>
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,80, Instance variables are used to maintain <code>Random</code> and
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,81," <code>SecureRandom</code> instances used in data generation. Therefore,"
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,82," to generate a random sequence of values or strings, you should use just"
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,83, <strong>one</strong> <code>RandomDataImpl</code> instance repeatedly.</li>
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,84, <li>
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,85," The ""secure"" methods are *much* slower.  These should be used only when"
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,86," a <a href=""http://www.wikipedia.org/wiki/"
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,87," Cryptographically_secure_pseudo-random_number_generator""> Secure Random"
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,88, Sequence</a> is required.</li>
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,89, <li>
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,90," When a new <code>RandomDataImpl</code> is created, the underlying random"
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,91, number generators are <strong>not</strong> intialized.  The first call to a
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,92," data generation method, or to a <code>reSeed()</code> method instantiates"
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,93," the appropriate generator.  If you do not explicitly seed the generator, it"
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,94, is by default seeded with the current time in milliseconds</li>
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,95, <li>
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,96, The <code>reSeed</code> and <code>reSeedSecure</code> methods delegate
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,97, to the corresponding methods on the underlying <code>Random</code> and
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,98," <code>SecureRandom</code> instances.  Therefore, the contracts of these"
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,99," methods are as defined in the JDK documentation.  In particular,"
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,100, <code>reSeed(long)</code> fully resets the initial state of the non-secure
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,101, random number generator (so that reseeding with a specific value always
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,102, results in the same subsequent random sequence); whereas reSeedSecure(long)
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,103, does <strong>not</strong> reinitialize the secure random number generator
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,104, (so secure sequences started with calls to reseedSecure(long) won't be
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,105, identical).</li></ul>
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,107, @version $Revision: 1.6 $ $Date: 2003/10/16 15:24:31 $
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,109,ublic class RandomDataImpl implements RandomData {
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,111,** underlying random number generator */
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,112,rivate Random rand = null;
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,114,** underlying secure random number generator */
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,115,rivate SecureRandom secRand = null;
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,118, Construct a RandomDataImpl.
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,120,ublic RandomDataImpl() {
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,124, <strong>Algorithm Description:</strong> hex strings are generated
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,125, using a 2-step process. <ol>
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,126, <li>
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,127, len/2+1 binary bytes are generated using the underlying Random</li>
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,128, <li>
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,129, Each binary byte is translated into 2 hex digits</li></ol>
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,130, @param len the desired string length.
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,131, @return the random string.
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,133,ublic String nextHexString(int len) {
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,134,f (len <= 0) {
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,135,"hrow new IllegalArgumentException(""length must be positive"");"
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,138,/Get a random number generator
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,139,andom ran = getRan();
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,141,/Initialize output buffer
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,142,tringBuffer outBuffer = new StringBuffer();
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,144,/Get int(len/2)+1 random bytes
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,145,yte[] randomBytes = new byte[(len / 2) + 1];
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,146,an.nextBytes(randomBytes);
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,148,/Convert each byte to 2 hex digits
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,149,or (int i = 0; i < randomBytes.length; i++) {
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,150,nteger c = new Integer(randomBytes[i]);
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,152,* Add 128 to byte value to make interval 0-255 before
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,153, doing hex conversion.
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,154, This guarantees <= 2 hex digits from toHexString()
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,155, toHexString would otherwise add 2^32 to negative arguments.
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,157,tring hex = Integer.toHexString(c.intValue() + 128);
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,159,/ Make sure we add 2 hex digits for each byte
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,160,f (hex.length() == 1)  {
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,161,"ex = ""0"" + hex;"
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,163,utBuffer.append(hex);
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,165,"eturn outBuffer.toString().substring(0, len);"
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,169, Generate a random int value uniformly distributed between
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,170," <code>lower</code> and <code>upper</code>, inclusive."
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,171, @param lower the lower bound.
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,172, @param upper the upper bound.
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,173, @return the random integer.
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,175,"ublic int nextInt(int lower, int upper) {"
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,176,f (lower >= upper) {
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,177,hrow new IllegalArgumentException
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,178,"""upper bound must be > lower bound"");"
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,180,andom rand = getRan();
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,181,eturn lower + (int) (rand.nextDouble() * (upper - lower + 1));
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,185, Generate a random long value uniformly distributed between
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,186," <code>lower</code> and <code>upper</code>, inclusive."
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,187, @param lower the lower bound.
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,188, @param upper the upper bound.
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,189, @return the random integer.
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,191,"ublic long nextLong(long lower, long upper) {"
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,192,f (lower >= upper) {
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,193,hrow new IllegalArgumentException
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,194,"""upper bound must be > lower bound"");"
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,196,andom rand = getRan();
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,197,eturn lower + (long) (rand.nextDouble() * (upper - lower + 1));
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,201, <strong>Algorithm Description:</strong> hex strings are generated in
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,202, 40-byte segments using a 3-step process. <ol>
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,203, <li>
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,204, 20 random bytes are generated using the underlying
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,205, <code>SecureRandom</code>.</li>
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,206, <li>
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,207, SHA-1 hash is applied to yield a 20-byte binary digest.</li>
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,208, <li>
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,209, Each byte of the binary digest is converted to 2 hex digits</li></ol>
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,210, <p>
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,211, TODO: find external reference or provide justification for the claim
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,212, that this yields a cryptographically secure sequence of hex strings.
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,213, @param len the desired string length.
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,214, @return the random string.
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,216,ublic String nextSecureHexString(int len) {
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,217,f (len <= 0) {
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,218,"hrow new IllegalArgumentException(""length must be positive"");"
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,221,/ Get SecureRandom and setup Digest provider
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,222,ecureRandom secRan = getSecRan();
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,223,essageDigest alg = null;
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,224,ry {
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,225,"lg = MessageDigest.getInstance(""SHA-1"");"
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,226, catch (NoSuchAlgorithmException ex) {
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,227,eturn null; // gulp FIXME? -- this *should* never fail.
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,229,lg.reset();
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,231,/Compute number of iterations required (40 bytes each)
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,232,nt numIter = (len / 40) + 1;
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,234,tringBuffer outBuffer = new StringBuffer();
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,235,or (int iter = 1; iter < numIter + 1; iter++) {
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,236,yte[] randomBytes = new byte[40];
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,237,ecRan.nextBytes(randomBytes);
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,238,lg.update(randomBytes);
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,240,/Compute hash -- will create 20-byte binary hash
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,241,yte hash[] = alg.digest();
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,243,"/Loop over the hash, converting each byte to 2 hex digits"
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,244,or (int i = 0; i < hash.length; i++) {
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,245,nteger c = new Integer(hash[i]);
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,247,* Add 128 to byte value to make interval 0-255
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,248, This guarantees <= 2 hex digits from toHexString()
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,249, toHexString would otherwise add 2^32 to negative
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,250, arguments
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,252,tring hex = Integer.toHexString(c.intValue() + 128);
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,254,/Keep strings uniform length -- guarantees 40 bytes
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,255,f (hex.length() == 1) {
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,256,"ex = ""0"" + hex;"
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,258,utBuffer.append(hex);
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,261,"eturn outBuffer.toString().substring(0, len);"
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,265, Generate a random int value uniformly distributed between
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,266," <code>lower</code> and <code>upper</code>, inclusive.  This algorithm"
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,267, using a secure random number generator for its engine.
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,268, @param lower the lower bound.
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,269, @param upper the upper bound.
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,270, @return the random integer.
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,272,"ublic int nextSecureInt(int lower, int upper) {"
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,273,f (lower >= upper) {
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,274,hrow new IllegalArgumentException
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,275,"""lower bound must be < upper bound"");"
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,277,ecureRandom sec = getSecRan();
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,278,eturn lower + (int) (sec.nextDouble() * (upper - lower + 1));
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,282, Generate a random long value uniformly distributed between
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,283," <code>lower</code> and <code>upper</code>, inclusive.  This algorithm"
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,284, using a secure random number generator for its engine.
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,285, @param lower the lower bound.
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,286, @param upper the upper bound.
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,287, @return the random integer.
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,289,"ublic long nextSecureLong(long lower, long upper) {"
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,290,f (lower >= upper) {
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,291,hrow new IllegalArgumentException
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,292,"""lower bound must be < upper bound"");"
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,294,ecureRandom sec = getSecRan();
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,295,eturn lower + (long) (sec.nextDouble() * (upper - lower + 1));
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,299, <strong>Algorithm Description</strong>:
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,300," Uses simulation of a Poisson process using Uniform deviates, as"
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,301, described
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,302," <a href =""http://dmawww.epfl.ch/benarous/Pmmi/interactive/rng7.htm"">"
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,303, here</a>
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,304, @param mean mean of the Poisson distribution.
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,305, @return the random Poisson value.
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,307,ublic long nextPoisson(double mean) {
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,308,f (mean <= 0) {
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,309,"hrow new IllegalArgumentException(""Poisson mean must be > 0"");"
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,311,ouble p = Math.exp(-mean);
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,312,ong n = 0;
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,313,ouble r = 1.0d;
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,314,andom rand = getRan();
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,315,hile (true) {
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,316,ouble rnd = rand.nextDouble();
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,317, = r * rnd;
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,318,f (r >= p) {
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,319,++;
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,320, else {
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,321,eturn n;
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,327, Generate a random value from a Normal distribution.  This algorithm
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,328, generates random values for the general Normal distribution with the
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,329," given mean, <code>mu</code> and the given standard deviation,"
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,330, <code>sigma</code>.
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,331, @param mu the mean of the distribution.
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,332, @param sigma the standard deviation of the distribution.
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,333, @return the random Normal value.
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,335,"ublic double nextGaussian(double mu, double sigma) {"
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,336,f (sigma <= 0) {
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,337,"hrow new IllegalArgumentException(""Gaussian std dev must be > 0"");"
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,339,andom rand = getRan();
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,340,eturn sigma * rand.nextGaussian() + mu;
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,344, <strong>Algorithm Description</strong>:  Uses the
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,345," <a href=""http://www.jesus.ox.ac.uk/~clifford/a5/chap1/node5.html"">"
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,346, Inversion Method</a> to generate exponential from uniform deviates.
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,347, @param mean the mean of the distribution.
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,348, @return the random Exponential value.
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,350,ublic double nextExponential(double mean)  {
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,351,f (mean < 0.0)  {
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,352,hrow new IllegalArgumentException
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,353,"""Exponential mean must be >= 0"");"
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,355,andom rand = getRan();
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,356,ouble unif = rand.nextDouble();
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,357,hile (unif == 0.0d) {
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,358,nif = rand.nextDouble();
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,360,eturn -mean * Math.log(unif);
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,364, <strong>Algorithm Description</strong>: scales the output of
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,365," Random.nextDouble(), but rejects 0 values (i.e., will generate another"
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,366, random double if Random.nextDouble() returns 0).
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,367, This is necessary to provide a symmetric output interval
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,368, (both endpoints excluded).
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,369, @param lower the lower bound.
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,370, @param upper the upper bound.
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,371, @return the random value.
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,373,"ublic double nextUniform(double lower, double upper) {"
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,374,f (lower >= upper) {
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,375,hrow new IllegalArgumentException
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,376,"""lower bound must be <= upper bound"");"
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,378,andom rand = getRan();
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,380,/ insure nextDouble() isn't 0.0
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,381,ouble u = rand.nextDouble();
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,382,hile(u <= 0.0){
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,383, = rand.nextDouble();
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,386,eturn lower + u * (upper - lower);
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,390, Returns the static Random used to generate random data.
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,391, <p>
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,392, Creates and initializes if null.
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,394, @return the static Random used to generate random data
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,396,rivate Random getRan() {
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,397,f (rand == null) {
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,398,and = new Random();
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,399,and.setSeed(System.currentTimeMillis());
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,401,eturn rand;
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,405, Returns the static SecureRandom used to generate secure random data.
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,406, <p>
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,407, Creates and initializes if null.
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,409, @return the static SecureRandom used to generate secure random data
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,411,rivate SecureRandom getSecRan() {
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,412,f (secRand == null) {
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,413,ecRand = new SecureRandom();
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,414,ecRand.setSeed(System.currentTimeMillis());
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,416,eturn secRand;
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,420, Reseeds the random number generator with the supplied seed.
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,421, <p>
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,422, Will create and initialize if null.
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,424, @param seed the seed value to use
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,426,ublic void reSeed(long seed) {
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,427,f (rand == null) {
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,428,and = new Random();
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,430,and.setSeed(seed);
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,434, Reseeds the secure random number generator with the current time
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,435, in milliseconds.
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,436, <p>
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,437, Will create and initialize if null.
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,439,ublic void reSeedSecure() {
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,440,f (secRand == null) {
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,441,ecRand = new SecureRandom();
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,443,ecRand.setSeed(System.currentTimeMillis());
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,447, Reseeds the secure random number generator with the supplied seed.
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,448, <p>
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,449, Will create and initialize if null.
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,451, @param seed the seed value to use
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,453,ublic void reSeedSecure(long seed) {
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,454,f (secRand == null) {
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,455,ecRand = new SecureRandom();
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,457,ecRand.setSeed(seed);
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,461, Reseeds the random number generator with the current time
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,462, in milliseconds.
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,464,ublic void reSeed() {
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,465,f (rand == null) {
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,466,and = new Random();
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,468,and.setSeed(System.currentTimeMillis());
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,472, Sets the PRNG algorithm for the underlying SecureRandom instance
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,473, using the Security Provider API.  The Security Provider API is defined in
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,474," <a href=""http://java.sun.com/j2se/1.3/docs/guide/security/CryptoSpec.html#AppA"">"
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,475, Java Cryptography Architecture API Specification & Reference.</a>
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,476, <p>
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,477, <strong>USAGE NOTE:</strong> This method carries <i>significant</i>
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,478, overhead and may take several seconds to execute.
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,479, </p>
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,481, @param algorithm the name of the PRNG algorithm
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,482, @param provider the name of the provider
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,483, @throws NoSuchAlgorithmException if the specified algorithm
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,484, is not available
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,485, @throws NoSuchProviderException if the specified provider
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,486, is not installed
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,488,"ublic void setSecureAlgorithm(String algorithm, String provider)"
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,489,"hrows NoSuchAlgorithmException, NoSuchProviderException {"
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,490,"ecRand = SecureRandom.getInstance(algorithm, provider);"
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,494, Uses a 2-cycle permutation shuffle to generate a random permutation.
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,495, The shuffling process is described
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,496, <a href=http://www.maths.abdn.ac.uk/~igc/tch/mx4002/notes/node83.html>
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,497, here</a>.
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,498, @param n the population size.
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,499, @param k the number to choose.
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,500, @return the random permutation.
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,502,"ublic int[] nextPermutation(int n, int k) {"
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,503,f (k > n) {
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,504,hrow new IllegalArgumentException
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,505,"""permutation k exceeds n"");"
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,507,f (k == 0) {
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,508,hrow new IllegalArgumentException
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,509,"""permutation k must be > 0"");"
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,512,nt[] index = getNatural(n);
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,513,"huffle(index, n - k);"
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,514,nt[] result = new int[k];
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,515,or (int i = 0; i < k; i++) {
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,516,esult[i] = index[n - i - 1];
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,519,eturn result;
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,523, Uses a 2-cycle permutation shuffle to generate a random permutation.
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,524, <strong>Algorithm Description</strong>: Uses a 2-cycle permutation
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,525, shuffle to generate a random permutation of <code>c.size()</code> and
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,526, then returns the elements whose indexes correspond to the elements of
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,527, the generated permutation.
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,528," This technique is described, and proven to generate random samples,"
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,529," <a href=""http://www.maths.abdn.ac.uk/~igc/tch/mx4002/notes/node83.html"">"
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,530, here</a>
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,531, @param c Collection to sample from.
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,532, @param k sample size.
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,533, @return the random sample.
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,535,"ublic Object[] nextSample(Collection c, int k) {"
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,536,nt len = c.size();
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,537,f (k > len) {
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,538,hrow new IllegalArgumentException
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,539,"""sample size exceeds collection size"");"
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,541,f (k == 0) {
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,542,hrow new IllegalArgumentException
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,543,"""sample size must be > 0"");"
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,546,bject[] objects = c.toArray();
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,547,"nt[] index = nextPermutation(len, k);"
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,548,bject[] result = new Object[k];
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,549,or (int i = 0; i < k; i++) {
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,550,esult[i] = objects[index[i]];
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,552,eturn result;
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,555,/------------------------Private methods----------------------------------
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,558, Uses a 2-cycle permutation shuffle to randomly re-order the last elements
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,559, of list.
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,561, @param list list to be shuffled
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,562, @param end element past which shuffling begins
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,564,"rivate void shuffle(int[] list, int end) {"
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,565,nt target = 0;
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,566,or (int i = list.length - 1 ; i >= end; i--) {
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,567,f (i == 0) {
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,568,arget = 0;
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,569, else {
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,570,"arget = nextInt(0, i);"
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,572,nt temp = list[target];
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,573,ist[target] = list[i];
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,574,ist[i] = temp;
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,579, Returns an array representing n.
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,581, @param n the natural number to represent
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,582, @return array with entries = elements of n
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,584,rivate int[] getNatural(int n) {
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,585,nt[] natural = new int[n];
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,586,or (int i = 0; i < n; i++) {
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,587,atural[i] = i;
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,589,eturn natural;
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,2," The Apache Software License, Version 1.1"
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,5, reserved.
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,7," Redistribution and use in source and binary forms, with or without"
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,8," modification, are permitted provided that the following conditions"
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,9, are met:
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,11, 1. Redistributions of source code must retain the above copyright
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,12,"    notice, this list of conditions and the following disclaimer."
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,14, 2. Redistributions in binary form must reproduce the above copyright
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,15,"    notice, this list of conditions and the following disclaimer in"
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,16,    the documentation and/or other materials provided with the
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,17,    distribution.
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,19," 3. The end-user documentation included with the redistribution, if"
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,20,"    any, must include the following acknowledgement:"
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,21,"       ""This product includes software developed by the"
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,22,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,23,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,24,    if and wherever such third-party acknowledgements normally appear.
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,26," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,27,"    Foundation"" must not be used to endorse or promote products derived"
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,28,    from this software without prior written permission. For written
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,29,"    permission, please contact apache@apache.org."
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,31," 5. Products derived from this software may not be called ""Apache"""
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,32,"    nor may ""Apache"" appear in their name without prior written"
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,33,    permission of the Apache Software Foundation.
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,38, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,39," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,46, SUCH DAMAGE.
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,49, This software consists of voluntary contributions made by many
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,50, individuals on behalf of the Apache Software Foundation.  For more
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,51," information on the Apache Software Foundation, please see"
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,52, <http://www.apache.org/>.
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,55,ackage org.apache.commons.math.random;
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,56,mport java.io.BufferedReader;
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,57,mport java.io.FileReader;
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,58,mport java.io.File;
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,59,mport java.net.URL;
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,60,mport java.io.IOException;
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,61,mport java.net.MalformedURLException;
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,64, Generates values for use in simulation applications.
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,65, <p>
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,66, How values are generated is determined by the <code>mode</code>
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,67, property.
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,68, <p>
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,69, Supported <code>mode</code> values are: <ul>
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,70, <li> DIGEST_MODE -- uses an empirical distribution </li>
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,71, <li> REPLAY_MODE -- replays data from <code>valuesFile</code></li>
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,72, <li> UNIFORM_MODE -- generates uniformly distributed random values with
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,73,                      mean = <code>mu</code> </li>
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,74, <li> EXPONENTIAL_MODE -- generates exponentially distributed random values
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,75,                         with mean = <code>mu</code></li>
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,76, <li> GAUSSIAN_MODE -- generates Gaussian distributed random values with
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,77,                       mean = <code>mu</code> and
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,78,                       standard deviation = <code>sigma</code></li>
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,79, <li> CONSTANT_MODE -- returns <code>mu</code> every time.</li></ul>
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,81, @version $Revision: 1.5 $ $Date: 2003/10/16 15:24:31 $
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,84,ublic class ValueServer {
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,85,** mode determines how values are generated */
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,86,rivate int mode = 5;
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,88,** URI to raw data values  */
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,89,rivate URL valuesFileURL = null;
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,91,** Mean for use with non-data-driven modes */
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,92,rivate double mu = 0.0;
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,94,** Standard deviation for use with GAUSSIAN_MODE */
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,95,rivate double sigma = 0.0;
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,97,** Empirical probability distribution for use with DIGEST_MODE */
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,98,rivate EmpiricalDistribution empiricalDistribution = null;
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,100,** file pointer for REPLAY_MODE */
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,101,rivate BufferedReader filePointer = null;
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,103,** RandomDataImpl to use for random data generation */
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,104,rivate RandomDataImpl randomData = new RandomDataImpl();
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,106,/ Data generation modes ======================================
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,108,** Use empirical distribution  */
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,109,ublic static final int DIGEST_MODE = 0;
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,111,** Replay data from valuesFilePath */
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,112,ublic static final int REPLAY_MODE = 1;
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,114,** Uniform random deviates with mean = mu */
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,115,ublic static final int UNIFORM_MODE = 2;
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,117,** Exponential random deviates with mean = mu */
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,118,ublic static final int EXPONENTIAL_MODE = 3;
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,120,"** Gaussian random deviates with mean = mu, std dev = sigma */"
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,121,ublic static final int GAUSSIAN_MODE = 4;
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,123,** Always return mu */
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,124,ublic static final int CONSTANT_MODE = 5;
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,126,** Creates new ValueServer */
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,127,ublic ValueServer() {
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,131," Returns the next generated value, generated according"
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,132, to the mode value (see MODE constants).
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,134, @return generated value
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,135, @throws IOException in REPLAY_MODE if a file I/O error occurs
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,137,ublic double getNext() throws IOException {
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,138,witch (mode) {
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,139,ase DIGEST_MODE: return getNextDigest();
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,140,ase REPLAY_MODE: return getNextReplay();
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,141,ase UNIFORM_MODE: return getNextUniform();
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,142,ase EXPONENTIAL_MODE: return getNextExponential();
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,143,ase GAUSSIAN_MODE: return getNextGaussian();
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,144,ase CONSTANT_MODE: return mu;
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,145,efault: throw new IllegalStateException
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,146,"""Bad mode: "" + mode);"
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,151, Fills the input array with values generated using getNext() repeatedly.
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,153, @param values array to be filled
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,154, @throws IOException in REPLAY_MODE if a file I/O error occurs
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,156,ublic void fill(double[] values) throws IOException {
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,157,or (int i = 0; i < values.length; i++) {
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,158,alues[i] = getNext();
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,163, Returns an array of length <code>length</code> with values generated
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,164, using getNext() repeatedly.
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,166, @param length length of output array
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,167, @return array of generated values
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,168, @throws IOException in REPLAY_MODE if a file I/O error occurs
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,170,ublic double[] fill(int length) throws IOException {
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,171,ouble[] out = new double[length];
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,172,or (int i = 0; i < length; i++) {
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,173,ut[i] = getNext();
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,175,eturn out;
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,179, Computes the empirical distribution using values from the file
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,180," in <code>valuesFilePath</code>, using the default number of bins."
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,181, <p>
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,182, <code>valuesFileURL</code> must exist and be
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,183, readable by *this at runtime.
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,184, <p>
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,185, This method must be called before using <code>getNext()</code>
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,186, with <code>mode = DISGEST_MODE</code>
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,188, @throws IOException if an I/O error occurs reading the input file
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,190,ublic void computeDistribution() throws IOException {
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,191,mpiricalDistribution = new EmpiricalDistributionImpl();
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,192,mpiricalDistribution.load(valuesFileURL.getFile());
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,196, Computes the empirical distribution using values from the file
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,197, in <code>valuesFilePath</code> and <code>binCount</code> bins.
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,198, <p>
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,199, <code>valuesFileURL</code> must exist and be
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,200, readable by *this at runtime.
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,201, <p>
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,202, This method must be called before using <code>getNext()</code>
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,203, with <code>mode = DISGEST_MODE</code>
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,205, @param binCount the number of bins used in computing the empirical
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,206, distribution
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,207, @throws IOException if an error occurs reading the input file
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,209,ublic void computeDistribution(int binCount)
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,210,hrows IOException {
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,211,mpiricalDistribution = new EmpiricalDistributionImpl(binCount);
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,212,mpiricalDistribution.load(valuesFileURL.getFile());
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,213,u = empiricalDistribution.getSampleStats().getMean();
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,214,igma = empiricalDistribution.getSampleStats().getStandardDeviation();
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,217,** Getter for property mode.
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,218, @return Value of property mode.
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,220,ublic int getMode() {
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,221,eturn mode;
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,224,** Setter for property mode.
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,225, @param mode New value of property mode.
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,227,ublic void setMode(int mode) {
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,228,his.mode = mode;
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,231,** Getter for property valuesFilePath.
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,232, @return Value of property valuesFilePath.
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,234,ublic String getValuesFileURL() {
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,235,eturn valuesFileURL.toString();
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,238,** Setter for property valuesFilePath.
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,239, @param url New value of property valuesFilePath.
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,240, @throws MalformedURLException if url is not well formed
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,242,ublic void setValuesFileURL(String url) throws MalformedURLException {
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,243,his.valuesFileURL = new URL(url);
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,246,** Getter for property empiricalDistribution.
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,247, @return Value of property empiricalDistribution.
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,249,ublic EmpiricalDistribution getEmpiricalDistribution() {
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,250,eturn empiricalDistribution;
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,254, Opens <code>valuesFilePath</code> to use in REPLAY_MODE.
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,256, @throws IOException if an error occurs opening the file
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,258,ublic void openReplayFile() throws IOException {
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,259,ilePointer = new BufferedReader(new FileReader
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,260,new File(valuesFileURL.getFile())));
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,264, Closes <code>valuesFilePath</code> after use in REPLAY_MODE.
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,266, @throws IOException if an error occurs closing the file
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,268,ublic void closeReplayFile() throws IOException {
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,269,f (filePointer != null) {
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,270,ilePointer.close();
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,271,ilePointer = null;
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,275,** Getter for property mu.
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,276, @return Value of property mu.
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,278,ublic double getMu() {
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,279,eturn mu;
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,282,** Setter for property mu.
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,283, @param mu New value of property mu.
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,285,ublic void setMu(double mu) {
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,286,his.mu = mu;
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,289,** Getter for property sigma.
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,290, @return Value of property sigma.
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,292,ublic double getSigma() {
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,293,eturn sigma;
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,296,** Setter for property sigma.
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,297, @param sigma New value of property sigma.
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,299,ublic void setSigma(double sigma) {
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,300,his.sigma = sigma;
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,303,/------------- private methods ---------------------------------
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,306, Gets a random value in DIGEST_MODE.
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,307, <p>
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,308, <strong>Preconditions</strong>: <ul>
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,309," <li>Before this method is called, <code>computeDistribution()</code>"
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,310, must have completed successfully; otherwise an
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,311, <code>IllegalStateException</code> will be thrown</li></ul>
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,313, @return next random value from the empirical distribution digest
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,315,rivate double getNextDigest() {
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,316,f ((empiricalDistribution == null) ||
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,317,empiricalDistribution.getBinStats().size() == 0)) {
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,318,"hrow new IllegalStateException(""Digest not initialized"");"
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,320,eturn empiricalDistribution.getNextValue();
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,324, Gets next sequential value from the <code>valuesFilePath</code>
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,325, opened by <code>openReplayFile()</code>.
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,326, <p>
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,327, Throws an IOException if <code>filePointer</code> is null or read fails.
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,328, Will wrap around to BOF is EOF is encountered.
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,329, <p>
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,330, <strong>Preconditions</strong>: <ul>
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,331, <li> openReplayfile() must have completed successfully before
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,332, invoking this method; otherwise an <code>IlleglaStateException</code>
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,333, will be thrown</li></ul>
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,335, @return next value from the replay file
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,336, @throws IOException if there is a problem reading from the file
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,338,rivate double getNextReplay() throws IOException {
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,339,tring str = null;
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,340,f (filePointer == null) {
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,341,"hrow new IllegalStateException(""replay file not open"");"
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,343,f ((str = filePointer.readLine()) == null) {
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,344,loseReplayFile();
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,345,penReplayFile();
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,346,tr = filePointer.readLine();
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,348,eturn new Double(str).doubleValue();
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,352, Gets a uniformly distributed random value with mean = mu.
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,354, @return random uniform value
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,356,rivate double getNextUniform() {
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,357,"eturn randomData.nextUniform(0, 2 * mu);"
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,361, Gets an exponentially distributed random value with mean = mu.
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,363, @return random exponential value
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,365,rivate double getNextExponential() {
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,366,eturn randomData.nextExponential(mu);
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,370, Gets a Gaussian distributed random value with mean = mu
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,371, and standard deviation = sigma.
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,373, @return random Gaussian value
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,375,rivate double getNextGaussian() {
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,376,"eturn randomData.nextGaussian(mu, sigma);"
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,2," The Apache Software License, Version 1.1"
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,5, reserved.
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,7," Redistribution and use in source and binary forms, with or without"
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,8," modification, are permitted provided that the following conditions"
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,9, are met:
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,11, 1. Redistributions of source code must retain the above copyright
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,12,"    notice, this list of conditions and the following disclaimer."
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,14, 2. Redistributions in binary form must reproduce the above copyright
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,15,"    notice, this list of conditions and the following disclaimer in"
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,16,    the documentation and/or other materials provided with the
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,17,    distribution.
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,19," 3. The end-user documentation included with the redistribution, if"
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,20,"    any, must include the following acknowledgement:"
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,21,"       ""This product includes software developed by the"
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,22,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,23,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,24,    if and wherever such third-party acknowledgements normally appear.
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,26," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,27,"    Foundation"" must not be used to endorse or promote products derived"
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,28,    from this software without prior written permission. For written
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,29,"    permission, please contact apache@apache.org."
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,31," 5. Products derived from this software may not be called ""Apache"""
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,32,"    nor may ""Apache"" appear in their name without prior written"
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,33,    permission of the Apache Software Foundation.
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,38, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,39," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,46, SUCH DAMAGE.
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,49, This software consists of voluntary contributions made by many
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,50, individuals on behalf of the Apache Software Foundation.  For more
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,51," information on the Apache Software Foundation, please see"
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,52, <http://www.apache.org/>.
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,54,ackage org.apache.commons.math.special;
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,56,mport org.apache.commons.math.MathException;
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,57,mport org.apache.commons.math.util.ContinuedFraction;
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,60, This is a utility class that provides computation methods related to the
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,61, Beta family of functions.
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,63, @version $Revision: 1.10 $ $Date: 2003/10/16 15:24:28 $
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,65,ublic class Beta {
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,66,** Maximum allowed numerical error. */
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,67,rivate static final double DEFAULT_EPSILON = 10e-9;
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,70, Default constructor.  Prohibit instantiation.
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,72,rivate Beta() {
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,73,uper();
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,77," Returns the regularized beta function I(x, a, b)."
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,79, @param x ???
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,80, @param a ???
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,81, @param b ???
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,82," @return the regularized beta function I(x, a, b)"
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,83, @throws MathException if the algorithm fails to converge.
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,85,"ublic static double regularizedBeta(double x, double a, double b)"
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,86,hrows MathException
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,88,"eturn regularizedBeta(x, a, b, DEFAULT_EPSILON, Integer.MAX_VALUE);"
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,92," Returns the regularized beta function I(x, a, b)."
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,94, @param x ???
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,95, @param a ???
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,96, @param b ???
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,97, @param epsilon When the absolute value of the nth item in the
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,98,                series is less than epsilon the approximation ceases
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,99,                to calculate further elements in the series.
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,100," @return the regularized beta function I(x, a, b)"
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,101, @throws MathException if the algorithm fails to converge.
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,103,"ublic static double regularizedBeta(double x, double a, double b,"
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,104,ouble epsilon) throws MathException
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,106,"eturn regularizedBeta(x, a, b, epsilon, Integer.MAX_VALUE);"
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,110," Returns the regularized beta function I(x, a, b)."
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,112, @param x ???
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,113, @param a ???
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,114, @param b ???
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,115," @param maxIterations Maximum number of ""iterations"" to complete."
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,116," @return the regularized beta function I(x, a, b)"
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,117, @throws MathException if the algorithm fails to converge.
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,119,"ublic static double regularizedBeta(double x, double a, double b,"
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,120,nt maxIterations) throws MathException
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,122,"eturn regularizedBeta(x, a, b, DEFAULT_EPSILON, maxIterations);"
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,126," Returns the regularized beta function I(x, a, b)."
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,128, The implementation of this method is based on:
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,129, <ul>
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,130, <li>
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,131," <a href=""http://mathworld.wolfram.com/RegularizedBetaFunction.html"">"
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,132, Regularized Beta Function</a>.</li>
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,133, <li>
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,134," <a href=""http://functions.wolfram.com/06.21.10.0001.01"">"
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,135, Regularized Beta Function</a>.</li>
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,136, </ul>
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,138, @param x ???
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,139, @param a ???
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,140, @param b ???
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,141, @param epsilon When the absolute value of the nth item in the
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,142,                series is less than epsilon the approximation ceases
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,143,                to calculate further elements in the series.
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,144," @param maxIterations Maximum number of ""iterations"" to complete."
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,145," @return the regularized beta function I(x, a, b)"
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,146, @throws MathException if the algorithm fails to converge.
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,148,"ublic static double regularizedBeta(double x, final double a,"
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,149,"inal double b, double epsilon, int maxIterations) throws MathException"
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,151,ouble ret;
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,153,f (Double.isNaN(x) || Double.isNaN(a) || Double.isNaN(b) || (x < 0) ||
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,154,x > 1) || (a <= 0.0) || (b <= 0.0)) {
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,155,et = Double.NaN;
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,156, else {
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,157,ontinuedFraction fraction = new ContinuedFraction() {
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,158,"rotected double getB(int n, double x) {"
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,159,ouble ret;
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,160,ouble m;
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,161,witch (n) {
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,162,ase 1 :
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,163,et = 1.0;
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,164,reak;
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,165,efault :
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,166,f (n % 2 == 0) { // even
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,167, = (n - 2.0) / 2.0;
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,168,et = -((a + m) * (a + b + m) * x) /
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,169,(a + (2 * m)) * (a + (2 * m) + 1.0));
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,170, else {
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,171, = (n - 1.0) / 2.0;
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,172,et = (m * (b - m) * x) /
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,173,(a + (2 * m) - 1) * (a + (2 * m)));
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,175,reak;
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,177,eturn ret;
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,180,"rotected double getA(int n, double x) {"
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,181,ouble ret;
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,182,witch (n) {
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,183,ase 0 :
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,184,et = 0.0;
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,185,reak;
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,186,efault :
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,187,et = 1.0;
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,188,reak;
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,190,eturn ret;
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,193,et = Math.exp((a * Math.log(x)) + (b * Math.log(1.0 - x)) -
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,194,"ath.log(a) - logBeta(a, b, epsilon, maxIterations)) *"
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,195,"raction.evaluate(x, epsilon, maxIterations);"
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,198,eturn ret;
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,202," Returns the natural logarithm of the beta function B(a, b)."
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,204, @param a ???
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,205, @param b ???
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,206," @return log(B(a, b))"
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,208,"ublic static double logBeta(double a, double b) {"
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,209,"eturn logBeta(a, b, DEFAULT_EPSILON, Integer.MAX_VALUE);"
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,213," Returns the natural logarithm of the beta function B(a, b)."
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,215, The implementation of this method is based on:
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,216, <ul>
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,217," <li><a href=""http://mathworld.wolfram.com/BetaFunction.html"">"
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,218," Beta Function</a>, equation (1).</li>"
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,219, </ul>
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,221, @param a ???
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,222, @param b ???
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,223, @param epsilon When the absolute value of the nth item in the
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,224,                series is less than epsilon the approximation ceases
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,225,                to calculate further elements in the series.
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,226," @param maxIterations Maximum number of ""iterations"" to complete."
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,227," @return log(B(a, b))"
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,229,"ublic static double logBeta(double a, double b, double epsilon,"
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,230,nt maxIterations) {
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,232,ouble ret;
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,234,f (Double.isNaN(a) || Double.isNaN(b) || (a <= 0.0) || (b <= 0.0)) {
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,235,et = Double.NaN;
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,236, else {
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,237,et = Gamma.logGamma(a) + Gamma.logGamma(b) -
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,238,amma.logGamma(a + b);
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,241,eturn ret;
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,2," The Apache Software License, Version 1.1"
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,5, reserved.
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,7," Redistribution and use in source and binary forms, with or without"
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,8," modification, are permitted provided that the following conditions"
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,9, are met:
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,11, 1. Redistributions of source code must retain the above copyright
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,12,"    notice, this list of conditions and the following disclaimer."
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,14, 2. Redistributions in binary form must reproduce the above copyright
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,15,"    notice, this list of conditions and the following disclaimer in"
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,16,    the documentation and/or other materials provided with the
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,17,    distribution.
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,19," 3. The end-user documentation included with the redistribution, if"
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,20,"    any, must include the following acknowledgement:"
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,21,"       ""This product includes software developed by the"
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,22,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,23,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,24,    if and wherever such third-party acknowledgements normally appear.
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,26," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,27,"    Foundation"" must not be used to endorse or promote products derived"
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,28,    from this software without prior written permission. For written
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,29,"    permission, please contact apache@apache.org."
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,31," 5. Products derived from this software may not be called ""Apache"""
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,32,"    nor may ""Apache"" appear in their name without prior written"
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,33,    permission of the Apache Software Foundation.
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,38, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,39," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,46, SUCH DAMAGE.
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,49, This software consists of voluntary contributions made by many
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,50, individuals on behalf of the Apache Software Foundation.  For more
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,51," information on the Apache Software Foundation, please see"
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,52, <http://www.apache.org/>.
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,54,ackage org.apache.commons.math.special;
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,56,mport org.apache.commons.math.ConvergenceException;
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,57,mport org.apache.commons.math.MathException;
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,60, This is a utility class that provides computation methods related to the
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,61, Gamma family of functions.
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,63, @version $Revision: 1.12 $ $Date: 2003/10/16 15:24:28 $
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,65,ublic class Gamma {
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,66,** Maximum allowed numerical error. */
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,67,rivate static final double DEFAULT_EPSILON = 10e-9;
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,69,** Lanczos coefficients */
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,70,rivate static double[] lanczos =
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,72,".99999999999999709182,"
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,73,"7.156235665862923517,"
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,74,"59.597960355475491248,"
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,75,"4.136097974741747174,"
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,76,"0.49191381609762019978,"
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,77,"33994649984811888699e-4,"
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,78,"46523628927048575665e-4,"
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,79,".98374475304879564677e-4,"
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,80,"15808870322491248884e-3,"
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,81,".21026444172410488319e-3,"
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,82,"21743961811521264320e-3,"
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,83,".16431810653676389022e-3,"
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,84,"84418223983852743293e-4,"
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,85,".26190838401581408670e-4,"
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,86,"36899182659531622704e-5,"
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,91, Default constructor.  Prohibit instantiation.
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,93,rivate Gamma() {
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,94,uper();
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,98," Returns the regularized gamma function P(a, x)."
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,100, @param a ???
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,101, @param x ???
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,102," @return the regularized gamma function P(a, x)"
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,103, @throws MathException if the algorithm fails to converge.
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,105,"ublic static double regularizedGammaP(double a, double x)"
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,106,hrows MathException
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,108,"eturn regularizedGammaP(a, x, DEFAULT_EPSILON, Integer.MAX_VALUE);"
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,112," Returns the regularized gamma function P(a, x)."
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,114, The implementation of this method is based on:
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,115, <ul>
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,116, <li>
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,117," <a href=""http://mathworld.wolfram.com/RegularizedGammaFunction.html"">"
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,118," Regularized Gamma Function</a>, equation (1).</li>"
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,119, <li>
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,120," <a href=""http://mathworld.wolfram.com/IncompleteGammaFunction.html"">"
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,121," Incomplete Gamma Function</a>, equation (4).</li>"
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,122, <li>
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,123," <a href=""http://mathworld.wolfram.com/ConfluentHypergeometricFunctionoftheFirstKind.html"">"
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,124," Confluent Hypergeometric Function of the First Kind</a>, equation (1)."
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,125, </li>
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,126, </ul>
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,128, @param a ???
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,129, @param x ???
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,130, @param epsilon When the absolute value of the nth item in the
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,131,                series is less than epsilon the approximation ceases
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,132,                to calculate further elements in the series.
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,133," @param maxIterations Maximum number of ""iterations"" to complete."
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,134," @return the regularized gamma function P(a, x)"
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,135, @throws MathException if the algorithm fails to converge.
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,137,"ublic static double regularizedGammaP(double a,"
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,138,"ouble x,"
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,139,"ouble epsilon,"
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,140,nt maxIterations)
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,141,hrows MathException
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,143,ouble ret;
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,145,f (Double.isNaN(a) || Double.isNaN(x) || (a <= 0.0) || (x < 0.0)) {
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,146,et = Double.NaN;
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,147, else if (x == 0.0) {
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,148,et = 0.0;
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,149, else {
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,150,/ calculate series
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,151,ouble n = 0.0; // current element index
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,152,ouble an = 1.0 / a; // n-th element in the series
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,153,ouble sum = an; // partial sum
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,154,hile (Math.abs(an) > epsilon && n < maxIterations) {
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,155,/ compute next element in the series
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,156, = n + 1.0;
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,157,n = an * (x / (a + n));
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,159,/ update partial sum
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,160,um = sum + an;
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,162,f (n >= maxIterations) {
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,163,hrow new ConvergenceException(
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,164,"maximum number of iterations reached"");"
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,165, else {
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,166,et = Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * sum;
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,170,eturn ret;
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,174, Returns the natural logarithm of the gamma function &#915;(x).
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,176, The implementation of this method is based on:
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,177, <ul>
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,178," <li><a href=""http://mathworld.wolfram.com/GammaFunction.html"">"
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,179," Gamma Function</a>, equation (28).</li>"
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,180," <li><a href=""http://mathworld.wolfram.com/LanczosApproximation.html"">"
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,181," Lanczos Approximation</a>, equations (1) through (5).</li>"
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,182," <li><a href=""http://my.fit.edu/~gabdo/gamma.txt"">Paul Godfrey, A note on"
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,183, the computation of the convergent Lanczos complex Gamma approximation
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,184, </a></li>
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,185, </ul>
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,187, @param x ???
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,188, @return log(&#915;(x))
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,190,ublic static double logGamma(double x) {
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,191,ouble ret;
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,193,f (Double.isNaN(x) || (x <= 0.0)) {
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,194,et = Double.NaN;
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,195, else {
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,196,ouble g = 607.0 / 128.0;
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,198,ouble sum = 0.0;
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,199,or (int i = 1; i < lanczos.length; ++i) {
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,200,um = sum + (lanczos[i] / (x + i));
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,202,um = sum + lanczos[0];
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,204,ouble tmp = x + g + .5;
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,205,et = ((x + .5) * Math.log(tmp)) - tmp +
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,206,.5 * Math.log(2.0 * Math.PI)) + Math.log(sum) - Math.log(x);
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,209,eturn ret;
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,2," The Apache Software License, Version 1.1"
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,5, reserved.
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,7," Redistribution and use in source and binary forms, with or without"
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,8," modification, are permitted provided that the following conditions"
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,9, are met:
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,11, 1. Redistributions of source code must retain the above copyright
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,12,"    notice, this list of conditions and the following disclaimer."
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,14, 2. Redistributions in binary form must reproduce the above copyright
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,15,"    notice, this list of conditions and the following disclaimer in"
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,16,    the documentation and/or other materials provided with the
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,17,    distribution.
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,19," 3. The end-user documentation included with the redistribution, if"
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,20,"    any, must include the following acknowledgement:"
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,21,"       ""This product includes software developed by the"
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,22,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,23,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,24,    if and wherever such third-party acknowledgements normally appear.
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,26," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,27,"    Foundation"" must not be used to endorse or promote products derived"
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,28,    from this software without prior written permission. For written
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,29,"    permission, please contact apache@apache.org."
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,31," 5. Products derived from this software may not be called ""Apache"""
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,32,"    nor may ""Apache"" appear in their name without prior written"
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,33,    permission of the Apache Software Foundation.
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,38, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,39," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,46, SUCH DAMAGE.
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,49, This software consists of voluntary contributions made by many
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,50, individuals on behalf of the Apache Software Foundation.  For more
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,51," information on the Apache Software Foundation, please see"
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,52, <http://www.apache.org/>.
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,54,ackage org.apache.commons.math.stat;
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,56,mport java.util.Arrays;
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,58,mport org.apache.commons.math.stat.univariate.rank.Percentile;
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,61, Provides univariate measures for an array of doubles.
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,62, @version $Revision: 1.13 $ $Date: 2003/10/16 15:24:30 $
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,64,ublic abstract class AbstractStoreUnivariate
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,65,xtends AbstractUnivariate
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,66,mplements StoreUnivariate {
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,68,** Percentile */
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,69,rotected Percentile percentile = new Percentile(50);
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,72, Create an AbstractStoreUnivariate
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,74,ublic AbstractStoreUnivariate() {
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,75,uper();
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,79, Create an AbstractStoreUnivariate with a specific Window
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,80, @param window WindowSIze for stat calculation
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,82,ublic AbstractStoreUnivariate(int window) {
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,83,uper(window);
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,87, @see org.apache.commons.math.stat.StoreUnivariate#getPercentile(double)
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,89,ublic double getPercentile(double p) {
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,90,ercentile.setPercentile(p);
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,91,eturn apply(percentile);
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,95, @see org.apache.commons.math.stat.StoreUnivariate#getSortedValues()
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,97,ublic double[] getSortedValues() {
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,98,ouble[] sort = getValues();
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,99,rrays.sort(sort);
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,100,eturn sort;
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,104, @see org.apache.commons.math.stat.Univariate#addValue(double)
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,106,ublic abstract void addValue(double value);
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,109, @see org.apache.commons.math.stat.StoreUnivariate#getValues()
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,111,ublic abstract double[] getValues();
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,115, @see org.apache.commons.math.stat.StoreUnivariate#getElement(int)
False,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/stat/AbstractStoreUnivariate.java,117,ublic abstract double getElement(int index);
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,2," The Apache Software License, Version 1.1"
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,5, reserved.
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,7," Redistribution and use in source and binary forms, with or without"
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,8," modification, are permitted provided that the following conditions"
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,9, are met:
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,11, 1. Redistributions of source code must retain the above copyright
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,12,"    notice, this list of conditions and the following disclaimer."
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,14, 2. Redistributions in binary form must reproduce the above copyright
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,15,"    notice, this list of conditions and the following disclaimer in"
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,16,    the documentation and/or other materials provided with the
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,17,    distribution.
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,19," 3. The end-user documentation included with the redistribution, if"
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,20,"    any, must include the following acknowledgement:"
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,21,"       ""This product includes software developed by the"
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,22,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,23,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,24,    if and wherever such third-party acknowledgements normally appear.
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,26," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,27,"    Foundation"" must not be used to endorse or promote products derived"
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,28,    from this software without prior written permission. For written
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,29,"    permission, please contact apache@apache.org."
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,31," 5. Products derived from this software may not be called ""Apache"""
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,32,"    nor may ""Apache"" appear in their name without prior written"
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,33,    permission of the Apache Software Foundation.
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,38, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,39," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,46, SUCH DAMAGE.
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,49, This software consists of voluntary contributions made by many
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,50, individuals on behalf of the Apache Software Foundation.  For more
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,51," information on the Apache Software Foundation, please see"
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,52, <http://www.apache.org/>.
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,54,ackage org.apache.commons.math.stat;
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,56,mport org.apache.commons.math.stat.univariate.UnivariateStatistic;
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,57,mport org.apache.commons.math.stat.univariate.moment.FourthMoment;
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,58,mport org.apache.commons.math.stat.univariate.moment.GeometricMean;
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,59,mport org.apache.commons.math.stat.univariate.moment.Kurtosis;
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,60,mport org.apache.commons.math.stat.univariate.moment.Mean;
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,61,mport org.apache.commons.math.stat.univariate.moment.Skewness;
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,62,mport org.apache.commons.math.stat.univariate.moment.Variance;
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,63,mport org.apache.commons.math.stat.univariate.rank.Max;
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,64,mport org.apache.commons.math.stat.univariate.rank.Min;
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,65,mport org.apache.commons.math.stat.univariate.summary.Sum;
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,66,mport org.apache.commons.math.stat.univariate.summary.SumOfLogs;
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,67,mport org.apache.commons.math.stat.univariate.summary.SumOfSquares;
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,70, Provides univariate measures for an array of doubles.
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,71, @version $Revision: 1.6 $ $Date: 2003/10/16 15:24:30 $
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,73,ublic abstract class AbstractUnivariate implements Univariate {
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,75,** hold the window size **/
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,76,rotected int windowSize = Univariate.INFINITE_WINDOW;
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,78,** count of values that have been added */
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,79,rotected int n = 0;
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,81,"** FourthMoment is used in calculating mean, variance,skew and kurtosis */"
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,82,rotected FourthMoment moment = null;
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,84,** sum of values that have been added */
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,85,rotected Sum sum = null;
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,87,** sum of the square of each value that has been added */
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,88,rotected SumOfSquares sumsq = null;
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,90,** min of values that have been added */
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,91,rotected Min min = null;
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,93,** max of values that have been added */
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,94,rotected Max max = null;
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,96,** sumLog of values that have been added */
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,97,rotected SumOfLogs sumLog = null;
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,99,** geoMean of values that have been added */
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,100,rotected GeometricMean geoMean = null;
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,102,** mean of values that have been added */
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,103,rotected Mean mean = null;
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,105,** variance of values that have been added */
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,106,rotected Variance variance = null;
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,108,** skewness of values that have been added */
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,109,rotected Skewness skewness = null;
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,111,** kurtosis of values that have been added */
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,112,rotected Kurtosis kurtosis = null;
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,115, Construct an AbstractUnivariate
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,117,ublic AbstractUnivariate() {
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,118,uper();
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,120,um = new Sum();
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,121,umsq = new SumOfSquares();
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,122,in = new Min();
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,123,ax = new Max();
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,124,umLog = new SumOfLogs();
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,125,eoMean = new GeometricMean();
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,127,oment = new FourthMoment();
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,128,ean = new Mean(moment);
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,129,ariance = new Variance(moment);
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,130,kewness = new Skewness(moment);
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,131,urtosis = new Kurtosis(moment);
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,135, Construct an AbstractUnivariate with a window
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,136, @param window The Window Size
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,138,ublic AbstractUnivariate(int window) {
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,139,his();
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,140,etWindowSize(window);
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,144, Apply the given statistic to this univariate collection.
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,145, @param stat the statistic to apply
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,146, @return the computed value of the statistic.
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,148,ublic abstract double apply(UnivariateStatistic stat);
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,152," If windowSize is set to Infinite,"
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,153, statistics are calculated using the following
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,154," <a href=""http://www.spss.com/tech/stat/Algorithms/11.5/descriptives.pdf"">"
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,155, recursive strategy
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,156, </a>.
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,157, @see org.apache.commons.math.stat.Univariate#addValue(double)
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,159,ublic abstract void addValue(double value);
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,162, @see org.apache.commons.math.stat.Univariate#getN()
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,164,ublic int getN() {
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,165,eturn n;
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,169, @see org.apache.commons.math.stat.Univariate#getSum()
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,171,ublic double getSum() {
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,172,eturn apply(sum);
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,176, @see org.apache.commons.math.stat.Univariate#getSumsq()
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,178,ublic double getSumsq() {
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,179,eturn apply(sumsq);
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,183, @see org.apache.commons.math.stat.Univariate#getMean()
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,185,ublic double getMean() {
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,186,eturn apply(mean);
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,190, Returns the standard deviation for this collection of values
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,191, @see org.apache.commons.math.stat.Univariate#getStandardDeviation()
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,193,ublic double getStandardDeviation() {
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,194,ouble stdDev = Double.NaN;
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,195,f (getN() > 0) {
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,196,f (getN() > 1) {
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,197,tdDev = Math.sqrt(getVariance());
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,198, else {
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,199,tdDev = 0.0;
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,202,eturn (stdDev);
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,206, Returns the variance of the values that have been added via West's
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,207, algorithm as described by
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,208," <a href=""http://doi.acm.org/10.1145/359146.359152"">Chan, T. F. and"
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,209," J. G. Lewis 1979, <i>Communications of the ACM</i>,"
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,210," vol. 22 no. 9, pp. 526-531.</a>."
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,212, @return The variance of a set of values.
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,213,         Double.NaN is returned for an empty
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,214,         set of values and 0.0 is returned for
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,215,         a &lt;= 1 value set.
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,217,ublic double getVariance() {
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,218,eturn apply(variance);
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,222, Returns the skewness of the values that have been added as described by
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,223," <a href=""http://mathworld.wolfram.com/k-Statistic.html"">"
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,224, Equation (6) for k-Statistics</a>.
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,225, @return The skew of a set of values.  Double.NaN is returned for
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,226,         an empty set of values and 0.0 is returned for a
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,227,         &lt;= 2 value set.
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,229,ublic double getSkewness() {
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,230,eturn apply(skewness);
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,234, Returns the kurtosis of the values that have been added as described by
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,235," <a href=""http://mathworld.wolfram.com/k-Statistic.html"">"
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,236, Equation (7) for k-Statistics</a>.
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,238, @return The kurtosis of a set of values.  Double.NaN is returned for
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,239,         an empty set of values and 0.0 is returned for a &lt;= 3
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,240,         value set.
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,242,ublic double getKurtosis() {
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,243,eturn apply(kurtosis);
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,247, @see org.apache.commons.math.stat.StoreUnivariate#getKurtosisClass()
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,249,ublic int getKurtosisClass() {
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,250,nt kClass = Univariate.MESOKURTIC;
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,252,ouble kurtosis = getKurtosis();
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,253,f (kurtosis > 0) {
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,254,Class = Univariate.LEPTOKURTIC;
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,255, else if (kurtosis < 0) {
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,256,Class = Univariate.PLATYKURTIC;
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,258,eturn (kClass);
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,262, @see org.apache.commons.math.stat.Univariate#getMax()
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,264,ublic double getMax() {
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,265,eturn apply(max);
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,269, @see org.apache.commons.math.stat.Univariate#getMin()
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,271,ublic double getMin() {
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,272,eturn apply(min);
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,276, @see org.apache.commons.math.stat.Univariate#getGeometricMean()
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,278,ublic double getGeometricMean() {
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,279,eturn apply(geoMean);
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,283, Generates a text report displaying
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,284, univariate statistics from values that
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,285, have been added.
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,286, @return String with line feeds displaying statistics
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,288,ublic String toString() {
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,289,tringBuffer outBuffer = new StringBuffer();
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,290,"utBuffer.append(""UnivariateImpl:\n"");"
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,291,"utBuffer.append(""n: "" + n + ""\n"");"
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,292,"utBuffer.append(""min: "" + min + ""\n"");"
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,293,"utBuffer.append(""max: "" + max + ""\n"");"
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,294,"utBuffer.append(""mean: "" + getMean() + ""\n"");"
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,295,"utBuffer.append(""std dev: "" + getStandardDeviation() + ""\n"");"
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,296,"utBuffer.append(""skewness: "" + getSkewness() + ""\n"");"
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,297,"utBuffer.append(""kurtosis: "" + getKurtosis() + ""\n"");"
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,298,eturn outBuffer.toString();
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,302, @see org.apache.commons.math.stat.Univariate#clear()
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,304,ublic void clear() {
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,305,his.n = 0;
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,306,in.clear();
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,307,ax.clear();
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,308,um.clear();
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,309,umLog.clear();
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,310,umsq.clear();
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,311,eoMean.clear();
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,313,oment.clear();
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,314,ean.clear();
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,315,ariance.clear();
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,316,kewness.clear();
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,317,urtosis.clear();
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,321, @see org.apache.commons.math.stat.Univariate#getWindowSize()
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,323,ublic int getWindowSize() {
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,324,eturn windowSize;
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,328, @see org.apache.commons.math.stat.Univariate#setWindowSize(int)
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,330,ublic void setWindowSize(int windowSize) {
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,331,lear();
False,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,src/java/org/apache/commons/math/stat/AbstractUnivariate.java,332,his.windowSize = windowSize;
False,src/java/org/apache/commons/math/stat/Applyable.java,src/java/org/apache/commons/math/stat/Applyable.java,2," The Apache Software License, Version 1.1"
False,src/java/org/apache/commons/math/stat/Applyable.java,src/java/org/apache/commons/math/stat/Applyable.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
False,src/java/org/apache/commons/math/stat/Applyable.java,src/java/org/apache/commons/math/stat/Applyable.java,5, reserved.
False,src/java/org/apache/commons/math/stat/Applyable.java,src/java/org/apache/commons/math/stat/Applyable.java,7," Redistribution and use in source and binary forms, with or without"
False,src/java/org/apache/commons/math/stat/Applyable.java,src/java/org/apache/commons/math/stat/Applyable.java,8," modification, are permitted provided that the following conditions"
False,src/java/org/apache/commons/math/stat/Applyable.java,src/java/org/apache/commons/math/stat/Applyable.java,9, are met:
False,src/java/org/apache/commons/math/stat/Applyable.java,src/java/org/apache/commons/math/stat/Applyable.java,11, 1. Redistributions of source code must retain the above copyright
False,src/java/org/apache/commons/math/stat/Applyable.java,src/java/org/apache/commons/math/stat/Applyable.java,12,"    notice, this list of conditions and the following disclaimer."
False,src/java/org/apache/commons/math/stat/Applyable.java,src/java/org/apache/commons/math/stat/Applyable.java,14, 2. Redistributions in binary form must reproduce the above copyright
False,src/java/org/apache/commons/math/stat/Applyable.java,src/java/org/apache/commons/math/stat/Applyable.java,15,"    notice, this list of conditions and the following disclaimer in"
False,src/java/org/apache/commons/math/stat/Applyable.java,src/java/org/apache/commons/math/stat/Applyable.java,16,    the documentation and/or other materials provided with the
False,src/java/org/apache/commons/math/stat/Applyable.java,src/java/org/apache/commons/math/stat/Applyable.java,17,    distribution.
False,src/java/org/apache/commons/math/stat/Applyable.java,src/java/org/apache/commons/math/stat/Applyable.java,19," 3. The end-user documentation included with the redistribution, if"
False,src/java/org/apache/commons/math/stat/Applyable.java,src/java/org/apache/commons/math/stat/Applyable.java,20,"    any, must include the following acknowledgement:"
False,src/java/org/apache/commons/math/stat/Applyable.java,src/java/org/apache/commons/math/stat/Applyable.java,21,"       ""This product includes software developed by the"
False,src/java/org/apache/commons/math/stat/Applyable.java,src/java/org/apache/commons/math/stat/Applyable.java,22,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/java/org/apache/commons/math/stat/Applyable.java,src/java/org/apache/commons/math/stat/Applyable.java,23,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/java/org/apache/commons/math/stat/Applyable.java,src/java/org/apache/commons/math/stat/Applyable.java,24,    if and wherever such third-party acknowledgements normally appear.
False,src/java/org/apache/commons/math/stat/Applyable.java,src/java/org/apache/commons/math/stat/Applyable.java,26," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/java/org/apache/commons/math/stat/Applyable.java,src/java/org/apache/commons/math/stat/Applyable.java,27,"    Foundation"" must not be used to endorse or promote products derived"
False,src/java/org/apache/commons/math/stat/Applyable.java,src/java/org/apache/commons/math/stat/Applyable.java,28,    from this software without prior written permission. For written
False,src/java/org/apache/commons/math/stat/Applyable.java,src/java/org/apache/commons/math/stat/Applyable.java,29,"    permission, please contact apache@apache.org."
False,src/java/org/apache/commons/math/stat/Applyable.java,src/java/org/apache/commons/math/stat/Applyable.java,31," 5. Products derived from this software may not be called ""Apache"""
False,src/java/org/apache/commons/math/stat/Applyable.java,src/java/org/apache/commons/math/stat/Applyable.java,32,"    nor may ""Apache"" appear in their name without prior written"
False,src/java/org/apache/commons/math/stat/Applyable.java,src/java/org/apache/commons/math/stat/Applyable.java,33,    permission of the Apache Software Foundation.
False,src/java/org/apache/commons/math/stat/Applyable.java,src/java/org/apache/commons/math/stat/Applyable.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/java/org/apache/commons/math/stat/Applyable.java,src/java/org/apache/commons/math/stat/Applyable.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/java/org/apache/commons/math/stat/Applyable.java,src/java/org/apache/commons/math/stat/Applyable.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/java/org/apache/commons/math/stat/Applyable.java,src/java/org/apache/commons/math/stat/Applyable.java,38, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/java/org/apache/commons/math/stat/Applyable.java,src/java/org/apache/commons/math/stat/Applyable.java,39," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/java/org/apache/commons/math/stat/Applyable.java,src/java/org/apache/commons/math/stat/Applyable.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/java/org/apache/commons/math/stat/Applyable.java,src/java/org/apache/commons/math/stat/Applyable.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/java/org/apache/commons/math/stat/Applyable.java,src/java/org/apache/commons/math/stat/Applyable.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/java/org/apache/commons/math/stat/Applyable.java,src/java/org/apache/commons/math/stat/Applyable.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/java/org/apache/commons/math/stat/Applyable.java,src/java/org/apache/commons/math/stat/Applyable.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/java/org/apache/commons/math/stat/Applyable.java,src/java/org/apache/commons/math/stat/Applyable.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/java/org/apache/commons/math/stat/Applyable.java,src/java/org/apache/commons/math/stat/Applyable.java,46, SUCH DAMAGE.
False,src/java/org/apache/commons/math/stat/Applyable.java,src/java/org/apache/commons/math/stat/Applyable.java,49, This software consists of voluntary contributions made by many
False,src/java/org/apache/commons/math/stat/Applyable.java,src/java/org/apache/commons/math/stat/Applyable.java,50, individuals on behalf of the Apache Software Foundation.  For more
False,src/java/org/apache/commons/math/stat/Applyable.java,src/java/org/apache/commons/math/stat/Applyable.java,51," information on the Apache Software Foundation, please see"
False,src/java/org/apache/commons/math/stat/Applyable.java,src/java/org/apache/commons/math/stat/Applyable.java,52, <http://www.apache.org/>.
False,src/java/org/apache/commons/math/stat/Applyable.java,src/java/org/apache/commons/math/stat/Applyable.java,54,ackage org.apache.commons.math.stat;
False,src/java/org/apache/commons/math/stat/Applyable.java,src/java/org/apache/commons/math/stat/Applyable.java,56,mport org.apache.commons.math.stat.univariate.UnivariateStatistic;
False,src/java/org/apache/commons/math/stat/Applyable.java,src/java/org/apache/commons/math/stat/Applyable.java,59, Applyable.java
False,src/java/org/apache/commons/math/stat/Applyable.java,src/java/org/apache/commons/math/stat/Applyable.java,61, TODO: add javadocs
False,src/java/org/apache/commons/math/stat/Applyable.java,src/java/org/apache/commons/math/stat/Applyable.java,63, @version $Revision: 1.4 $ $Date: 2003/10/16 15:24:30 $
False,src/java/org/apache/commons/math/stat/Applyable.java,src/java/org/apache/commons/math/stat/Applyable.java,65,ublic interface Applyable {
False,src/java/org/apache/commons/math/stat/Applyable.java,src/java/org/apache/commons/math/stat/Applyable.java,68, Applies a UnivariateStatistic object against this object
False,src/java/org/apache/commons/math/stat/Applyable.java,src/java/org/apache/commons/math/stat/Applyable.java,69, and returns the result.
False,src/java/org/apache/commons/math/stat/Applyable.java,src/java/org/apache/commons/math/stat/Applyable.java,70, @param stat The stat to apply.
False,src/java/org/apache/commons/math/stat/Applyable.java,src/java/org/apache/commons/math/stat/Applyable.java,71, @return The result value of the application.
False,src/java/org/apache/commons/math/stat/Applyable.java,src/java/org/apache/commons/math/stat/Applyable.java,73,ouble apply(UnivariateStatistic stat);
False,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,2," The Apache Software License, Version 1.1"
False,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
False,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,5, reserved.
False,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,7," Redistribution and use in source and binary forms, with or without"
False,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,8," modification, are permitted provided that the following conditions"
False,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,9, are met:
False,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,11, 1. Redistributions of source code must retain the above copyright
False,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,12,"    notice, this list of conditions and the following disclaimer."
False,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,14, 2. Redistributions in binary form must reproduce the above copyright
False,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,15,"    notice, this list of conditions and the following disclaimer in"
False,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,16,    the documentation and/or other materials provided with the
False,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,17,    distribution.
False,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,19," 3. The end-user documentation included with the redistribution, if"
False,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,20,"    any, must include the following acknowledgement:"
False,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,21,"       ""This product includes software developed by the"
False,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,22,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,23,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,24,    if and wherever such third-party acknowledgements normally appear.
False,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,26," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,27,"    Foundation"" must not be used to endorse or promote products derived"
False,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,28,    from this software without prior written permission. For written
False,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,29,"    permission, please contact apache@apache.org."
False,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,31," 5. Products derived from this software may not be called ""Apache"""
False,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,32,"    nor may ""Apache"" appear in their name without prior written"
False,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,33,    permission of the Apache Software Foundation.
False,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,38, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,39," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,46, SUCH DAMAGE.
False,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,49, This software consists of voluntary contributions made by many
False,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,50, individuals on behalf of the Apache Software Foundation.  For more
False,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,51," information on the Apache Software Foundation, please see"
False,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,52, <http://www.apache.org/>.
False,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,54,ackage org.apache.commons.math.stat;
False,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,56,mport java.util.List;
False,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,58,mport org.apache.commons.math.util.BeanTransformer;
False,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,61, This implementation of StoreUnivariate uses commons-beanutils to gather
False,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,62, univariate statistics for a List of Java Beans by property.  This
False,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,63," implementation uses beanutils' PropertyUtils to get a simple, nested,"
False,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,64," indexed, mapped, or combined property from an element of a List."
False,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,65, @version $Revision: 1.9 $ $Date: 2003/10/16 15:24:30 $
False,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,67,ublic class BeanListUnivariateImpl extends ListUnivariateImpl {
False,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,70, propertyName of the property to get from the bean
False,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,72,rivate String propertyName;
False,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,75, Construct a BeanListUnivariate with specified
False,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,76, backing list
False,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,77, @param list Backing List
False,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,79,ublic BeanListUnivariateImpl(List list) {
False,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,80,"his(list, null);"
False,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,84, Construct a BeanListUnivariate with specified
False,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,85, backing list and propertyName
False,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,86, @param list Backing List
False,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,87, @param propertyName Bean propertyName
False,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,89,"ublic BeanListUnivariateImpl(List list, String propertyName) {"
False,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,90,uper(list);
False,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,91,etPropertyName(propertyName);
False,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,95, @return propertyName
False,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,97,ublic String getPropertyName() {
False,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,98,eturn propertyName;
False,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,102, @param propertyName Name of Property
False,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,104,ublic void setPropertyName(String propertyName) {
False,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,105,his.propertyName = propertyName;
False,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,106,etTransformer(new BeanTransformer(propertyName));
False,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,110, @see org.apache.commons.math.stat.Univariate#addValue(double)
False,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,112,ublic void addValue(double v) {
False,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,113,tring msg =
False,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,114,"The BeanListUnivariateImpl does not accept values "" +"
False,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,115,"through the addValue method.  Because elements of this list "" +"
False,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,116,"are JavaBeans, one must be sure to set the 'propertyName' "" +"
False,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,117,"property and add new Beans to the underlying list via the "" +"
False,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,118,"addBean(Object bean) method"";"
False,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,119,hrow new UnsupportedOperationException(msg);
False,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,123, Adds a bean to this list.
False,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,125, @param bean Bean to add to the list
False,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,127,ublic void addObject(Object bean) {
False,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,128,ist.add(bean);
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,2," The Apache Software License, Version 1.1"
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,5, reserved.
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,7," Redistribution and use in source and binary forms, with or without"
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,8," modification, are permitted provided that the following conditions"
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,9, are met:
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,11, 1. Redistributions of source code must retain the above copyright
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,12,"    notice, this list of conditions and the following disclaimer."
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,14, 2. Redistributions in binary form must reproduce the above copyright
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,15,"    notice, this list of conditions and the following disclaimer in"
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,16,    the documentation and/or other materials provided with the
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,17,    distribution.
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,19," 3. The end-user documentation included with the redistribution, if"
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,20,"    any, must include the following acknowledgement:"
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,21,"       ""This product includes software developed by the"
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,22,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,23,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,24,    if and wherever such third-party acknowledgements normally appear.
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,26," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,27,"    Foundation"" must not be used to endorse or promote products derived"
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,28,    from this software without prior written permission. For written
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,29,"    permission, please contact apache@apache.org."
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,31," 5. Products derived from this software may not be called ""Apache"""
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,32,"    nor may ""Apache"" appear in their name without prior written"
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,33,    permission of the Apache Software Foundation.
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,38, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,39," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,46, SUCH DAMAGE.
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,49, This software consists of voluntary contributions made by many
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,50, individuals on behalf of the Apache Software Foundation.  For more
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,51," information on the Apache Software Foundation, please see"
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,52, <http://www.apache.org/>.
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,55,ackage org.apache.commons.math.stat;
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,56,mport org.apache.commons.math.stat.distribution.DistributionFactory;
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,57,mport org.apache.commons.math.stat.distribution.TDistribution;
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,60, Estimates an ordinary least squares regression model
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,61, with one independent variable.
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,62, <p>
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,63, <code> y = intercept + slope * x  </code>
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,64, <p>
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,65, Standard errors for <code>intercept</code> and <code>slope</code> are
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,66," available as well as ANOVA, r-square and Pearson's r statistics."
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,67, <p>
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,68," Observations (x,y pairs) can be added to the model one at a time or they"
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,69, can be provided in a 2-dimensional array.  The observations are not stored
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,70," in memory, so there is no limit to the number of observations that can be"
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,71, added to the model.
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,72, <p>
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,73, <strong>Usage Notes</strong>: <ul>
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,74," <li> When there are fewer than two observations in the model, or when"
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,75, there is no variation in the x values (i.e. all x values are the same)
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,76, all statistics return <code>NaN</code>. At least two observations with
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,77, different x coordinates are requred to estimate a bivariate regression
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,78, model.
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,79, </li>
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,80, <li> getters for the statistics always compute values based on the current
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,81," set of observations -- i.e., you can get statistics, then add more data"
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,82, and get updated statistics without using a new instance.  There is no
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,83," ""compute"" method that updates all statistics.  Each of the getters performs"
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,84, the necessary computations to return the requested statistic.</li>
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,85, </ul>
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,87, @version $Revision: 1.6 $ $Date: 2003/10/16 15:24:30 $
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,89,ublic class BivariateRegression {
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,91,** sum of x values */
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,92,rivate double sumX = 0d;
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,94,** total variation in x (sum of squared deviations from xbar) */
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,95,rivate double sumXX = 0d;
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,97,** sum of y values */
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,98,rivate double sumY = 0d;
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,100,** total variation in y (sum of squared deviations from ybar) */
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,101,rivate double sumYY = 0d;
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,103,** sum of products */
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,104,rivate double sumXY = 0d;
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,106,** number of observations */
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,107,rivate long n = 0;
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,109,"** mean of accumulated x values, used in updating formulas */"
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,110,rivate double xbar = 0;
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,112,"** mean of accumulated y values, used in updating formulas */"
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,113,rivate double ybar = 0;
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,116,/ ---------------------Public methods--------------------------------------
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,119," Adds the observation (x,y) to the regression data set."
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,120, <p>
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,121, Uses updating formulas for means and sums of squares defined in
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,122," ""Algorithms for Computing the Sample Variance: Analysis and"
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,123," Recommendations"", Chan, T.F., Golub, G.H., and LeVeque, R.J."
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,124," 1983, American Statistician, vol. 37, pp. 242-247, referenced in"
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,125," Weisberg, S. ""Applied Linear Regression"". 2nd Ed. 1985"
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,128, @param x independent variable value
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,129, @param y dependent variable value
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,131,"ublic void addData(double x, double y) {"
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,132,f (n == 0) {
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,133,bar = x;
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,134,bar = y;
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,135, else {
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,136,umXX += ((double) n / (double) (n + 1)) * (x - xbar) * (x - xbar);
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,137,umYY += ((double) n / (double) (n + 1)) * (y - ybar) * (y - ybar);
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,138,umXY += ((double) n / (double) (n + 1)) * (x - xbar) * (y - ybar);
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,139,bar += (1d / (double) (n + 1)) * (x - xbar);
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,140,bar += (1d / (double) (n + 1)) * (y - ybar);
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,142,umX += x;
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,143,umY += y;
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,144,++;
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,148, Adds the observations represented by the elements in
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,149, <code>data</code>.
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,150, <p>
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,151," <code>(data[0][0],data[0][1])</code> will be the first observation, then"
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,152," <code>(data[1][0],data[1][1])</code>, etc. <p>"
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,154, This method does not replace data that has already been added.
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,155," To replace all data, use <code>clear()</code> before adding the new"
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,156, data.
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,158, @param data array of observations to be added
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,160,ublic void addData(double[][] data) {
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,161,or (int i = 0; i < data.length; i++) {
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,162,"ddData(data[i][0], data[i][1]);"
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,167, Clears all data from the model.
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,169,ublic void clear() {
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,170,umX = 0d;
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,171,umXX = 0d;
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,172,umY = 0d;
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,173,umYY = 0d;
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,174,umXY = 0d;
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,175, = 0;
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,179, Returns the number of observations that have been added to the model.
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,181, @return n number of observations that have been added.
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,183,ublic long getN() {
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,184,eturn n;
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,188," Returns the ""predicted"" <code>y</code> value associated with the"
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,189, supplied <code>x</code> value.
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,190, <p>
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,191, <code> predict(x) = intercept + slope * x </code>
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,192, <p>
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,193, <strong>Preconditions</strong>: <ul>
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,194, <li>At least two observations (with at least two different x values)
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,195, must have been added before invoking this method. If this method is
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,196," invoked before a model can be estimated, <code>Double,NaN</code> is"
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,197, returned.
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,198, </li></ul>
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,200, @param x input <code>x</code> value
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,201, @return predicted <code>y</code> value
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,203,ublic double predict(double x) {
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,204,ouble b1 = getSlope();
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,205,eturn getIntercept(b1) + b1 * x;
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,209, Returns the intercept of the estimated regression line.
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,210, <p>
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,211, The least squares estimate of the intercept is computed using the
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,212," <a href=""http://www.xycoon.com/estimation4.htm"">normal equations</a>."
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,213, The intercept is sometimes denoted b0.
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,214, <p>
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,215, <strong>Preconditions</strong>: <ul>
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,216, <li>At least two observations (with at least two different x values)
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,217, must have been added before invoking this method. If this method is
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,218," invoked before a model can be estimated, <code>Double,NaN</code> is"
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,219, returned.
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,220, </li></ul>
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,222, @return the intercept of the regression line
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,224,ublic double getIntercept() {
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,225,eturn getIntercept(getSlope());
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,229, Returns the slope of the estimated regression line.
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,230, <p>
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,231, The least squares estimate of the slope is computed using the
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,232," <a href=""http://www.xycoon.com/estimation4.htm"">normal equations</a>."
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,233, The slope is sometimes denoted b1.
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,234, <p>
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,235, <strong>Preconditions</strong>: <ul>
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,236, <li>At least two observations (with at least two different x values)
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,237, must have been added before invoking this method. If this method is
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,238," invoked before a model can be estimated, <code>Double.NaN</code> is"
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,239, returned.
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,240, </li></ul>
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,242, @return the slope of the regression line
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,244,ublic double getSlope() {
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,245,f (n < 2) {
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,246,eturn Double.NaN;  //not enough data
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,248,f (Math.abs(sumXX) < 10 * Double.MIN_VALUE) {
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,249,eturn Double.NaN; //not enough variation in x
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,251,eturn sumXY / sumXX;
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,255," Returns the <a href=""http://www.xycoon.com/SumOfSquares.htm"">"
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,256, sum of squared errors</a> (SSE) associated with the regression
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,257, model.
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,258, <p>
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,259, <strong>Preconditions</strong>: <ul>
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,260, <li>At least two observations (with at least two different x values)
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,261, must have been added before invoking this method. If this method is
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,262," invoked before a model can be estimated, <code>Double,NaN</code> is"
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,263, returned.
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,264, </li></ul>
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,266, @return sum of squared errors associated with the regression model
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,268,ublic double getSumSquaredErrors() {
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,269,eturn getSumSquaredErrors(getSlope());
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,273, Returns the sum of squared deviations of the y values about their mean.
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,274, <p>
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,275, This is defined as SSTO
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,276," <a href=""http://www.xycoon.com/SumOfSquares.htm"">here</a>."
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,277, <p>
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,278," If <code>n < 2</code>, this returns <code>Double.NaN</code>."
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,280, @return sum of squared deviations of y values
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,282,ublic double getTotalSumSquares() {
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,283,f (n < 2) {
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,284,eturn Double.NaN;
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,286,eturn sumYY;
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,290, Returns the sum of squared deviations of the predicted y values about
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,291, their mean (which equals the mean of y).
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,292, <p>
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,293, This is usually abbreviated SSR or SSM.  It is defined as SSM
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,294," <a href=""http://www.xycoon.com/SumOfSquares.htm"">here</a>"
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,295, <p>
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,296, <strong>Preconditions</strong>: <ul>
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,297, <li>At least two observations (with at least two different x values)
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,298, must have been added before invoking this method. If this method is
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,299," invoked before a model can be estimated, <code>Double,NaN</code> is"
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,300, returned.
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,301, </li></ul>
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,303, @return sum of squared deviations of predicted y values
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,305,ublic double getRegressionSumSquares() {
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,306,eturn getRegressionSumSquares(getSlope());
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,310," Returns the sum of squared errors divided by the degrees of freedom,"
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,311, usually abbreviated MSE.
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,312, <p>
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,313," If there are fewer than <strong>three</strong> data pairs in the model,"
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,314," or if there is no variation in <code>x</code>, this returns"
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,315, <code>Double.NaN</code>.
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,317, @return sum of squared deviations of y values
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,319,ublic double getMeanSquareError() {
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,320,f (n < 3) {
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,321,eturn Double.NaN;
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,323,eturn getSumSquaredErrors() / (double) (n - 2);
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,327," Returns <a href=""http://www.stt.msu.edu/~xiaoyimi/STT200/Lecture5.pdf"">"
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,328," Pearson's product moment correlation coefficient</a>,"
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,329, usually denoted r.
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,330, <p>
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,331, <strong>Preconditions</strong>: <ul>
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,332, <li>At least two observations (with at least two different x values)
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,333, must have been added before invoking this method. If this method is
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,334," invoked before a model can be estimated, <code>Double,NaN</code> is"
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,335, returned.
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,336, </li></ul>
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,338, @return Pearson's r
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,340,ublic double getR() {
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,341,ouble b1 = getSlope();
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,342,ouble result = Math.sqrt(getRSquare(b1));
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,343,f (b1 < 0) {
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,344,esult = -result;
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,346,eturn result;
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,350," Returns the <a href=""http://www.xycoon.com/coefficient1.htm"">"
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,351," coefficient of determination</a>,"
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,352, usually denoted r-square.
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,353, <p>
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,354, <strong>Preconditions</strong>: <ul>
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,355, <li>At least two observations (with at least two different x values)
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,356, must have been added before invoking this method. If this method is
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,357," invoked before a model can be estimated, <code>Double,NaN</code> is"
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,358, returned.
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,359, </li></ul>
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,361, @return r-square
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,363,ublic double getRSquare() {
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,364,eturn getRSquare(getSlope());
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,369," Returns the <a href=""http://www.xycoon.com/standarderrorb0.htm"">"
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,370," standard error of the intercept estimate</a>,"
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,371, usually denoted s(b0).
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,372, <p>
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,373, If there are fewer that <strong>three</strong> observations in the
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,374," model, or if there is no variation in x, this returns"
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,375, <code>Double.NaN</code>.
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,377, @return standard error associated with intercept estimate
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,379,ublic double getInterceptStdErr() {
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,380,eturn Math.sqrt(getMeanSquareError() * ((1d / (double) n) +
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,381,xbar * xbar) / sumXX));
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,385," Returns the <a href=""http://www.xycoon.com/standerrorb(1).htm"">standard"
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,386," error of the slope estimate</a>,"
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,387, usually denoted s(b1).
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,388, <p>
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,389," If there are fewer that <strong>three</strong> data pairs in the model,"
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,390," or if there is no variation in x, this returns <code>Double.NaN</code>."
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,392, @return standard error associated with slope estimate
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,394,ublic double getSlopeStdErr() {
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,395,eturn Math.sqrt(getMeanSquareError() / sumXX);
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,399, Returns the half-width of a 95% confidence interval for the slope
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,400, estimate.
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,401, <p>
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,402, The 95% confidence interval is
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,403, <p>
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,404," <code>(getSlope() - getSlopeConfidenceInterval(),"
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,405, getSlope() + getSlopeConfidenceInterval())</code>
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,406, <p>
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,407, If there are fewer that <strong>three</strong> observations in the
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,408," model, or if there is no variation in x, this returns"
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,409, <code>Double.NaN</code>.
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,410, <p>
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,411, <strong>Usage Note</strong>:<br>
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,412, The validity of this statistic depends on the assumption that the
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,413, observations included in the model are drawn from a
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,414," <a href=""http://mathworld.wolfram.com/"
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,415," BivariateNormalDistribution.html"">Bivariate Normal Distribution</a>."
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,417, @return half-width of 95% confidence interval for the slope estimate
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,419,ublic double getSlopeConfidenceInterval() {
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,420,eturn getSlopeConfidenceInterval(0.05d);
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,424, Returns the half-width of a (100-100*alpha)% confidence interval for
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,425, the slope estimate.
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,426, <p>
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,427, The (100-100*alpha)% confidence interval is
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,428, <p>
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,429," <code>(getSlope() - getSlopeConfidenceInterval(),"
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,430, getSlope() + getSlopeConfidenceInterval())</code>
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,431, <p>
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,432," To request, for example, a 99% confidence interval, use"
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,433, <code>alpha = .01</code>
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,434, <p>
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,435, <strong>Usage Note</strong>:<br>
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,436, The validity of this statistic depends on the assumption that the
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,437, observations included in the model are drawn from a
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,438," <a href=""http://mathworld.wolfram.com/"
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,439," BivariateNormalDistribution.html"">Bivariate Normal Distribution</a>."
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,440, <p>
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,441, <strong> Preconditions:</strong><ul>
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,442, <li>If there are fewer that <strong>three</strong> observations in the
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,443," model, or if there is no variation in x, this returns"
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,444, <code>Double.NaN</code>.
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,445, </li>
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,446, <li><code>(0 < alpha < 1)</code>; otherwise an
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,447, <code>IllegalArgumentException</code> is thrown.
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,448, </li></ul>
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,450, @param alpha the desired significance level
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,451, @return half-width of 95% confidence interval for the slope estimate
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,453,ublic double getSlopeConfidenceInterval(double alpha) {
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,454,f (alpha >= 1 || alpha <= 0) {
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,455,hrow new IllegalArgumentException();
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,457,eturn getSlopeStdErr() *
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,458,etTDistribution().inverseCummulativeProbability(1d - alpha / 2d);
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,462, Returns the significance level of the slope (equiv) correlation.
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,463, <p>
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,464," Specifically, the returned value is the smallest <code>alpha</code>"
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,465, such that the slope confidence interval with significance level
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,466, equal to <code>alpha</code> does not include <code>0</code>.
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,467," On regression output, this is often denoted <code>Prob(|t| > 0)</code>"
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,468, <p>
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,469, <strong>Usage Note</strong>:<br>
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,470, The validity of this statistic depends on the assumption that the
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,471, observations included in the model are drawn from a
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,472," <a href=""http://mathworld.wolfram.com/"
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,473," BivariateNormalDistribution.html"">Bivariate Normal Distribution</a>."
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,474, <p>
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,475, If there are fewer that <strong>three</strong> observations in the
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,476," model, or if there is no variation in x, this returns"
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,477, <code>Double.NaN</code>.
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,479, @return significance level for slope/correlation
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,481,ublic double getSignificance() {
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,482,eturn (1d - getTDistribution().cummulativeProbability(
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,483,ath.abs(getSlope()) / getSlopeStdErr()));
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,486,/ ---------------------Private methods-----------------------------------
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,489," Returns the intercept of the estimated regression line, given the slope."
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,490, <p>
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,491, Will return <code>NaN</code> if slope is <code>NaN</code>.
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,493, @param slope current slope
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,494, @return the intercept of the regression line
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,496,rivate double getIntercept(double slope) {
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,497,eturn (sumY - slope * sumX) / ((double) n);
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,501, Returns the sum of squared errors associated with the regression
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,502," model, using the slope of the regression line."
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,503, <p>
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,504, Returns NaN if the slope is NaN.
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,506, @param b1 current slope
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,507, @return sum of squared errors associated with the regression model
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,509,rivate double getSumSquaredErrors(double b1) {
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,510,eturn sumYY - sumXY * sumXY / sumXX;
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,514, Computes r-square from the slope.
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,515, <p>
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,516, will return NaN if slope is Nan.
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,518, @param b1 current slope
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,519, @return r-square
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,521,rivate double getRSquare(double b1) {
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,522,ouble ssto = getTotalSumSquares();
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,523,eturn (ssto - getSumSquaredErrors(b1)) / ssto;
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,527, Computes SSR from b1.
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,529, @param slope regression slope estimate
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,530, @return sum of squared deviations of predicted y values
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,532,rivate double getRegressionSumSquares(double slope) {
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,533,eturn slope * slope * sumXX;
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,537, Uses distribution framework to get a t distribution instance
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,538, with df = n - 2
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,540, @return t distribution with df = n - 2
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,542,rivate TDistribution getTDistribution() {
False,src/java/org/apache/commons/math/stat/BivariateRegression.java,src/java/org/apache/commons/math/stat/BivariateRegression.java,543,eturn DistributionFactory.newInstance().createTDistribution(n - 2);
False,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,2," The Apache Software License, Version 1.1"
False,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
False,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,5, reserved.
False,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,7," Redistribution and use in source and binary forms, with or without"
False,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,8," modification, are permitted provided that the following conditions"
False,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,9, are met:
False,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,11, 1. Redistributions of source code must retain the above copyright
False,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,12,"    notice, this list of conditions and the following disclaimer."
False,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,14, 2. Redistributions in binary form must reproduce the above copyright
False,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,15,"    notice, this list of conditions and the following disclaimer in"
False,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,16,    the documentation and/or other materials provided with the
False,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,17,    distribution.
False,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,19," 3. The end-user documentation included with the redistribution, if"
False,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,20,"    any, must include the following acknowledgement:"
False,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,21,"       ""This product includes software developed by the"
False,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,22,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,23,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,24,    if and wherever such third-party acknowledgements normally appear.
False,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,26," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,27,"    Foundation"" must not be used to endorse or promote products derived"
False,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,28,    from this software without prior written permission. For written
False,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,29,"    permission, please contact apache@apache.org."
False,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,31," 5. Products derived from this software may not be called ""Apache"""
False,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,32,"    nor may ""Apache"" appear in their name without prior written"
False,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,33,    permission of the Apache Software Foundation.
False,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,38, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,39," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,46, SUCH DAMAGE.
False,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,49, This software consists of voluntary contributions made by many
False,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,50, individuals on behalf of the Apache Software Foundation.  For more
False,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,51," information on the Apache Software Foundation, please see"
False,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,52, <http://www.apache.org/>.
False,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,54,ackage org.apache.commons.math.stat;
False,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,56,mport java.util.Iterator;
False,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,58,mport org.apache.commons.collections.Bag;
False,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,59,mport org.apache.commons.collections.HashBag;
False,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,62, Maintains a frequency distribution. <br>
False,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,63," Accepts int, long or string values, converting"
False,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,64, all to Strings and maintaining frequency counts.
False,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,66, @version $Revision: 1.7 $ $Date: 2003/10/16 15:24:30 $
False,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,68,ublic class Frequency {
False,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,69,** name for this frequency distribution. */
False,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,70,rivate String name;
False,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,72,** underlying collection */
False,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,73,rivate Bag freqTable = new HashBag();
False,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,76, Default constructor.
False,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,78,ublic Frequency() {
False,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,79,his(null);
False,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,83, Construct a frequency distribution with the given name.
False,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,84, @param name the name for the new distribution.
False,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,86,ublic Frequency(String name) {
False,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,87,uper();
False,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,88,etName(name);
False,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,92, Return a string representation of describing this frequency
False,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,93, distribution.
False,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,94, @return a string representation.
False,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,96,ublic String toString() {
False,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,97,tringBuffer outBuffer = new StringBuffer();
False,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,98,"utBuffer.append(""Value \t Frequency \n"");"
False,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,99,terator iter = freqTable.uniqueSet().iterator();
False,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,100,hile (iter.hasNext()) {
False,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,101,bject value = iter.next();
False,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,102,utBuffer.append(value);
False,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,103,utBuffer.append('\t');
False,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,104,utBuffer.append(freqTable.getCount(value));
False,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,105,utBuffer.append('\n');
False,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,107,eturn outBuffer.toString();
False,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,111, Adds 1 to the frequency count for v
False,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,112, @param v the value to add.
False,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,114,ublic void addValue(String v) {
False,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,115,reqTable.add(v);
False,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,119, Adds 1 to the frequency count for v
False,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,120, @param v the value to add.
False,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,122,ublic void addValue(int v) {
False,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,123,ddValue((new Integer(v)).toString());
False,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,127, Adds 1 to the frequency count for v.
False,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,128, @param v the value to add.
False,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,130,ublic void addValue(long v) {
False,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,131,ddValue((new Long(v)).toString());
False,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,135, Returns the number of values = v
False,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,136, @param v the value to lookup.
False,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,137, @return the absolute frequency of v.
False,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,139,ublic long getCount(String v) {
False,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,140,eturn freqTable.getCount(v);
False,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,144, Returns the sum of all frequencies
False,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,145, @return the aggregate frequency.
False,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,147,ublic long getSumFreq() {
False,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,148,eturn freqTable.size();
False,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,152, Returns the percentage of values = v.
False,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,153, @param v the value to lookup.
False,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,154, @return the relative frequency of v.
False,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,156,ublic double getPct(String v) {
False,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,157,eturn (double) getCount(v) / (double) getSumFreq();
False,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,160,** Clears the frequency table */
False,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,161,ublic void clear() {
False,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,162,reqTable.clear();
False,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,165,** Getter for property name.
False,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,166, @return Value of property name.
False,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,168,ublic String getName() {
False,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,169,eturn name;
False,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,172,** Setter for property name.
False,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,173, @param name New value of property name.
False,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,175,ublic void setName(java.lang.String name) {
False,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,176,his.name = name;
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,2," The Apache Software License, Version 1.1"
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,5, reserved.
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,7," Redistribution and use in source and binary forms, with or without"
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,8," modification, are permitted provided that the following conditions"
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,9, are met:
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,11, 1. Redistributions of source code must retain the above copyright
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,12,"    notice, this list of conditions and the following disclaimer."
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,14, 2. Redistributions in binary form must reproduce the above copyright
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,15,"    notice, this list of conditions and the following disclaimer in"
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,16,    the documentation and/or other materials provided with the
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,17,    distribution.
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,19," 3. The end-user documentation included with the redistribution, if"
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,20,"    any, must include the following acknowledgement:"
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,21,"       ""This product includes software developed by the"
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,22,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,23,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,24,    if and wherever such third-party acknowledgements normally appear.
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,26," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,27,"    Foundation"" must not be used to endorse or promote products derived"
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,28,    from this software without prior written permission. For written
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,29,"    permission, please contact apache@apache.org."
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,31," 5. Products derived from this software may not be called ""Apache"""
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,32,"    nor may ""Apache"" appear in their name without prior written"
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,33,    permission of the Apache Software Foundation.
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,38, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,39," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,46, SUCH DAMAGE.
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,49, This software consists of voluntary contributions made by many
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,50, individuals on behalf of the Apache Software Foundation.  For more
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,51," information on the Apache Software Foundation, please see"
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,52, <http://www.apache.org/>.
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,54,ackage org.apache.commons.math.stat;
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,56,mport java.util.List;
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,58,mport org.apache.commons.math.stat.univariate.UnivariateStatistic;
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,59,mport org.apache.commons.math.util.DefaultTransformer;
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,60,mport org.apache.commons.math.util.NumberTransformer;
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,63, @version $Revision: 1.9 $ $Date: 2003/10/16 15:24:30 $
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,65,ublic class ListUnivariateImpl
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,66,xtends AbstractStoreUnivariate
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,67,mplements StoreUnivariate {
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,70, Holds a reference to a list - GENERICs are going to make
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,71, out lives easier here as we could only accept List<Number>
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,73,rotected List list;
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,75,** Number Transformer maps Objects to Number for us. */
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,76,rotected NumberTransformer transformer;
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,79, Construct a ListUnivariate with a specific List.
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,80, @param list The list that will back this Univariate
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,82,ublic ListUnivariateImpl(List list) {
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,83,"his(list, new DefaultTransformer());"
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,87, Construct a ListUnivariate with a specific List.
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,88, @param list The list that will back this Univariate
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,89, @param transformer the number transformer used to convert the list items.
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,91,"ublic ListUnivariateImpl(List list, NumberTransformer transformer) {"
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,92,uper();
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,93,his.list = list;
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,94,his.transformer = transformer;
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,98, @see org.apache.commons.math.stat.StoreUnivariate#getValues()
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,100,ublic double[] getValues() {
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,102,nt length = list.size();
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,104,/ If the window size is not INFINITE_WINDOW AND
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,105,"/ the current list is larger that the window size, we need to"
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,106,/ take into account only the last n elements of the list
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,107,/ as definied by windowSize
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,109,f (windowSize != Univariate.INFINITE_WINDOW &&
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,110,indowSize < list.size())
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,112,"ength = list.size() - Math.max(0, list.size() - windowSize);"
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,115,/ Create an array to hold all values
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,116,ouble[] copiedArray = new double[length];
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,118,or (int i = 0; i < copiedArray.length; i++) {
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,119,opiedArray[i] = getElement(i);
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,121,eturn copiedArray;
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,125, @see org.apache.commons.math.stat.StoreUnivariate#getElement(int)
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,127,ublic double getElement(int index) {
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,129,ouble value = Double.NaN;
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,131,nt calcIndex = index;
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,133,f (windowSize != Univariate.INFINITE_WINDOW &&
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,134,indowSize < list.size())
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,136,alcIndex = (list.size() - windowSize) + index;
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,139,ry {
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,140,alue = transformer.transform(list.get(calcIndex));
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,141, catch (Exception e) {
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,142,.printStackTrace();
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,145,eturn value;
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,149, @see org.apache.commons.math.stat.Univariate#getN()
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,151,ublic int getN() {
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,152,nt n = 0;
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,154,f (windowSize != Univariate.INFINITE_WINDOW) {
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,155,f (list.size() > windowSize) {
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,156, = windowSize;
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,157, else {
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,158, = list.size();
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,160, else {
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,161, = list.size();
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,163,eturn n;
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,167, @see org.apache.commons.math.stat.Univariate#addValue(double)
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,169,ublic void addValue(double v) {
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,170,ist.add(new Double(v));
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,174, Adds an object to this list.
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,175, @param o Object to add to the list
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,177,ublic void addObject(Object o) {
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,178,ist.add(o);
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,182, @see org.apache.commons.math.stat.Univariate#clear()
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,184,ublic void clear() {
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,185,uper.clear();
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,186,ist.clear();
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,190, Apply the given statistic to this univariate collection.
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,191, @param stat the statistic to apply
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,192, @return the computed value of the statistic.
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,194,ublic double apply(UnivariateStatistic stat) {
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,195,ouble[] v = this.getValues();
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,197,f (v != null) {
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,198,"eturn stat.evaluate(v, 0, v.length);"
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,200,eturn Double.NaN;
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,204, Access the number transformer.
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,205, @return the number transformer.
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,207,ublic NumberTransformer getTransformer() {
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,208,eturn transformer;
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,212, Modify the number transformer.
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,213, @param transformer the new number transformer.
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,215,ublic void setTransformer(NumberTransformer transformer) {
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,216,his.transformer = transformer;
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,2," The Apache Software License, Version 1.1"
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,5, reserved.
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,7," Redistribution and use in source and binary forms, with or without"
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,8," modification, are permitted provided that the following conditions"
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,9, are met:
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,11, 1. Redistributions of source code must retain the above copyright
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,12,"    notice, this list of conditions and the following disclaimer."
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,14, 2. Redistributions in binary form must reproduce the above copyright
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,15,"    notice, this list of conditions and the following disclaimer in"
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,16,    the documentation and/or other materials provided with the
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,17,    distribution.
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,19," 3. The end-user documentation included with the redistribution, if"
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,20,"    any, must include the following acknowledgement:"
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,21,"       ""This product includes software developed by the"
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,22,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,23,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,24,    if and wherever such third-party acknowledgements normally appear.
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,26," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,27,"    Foundation"" must not be used to endorse or promote products derived"
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,28,    from this software without prior written permission. For written
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,29,"    permission, please contact apache@apache.org."
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,31," 5. Products derived from this software may not be called ""Apache"""
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,32,"    nor may ""Apache"" appear in their name without prior written"
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,33,    permission of the Apache Software Foundation.
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,38, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,39," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,46, SUCH DAMAGE.
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,49, This software consists of voluntary contributions made by many
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,50, individuals on behalf of the Apache Software Foundation.  For more
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,51," information on the Apache Software Foundation, please see"
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,52, <http://www.apache.org/>.
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,54,ackage org.apache.commons.math.stat;
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,56,mport org.apache.commons.math.stat.univariate.UnivariateStatistic;
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,57,mport org.apache.commons.math.stat.univariate.moment.Mean;
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,58,mport org.apache.commons.math.stat.univariate.moment.Variance;
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,59,mport org.apache.commons.math.stat.univariate.rank.Max;
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,60,mport org.apache.commons.math.stat.univariate.rank.Min;
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,61,mport org.apache.commons.math.stat.univariate.summary.Product;
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,62,mport org.apache.commons.math.stat.univariate.summary.Sum;
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,63,mport org.apache.commons.math.stat.univariate.summary.SumOfLogs;
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,64,mport org.apache.commons.math.stat.univariate.summary.SumOfSquares;
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,67, StatUtils provides easy static implementations of common double[] based
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,68," statistical methods. These return a single result value or in some cases, as"
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,69," identified in the javadoc for each method, Double.NaN."
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,70, @version $Revision: 1.19 $ $Date: 2003/10/16 15:59:40 $
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,72,ublic final class StatUtils {
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,74,** sum */
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,75,rivate static UnivariateStatistic sum = new Sum();
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,77,** sumSq */
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,78,rivate static UnivariateStatistic sumSq = new SumOfSquares();
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,80,** prod */
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,81,rivate static UnivariateStatistic prod = new Product();
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,83,** sumLog */
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,84,rivate static UnivariateStatistic sumLog = new SumOfLogs();
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,86,** min */
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,87,rivate static UnivariateStatistic min = new Min();
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,89,** max */
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,90,rivate static UnivariateStatistic max = new Max();
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,92,** mean */
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,93,rivate static UnivariateStatistic mean = new Mean();
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,95,** variance */
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,96,rivate static UnivariateStatistic variance = new Variance();
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,99, Private Constructor
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,101,rivate StatUtils() {
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,105, The sum of the values that have been added to Univariate.
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,106, @param values Is a double[] containing the values
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,107, @return the sum of the values or Double.NaN if the array is empty
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,109,ublic static double sum(final double[] values) {
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,110,eturn sum.evaluate(values);
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,114, The sum of the values that have been added to Univariate.
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,115, @param values Is a double[] containing the values
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,116, @param begin processing at this point in the array
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,117, @param length processing at this point in the array
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,118, @return the sum of the values or Double.NaN if the array is empty
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,120,ublic static double sum(
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,121,"inal double[] values,"
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,122,"inal int begin,"
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,123,inal int length) {
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,124,"eturn sum.evaluate(values, begin, length);"
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,128, Returns the sum of the squares of the available values.
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,129, @param values Is a double[] containing the values
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,130, @return the sum of the squared values or Double.NaN if the array is empty
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,132,ublic static double sumSq(final double[] values) {
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,133,eturn sumSq.evaluate(values);
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,137, Returns the sum of the squares of the available values.
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,138, @param values Is a double[] containing the values
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,139, @param begin processing at this point in the array
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,140, @param length processing at this point in the array
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,141, @return the sum of the squared values or Double.NaN if the array is empty
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,143,ublic static double sumSq(
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,144,"inal double[] values,"
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,145,"inal int begin,"
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,146,inal int length) {
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,147,"eturn sumSq.evaluate(values, begin, length);"
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,151, Returns the product for this collection of values
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,152, @param values Is a double[] containing the values
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,153, @return the product values or Double.NaN if the array is empty
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,155,ublic static double product(final double[] values) {
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,156,eturn prod.evaluate(values);
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,160, Returns the product for this collection of values
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,161, @param values Is a double[] containing the values
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,162, @param begin processing at this point in the array
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,163, @param length processing at this point in the array
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,164, @return the product values or Double.NaN if the array is empty
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,166,ublic static double product(
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,167,"inal double[] values,"
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,168,"inal int begin,"
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,169,inal int length) {
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,170,"eturn prod.evaluate(values, begin, length);"
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,174, Returns the sum of the natural logs for this collection of values
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,175, @param values Is a double[] containing the values
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,176, @return the sumLog value or Double.NaN if the array is empty
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,178,ublic static double sumLog(final double[] values) {
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,179,eturn sumLog.evaluate(values);
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,183, Returns the sum of the natural logs for this collection of values
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,184, @param values Is a double[] containing the values
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,185, @param begin processing at this point in the array
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,186, @param length processing at this point in the array
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,187, @return the sumLog value or Double.NaN if the array is empty
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,189,ublic static double sumLog(
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,190,"inal double[] values,"
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,191,"inal int begin,"
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,192,inal int length) {
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,193,"eturn sumLog.evaluate(values, begin, length);"
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,197, Returns the <a href=http://www.xycoon.com/arithmetic_mean.htm>
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,198, arithmetic mean </a> of the available values
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,199, @param values Is a double[] containing the values
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,200, @return the mean of the values or Double.NaN if the array is empty
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,202,ublic static double mean(final double[] values) {
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,203,eturn mean.evaluate(values);
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,207, Returns the <a href=http://www.xycoon.com/arithmetic_mean.htm>
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,208, arithmetic mean </a> of the available values
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,209, @param values Is a double[] containing the values
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,210, @param begin processing at this point in the array
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,211, @param length processing at this point in the array
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,212, @return the mean of the values or Double.NaN if the array is empty
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,214,ublic static double mean(
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,215,"inal double[] values,"
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,216,"inal int begin,"
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,217,inal int length) {
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,218,"eturn mean.evaluate(values, begin, length);"
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,222, Returns the variance of the available values. This uses a corrected
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,223, two pass algorithm of the following
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,224," <a href=""http://lib-www.lanl.gov/numerical/bookcpdf/c14-1.pdf"">"
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,225," corrected two pass formula (14.1.8)</a>, and also referenced in:<p/>"
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,226," ""Algorithms for Computing the Sample Variance: Analysis and"
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,227," Recommendations"", Chan, T.F., Golub, G.H., and LeVeque, R.J."
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,228," 1983, American Statistician, vol. 37, pp. 242?247."
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,230, @param values Is a double[] containing the values
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,231," @return the result, Double.NaN if no values for an empty array"
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,232, or 0.0 for a single value set.
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,234,ublic static double variance(final double[] values) {
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,235,eturn variance.evaluate(values);
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,239, Returns the variance of the available values. This uses a corrected
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,240, two pass algorithm of the following
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,241," <a href=""http://lib-www.lanl.gov/numerical/bookcpdf/c14-1.pdf"">"
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,242," corrected two pass formula (14.1.8)</a>, and also referenced in:<p/>"
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,243," ""Algorithms for Computing the Sample Variance: Analysis and"
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,244," Recommendations"", Chan, T.F., Golub, G.H., and LeVeque, R.J."
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,245," 1983, American Statistician, vol. 37, pp. 242?247."
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,247, @param values Is a double[] containing the values
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,248, @param begin processing at this point in the array
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,249, @param length processing at this point in the array
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,250," @return the result, Double.NaN if no values for an empty array"
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,251, or 0.0 for a single value set.
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,253,ublic static double variance(
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,254,"inal double[] values,"
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,255,"inal int begin,"
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,256,inal int length) {
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,257,"eturn variance.evaluate(values, begin, length);"
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,261, Returns the maximum of the available values
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,262, @param values Is a double[] containing the values
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,263, @return the maximum of the values or Double.NaN if the array is empty
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,265,ublic static double max(final double[] values) {
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,266,eturn max.evaluate(values);
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,270, Returns the maximum of the available values
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,271, @param values Is a double[] containing the values
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,272, @param begin processing at this point in the array
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,273, @param length processing at this point in the array
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,274, @return the maximum of the values or Double.NaN if the array is empty
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,276,ublic static double max(
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,277,"inal double[] values,"
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,278,"inal int begin,"
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,279,inal int length) {
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,280,"eturn max.evaluate(values, begin, length);"
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,284, Returns the minimum of the available values
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,285, @param values Is a double[] containing the values
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,286, @return the minimum of the values or Double.NaN if the array is empty
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,288,ublic static double min(final double[] values) {
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,289,eturn min.evaluate(values);
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,293, Returns the minimum of the available values
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,294, @param values Is a double[] containing the values
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,295, @param begin processing at this point in the array
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,296, @param length processing at this point in the array
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,297, @return the minimum of the values or Double.NaN if the array is empty
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,299,ublic static double min(
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,300,"inal double[] values,"
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,301,"inal int begin,"
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,302,inal int length) {
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,303,"eturn min.evaluate(values, begin, length);"
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,2," The Apache Software License, Version 1.1"
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,5, reserved.
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,7," Redistribution and use in source and binary forms, with or without"
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,8," modification, are permitted provided that the following conditions"
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,9, are met:
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,11, 1. Redistributions of source code must retain the above copyright
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,12,"    notice, this list of conditions and the following disclaimer."
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,14, 2. Redistributions in binary form must reproduce the above copyright
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,15,"    notice, this list of conditions and the following disclaimer in"
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,16,    the documentation and/or other materials provided with the
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,17,    distribution.
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,19," 3. The end-user documentation included with the redistribution, if"
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,20,"    any, must include the following acknowledgement:"
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,21,"       ""This product includes software developed by the"
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,22,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,23,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,24,    if and wherever such third-party acknowledgements normally appear.
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,26," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,27,"    Foundation"" must not be used to endorse or promote products derived"
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,28,    from this software without prior written permission. For written
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,29,"    permission, please contact apache@apache.org."
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,31," 5. Products derived from this software may not be called ""Apache"""
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,32,"    nor may ""Apache"" appear in their name without prior written"
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,33,    permission of the Apache Software Foundation.
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,38, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,39," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,46, SUCH DAMAGE.
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,49, This software consists of voluntary contributions made by many
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,50, individuals on behalf of the Apache Software Foundation.  For more
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,51," information on the Apache Software Foundation, please see"
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,52, <http://www.apache.org/>.
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,54,ackage org.apache.commons.math.stat;
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,57, StoreUnivariate implements the Univariate interface
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,58, but maintains the set of values which contribute to
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,59, the values being returned.  This implementation of
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,60, Univariate provides additional percentile functionality
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,61, such as.  This additional functionality comes with
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,62, a price of increased storage costs.
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,63, @version $Revision: 1.9 $ $Date: 2003/10/16 15:24:30 $
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,65,ublic interface StoreUnivariate extends Univariate {
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,68, Returns the current set of values in an array of double primitives.
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,69, The order of addition is preserved.  The returned array is a fresh
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,70," copy of the underlying data -- i.e., it is not a reference to the"
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,71, stored data.
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,73, @return returns the current set of numbers in the order in which they
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,74,         were added to this set
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,76,ouble[] getValues();
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,79," Returns the current set of values in an array of double primitives,"
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,80, sorted in ascending order.  The returned array is a fresh
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,81," copy of the underlying data -- i.e., it is not a reference to the"
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,82, stored data.
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,83, @return returns the current set of
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,84, numbers sorted in ascending order
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,86,ouble[] getSortedValues();
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,89, Returns the element at the specified index
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,90, @param index The Index of the element
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,91, @return return the element at the specified index
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,93,ouble getElement(int index);
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,96, Returns an estimate for the pth percentile of the stored values.
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,97, This estimate follows the interpolation-adjusted defintion presented
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,98," <a href=""http://www.utdallas.edu/~ammann/stat5311/node8.html"">here</a>"
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,99, <p/>
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,100, <strong>Preconditions</strong>:<ul>
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,101, <li><code>0 &lt; p &lt; 100</code> (otherwise an
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,102, <code>IllegalArgumentException</code> is thrown)</li>
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,103, <li>at least one value must be stored (returns <code>Double.NaN
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,104,     </code> otherwise)</li>
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,105, </ul>
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,107, @param p the requested percentile (scaled from 0 - 100)
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,108, @return An estimate for the pth percentile of the stored data
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,109, values
False,src/java/org/apache/commons/math/stat/StoreUnivariate.java,src/java/org/apache/commons/math/stat/StoreUnivariate.java,111,ouble getPercentile(double p);
False,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,2," The Apache Software License, Version 1.1"
False,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
False,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,5, reserved.
False,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,7," Redistribution and use in source and binary forms, with or without"
False,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,8," modification, are permitted provided that the following conditions"
False,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,9, are met:
False,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,11, 1. Redistributions of source code must retain the above copyright
False,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,12,"    notice, this list of conditions and the following disclaimer."
False,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,14, 2. Redistributions in binary form must reproduce the above copyright
False,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,15,"    notice, this list of conditions and the following disclaimer in"
False,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,16,    the documentation and/or other materials provided with the
False,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,17,    distribution.
False,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,19," 3. The end-user documentation included with the redistribution, if"
False,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,20,"    any, must include the following acknowledgement:"
False,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,21,"       ""This product includes software developed by the"
False,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,22,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,23,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,24,    if and wherever such third-party acknowledgements normally appear.
False,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,26," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,27,"    Foundation"" must not be used to endorse or promote products derived"
False,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,28,    from this software without prior written permission. For written
False,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,29,"    permission, please contact apache@apache.org."
False,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,31," 5. Products derived from this software may not be called ""Apache"""
False,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,32,"    nor may ""Apache"" appear in their name without prior written"
False,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,33,    permission of the Apache Software Foundation.
False,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,38, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,39," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,46, SUCH DAMAGE.
False,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,49, This software consists of voluntary contributions made by many
False,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,50, individuals on behalf of the Apache Software Foundation.  For more
False,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,51," information on the Apache Software Foundation, please see"
False,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,52, <http://www.apache.org/>.
False,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,54,ackage org.apache.commons.math.stat;
False,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,56,mport org.apache.commons.math.stat.univariate.UnivariateStatistic;
False,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,57,mport org.apache.commons.math.util.ContractableDoubleArray;
False,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,60, @version $Revision: 1.10 $ $Date: 2003/10/16 15:24:30 $
False,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,62,ublic class StoreUnivariateImpl extends AbstractStoreUnivariate {
False,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,64,** A contractable double array is used.  memory is reclaimed when
False,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,65, the storage of the array becomes too empty.
False,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,67,rotected ContractableDoubleArray eDA;
False,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,70, Construct a StoreUnivariateImpl
False,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,72,ublic StoreUnivariateImpl() {
False,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,73,DA = new ContractableDoubleArray();
False,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,77, @see org.apache.commons.math.stat.StoreUnivariate#getValues()
False,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,79,ublic double[] getValues() {
False,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,81,ouble[] copiedArray = new double[eDA.getNumElements()];
False,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,82,ystem.arraycopy(
False,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,83,"DA.getElements(),"
False,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,84,","
False,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,85,"opiedArray,"
False,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,86,","
False,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,87,DA.getNumElements());
False,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,88,eturn copiedArray;
False,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,92, @see org.apache.commons.math.stat.StoreUnivariate#getElement(int)
False,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,94,ublic double getElement(int index) {
False,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,95,eturn eDA.getElement(index);
False,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,99, @see org.apache.commons.math.stat.Univariate#getN()
False,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,101,ublic int getN() {
False,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,102,eturn eDA.getNumElements();
False,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,106, @see org.apache.commons.math.stat.Univariate#addValue(double)
False,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,108,ublic synchronized void addValue(double v) {
False,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,109,f (windowSize != Univariate.INFINITE_WINDOW) {
False,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,110,f (getN() == windowSize) {
False,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,111,DA.addElementRolling(v);
False,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,112, else if (getN() < windowSize) {
False,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,113,DA.addElement(v);
False,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,114, else {
False,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,115,tring msg =
False,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,116,"A window Univariate had more element than "" +"
False,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,117,"the windowSize.  This is an inconsistent state."";"
False,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,118,hrow new RuntimeException(msg);
False,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,120, else {
False,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,121,DA.addElement(v);
False,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,126, @see org.apache.commons.math.stat.Univariate#clear()
False,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,128,ublic synchronized void clear() {
False,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,129,uper.clear();
False,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,130,DA.clear();
False,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,134, @see org.apache.commons.math.stat.Univariate#setWindowSize(int)
False,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,136,ublic synchronized void setWindowSize(int windowSize) {
False,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,137,his.windowSize = windowSize;
False,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,139,/ We need to check to see if we need to discard elements
False,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,140,/ from the front of the array.  If the windowSize is less than
False,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,141,/ the current number of elements.
False,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,142,f (windowSize < eDA.getNumElements()) {
False,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,143,DA.discardFrontElements(eDA.getNumElements() - windowSize);
False,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,148, Apply the given statistic to this univariate collection.
False,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,149, @param stat the statistic to apply
False,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,150, @return the computed value of the statistic.
False,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,152,ublic double apply(UnivariateStatistic stat) {
False,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,153,f (eDA != null) {
False,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,154,"eturn stat.evaluate(eDA.getValues(), eDA.start(), eDA.getNumElements());"
False,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,156,eturn Double.NaN;
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,2," The Apache Software License, Version 1.1"
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,5, reserved.
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,7," Redistribution and use in source and binary forms, with or without"
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,8," modification, are permitted provided that the following conditions"
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,9, are met:
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,11, 1. Redistributions of source code must retain the above copyright
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,12,"    notice, this list of conditions and the following disclaimer."
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,14, 2. Redistributions in binary form must reproduce the above copyright
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,15,"    notice, this list of conditions and the following disclaimer in"
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,16,    the documentation and/or other materials provided with the
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,17,    distribution.
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,19," 3. The end-user documentation included with the redistribution, if"
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,20,"    any, must include the following acknowledgement:"
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,21,"       ""This product includes software developed by the"
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,22,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,23,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,24,    if and wherever such third-party acknowledgements normally appear.
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,26," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,27,"    Foundation"" must not be used to endorse or promote products derived"
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,28,    from this software without prior written permission. For written
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,29,"    permission, please contact apache@apache.org."
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,31," 5. Products derived from this software may not be called ""Apache"""
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,32,"    nor may ""Apache"" appear in their name without prior written"
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,33,    permission of the Apache Software Foundation.
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,38, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,39," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,46, SUCH DAMAGE.
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,49, This software consists of voluntary contributions made by many
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,50, individuals on behalf of the Apache Software Foundation.  For more
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,51," information on the Apache Software Foundation, please see"
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,52, <http://www.apache.org/>.
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,54,ackage org.apache.commons.math.stat;
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,56, A collection of commonly used test statistics and statistical tests.
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,58, @version $Revision: 1.6 $ $Date: 2003/10/16 15:24:30 $
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,60,ublic interface TestStatistic {
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,63," Computes the <a href=""http://www.itl.nist.gov/div898/handbook/eda"
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,64," /section3/eda35f.htm"">Chi-Square statistic</a> comparing"
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,65, <code>observed</code> and <code>expected</code> freqeuncy counts.
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,66, <p>
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,67, This statistic can be used to perform Chi-Square tests.
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,68, <p>
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,69, <strong>Preconditions</strong>: <ul>
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,70, <li>Expected counts must all be positive.
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,71, </li>
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,72, <li>Observed counds must all be >= 0.
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,73, </li>
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,74, <li>The observed and expected arrays must have the same length and
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,75, their common length must be at least 2.
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,76, </li></ul><p>
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,77," If any of the preconditions are not met, an"
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,78, <code>IllegalArgumentException</code> is thrown.
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,80, @param observed array of observed frequency counts
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,81, @param expected array of exptected frequency counts
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,82, @return chiSquare statistic
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,83, @throws IllegalArgumentException if preconditions are not met
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,85,"ouble chiSquare(double[] expected, double[] observed)"
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,86,hrows IllegalArgumentException;
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,89," Returns the <i>observed significance level</i>, or <a href="
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,90," ""http://www.cas.lancs.ac.uk/glossary_v1.1/hyptest.html#pvalue"">"
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,91," p-value</a>, associated with a <a href=""http://www.itl.nist.gov/div898/"
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,92," handbook/eda/section3/eda35f.htm"">Chi-square goodness of fit test</a>"
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,93, comparing the <code>observed</code> frequency counts to those in the
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,94, <code>expected</code> array.
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,95, <p>
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,96, The number returned is the smallest significance level
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,97, at which one can reject the null hypothesis that the observed counts
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,98, conform to the frequency distribution described by the expected counts.
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,99, <p>
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,100, <strong>Preconditions</strong>: <ul>
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,101, <li>Expected counts must all be positive.
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,102, </li>
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,103, <li>Observed counds must all be >= 0.
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,104, </li>
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,105, <li>The observed and expected arrays must have the same length and
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,106, their common length must be at least 2.
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,107, </li></ul><p>
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,108," If any of the preconditions are not met, an"
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,109, <code>IllegalArgumentException</code> is thrown.
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,111, @param observed array of observed frequency counts
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,112, @param expected array of exptected frequency counts
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,113, @return p-value
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,114, @throws IllegalArgumentException if preconditions are not met
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,116,"ouble chiSquareTest(double[] expected, double[] observed)"
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,117,hrows IllegalArgumentException;
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,120," Performs a <a href=""http://www.itl.nist.gov/div898/handbook/eda/"
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,121," section3/eda35f.htm"">Chi-square goodness of fit test</a> evaluating the"
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,122, null hypothesis that the observed counts conform to the frequency
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,123," distribution described by the expected counts, with significance level"
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,124, <code>alpha</code>.
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,125, <p>
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,126, <strong>Example:</strong><br>
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,127, To test the hypothesis that <code>observed</code> follows
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,128," <code>expected</code> at the 99% level, use <p>"
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,129," <code>chiSquareTest(expected, observed, 0.01) </code>"
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,130, <p>
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,131, <strong>Preconditions</strong>: <ul>
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,132, <li>Expected counts must all be positive.
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,133, </li>
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,134, <li>Observed counds must all be >= 0.
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,135, </li>
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,136, <li>The observed and expected arrays must have the same length and
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,137, their common length must be at least 2.
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,138, <li> <code> 0 < alpha < 0.5 </code>
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,139, </li></ul><p>
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,140," If any of the preconditions are not met, an"
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,141, <code>IllegalArgumentException</code> is thrown.
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,143, @param observed array of observed frequency counts
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,144, @param expected array of exptected frequency counts
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,145, @param alpha significance level of the test
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,146, @return true iff null hypothesis can be rejected with confidence
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,147, 1 - alpha
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,148, @throws IllegalArgumentException if preconditions are not met
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,150,"oolean chiSquareTest(double[] expected, double[] observed, double alpha)"
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,151,hrows IllegalArgumentException;
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,154," Computes a <a href=""http://www.itl.nist.gov/div898/handbook/prc/"
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,155," section2/prc22.htm#formula""> t statistic </a> given observed values and"
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,156, a comparison constant.
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,157, <p>
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,158, This statistic can be used to perform a one sample t-test for the mean.
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,159, <p>
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,160, <strong>Preconditions</strong>: <ul>
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,161, <li>The observed array length must be at least 2.
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,162, </li></ul>
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,164, @param mu comparison constant
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,165, @param observed array of values
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,166, @return t statistic
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,167, @throws IllegalArgumentException if input array length is less than 2
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,169,"ouble t(double mu, double[] observed)"
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,170,hrows IllegalArgumentException;
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,173," Computes a <a href=""http://www.itl.nist.gov/div898/handbook/prc/section3"
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,174," /prc31.htm"">2-sample t statistic </a>, without the assumption of equal"
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,175, sample variances.
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,176, <p>
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,177, This statistic can be used to perform a two-sample t-test to compare
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,178, sample means.
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,179, <p>
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,180, <strong>Preconditions</strong>: <ul>
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,181, <li>The observed array lengths must both be at least 5.
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,182, </li></ul>
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,184, @param sample1 array of sample data values
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,185, @param sample2 array of sample data values
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,186, @return t statistic
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,187, @throws IllegalArgumentException if the precondition is not met
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,189,"ouble t(double[] sample1, double[] sample2)"
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,190,hrows IllegalArgumentException;
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,193," Returns the <i>observed significance level</i>, or <a href="
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,194," ""http://www.cas.lancs.ac.uk/glossary_v1.1/hyptest.html#pvalue"">"
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,195," p-value</a>, associated with a two-sample, two-tailed t-test"
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,196, comparing the means of the input arrays.
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,197, <p>
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,198, The number returned is the smallest significance level
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,199, at which one can reject the null hypothesis that the two means are
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,200, equal in favor of the two-sided alternative that they are different.
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,201," For a one-sided test, divide the returned value by 2."
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,202, <p>
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,203, The test does not assume that the underlying popuation variances are
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,204, equal and it uses approximated degrees of freedom computed from the
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,205," sample data as described <a href=""http://www.itl.nist.gov/div898/"
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,206," handbook/prc/section3/prc31.htm"">here</a>"
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,207, <p>
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,208, <strong>Usage Note:</strong><br>
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,209, The validity of the p-value depends on the assumptions of the parametric
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,210," t-test procedure, as discussed <a href=""http://www.basic.nwu.edu/"
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,211," statguidefiles/ttest_unpaired_ass_viol.html"">here</a>"
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,212, <p>
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,213, <strong>Preconditions</strong>: <ul>
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,214, <li>The observed array lengths must both be at least 5.
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,215, </li></ul>
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,217, @param sample1 array of sample data values
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,218, @param sample2 array of sample data values
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,219, @return p-value for t-test
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,220, @throws IllegalArgumentException if the precondition is not met
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,222,"ouble tTest(double[] sample1, double[] sample2)"
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,223,hrows IllegalArgumentException;
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,226," Performs a <a href=""http://www.itl.nist.gov/div898/handbook/eda/"
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,227," section3/eda353.htm"">two-sided t-test</a> evaluating the null"
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,228, hypothesis that <code>sample1</code> and <code>sample2</code> are drawn
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,229," from populations with the same mean, with significance level"
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,230, <code>alpha</code>.
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,231, <p>
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,232, Returns <code>true</code> iff the null hypothesis that the means are
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,233, equal can be rejected with confidence <code>1 - alpha</code>.  To
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,234," perform a 1-sided test, use <code>alpha / 2</code>"
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,235, <p>
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,236, <strong>Examples:</strong><br><ol>
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,237, <li>To test the (2-sided) hypothesis <code>mean 1 = mean 2 </code> at
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,238," the 95% level, use <br><code>tTest(sample1, sample2, 0.05) </code>"
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,239, </li>
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,240, <li>To test the (one-sided) hypothesis <code> mean 1 < mean 2 </code>
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,241," at the 99% level, first verify that the measured mean of"
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,242, <code>sample 1</code> is less than the mean of <code>sample 2</code>
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,243," and then use <br><code>tTest(sample1, sample2, 0.005) </code>"
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,244, </li></ol>
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,245, <p>
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,246, The test does not assume that the underlying popuation variances are
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,247, equal and it uses approximated degrees of freedom computed from the
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,248," sample data as described <a href=""http://www.itl.nist.gov/div898/"
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,249," handbook/prc/section3/prc31.htm"">here</a>"
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,250, <p>
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,251, <strong>Usage Note:</strong><br>
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,252, The validity of the test depends on the assumptions of the parametric
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,253," t-test procedure, as discussed <a href=""http://www.basic.nwu.edu/"
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,254," statguidefiles/ttest_unpaired_ass_viol.html"">here</a>"
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,255, <p>
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,256, <strong>Preconditions</strong>: <ul>
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,257, <li>The observed array lengths must both be at least 5.
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,258, </li>
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,259, <li> <code> 0 < alpha < 0.5 </code>
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,260, </li></ul>
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,262, @param sample1 array of sample data values
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,263, @param sample2 array of sample data values
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,264, @param alpha significance level of the test
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,265, @return true if the null hypothesis can be rejected with
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,266, confidence 1 - alpha
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,267, @throws IllegalArgumentException if the preconditions are not met
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,269,"oolean tTest(double[] sample1, double[] sample2, double alpha)"
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,270,hrows IllegalArgumentException;
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,273," Performs a <a href=""http://www.itl.nist.gov/div898/handbook/eda/"
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,274," section3/eda353.htm"">two-sided t-test</a> evaluating the null"
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,275, hypothesis that the mean of the population from which
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,276, <code>sample</code> is drawn equals <code>mu</code>.
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,277, <p>
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,278, Returns <code>true</code> iff the null hypothesis can be
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,279, rejected with confidence <code>1 - alpha</code>.  To
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,280," perform a 1-sided test, use <code>alpha / 2</code>"
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,281, <p>
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,282, <strong>Examples:</strong><br><ol>
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,283, <li>To test the (2-sided) hypothesis <code>sample mean = mu </code> at
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,284," the 95% level, use <br><code>tTest(mu, sample, 0.05) </code>"
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,285, </li>
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,286, <li>To test the (one-sided) hypothesis <code> sample mean < mu </code>
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,287," at the 99% level, first verify that the measured sample mean is less"
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,288, than <code>mu</code> and then use
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,289," <br><code>tTest(mu, sample, 0.005) </code>"
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,290, </li></ol>
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,291, <p>
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,292, <strong>Usage Note:</strong><br>
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,293, The validity of the test depends on the assumptions of the one-sample
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,294," parametric t-test procedure, as discussed"
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,295," <a href=""http://www.basic.nwu.edu/statguidefiles/"
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,296," sg_glos.html#one-sample"">here</a>"
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,297, <p>
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,298, <strong>Preconditions</strong>: <ul>
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,299, <li>The observed array length must be at least 5.
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,300, </li></ul>
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,302, @param mu constant value to compare sample mean against
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,303, @param sample array of sample data values
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,304, @param alpha significance level of the test
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,305, @return p-value
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,306, @throws IllegalArgumentException if the precondition is not met
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,308,"oolean tTest(double mu, double[] sample, double alpha)"
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,309,hrows IllegalArgumentException;
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,312," Returns the <i>observed significance level</i>, or <a href="
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,313," ""http://www.cas.lancs.ac.uk/glossary_v1.1/hyptest.html#pvalue"">"
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,314," p-value</a>, associated with a one-sample, two-tailed t-test"
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,315, comparing the mean of the input array with the constant <code>mu</code>.
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,316, <p>
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,317, The number returned is the smallest significance level
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,318, at which one can reject the null hypothesis that the mean equals
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,319, <code>mu</code> in favor of the two-sided alternative that the mean
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,320," is different from <code>mu</code>. For a one-sided test, divide the"
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,321, returned value by 2.
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,322, <p>
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,323, <strong>Usage Note:</strong><br>
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,324, The validity of the test depends on the assumptions of the parametric
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,325," t-test procedure, as discussed <a href=""http://www.basic.nwu.edu/"
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,326," statguidefiles/ttest_unpaired_ass_viol.html"">here</a>"
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,327, <p>
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,328, <strong>Preconditions</strong>: <ul>
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,329, <li>The observed array length must be at least 5.
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,330, </li></ul>
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,332, @param mu constant value to compare sample mean against
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,333, @param sample array of sample data values
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,334, @return p-value
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,335, @throws IllegalArgumentException if the precondition is not met
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,337,"ouble tTest(double mu, double[] sample)"
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,338,hrows IllegalArgumentException;
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,341," Computes a <a href=""http://www.itl.nist.gov/div898/handbook/prc/"
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,342," section2/prc22.htm#formula""> t statistic </a> to use in comparing"
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,343, the dataset described by <code>sampleStats</code> to <code>mu</code>.
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,344, <p>
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,345, This statistic can be used to perform a one sample t-test for the mean.
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,346, <p>
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,347, <strong>Preconditions</strong>: <ul>
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,348, <li><code>observed.getN() > = 2</code>.
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,349, </li></ul>
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,351, @param mu comparison constant
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,352, @param sampleStats Univariate holding sample summary statitstics
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,353, @return t statistic
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,354, @throws IllegalArgumentException if the precondition is not met
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,356,"ouble t(double mu, Univariate sampleStats)"
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,357,hrows IllegalArgumentException;
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,360," Computes a <a href=""http://www.itl.nist.gov/div898/handbook/prc/section3"
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,361," /prc31.htm"">2-sample t statistic </a>, comparing the datasets described"
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,362, by two Univariates without the assumption of equal sample variances.
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,363, <p>
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,364, This statistic can be used to perform a two-sample t-test to compare
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,365, sample means.
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,366, <p>
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,367, <strong>Preconditions</strong>: <ul>
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,368, <li>The datasets described by the two Univariates must each contain
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,369, at least 5 observations.
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,370, </li></ul>
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,372, @param sampleStats1 Univariate describing data from the first sample
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,373, @param sampleStats2 Univariate describing data from the second sample
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,374, @return t statistic
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,375, @throws IllegalArgumentException if the precondition is not met
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,377,"ouble t(Univariate sampleStats1, Univariate sampleStats2)"
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,378,hrows IllegalArgumentException;
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,381," Returns the <i>observed significance level</i>, or <a href="
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,382," ""http://www.cas.lancs.ac.uk/glossary_v1.1/hyptest.html#pvalue"">"
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,383," p-value</a>, associated with a two-sample, two-tailed t-test"
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,384, comparing the means of the datasets described by two Univariates.
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,385, <p>
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,386, The number returned is the smallest significance level
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,387, at which one can reject the null hypothesis that the two means are
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,388, equal in favor of the two-sided alternative that they are different.
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,389," For a one-sided test, divide the returned value by 2."
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,390, <p>
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,391, The test does not assume that the underlying popuation variances are
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,392, equal and it uses approximated degrees of freedom computed from the
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,393," sample data as described <a href=""http://www.itl.nist.gov/div898/"
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,394," handbook/prc/section3/prc31.htm"">here</a>"
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,395, <p>
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,396, <strong>Usage Note:</strong><br>
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,397, The validity of the p-value depends on the assumptions of the parametric
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,398," t-test procedure, as discussed <a href=""http://www.basic.nwu.edu/"
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,399," statguidefiles/ttest_unpaired_ass_viol.html"">here</a>"
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,400, <p>
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,401, <strong>Preconditions</strong>: <ul>
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,402, <li>The datasets described by the two Univariates must each contain
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,403, at least 5 observations.
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,404, </li></ul>
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,406, @param sampleStats1 Univariate describing data from the first sample
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,407, @param sampleStats2 Univariate describing data from the second sample
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,408, @return p-value for t-test
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,409, @throws IllegalArgumentException if the precondition is not met
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,411,"ouble tTest(Univariate sampleStats1, Univariate sampleStats2)"
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,412,hrows IllegalArgumentException;
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,415," Performs a <a href=""http://www.itl.nist.gov/div898/handbook/eda/"
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,416," section3/eda353.htm"">two-sided t-test</a> evaluating the null"
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,417, hypothesis that <code>sampleStats1</code> and <code>sampleStats2</code>
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,418," describe datasets drawn from populations with the same mean, with"
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,419, significance level <code>alpha</code>.
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,420, <p>
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,421, Returns <code>true</code> iff the null hypothesis that the means are
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,422, equal can be rejected with confidence <code>1 - alpha</code>.  To
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,423," perform a 1-sided test, use <code>alpha / 2</code>"
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,424, <p>
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,425, <strong>Examples:</strong><br><ol>
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,426, <li>To test the (2-sided) hypothesis <code>mean 1 = mean 2 </code> at
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,427," the 95% level, use"
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,428," <br><code>tTest(sampleStats1, sampleStats2, 0.05) </code>"
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,429, </li>
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,430, <li>To test the (one-sided) hypothesis <code> mean 1 < mean 2 </code>
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,431," at the 99% level, first verify that the measured mean of"
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,432, <code>sample 1</code> is less than the mean of <code>sample 2</code>
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,433," and then use <br><code>tTest(sampleStats1, sampleStats2, 0.005) </code>"
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,434, </li></ol>
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,435, <p>
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,436, The test does not assume that the underlying popuation variances are
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,437, equal and it uses approximated degrees of freedom computed from the
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,438," sample data as described <a href=""http://www.itl.nist.gov/div898/"
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,439," handbook/prc/section3/prc31.htm"">here</a>"
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,440, <p>
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,441, <strong>Usage Note:</strong><br>
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,442, The validity of the test depends on the assumptions of the parametric
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,443," t-test procedure, as discussed <a href=""http://www.basic.nwu.edu/"
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,444," statguidefiles/ttest_unpaired_ass_viol.html"">here</a>"
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,445, <p>
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,446, <strong>Preconditions</strong>: <ul>
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,447, <li>The datasets described by the two Univariates must each contain
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,448, at least 5 observations.
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,449, </li>
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,450, <li> <code> 0 < alpha < 0.5 </code>
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,451, </li></ul>
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,453, @param sampleStats1 Univariate describing sample data values
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,454, @param sampleStats2 Univariate describing sample data values
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,455, @param alpha significance level of the test
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,456, @return true if the null hypothesis can be rejected with
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,457, confidence 1 - alpha
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,458, @throws IllegalArgumentException if the preconditions are not met
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,460,"oolean tTest(Univariate sampleStats1, Univariate sampleStats2,"
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,461,ouble alpha)
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,462,hrows IllegalArgumentException;
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,465," Performs a <a href=""http://www.itl.nist.gov/div898/handbook/eda/"
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,466," section3/eda353.htm"">two-sided t-test</a> evaluating the null"
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,467, hypothesis that the mean of the population from which the dataset
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,468, described by <code>stats</code> is drawn equals <code>mu</code>.
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,469, <p>
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,470, Returns <code>true</code> iff the null hypothesis can be
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,471, rejected with confidence <code>1 - alpha</code>.  To
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,472," perform a 1-sided test, use <code>alpha / 2</code>"
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,473, <p>
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,474, <strong>Examples:</strong><br><ol>
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,475, <li>To test the (2-sided) hypothesis <code>sample mean = mu </code> at
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,476," the 95% level, use <br><code>tTest(mu, sampleStats, 0.05) </code>"
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,477, </li>
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,478, <li>To test the (one-sided) hypothesis <code> sample mean < mu </code>
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,479," at the 99% level, first verify that the measured sample mean is less"
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,480, than <code>mu</code> and then use
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,481," <br><code>tTest(mu, sampleStats, 0.005) </code>"
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,482, </li></ol>
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,483, <p>
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,484, <strong>Usage Note:</strong><br>
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,485, The validity of the test depends on the assumptions of the one-sample
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,486," parametric t-test procedure, as discussed"
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,487," <a href=""http://www.basic.nwu.edu/statguidefiles/"
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,488," sg_glos.html#one-sample"">here</a>"
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,489, <p>
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,490, <strong>Preconditions</strong>: <ul>
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,491, <li>The sample must include at least 5 observations.
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,492, </li></ul>
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,494, @param mu constant value to compare sample mean against
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,495, @param sampleStats Univariate describing sample data values
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,496, @param alpha significance level of the test
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,497, @return p-value
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,498, @throws IllegalArgumentException if the precondition is not met
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,500,"oolean tTest(double mu, Univariate sampleStats, double alpha)"
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,501,hrows IllegalArgumentException;
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,504," Returns the <i>observed significance level</i>, or <a href="
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,505," ""http://www.cas.lancs.ac.uk/glossary_v1.1/hyptest.html#pvalue"">"
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,506," p-value</a>, associated with a one-sample, two-tailed t-test"
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,507, comparing the mean of the dataset described by <code>sampleStats</code>
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,508, with the constant <code>mu</code>.
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,509, <p>
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,510, The number returned is the smallest significance level
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,511, at which one can reject the null hypothesis that the mean equals
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,512, <code>mu</code> in favor of the two-sided alternative that the mean
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,513," is different from <code>mu</code>. For a one-sided test, divide the"
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,514, returned value by 2.
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,515, <p>
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,516, <strong>Usage Note:</strong><br>
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,517, The validity of the test depends on the assumptions of the parametric
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,518," t-test procedure, as discussed <a href=""http://www.basic.nwu.edu/"
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,519," statguidefiles/ttest_unpaired_ass_viol.html"">here</a>"
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,520, <p>
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,521, <strong>Preconditions</strong>: <ul>
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,522, <li>The sample must contain at least 5 observations.
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,523, </li></ul>
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,525, @param mu constant value to compare sample mean against
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,526, @param sampleStats Univariate describing sample data
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,527, @return p-value
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,528, @throws IllegalArgumentException if the precondition is not met
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,530,"ouble tTest(double mu, Univariate sampleStats)"
False,src/java/org/apache/commons/math/stat/TestStatistic.java,src/java/org/apache/commons/math/stat/TestStatistic.java,531,hrows IllegalArgumentException;
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,2," The Apache Software License, Version 1.1"
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,5, reserved.
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,7," Redistribution and use in source and binary forms, with or without"
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,8," modification, are permitted provided that the following conditions"
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,9, are met:
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,11, 1. Redistributions of source code must retain the above copyright
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,12,"    notice, this list of conditions and the following disclaimer."
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,14, 2. Redistributions in binary form must reproduce the above copyright
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,15,"    notice, this list of conditions and the following disclaimer in"
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,16,    the documentation and/or other materials provided with the
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,17,    distribution.
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,19," 3. The end-user documentation included with the redistribution, if"
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,20,"    any, must include the following acknowledgement:"
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,21,"       ""This product includes software developed by the"
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,22,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,23,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,24,    if and wherever such third-party acknowledgements normally appear.
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,26," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,27,"    Foundation"" must not be used to endorse or promote products derived"
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,28,    from this software without prior written permission. For written
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,29,"    permission, please contact apache@apache.org."
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,31," 5. Products derived from this software may not be called ""Apache"""
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,32,"    nor may ""Apache"" appear in their name without prior written"
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,33,    permission of the Apache Software Foundation.
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,38, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,39," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,46, SUCH DAMAGE.
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,49, This software consists of voluntary contributions made by many
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,50, individuals on behalf of the Apache Software Foundation.  For more
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,51," information on the Apache Software Foundation, please see"
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,52, <http://www.apache.org/>.
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,55,ackage org.apache.commons.math.stat;
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,57,mport org.apache.commons.math.stat.distribution.DistributionFactory;
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,58,mport org.apache.commons.math.stat.distribution.TDistribution;
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,59,mport org.apache.commons.math.stat.distribution.ChiSquaredDistribution;
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,62, Implements test statistics defined in the TestStatistic interface.
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,64, @version $Revision: 1.6 $ $Date: 2003/10/16 15:24:30 $
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,66,ublic class TestStatisticImpl implements TestStatistic {
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,69, Default constructor
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,71,ublic TestStatisticImpl() {
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,75, @param observed array of observed frequency counts
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,76, @param expected array of expected frequency counts
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,77, @return chi-square test statistic
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,78, @throws IllegalArgumentException if preconditions are not met
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,79, or length is less than 2
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,81,"ublic double chiSquare(double[] expected, double[] observed)"
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,82,hrows IllegalArgumentException {
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,83,ouble sumSq = 0.0d;
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,84,ouble dev = 0.0d;
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,85,f ((expected.length < 2) || (expected.length != observed.length)) {
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,86,hrow new IllegalArgumentException
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,87,"""observed, expected array lengths incorrect"");"
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,89,f ((StatUtils.min(expected) <= 0) || (StatUtils.min(observed) < 0)) {
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,90,hrow new IllegalArgumentException
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,91,"""observed counts must be non-negative,"" +"
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,92," expected counts must be postive"");"
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,94,or (int i = 0; i < observed.length; i++) {
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,95,ev = (observed[i] - expected[i]);
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,96,umSq += dev * dev / expected[i];
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,99,eturn sumSq;
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,103, @param observed array of observed frequency counts
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,104, @param expected array of exptected frequency counts
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,105, @return p-value
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,106, @throws IllegalArgumentException if preconditions are not met
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,108,"ublic double chiSquareTest(double[] expected, double[] observed)"
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,109,hrows IllegalArgumentException {
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,110,hiSquaredDistribution chiSquaredDistribution =
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,111,istributionFactory.newInstance().createChiSquareDistribution
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,112,(double) expected.length - 1);
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,113,eturn 1 - chiSquaredDistribution.cummulativeProbability(
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,114,"hiSquare(expected, observed));"
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,118, @param observed array of observed frequency counts
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,119, @param expected array of exptected frequency counts
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,120, @param alpha significance level of the test
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,121, @return true iff null hypothesis can be rejected with confidence
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,122, 1 - alpha
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,123, @throws IllegalArgumentException if preconditions are not met
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,125,"ublic boolean chiSquareTest(double[] expected, double[] observed,"
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,126,ouble alpha)
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,127,hrows IllegalArgumentException {
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,128,f ((alpha <= 0) || (alpha > 0.5)) {
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,129,hrow new IllegalArgumentException
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,130,"""bad significance level: "" + alpha);"
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,132,"eturn (chiSquareTest(expected, observed) < alpha);"
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,136, @param mu comparison constant
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,137, @param observed array of values
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,138, @return t statistic
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,139, @throws IllegalArgumentException if input array length is less than 5
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,141,"ublic double t(double mu, double[] observed)"
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,142,hrows IllegalArgumentException {
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,143,f ((observed == null) || (observed.length < 5)) {
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,144,hrow new IllegalArgumentException
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,145,"""insufficient data for t statistic"");"
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,147,"eturn t(StatUtils.mean(observed), mu, StatUtils.variance(observed),"
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,148,bserved.length);
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,152, @param mu constant value to compare sample mean against
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,153, @param sample array of sample data values
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,154, @param alpha significance level of the test
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,155, @return p-value
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,156, @throws IllegalArgumentException if the precondition is not met
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,158,"ublic boolean tTest(double mu, double[] sample, double alpha)"
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,159,hrows IllegalArgumentException {
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,160,f ((alpha <= 0) || (alpha > 0.5)) {
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,161,hrow new IllegalArgumentException
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,162,"""bad significance level: "" + alpha);"
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,164,"eturn (tTest(mu, sample) < alpha);"
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,168, @param sample1 array of sample data values
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,169, @param sample2 array of sample data values
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,170, @return t-statistic
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,171, @throws IllegalArgumentException if the precondition is not met
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,173,"ublic double t(double[] sample1, double[] sample2)"
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,174,hrows IllegalArgumentException {
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,175,f ((sample1 == null) || (sample2 == null ||
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,176,"ath.min(sample1.length, sample2.length) < 5)) {"
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,177,hrow new IllegalArgumentException
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,178,"""insufficient data for t statistic"");"
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,180,"eturn t(StatUtils.mean(sample1), StatUtils.mean(sample2),"
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,181,"tatUtils.variance(sample1), StatUtils.variance(sample2),"
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,182,"double) sample1.length, (double) sample2.length);"
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,187, @param sample1 array of sample data values
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,188, @param sample2 array of sample data values
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,189, @return tTest p-value
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,190, @throws IllegalArgumentException if the precondition is not met
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,192,"ublic double tTest(double[] sample1, double[] sample2)"
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,193,hrows IllegalArgumentException  {
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,194,f ((sample1 == null) || (sample2 == null ||
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,195,"ath.min(sample1.length, sample2.length) < 5)) {"
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,196,hrow new IllegalArgumentException
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,197,"""insufficient data"");"
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,199,"eturn tTest(StatUtils.mean(sample1), StatUtils.mean(sample2),"
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,200,"tatUtils.variance(sample1), StatUtils.variance(sample2),"
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,201,"double) sample1.length, (double) sample2.length);"
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,205, @param sample1 array of sample data values
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,206, @param sample2 array of sample data values
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,207, @param alpha significance level
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,208, @return true if the null hypothesis can be rejected with
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,209, confidence 1 - alpha
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,210, @throws IllegalArgumentException if the preconditions are not met
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,212,"ublic boolean tTest(double[] sample1, double[] sample2, double alpha)"
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,213,hrows IllegalArgumentException {
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,214,f ((alpha <= 0) || (alpha > 0.5)) {
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,215,hrow new IllegalArgumentException
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,216,"""bad significance level: "" + alpha);"
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,218,"eturn (tTest(sample1, sample2) < alpha);"
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,222, @param mu constant value to compare sample mean against
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,223, @param sample array of sample data values
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,224, @return p-value
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,225, @throws IllegalArgumentException if the precondition is not met
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,227,"ublic double tTest(double mu, double[] sample)"
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,228,hrows IllegalArgumentException {
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,229,f ((sample == null) || (sample.length < 5)) {
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,230,hrow new IllegalArgumentException
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,231,"""insufficient data for t statistic"");"
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,233,"eturn tTest(StatUtils.mean(sample), mu, StatUtils.variance(sample),"
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,234,ample.length);
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,238, @param mu comparison constant
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,239, @param sampleStats Univariate holding sample summary statitstics
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,240, @return t statistic
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,241, @throws IllegalArgumentException if the precondition is not met
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,243,"ublic double t(double mu, Univariate sampleStats)"
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,244,hrows IllegalArgumentException {
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,245,f ((sampleStats == null) || (sampleStats.getN() < 5)) {
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,246,hrow new IllegalArgumentException
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,247,"""insufficient data for t statistic"");"
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,249,"eturn t(sampleStats.getMean(), mu, sampleStats.getVariance(),"
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,250,ampleStats.getN());
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,254, @param sampleStats1 Univariate describing data from the first sample
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,255, @param sampleStats2 Univariate describing data from the second sample
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,256, @return t statistic
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,257, @throws IllegalArgumentException if the precondition is not met
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,259,"ublic double t(Univariate sampleStats1, Univariate sampleStats2)"
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,260,hrows IllegalArgumentException {
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,261,f ((sampleStats1 == null) || (sampleStats2 == null ||
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,262,"ath.min(sampleStats1.getN(), sampleStats2.getN()) < 5)) {"
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,263,hrow new IllegalArgumentException
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,264,"""insufficient data for t statistic"");"
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,266,"eturn t(sampleStats1.getMean(), sampleStats2.getMean(),"
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,267,"ampleStats1.getVariance(), sampleStats2.getVariance(),"
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,268,"double) sampleStats1.getN(), (double) sampleStats2.getN());"
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,272, @param sampleStats1 Univariate describing data from the first sample
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,273, @param sampleStats2 Univariate describing data from the second sample
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,274, @return p-value for t-test
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,275, @throws IllegalArgumentException if the precondition is not met
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,277,"ublic double tTest(Univariate sampleStats1, Univariate sampleStats2)"
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,278,hrows IllegalArgumentException {
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,279,f ((sampleStats1 == null) || (sampleStats2 == null ||
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,280,"ath.min(sampleStats1.getN(), sampleStats2.getN()) < 5)) {"
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,281,hrow new IllegalArgumentException
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,282,"""insufficient data for t statistic"");"
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,284,"eturn tTest(sampleStats1.getMean(), sampleStats2.getMean(),"
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,285,"ampleStats1.getVariance(), sampleStats2.getVariance(),"
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,286,"double) sampleStats1.getN(), (double) sampleStats2.getN());"
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,290, @param sampleStats1 Univariate describing sample data values
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,291, @param sampleStats2 Univariate describing sample data values
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,292, @param alpha significance level of the test
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,293, @return true if the null hypothesis can be rejected with
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,294, confidence 1 - alpha
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,295, @throws IllegalArgumentException if the preconditions are not met
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,297,"ublic boolean tTest(Univariate sampleStats1, Univariate sampleStats2,"
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,298,ouble alpha) throws IllegalArgumentException {
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,299,f ((alpha <= 0) || (alpha > 0.5)) {
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,300,hrow new IllegalArgumentException
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,301,"""bad significance level: "" + alpha);"
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,303,"eturn (tTest(sampleStats1, sampleStats2) < alpha);"
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,307, @param mu constant value to compare sample mean against
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,308, @param sampleStats Univariate describing sample data values
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,309, @param alpha significance level of the test
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,310, @return p-value
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,311, @throws IllegalArgumentException if the precondition is not met
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,313,"ublic boolean tTest(double mu, Univariate sampleStats, double alpha)"
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,314,hrows IllegalArgumentException {
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,315,f ((alpha <= 0) || (alpha > 0.5)) {
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,316,hrow new IllegalArgumentException
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,317,"""bad significance level: "" + alpha);"
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,319,"eturn (tTest(mu, sampleStats) < alpha);"
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,323, @param mu constant value to compare sample mean against
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,324, @param sampleStats Univariate describing sample data
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,325, @return p-value
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,326, @throws IllegalArgumentException if the precondition is not met
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,328,"ublic double tTest(double mu, Univariate sampleStats)"
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,329,hrows IllegalArgumentException {
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,330,f ((sampleStats == null) || (sampleStats.getN() < 5)) {
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,331,hrow new IllegalArgumentException
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,332,"""insufficient data for t statistic"");"
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,334,"eturn tTest(sampleStats.getMean(), mu, sampleStats.getVariance(),"
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,335,ampleStats.getN());
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,338,/----------------------------------------------- Private methods
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,341, Computes approximate degrees of freedom for 2-sample t-test.
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,343, @param v1 first sample variance
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,344, @param v2 second sample variance
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,345, @param n1 first sample n
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,346, @param n2 second sample n
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,347, @return approximate degrees of freedom
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,349,"rivate double df(double v1, double v2, double n1, double n2) {"
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,350,eturn (((v1 / n1) + (v2 / n2)) * ((v1 / n1) + (v2 / n2))) /
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,351,(v1 * v1) / (n1 * n1 * (n1 - 1d)) +
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,352,v2 * v2) / (n2 * n2 * (n2 - 1d)));
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,356, Computes t test statistic for 2-sample t-test.
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,358, @param m1 first sample mean
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,359, @param m2 second sample mean
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,360, @param v1 first sample variance
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,361, @param v2 second sample variance
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,362, @param n1 first sample n
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,363, @param n2 second sample n
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,364, @return t test statistic
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,366,"rivate double t(double m1, double m2, double v1, double v2, double n1,"
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,367,ouble n2) {
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,368,eturn (m1 - m2) / Math.sqrt((v1 / n1) + (v2 / n2));
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,372, Computes t test statistic for 1-sample t-test.
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,374, @param m sample mean
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,375, @param mu constant to test against
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,376, @param v sample variance
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,377, @param n sample n
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,378, @return t test statistic
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,380,"rivate double t(double m, double mu, double v, double n) {"
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,381,eturn (m - mu) / Math.sqrt(v / n);
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,385," Computes p-value for 2-sided, 2-sample t-test."
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,387, @param m1 first sample mean
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,388, @param m2 second sample mean
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,389, @param v1 first sample variance
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,390, @param v2 second sample variance
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,391, @param n1 first sample n
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,392, @param n2 second sample n
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,393, @return p-value
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,395,"rivate double tTest(double m1, double m2, double v1, double v2, double n1,"
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,396,ouble n2) {
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,397,"ouble t = Math.abs(t(m1, m2, v1, v2, n1, n2));"
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,398,Distribution tDistribution =
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,399,istributionFactory.newInstance().createTDistribution
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,400,"df(v1, v2, n1, n2));"
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,401,"eturn 1.0 - tDistribution.cummulativeProbability(-t, t);"
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,405," Computes p-value for 2-sided, 1-sample t-test."
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,407, @param m sample mean
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,408, @param mu constant to test against
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,409, @param v sample variance
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,410, @param n sample n
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,411, @return p-value
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,413,"rivate double tTest(double m, double mu, double v, double n) {"
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,414,"ouble t = Math.abs(t(m, mu, v, n));"
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,415,Distribution tDistribution =
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,416,istributionFactory.newInstance().createTDistribution
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,417,n - 1);
False,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,src/java/org/apache/commons/math/stat/TestStatisticImpl.java,418,"eturn 1.0 - tDistribution.cummulativeProbability(-t, t);"
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,2," The Apache Software License, Version 1.1"
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,5, reserved.
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,7," Redistribution and use in source and binary forms, with or without"
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,8," modification, are permitted provided that the following conditions"
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,9, are met:
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,11, 1. Redistributions of source code must retain the above copyright
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,12,"    notice, this list of conditions and the following disclaimer."
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,14, 2. Redistributions in binary form must reproduce the above copyright
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,15,"    notice, this list of conditions and the following disclaimer in"
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,16,    the documentation and/or other materials provided with the
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,17,    distribution.
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,19," 3. The end-user documentation included with the redistribution, if"
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,20,"    any, must include the following acknowledgement:"
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,21,"       ""This product includes software developed by the"
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,22,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,23,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,24,    if and wherever such third-party acknowledgements normally appear.
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,26," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,27,"    Foundation"" must not be used to endorse or promote products derived"
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,28,    from this software without prior written permission. For written
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,29,"    permission, please contact apache@apache.org."
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,31," 5. Products derived from this software may not be called ""Apache"""
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,32,"    nor may ""Apache"" appear in their name without prior written"
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,33,    permission of the Apache Software Foundation.
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,38, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,39," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,46, SUCH DAMAGE.
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,49, This software consists of voluntary contributions made by many
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,50, individuals on behalf of the Apache Software Foundation.  For more
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,51," information on the Apache Software Foundation, please see"
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,52, <http://www.apache.org/>.
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,54,ackage org.apache.commons.math.stat;
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,58, Accumulates univariate statistics for values fed in
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,59, through the addValue() method. This interface defines the LCD interface
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,60, which all Univariate implementations must implement. <p>
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,61," A ""rolling"" capability is supported by all implementations with the following"
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,62, contract: <p>
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,63, <i> Setting the windowSize property limits the domain of all statistics to
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,64, the last <code>windowSize</code> values added.</i><p>
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,65, We use the term <i>available values</i> throughout the API documentation
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,66," to refer to these values when the windowSize is set. For example, if the"
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,67," windowSize is set to 3 and the values {1,2,3,4,5} have been added <strong>"
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,68," in that order</strong> then the <i>available values</i> are {3,4,5} and all"
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,69, reported statistics will be based on these values<p>
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,70," The default windowSize is ""infinite"" -- i.e., all values added are included"
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,71, in all computations.
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,72, @version $Revision: 1.11 $ $Date: 2003/10/16 15:24:30 $
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,74,ublic interface Univariate extends Applyable{
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,76, A LEPTOKURTIC set has a positive kurtosis (a high peak)
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,78,ublic static int LEPTOKURTIC = 1;
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,80, A MESOKURTIC set has a kurtosis of 0 - it is a normal distribution
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,82,ublic static int MESOKURTIC = 0;
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,84," A PLATYKURTIC set has a negative kurtosis (a flat ""peak"")"
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,86,ublic static int PLATYKURTIC = -1;
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,89, Adds the value to the set of numbers
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,90, @param v the value to be added
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,92,oid addValue(double v);
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,95," Returns the <a href=""http://www.xycoon.com/arithmetic_mean.htm"">"
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,96, arithmetic mean </a> of the available values
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,97, @return The mean or Double.NaN if no values have been added.
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,99,ouble getMean();
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,102," Returns the <a href=""http://www.xycoon.com/geometric_mean.htm"">"
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,103, geometric mean </a> of the available values
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,104," @return The geometricMean, Double.NaN if no values have been added,"
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,105, or if the productof the available values is less than or equal to 0.
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,107,ouble getGeometricMean();
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,110, Returns the variance of the available values.
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,111," @return The variance, Double.NaN if no values have been added"
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,112, or 0.0 for a single value set.
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,114,ouble getVariance();
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,117, Returns the standard deviation of the available values.
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,118," @return The standard deviation, Double.NaN if no values have been added"
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,119, or 0.0 for a single value set.
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,121,ouble getStandardDeviation();
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,124, Returns the skewness of the available values. Skewness is a
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,125, measure of the assymetry of a given distribution.
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,126," @return The skewness, Double.NaN if no values have been added"
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,127, or 0.0 for a value set &lt;=2.
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,129,ouble getSkewness();
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,132, Returns the Kurtosis of the available values. Kurtosis is a
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,133," measure of the ""peakedness"" of a distribution"
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,134," @return The kurtosis, Double.NaN if no values have been added, or 0.0"
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,135, for a value set &lt;=3.
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,137,ouble getKurtosis();
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,140," Returns the Kurtosis ""classification"" a distribution can be"
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,141," leptokurtic (high peak), platykurtic (flat peak),"
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,142, or mesokurtic (zero kurtosis).
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,144," @return A static constant defined in this interface,"
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,145,"         StoredDeviation.LEPTOKURITC, StoredDeviation.PLATYKURTIC, or"
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,146,         StoredDeviation.MESOKURTIC
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,148,nt getKurtosisClass();
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,151, Returns the maximum of the available values
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,152, @return The max or Double.NaN if no values have been added.
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,154,ouble getMax();
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,157, Returns the minimum of the available values
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,158, @return The min or Double.NaN if no values have been added.
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,160,ouble getMin();
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,163, Returns the number of available values
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,164, @return The number of available values
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,166,nt getN();
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,169, Returns the sum of the values that have been added to Univariate.
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,170, @return The sum or Double.NaN if no values have been added
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,172,ouble getSum();
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,175, Returns the sum of the squares of the available values.
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,176, @return The sum of the squares or Double.NaN if no
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,177, values have been added.
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,179,ouble getSumsq();
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,182, Resets all statistics and storage
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,184,oid clear();
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,187, This constant signals that a Univariate implementation
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,188, takes into account the contributions of an infinite number of
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,189," elements.  In other words, if getWindow returns this"
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,190," constant, there is, in effect, no ""window""."
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,192,tatic final int INFINITE_WINDOW = -1;
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,195, Univariate has the ability to return only measures for the
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,196, last N elements added to the set of values.
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,197, @return The current window size or -1 if its Infinite.
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,200,nt getWindowSize();
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,203, WindowSize controls the number of values which contribute
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,204," to the values returned by Univariate.  For example, if"
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,205," windowSize is set to 3 and the values {1,2,3,4,5}"
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,206, have been added <strong> in that order</strong>
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,207," then the <i>available values</i> are {3,4,5} and all"
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,208, reported statistics will be based on these values
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,209, @param windowSize sets the size of the window.
False,src/java/org/apache/commons/math/stat/Univariate.java,src/java/org/apache/commons/math/stat/Univariate.java,211,oid setWindowSize(int windowSize);
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,2," The Apache Software License, Version 1.1"
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,5, reserved.
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,7," Redistribution and use in source and binary forms, with or without"
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,8," modification, are permitted provided that the following conditions"
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,9, are met:
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,11, 1. Redistributions of source code must retain the above copyright
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,12,"    notice, this list of conditions and the following disclaimer."
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,14, 2. Redistributions in binary form must reproduce the above copyright
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,15,"    notice, this list of conditions and the following disclaimer in"
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,16,    the documentation and/or other materials provided with the
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,17,    distribution.
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,19," 3. The end-user documentation included with the redistribution, if"
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,20,"    any, must include the following acknowledgement:"
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,21,"       ""This product includes software developed by the"
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,22,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,23,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,24,    if and wherever such third-party acknowledgements normally appear.
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,26," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,27,"    Foundation"" must not be used to endorse or promote products derived"
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,28,    from this software without prior written permission. For written
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,29,"    permission, please contact apache@apache.org."
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,31," 5. Products derived from this software may not be called ""Apache"""
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,32,"    nor may ""Apache"" appear in their name without prior written"
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,33,    permission of the Apache Software Foundation.
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,38, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,39," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,46, SUCH DAMAGE.
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,49, This software consists of voluntary contributions made by many
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,50, individuals on behalf of the Apache Software Foundation.  For more
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,51," information on the Apache Software Foundation, please see"
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,52, <http://www.apache.org/>.
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,54,ackage org.apache.commons.math.stat;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,56,mport java.io.Serializable;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,58,mport org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,59,mport org.apache.commons.math.stat.univariate.UnivariateStatistic;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,60,mport org.apache.commons.math.util.FixedDoubleArray;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,64, Accumulates univariate statistics for values fed in
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,65, through the addValue() method.  Does not store raw data values.
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,66, All data are represented internally as doubles.
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,67," Integers, floats and longs can be added, but they will be converted"
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,68, to doubles by addValue().
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,70, @version $Revision: 1.23 $ $Date: 2003/10/16 15:24:30 $
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,72,ublic class UnivariateImpl
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,73,xtends AbstractUnivariate
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,74,"mplements Univariate, Serializable {"
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,76,** fixed storage */
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,77,rivate FixedDoubleArray storage = null;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,79,** Creates new univariate with an infinite window */
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,80,ublic UnivariateImpl() {
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,81,uper();
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,85, Creates a new univariate with a fixed window
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,86, @param window Window Size
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,88,ublic UnivariateImpl(int window) {
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,89,uper(window);
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,90,torage = new FixedDoubleArray(window);
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,94,"  If windowSize is set to Infinite, moments"
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,95,  are calculated using the following
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,96," <a href=""http://www.spss.com/tech/stat/Algorithms/11.5/descriptives.pdf"">"
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,97, recursive strategy
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,98, </a>.
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,99," Otherwise, stat methods delegate to StatUtils."
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,100, @see org.apache.commons.math.stat.Univariate#addValue(double)
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,102,ublic void addValue(double value) {
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,104,f (storage != null) {
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,105,* then all getters deligate to StatUtils
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,106, and this clause simply adds/rolls a value in the storage array
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,108,f (getWindowSize() == n) {
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,109,torage.addElementRolling(value);
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,110, else {
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,111,++;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,112,torage.addElement(value);
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,115, else {
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,116,* If the windowSize is infinite don't store any values and there
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,117, is no need to discard the influence of any single item.
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,119,++;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,120,in.increment(value);
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,121,ax.increment(value);
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,122,um.increment(value);
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,123,umsq.increment(value);
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,124,umLog.increment(value);
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,125,eoMean.increment(value);
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,127,oment.increment(value);
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,128,/mean.increment(value);
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,129,/variance.increment(value);
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,130,/skewness.increment(value);
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,131,/kurtosis.increment(value);
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,136, Generates a text report displaying
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,137, univariate statistics from values that
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,138, have been added.
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,139, @return String with line feeds displaying statistics
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,141,ublic String toString() {
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,142,tringBuffer outBuffer = new StringBuffer();
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,143,"utBuffer.append(""UnivariateImpl:\n"");"
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,144,"utBuffer.append(""n: "" + getN() + ""\n"");"
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,145,"utBuffer.append(""min: "" + getMin() + ""\n"");"
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,146,"utBuffer.append(""max: "" + getMax() + ""\n"");"
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,147,"utBuffer.append(""mean: "" + getMean() + ""\n"");"
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,148,"utBuffer.append(""std dev: "" + getStandardDeviation() + ""\n"");"
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,149,"utBuffer.append(""skewness: "" + getSkewness() + ""\n"");"
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,150,"utBuffer.append(""kurtosis: "" + getKurtosis() + ""\n"");"
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,151,eturn outBuffer.toString();
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,155, @see org.apache.commons.math.stat.Univariate#clear()
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,157,ublic void clear() {
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,158,uper.clear();
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,159,f (getWindowSize() != INFINITE_WINDOW) {
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,160,torage = new FixedDoubleArray(getWindowSize());
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,165, Apply the given statistic to this univariate collection.
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,166, @param stat the statistic to apply
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,167, @return the computed value of the statistic.
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,169,ublic double apply(UnivariateStatistic stat) {
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,171,f (storage != null) {
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,172,"eturn stat.evaluate(storage.getValues(), storage.start(), storage.getNumElements());"
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,173, else if (stat instanceof StorelessUnivariateStatistic) {
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,174,eturn ((StorelessUnivariateStatistic) stat).getResult();
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,177,eturn Double.NaN;
False,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,2," The Apache Software License, Version 1.1"
False,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
False,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,5, reserved.
False,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,7," Redistribution and use in source and binary forms, with or without"
False,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,8," modification, are permitted provided that the following conditions"
False,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,9, are met:
False,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,11, 1. Redistributions of source code must retain the above copyright
False,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,12,"    notice, this list of conditions and the following disclaimer."
False,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,14, 2. Redistributions in binary form must reproduce the above copyright
False,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,15,"    notice, this list of conditions and the following disclaimer in"
False,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,16,    the documentation and/or other materials provided with the
False,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,17,    distribution.
False,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,19," 3. The end-user documentation included with the redistribution, if"
False,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,20,"    any, must include the following acknowledgement:"
False,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,21,"       ""This product includes software developed by the"
False,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,22,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,23,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,24,    if and wherever such third-party acknowledgements normally appear.
False,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,26," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,27,"    Foundation"" must not be used to endorse or promote products derived"
False,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,28,    from this software without prior written permission. For written
False,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,29,"    permission, please contact apache@apache.org."
False,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,31," 5. Products derived from this software may not be called ""Apache"""
False,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,32,"    nor may ""Apache"" appear in their name without prior written"
False,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,33,    permission of the Apache Software Foundation.
False,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,38, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,39," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,46, SUCH DAMAGE.
False,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,49, This software consists of voluntary contributions made by many
False,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,50, individuals on behalf of the Apache Software Foundation.  For more
False,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,51," information on the Apache Software Foundation, please see"
False,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,52, <http://www.apache.org/>.
False,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,54,ackage org.apache.commons.math.stat.univariate;
False,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,58, Abstract Implementation for StorelessUnivariateStatistics.
False,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,59, Provides the ability to extend polymophically so that
False,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,60, indiviual statistics do not need to implement these methods unless
False,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,61, there are better algorithms for handling the calculation.
False,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,62, @version $Revision: 1.9 $ $Date: 2003/10/16 15:24:33 $
False,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,64,ublic abstract class AbstractStorelessUnivariateStatistic
False,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,65,xtends AbstractUnivariateStatistic
False,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,66,mplements StorelessUnivariateStatistic {
False,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,69, This implements the AbstractUnivariateStatistic impl to funnel
False,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,70, calculation off to the instantanious increment method. In most cases of
False,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,71, StorelessUnivariateStatistic this is never really used because more
False,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,72, efficient algorithms are available for that statistic.
False,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,73," @see org.apache.commons.math.stat.univariate.UnivariateStatistic#evaluate(double[], int, int)"
False,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,75,ublic double evaluate(
False,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,76,"inal double[] values,"
False,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,77,"inal int begin,"
False,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,78,inal int length) {
False,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,79,"f (this.test(values, begin, length)) {"
False,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,80,his.clear();
False,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,81,nt l = begin + length;
False,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,82,or (int i = begin; i < l; i++) {
False,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,83,ncrement(values[i]);
False,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,86,eturn getResult();
False,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,90, @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#clear()
False,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,92,ublic abstract void clear();
False,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,95, @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#getResult()
False,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,97,ublic abstract double getResult();
False,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,100, @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#increment(double)
False,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,102,ublic abstract void increment(final double d);
False,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,2," The Apache Software License, Version 1.1"
False,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
False,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,5, reserved.
False,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,7," Redistribution and use in source and binary forms, with or without"
False,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,8," modification, are permitted provided that the following conditions"
False,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,9, are met:
False,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,11, 1. Redistributions of source code must retain the above copyright
False,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,12,"    notice, this list of conditions and the following disclaimer."
False,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,14, 2. Redistributions in binary form must reproduce the above copyright
False,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,15,"    notice, this list of conditions and the following disclaimer in"
False,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,16,    the documentation and/or other materials provided with the
False,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,17,    distribution.
False,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,19," 3. The end-user documentation included with the redistribution, if"
False,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,20,"    any, must include the following acknowledgement:"
False,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,21,"       ""This product includes software developed by the"
False,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,22,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,23,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,24,    if and wherever such third-party acknowledgements normally appear.
False,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,26," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,27,"    Foundation"" must not be used to endorse or promote products derived"
False,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,28,    from this software without prior written permission. For written
False,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,29,"    permission, please contact apache@apache.org."
False,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,31," 5. Products derived from this software may not be called ""Apache"""
False,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,32,"    nor may ""Apache"" appear in their name without prior written"
False,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,33,    permission of the Apache Software Foundation.
False,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,38, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,39," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,46, SUCH DAMAGE.
False,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,49, This software consists of voluntary contributions made by many
False,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,50, individuals on behalf of the Apache Software Foundation.  For more
False,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,51," information on the Apache Software Foundation, please see"
False,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,52, <http://www.apache.org/>.
False,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,54,ackage org.apache.commons.math.stat.univariate;
False,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,57, Abstract Implementation for UnivariateStatistics.
False,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,58, Provides the ability to extend polymophically so that
False,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,59, indiviual statistics do not need to implement these methods.
False,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,60, @version $Revision: 1.8 $ $Date: 2003/10/16 15:24:33 $
False,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,62,ublic abstract class AbstractUnivariateStatistic
False,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,63,mplements UnivariateStatistic {
False,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,66, This implementation provides a simple wrapper around the double[]
False,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,67, and passes the request onto the evaluate(DoubleArray da) method.
False,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,68, @see org.apache.commons.math.stat.univariate.UnivariateStatistic#evaluate(double[])
False,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,70,ublic double evaluate(final double[] values) {
False,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,71,"eturn evaluate(values, 0, values.length);"
False,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,75, Subclasses of AbstractUnivariateStatistc need to implement this method.
False,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,76," @see org.apache.commons.math.stat.univariate.UnivariateStatistic#evaluate(double[], int, int)"
False,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,78,ublic abstract double evaluate(
False,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,79,"inal double[] values,"
False,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,80,"inal int begin,"
False,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,81,inal int length);
False,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,84, this protected test method used by all methods to verify the content
False,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,85, of the array and indicies are correct.
False,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,86, @param values Is a double[] containing the values
False,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,87, @param begin processing at this point in the array
False,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,88, @param length processing at this point in the array
False,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,89," @return this is used to determine if the array is of 0 length or not,"
False,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,90, it is used by an individual statistic to determine if continuation
False,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,91, of a statistical calculation should continue or return NaN.
False,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,93,rotected boolean test(
False,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,94,"inal double[] values,"
False,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,95,"inal int begin,"
False,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,96,inal int length) {
False,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,98,f (length > values.length) {
False,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,99,"hrow new IllegalArgumentException(""length > values.length"");"
False,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,102,f (begin + length > values.length) {
False,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,103,hrow new IllegalArgumentException(
False,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,104,"begin + length > values.length"");"
False,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,107,f (values == null) {
False,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,108,"hrow new IllegalArgumentException(""input value array is null"");"
False,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,111,f (values.length == 0 || length == 0) {
False,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,112,eturn false;
False,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,115,eturn true;
False,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,2," The Apache Software License, Version 1.1"
False,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
False,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,5, reserved.
False,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,7," Redistribution and use in source and binary forms, with or without"
False,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,8," modification, are permitted provided that the following conditions"
False,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,9, are met:
False,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,11, 1. Redistributions of source code must retain the above copyright
False,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,12,"    notice, this list of conditions and the following disclaimer."
False,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,14, 2. Redistributions in binary form must reproduce the above copyright
False,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,15,"    notice, this list of conditions and the following disclaimer in"
False,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,16,    the documentation and/or other materials provided with the
False,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,17,    distribution.
False,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,19," 3. The end-user documentation included with the redistribution, if"
False,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,20,"    any, must include the following acknowledgement:"
False,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,21,"       ""This product includes software developed by the"
False,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,22,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,23,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,24,    if and wherever such third-party acknowledgements normally appear.
False,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,26," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,27,"    Foundation"" must not be used to endorse or promote products derived"
False,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,28,    from this software without prior written permission. For written
False,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,29,"    permission, please contact apache@apache.org."
False,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,31," 5. Products derived from this software may not be called ""Apache"""
False,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,32,"    nor may ""Apache"" appear in their name without prior written"
False,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,33,    permission of the Apache Software Foundation.
False,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,38, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,39," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,46, SUCH DAMAGE.
False,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,49, This software consists of voluntary contributions made by many
False,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,50, individuals on behalf of the Apache Software Foundation.  For more
False,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,51," information on the Apache Software Foundation, please see"
False,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,52, <http://www.apache.org/>.
False,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,54,ackage org.apache.commons.math.stat.univariate;
False,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,57, Extends the capabilities of UnivariateStatistic with a statefull incremental
False,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,58, strategy through three methods for calculating a statistic without having to
False,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,59, maintain a double[] of the values. Because a StorelessUnivariateStatistic
False,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,60, does not require that a double[] storage structure be maintained with the
False,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,61," values in it, there are only a subset of known statistics can actually be"
False,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,62, implemented using it. If a Statistic cannot be implemented in a Storeless
False,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,63, approach it should implement the UnivariateStatistic interface directly
False,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,64, instead.
False,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,65, @version $Revision: 1.9 $ $Date: 2003/10/16 15:24:33 $
False,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,67,ublic interface StorelessUnivariateStatistic extends UnivariateStatistic {
False,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,70, Increments the internal state of the Storagless
False,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,71, Implementation.
False,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,72, @param d is the value to increment the state by.
False,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,74,oid increment(double d);
False,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,77, Returns the current state of the statistic after the
False,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,78, last increment.
False,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,79," @return value of the statistic, Double.NaN if it"
False,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,80, has been cleared or just instantiated.
False,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,82,ouble getResult();
False,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,86, Clears all the internal state of the Statistic
False,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,88,oid clear();
False,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,2," The Apache Software License, Version 1.1"
False,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
False,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,5, reserved.
False,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,7," Redistribution and use in source and binary forms, with or without"
False,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,8," modification, are permitted provided that the following conditions"
False,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,9, are met:
False,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,11, 1. Redistributions of source code must retain the above copyright
False,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,12,"    notice, this list of conditions and the following disclaimer."
False,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,14, 2. Redistributions in binary form must reproduce the above copyright
False,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,15,"    notice, this list of conditions and the following disclaimer in"
False,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,16,    the documentation and/or other materials provided with the
False,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,17,    distribution.
False,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,19," 3. The end-user documentation included with the redistribution, if"
False,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,20,"    any, must include the following acknowledgement:"
False,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,21,"       ""This product includes software developed by the"
False,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,22,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,23,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,24,    if and wherever such third-party acknowledgements normally appear.
False,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,26," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,27,"    Foundation"" must not be used to endorse or promote products derived"
False,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,28,    from this software without prior written permission. For written
False,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,29,"    permission, please contact apache@apache.org."
False,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,31," 5. Products derived from this software may not be called ""Apache"""
False,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,32,"    nor may ""Apache"" appear in their name without prior written"
False,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,33,    permission of the Apache Software Foundation.
False,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,38, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,39," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,46, SUCH DAMAGE.
False,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,49, This software consists of voluntary contributions made by many
False,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,50, individuals on behalf of the Apache Software Foundation.  For more
False,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,51," information on the Apache Software Foundation, please see"
False,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,52, <http://www.apache.org/>.
False,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,54,ackage org.apache.commons.math.stat.univariate;
False,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,57, UnivariateStatistic interface provides methods to evaluate
False,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,58, double[] based content using an implemented statistical approach.
False,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,59," The interface provides two ""stateless"" simple methods to calculate"
False,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,60, a statistic from a double[] based parameter.
False,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,61, @version $Revision: 1.8 $ $Date: 2003/10/16 15:24:33 $
False,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,63,ublic interface UnivariateStatistic {
False,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,66, Evaluates the double[] returning the result of the evaluation.
False,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,67, @param values Is a double[] containing the values
False,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,68, @return the result of the evaluation or Double.NaN
False,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,69, if the array is empty
False,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,71,ouble evaluate(double[] values);
False,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,74, Evaluates part of a double[] returning the result
False,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,75, of the evaluation.
False,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,76, @param values Is a double[] containing the values
False,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,77, @param begin processing at this point in the array
False,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,78, @param length processing at this point in the array
False,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,79, @return the result of the evaluation or Double.NaN
False,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,80, if the array is empty
False,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,82,"ouble evaluate(double[] values, int begin, int length);"
False,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,2," The Apache Software License, Version 1.1"
False,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
False,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,5, reserved.
False,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,7," Redistribution and use in source and binary forms, with or without"
False,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,8," modification, are permitted provided that the following conditions"
False,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,9, are met:
False,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,11, 1. Redistributions of source code must retain the above copyright
False,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,12,"    notice, this list of conditions and the following disclaimer."
False,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,14, 2. Redistributions in binary form must reproduce the above copyright
False,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,15,"    notice, this list of conditions and the following disclaimer in"
False,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,16,    the documentation and/or other materials provided with the
False,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,17,    distribution.
False,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,19," 3. The end-user documentation included with the redistribution, if"
False,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,20,"    any, must include the following acknowledgement:"
False,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,21,"       ""This product includes software developed by the"
False,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,22,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,23,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,24,    if and wherever such third-party acknowledgements normally appear.
False,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,26," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,27,"    Foundation"" must not be used to endorse or promote products derived"
False,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,28,    from this software without prior written permission. For written
False,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,29,"    permission, please contact apache@apache.org."
False,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,31," 5. Products derived from this software may not be called ""Apache"""
False,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,32,"    nor may ""Apache"" appear in their name without prior written"
False,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,33,    permission of the Apache Software Foundation.
False,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,38, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,39," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,46, SUCH DAMAGE.
False,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,49, This software consists of voluntary contributions made by many
False,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,50, individuals on behalf of the Apache Software Foundation.  For more
False,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,51," information on the Apache Software Foundation, please see"
False,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,52, <http://www.apache.org/>.
False,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,54,ackage org.apache.commons.math.stat.univariate.moment;
False,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,56,mport org.apache.commons.math.stat.univariate.AbstractStorelessUnivariateStatistic;
False,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,59, FirstMoment.java
False,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,61, The FirstMoment (arithmentic mean) is calculated using the following
False,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,62," <a href=""http://www.spss.com/tech/stat/Algorithms/11.5/descriptives.pdf"">"
False,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,63, recursive strategy
False,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,64, </a>. Both incremental and evaluation strategies currently use this approach.
False,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,65, @version $Revision: 1.8 $ $Date: 2003/10/16 15:24:32 $
False,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,67,ublic class FirstMoment extends AbstractStorelessUnivariateStatistic {
False,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,69,** count of values that have been added */
False,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,70,rotected int n = 0;
False,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,72,** first moment of values that have been added */
False,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,73,rotected double m1 = Double.NaN;
False,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,76, temporary internal state made available for
False,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,77, higher order moments
False,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,79,rotected double dev = 0.0;
False,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,82, temporary internal state made available for
False,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,83, higher order moments
False,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,85,rotected double v = 0.0;
False,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,88, temporary internal state made available for
False,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,89, higher order moments
False,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,91,rotected double n0 = 0.0;
False,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,94, @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#increment(double)
False,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,96,ublic void increment(final double d) {
False,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,97,f (n < 1) {
False,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,98,1 = 0.0;
False,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,101,++;
False,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,102,ev = d - m1;
False,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,103,0 = (double) n;
False,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,104, = dev / n0;
False,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,106,1 += v;
False,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,110, @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#clear()
False,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,112,ublic void clear() {
False,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,113,1 = Double.NaN;
False,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,114, = 0;
False,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,115,ev = 0.0;
False,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,116, = 0.0;
False,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,117,0 = 0.0;
False,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,121, @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#getResult()
False,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,123,ublic double getResult() {
False,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,124,eturn m1;
False,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,2," The Apache Software License, Version 1.1"
False,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
False,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,5, reserved.
False,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,7," Redistribution and use in source and binary forms, with or without"
False,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,8," modification, are permitted provided that the following conditions"
False,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,9, are met:
False,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,11, 1. Redistributions of source code must retain the above copyright
False,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,12,"    notice, this list of conditions and the following disclaimer."
False,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,14, 2. Redistributions in binary form must reproduce the above copyright
False,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,15,"    notice, this list of conditions and the following disclaimer in"
False,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,16,    the documentation and/or other materials provided with the
False,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,17,    distribution.
False,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,19," 3. The end-user documentation included with the redistribution, if"
False,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,20,"    any, must include the following acknowledgement:"
False,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,21,"       ""This product includes software developed by the"
False,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,22,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,23,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,24,    if and wherever such third-party acknowledgements normally appear.
False,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,26," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,27,"    Foundation"" must not be used to endorse or promote products derived"
False,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,28,    from this software without prior written permission. For written
False,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,29,"    permission, please contact apache@apache.org."
False,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,31," 5. Products derived from this software may not be called ""Apache"""
False,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,32,"    nor may ""Apache"" appear in their name without prior written"
False,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,33,    permission of the Apache Software Foundation.
False,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,38, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,39," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,46, SUCH DAMAGE.
False,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,49, This software consists of voluntary contributions made by many
False,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,50, individuals on behalf of the Apache Software Foundation.  For more
False,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,51," information on the Apache Software Foundation, please see"
False,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,52, <http://www.apache.org/>.
False,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,54,ackage org.apache.commons.math.stat.univariate.moment;
False,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,57, The FourthMoment is calculated using the following
False,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,58," <a href=""http://www.spss.com/tech/stat/Algorithms/11.5/descriptives.pdf"">"
False,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,59, recursive strategy
False,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,60, </a>. Both incremental and evaluation strategies currently use this approach.
False,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,61, @version $Revision: 1.10 $ $Date: 2003/10/16 15:24:32 $
False,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,63,ublic class FourthMoment extends ThirdMoment {
False,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,65,** fourth moment of values that have been added */
False,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,66,rotected double m4 = Double.NaN;
False,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,68,** temporary internal state made available for higher order moments */
False,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,69,rotected double prevM3 = 0.0;
False,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,71,** temporary internal state made available for higher order moments */
False,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,72,rotected double n3 = 0.0;
False,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,76, @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#increment(double)
False,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,78,ublic void increment(final double d) {
False,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,79,f (n < 1) {
False,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,80,4 = 0.0;
False,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,81,3 = 0.0;
False,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,82,2 = 0.0;
False,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,83,1 = 0.0;
False,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,86,* retain previous m3 */
False,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,87,revM3 = m3;
False,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,89,"* increment m1, m2 and m3 (and prevM2, _n0, _n1, _n2, _v, _v2) */"
False,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,90,uper.increment(d);
False,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,92,3 = (double) (n - 3);
False,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,94,4 = m4 - (4.0 * v * prevM3) + (6.0 * v2 * prevM2) +
False,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,95,(n0 * n0) - 3 * n1) * (v2 * v2 * n1 * n0);
False,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,99, @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#getResult()
False,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,101,ublic double getResult() {
False,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,102,eturn m4;
False,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,106, @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#clear()
False,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,108,ublic void clear() {
False,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,109,uper.clear();
False,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,110,4 = Double.NaN;
False,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,111,revM3 = 0.0;
False,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,112,3 = 0.0;
False,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,2," The Apache Software License, Version 1.1"
False,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
False,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,5, reserved.
False,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,7," Redistribution and use in source and binary forms, with or without"
False,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,8," modification, are permitted provided that the following conditions"
False,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,9, are met:
False,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,11, 1. Redistributions of source code must retain the above copyright
False,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,12,"    notice, this list of conditions and the following disclaimer."
False,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,14, 2. Redistributions in binary form must reproduce the above copyright
False,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,15,"    notice, this list of conditions and the following disclaimer in"
False,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,16,    the documentation and/or other materials provided with the
False,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,17,    distribution.
False,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,19," 3. The end-user documentation included with the redistribution, if"
False,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,20,"    any, must include the following acknowledgement:"
False,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,21,"       ""This product includes software developed by the"
False,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,22,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,23,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,24,    if and wherever such third-party acknowledgements normally appear.
False,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,26," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,27,"    Foundation"" must not be used to endorse or promote products derived"
False,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,28,    from this software without prior written permission. For written
False,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,29,"    permission, please contact apache@apache.org."
False,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,31," 5. Products derived from this software may not be called ""Apache"""
False,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,32,"    nor may ""Apache"" appear in their name without prior written"
False,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,33,    permission of the Apache Software Foundation.
False,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,38, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,39," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,46, SUCH DAMAGE.
False,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,49, This software consists of voluntary contributions made by many
False,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,50, individuals on behalf of the Apache Software Foundation.  For more
False,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,51," information on the Apache Software Foundation, please see"
False,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,52, <http://www.apache.org/>.
False,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,54,ackage org.apache.commons.math.stat.univariate.moment;
False,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,56,mport org.apache.commons.math.stat.univariate.summary.SumOfLogs;
False,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,59," Returns the <a href=""http://www.xycoon.com/geometric_mean.htm"">"
False,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,60, geometric mean </a> of the available values
False,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,61, @version $Revision: 1.11 $ $Date: 2003/10/16 15:24:32 $
False,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,63,ublic class GeometricMean extends SumOfLogs {
False,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,66,rotected int n = 0;
False,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,69,rivate double geoMean = Double.NaN;
False,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,72,rivate double lastSum = 0.0;
False,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,75, @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#increment(double)
False,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,77,ublic void increment(final double d) {
False,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,78,++;
False,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,79,uper.increment(d);
False,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,83, @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#getResult()
False,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,85,ublic double getResult() {
False,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,86,f (lastSum != super.getResult() || n == 1) {
False,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,87,astSum = super.getResult();
False,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,88,eoMean = Math.exp(lastSum / (double) n);
False,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,90,eturn geoMean;
False,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,94, @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#clear()
False,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,96,ublic void clear() {
False,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,97,uper.clear();
False,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,98,astSum = 0.0;
False,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,99,eoMean = Double.NaN;
False,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,100, = 0;
False,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,104, Returns the geometric mean for this collection of values
False,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,105, @param values Is a double[] containing the values
False,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,106, @param begin processing at this point in the array
False,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,107, @param length processing at this point in the array
False,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,108, @return the geometric mean or Double.NaN if the array is empty or
False,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,109, any of the values are &lt;= 0.
False,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,110," @see org.apache.commons.math.stat.univariate.UnivariateStatistic#evaluate(double[], int, int)"
False,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,112,ublic double evaluate(
False,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,113,"inal double[] values,"
False,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,114,"inal int begin,"
False,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,115,inal int length) {
False,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,116,eturn Math.exp(
False,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,117,"uper.evaluate(values, begin, length) / (double) length);"
False,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,2," The Apache Software License, Version 1.1"
False,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
False,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,5, reserved.
False,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,7," Redistribution and use in source and binary forms, with or without"
False,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,8," modification, are permitted provided that the following conditions"
False,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,9, are met:
False,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,11, 1. Redistributions of source code must retain the above copyright
False,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,12,"    notice, this list of conditions and the following disclaimer."
False,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,14, 2. Redistributions in binary form must reproduce the above copyright
False,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,15,"    notice, this list of conditions and the following disclaimer in"
False,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,16,    the documentation and/or other materials provided with the
False,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,17,    distribution.
False,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,19," 3. The end-user documentation included with the redistribution, if"
False,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,20,"    any, must include the following acknowledgement:"
False,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,21,"       ""This product includes software developed by the"
False,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,22,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,23,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,24,    if and wherever such third-party acknowledgements normally appear.
False,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,26," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,27,"    Foundation"" must not be used to endorse or promote products derived"
False,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,28,    from this software without prior written permission. For written
False,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,29,"    permission, please contact apache@apache.org."
False,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,31," 5. Products derived from this software may not be called ""Apache"""
False,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,32,"    nor may ""Apache"" appear in their name without prior written"
False,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,33,    permission of the Apache Software Foundation.
False,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,38, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,39," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,46, SUCH DAMAGE.
False,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,49, This software consists of voluntary contributions made by many
False,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,50, individuals on behalf of the Apache Software Foundation.  For more
False,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,51," information on the Apache Software Foundation, please see"
False,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,52, <http://www.apache.org/>.
False,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,54,ackage org.apache.commons.math.stat.univariate.moment;
False,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,56,mport org
False,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,57,apache
False,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,58,commons
False,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,59,math
False,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,60,stat
False,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,61,univariate
False,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,62,AbstractStorelessUnivariateStatistic;
False,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,65, @version $Revision: 1.11 $ $Date: 2003/10/16 15:24:32 $
False,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,67,ublic class Kurtosis extends AbstractStorelessUnivariateStatistic {
False,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,70,rotected FourthMoment moment = null;
False,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,73,rotected boolean incMoment = true;
False,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,76,rivate double kurtosis = Double.NaN;
False,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,79,rivate int n = 0;
False,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,82, Construct a Kurtosis
False,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,84,ublic Kurtosis() {
False,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,85,oment = new FourthMoment();
False,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,89, Construct a Kurtosis with an external moment
False,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,90, @param m4 external Moment
False,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,92,ublic Kurtosis(final FourthMoment m4) {
False,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,93,ncMoment = false;
False,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,94,his.moment = m4;
False,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,98, @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#increment(double)
False,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,100,ublic void increment(final double d) {
False,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,101,f (incMoment) {
False,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,102,oment.increment(d);
False,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,107, @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#getResult()
False,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,109,ublic double getResult() {
False,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,110,f (n < moment.n) {
False,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,111,f (moment.n <= 0) {
False,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,112,urtosis = Double.NaN;
False,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,115,ouble variance =
False,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,116,moment.n < 1) ? 0.0 : moment.m2 / (double) (moment.n - 1);
False,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,118,f (moment.n <= 3 || variance < 10E-20) {
False,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,119,urtosis = 0.0;
False,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,120, else {
False,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,121,urtosis =
False,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,122,moment.n0 * (moment.n0 + 1) * moment.m4 -
False,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,123, * moment.m2 * moment.m2 * moment.n1) /
False,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,124,moment.n1 * moment.n2 * moment.n3 * variance * variance);
False,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,126, = moment.n;
False,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,129,eturn kurtosis;
False,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,133, @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#clear()
False,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,135,ublic void clear() {
False,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,136,f (incMoment) {
False,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,137,oment.clear();
False,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,139,urtosis = Double.NaN;
False,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,140, = 0;
False,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,143,*UnvariateStatistic Approach */
False,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,146,ean mean = new Mean();
False,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,149, Returns the kurtosis for this collection of values. Kurtosis is a
False,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,150," measure of the ""peakedness"" of a distribution.  This algorithm uses a"
False,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,151, corrected two pass algorithm of the following
False,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,152," <a href=""http://lib-www.lanl.gov/numerical/bookcpdf/c14-1.pdf"">"
False,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,153," corrected two pass formula (14.1.8)</a>, and also referenced in:"
False,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,154, <p>
False,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,155," ""Algorithms for Computing the Sample Variance: Analysis and"
False,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,156," Recommendations"", Chan, T.F., Golub, G.H., and LeVeque, R.J."
False,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,157," 1983, American Statistician, vol. 37, pp. 242?247."
False,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,158, </p>
False,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,159, @param values Is a double[] containing the values
False,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,160, @param begin processing at this point in the array
False,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,161, @param length processing at this point in the array
False,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,162, @return the kurtosis of the values or Double.NaN if the array is empty
False,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,164,ublic double evaluate(
False,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,165,"inal double[] values,"
False,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,166,"inal int begin,"
False,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,167,inal int length) {
False,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,169,/ Initialize the kurtosis
False,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,170,ouble kurt = Double.NaN;
False,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,172,"f (test(values, begin, length)) {"
False,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,173,f (length <= 3) {
False,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,174,urt = 0.0;
False,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,175, else {
False,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,177,/ Get the mean and the standard deviation
False,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,178,"ouble m = mean.evaluate(values, begin, length);"
False,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,180,"/ Calc the std, this is implemented here instead"
False,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,181,/ of using the standardDeviation method eliminate
False,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,182,/ a duplicate pass to get the mean
False,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,183,ouble accum = 0.0;
False,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,184,ouble accum2 = 0.0;
False,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,185,or (int i = begin; i < begin + length; i++) {
False,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,186,"ccum += Math.pow((values[i] - m), 2.0);"
False,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,187,ccum2 += (values[i] - m);
False,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,190,ouble stdDev =
False,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,191,ath.sqrt(
False,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,192,"accum - (Math.pow(accum2, 2) / ((double) length))) /"
False,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,193,double) (length - 1));
False,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,195,/ Sum the ^4 of the distance from the mean divided by the
False,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,196,/ standard deviation
False,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,197,ouble accum3 = 0.0;
False,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,198,or (int i = begin; i < begin + length; i++) {
False,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,199,"ccum3 += Math.pow((values[i] - m) / stdDev, 4.0);"
False,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,202,/ Get N
False,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,203,ouble n0 = length;
False,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,205,ouble coefficientOne =
False,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,206,n0 * (n0 + 1)) / ((n0 - 1) * (n0 - 2) * (n0 - 3));
False,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,207,ouble termTwo =
False,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,208,"(3 * Math.pow(n0 - 1, 2.0)) / ((n0 - 2) * (n0 - 3)));"
False,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,210,/ Calculate kurtosis
False,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,211,urt = (coefficientOne * accum3) - termTwo;
False,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,215,eturn kurt;
False,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,2," The Apache Software License, Version 1.1"
False,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
False,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,5, reserved.
False,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,7," Redistribution and use in source and binary forms, with or without"
False,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,8," modification, are permitted provided that the following conditions"
False,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,9, are met:
False,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,11, 1. Redistributions of source code must retain the above copyright
False,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,12,"    notice, this list of conditions and the following disclaimer."
False,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,14, 2. Redistributions in binary form must reproduce the above copyright
False,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,15,"    notice, this list of conditions and the following disclaimer in"
False,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,16,    the documentation and/or other materials provided with the
False,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,17,    distribution.
False,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,19," 3. The end-user documentation included with the redistribution, if"
False,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,20,"    any, must include the following acknowledgement:"
False,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,21,"       ""This product includes software developed by the"
False,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,22,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,23,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,24,    if and wherever such third-party acknowledgements normally appear.
False,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,26," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,27,"    Foundation"" must not be used to endorse or promote products derived"
False,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,28,    from this software without prior written permission. For written
False,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,29,"    permission, please contact apache@apache.org."
False,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,31," 5. Products derived from this software may not be called ""Apache"""
False,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,32,"    nor may ""Apache"" appear in their name without prior written"
False,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,33,    permission of the Apache Software Foundation.
False,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,38, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,39," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,46, SUCH DAMAGE.
False,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,49, This software consists of voluntary contributions made by many
False,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,50, individuals on behalf of the Apache Software Foundation.  For more
False,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,51," information on the Apache Software Foundation, please see"
False,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,52, <http://www.apache.org/>.
False,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,54,ackage org.apache.commons.math.stat.univariate.moment;
False,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,56,mport org
False,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,57,apache
False,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,58,commons
False,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,59,math
False,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,60,stat
False,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,61,univariate
False,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,62,AbstractStorelessUnivariateStatistic;
False,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,63,mport org.apache.commons.math.stat.univariate.summary.Sum;
False,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,66," Returns the <a href=""http://www.xycoon.com/arithmetic_mean.htm"">"
False,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,67, arithmetic mean </a> of the available values.
False,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,68, @version $Revision: 1.10 $ $Date: 2003/10/16 15:24:32 $
False,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,70,ublic class Mean extends AbstractStorelessUnivariateStatistic {
False,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,72,** first moment of values that have been added */
False,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,73,rotected FirstMoment moment = null;
False,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,76,rotected boolean incMoment = true;
False,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,79,ublic Mean() {
False,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,80,oment = new FirstMoment();
False,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,84, Constructs a Mean with an External Moment.
False,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,85, @param m1 the moment
False,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,87,ublic Mean(final FirstMoment m1) {
False,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,88,his.moment = m1;
False,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,89,ncMoment = false;
False,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,93, @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#increment(double)
False,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,95,ublic void increment(final double d) {
False,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,96,f (incMoment) {
False,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,97,oment.increment(d);
False,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,102, @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#clear()
False,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,104,ublic void clear() {
False,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,105,f (incMoment) {
False,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,106,oment.clear();
False,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,111, @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#getResult()
False,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,113,ublic double getResult() {
False,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,114,eturn moment.m1;
False,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,117,*UnvariateStatistic Approach */
False,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,120,rotected Sum sum = new Sum();
False,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,123," Returns the <a href=""http://www.xycoon.com/arithmetic_mean.htm"">"
False,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,124, arithmetic mean </a> of a double[] of the available values.
False,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,125, @param values Is a double[] containing the values
False,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,126, @param begin processing at this point in the array
False,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,127, @param length processing at this point in the array
False,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,128, @return the mean of the values or Double.NaN if the array is empty
False,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,129," @see org.apache.commons.math.stat.univariate.UnivariateStatistic#evaluate(double[], int, int)"
False,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,131,ublic double evaluate(
False,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,132,"inal double[] values,"
False,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,133,"inal int begin,"
False,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,134,inal int length) {
False,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,135,"f (test(values, begin, length)) {"
False,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,136,eturn sum.evaluate(values) / ((double) length);
False,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,138,eturn Double.NaN;
False,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,2," The Apache Software License, Version 1.1"
False,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
False,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,5, reserved.
False,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,7," Redistribution and use in source and binary forms, with or without"
False,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,8," modification, are permitted provided that the following conditions"
False,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,9, are met:
False,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,11, 1. Redistributions of source code must retain the above copyright
False,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,12,"    notice, this list of conditions and the following disclaimer."
False,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,14, 2. Redistributions in binary form must reproduce the above copyright
False,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,15,"    notice, this list of conditions and the following disclaimer in"
False,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,16,    the documentation and/or other materials provided with the
False,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,17,    distribution.
False,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,19," 3. The end-user documentation included with the redistribution, if"
False,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,20,"    any, must include the following acknowledgement:"
False,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,21,"       ""This product includes software developed by the"
False,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,22,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,23,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,24,    if and wherever such third-party acknowledgements normally appear.
False,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,26," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,27,"    Foundation"" must not be used to endorse or promote products derived"
False,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,28,    from this software without prior written permission. For written
False,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,29,"    permission, please contact apache@apache.org."
False,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,31," 5. Products derived from this software may not be called ""Apache"""
False,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,32,"    nor may ""Apache"" appear in their name without prior written"
False,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,33,    permission of the Apache Software Foundation.
False,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,38, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,39," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,46, SUCH DAMAGE.
False,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,49, This software consists of voluntary contributions made by many
False,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,50, individuals on behalf of the Apache Software Foundation.  For more
False,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,51," information on the Apache Software Foundation, please see"
False,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,52, <http://www.apache.org/>.
False,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,54,ackage org.apache.commons.math.stat.univariate.moment;
False,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,57, The SecondMoment is calculated using the following
False,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,58," <a href=""http://www.spss.com/tech/stat/Algorithms/11.5/descriptives.pdf"">"
False,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,59, recursive strategy
False,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,60, </a>. Both incremental and evaluation strategies currently use this approach.
False,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,61, @version $Revision: 1.9 $ $Date: 2003/10/16 15:24:32 $
False,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,63,ublic class SecondMoment extends FirstMoment {
False,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,65,** second moment of values that have been added */
False,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,66,rotected double m2 = Double.NaN;
False,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,68,** temporary internal state made availabel for higher order moments */
False,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,69,rotected double n1 = 0.0;
False,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,72, @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#increment(double)
False,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,74,ublic void increment(final double d) {
False,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,75,f (n < 1) {
False,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,76,1 = m2 = 0.0;
False,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,79,"* increment m1 and _n0, _dev,  _v) */"
False,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,80,uper.increment(d);
False,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,82,1 = n0 - 1;
False,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,84,* increment and return m2 */
False,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,85,2 += n1 * dev * v;
False,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,90, @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#clear()
False,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,92,ublic void clear() {
False,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,93,uper.clear();
False,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,94,2 = Double.NaN;
False,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,95,1 = 0.0;
False,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,99, @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#getResult()
False,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,101,ublic double getResult() {
False,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,102,eturn m2;
False,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,2," The Apache Software License, Version 1.1"
False,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
False,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,5, reserved.
False,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,7," Redistribution and use in source and binary forms, with or without"
False,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,8," modification, are permitted provided that the following conditions"
False,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,9, are met:
False,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,11, 1. Redistributions of source code must retain the above copyright
False,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,12,"    notice, this list of conditions and the following disclaimer."
False,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,14, 2. Redistributions in binary form must reproduce the above copyright
False,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,15,"    notice, this list of conditions and the following disclaimer in"
False,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,16,    the documentation and/or other materials provided with the
False,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,17,    distribution.
False,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,19," 3. The end-user documentation included with the redistribution, if"
False,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,20,"    any, must include the following acknowledgement:"
False,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,21,"       ""This product includes software developed by the"
False,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,22,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,23,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,24,    if and wherever such third-party acknowledgements normally appear.
False,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,26," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,27,"    Foundation"" must not be used to endorse or promote products derived"
False,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,28,    from this software without prior written permission. For written
False,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,29,"    permission, please contact apache@apache.org."
False,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,31," 5. Products derived from this software may not be called ""Apache"""
False,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,32,"    nor may ""Apache"" appear in their name without prior written"
False,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,33,    permission of the Apache Software Foundation.
False,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,38, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,39," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,46, SUCH DAMAGE.
False,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,49, This software consists of voluntary contributions made by many
False,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,50, individuals on behalf of the Apache Software Foundation.  For more
False,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,51," information on the Apache Software Foundation, please see"
False,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,52, <http://www.apache.org/>.
False,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,54,ackage org.apache.commons.math.stat.univariate.moment;
False,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,56,mport org.apache.commons.math.stat.univariate.AbstractStorelessUnivariateStatistic;
False,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,59, @version $Revision: 1.11 $ $Date: 2003/10/16 15:24:32 $
False,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,61,ublic class Skewness extends AbstractStorelessUnivariateStatistic {
False,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,64,rotected ThirdMoment moment = null;
False,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,67,rotected boolean incMoment = true;
False,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,70,rotected double skewness = Double.NaN;
False,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,73,rivate int n = 0;
False,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,76, Constructs a Skewness
False,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,78,ublic Skewness() {
False,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,79,oment = new ThirdMoment();
False,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,83, Constructs a Skewness with an external moment
False,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,84, @param m3 external moment
False,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,86,ublic Skewness(final ThirdMoment m3) {
False,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,87,ncMoment = false;
False,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,88,his.moment = m3;
False,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,92, @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#increment(double)
False,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,94,ublic void increment(final double d) {
False,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,95,f (incMoment) {
False,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,96,oment.increment(d);
False,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,101, @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#getResult()
False,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,103,ublic double getResult() {
False,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,104,f (n < moment.n) {
False,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,105,f (moment.n <= 0) {
False,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,106,kewness = Double.NaN;
False,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,109,ouble variance =
False,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,110,moment.n < 1) ? 0.0 : moment.m2 / (double) (moment.n - 1);
False,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,112,f (moment.n <= 2 || variance < 10E-20) {
False,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,113,kewness = 0.0;
False,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,114, else {
False,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,115,kewness = (moment.n0 * moment.m3) /
False,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,116,moment.n1 * moment.n2 * Math.sqrt(variance) * variance);
False,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,118, = moment.n;
False,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,120,eturn skewness;
False,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,124, @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#clear()
False,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,126,ublic void clear() {
False,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,127,f (incMoment) {
False,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,128,oment.clear();
False,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,130,kewness = Double.NaN;
False,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,131, = 0;
False,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,134,*UnvariateStatistic Approach */
False,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,137,ean mean = new Mean();
False,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,140, Returns the skewness of a collection of values.  Skewness is a
False,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,141, measure of the assymetry of a given distribution.
False,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,142, This algorithm uses a corrected two pass algorithm of the following
False,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,143," <a href=""http://lib-www.lanl.gov/numerical/bookcpdf/c14-1.pdf"">"
False,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,144," corrected two pass formula (14.1.8)</a>, and also referenced in"
False,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,145, <p>
False,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,146," ""Algorithms for Computing the Sample Variance: Analysis and"
False,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,147," Recommendations"", Chan, T.F., Golub, G.H., and LeVeque, R.J."
False,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,148," 1983, American Statistician, vol. 37, pp. 242?247."
False,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,149, </p>
False,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,150, @param values Is a double[] containing the values
False,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,151, @param begin processing at this point in the array
False,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,152, @param length processing at this point in the array
False,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,153, @return the skewness of the values or Double.NaN if the array is empty
False,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,154," @see org.apache.commons.math.stat.univariate.UnivariateStatistic#evaluate(double[], int, int)"
False,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,156,ublic double evaluate(
False,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,157,"inal double[] values,"
False,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,158,"inal int begin,"
False,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,159,inal int length) {
False,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,161,/ Initialize the skewness
False,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,162,ouble skew = Double.NaN;
False,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,164,"f (test(values, begin, length)) {"
False,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,166,f (length <= 2) {
False,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,167,kew = 0.0;
False,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,168, else {
False,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,169,/ Get the mean and the standard deviation
False,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,170,"ouble m = mean.evaluate(values, begin, length);"
False,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,172,"/ Calc the std, this is implemented here instead"
False,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,173,/ of using the standardDeviation method eliminate
False,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,174,/ a duplicate pass to get the mean
False,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,175,ouble accum = 0.0;
False,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,176,ouble accum2 = 0.0;
False,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,177,or (int i = begin; i < begin + length; i++) {
False,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,178,"ccum += Math.pow((values[i] - m), 2.0);"
False,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,179,ccum2 += (values[i] - m);
False,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,181,ouble stdDev =
False,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,182,ath.sqrt(
False,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,183,"accum - (Math.pow(accum2, 2) / ((double) length))) /"
False,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,184,double) (length - 1));
False,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,186,/ Calculate the skew as the sum the cubes of the distance
False,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,187,/ from the mean divided by the standard deviation.
False,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,188,ouble accum3 = 0.0;
False,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,189,or (int i = begin; i < begin + length; i++) {
False,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,190,"ccum3 += Math.pow((values[i] - m) / stdDev, 3.0);"
False,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,193,/ Get N
False,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,194,ouble n0 = length;
False,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,196,/ Calculate skewness
False,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,197,kew = (n0 / ((n0 - 1) * (n0 - 2))) * accum3;
False,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,201,eturn skew;
False,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,2," The Apache Software License, Version 1.1"
False,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
False,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,5, reserved.
False,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,7," Redistribution and use in source and binary forms, with or without"
False,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,8," modification, are permitted provided that the following conditions"
False,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,9, are met:
False,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,11, 1. Redistributions of source code must retain the above copyright
False,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,12,"    notice, this list of conditions and the following disclaimer."
False,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,14, 2. Redistributions in binary form must reproduce the above copyright
False,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,15,"    notice, this list of conditions and the following disclaimer in"
False,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,16,    the documentation and/or other materials provided with the
False,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,17,    distribution.
False,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,19," 3. The end-user documentation included with the redistribution, if"
False,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,20,"    any, must include the following acknowledgement:"
False,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,21,"       ""This product includes software developed by the"
False,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,22,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,23,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,24,    if and wherever such third-party acknowledgements normally appear.
False,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,26," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,27,"    Foundation"" must not be used to endorse or promote products derived"
False,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,28,    from this software without prior written permission. For written
False,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,29,"    permission, please contact apache@apache.org."
False,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,31," 5. Products derived from this software may not be called ""Apache"""
False,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,32,"    nor may ""Apache"" appear in their name without prior written"
False,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,33,    permission of the Apache Software Foundation.
False,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,38, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,39," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,46, SUCH DAMAGE.
False,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,49, This software consists of voluntary contributions made by many
False,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,50, individuals on behalf of the Apache Software Foundation.  For more
False,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,51," information on the Apache Software Foundation, please see"
False,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,52, <http://www.apache.org/>.
False,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,54,ackage org.apache.commons.math.stat.univariate.moment;
False,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,58, @version $Revision: 1.9 $ $Date: 2003/10/16 15:24:32 $
False,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,60,ublic class StandardDeviation extends Variance {
False,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,63,rotected double std = Double.NaN;
False,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,66,rivate double lastVar = 0.0;
False,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,69, Constructs a StandardDeviation
False,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,71,ublic StandardDeviation() {
False,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,72,uper();
False,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,76, Constructs a StandardDeviation with an external moment
False,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,77, @param m2 the external moment
False,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,79,ublic StandardDeviation(final SecondMoment m2) {
False,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,80,uper(m2);
False,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,84, @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#increment(double)
False,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,86,ublic void increment(final double d) {
False,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,87,uper.increment(d);
False,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,91, @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#getResult()
False,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,93,ublic double getResult() {
False,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,94,f (lastVar != super.getResult()) {
False,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,95,astVar = super.getResult();
False,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,96,f (Double.isNaN(lastVar)) {
False,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,97,td = Double.NaN;
False,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,98, else if (lastVar == 0.0) {
False,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,99,td = 0.0;
False,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,100, else {
False,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,101,td = Math.sqrt(lastVar);
False,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,104,eturn std;
False,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,108, @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#clear()
False,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,110,ublic void clear() {
False,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,111,uper.clear();
False,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,112,astVar = 0.0;
False,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,116, Returns the Standard Deviation on an array of values.
False,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,117, @param values Is a double[] containing the values
False,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,118, @param begin processing at this point in the array
False,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,119, @param length processing at this point in the array
False,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,120," @return the result, Double.NaN if no values for an empty array"
False,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,121, or 0.0 for a single value set.
False,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,122," @see org.apache.commons.math.stat.univariate.UnivariateStatistic#evaluate(double[], int, int)"
False,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,124,ublic double evaluate(
False,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,125,"inal double[] values,"
False,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,126,"inal int begin,"
False,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,127,inal int length) {
False,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,129,"ouble var = super.evaluate(values, begin, length);"
False,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,131,f (Double.isNaN(var)) {
False,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,132,eturn Double.NaN;
False,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,135,eturn var != 0.0 ? Math.sqrt(var) : 0.0;
False,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,2," The Apache Software License, Version 1.1"
False,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
False,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,5, reserved.
False,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,7," Redistribution and use in source and binary forms, with or without"
False,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,8," modification, are permitted provided that the following conditions"
False,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,9, are met:
False,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,11, 1. Redistributions of source code must retain the above copyright
False,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,12,"    notice, this list of conditions and the following disclaimer."
False,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,14, 2. Redistributions in binary form must reproduce the above copyright
False,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,15,"    notice, this list of conditions and the following disclaimer in"
False,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,16,    the documentation and/or other materials provided with the
False,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,17,    distribution.
False,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,19," 3. The end-user documentation included with the redistribution, if"
False,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,20,"    any, must include the following acknowledgement:"
False,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,21,"       ""This product includes software developed by the"
False,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,22,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,23,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,24,    if and wherever such third-party acknowledgements normally appear.
False,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,26," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,27,"    Foundation"" must not be used to endorse or promote products derived"
False,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,28,    from this software without prior written permission. For written
False,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,29,"    permission, please contact apache@apache.org."
False,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,31," 5. Products derived from this software may not be called ""Apache"""
False,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,32,"    nor may ""Apache"" appear in their name without prior written"
False,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,33,    permission of the Apache Software Foundation.
False,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,38, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,39," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,46, SUCH DAMAGE.
False,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,49, This software consists of voluntary contributions made by many
False,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,50, individuals on behalf of the Apache Software Foundation.  For more
False,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,51," information on the Apache Software Foundation, please see"
False,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,52, <http://www.apache.org/>.
False,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,54,ackage org.apache.commons.math.stat.univariate.moment;
False,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,57, The ThirdMoment (arithmentic mean) is calculated using the following
False,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,58," <a href=""http://www.spss.com/tech/stat/Algorithms/11.5/descriptives.pdf"">"
False,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,59, recursive strategy
False,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,60, </a>. Both incremental and evaluation strategies currently use this approach.
False,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,61, @version $Revision: 1.9 $ $Date: 2003/10/16 15:24:32 $
False,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,63,ublic class ThirdMoment extends SecondMoment {
False,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,65,** third moment of values that have been added */
False,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,66,rotected double m3 = Double.NaN;
False,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,68,** temporary internal state made availabel for higher order moments */
False,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,69,rotected double v2 = 0.0;
False,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,71,** temporary internal state made availabel for higher order moments */
False,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,72,rotected double n2 = 0.0;
False,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,74,** temporary internal state made availabel for higher order moments */
False,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,75,rotected double prevM2 = 0.0;
False,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,78, @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#increment(double)
False,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,80,ublic void increment(final double d) {
False,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,81,f (n < 1) {
False,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,82,3 = m2 = m1 = 0.0;
False,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,85,* retain a reference to the last m2*/
False,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,86,revM2 = m2;
False,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,88,"* increment m1 and m2 (and _n0, _n1, _v) */"
False,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,89,uper.increment(d);
False,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,91,2 = v * v;
False,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,92,2 = (double) (n - 2);
False,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,94,3 = m3 - (3.0 * v * prevM2) + (n0 * n1 * n2 * v2 * v);
False,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,99, @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#getResult()
False,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,101,ublic double getResult() {
False,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,102,eturn m3;
False,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,106, @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#clear()
False,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,108,ublic void clear() {
False,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,109,uper.clear();
False,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,110,3 = Double.NaN;
False,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,111,2 = 0.0;
False,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,112,2 = 0.0;
False,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,113,revM2 = 0.0;
False,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,2," The Apache Software License, Version 1.1"
False,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
False,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,5, reserved.
False,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,7," Redistribution and use in source and binary forms, with or without"
False,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,8," modification, are permitted provided that the following conditions"
False,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,9, are met:
False,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,11, 1. Redistributions of source code must retain the above copyright
False,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,12,"    notice, this list of conditions and the following disclaimer."
False,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,14, 2. Redistributions in binary form must reproduce the above copyright
False,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,15,"    notice, this list of conditions and the following disclaimer in"
False,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,16,    the documentation and/or other materials provided with the
False,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,17,    distribution.
False,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,19," 3. The end-user documentation included with the redistribution, if"
False,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,20,"    any, must include the following acknowledgement:"
False,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,21,"       ""This product includes software developed by the"
False,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,22,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,23,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,24,    if and wherever such third-party acknowledgements normally appear.
False,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,26," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,27,"    Foundation"" must not be used to endorse or promote products derived"
False,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,28,    from this software without prior written permission. For written
False,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,29,"    permission, please contact apache@apache.org."
False,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,31," 5. Products derived from this software may not be called ""Apache"""
False,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,32,"    nor may ""Apache"" appear in their name without prior written"
False,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,33,    permission of the Apache Software Foundation.
False,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,38, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,39," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,46, SUCH DAMAGE.
False,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,49, This software consists of voluntary contributions made by many
False,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,50, individuals on behalf of the Apache Software Foundation.  For more
False,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,51," information on the Apache Software Foundation, please see"
False,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,52, <http://www.apache.org/>.
False,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,54,ackage org.apache.commons.math.stat.univariate.moment;
False,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,56,mport org.apache.commons.math.stat.univariate.AbstractStorelessUnivariateStatistic;
False,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,60, @version $Revision: 1.11 $ $Date: 2003/10/16 15:24:32 $
False,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,62,ublic class Variance extends AbstractStorelessUnivariateStatistic {
False,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,64,** SecondMoment is used in incremental calculation of Variance*/
False,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,65,rotected SecondMoment moment = null;
False,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,68, Boolean test to determine if this Variance should also increment
False,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,69," the second moment, this evaluates to false when this Variance is"
False,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,70, constructed with an external SecondMoment as a parameter.
False,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,72,rotected boolean incMoment = true;
False,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,75, This property maintains the latest calculated
False,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,76, variance for efficiency when getResult() is called
False,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,77, many times between increments.
False,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,79,rotected double variance = Double.NaN;
False,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,82, Maintains the current count of inrementations that have occured.
False,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,83," If the external SecondMoment is used, the this is updated from"
False,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,84, that moments counter
False,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,86,rotected int n = 0;
False,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,89, Constructs a Variance.
False,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,91,ublic Variance() {
False,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,92,oment = new SecondMoment();
False,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,96, Constructs a Variance based on an externalized second moment.
False,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,97, @param m2 the SecondMoment (Thrid or Fourth moments work
False,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,98, here as well.)
False,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,100,ublic Variance(final SecondMoment m2) {
False,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,101,ncMoment = false;
False,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,102,his.moment = m2;
False,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,105, @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#increment(double)
False,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,107,ublic void increment(final double d) {
False,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,108,f (incMoment) {
False,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,109,oment.increment(d);
False,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,114, @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#getResult()
False,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,116,ublic double getResult() {
False,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,117,f (n < moment.n) {
False,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,118,f (moment.n <= 0) {
False,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,119,ariance = Double.NaN;
False,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,120, else if (moment.n <= 1) {
False,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,121,ariance = 0.0;
False,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,122, else {
False,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,123,ariance = moment.m2 / (moment.n0 - 1);
False,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,125, = moment.n;
False,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,128,eturn variance;
False,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,132, @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#clear()
False,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,134,ublic void clear() {
False,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,135,f (incMoment) {
False,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,136,oment.clear();
False,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,138,ariance = Double.NaN;
False,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,139, = 0;
False,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,142,** Mean to be used in UnvariateStatistic evaluation approach. */
False,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,143,rotected Mean mean = new Mean();
False,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,146, Returns the variance of the available values. This uses a corrected
False,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,147, two pass algorithm of the following
False,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,148," <a href=""http://lib-www.lanl.gov/numerical/bookcpdf/c14-1.pdf"">"
False,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,149," corrected two pass formula (14.1.8)</a>, and also referenced in:"
False,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,150, <p>
False,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,151," ""Algorithms for Computing the Sample Variance: Analysis and"
False,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,152," Recommendations"", Chan, T.F., Golub, G.H., and LeVeque, R.J."
False,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,153," 1983, American Statistician, vol. 37, pp. 242?247."
False,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,154, </p>
False,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,155, @param values Is a double[] containing the values
False,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,156, @param begin processing at this point in the array
False,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,157, @param length processing at this point in the array
False,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,158," @return the result, Double.NaN if no values for an empty array"
False,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,159, or 0.0 for a single value set.
False,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,160," @see org.apache.commons.math.stat.univariate.UnivariateStatistic#evaluate(double[], int, int)"
False,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,162,ublic double evaluate(
False,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,163,"inal double[] values,"
False,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,164,"inal int begin,"
False,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,165,inal int length) {
False,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,167,ouble var = Double.NaN;
False,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,169,"f (test(values, begin, length)) {"
False,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,170,f (length == 1) {
False,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,171,ar = 0.0;
False,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,172, else if (length > 1) {
False,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,173,"ouble m = mean.evaluate(values, begin, length);"
False,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,174,ouble accum = 0.0;
False,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,175,ouble accum2 = 0.0;
False,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,176,or (int i = begin; i < begin + length; i++) {
False,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,177,"ccum += Math.pow((values[i] - m), 2.0);"
False,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,178,ccum2 += (values[i] - m);
False,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,180,"ar = (accum - (Math.pow(accum2, 2) / ((double) length))) /"
False,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,181,double) (length - 1);
False,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,184,eturn var;
False,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,2," The Apache Software License, Version 1.1"
False,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
False,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,5, reserved.
False,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,7," Redistribution and use in source and binary forms, with or without"
False,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,8," modification, are permitted provided that the following conditions"
False,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,9, are met:
False,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,11, 1. Redistributions of source code must retain the above copyright
False,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,12,"    notice, this list of conditions and the following disclaimer."
False,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,14, 2. Redistributions in binary form must reproduce the above copyright
False,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,15,"    notice, this list of conditions and the following disclaimer in"
False,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,16,    the documentation and/or other materials provided with the
False,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,17,    distribution.
False,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,19," 3. The end-user documentation included with the redistribution, if"
False,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,20,"    any, must include the following acknowledgement:"
False,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,21,"       ""This product includes software developed by the"
False,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,22,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,23,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,24,    if and wherever such third-party acknowledgements normally appear.
False,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,26," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,27,"    Foundation"" must not be used to endorse or promote products derived"
False,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,28,    from this software without prior written permission. For written
False,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,29,"    permission, please contact apache@apache.org."
False,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,31," 5. Products derived from this software may not be called ""Apache"""
False,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,32,"    nor may ""Apache"" appear in their name without prior written"
False,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,33,    permission of the Apache Software Foundation.
False,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,38, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,39," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,46, SUCH DAMAGE.
False,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,49, This software consists of voluntary contributions made by many
False,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,50, individuals on behalf of the Apache Software Foundation.  For more
False,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,51," information on the Apache Software Foundation, please see"
False,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,52, <http://www.apache.org/>.
False,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,54,ackage org.apache.commons.math.stat.univariate.rank;
False,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,56,mport org
False,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,57,apache
False,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,58,commons
False,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,59,math
False,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,60,stat
False,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,61,univariate
False,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,62,AbstractStorelessUnivariateStatistic;
False,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,65, @version $Revision: 1.9 $ $Date: 2003/10/16 15:24:30 $
False,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,67,ublic class Max extends AbstractStorelessUnivariateStatistic {
False,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,70,rivate double value = Double.NaN;
False,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,73, @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#increment(double)
False,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,75,ublic void increment(final double d) {
False,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,76,"alue = Double.isNaN(value) ? d : Math.max(value, d);"
False,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,80, @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#clear()
False,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,82,ublic void clear() {
False,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,83,alue = Double.NaN;
False,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,87, @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#getResult()
False,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,89,ublic double getResult() {
False,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,90,eturn value;
False,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,94," @see org.apache.commons.math.stat.univariate.UnivariateStatistic#evaluate(double[], int, int)"
False,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,96,ublic double evaluate(
False,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,97,"inal double[] values,"
False,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,98,"inal int begin,"
False,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,99,inal int length) {
False,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,100,ouble max = Double.NaN;
False,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,101,"f (test(values, begin, length)) {"
False,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,102,ax = values[begin];
False,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,103,or (int i = begin; i < begin + length; i++) {
False,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,104,ax = (max > values[i]) ? max : values[i];
False,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,107,eturn max;
False,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,2," The Apache Software License, Version 1.1"
False,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
False,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,5, reserved.
False,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,7," Redistribution and use in source and binary forms, with or without"
False,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,8," modification, are permitted provided that the following conditions"
False,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,9, are met:
False,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,11, 1. Redistributions of source code must retain the above copyright
False,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,12,"    notice, this list of conditions and the following disclaimer."
False,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,14, 2. Redistributions in binary form must reproduce the above copyright
False,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,15,"    notice, this list of conditions and the following disclaimer in"
False,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,16,    the documentation and/or other materials provided with the
False,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,17,    distribution.
False,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,19," 3. The end-user documentation included with the redistribution, if"
False,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,20,"    any, must include the following acknowledgement:"
False,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,21,"       ""This product includes software developed by the"
False,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,22,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,23,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,24,    if and wherever such third-party acknowledgements normally appear.
False,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,26," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,27,"    Foundation"" must not be used to endorse or promote products derived"
False,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,28,    from this software without prior written permission. For written
False,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,29,"    permission, please contact apache@apache.org."
False,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,31," 5. Products derived from this software may not be called ""Apache"""
False,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,32,"    nor may ""Apache"" appear in their name without prior written"
False,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,33,    permission of the Apache Software Foundation.
False,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,38, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,39," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,46, SUCH DAMAGE.
False,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,49, This software consists of voluntary contributions made by many
False,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,50, individuals on behalf of the Apache Software Foundation.  For more
False,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,51," information on the Apache Software Foundation, please see"
False,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,52, <http://www.apache.org/>.
False,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,54,ackage org.apache.commons.math.stat.univariate.rank;
False,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,58, @version $Revision: 1.6 $ $Date: 2003/10/16 15:24:30 $
False,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,60,ublic class Median extends Percentile {
False,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,65,ublic Median() {
False,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,66,uper(50.0);
False,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,2," The Apache Software License, Version 1.1"
False,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
False,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,5, reserved.
False,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,7," Redistribution and use in source and binary forms, with or without"
False,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,8," modification, are permitted provided that the following conditions"
False,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,9, are met:
False,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,11, 1. Redistributions of source code must retain the above copyright
False,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,12,"    notice, this list of conditions and the following disclaimer."
False,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,14, 2. Redistributions in binary form must reproduce the above copyright
False,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,15,"    notice, this list of conditions and the following disclaimer in"
False,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,16,    the documentation and/or other materials provided with the
False,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,17,    distribution.
False,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,19," 3. The end-user documentation included with the redistribution, if"
False,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,20,"    any, must include the following acknowledgement:"
False,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,21,"       ""This product includes software developed by the"
False,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,22,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,23,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,24,    if and wherever such third-party acknowledgements normally appear.
False,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,26," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,27,"    Foundation"" must not be used to endorse or promote products derived"
False,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,28,    from this software without prior written permission. For written
False,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,29,"    permission, please contact apache@apache.org."
False,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,31," 5. Products derived from this software may not be called ""Apache"""
False,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,32,"    nor may ""Apache"" appear in their name without prior written"
False,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,33,    permission of the Apache Software Foundation.
False,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,38, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,39," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,46, SUCH DAMAGE.
False,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,49, This software consists of voluntary contributions made by many
False,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,50, individuals on behalf of the Apache Software Foundation.  For more
False,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,51," information on the Apache Software Foundation, please see"
False,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,52, <http://www.apache.org/>.
False,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,54,ackage org.apache.commons.math.stat.univariate.rank;
False,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,56,mport org
False,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,57,apache
False,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,58,commons
False,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,59,math
False,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,60,stat
False,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,61,univariate
False,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,62,AbstractStorelessUnivariateStatistic;
False,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,65, @version $Revision: 1.9 $ $Date: 2003/10/16 15:24:30 $
False,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,67,ublic class Min extends AbstractStorelessUnivariateStatistic {
False,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,70,rivate double value = Double.NaN;
False,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,73, @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#increment(double)
False,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,75,ublic void increment(final double d) {
False,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,76,"alue = Double.isNaN(value) ? d : Math.min(value, d);"
False,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,80, @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#clear()
False,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,82,ublic void clear() {
False,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,83,alue = Double.NaN;
False,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,87, @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#getResult()
False,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,89,ublic double getResult() {
False,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,90,eturn value;
False,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,94," @see org.apache.commons.math.stat.univariate.UnivariateStatistic#evaluate(double[], int, int)"
False,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,96,ublic double evaluate(
False,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,97,"inal double[] values,"
False,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,98,"inal int begin,"
False,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,99,inal int length) {
False,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,100,ouble min = Double.NaN;
False,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,101,"f (test(values, begin, length)) {"
False,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,102,in = values[begin];
False,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,103,or (int i = begin; i < begin + length; i++) {
False,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,104,in = (min < values[i]) ? min : values[i];
False,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,107,eturn min;
False,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,2," The Apache Software License, Version 1.1"
False,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
False,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,5, reserved.
False,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,7," Redistribution and use in source and binary forms, with or without"
False,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,8," modification, are permitted provided that the following conditions"
False,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,9, are met:
False,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,11, 1. Redistributions of source code must retain the above copyright
False,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,12,"    notice, this list of conditions and the following disclaimer."
False,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,14, 2. Redistributions in binary form must reproduce the above copyright
False,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,15,"    notice, this list of conditions and the following disclaimer in"
False,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,16,    the documentation and/or other materials provided with the
False,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,17,    distribution.
False,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,19," 3. The end-user documentation included with the redistribution, if"
False,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,20,"    any, must include the following acknowledgement:"
False,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,21,"       ""This product includes software developed by the"
False,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,22,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,23,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,24,    if and wherever such third-party acknowledgements normally appear.
False,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,26," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,27,"    Foundation"" must not be used to endorse or promote products derived"
False,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,28,    from this software without prior written permission. For written
False,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,29,"    permission, please contact apache@apache.org."
False,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,31," 5. Products derived from this software may not be called ""Apache"""
False,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,32,"    nor may ""Apache"" appear in their name without prior written"
False,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,33,    permission of the Apache Software Foundation.
False,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,38, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,39," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,46, SUCH DAMAGE.
False,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,49, This software consists of voluntary contributions made by many
False,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,50, individuals on behalf of the Apache Software Foundation.  For more
False,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,51," information on the Apache Software Foundation, please see"
False,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,52, <http://www.apache.org/>.
False,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,54,ackage org.apache.commons.math.stat.univariate.rank;
False,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,56,mport java.util.Arrays;
False,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,57,mport org.apache.commons.math.stat.univariate.AbstractUnivariateStatistic;
False,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,60, @version $Revision: 1.8 $ $Date: 2003/10/16 15:24:30 $
False,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,62,ublic class Percentile extends AbstractUnivariateStatistic {
False,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,65,rivate double percentile = 0.0;
False,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,68, Constructs a Percentile with a default percentile
False,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,69, value of 50.0.
False,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,71,ublic Percentile() {
False,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,72,uper();
False,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,73,ercentile = 50.0;
False,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,77, Constructs a Percentile with the specific percentile value.
False,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,78, @param p the percentile
False,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,80,ublic Percentile(final double p) {
False,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,81,his.percentile = p;
False,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,85, Evaluates the double[] top the specified percentile.
False,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,86, This does not alter the interal percentile state of the
False,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,87, statistic.
False,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,88, @param values Is a double[] containing the values
False,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,89, @param p Is the percentile to evaluate to.
False,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,90, @return the result of the evaluation or Double.NaN
False,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,91, if the array is empty
False,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,93,"ublic double evaluate(final double[] values, final double p) {"
False,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,94,"eturn evaluate(values, 0, values.length, p);"
False,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,98," @see org.apache.commons.math.stat.univariate.UnivariateStatistic#evaluate(double[], int, int)"
False,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,100,ublic double evaluate(
False,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,101,"inal double[] values,"
False,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,102,"inal int start,"
False,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,103,inal int length) {
False,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,105,"eturn evaluate(values, start, length, percentile);"
False,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,109, Evaluates the double[] top the specified percentile.
False,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,110, This does not alter the interal percentile state of the
False,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,111, statistic.
False,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,112, @param values Is a double[] containing the values
False,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,113, @param begin processing at this point in the array
False,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,114, @param length processing at this point in the array
False,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,115, @param p Is the percentile to evaluate to.*
False,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,116, @return the result of the evaluation or Double.NaN
False,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,117, if the array is empty
False,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,119,ublic double evaluate(
False,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,120,"inal double[] values,"
False,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,121,"inal int begin,"
False,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,122,"inal int length,"
False,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,123,inal double p) {
False,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,125,"est(values, begin, length);"
False,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,127,f ((p > 100) || (p <= 0)) {
False,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,128,"hrow new IllegalArgumentException(""invalid percentile value"");"
False,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,130,ouble n = (double) length;
False,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,131,f (n == 0) {
False,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,132,eturn Double.NaN;
False,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,134,f (n == 1) {
False,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,135,eturn values[begin]; // always return single value for n = 1
False,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,137,ouble pos = p * (n + 1) / 100;
False,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,138,ouble fpos = Math.floor(pos);
False,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,139,nt intPos = (int) fpos;
False,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,140,ouble dif = pos - fpos;
False,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,141,ouble[] sorted = new double[length];
False,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,142,"ystem.arraycopy(values, begin, sorted, 0, length);"
False,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,143,rrays.sort(sorted);
False,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,145,f (pos < 1) {
False,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,146,eturn sorted[0];
False,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,148,f (pos >= n) {
False,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,149,eturn sorted[length - 1];
False,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,151,ouble lower = sorted[intPos - 1];
False,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,152,ouble upper = sorted[intPos];
False,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,153,eturn lower + dif * (upper - lower);
False,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,157, The default internal state of this percentile can be set.
False,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,158, This will return that value.
False,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,159, @return percentile
False,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,161,ublic double getPercentile() {
False,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,162,eturn percentile;
False,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,166, The default internal state of this percentile can be set.
False,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,167, This will setthat value.
False,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,168, @param p a value between 0 <= p <= 100
False,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,170,ublic void setPercentile(final double p) {
False,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,171,ercentile = p;
False,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,2," The Apache Software License, Version 1.1"
False,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
False,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,5, reserved.
False,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,7," Redistribution and use in source and binary forms, with or without"
False,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,8," modification, are permitted provided that the following conditions"
False,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,9, are met:
False,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,11, 1. Redistributions of source code must retain the above copyright
False,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,12,"    notice, this list of conditions and the following disclaimer."
False,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,14, 2. Redistributions in binary form must reproduce the above copyright
False,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,15,"    notice, this list of conditions and the following disclaimer in"
False,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,16,    the documentation and/or other materials provided with the
False,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,17,    distribution.
False,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,19," 3. The end-user documentation included with the redistribution, if"
False,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,20,"    any, must include the following acknowledgement:"
False,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,21,"       ""This product includes software developed by the"
False,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,22,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,23,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,24,    if and wherever such third-party acknowledgements normally appear.
False,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,26," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,27,"    Foundation"" must not be used to endorse or promote products derived"
False,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,28,    from this software without prior written permission. For written
False,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,29,"    permission, please contact apache@apache.org."
False,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,31," 5. Products derived from this software may not be called ""Apache"""
False,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,32,"    nor may ""Apache"" appear in their name without prior written"
False,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,33,    permission of the Apache Software Foundation.
False,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,38, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,39," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,46, SUCH DAMAGE.
False,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,49, This software consists of voluntary contributions made by many
False,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,50, individuals on behalf of the Apache Software Foundation.  For more
False,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,51," information on the Apache Software Foundation, please see"
False,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,52, <http://www.apache.org/>.
False,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,54,ackage org.apache.commons.math.stat.univariate.summary;
False,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,56,mport org
False,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,57,apache
False,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,58,commons
False,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,59,math
False,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,60,stat
False,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,61,univariate
False,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,62,AbstractStorelessUnivariateStatistic;
False,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,65, @version $Revision: 1.9 $ $Date: 2003/10/16 15:24:29 $
False,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,67,ublic class Product extends AbstractStorelessUnivariateStatistic {
False,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,70, The current Running Product.
False,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,72,rivate double value = Double.NaN;
False,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,75, @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#increment(double)
False,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,77,ublic void increment(final double d) {
False,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,78,f (Double.isNaN(value)) {
False,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,79,alue = d;
False,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,80, else {
False,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,81,alue *= d;
False,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,86, @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#getResult()
False,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,88,ublic double getResult() {
False,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,89,eturn value;
False,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,93, @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#clear()
False,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,95,ublic void clear() {
False,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,96,alue = Double.NaN;
False,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,100, Returns the product for this collection of values
False,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,101, @param values Is a double[] containing the values
False,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,102, @param begin processing at this point in the array
False,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,103, @param length processing at this point in the array
False,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,104, @return the product values or Double.NaN if the array is empty
False,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,105," @see org.apache.commons.math.stat.univariate.UnivariateStatistic#evaluate(double[], int, int)"
False,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,107,ublic double evaluate(
False,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,108,"inal double[] values,"
False,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,109,"inal int begin,"
False,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,110,inal int length) {
False,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,111,ouble product = Double.NaN;
False,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,112,"f (test(values, begin, length)) {"
False,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,113,roduct = 1.0;
False,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,114,or (int i = begin; i < begin + length; i++) {
False,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,115,roduct *= values[i];
False,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,118,eturn product;
False,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,2," The Apache Software License, Version 1.1"
False,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
False,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,5, reserved.
False,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,7," Redistribution and use in source and binary forms, with or without"
False,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,8," modification, are permitted provided that the following conditions"
False,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,9, are met:
False,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,11, 1. Redistributions of source code must retain the above copyright
False,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,12,"    notice, this list of conditions and the following disclaimer."
False,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,14, 2. Redistributions in binary form must reproduce the above copyright
False,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,15,"    notice, this list of conditions and the following disclaimer in"
False,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,16,    the documentation and/or other materials provided with the
False,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,17,    distribution.
False,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,19," 3. The end-user documentation included with the redistribution, if"
False,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,20,"    any, must include the following acknowledgement:"
False,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,21,"       ""This product includes software developed by the"
False,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,22,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,23,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,24,    if and wherever such third-party acknowledgements normally appear.
False,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,26," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,27,"    Foundation"" must not be used to endorse or promote products derived"
False,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,28,    from this software without prior written permission. For written
False,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,29,"    permission, please contact apache@apache.org."
False,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,31," 5. Products derived from this software may not be called ""Apache"""
False,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,32,"    nor may ""Apache"" appear in their name without prior written"
False,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,33,    permission of the Apache Software Foundation.
False,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,38, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,39," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,46, SUCH DAMAGE.
False,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,49, This software consists of voluntary contributions made by many
False,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,50, individuals on behalf of the Apache Software Foundation.  For more
False,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,51," information on the Apache Software Foundation, please see"
False,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,52, <http://www.apache.org/>.
False,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,54,ackage org.apache.commons.math.stat.univariate.summary;
False,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,56,mport org.apache.commons.math.stat.univariate.AbstractStorelessUnivariateStatistic;
False,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,59, @version $Revision: 1.11 $ $Date: 2003/10/16 15:24:29 $
False,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,61,ublic class Sum extends AbstractStorelessUnivariateStatistic {
False,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,64, The currently running sum.
False,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,66,rivate double value = Double.NaN;
False,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,69, @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#increment(double)
False,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,71,ublic void increment(final double d) {
False,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,72,f (Double.isNaN(value)) {
False,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,73,alue = d;
False,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,74, else {
False,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,75,alue += d;
False,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,80, @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#getResult()
False,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,82,ublic double getResult() {
False,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,83,eturn value;
False,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,87, @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#clear()
False,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,89,ublic void clear() {
False,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,90,alue = Double.NaN;
False,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,94, The sum of the values that have been added to Univariate.
False,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,95, @param values Is a double[] containing the values
False,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,96, @param begin processing at this point in the array
False,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,97, @param length processing at this point in the array
False,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,98, @return the sum of the values or Double.NaN if the array is empty
False,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,99," @see org.apache.commons.math.stat.univariate.UnivariateStatistic#evaluate(double[], int, int)"
False,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,101,ublic double evaluate(
False,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,102,"inal double[] values,"
False,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,103,"inal int begin,"
False,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,104,inal int length) {
False,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,105,ouble sum = Double.NaN;
False,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,106,"f (test(values, begin, length)) {"
False,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,107,um = 0.0;
False,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,108,or (int i = begin; i < begin + length; i++) {
False,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,109,um += values[i];
False,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,112,eturn sum;
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,2," The Apache Software License, Version 1.1"
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,5, reserved.
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,7," Redistribution and use in source and binary forms, with or without"
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,8," modification, are permitted provided that the following conditions"
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,9, are met:
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,11, 1. Redistributions of source code must retain the above copyright
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,12,"    notice, this list of conditions and the following disclaimer."
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,14, 2. Redistributions in binary form must reproduce the above copyright
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,15,"    notice, this list of conditions and the following disclaimer in"
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,16,    the documentation and/or other materials provided with the
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,17,    distribution.
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,19," 3. The end-user documentation included with the redistribution, if"
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,20,"    any, must include the following acknowledgement:"
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,21,"       ""This product includes software developed by the"
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,22,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,23,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,24,    if and wherever such third-party acknowledgements normally appear.
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,26," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,27,"    Foundation"" must not be used to endorse or promote products derived"
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,28,    from this software without prior written permission. For written
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,29,"    permission, please contact apache@apache.org."
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,31," 5. Products derived from this software may not be called ""Apache"""
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,32,"    nor may ""Apache"" appear in their name without prior written"
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,33,    permission of the Apache Software Foundation.
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,38, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,39," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,46, SUCH DAMAGE.
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,49, This software consists of voluntary contributions made by many
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,50, individuals on behalf of the Apache Software Foundation.  For more
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,51," information on the Apache Software Foundation, please see"
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,52, <http://www.apache.org/>.
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,54,ackage org.apache.commons.math.stat.univariate.summary;
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,56,mport org
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,57,apache
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,58,commons
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,59,math
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,60,stat
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,61,univariate
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,62,AbstractStorelessUnivariateStatistic;
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,65, @version $Revision: 1.9 $ $Date: 2003/10/16 15:24:29 $
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,67,ublic class SumOfLogs extends AbstractStorelessUnivariateStatistic {
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,70, The currently running value
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,72,rivate double value = Double.NaN;
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,75,rivate boolean init = true;
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,78, @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#increment(double)
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,80,ublic void increment(final double d) {
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,81,f (init) {
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,82,alue = Math.log(d);
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,83,nit = false;
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,84, else {
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,85,alue += Math.log(d);
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,90, @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#getResult()
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,92,ublic double getResult() {
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,93,eturn value;
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,97, @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#clear()
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,99,ublic void clear() {
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,100,alue = Double.NaN;
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,101,nit = true;
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,105, Returns the sum of the natural logs for this collection of values
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,106, @param values Is a double[] containing the values
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,107, @param begin processing at this point in the array
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,108, @param length processing at this point in the array
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,109, @return the sumLog value or Double.NaN if the array is empty
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,110," @see org.apache.commons.math.stat.univariate.UnivariateStatistic#evaluate(double[], int, int)"
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,112,ublic double evaluate(
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,113,"inal double[] values,"
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,114,"inal int begin,"
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,115,inal int length) {
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,116,ouble sumLog = Double.NaN;
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,117,"f (test(values, begin, length)) {"
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,118,umLog = 0.0;
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,119,or (int i = begin; i < begin + length; i++) {
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,120,umLog += Math.log(values[i]);
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,123,eturn sumLog;
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,2," The Apache Software License, Version 1.1"
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,5, reserved.
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,7," Redistribution and use in source and binary forms, with or without"
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,8," modification, are permitted provided that the following conditions"
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,9, are met:
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,11, 1. Redistributions of source code must retain the above copyright
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,12,"    notice, this list of conditions and the following disclaimer."
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,14, 2. Redistributions in binary form must reproduce the above copyright
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,15,"    notice, this list of conditions and the following disclaimer in"
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,16,    the documentation and/or other materials provided with the
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,17,    distribution.
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,19," 3. The end-user documentation included with the redistribution, if"
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,20,"    any, must include the following acknowledgement:"
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,21,"       ""This product includes software developed by the"
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,22,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,23,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,24,    if and wherever such third-party acknowledgements normally appear.
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,26," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,27,"    Foundation"" must not be used to endorse or promote products derived"
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,28,    from this software without prior written permission. For written
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,29,"    permission, please contact apache@apache.org."
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,31," 5. Products derived from this software may not be called ""Apache"""
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,32,"    nor may ""Apache"" appear in their name without prior written"
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,33,    permission of the Apache Software Foundation.
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,38, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,39," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,46, SUCH DAMAGE.
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,49, This software consists of voluntary contributions made by many
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,50, individuals on behalf of the Apache Software Foundation.  For more
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,51," information on the Apache Software Foundation, please see"
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,52, <http://www.apache.org/>.
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,54,ackage org.apache.commons.math.stat.univariate.summary;
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,56,mport org
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,57,apache
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,58,commons
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,59,math
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,60,stat
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,61,univariate
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,62,AbstractStorelessUnivariateStatistic;
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,65, @version $Revision: 1.9 $ $Date: 2003/10/16 15:24:29 $
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,67,ublic class SumOfSquares extends AbstractStorelessUnivariateStatistic {
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,70, The currently running sumSq
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,72,rivate double value = Double.NaN;
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,75, @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#increment(double)
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,77,ublic void increment(final double d) {
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,78,f (Double.isNaN(value)) {
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,79,alue = d * d;
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,80, else {
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,81,alue += d * d;
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,86, @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#getResult()
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,88,ublic double getResult() {
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,89,eturn value;
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,93, @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#clear()
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,95,ublic void clear() {
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,96,alue = Double.NaN;
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,100, Returns the sum of the squares of the available values.
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,101, @param values Is a double[] containing the values
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,102, @param begin processing at this point in the array
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,103, @param length processing at this point in the array
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,104, @return the sum of the squared values or Double.NaN if the array is empty
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,105," @see org.apache.commons.math.stat.univariate.UnivariateStatistic#evaluate(double[], int, int)"
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,107,ublic double evaluate(
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,108,"inal double[] values,"
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,109,"inal int begin,"
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,110,inal int length) {
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,111,ouble sumSq = Double.NaN;
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,112,"f (test(values, begin, length)) {"
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,113,umSq = 0.0;
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,114,or (int i = begin; i < begin + length; i++) {
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,115,"umSq += Math.pow(values[i], 2.0);"
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,118,eturn sumSq;
False,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,2," The Apache Software License, Version 1.1"
False,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
False,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,5, reserved.
False,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,7," Redistribution and use in source and binary forms, with or without"
False,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,8," modification, are permitted provided that the following conditions"
False,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,9, are met:
False,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,11, 1. Redistributions of source code must retain the above copyright
False,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,12,"    notice, this list of conditions and the following disclaimer."
False,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,14, 2. Redistributions in binary form must reproduce the above copyright
False,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,15,"    notice, this list of conditions and the following disclaimer in"
False,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,16,    the documentation and/or other materials provided with the
False,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,17,    distribution.
False,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,19," 3. The end-user documentation included with the redistribution, if"
False,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,20,"    any, must include the following acknowledgement:"
False,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,21,"       ""This product includes software developed by the"
False,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,22,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,23,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,24,    if and wherever such third-party acknowledgements normally appear.
False,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,26," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,27,"    Foundation"" must not be used to endorse or promote products derived"
False,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,28,    from this software without prior written permission. For written
False,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,29,"    permission, please contact apache@apache.org."
False,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,31," 5. Products derived from this software may not be called ""Apache"""
False,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,32,"    nor may ""Apache"" appear in their name without prior written"
False,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,33,    permission of the Apache Software Foundation.
False,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,38, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,39," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,46, SUCH DAMAGE.
False,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,49, This software consists of voluntary contributions made by many
False,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,50, individuals on behalf of the Apache Software Foundation.  For more
False,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,51," information on the Apache Software Foundation, please see"
False,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,52, <http://www.apache.org/>.
False,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,54,ackage org.apache.commons.math.util;
False,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,56,mport java.lang.reflect.InvocationTargetException;
False,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,57,mport org.apache.commons.beanutils.PropertyUtils;
False,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,58,mport org.apache.commons.logging.LogFactory;
False,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,61, Uses PropertyUtils to map a Bean getter to a double value.
False,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,62, @version $Revision: 1.8 $ $Date: 2003/10/16 15:24:30 $
False,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,64,ublic class BeanTransformer implements NumberTransformer {
False,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,67, The propertyName for this Transformer
False,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,69,rivate String propertyName;
False,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,72, Create a BeanTransformer
False,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,74,ublic BeanTransformer() {
False,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,75,his(null);
False,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,79, Create a BeanTransformer with a specific PropertyName.
False,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,80, @param property The property.
False,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,82,ublic BeanTransformer(final String property) {
False,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,83,uper();
False,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,84,etPropertyName(property);
False,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,88, Get the property String
False,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,89, @return the Property Name String
False,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,91,ublic String getPropertyName() {
False,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,92,eturn propertyName;
False,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,96, Set the propertyString
False,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,97, @param string The string to set the property to.
False,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,99,ublic void setPropertyName(final String string) {
False,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,100,ropertyName = string;
False,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,104, @see org.apache.commons.math.util.NumberTransformer#transform(java.lang.Object)
False,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,106,ublic double transform(final Object o) {
False,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,107,ouble d = Double.NaN;
False,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,108,ry {
False,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,109, =
False,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,110,"(Number) PropertyUtils.getProperty(o, getPropertyName()))"
False,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,111,doubleValue();
False,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,112, catch (IllegalAccessException e) {
False,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,113,ogFactory.getLog(getClass()).error(
False,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,114,"Property can not be accessed.  Using NaN."", e);"
False,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,115, catch (InvocationTargetException e) {
False,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,116,ogFactory.getLog(getClass()).error(
False,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,117,"Property accessor method threw an exception.  Using NaN."", e);"
False,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,118,.printStackTrace();
False,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,119, catch (NoSuchMethodException e) {
False,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,120,ogFactory.getLog(getClass()).error(
False,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,121,"Property accessor method does not exist.  Using NaN."", e);"
False,src/java/org/apache/commons/math/util/BeanTransformer.java,src/java/org/apache/commons/math/util/BeanTransformer.java,123,eturn d;
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,2," The Apache Software License, Version 1.1"
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,5, reserved.
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,7," Redistribution and use in source and binary forms, with or without"
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,8," modification, are permitted provided that the following conditions"
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,9, are met:
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,11, 1. Redistributions of source code must retain the above copyright
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,12,"    notice, this list of conditions and the following disclaimer."
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,14, 2. Redistributions in binary form must reproduce the above copyright
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,15,"    notice, this list of conditions and the following disclaimer in"
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,16,    the documentation and/or other materials provided with the
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,17,    distribution.
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,19," 3. The end-user documentation included with the redistribution, if"
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,20,"    any, must include the following acknowledgement:"
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,21,"       ""This product includes software developed by the"
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,22,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,23,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,24,    if and wherever such third-party acknowledgements normally appear.
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,26," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,27,"    Foundation"" must not be used to endorse or promote products derived"
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,28,    from this software without prior written permission. For written
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,29,"    permission, please contact apache@apache.org."
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,31," 5. Products derived from this software may not be called ""Apache"""
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,32,"    nor may ""Apache"" appear in their name without prior written"
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,33,    permission of the Apache Software Foundation.
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,38, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,39," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,46, SUCH DAMAGE.
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,49, This software consists of voluntary contributions made by many
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,50, individuals on behalf of the Apache Software Foundation.  For more
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,51," information on the Apache Software Foundation, please see"
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,52, <http://www.apache.org/>.
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,54,ackage org.apache.commons.math.util;
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,56,mport org.apache.commons.math.ConvergenceException;
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,57,mport org.apache.commons.math.MathException;
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,60, Provides a generic means to evaluate continued fractions.  Subclasses simply
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,61, provided the a and b coefficients to evaluate the continued fraction.
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,63, References:
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,64, <ul>
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,65," <li><a href=""http://mathworld.wolfram.com/ContinuedFraction.html"">"
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,66, Continued Fraction</a></li>
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,67, </ul>
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,68, @version $Revision: 1.6 $ $Date: 2003/10/16 15:24:30 $
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,70,ublic abstract class ContinuedFraction {
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,71,** Maximum allowed numerical error. */
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,72,rivate static final double DEFAULT_EPSILON = 10e-9;
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,75, Default constructor.
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,77,rotected ContinuedFraction() {
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,78,uper();
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,82, Access the n-th a coefficient of the continued fraction.  Since a can be
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,83," a function of the evaluation point, x, that is passed in as well."
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,84, @param n the coefficient index to retrieve.
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,85, @param x the evaluation point.
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,86, @return the n-th a coefficient.
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,88,"rotected abstract double getA(int n, double x);"
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,91, Access the n-th b coefficient of the continued fraction.  Since b can be
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,92," a function of the evaluation point, x, that is passed in as well."
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,93, @param n the coefficient index to retrieve.
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,94, @param x the evaluation point.
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,95, @return the n-th b coefficient.
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,97,"rotected abstract double getB(int n, double x);"
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,100, Evaluates the continued fraction at the value x.
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,101, @param x the evaluation point.
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,102, @return the value of the continued fraction evaluated at x.
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,103, @throws MathException if the algorithm fails to converge.
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,105,ublic double evaluate(double x) throws MathException {
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,106,"eturn evaluate(x, DEFAULT_EPSILON, Integer.MAX_VALUE);"
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,110, Evaluates the continued fraction at the value x.
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,111, @param x the evaluation point.
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,112, @param epsilon maximum error allowed.
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,113, @return the value of the continued fraction evaluated at x.
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,114, @throws MathException if the algorithm fails to converge.
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,116,"ublic double evaluate(double x, double epsilon) throws MathException {"
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,117,"eturn evaluate(x, epsilon, Integer.MAX_VALUE);"
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,121, Evaluates the continued fraction at the value x.
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,122, @param x the evaluation point.
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,123, @param maxIterations maximum number of convergents
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,124, @return the value of the continued fraction evaluated at x.
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,125, @throws MathException if the algorithm fails to converge.
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,127,"ublic double evaluate(double x, int maxIterations) throws MathException {"
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,128,"eturn evaluate(x, DEFAULT_EPSILON, maxIterations);"
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,132, Evaluates the continued fraction at the value x.
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,134, The implementation of this method is based on:
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,135, <ul>
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,136," <li>O. E-gecio-glu, C . K. Koc, J. Rifa i Coma,"
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,137," <a href=""http://citeseer.nj.nec.com/egecioglu91fast.html"">"
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,138," Fast Computation of Continued Fractions</a>, Computers Math. Applic.,"
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,139," 21(2--3), 1991, 167--169.</li>"
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,140, </ul>
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,142, @param x the evaluation point.
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,143, @param epsilon maximum error allowed.
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,144, @param maxIterations maximum number of convergents
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,145, @return the value of the continued fraction evaluated at x.
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,146, @throws MathException if the algorithm fails to converge.
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,148,"ublic double evaluate(double x, double epsilon, int maxIterations)"
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,149,hrows MathException
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,151,ouble[][] f = new double[2][2];
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,152,ouble[][] a = new double[2][2];
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,153,ouble[][] an = new double[2][2];
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,155,"[0][0] = getA(0, x);"
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,156,[0][1] = 1.0;
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,157,[1][0] = 1.0;
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,158,[1][1] = 0.0;
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,160,"eturn evaluate(1, x, a, an, f, epsilon, maxIterations);"
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,164," Evaluates the n-th convergent, fn = pn / qn, for this continued fraction"
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,165, at the value x.
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,166, @param n the convergent to compute.
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,167, @param x the evaluation point.
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,168, @param a (n-1)-th convergent matrix.  (Input)
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,169, @param an the n-th coefficient matrix. (Output)
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,170, @param f the n-th convergent matrix. (Output)
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,171, @param epsilon maximum error allowed.
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,172, @param maxIterations maximum number of convergents
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,173, @return the value of the the n-th convergent for this continued fraction
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,174,         evaluated at x.
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,175, @throws MathException if the algorithm fails to converge.
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,177,rivate double evaluate(
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,178,"nt n,"
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,179,"ouble x,"
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,180,"ouble[][] a,"
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,181,"ouble[][] an,"
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,182,"ouble[][] f,"
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,183,"ouble epsilon,"
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,184,nt maxIterations) throws MathException
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,186,ouble ret;
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,188,/ create next matrix
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,189,"n[0][0] = getA(n, x);"
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,190,n[0][1] = 1.0;
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,191,"n[1][0] = getB(n, x);"
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,192,n[1][1] = 0.0;
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,194,"/ multiply a and an, save as f"
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,195,[0][0] = (a[0][0] * an[0][0]) + (a[0][1] * an[1][0]);
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,196,[0][1] = (a[0][0] * an[0][1]) + (a[0][1] * an[1][1]);
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,197,[1][0] = (a[1][0] * an[0][0]) + (a[1][1] * an[1][0]);
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,198,[1][1] = (a[1][0] * an[0][1]) + (a[1][1] * an[1][1]);
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,200,/ determine if we're close enough
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,201,f (Math.abs((f[0][0] * f[1][1]) - (f[1][0] * f[0][1])) <
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,202,ath.abs(epsilon * f[1][0] * f[1][1]))
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,204,et = f[0][0] / f[1][0];
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,205, else {
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,206,f (n >= maxIterations) {
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,207,hrow new ConvergenceException(
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,208,"Continued fraction convergents failed to converge."");"
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,210,/ compute next
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,211,"et = evaluate(n + 1, x, f /* new a */"
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,212, an /* reuse an */
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,213, a /* new f */
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,214," epsilon, maxIterations);"
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,217,eturn ret;
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,2," The Apache Software License, Version 1.1"
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,5, reserved.
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,7," Redistribution and use in source and binary forms, with or without"
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,8," modification, are permitted provided that the following conditions"
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,9, are met:
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,11, 1. Redistributions of source code must retain the above copyright
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,12,"    notice, this list of conditions and the following disclaimer."
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,14, 2. Redistributions in binary form must reproduce the above copyright
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,15,"    notice, this list of conditions and the following disclaimer in"
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,16,    the documentation and/or other materials provided with the
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,17,    distribution.
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,19," 3. The end-user documentation included with the redistribution, if"
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,20,"    any, must include the following acknowledgement:"
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,21,"       ""This product includes software developed by the"
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,22,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,23,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,24,    if and wherever such third-party acknowledgements normally appear.
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,26," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,27,"    Foundation"" must not be used to endorse or promote products derived"
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,28,    from this software without prior written permission. For written
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,29,"    permission, please contact apache@apache.org."
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,31," 5. Products derived from this software may not be called ""Apache"""
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,32,"    nor may ""Apache"" appear in their name without prior written"
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,33,    permission of the Apache Software Foundation.
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,38, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,39," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,46, SUCH DAMAGE.
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,49, This software consists of voluntary contributions made by many
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,50, individuals on behalf of the Apache Software Foundation.  For more
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,51," information on the Apache Software Foundation, please see"
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,52, <http://www.apache.org/>.
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,54,ackage org.apache.commons.math.util;
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,56,mport java.io.Serializable;
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,59, <p>
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,60, A variable length double array implementation and extension of
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,61, ExpandableDoubleArray which automatically handles expanding and
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,62, contracting double arrays.
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,63, </p>
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,65, <p>
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,66, This class extends the functionality of ExpandableDoubleArray and
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,67, inherits the expansion parameters from that class.  If a developer
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,68, instantiates a ContractableDoubleArray and only adds values to
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,69," that instance, the behavior of this class is no different from"
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,70," the behavior of the super-class ExpandableDoubleArray.  If, on the"
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,71," other hand, elements are removed from the array, this implementation"
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,72, tests an additional parameter <code>contractionCriteria</code>.  The
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,73, <code>contractionCriteria</code> dictates when this implementation
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,74, will contract the size of the internal storage array to
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,75, the number of elements + 1.  This check is performed after every
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,76, operation that alters the number of elements in the array.
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,77, </p>
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,79, <p>
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,80, Note that the contractionCriteria must always be greater than the
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,81, expansionFactor.  If this were not the case (assume a
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,82, contractionCriteria of 1.5f and a expansionFactor of 2.0f) an
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,83, endless series of expansions and contractions would occur.  If the
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,84, length of this array is highly varied over time it is a good idea
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,85, to trade efficient memory usage for performance.  Each time an array
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,86, is expanded or contracted the meaningful portions of the internal
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,87, storage array are copied to a new array and the reference to the
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,88, internal storage array is swapped.
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,89, </p>
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,91, @version $Revision: 1.7 $ $Date: 2003/10/16 15:24:30 $
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,93,ublic class ContractableDoubleArray
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,94,xtends ExpandableDoubleArray
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,95,mplements Serializable {
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,97,** The contraction criteria defines the conditions under which this
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,98," object will ""resize"" the internal array to the number of elements"
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,99, contained in the element array + 1
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,101,rivate float contractionCriteria = 2.5f;
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,104, Create an expandable double array with the default initial capacity of
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,105," 16, an expansion factor of 2.00, and a contractionCriteria of 2.5"
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,107,ublic ContractableDoubleArray() {
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,108,uper();
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,112," Create an expandable double array with the specified initial capacity,"
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,113," the defult expansion factor of 2.00, and a contractionCriteria of 2.5"
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,115, @param initialCapacity The initial size of the internal storage array
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,117,ublic ContractableDoubleArray(int initialCapacity) {
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,118,uper(initialCapacity);
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,122, Create an expandable double array with the specificed initial capacity
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,123," and expand factor, with a contractionCriteria of 2.5"
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,125, @param initialCapacity The initial size of the internal storage array
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,126, @param expansionFactor the array will be expanded based on this
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,127,                        parameter
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,129,ublic ContractableDoubleArray(
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,130,"nt initialCapacity,"
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,131,loat expansionFactor) {
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,132,his.expansionFactor = expansionFactor;
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,133,etInitialCapacity(initialCapacity);
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,134,nternalArray = new double[initialCapacity];
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,135,"heckContractExpand(getContractionCriteria(), expansionFactor);"
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,139, Create an expandable double array with the
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,140," specificed initial capacity, expand factor, and contractionCriteria"
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,142, @param initialCapacity The initial size of the internal storage array
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,143, @param expansionFactor the array will be expanded based on this
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,144,                        parameter
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,145, @param contractionCriteria The contraction Criteria.
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,147,ublic ContractableDoubleArray(
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,148,"nt initialCapacity,"
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,149,"loat expansionFactor,"
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,150,loat contractionCriteria) {
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,151,his.contractionCriteria = contractionCriteria;
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,152,his.expansionFactor = expansionFactor;
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,153,etInitialCapacity(initialCapacity);
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,154,nternalArray = new double[initialCapacity];
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,155,"heckContractExpand(contractionCriteria, expansionFactor);"
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,159, Contracts the storage array to the (size of the element set) + 1 - to
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,160, avoid a zero length array. This function also resets the startIndex to
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,161, zero.
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,163,ublic synchronized void contract() {
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,164,ouble[] tempArray = new double[numElements + 1];
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,166,/ Copy and swap - copy only the element array from the src array.
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,167,"ystem.arraycopy(internalArray, startIndex, tempArray, 0, numElements);"
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,168,nternalArray = tempArray;
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,170,/ Reset the start index to zero
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,171,tartIndex = 0;
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,175, Adds an element to the end of this expandable array
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,177, @param value to be added to end of array
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,179,ublic synchronized void addElement(double value) {
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,180,uper.addElement(value);
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,181,f (shouldContract()) {
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,182,ontract();
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,187, <p>
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,188, Adds an element to the end of this expandable array and
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,189, discards a value from the front of the array.  This method
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,190, has the effect of adding a value to the end of the list
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,191, and discarded an element from the front of the list.
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,192, </p>
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,194, <p>
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,195," When an array rolls it actually ""scrolls"" the element array in"
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,196, the internal storage array.  An element is added to the end of the
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,197," array, and the first element of the array is discard by incrementing"
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,198, the starting index of the element array within the internal
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,199, storage array.  Over time this will create an orphaned prefix
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,200, to the element array within the internal storage array.  If this
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,201," function is called frequently, this orphaned prefix list will"
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,202, gradually push the internal storage vs. element storage to
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,203, the contractionCriteria.
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,204, </p>
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,205, @param value to be added to end of array
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,206, @return value added
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,208,ublic synchronized double addElementRolling(double value) {
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,209,ouble discarded = super.addElementRolling(value);
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,210,/ Check the contraction criteria
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,211,f (shouldContract()) {
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,212,ontract();
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,214,eturn discarded;
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,218, Should contract returns true if the ratio of (internal storage length)
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,219, to (number of elements) is larger than the contractionCriteria value.
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,220," In other words, using the default value of 2.5, if the internal storage"
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,221," array provides more than 2.5x the space needed to store numElements,"
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,222, then this function returns true
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,224, @return true if array satisfies the contraction criteria
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,226,rivate synchronized boolean shouldContract() {
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,227,oolean shouldContract = false;
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,228,f ((internalArray.length / numElements) > contractionCriteria) {
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,229,houldContract = true;
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,231,eturn shouldContract;
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,235," @see org.apache.commons.math.util.DoubleArray#setElement(int, double)"
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,237,"ublic synchronized void setElement(int index, double value) {"
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,238,"uper.setElement(index, value);"
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,239,f (shouldContract()) {
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,240,ontract();
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,245, Method invokes the super class' setExpansionFactor but first it
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,246, must validate the combination of expansionFactor and
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,247, contractionCriteria.
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,249, @see org.apache.commons.math.util.ExpandableDoubleArray#setExpansionFactor(float)
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,251,ublic void setExpansionFactor(float expansionFactor) {
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,252,"heckContractExpand(getContractionCriteria(), expansionFactor);"
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,253,uper.setExpansionFactor(expansionFactor);
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,257, The contraction criteria defines when the internal array will contract
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,258, to store only the number of elements in the element array.  This
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,259, contractionCriteria gaurantees that the internal storage array will
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,260, never exceed this factor more than the space needed to store
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,261, numElements.
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,263, @return the contraction criteria used to reclaim memory when array is
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,264,         empty
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,266,ublic float getContractionCriteria() {
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,267,eturn contractionCriteria;
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,271, Sets the contraction criteria for this ExpandContractDoubleArray.
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,273, @param contractionCriteria contraction criteria
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,275,ublic void setContractionCriteria(float contractionCriteria) {
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,276,"heckContractExpand(contractionCriteria, getExpansionFactor());"
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,278,his.contractionCriteria = contractionCriteria;
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,282, Checks the expansion factor and the contraction criteria and throws an
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,283, IllegalArgumentException if the contractionCriteria is less than the
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,284, expansionCriteria
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,286, @param expansionFactor factor to be checked
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,287, @param contractionCritera critera to be checked
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,289,rotected void checkContractExpand(
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,290,"loat contractionCritera,"
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,291,loat expansionFactor) {
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,293,f (contractionCritera < expansionFactor) {
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,294,tring msg =
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,295,"Contraction criteria can never be smaller than "" +"
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,296,"the expansion factor.  This would lead to a never "" +"
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,297,"ending loop of expansion and contraction as a newly "" +"
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,298,"expanded internal storage array would immediately "" +"
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,299,"satisfy the criteria for contraction"";"
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,300,hrow new IllegalArgumentException(msg);
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,303,f (contractionCriteria <= 1.0) {
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,304,tring msg =
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,305,"The contraction criteria must be a number larger "" +"
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,306,"than one.  If the contractionCriteria is less than or "" +"
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,307,"equal to one an endless loop of contraction and "" +"
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,308,"expansion would ensue as an internalArray.length "" +"
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,309,"== numElements would satisfy the contraction criteria"";"
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,310,hrow new IllegalArgumentException(msg);
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,313,f (expansionFactor < 1.0) {
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,314,tring msg =
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,315,"The expansion factor must be a number greater than 1.0"";"
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,316,hrow new IllegalArgumentException(msg);
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,321, @see org.apache.commons.math.util.ExpandableDoubleArray#discardFrontElements(int)
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,323,ublic synchronized void discardFrontElements(int i) {
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,324,uper.discardFrontElements(i);
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,325,f (shouldContract()) {
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,326,ontract();
False,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,2," The Apache Software License, Version 1.1"
False,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
False,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,5, reserved.
False,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,7," Redistribution and use in source and binary forms, with or without"
False,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,8," modification, are permitted provided that the following conditions"
False,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,9, are met:
False,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,11, 1. Redistributions of source code must retain the above copyright
False,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,12,"    notice, this list of conditions and the following disclaimer."
False,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,14, 2. Redistributions in binary form must reproduce the above copyright
False,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,15,"    notice, this list of conditions and the following disclaimer in"
False,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,16,    the documentation and/or other materials provided with the
False,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,17,    distribution.
False,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,19," 3. The end-user documentation included with the redistribution, if"
False,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,20,"    any, must include the following acknowledgement:"
False,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,21,"       ""This product includes software developed by the"
False,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,22,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,23,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,24,    if and wherever such third-party acknowledgements normally appear.
False,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,26," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,27,"    Foundation"" must not be used to endorse or promote products derived"
False,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,28,    from this software without prior written permission. For written
False,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,29,"    permission, please contact apache@apache.org."
False,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,31," 5. Products derived from this software may not be called ""Apache"""
False,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,32,"    nor may ""Apache"" appear in their name without prior written"
False,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,33,    permission of the Apache Software Foundation.
False,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,38, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,39," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,46, SUCH DAMAGE.
False,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,49, This software consists of voluntary contributions made by many
False,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,50, individuals on behalf of the Apache Software Foundation.  For more
False,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,51," information on the Apache Software Foundation, please see"
False,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,52, <http://www.apache.org/>.
False,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,55,ackage org.apache.commons.math.util;
False,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,57,mport org.apache.commons.beanutils.ConversionException;
False,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,58,mport org.apache.commons.beanutils.converters.DoubleConverter;
False,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,61, A Default NumberTransformer for java.lang.Numbers and Numeric Strings.
False,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,62, @version $Revision: 1.6 $ $Date: 2003/10/16 15:24:30 $
False,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,64,ublic class DefaultTransformer implements NumberTransformer {
False,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,65,** Converter used to transform objects. */
False,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,66,rivate static final DoubleConverter converter =
False,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,67,ew DoubleConverter(new Double(Double.NaN));
False,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,70, @see org.apache.commons.collections.Transformer#transform(java.lang.Object)
False,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,72,ublic double transform(Object o) {
False,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,73,ouble d;
False,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,74,ry {
False,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,75," = ((Double)converter.convert(Double.class, o)).doubleValue();"
False,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,76, catch(ConversionException ex){
False,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,77, = Double.NaN;
False,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,79,eturn d;
False,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,2," The Apache Software License, Version 1.1"
False,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
False,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,5, reserved.
False,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,7," Redistribution and use in source and binary forms, with or without"
False,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,8," modification, are permitted provided that the following conditions"
False,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,9, are met:
False,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,11, 1. Redistributions of source code must retain the above copyright
False,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,12,"    notice, this list of conditions and the following disclaimer."
False,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,14, 2. Redistributions in binary form must reproduce the above copyright
False,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,15,"    notice, this list of conditions and the following disclaimer in"
False,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,16,    the documentation and/or other materials provided with the
False,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,17,    distribution.
False,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,19," 3. The end-user documentation included with the redistribution, if"
False,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,20,"    any, must include the following acknowledgement:"
False,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,21,"       ""This product includes software developed by the"
False,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,22,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,23,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,24,    if and wherever such third-party acknowledgements normally appear.
False,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,26," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,27,"    Foundation"" must not be used to endorse or promote products derived"
False,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,28,    from this software without prior written permission. For written
False,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,29,"    permission, please contact apache@apache.org."
False,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,31," 5. Products derived from this software may not be called ""Apache"""
False,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,32,"    nor may ""Apache"" appear in their name without prior written"
False,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,33,    permission of the Apache Software Foundation.
False,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,38, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,39," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,46, SUCH DAMAGE.
False,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,49, This software consists of voluntary contributions made by many
False,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,50, individuals on behalf of the Apache Software Foundation.  For more
False,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,51," information on the Apache Software Foundation, please see"
False,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,52, <http://www.apache.org/>.
False,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,54,ackage org.apache.commons.math.util;
False,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,58, Provides a single interface for dealing with various flavors
False,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,59, of double arrays.  This arrays framework follows the model of the
False,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,60, Collections API by allowing a user to select from a number of
False,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,61, array implementations with support for various storage mechanisms
False,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,62," such as automatic expansion, contraction, and array ""rolling""."
False,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,63, @version $Revision: 1.5 $ $Date: 2003/10/16 15:24:30 $
False,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,65,ublic interface DoubleArray {
False,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,68, Returns the number of elements currently in the array.  Please note
False,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,69, that this is different from the length of the internal storage array.
False,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,70, @return number of elements
False,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,72,nt getNumElements();
False,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,75, Returns the element at the specified index.  Note that if an
False,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,76, out of bounds index is supplied a ArrayIndexOutOfBoundsException
False,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,77, will be thrown.
False,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,79, @param index index to fetch a value from
False,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,80, @return value stored at the specified index
False,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,83,ouble getElement(int index);
False,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,86, Sets the element at the specified index.  This method will expand the
False,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,87, internal storage array to accomodate the insertion of a value at an
False,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,88, index beyond the current capacity.
False,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,89, @param index index to store a value in
False,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,90, @param value value to store at the specified index
False,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,92,"oid setElement(int index, double value);"
False,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,95, Adds an element to the end of this expandable array
False,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,97, @param value to be added to end of array
False,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,99,oid addElement(double value);
False,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,102, Adds an element and moves the window of elements up one.  This
False,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,103," has the effect of a FIFO.  when you ""roll"" the array an element is"
False,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,104, removed from the array.  The return value of this function is the
False,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,105, discarded double.
False,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,107, @param value the value to be added to the array
False,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,108," @return the value which has been discarded or ""pushed"" out of the array"
False,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,109,         by this rolling insert.
False,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,111,ouble addElementRolling(double value);
False,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,114, Returns a double[] of elements
False,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,116, @return all elements added to the array
False,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,118,ouble[] getElements();
False,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,121, Clear the double array
False,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,123,oid clear();
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,2," The Apache Software License, Version 1.1"
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,5, reserved.
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,7," Redistribution and use in source and binary forms, with or without"
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,8," modification, are permitted provided that the following conditions"
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,9, are met:
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,11, 1. Redistributions of source code must retain the above copyright
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,12,"    notice, this list of conditions and the following disclaimer."
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,14, 2. Redistributions in binary form must reproduce the above copyright
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,15,"    notice, this list of conditions and the following disclaimer in"
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,16,    the documentation and/or other materials provided with the
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,17,    distribution.
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,19," 3. The end-user documentation included with the redistribution, if"
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,20,"    any, must include the following acknowledgement:"
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,21,"       ""This product includes software developed by the"
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,22,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,23,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,24,    if and wherever such third-party acknowledgements normally appear.
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,26," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,27,"    Foundation"" must not be used to endorse or promote products derived"
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,28,    from this software without prior written permission. For written
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,29,"    permission, please contact apache@apache.org."
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,31," 5. Products derived from this software may not be called ""Apache"""
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,32,"    nor may ""Apache"" appear in their name without prior written"
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,33,    permission of the Apache Software Foundation.
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,38, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,39," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,46, SUCH DAMAGE.
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,49, This software consists of voluntary contributions made by many
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,50, individuals on behalf of the Apache Software Foundation.  For more
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,51," information on the Apache Software Foundation, please see"
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,52, <http://www.apache.org/>.
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,54,ackage org.apache.commons.math.util;
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,56,mport java.io.Serializable;
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,59, <p>
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,60, A DoubleArray implementation which automatically expands
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,61, an internal double array to handle an array of arbitrary length.  This
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,62, implementation of DoubleArray is provided to support scenarios in
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,63," which the ultimate length of an array is unknown, and the"
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,64, developer can control the expansion process through the
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,65, <code>initialCapacity</code> and <code>expansionFactor</code>
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,66, parameters.
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,67, </p>
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,69, <p>
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,70, This implementation also allows a developer to:
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,71, <ul>
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,72,  <li>Resize an array via <code>setNumElements(int)</code></li>
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,73,  <li>Discard elements from the front of an array via
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,74,      <code>discardFrontElements(int)</code></li>
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,75,  <li>Find the minimum and maximum values stored in this array</li>
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,76, </ul>
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,77, </p>
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,79, <p>
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,80, The initialCapacity parameter sets the capacity of the initial
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,81," storage array, and the expansionFactor is the factor by which"
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,82, the current storage capacity is multiplied each time the internal
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,83, array needs to be expanded.  <b>Please note</b> that the length of the
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,84, internal storage array has nothing to do with the number of elements
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,85, currently stored in this array.  If one creates an instance of this
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,86," class with an initialCapacity of ""2"" and an expansion factor of ""2"", and"
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,87," then adds 3546 elements to the array, this implementation will need to"
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,88," expand the array 10 times - first from 2 -> 4. then 4 -> 8, 8 -> 16,"
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,89, and so on until we reach 4096 which is sufficient to hold 3546 elements.
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,90, </p>
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,91, @version $Revision: 1.8 $ $Date: 2003/10/16 15:24:30 $
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,93,"ublic class ExpandableDoubleArray implements Serializable, DoubleArray {"
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,95,"/ TODO: expansionFactor is valuable, by if I only need storage"
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,96,"/ for 1025 items and I use the default settings, I'll end up"
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,97,/ with enough storage for 2048 elements.  Maybe this implementation
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,98,"/ should have flags for incremental growth - (i.e. when expanding, only"
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,99,"/ increase storage by a constant size - 100, 200 ) ?"
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,102, This is the internal storage array.
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,104,rotected double[] internalArray;
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,107, Number of elements in the array
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,109,rotected int numElements = 0;
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,112, Keeps track of a starting index
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,114,rotected int startIndex = 0;
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,116,**The initial capacity of the array.
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,117, Initial capacity is not exposed as a property as it is only meaningful
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,118, when passed to a constructor.
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,120,rotected int initialCapacity = 16;
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,122,"** The expand factor of the array.  When the array need to be expanded,"
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,123, the new array size will be internalArray.length * expandFactor
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,125,rotected float expansionFactor = 2.0f;
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,128, Create an expandable double array with the
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,129, default initial capactiy of 16 and an expansion factor of 2.00
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,131,ublic ExpandableDoubleArray() {
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,132,nternalArray = new double[initialCapacity];
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,136, Create an expandable double array with the
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,137, specified initial capacity and the defult expansion factor of 2.00
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,139, @param initialCapacity The initial size of the internal storage array
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,141,ublic ExpandableDoubleArray(int initialCapacity) {
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,142,etInitialCapacity(initialCapacity);
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,143,nternalArray = new double[this.initialCapacity];
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,147, Create an expandable double array with the
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,148, specificed initial capacity and expand factor.
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,150, @param initialCapacity The initial size of the internal storage array
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,151, @param expansionFactor the array will be expanded based on this
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,152,                        parameter
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,154,"ublic ExpandableDoubleArray(int initialCapacity, float expansionFactor) {"
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,155,etInitialCapacity(initialCapacity);
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,156,etExpansionFactor(expansionFactor);
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,157,his.initialCapacity = initialCapacity;
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,158,nternalArray = new double[initialCapacity];
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,162, The expansion factor controls the size of a new aray when an array
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,163," needs to be expanded. When a value is inserted into a full array, the"
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,164, new array size is calculated as the current array size times this
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,165, expansion factor.  The default expansion factor is 2.0
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,167, @return the expansion factor of this expandable double array
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,169,ublic float getExpansionFactor() {
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,170,eturn expansionFactor;
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,174, Sets the expansion factor for this expandable double array.
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,175, The expansion factor will affect the next expansion of this array.
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,177, @param expansionFactor the expansion factor of this array
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,179,ublic void setExpansionFactor(float expansionFactor) {
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,181,"/ The expansion factor *must* be larger than 1.0, otherwise we'll"
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,182,/ have an inconsistency upon expansion we'll start shrinking which
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,183,/ will lead to ArrayIndexOutOfBound exceptions.
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,184,f (expansionFactor > 1.0) {
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,185,his.expansionFactor = expansionFactor;
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,186, else {
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,187,tring msg =
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,188,"The expansion factor must be a number greater "" + ""than 1.0"";"
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,189,hrow new IllegalArgumentException(msg);
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,194, Sets the initial capacity
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,195, @param initialCapacity of the array
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,197,ublic void setInitialCapacity(int initialCapacity) {
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,198,f (initialCapacity > 0) {
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,199,his.initialCapacity = initialCapacity;
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,200, else {
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,201,tring msg =
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,202,"The initial capacity supplied: "" + initialCapacity +"
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,203,"must be a positive integer"";"
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,204,hrow new IllegalArgumentException(msg);
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,209, Returns the internal storage array
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,211, @return the internal storage array used by this object
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,213,ublic double[] getValues() {
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,214,eturn (internalArray);
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,218, Returns the starting index of the internal array.
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,219, @return starting index
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,221,ublic int start() {
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,222,eturn startIndex;
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,226, Returns the number of elements currently in the array.  Please note
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,227, that this is different from the length of the internal storage array.
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,228, @return number of elements
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,230,ublic int getNumElements() {
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,231,eturn (numElements);
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,235, This function allows you to control the number of elements contained
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,236," in this array, and can be used to ""throw"" out the last n values in an"
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,237, array.  This feature is mainly targetted at the subclasses of this
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,238, array class.  Note that this function will also expand the internal
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,239, array as needed.
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,241, @param i a new number of elements
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,243,ublic synchronized void setNumElements(int i) {
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,245,/ If index is negative thrown an error
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,246,f (i < 0) {
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,247,tring msg =
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,248,"Number of elements must be zero or a positive "" + ""integer"";"
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,249,hrow new IllegalArgumentException(msg);
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,252,"/ Test the new num elements, check to see if the array needs to be"
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,253,/ expanded to accomodate this new number of elements
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,254,f ((startIndex + i) > internalArray.length) {
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,255,xpandTo(startIndex + i);
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,258,/ Set the new number of elements to new value
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,259,umElements = i;
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,263, Returns the element at the specified index
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,265, @param index index to fetch a value from
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,266, @return value stored at the specified index
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,268,ublic double getElement(int index) {
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,269,ouble value = Double.NaN;
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,270,f (index >= numElements) {
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,271,tring msg =
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,272,"The index specified: "" + index +"
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,273," is larger than the current number of elements"";"
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,274,hrow new ArrayIndexOutOfBoundsException(msg);
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,275, else if (index >= 0) {
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,276,alue = internalArray[startIndex + index];
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,277, else {
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,278,tring msg =
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,279,"Elements cannot be retrieved from a negative array index"";"
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,280,hrow new ArrayIndexOutOfBoundsException(msg);
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,282,eturn value;
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,286, Sets the element at the specified index.  This method will expand the
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,287, internal storage array to accomodate the insertion of a value at an
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,288, index beyond the current capacity.
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,290, @param index index to store a value in
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,291, @param value value to store at the specified index
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,293,"ublic synchronized void setElement(int index, double value) {"
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,295,f (index < 0) {
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,296,"tring msg = ""Cannot set an element at a negative index"";"
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,297,hrow new ArrayIndexOutOfBoundsException(msg);
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,300,f ((startIndex + index) >= internalArray.length) {
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,301,xpandTo(startIndex + (index + 1));
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,302,umElements = index + 1;
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,304,nternalArray[startIndex + index] = value;
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,308, Expands the internal storage array to the specified size.
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,310, @param size Size of the new internal storage array
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,312,rivate synchronized void expandTo(int size) {
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,313,ouble[] tempArray = new double[size];
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,314,/ Copy and swap
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,315,"ystem.arraycopy(internalArray, 0, tempArray, 0, internalArray.length);"
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,316,nternalArray = tempArray;
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,320, Expands the internal storage array using the expansion factor
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,322,rotected synchronized void expand() {
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,324,"/ notice the use of Math.ceil(), this gaurantees that we will always"
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,325,/ have an array of at least currentSize + 1.   Assume that the
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,326,/ current initial capacity is 1 and the expansion factor
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,327,/ is 1.000000000000000001.  The newly calculated size will be
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,328,/ rounded up to 2 after the multiplication is performed.
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,329,nt newSize = (int) Math.ceil(internalArray.length * expansionFactor);
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,330,ouble[] tempArray = new double[newSize];
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,332,/ Copy and swap
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,333,"ystem.arraycopy(internalArray, 0, tempArray, 0, internalArray.length);"
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,334,nternalArray = tempArray;
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,338, Adds an element to the end of this expandable array
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,340, @param value value to be added to end of array
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,342,ublic synchronized void addElement(double value) {
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,343,umElements++;
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,344,f ((startIndex + numElements) > internalArray.length) {
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,345,xpand();
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,347,nternalArray[startIndex + (numElements - 1)] = value;
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,351, Adds an element and moves the window of elements up one.  This
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,352," has the effect of a FIFO.  when you ""roll"" the array an element is"
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,353, removed from the array.  The return value of this function is the
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,354, discarded double.
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,355, @param value the value to add
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,356," @return the value which has been discarded or ""pushed"" out of the array"
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,357, by this rolling insert.
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,359,ublic synchronized double addElementRolling(double value) {
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,360,ouble discarded = internalArray[startIndex];
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,362,f ((startIndex + (numElements + 1)) > internalArray.length) {
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,363,xpand();
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,365,/ Increment the start index
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,366,tartIndex += 1;
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,368,/ Add the new value
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,369,nternalArray[startIndex + (numElements - 1)] = value;
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,371,eturn discarded;
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,375, Notice the package scope on this method.   This method is simply here
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,376," for the JUnit test, it allows us check if the expansion is working"
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,377, properly after a number of expansions.  This is not meant to be a part
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,378, of the public interface of this class.
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,380, @return the length of the internal storage array.
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,382,nt getInternalLength() {
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,383,eturn (internalArray.length);
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,387," Clear the array, reset the size to the initialCapacity and the number"
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,388, of elements to zero.
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,390,ublic synchronized void clear() {
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,391,umElements = 0;
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,392,nternalArray = new double[initialCapacity];
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,396, Discards values from the front of the list.  This function removes n
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,397, elements from the front of the array.
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,399, @param i number of elements to discard from the front of the array.
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,401,ublic synchronized void discardFrontElements(int i) {
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,403,f (i > numElements) {
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,404,"tring msg = ""Cannot discard more elements than are"" +"
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,405,"contained in this array."";"
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,406,hrow new IllegalArgumentException(msg);
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,407, else if (i < 0) {
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,408,"tring msg = ""Cannot discard a negative number of elements."";"
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,409,hrow new IllegalArgumentException(msg);
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,410, else {
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,411,"/ ""Subtract"" this number of discarded from numElements"
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,412,umElements -= i;
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,413,tartIndex += i;
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,418, @see org.apache.commons.math.util.DoubleArray#getElements()
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,420,ublic double[] getElements() {
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,421,ouble[] elementArray = new double[numElements];
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,422,ystem.arraycopy(
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,423,"nternalArray,"
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,424,"tartIndex,"
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,425,"lementArray,"
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,426,","
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,427,umElements);
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,428,eturn elementArray;
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,2," The Apache Software License, Version 1.1"
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,5, reserved.
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,7," Redistribution and use in source and binary forms, with or without"
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,8," modification, are permitted provided that the following conditions"
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,9, are met:
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,11, 1. Redistributions of source code must retain the above copyright
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,12,"    notice, this list of conditions and the following disclaimer."
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,14, 2. Redistributions in binary form must reproduce the above copyright
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,15,"    notice, this list of conditions and the following disclaimer in"
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,16,    the documentation and/or other materials provided with the
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,17,    distribution.
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,19," 3. The end-user documentation included with the redistribution, if"
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,20,"    any, must include the following acknowledgement:"
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,21,"       ""This product includes software developed by the"
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,22,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,23,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,24,    if and wherever such third-party acknowledgements normally appear.
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,26," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,27,"    Foundation"" must not be used to endorse or promote products derived"
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,28,    from this software without prior written permission. For written
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,29,"    permission, please contact apache@apache.org."
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,31," 5. Products derived from this software may not be called ""Apache"""
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,32,"    nor may ""Apache"" appear in their name without prior written"
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,33,    permission of the Apache Software Foundation.
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,38, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,39," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,46, SUCH DAMAGE.
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,49, This software consists of voluntary contributions made by many
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,50, individuals on behalf of the Apache Software Foundation.  For more
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,51," information on the Apache Software Foundation, please see"
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,52, <http://www.apache.org/>.
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,54,ackage org.apache.commons.math.util;
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,57, <p>
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,58, Provides an implementation of the DoubleArray with a maximum number of
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,59, elements.  Creating an array implementation with an upper limit on the
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,60," number of elements allows us to support a more efficient ""rolling"""
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,61, mechanism to support addElementRoling(double). Please note that this
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,62, implementation will not preserve the order of the values supplied to
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,63," this array, calling getValues() will return an array of indeterminate"
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,64, order.
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,65, </p>
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,67, <p>
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,68, Values are added to this array by calling addElement(double) or
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,69, addElementRolling(double).  If addElement(double) is called on
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,70," an array that already contains the maximum number of elements, an"
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,71, ArrayIndexOutOfBoundsException will be thrown to reflect an attempt to
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,72, add a value beyond the boundaries of the fixed length array - in this
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,73," respect a FixedDoubleArray can be considered ""full"".  Calling"
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,74, addElementRolling(double) on an array which contains the maximum
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,75," number of elements will cause the array to overwrite the ""oldest"""
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,76, value in the array.
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,77, </p>
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,79, <p>
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,80, This class is called FixedDoubleArray not because it is of a fixed size.
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,81, The name is appropriate because the internal storage array remains
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,82," ""fixed"" in memory, this implementation will never allocate, or copy"
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,83, the internal storage array to a new array instance.
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,84, </p>
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,85, @version $Revision: 1.9 $ $Date: 2003/10/16 15:24:30 $
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,87,ublic class FixedDoubleArray implements DoubleArray {
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,90, This is the internal storage array.  This array is assigned
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,91, a known fixed size in the constructor
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,93,rivate double[] internalArray;
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,96, Size determined the number of elements in the array at
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,97, any given time. When an array is created is maxElements
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,98," of 100, it is of size 0, and size increases as values are"
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,99, added.
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,101,rivate int size = 0;
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,104, This index points to the location of the next update.  Next
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,105," add, cycles from 0 to (maxElement-1)"
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,107,rivate int nextAdd = 0;
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,110, The maximum number of elements in the FixedDoubleArray
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,112,rivate int maxElements = 0;
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,115, Create a fixed array for double primitives which can hold up to
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,116, <code>maxElements</codec> doubles.  This implementation of
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,117," DoubleArray was created to provide a more ""performance-oriented"""
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,118, in-place rolling mechanism for calculations which need to
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,119, operate on a rolling window of values.
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,121, @param maxElements the maximum number of elements this
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,122,        FixeddoubleArray may contain.
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,124,ublic FixedDoubleArray(int maxElements) {
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,125,his.maxElements = maxElements;
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,126,nternalArray = new double[maxElements];
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,130, Create a fixed array backed by the provided double[] implementation.
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,131, the array should have all the elements occupied. the size and maxElements
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,132, are drawn from the array's length.
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,134, This implementation of DoubleArray was created to provide a more
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,135," ""performance-oriented"" in-place rolling mechanism for calculations"
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,136, which need to operate on a rolling window of values.
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,137, @param array the backing array
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,139,ublic FixedDoubleArray(double[] array) {
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,140,his.maxElements = array.length;
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,141,his.size = array.length;
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,142,nternalArray = array;
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,146, Retrieves the current size of the array.
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,147, @see org.apache.commons.math.util.DoubleArray#getNumElements()
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,149,ublic int getNumElements() {
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,150,eturn size;
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,154, Returns the element value at the specified index.  Please note that
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,155, the size of the element array is not directly related to the
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,156, maximum number of elements which this array can contain.  One can
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,157, create an instance of FixedDoubleArray with a maximum of
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,158," ten elements, add three items, and get any items from index 0 to index"
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,159, 2 - trying to retrieve an element outside of the current element
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,160, array will throw an ArrayIndexOutOfBoundsException.
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,162, @see org.apache.commons.math.util.DoubleArray#getElement(int)
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,164,ublic double getElement(int index) {
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,165,f (index > (size - 1)) {
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,166,tring msg =
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,167,"Attempted to retrieve an element outside of "" +"
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,168,"the element array"";"
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,169,hrow new ArrayIndexOutOfBoundsException(msg);
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,170, else {
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,171,"/ Return the element requested, if the index supplied"
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,172,/ is negative this statement may also throw an
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,173,/ ArrayIndexOutOfBoundException.
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,174,eturn internalArray[index];
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,179, <p>
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,180, Sets the element at the specified index to the value supplied.
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,181, </p>
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,183, <p>Implementation Notes:
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,184, <ul>
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,185,  This implementation will not expand the array to the specified
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,186,  size.  Unlike the expandable double array implementation calling
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,187,"  setElement(10, 3.0) on an array with 5 elements will throw an"
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,188,  ArrayIndexOutOfBoundsException.
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,189, </ul>
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,190, <ul>
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,191,  The number of elements in an array corresponds to the number
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,192,  of elements that have been added to this FixedDoubleArray.  This
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,193,  is not the same as the maximum number of elements which can be
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,194,  contained in this array.  A FixedDoubleArray instance can be
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,195,"  created with a maximum upper limit of 10 elements, until 10"
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,196,"  elements have been added to this array, the size of the array"
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,197,  reflects the number of elements added.
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,198, </ul>
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,199, </p>
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,201," @see org.apache.commons.math.util.DoubleArray#setElement(int, double)"
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,203,"ublic void setElement(int index, double value) {"
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,204,f (index > (size - 1)) {
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,205,tring msg =
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,206,"Attempted to set an element outside of"" + ""the element array"";"
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,207,hrow new ArrayIndexOutOfBoundsException(msg);
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,208, else {
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,209,nternalArray[index] = value;
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,214," Add an element to the current array, testing to see if"
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,215, this array has already met or exceeded the maximum number
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,216, of elements
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,218, @see org.apache.commons.math.util.DoubleArray#addElement(double)
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,220,ublic void addElement(double value) {
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,221,f (size < internalArray.length) {
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,222,ize++;
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,224,nternalArray[nextAdd] = value;
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,226,/ Incremenet nextAdd and then modulo it against maxElements
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,227,"/ this has the effect of repeatedly ""cycling"" nextAdd"
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,228,/ between 0 and (maxElements-1) endlessly.
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,229,extAdd++;
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,230,extAdd = nextAdd % (maxElements);
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,232, else {
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,233,"/ If the array has ALREADY reached the maximum size allowable,"
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,234,/ we throw an ArrayIndexOutOfBoundsException - the end-user
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,235,/ is trying to add an element beyond the boundaries of the
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,236,/ fixed array.
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,237,tring msg =
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,238,"Attempted to add a value to an array of fixed "" +"
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,239,"size, please use addElementRolling "" +"
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,240,"to avoid this exception"";"
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,241,hrow new ArrayIndexOutOfBoundsException(msg);
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,246, <p>
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,247," Adds an element by ""rolling"" the new value into the current array"
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,248, while discarding the element which was added <code>maxElement</code>
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,249, add operations ago.  The value replaced is returned from this
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,250," method.  Until an array contains the maximum number of element, this"
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,251, method has the same result as the addElement(double) operation.  Once
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,252, the maximum number of elements has been reached this implementation
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,253, inserts the new values starting at index 0 of the internal storage
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,254," array.  This allows for efficient rolling, but prevents us from"
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,255, preserving the order of the added values.
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,256, </p>
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,258, <p>
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,259, <b>Note:</b> This function will return <code>Double.NaN</code> if
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,260, no value has been discarded in this roll.  This can happen when
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,261, the array has not met the size limitation introduced in the
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,262, constructor.
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,263, </p>
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,264, @param value the value to be added to the array
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,265," @return Returns the value which a has been ""removed"" from the"
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,266,         database.  <b>Important:</b> If the element array has
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,267,"         not reached the maximum size, then it is possible that"
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,268,         no element will be discarded from a given roll.  In this
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,269,         case this method will return a <code>Double.NaN</code> value.
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,271, @see org.apache.commons.math.util.DoubleArray#addElementRolling(double)
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,273,ublic double addElementRolling(double value) {
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,275,/ Create the discarded primitive.  If no element is
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,276,"/ discarded by this roll, this method will return a"
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,277,/ Double.NaN value.
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,278,ouble discarded = Double.NaN;
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,280,f (size < internalArray.length) {
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,281,ize++;
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,282, else {
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,283,/ If we've reached the length of the internal
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,284,"/ storage array, we have to start ""discarding"""
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,285,/ values from the original array.
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,287,/ Obtain the value discarded by this overwrite
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,288,iscarded = internalArray[nextAdd];
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,291,nternalArray[nextAdd] = value;
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,293,/ nextAdd cycles between 0 and (maxElements-1).
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,294,extAdd++;
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,295,extAdd = nextAdd % maxElements;
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,297,"/ but we return the value which was ""replaced"""
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,298,eturn (discarded);
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,302, Provides an array of double[] which contain the
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,303, number of elements added to this array.  This
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,304, method will return an array from zero to maxElements in length.
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,306, @return The array of elements added to this DoubleArray
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,307,         implementation.
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,308, @see org.apache.commons.math.util.DoubleArray#getElements()
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,310,ublic double[] getElements() {
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,311,ouble[] copy = new double[size];
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,312,"ystem.arraycopy(internalArray, 0, copy, 0, size);"
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,313,eturn copy;
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,317, Returns the internal storage array
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,319, @return the internal storage array used by this object
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,321,ublic double[] getValues() {
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,322,eturn (internalArray);
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,326, The starting index in the InternalArray.
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,327, @return starting index.
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,329,ublic int start() {
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,330,eturn 0;
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,334, Clear the array - drop all the data and start with a blank
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,335, internal array.  This implementation takes care of
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,336," setting the size of the array back to zero, and reinitializing"
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,337, the internal storage array.
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,339, @see org.apache.commons.math.util.DoubleArray#clear()
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,341,ublic void clear() {
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,342,ize = 0;
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,343,extAdd = 0;
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,344,nternalArray = new double[maxElements];
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,2," The Apache Software License, Version 1.1"
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,5, reserved.
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,7," Redistribution and use in source and binary forms, with or without"
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,8," modification, are permitted provided that the following conditions"
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,9, are met:
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,11, 1. Redistributions of source code must retain the above copyright
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,12,"    notice, this list of conditions and the following disclaimer."
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,14, 2. Redistributions in binary form must reproduce the above copyright
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,15,"    notice, this list of conditions and the following disclaimer in"
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,16,    the documentation and/or other materials provided with the
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,17,    distribution.
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,19," 3. The end-user documentation included with the redistribution, if"
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,20,"    any, must include the following acknowledgement:"
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,21,"       ""This product includes software developed by the"
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,22,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,23,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,24,    if and wherever such third-party acknowledgements normally appear.
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,26," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,27,"    Foundation"" must not be used to endorse or promote products derived"
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,28,    from this software without prior written permission. For written
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,29,"    permission, please contact apache@apache.org."
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,31," 5. Products derived from this software may not be called ""Apache"""
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,32,"    nor may ""Apache"" appear in their name without prior written"
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,33,    permission of the Apache Software Foundation.
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,38, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,39," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,46, SUCH DAMAGE.
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,49, This software consists of voluntary contributions made by many
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,50, individuals on behalf of the Apache Software Foundation.  For more
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,51," information on the Apache Software Foundation, please see"
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,52, <http://www.apache.org/>.
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,55,ackage org.apache.commons.math.util;
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,58, Some useful additions to the built-in functions in {@link Math}.
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,60, @version $Revision: 1.7 $ $Date: 2003/10/30 19:42:43 $
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,62,ublic final class MathUtils {
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,65, Private Constructor
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,67,rivate MathUtils() {
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,71," For a double precision value x, this method returns +1.0 if x >= 0"
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,72, and -1.0 if x < 0.
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,73," @param x the value, a double"
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,74," @return +1.0 or -1.0, depending on the the sign of x"
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,76,ublic static double sign(final double x) {
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,77,f (x >= 0.0) {
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,78,eturn 1.0;
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,79, else {
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,80,eturn -1.0;
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,85," For a float value x, this method returns +1.0F if x >= 0"
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,86, and -1.0F if x < 0.
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,87," @param x the value, a float"
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,88," @return +1.0F or -1.0F, depending on the the sign of x"
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,90,ublic static float sign(final float x) {
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,91,f (x >= 0.0F) {
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,92,eturn 1.0F;
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,93, else {
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,94,eturn -1.0F;
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,99," For a byte value x, this method returns (byte)(+1) if x >= 0"
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,100, and (byte)(-1) if x < 0.
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,101," @param x the value, a byte"
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,102," @return (byte)(+1) or (byte)(-1), depending on the the sign of x"
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,104,ublic static byte sign(final byte x) {
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,105,f (x >= (byte) 0) {
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,106,eturn (byte) 1;
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,107, else {
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,108,eturn (byte) (-1);
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,113," For a short value x, this method returns (short)(+1) if x >= 0"
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,114, and (short)(-1) if x < 0.
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,116," @param x the value, a short"
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,117," @return (short)(+1) or (short)(-1), depending on the the sign of x"
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,119,ublic static short sign(final short x) {
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,120,f (x >= (short) 0) {
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,121,eturn (short) 1;
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,122, else {
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,123,eturn (short) (-1);
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,128," For an int value x, this method returns +1 if x >= 0"
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,129, and -1 if x < 0.
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,131," @param x the value, an int"
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,132," @return +1 or -1, depending on the the sign of x"
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,134,ublic static int sign(final int x) {
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,135,f (x >= 0) {
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,136,eturn 1;
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,137, else {
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,138,eturn -1;
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,143," For a long value x, this method returns +1L if x >= 0"
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,144, and -1L if x < 0.
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,146," @param x the value, a long"
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,147," @return +1L or -1L, depending on the the sign of x"
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,149,ublic static long sign(final long x) {
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,150,f (x >= 0L) {
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,151,eturn 1L;
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,152, else {
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,153,eturn -1L;
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,157, Returns an exact representation of the
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,158," <a href=""http://mathworld.wolfram.com/BinomialCoefficient.html"">"
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,159," Binomial Coefficient</a>,  ""<code>n choose k</code>"","
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,160, the number of <code>k</code>-element subsets that can be selected from
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,161, an <code>n</code>-element set.
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,162, <p>
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,163, <Strong>Preconditions</strong>:<ul>
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,164, <li> <code>0 < k <= n </code> (otherwise
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,165, <li> <code>0 < k <= n </code> (otherwise
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,166,      <code>IllegalArgumentException</code> is thrown)</li>
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,167, <li> The result is small enough to fit into a <code>long</code>. The
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,168,      largest value of <code>n</code> for which all coefficients are
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,169,      <code> < Long.MAX_VALUE</code> is 66.  If the computed value
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,170, <li> The result is small enough to fit into a <code>long</code>.  The
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,171,      largest value of <code>n</code> for which all coefficients are
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,172,      <code> < Long.MAX_VALUE</code> is 66.  If the computed value
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,173,      exceeds <code>Long.MAX_VALUE</code> an <code>ArithMeticException
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,174,      </code> is thrown.</li>
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,175, </ul>
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,178, @param n the size of the set
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,179, @param k the size of the subsets to be counted
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,180, @return <code>n choose k</code>
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,182,"ublic static long binomialCoefficient(final int n, final int k) {"
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,183,f (n < k) {
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,184,hrow new IllegalArgumentException(
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,185,"must have n >= k for binomial coefficient (n,k)"");"
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,187,f (n <= 0) {
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,188,hrow new IllegalArgumentException(
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,189,"must have n > 0 for binomial coefficient (n,k)"");"
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,191,f ((n == k) || (k == 0)) {
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,192,eturn 1;
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,194,f ((k == 1) || (k == n - 1)) {
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,195,eturn n;
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,198,"ong result = Math.round(binomialCoefficientDouble(n, k));"
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,199,f (result == Long.MAX_VALUE) {
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,200,hrow new ArithmeticException(
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,201,"result too large to represent in a long integer"");"
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,203,eturn result;
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,207, Returns a <code>double</code> representation of the
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,208," <a href=""http://mathworld.wolfram.com/BinomialCoefficient.html"">"
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,209," Binomial Coefficient</a>,  ""<code>n choose k</code>"","
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,210, the number of <code>k</code>-element subsets that can be selected from
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,211, an <code>n</code>-element set.
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,212, <p>
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,213, <Strong>Preconditions</strong>:<ul>
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,214, <li> <code>0 < k <= n </code> (otherwise
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,215,      <code>IllegalArgumentException</code> is thrown)</li>
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,216, <li> The result is small enough to fit into a <code>double</code>.
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,217,      The largest value of <code>n</code> for which all coefficients are
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,218,      < Double.MAX_VALUE is 1029.  If the computed value exceeds
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,219,"      Double.MAX_VALUE, Double.POSITIVE_INFINITY is returned</li>"
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,220, </ul>
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,222, @param n the size of the set
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,223, @param k the size of the subsets to be counted
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,224, @return <code>n choose k</code>
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,226,"ublic static double binomialCoefficientDouble(final int n, final int k) {"
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,227,"eturn Math.floor(Math.exp(binomialCoefficientLog(n, k)) + 0.5);"
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,231, Returns the natural <code>log</code> of the
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,232," <a href=""http://mathworld.wolfram.com/BinomialCoefficient.html"">"
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,233," Binomial Coefficient</a>,  ""<code>n choose k</code>"","
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,234, the number of <code>k</code>-element subsets that can be selected from
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,235, an <code>n</code>-element set.
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,236, <p>
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,237, <Strong>Preconditions</strong>:<ul>
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,238, <li> <code>0 < k <= n </code> (otherwise
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,239,      <code>IllegalArgumentException</code> is thrown)</li>
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,240, </ul>
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,242, @param n the size of the set
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,243, @param k the size of the subsets to be counted
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,244, @return <code>n choose k</code>
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,246,"ublic static double binomialCoefficientLog(final int n, final int k) {"
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,247,f (n < k) {
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,248,hrow new IllegalArgumentException(
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,249,"must have n >= k for binomial coefficient (n,k)"");"
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,251,f (n <= 0) {
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,252,hrow new IllegalArgumentException(
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,253,"must have n > 0 for binomial coefficient (n,k)"");"
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,255,f ((n == k) || (k == 0)) {
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,256,eturn 0;
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,258,f ((k == 1) || (k == n - 1)) {
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,259,eturn Math.log((double) n);
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,261,ouble logSum = 0;
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,263,/ n!/k!
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,264,or (int i = k + 1; i <= n; i++) {
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,265,ogSum += Math.log((double) i);
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,268,/ divide by (n-k)!
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,269,or (int i = 2; i <= n - k; i++) {
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,270,ogSum -= Math.log((double) i);
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,273,eturn logSum;
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,277, Returns n!.  Shorthand for <code>n</code>
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,278," <a href=""http://mathworld.wolfram.com/Factorial.html"">"
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,279," Factorial</a>, the product of the numbers <code>1,...,n</code>."
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,281, <p>
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,282, <Strong>Preconditions</strong>:<ul>
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,283, <li> <code>n > 0</code> (otherwise
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,284,      <code>IllegalArgumentException</code> is thrown)</li>
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,285, <li> The result is small enough to fit into a <code>long</code>.  The
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,286,      largest value of <code>n</code> for which <code>n!</code>
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,287,      < Long.MAX_VALUE</code> is 20.  If the computed value
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,288,      exceeds <code>Long.MAX_VALUE</code> an <code>ArithMeticException
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,289,      </code> is thrown.</li>
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,290, </ul>
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,291, </p>
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,293, @param n argument
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,294, @return <code>n!</code>
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,296,ublic static long factorial(final int n) {
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,297,ong result = Math.round(factorialDouble(n));
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,298,f (result == Long.MAX_VALUE) {
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,299,hrow new ArithmeticException(
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,300,"result too large to represent in a long integer"");"
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,302,eturn result;
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,306, Returns n!.  Shorthand for <code>n</code>
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,307," <a href=""http://mathworld.wolfram.com/Factorial.html"">"
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,308," Factorial</a>, the product of the numbers <code>1,...,n</code> as a"
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,309, <code>double</code>.
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,311, <p>
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,312, <Strong>Preconditions</strong>:<ul>
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,313, <li> <code>n > 0</code> (otherwise
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,314,      <code>IllegalArgumentException</code> is thrown)</li>
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,315, <li> The result is small enough to fit into a <code>double</code>.  The
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,316,      largest value of <code>n</code> for which <code>n!</code>
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,317,      < Double.MAX_VALUE</code> is 170.  If the computed value exceeds
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,318,"      Double.MAX_VALUE, Double.POSITIVE_INFINITY is returned</li>"
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,319, </ul>
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,320, </p>
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,322, @param n argument
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,323, @return <code>n!</code>
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,325,ublic static double factorialDouble(final int n) {
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,326,f (n <= 0) {
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,327,"hrow new IllegalArgumentException(""must have n > 0 for n!"");"
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,329,eturn Math.floor(Math.exp(factorialLog(n)) + 0.5);
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,333, Returns the natural logarithm of n!.
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,334, <p>
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,335, <Strong>Preconditions</strong>:<ul>
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,336, <li> <code>n > 0</code> (otherwise
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,337,      <code>IllegalArgumentException</code> is thrown)</li>
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,338, </ul>
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,340, @param n argument
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,341, @return <code>n!</code>
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,343,ublic static double factorialLog(final int n) {
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,344,f (n <= 0) {
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,345,"hrow new IllegalArgumentException(""must have n > 0 for n!"");"
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,347,ouble logSum = 0;
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,348,or (int i = 2; i <= n; i++) {
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,349,ogSum += Math.log((double) i);
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,351,eturn logSum;
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,357,ublic static double cosh(double x) {
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,358,eturn (Math.exp(x) + Math.exp(-x)) / 2.0;
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,364,ublic static double sinh(double x) {
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,365,eturn (Math.exp(x) - Math.exp(-x)) / 2.0;
False,src/java/org/apache/commons/math/util/NumberTransformer.java,src/java/org/apache/commons/math/util/NumberTransformer.java,2," The Apache Software License, Version 1.1"
False,src/java/org/apache/commons/math/util/NumberTransformer.java,src/java/org/apache/commons/math/util/NumberTransformer.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
False,src/java/org/apache/commons/math/util/NumberTransformer.java,src/java/org/apache/commons/math/util/NumberTransformer.java,5, reserved.
False,src/java/org/apache/commons/math/util/NumberTransformer.java,src/java/org/apache/commons/math/util/NumberTransformer.java,7," Redistribution and use in source and binary forms, with or without"
False,src/java/org/apache/commons/math/util/NumberTransformer.java,src/java/org/apache/commons/math/util/NumberTransformer.java,8," modification, are permitted provided that the following conditions"
False,src/java/org/apache/commons/math/util/NumberTransformer.java,src/java/org/apache/commons/math/util/NumberTransformer.java,9, are met:
False,src/java/org/apache/commons/math/util/NumberTransformer.java,src/java/org/apache/commons/math/util/NumberTransformer.java,11, 1. Redistributions of source code must retain the above copyright
False,src/java/org/apache/commons/math/util/NumberTransformer.java,src/java/org/apache/commons/math/util/NumberTransformer.java,12,"    notice, this list of conditions and the following disclaimer."
False,src/java/org/apache/commons/math/util/NumberTransformer.java,src/java/org/apache/commons/math/util/NumberTransformer.java,14, 2. Redistributions in binary form must reproduce the above copyright
False,src/java/org/apache/commons/math/util/NumberTransformer.java,src/java/org/apache/commons/math/util/NumberTransformer.java,15,"    notice, this list of conditions and the following disclaimer in"
False,src/java/org/apache/commons/math/util/NumberTransformer.java,src/java/org/apache/commons/math/util/NumberTransformer.java,16,    the documentation and/or other materials provided with the
False,src/java/org/apache/commons/math/util/NumberTransformer.java,src/java/org/apache/commons/math/util/NumberTransformer.java,17,    distribution.
False,src/java/org/apache/commons/math/util/NumberTransformer.java,src/java/org/apache/commons/math/util/NumberTransformer.java,19," 3. The end-user documentation included with the redistribution, if"
False,src/java/org/apache/commons/math/util/NumberTransformer.java,src/java/org/apache/commons/math/util/NumberTransformer.java,20,"    any, must include the following acknowledgement:"
False,src/java/org/apache/commons/math/util/NumberTransformer.java,src/java/org/apache/commons/math/util/NumberTransformer.java,21,"       ""This product includes software developed by the"
False,src/java/org/apache/commons/math/util/NumberTransformer.java,src/java/org/apache/commons/math/util/NumberTransformer.java,22,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/java/org/apache/commons/math/util/NumberTransformer.java,src/java/org/apache/commons/math/util/NumberTransformer.java,23,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/java/org/apache/commons/math/util/NumberTransformer.java,src/java/org/apache/commons/math/util/NumberTransformer.java,24,    if and wherever such third-party acknowledgements normally appear.
False,src/java/org/apache/commons/math/util/NumberTransformer.java,src/java/org/apache/commons/math/util/NumberTransformer.java,26," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/java/org/apache/commons/math/util/NumberTransformer.java,src/java/org/apache/commons/math/util/NumberTransformer.java,27,"    Foundation"" must not be used to endorse or promote products derived"
False,src/java/org/apache/commons/math/util/NumberTransformer.java,src/java/org/apache/commons/math/util/NumberTransformer.java,28,    from this software without prior written permission. For written
False,src/java/org/apache/commons/math/util/NumberTransformer.java,src/java/org/apache/commons/math/util/NumberTransformer.java,29,"    permission, please contact apache@apache.org."
False,src/java/org/apache/commons/math/util/NumberTransformer.java,src/java/org/apache/commons/math/util/NumberTransformer.java,31," 5. Products derived from this software may not be called ""Apache"""
False,src/java/org/apache/commons/math/util/NumberTransformer.java,src/java/org/apache/commons/math/util/NumberTransformer.java,32,"    nor may ""Apache"" appear in their name without prior written"
False,src/java/org/apache/commons/math/util/NumberTransformer.java,src/java/org/apache/commons/math/util/NumberTransformer.java,33,    permission of the Apache Software Foundation.
False,src/java/org/apache/commons/math/util/NumberTransformer.java,src/java/org/apache/commons/math/util/NumberTransformer.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/java/org/apache/commons/math/util/NumberTransformer.java,src/java/org/apache/commons/math/util/NumberTransformer.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/java/org/apache/commons/math/util/NumberTransformer.java,src/java/org/apache/commons/math/util/NumberTransformer.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/java/org/apache/commons/math/util/NumberTransformer.java,src/java/org/apache/commons/math/util/NumberTransformer.java,38, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/java/org/apache/commons/math/util/NumberTransformer.java,src/java/org/apache/commons/math/util/NumberTransformer.java,39," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/java/org/apache/commons/math/util/NumberTransformer.java,src/java/org/apache/commons/math/util/NumberTransformer.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/java/org/apache/commons/math/util/NumberTransformer.java,src/java/org/apache/commons/math/util/NumberTransformer.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/java/org/apache/commons/math/util/NumberTransformer.java,src/java/org/apache/commons/math/util/NumberTransformer.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/java/org/apache/commons/math/util/NumberTransformer.java,src/java/org/apache/commons/math/util/NumberTransformer.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/java/org/apache/commons/math/util/NumberTransformer.java,src/java/org/apache/commons/math/util/NumberTransformer.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/java/org/apache/commons/math/util/NumberTransformer.java,src/java/org/apache/commons/math/util/NumberTransformer.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/java/org/apache/commons/math/util/NumberTransformer.java,src/java/org/apache/commons/math/util/NumberTransformer.java,46, SUCH DAMAGE.
False,src/java/org/apache/commons/math/util/NumberTransformer.java,src/java/org/apache/commons/math/util/NumberTransformer.java,49, This software consists of voluntary contributions made by many
False,src/java/org/apache/commons/math/util/NumberTransformer.java,src/java/org/apache/commons/math/util/NumberTransformer.java,50, individuals on behalf of the Apache Software Foundation.  For more
False,src/java/org/apache/commons/math/util/NumberTransformer.java,src/java/org/apache/commons/math/util/NumberTransformer.java,51," information on the Apache Software Foundation, please see"
False,src/java/org/apache/commons/math/util/NumberTransformer.java,src/java/org/apache/commons/math/util/NumberTransformer.java,52, <http://www.apache.org/>.
False,src/java/org/apache/commons/math/util/NumberTransformer.java,src/java/org/apache/commons/math/util/NumberTransformer.java,54,ackage org.apache.commons.math.util;
False,src/java/org/apache/commons/math/util/NumberTransformer.java,src/java/org/apache/commons/math/util/NumberTransformer.java,56,mport org.apache.commons.math.MathException;
False,src/java/org/apache/commons/math/util/NumberTransformer.java,src/java/org/apache/commons/math/util/NumberTransformer.java,59, Subclasses implementing this interface can transform Objects to doubles.
False,src/java/org/apache/commons/math/util/NumberTransformer.java,src/java/org/apache/commons/math/util/NumberTransformer.java,60, @version $Revision: 1.6 $ $Date: 2003/10/16 15:24:30 $
False,src/java/org/apache/commons/math/util/NumberTransformer.java,src/java/org/apache/commons/math/util/NumberTransformer.java,62,ublic interface NumberTransformer {
False,src/java/org/apache/commons/math/util/NumberTransformer.java,src/java/org/apache/commons/math/util/NumberTransformer.java,65, Implementing this interface provides a facility to transform
False,src/java/org/apache/commons/math/util/NumberTransformer.java,src/java/org/apache/commons/math/util/NumberTransformer.java,66, from Object to Double.
False,src/java/org/apache/commons/math/util/NumberTransformer.java,src/java/org/apache/commons/math/util/NumberTransformer.java,68, @param o the Object to be transformed.
False,src/java/org/apache/commons/math/util/NumberTransformer.java,src/java/org/apache/commons/math/util/NumberTransformer.java,69, @return the double value of the Object.
False,src/java/org/apache/commons/math/util/NumberTransformer.java,src/java/org/apache/commons/math/util/NumberTransformer.java,70, @throws MathException if the Object can not be transformed into a Double.
False,src/java/org/apache/commons/math/util/NumberTransformer.java,src/java/org/apache/commons/math/util/NumberTransformer.java,72,ouble transform(Object o) throws MathException;
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,2," The Apache Software License, Version 1.1"
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,5, reserved.
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,7," Redistribution and use in source and binary forms, with or without"
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,8," modification, are permitted provided that the following conditions"
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,9, are met:
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,11, 1. Redistributions of source code must retain the above copyright
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,12,"    notice, this list of conditions and the following disclaimer."
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,14, 2. Redistributions in binary form must reproduce the above copyright
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,15,"    notice, this list of conditions and the following disclaimer in"
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,16,    the documentation and/or other materials provided with the
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,17,    distribution.
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,19," 3. The end-user documentation included with the redistribution, if"
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,20,"    any, must include the following acknowledgement:"
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,21,"       ""This product includes software developed by the"
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,22,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,23,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,24,    if and wherever such third-party acknowledgements normally appear.
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,26," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,27,"    Foundation"" must not be used to endorse or promote products derived"
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,28,    from this software without prior written permission. For written
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,29,"    permission, please contact apache@apache.org."
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,31," 5. Products derived from this software may not be called ""Apache"""
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,32,"    nor may ""Apache"" appear in their name without prior written"
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,33,    permission of the Apache Software Foundation.
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,38, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,39," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,46, SUCH DAMAGE.
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,49, This software consists of voluntary contributions made by many
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,50, individuals on behalf of the Apache Software Foundation.  For more
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,51," information on the Apache Software Foundation, please see"
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,52, <http://www.apache.org/>.
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,54,ackage org.apache.commons.math.util;
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,56,mport java.util.Collection;
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,57,mport java.util.HashMap;
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,58,mport java.util.Map;
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,59,mport java.util.Set;
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,62, This TansformerMap automates the transformation of of mixed object types.
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,63, It provides a means to set NumberTransformers that will be selected
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,64, based on the Class of the object handed to the Maps
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,65, <code>double transform(Object o)</code> method.
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,66, @version $Revision: 1.5 $ $Date: 2003/10/16 15:24:30 $
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,68,ublic class TransformerMap implements NumberTransformer {
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,71, A default Number Transformer for Numbers and numeric Strings.
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,73,rivate NumberTransformer defaultTransformer = null;
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,76, The internal Map.
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,78,rivate Map map = null;
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,83,ublic TransformerMap() {
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,84,ap = new HashMap();
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,85,efaultTransformer = new DefaultTransformer();
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,89, Tests if a Class is present in the TransformerMap.
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,90, @param key Class to check
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,91, @return true|false
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,93,ublic boolean containsClass(Class key) {
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,94,eturn map.containsKey(key);
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,98, Tests if a NumberTransformer is present in the TransformerMap.
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,99, @param value NumberTransformer to check
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,100, @return true|false
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,102,ublic boolean containsTransformer(NumberTransformer value) {
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,103,eturn map.containsValue(value);
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,107, Returns the Transformer that is mapped to a class
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,108," if mapping is not present, this returns null."
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,109, @param key The Class of the object
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,110, @return the mapped NumberTransformer or null.
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,112,ublic NumberTransformer getTransformer(Class key) {
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,113,eturn (NumberTransformer) map.get(key);
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,117, Sets a Class to Transformer Mapping in the Map. If
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,118," the Class is already present, this overwrites that"
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,119, mapping.
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,120, @param key The Class
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,121, @param transformer The NumberTransformer
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,122, @return the replaced transformer if one is present
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,124,"ublic Object putTransformer(Class key, NumberTransformer transformer) {"
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,125,"eturn map.put(key, transformer);"
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,129, Removes a Class to Transformer Mapping in the Map.
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,130, @param key The Class
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,131, @return the removed transformer if one is present or
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,132, null if none was present.
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,134,ublic Object removeTransformer(Class key) {
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,135,eturn map.remove(key);
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,139, Clears all the Class to Transformer mappings.
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,141,ublic void clear() {
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,142,ap.clear();
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,146, Returns the Set of Classes used as keys in the map.
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,147, @return Set of Classes
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,149,ublic Set classes() {
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,150,eturn map.keySet();
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,154, Returns the Set of NumberTransformers used as values
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,155, in the map.
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,156, @return Set of NumberTransformers
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,158,ublic Collection transformers() {
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,159,eturn map.values();
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,163, Attempts to transform the Object against the map of
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,164, NumberTransformers. Otherwise it returns Double.NaN.
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,166, @see org.apache.commons.math.util.NumberTransformer#transform(java.lang.Object)
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,168,ublic double transform(Object o) {
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,169,ouble value = Double.NaN;
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,171,ry {
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,172,f (o instanceof Number || o instanceof String) {
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,173,alue = defaultTransformer.transform(o);
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,174, else {
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,175,umberTransformer trans =
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,176,NumberTransformer) this.getTransformer(o.getClass());
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,177,f (trans != null) {
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,178,alue = trans.transform(o);
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,181, catch (Exception e) {
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,182,.printStackTrace();
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,185,eturn value;
False,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,2," The Apache Software License, Version 1.1"
False,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
False,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,5, reserved.
False,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,7," Redistribution and use in source and binary forms, with or without"
False,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,8," modification, are permitted provided that the following conditions"
False,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,9, are met:
False,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,11, 1. Redistributions of source code must retain the above copyright
False,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,12,"    notice, this list of conditions and the following disclaimer."
False,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,14, 2. Redistributions in binary form must reproduce the above copyright
False,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,15,"    notice, this list of conditions and the following disclaimer in"
False,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,16,    the documentation and/or other materials provided with the
False,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,17,    distribution.
False,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,19," 3. The end-user documentation included with the redistribution, if"
False,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,20,"    any, must include the following acknowledgement:"
False,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,21,"       ""This product includes software developed by the"
False,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,22,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,23,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,24,    if and wherever such third-party acknowledgements normally appear.
False,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,26," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,27,"    Foundation"" must not be used to endorse or promote products derived"
False,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,28,    from this software without prior written permission. For written
False,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,29,"    permission, please contact apache@apache.org."
False,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,31," 5. Products derived from this software may not be called ""Apache"""
False,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,32,"    nor may ""Apache"" appear in their name without prior written"
False,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,33,    permission of the Apache Software Foundation.
False,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,38, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,39," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,46, SUCH DAMAGE.
False,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,49, This software consists of voluntary contributions made by many
False,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,50, individuals on behalf of the Apache Software Foundation.  For more
False,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,51," information on the Apache Software Foundation, please see"
False,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,52, <http://www.apache.org/>.
False,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,55,ackage org.apache.commons.math;
False,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,57,mport junit.framework.TestCase;
False,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,60, @version $Revision: 1.3 $ $Date: 2003/10/16 15:24:33 $
False,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,62,ublic class MathConfigurationExceptionTest extends TestCase {
False,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,66,ublic void testConstructor(){
False,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,67,athConfigurationException ex = new MathConfigurationException();
False,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,68,ssertNull(ex.getCause());
False,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,69,ssertNull(ex.getMessage());
False,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,75,ublic void testConstructorMessage(){
False,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,76,"tring msg = ""message"";"
False,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,77,athConfigurationException ex = new MathConfigurationException(msg);
False,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,78,ssertNull(ex.getCause());
False,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,79,"ssertEquals(msg, ex.getMessage());"
False,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,85,ublic void testConstructorMessageCause(){
False,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,86,"tring outMsg = ""outer message"";"
False,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,87,"tring inMsg = ""inner message"";"
False,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,88,xception cause = new Exception(inMsg);
False,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,89,"athConfigurationException ex = new MathConfigurationException(outMsg, cause);"
False,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,90,"ssertEquals(outMsg, ex.getMessage());"
False,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,91,"ssertEquals(cause, ex.getCause());"
False,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,97,ublic void testConstructorCause(){
False,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,98,"tring inMsg = ""inner message"";"
False,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,99,xception cause = new Exception(inMsg);
False,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,100,athConfigurationException ex = new MathConfigurationException(cause);
False,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,src/test/org/apache/commons/math/MathConfigurationExceptionTest.java,101,"ssertEquals(cause, ex.getCause());"
False,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,2," The Apache Software License, Version 1.1"
False,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
False,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,5, reserved.
False,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,7," Redistribution and use in source and binary forms, with or without"
False,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,8," modification, are permitted provided that the following conditions"
False,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,9, are met:
False,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,11, 1. Redistributions of source code must retain the above copyright
False,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,12,"    notice, this list of conditions and the following disclaimer."
False,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,14, 2. Redistributions in binary form must reproduce the above copyright
False,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,15,"    notice, this list of conditions and the following disclaimer in"
False,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,16,    the documentation and/or other materials provided with the
False,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,17,    distribution.
False,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,19," 3. The end-user documentation included with the redistribution, if"
False,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,20,"    any, must include the following acknowledgement:"
False,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,21,"       ""This product includes software developed by the"
False,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,22,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,23,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,24,    if and wherever such third-party acknowledgements normally appear.
False,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,26," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,27,"    Foundation"" must not be used to endorse or promote products derived"
False,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,28,    from this software without prior written permission. For written
False,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,29,"    permission, please contact apache@apache.org."
False,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,31," 5. Products derived from this software may not be called ""Apache"""
False,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,32,"    nor may ""Apache"" appear in their name without prior written"
False,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,33,    permission of the Apache Software Foundation.
False,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,38, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,39," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,46, SUCH DAMAGE.
False,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,49, This software consists of voluntary contributions made by many
False,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,50, individuals on behalf of the Apache Software Foundation.  For more
False,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,51," information on the Apache Software Foundation, please see"
False,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,52, <http://www.apache.org/>.
False,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,55,ackage org.apache.commons.math;
False,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,57,mport junit.framework.TestCase;
False,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,60, @version $Revision: 1.3 $ $Date: 2003/10/16 15:24:33 $
False,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,62,ublic class MathExceptionTest extends TestCase {
False,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,66,ublic void testConstructor(){
False,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,67,athException ex = new MathException();
False,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,68,ssertNull(ex.getCause());
False,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,69,ssertNull(ex.getMessage());
False,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,75,ublic void testConstructorMessage(){
False,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,76,"tring msg = ""message"";"
False,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,77,athException ex = new MathException(msg);
False,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,78,ssertNull(ex.getCause());
False,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,79,"ssertEquals(msg, ex.getMessage());"
False,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,85,ublic void testConstructorMessageCause(){
False,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,86,"tring outMsg = ""outer message"";"
False,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,87,"tring inMsg = ""inner message"";"
False,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,88,xception cause = new Exception(inMsg);
False,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,89,"athException ex = new MathException(outMsg, cause);"
False,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,90,"ssertEquals(outMsg, ex.getMessage());"
False,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,91,"ssertEquals(cause, ex.getCause());"
False,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,97,ublic void testConstructorCause(){
False,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,98,"tring inMsg = ""inner message"";"
False,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,99,xception cause = new Exception(inMsg);
False,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,100,athException ex = new MathException(cause);
False,src/test/org/apache/commons/math/MathExceptionTest.java,src/test/org/apache/commons/math/MathExceptionTest.java,101,"ssertEquals(cause, ex.getCause());"
False,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,2," The Apache Software License, Version 1.1"
False,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
False,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,5, reserved.
False,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,7," Redistribution and use in source and binary forms, with or without"
False,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,8," modification, are permitted provided that the following conditions"
False,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,9, are met:
False,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,11, 1. Redistributions of source code must retain the above copyright
False,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,12,"    notice, this list of conditions and the following disclaimer."
False,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,14, 2. Redistributions in binary form must reproduce the above copyright
False,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,15,"    notice, this list of conditions and the following disclaimer in"
False,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,16,    the documentation and/or other materials provided with the
False,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,17,    distribution.
False,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,19," 3. The end-user documentation included with the redistribution, if"
False,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,20,"    any, must include the following acknowledgement:"
False,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,21,"       ""This product includes software developed by the"
False,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,22,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,23,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,24,    if and wherever such third-party acknowledgements normally appear.
False,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,26," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,27,"    Foundation"" must not be used to endorse or promote products derived"
False,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,28,    from this software without prior written permission. For written
False,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,29,"    permission, please contact apache@apache.org."
False,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,31," 5. Products derived from this software may not be called ""Apache"""
False,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,32,"    nor may ""Apache"" appear in their name without prior written"
False,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,33,    permission of the Apache Software Foundation.
False,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,38, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,39," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,46, SUCH DAMAGE.
False,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,49, This software consists of voluntary contributions made by many
False,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,50, individuals on behalf of the Apache Software Foundation.  For more
False,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,51," information on the Apache Software Foundation, please see"
False,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,52, <http://www.apache.org/>.
False,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,55,ackage org.apache.commons.math;
False,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,57,mport junit.framework.Assert;
False,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,60, @version $Revision: 1.4 $ $Date: 2003/10/16 15:24:33 $
False,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,62,ublic class TestUtils {
False,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,66,rivate TestUtils() {
False,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,67,uper();
False,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,70,"ublic static void assertEquals(double expected, double actual, double delta) {"
False,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,71,/ check for NaN
False,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,72,f(Double.isNaN(expected)){
False,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,73,ssert.assertTrue(Double.isNaN(actual));
False,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,74, else {
False,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,75,"ssert.assertEquals(expected, actual, delta);"
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,2," The Apache Software License, Version 1.1"
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,5, reserved.
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,7," Redistribution and use in source and binary forms, with or without"
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,8," modification, are permitted provided that the following conditions"
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,9, are met:
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,11, 1. Redistributions of source code must retain the above copyright
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,12,"    notice, this list of conditions and the following disclaimer."
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,14, 2. Redistributions in binary form must reproduce the above copyright
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,15,"    notice, this list of conditions and the following disclaimer in"
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,16,    the documentation and/or other materials provided with the
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,17,    distribution.
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,19," 3. The end-user documentation included with the redistribution, if"
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,20,"    any, must include the following acknowledgement:"
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,21,"       ""This product includes software developed by the"
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,22,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,23,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,24,    if and wherever such third-party acknowledgements normally appear.
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,26," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,27,"    Foundation"" must not be used to endorse or promote products derived"
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,28,    from this software without prior written permission. For written
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,29,"    permission, please contact apache@apache.org."
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,31," 5. Products derived from this software may not be called ""Apache"""
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,32,"    nor may ""Apache"" appear in their name without prior written"
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,33,    permission of the Apache Software Foundation.
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,38, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,39," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,46, SUCH DAMAGE.
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,49, This software consists of voluntary contributions made by many
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,50, individuals on behalf of the Apache Software Foundation.  For more
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,51," information on the Apache Software Foundation, please see"
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,52, <http://www.apache.org/>.
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,54,ackage org.apache.commons.math.analysis;
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,56,mport org.apache.commons.math.MathException;
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,58,mport junit.framework.TestCase;
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,61, @version $Revision: 1.5 $ $Date: 2003/10/16 15:24:28 $
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,63,ublic final class BisectionSolverTest extends TestCase {
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,67,ublic void testSinZero() throws MathException {
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,68,nivariateRealFunction f = new SinFunction();
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,69,ouble result;
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,71,nivariateRealSolver solver = new BisectionSolver(f);
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,72,"esult = solver.solve(3, 4);"
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,73,"ssertEquals(result, Math.PI, solver.getAbsoluteAccuracy());"
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,75,"esult = solver.solve(1, 4);"
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,76,"ssertEquals(result, Math.PI, solver.getAbsoluteAccuracy());"
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,82,ublic void testQuinticZero() throws MathException {
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,83,nivariateRealFunction f = new QuinticFunction();
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,84,ouble result;
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,86,nivariateRealSolver solver = new BisectionSolver(f);
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,87,"esult = solver.solve(-0.2, 0.2);"
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,88,"ssertEquals(result, 0, solver.getAbsoluteAccuracy());"
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,90,"esult = solver.solve(-0.1, 0.3);"
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,91,"ssertEquals(result, 0, solver.getAbsoluteAccuracy());"
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,93,"esult = solver.solve(-0.3, 0.45);"
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,94,"ssertEquals(result, 0, solver.getAbsoluteAccuracy());"
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,96,"esult = solver.solve(0.3, 0.7);"
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,97,"ssertEquals(result, 0.5, solver.getAbsoluteAccuracy());"
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,99,"esult = solver.solve(0.2, 0.6);"
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,100,"ssertEquals(result, 0.5, solver.getAbsoluteAccuracy());"
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,102,"esult = solver.solve(0.05, 0.95);"
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,103,"ssertEquals(result, 0.5, solver.getAbsoluteAccuracy());"
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,105,"esult = solver.solve(0.85, 1.25);"
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,106,"ssertEquals(result, 1.0, solver.getAbsoluteAccuracy());"
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,108,"esult = solver.solve(0.8, 1.2);"
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,109,"ssertEquals(result, 1.0, solver.getAbsoluteAccuracy());"
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,111,"esult = solver.solve(0.85, 1.75);"
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,112,"ssertEquals(result, 1.0, solver.getAbsoluteAccuracy());"
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,114,"esult = solver.solve(0.55, 1.45);"
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,115,"ssertEquals(result, 1.0, solver.getAbsoluteAccuracy());"
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,117,"esult = solver.solve(0.85, 5);"
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,118,"ssertEquals(result, 1.0, solver.getAbsoluteAccuracy());"
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,124,ublic void testSetFunctionValueAccuracy(){
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,125,ouble expected = 1.0e-2;
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,127,nivariateRealFunction f = new QuinticFunction();
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,128,nivariateRealSolver solver = new BisectionSolver(f);
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,129,ry {
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,130,olver.setFunctionValueAccuracy(expected);
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,131,"ssertEquals(expected, solver.getFunctionValueAccuracy(), 1.0e-2);"
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,132, catch (MathException ex) {
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,133,ail(ex.getMessage());
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,140,ublic void testResetFunctionValueAccuracy(){
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,141,ouble newValue = 1.0e-2;
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,143,nivariateRealFunction f = new QuinticFunction();
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,144,nivariateRealSolver solver = new BisectionSolver(f);
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,145,ry {
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,146,ouble oldValue = solver.getFunctionValueAccuracy();
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,147,olver.setFunctionValueAccuracy(newValue);
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,148,olver.resetFunctionValueAccuracy();
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,149,"ssertEquals(oldValue, solver.getFunctionValueAccuracy(), 1.0e-2);"
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,150, catch(MathException ex){
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,151,ail(ex.getMessage());
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,158,ublic void testSetAbsoluteAccuracy(){
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,159,ouble expected = 1.0e-2;
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,161,nivariateRealFunction f = new QuinticFunction();
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,162,nivariateRealSolver solver = new BisectionSolver(f);
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,163,ry {
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,164,olver.setAbsoluteAccuracy(expected);
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,165,"ssertEquals(expected, solver.getAbsoluteAccuracy(), 1.0e-2);"
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,166, catch(MathException ex){
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,167,ail(ex.getMessage());
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,174,ublic void testResetAbsoluteAccuracy(){
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,175,ouble newValue = 1.0e-2;
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,177,nivariateRealFunction f = new QuinticFunction();
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,178,nivariateRealSolver solver = new BisectionSolver(f);
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,179,ry {
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,180,ouble oldValue = solver.getAbsoluteAccuracy();
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,181,olver.setAbsoluteAccuracy(newValue);
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,182,olver.resetAbsoluteAccuracy();
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,183,"ssertEquals(oldValue, solver.getAbsoluteAccuracy(), 1.0e-2);"
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,184, catch(MathException ex){
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,185,ail(ex.getMessage());
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,192,ublic void testSetMaximalIterationCount(){
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,193,nt expected = 100;
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,195,nivariateRealFunction f = new QuinticFunction();
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,196,nivariateRealSolver solver = new BisectionSolver(f);
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,197,olver.setMaximalIterationCount(expected);
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,198,"ssertEquals(expected, solver.getMaximalIterationCount());"
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,204,ublic void testResetMaximalIterationCount(){
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,205,nt newValue = 10000;
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,207,nivariateRealFunction f = new QuinticFunction();
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,208,nivariateRealSolver solver = new BisectionSolver(f);
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,209,nt oldValue = solver.getMaximalIterationCount();
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,210,olver.setMaximalIterationCount(newValue);
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,211,olver.resetMaximalIterationCount();
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,212,"ssertEquals(oldValue, solver.getMaximalIterationCount());"
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,218,ublic void testSetRelativeAccuracy(){
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,219,ouble expected = 1.0e-2;
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,221,nivariateRealFunction f = new QuinticFunction();
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,222,nivariateRealSolver solver = new BisectionSolver(f);
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,223,ry {
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,224,olver.setRelativeAccuracy(expected);
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,225,"ssertEquals(expected, solver.getRelativeAccuracy(), 1.0e-2);"
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,226, catch(MathException ex){
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,227,ail(ex.getMessage());
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,234,ublic void testResetRelativeAccuracy(){
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,235,ouble newValue = 1.0e-2;
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,237,nivariateRealFunction f = new QuinticFunction();
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,238,nivariateRealSolver solver = new BisectionSolver(f);
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,239,ry {
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,240,ouble oldValue = solver.getRelativeAccuracy();
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,241,olver.setRelativeAccuracy(newValue);
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,242,olver.resetRelativeAccuracy();
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,243,"ssertEquals(oldValue, solver.getRelativeAccuracy(), 1.0e-2);"
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,244, catch(MathException ex){
False,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/BisectionSolverTest.java,245,ail(ex.getMessage());
False,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,2," The Apache Software License, Version 1.1"
False,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
False,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,5, reserved.
False,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,7," Redistribution and use in source and binary forms, with or without"
False,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,8," modification, are permitted provided that the following conditions"
False,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,9, are met:
False,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,11, 1. Redistributions of source code must retain the above copyright
False,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,12,"    notice, this list of conditions and the following disclaimer."
False,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,14, 2. Redistributions in binary form must reproduce the above copyright
False,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,15,"    notice, this list of conditions and the following disclaimer in"
False,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,16,    the documentation and/or other materials provided with the
False,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,17,    distribution.
False,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,19," 3. The end-user documentation included with the redistribution, if"
False,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,20,"    any, must include the following acknowledgement:"
False,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,21,"       ""This product includes software developed by the"
False,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,22,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,23,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,24,    if and wherever such third-party acknowledgements normally appear.
False,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,26," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,27,"    Foundation"" must not be used to endorse or promote products derived"
False,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,28,    from this software without prior written permission. For written
False,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,29,"    permission, please contact apache@apache.org."
False,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,31," 5. Products derived from this software may not be called ""Apache"""
False,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,32,"    nor may ""Apache"" appear in their name without prior written"
False,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,33,    permission of the Apache Software Foundation.
False,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,38, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,39," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,46, SUCH DAMAGE.
False,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,49, This software consists of voluntary contributions made by many
False,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,50, individuals on behalf of the Apache Software Foundation.  For more
False,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,51," information on the Apache Software Foundation, please see"
False,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,52, <http://www.apache.org/>.
False,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,55,ackage org.apache.commons.math.analysis;
False,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,57,mport org.apache.commons.math.ConvergenceException;
False,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,59,mport junit.framework.TestCase;
False,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,62, @version $Revision: 1.3 $ $Date: 2003/10/16 15:24:28 $
False,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,64,ublic class ConvergenceExceptionTest extends TestCase {
False,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,68,ublic void testConstructor(){
False,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,69,onvergenceException ex = new ConvergenceException();
False,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,70,ssertNull(ex.getCause());
False,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,71,ssertNull(ex.getMessage());
False,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,77,ublic void testConstructorMessage(){
False,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,78,"tring msg = ""message"";"
False,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,79,onvergenceException ex = new ConvergenceException(msg);
False,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,80,ssertNull(ex.getCause());
False,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,81,"ssertEquals(msg, ex.getMessage());"
False,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,87,ublic void testConstructorMessageCause(){
False,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,88,"tring outMsg = ""outer message"";"
False,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,89,"tring inMsg = ""inner message"";"
False,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,90,xception cause = new Exception(inMsg);
False,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,91,"onvergenceException ex = new ConvergenceException(outMsg, cause);"
False,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,92,"ssertEquals(outMsg, ex.getMessage());"
False,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,93,"ssertEquals(cause, ex.getCause());"
False,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,99,ublic void testConstructorCause(){
False,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,100,"tring inMsg = ""inner message"";"
False,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,101,xception cause = new Exception(inMsg);
False,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,102,onvergenceException ex = new ConvergenceException(cause);
False,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,src/test/org/apache/commons/math/analysis/ConvergenceExceptionTest.java,103,"ssertEquals(cause, ex.getCause());"
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,2," The Apache Software License, Version 1.1"
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,5, reserved.
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,7," Redistribution and use in source and binary forms, with or without"
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,8," modification, are permitted provided that the following conditions"
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,9, are met:
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,11, 1. Redistributions of source code must retain the above copyright
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,12,"    notice, this list of conditions and the following disclaimer."
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,14, 2. Redistributions in binary form must reproduce the above copyright
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,15,"    notice, this list of conditions and the following disclaimer in"
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,16,    the documentation and/or other materials provided with the
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,17,    distribution.
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,19," 3. The end-user documentation included with the redistribution, if"
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,20,"    any, must include the following acknowledgement:"
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,21,"       ""This product includes software developed by the"
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,22,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,23,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,24,    if and wherever such third-party acknowledgements normally appear.
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,26," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,27,"    Foundation"" must not be used to endorse or promote products derived"
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,28,    from this software without prior written permission. For written
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,29,"    permission, please contact apache@apache.org."
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,31," 5. Products derived from this software may not be called ""Apache"""
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,32,"    nor may ""Apache"" appear in their name without prior written"
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,33,    permission of the Apache Software Foundation.
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,38, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,39," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,46, SUCH DAMAGE.
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,49, This software consists of voluntary contributions made by many
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,50, individuals on behalf of the Apache Software Foundation.  For more
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,51," information on the Apache Software Foundation, please see"
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,52, <http://www.apache.org/>.
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,54,ackage org.apache.commons.math.analysis;
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,56,mport org.apache.commons.math.MathException;
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,58,mport junit.framework.Test;
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,59,mport junit.framework.TestCase;
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,60,mport junit.framework.TestSuite;
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,63, Test the interpolation framework.
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,65, @version $Revision: 1.5 $ $Date: 2003/10/16 15:24:28 $
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,67,ublic class InterpolatorTest extends TestCase {
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,69,ublic InterpolatorTest(String name) {
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,70,uper(name);
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,73,ublic static Test suite() {
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,74,estSuite suite = new TestSuite(InterpolatorTest.class);
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,75,"uite.setName(""UnivariateRealInterpolator Tests"");"
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,76,eturn suite;
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,79,ublic void testInterpolateLinearDegenerateTwoSegment()
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,80,hrows MathException {
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,81,"ystem.out.println("" deg 2 seg"");"
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,82,"ouble xval[] = { 0.0, 0.5, 1.0 };"
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,83,"ouble yval[] = { 0.0, 0.5, 1.0 };"
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,84,nivariateRealInterpolator i = new SplineInterpolator();
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,85,"nivariateRealFunction f = i.interpolate(xval, yval);"
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,86,ouble x;
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,87, = 0.0;
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,88,ystem.out.println(
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,89,"x="""
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,90, x
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,91," "" y="""
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,92, f.value(x)
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,93," "" y'="""
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,94, f.firstDerivative(x)
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,95," "" y''="""
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,96, f.secondDerivative(x));
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,97, = 0.5;
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,98,ystem.out.println(
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,99,"x="""
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,100, x
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,101," "" y="""
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,102, f.value(x)
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,103," "" y'="""
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,104, f.firstDerivative(x)
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,105," "" y''="""
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,106, f.secondDerivative(x));
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,107, = 1 - 1E-6;
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,108,ystem.out.println(
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,109,"x="""
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,110, x
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,111," "" y="""
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,112, f.value(x)
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,113," "" y'="""
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,114, f.firstDerivative(x)
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,115," "" y''="""
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,116, f.secondDerivative(x));
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,119,ublic void testInterpolateLinearDegenerateThreeSegment()
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,120,hrows MathException {
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,121,"ystem.out.println("" deg 3 seg"");"
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,122,"ouble xval[] = { 0.0, 0.5, 1.0, 1.5 };"
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,123,"ouble yval[] = { 0.0, 0.5, 1.0, 1.5 };"
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,124,nivariateRealInterpolator i = new SplineInterpolator();
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,125,"nivariateRealFunction f = i.interpolate(xval, yval);"
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,126,ouble x;
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,127, = 0.0;
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,128,ystem.out.println(
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,129,"x="""
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,130, x
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,131," "" y="""
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,132, f.value(x)
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,133," "" y'="""
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,134, f.firstDerivative(x)
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,135," "" y''="""
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,136, f.secondDerivative(x));
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,137, = 0.5 - 1E-6;
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,138,ystem.out.println(
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,139,"x="""
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,140, x
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,141," "" y="""
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,142, f.value(x)
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,143," "" y'="""
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,144, f.firstDerivative(x)
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,145," "" y''="""
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,146, f.secondDerivative(x));
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,147, = 0.5;
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,148,ystem.out.println(
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,149,"x="""
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,150, x
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,151," "" y="""
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,152, f.value(x)
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,153," "" y'="""
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,154, f.firstDerivative(x)
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,155," "" y''="""
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,156, f.secondDerivative(x));
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,157, = 1 - 1E-6;
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,158,ystem.out.println(
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,159,"x="""
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,160, x
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,161," "" y="""
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,162, f.value(x)
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,163," "" y'="""
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,164, f.firstDerivative(x)
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,165," "" y''="""
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,166, f.secondDerivative(x));
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,167, = 1;
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,168,ystem.out.println(
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,169,"x="""
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,170, x
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,171," "" y="""
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,172, f.value(x)
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,173," "" y'="""
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,174, f.firstDerivative(x)
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,175," "" y''="""
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,176, f.secondDerivative(x));
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,177, = 1.5 - 1E-6;
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,178,ystem.out.println(
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,179,"x="""
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,180, x
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,181," "" y="""
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,182, f.value(x)
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,183," "" y'="""
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,184, f.firstDerivative(x)
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,185," "" y''="""
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,186, f.secondDerivative(x));
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,189,ublic void testInterpolateLinear() throws MathException {
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,190,"ystem.out.println("" triang 2 seg"");"
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,191,"ouble xval[] = { 0.0, 0.5, 1.0 };"
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,192,"ouble yval[] = { 0.0, 0.5, 0.0 };"
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,193,nivariateRealInterpolator i = new SplineInterpolator();
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,194,"nivariateRealFunction f = i.interpolate(xval, yval);"
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,195,ouble x;
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,196, = 0.0;
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,197,ystem.out.println(
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,198,"x="""
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,199, x
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,200," "" y="""
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,201, f.value(x)
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,202," "" y'="""
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,203, f.firstDerivative(x)
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,204," "" y''="""
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,205, f.secondDerivative(x));
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,206, = 0.5 - 1E-6;
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,207,ystem.out.println(
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,208,"x="""
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,209, x
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,210," "" y="""
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,211, f.value(x)
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,212," "" y'="""
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,213, f.firstDerivative(x)
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,214," "" y''="""
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,215, f.secondDerivative(x));
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,216, = 0.5;
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,217,ystem.out.println(
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,218,"x="""
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,219, x
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,220," "" y="""
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,221, f.value(x)
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,222," "" y'="""
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,223, f.firstDerivative(x)
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,224," "" y''="""
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,225, f.secondDerivative(x));
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,226, = 1 - 1E-6;
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,227,ystem.out.println(
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,228,"x="""
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,229, x
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,230," "" y="""
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,231, f.value(x)
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,232," "" y'="""
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,233, f.firstDerivative(x)
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,234," "" y''="""
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,235, f.secondDerivative(x));
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,238,ublic void testInterpolateSin() throws MathException {
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,239,"ystem.out.println("" sin"");"
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,240,ouble xval[] =
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,242,".0,"
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,243,"ath.PI / 6.0,"
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,244,"ath.PI / 2.0,"
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,245,".0 * Math.PI / 6.0,"
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,246,"ath.PI,"
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,247,".0 * Math.PI / 6.0,"
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,248,".0 * Math.PI / 2.0,"
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,249,"1.0 * Math.PI / 6.0,"
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,250,.0 * Math.PI };
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,251,"ouble yval[] = { 0.0, 0.5, 1.0, 0.5, 0.0, -0.5, -1.0, -0.5, 0.0 };"
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,253,"ystem.out.println(""n="" + xval.length);"
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,254,nivariateRealInterpolator i = new SplineInterpolator();
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,255,"nivariateRealFunction f = i.interpolate(xval, yval);"
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,256,ouble x;
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,257, = 0.0;
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,258,ystem.out.println(
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,259,"x="""
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,260, x
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,261," "" y="""
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,262, f.value(x)
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,263," "" y'="""
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,264, f.firstDerivative(x)
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,265," "" y''="""
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,266, f.secondDerivative(x));
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,267, = Math.PI / 6.0 - 1E-6;
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,268,ystem.out.println(
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,269,"x="""
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,270, x
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,271," "" y="""
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,272, f.value(x)
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,273," "" y'="""
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,274, f.firstDerivative(x)
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,275," "" y''="""
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,276, f.secondDerivative(x));
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,277, = Math.PI / 6.0 + 1E-6;
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,278,ystem.out.println(
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,279,"x="""
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,280, x
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,281," "" y="""
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,282, f.value(x)
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,283," "" y'="""
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,284, f.firstDerivative(x)
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,285," "" y''="""
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,286, f.secondDerivative(x));
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,287, = Math.PI / 2 - 1E-6;
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,288,ystem.out.println(
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,289,"x="""
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,290, x
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,291," "" y="""
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,292, f.value(x)
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,293," "" y'="""
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,294, f.firstDerivative(x)
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,295," "" y''="""
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,296, f.secondDerivative(x));
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,297, = Math.PI / 2 + 1E-6;
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,298,ystem.out.println(
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,299,"x="""
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,300, x
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,301," "" y="""
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,302, f.value(x)
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,303," "" y'="""
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,304, f.firstDerivative(x)
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,305," "" y''="""
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,306, f.secondDerivative(x));
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,307, = Math.PI - 1E-6;
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,308,ystem.out.println(
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,309,"x="""
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,310, x
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,311," "" y="""
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,312, f.value(x)
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,313," "" y'="""
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,314, f.firstDerivative(x)
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,315," "" y''="""
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,316, f.secondDerivative(x));
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,317, = Math.PI + 1E-6;
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,318,ystem.out.println(
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,319,"x="""
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,320, x
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,321," "" y="""
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,322, f.value(x)
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,323," "" y'="""
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,324, f.firstDerivative(x)
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,325," "" y''="""
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,326, f.secondDerivative(x));
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,327, = 2.0 * Math.PI - 1E-6;
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,328,ystem.out.println(
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,329,"x="""
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,330, x
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,331," "" y="""
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,332, f.value(x)
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,333," "" y'="""
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,334, f.firstDerivative(x)
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,335," "" y''="""
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,336, f.secondDerivative(x));
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,337,"/assertEquals(0.5,f.value(Math.PI/6.0),)"
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,340,ublic void testIllegalArguments() throws MathException {
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,341,/ Data set arrays of different size.
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,342,nivariateRealInterpolator i = new SplineInterpolator();
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,343,ry {
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,344,"ouble xval[] = { 0.0, 1.0 };"
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,345,"ouble yval[] = { 0.0, 1.0, 2.0 };"
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,346,".interpolate(xval, yval);"
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,347,"ail(""Failed to detect data set array with different sizes."");"
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,348, catch (IllegalArgumentException iae) {
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,350,/ X values not sorted.
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,351,ry {
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,352,"ouble xval[] = { 0.0, 1.0, 0.5 };"
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,353,"ouble yval[] = { 0.0, 1.0, 2.0 };"
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,354,".interpolate(xval, yval);"
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,355,"ail(""Failed to detect unsorted arguments."");"
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,356, catch (IllegalArgumentException iae) {
False,src/test/org/apache/commons/math/analysis/QuinticFunction.java,src/test/org/apache/commons/math/analysis/QuinticFunction.java,2," The Apache Software License, Version 1.1"
False,src/test/org/apache/commons/math/analysis/QuinticFunction.java,src/test/org/apache/commons/math/analysis/QuinticFunction.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
False,src/test/org/apache/commons/math/analysis/QuinticFunction.java,src/test/org/apache/commons/math/analysis/QuinticFunction.java,5, reserved.
False,src/test/org/apache/commons/math/analysis/QuinticFunction.java,src/test/org/apache/commons/math/analysis/QuinticFunction.java,7," Redistribution and use in source and binary forms, with or without"
False,src/test/org/apache/commons/math/analysis/QuinticFunction.java,src/test/org/apache/commons/math/analysis/QuinticFunction.java,8," modification, are permitted provided that the following conditions"
False,src/test/org/apache/commons/math/analysis/QuinticFunction.java,src/test/org/apache/commons/math/analysis/QuinticFunction.java,9, are met:
False,src/test/org/apache/commons/math/analysis/QuinticFunction.java,src/test/org/apache/commons/math/analysis/QuinticFunction.java,11, 1. Redistributions of source code must retain the above copyright
False,src/test/org/apache/commons/math/analysis/QuinticFunction.java,src/test/org/apache/commons/math/analysis/QuinticFunction.java,12,"    notice, this list of conditions and the following disclaimer."
False,src/test/org/apache/commons/math/analysis/QuinticFunction.java,src/test/org/apache/commons/math/analysis/QuinticFunction.java,14, 2. Redistributions in binary form must reproduce the above copyright
False,src/test/org/apache/commons/math/analysis/QuinticFunction.java,src/test/org/apache/commons/math/analysis/QuinticFunction.java,15,"    notice, this list of conditions and the following disclaimer in"
False,src/test/org/apache/commons/math/analysis/QuinticFunction.java,src/test/org/apache/commons/math/analysis/QuinticFunction.java,16,    the documentation and/or other materials provided with the
False,src/test/org/apache/commons/math/analysis/QuinticFunction.java,src/test/org/apache/commons/math/analysis/QuinticFunction.java,17,    distribution.
False,src/test/org/apache/commons/math/analysis/QuinticFunction.java,src/test/org/apache/commons/math/analysis/QuinticFunction.java,19," 3. The end-user documentation included with the redistribution, if"
False,src/test/org/apache/commons/math/analysis/QuinticFunction.java,src/test/org/apache/commons/math/analysis/QuinticFunction.java,20,"    any, must include the following acknowledgement:"
False,src/test/org/apache/commons/math/analysis/QuinticFunction.java,src/test/org/apache/commons/math/analysis/QuinticFunction.java,21,"       ""This product includes software developed by the"
False,src/test/org/apache/commons/math/analysis/QuinticFunction.java,src/test/org/apache/commons/math/analysis/QuinticFunction.java,22,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/test/org/apache/commons/math/analysis/QuinticFunction.java,src/test/org/apache/commons/math/analysis/QuinticFunction.java,23,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/test/org/apache/commons/math/analysis/QuinticFunction.java,src/test/org/apache/commons/math/analysis/QuinticFunction.java,24,    if and wherever such third-party acknowledgements normally appear.
False,src/test/org/apache/commons/math/analysis/QuinticFunction.java,src/test/org/apache/commons/math/analysis/QuinticFunction.java,26," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/test/org/apache/commons/math/analysis/QuinticFunction.java,src/test/org/apache/commons/math/analysis/QuinticFunction.java,27,"    Foundation"" must not be used to endorse or promote products derived"
False,src/test/org/apache/commons/math/analysis/QuinticFunction.java,src/test/org/apache/commons/math/analysis/QuinticFunction.java,28,    from this software without prior written permission. For written
False,src/test/org/apache/commons/math/analysis/QuinticFunction.java,src/test/org/apache/commons/math/analysis/QuinticFunction.java,29,"    permission, please contact apache@apache.org."
False,src/test/org/apache/commons/math/analysis/QuinticFunction.java,src/test/org/apache/commons/math/analysis/QuinticFunction.java,31," 5. Products derived from this software may not be called ""Apache"""
False,src/test/org/apache/commons/math/analysis/QuinticFunction.java,src/test/org/apache/commons/math/analysis/QuinticFunction.java,32,"    nor may ""Apache"" appear in their name without prior written"
False,src/test/org/apache/commons/math/analysis/QuinticFunction.java,src/test/org/apache/commons/math/analysis/QuinticFunction.java,33,    permission of the Apache Software Foundation.
False,src/test/org/apache/commons/math/analysis/QuinticFunction.java,src/test/org/apache/commons/math/analysis/QuinticFunction.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/test/org/apache/commons/math/analysis/QuinticFunction.java,src/test/org/apache/commons/math/analysis/QuinticFunction.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/test/org/apache/commons/math/analysis/QuinticFunction.java,src/test/org/apache/commons/math/analysis/QuinticFunction.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/test/org/apache/commons/math/analysis/QuinticFunction.java,src/test/org/apache/commons/math/analysis/QuinticFunction.java,38, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/test/org/apache/commons/math/analysis/QuinticFunction.java,src/test/org/apache/commons/math/analysis/QuinticFunction.java,39," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/test/org/apache/commons/math/analysis/QuinticFunction.java,src/test/org/apache/commons/math/analysis/QuinticFunction.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/test/org/apache/commons/math/analysis/QuinticFunction.java,src/test/org/apache/commons/math/analysis/QuinticFunction.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/test/org/apache/commons/math/analysis/QuinticFunction.java,src/test/org/apache/commons/math/analysis/QuinticFunction.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/test/org/apache/commons/math/analysis/QuinticFunction.java,src/test/org/apache/commons/math/analysis/QuinticFunction.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/test/org/apache/commons/math/analysis/QuinticFunction.java,src/test/org/apache/commons/math/analysis/QuinticFunction.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/test/org/apache/commons/math/analysis/QuinticFunction.java,src/test/org/apache/commons/math/analysis/QuinticFunction.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/test/org/apache/commons/math/analysis/QuinticFunction.java,src/test/org/apache/commons/math/analysis/QuinticFunction.java,46, SUCH DAMAGE.
False,src/test/org/apache/commons/math/analysis/QuinticFunction.java,src/test/org/apache/commons/math/analysis/QuinticFunction.java,49, This software consists of voluntary contributions made by many
False,src/test/org/apache/commons/math/analysis/QuinticFunction.java,src/test/org/apache/commons/math/analysis/QuinticFunction.java,50, individuals on behalf of the Apache Software Foundation.  For more
False,src/test/org/apache/commons/math/analysis/QuinticFunction.java,src/test/org/apache/commons/math/analysis/QuinticFunction.java,51," information on the Apache Software Foundation, please see"
False,src/test/org/apache/commons/math/analysis/QuinticFunction.java,src/test/org/apache/commons/math/analysis/QuinticFunction.java,52, <http://www.apache.org/>.
False,src/test/org/apache/commons/math/analysis/QuinticFunction.java,src/test/org/apache/commons/math/analysis/QuinticFunction.java,54,ackage org.apache.commons.math.analysis;
False,src/test/org/apache/commons/math/analysis/QuinticFunction.java,src/test/org/apache/commons/math/analysis/QuinticFunction.java,56,mport org.apache.commons.math.MathException;
False,src/test/org/apache/commons/math/analysis/QuinticFunction.java,src/test/org/apache/commons/math/analysis/QuinticFunction.java,59, Auxillary class for testing solvers.
False,src/test/org/apache/commons/math/analysis/QuinticFunction.java,src/test/org/apache/commons/math/analysis/QuinticFunction.java,61, @version $Revision: 1.6 $ $Date: 2003/10/16 15:24:28 $
False,src/test/org/apache/commons/math/analysis/QuinticFunction.java,src/test/org/apache/commons/math/analysis/QuinticFunction.java,63,ublic class QuinticFunction implements UnivariateRealFunction {
False,src/test/org/apache/commons/math/analysis/QuinticFunction.java,src/test/org/apache/commons/math/analysis/QuinticFunction.java,65,* Evaluate quintic.
False,src/test/org/apache/commons/math/analysis/QuinticFunction.java,src/test/org/apache/commons/math/analysis/QuinticFunction.java,66, @see org.apache.commons.math.UnivariateRealFunction#value(double)
False,src/test/org/apache/commons/math/analysis/QuinticFunction.java,src/test/org/apache/commons/math/analysis/QuinticFunction.java,68,ublic double value(double x) throws MathException {
False,src/test/org/apache/commons/math/analysis/QuinticFunction.java,src/test/org/apache/commons/math/analysis/QuinticFunction.java,69,eturn (x-1)*(x-0.5)*x*(x+0.5)*(x+1);
False,src/test/org/apache/commons/math/analysis/QuinticFunction.java,src/test/org/apache/commons/math/analysis/QuinticFunction.java,72,* First derivative of quintic.
False,src/test/org/apache/commons/math/analysis/QuinticFunction.java,src/test/org/apache/commons/math/analysis/QuinticFunction.java,73, @see org.apache.commons.math.UnivariateRealFunction#firstDerivative(double)
False,src/test/org/apache/commons/math/analysis/QuinticFunction.java,src/test/org/apache/commons/math/analysis/QuinticFunction.java,75,ublic double firstDerivative(double x) throws MathException {
False,src/test/org/apache/commons/math/analysis/QuinticFunction.java,src/test/org/apache/commons/math/analysis/QuinticFunction.java,76,eturn (5*x*x-3.75)*x*x+0.25;
False,src/test/org/apache/commons/math/analysis/QuinticFunction.java,src/test/org/apache/commons/math/analysis/QuinticFunction.java,79,* Second order derivative of quintic.
False,src/test/org/apache/commons/math/analysis/QuinticFunction.java,src/test/org/apache/commons/math/analysis/QuinticFunction.java,80, Unsupported.
False,src/test/org/apache/commons/math/analysis/QuinticFunction.java,src/test/org/apache/commons/math/analysis/QuinticFunction.java,81, @see org.apache.commons.math.UnivariateRealFunction#secondDerivative(double)
False,src/test/org/apache/commons/math/analysis/QuinticFunction.java,src/test/org/apache/commons/math/analysis/QuinticFunction.java,83,ublic double secondDerivative(double x) throws MathException {
False,src/test/org/apache/commons/math/analysis/QuinticFunction.java,src/test/org/apache/commons/math/analysis/QuinticFunction.java,84,hrow new UnsupportedOperationException();
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,2," The Apache Software License, Version 1.1"
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,5, reserved.
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,7," Redistribution and use in source and binary forms, with or without"
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,8," modification, are permitted provided that the following conditions"
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,9, are met:
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,11, 1. Redistributions of source code must retain the above copyright
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,12,"    notice, this list of conditions and the following disclaimer."
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,14, 2. Redistributions in binary form must reproduce the above copyright
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,15,"    notice, this list of conditions and the following disclaimer in"
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,16,    the documentation and/or other materials provided with the
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,17,    distribution.
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,19," 3. The end-user documentation included with the redistribution, if"
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,20,"    any, must include the following acknowledgement:"
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,21,"       ""This product includes software developed by the"
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,22,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,23,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,24,    if and wherever such third-party acknowledgements normally appear.
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,26," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,27,"    Foundation"" must not be used to endorse or promote products derived"
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,28,    from this software without prior written permission. For written
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,29,"    permission, please contact apache@apache.org."
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,31," 5. Products derived from this software may not be called ""Apache"""
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,32,"    nor may ""Apache"" appear in their name without prior written"
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,33,    permission of the Apache Software Foundation.
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,38, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,39," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,46, SUCH DAMAGE.
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,49, This software consists of voluntary contributions made by many
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,50, individuals on behalf of the Apache Software Foundation.  For more
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,51," information on the Apache Software Foundation, please see"
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,52, <http://www.apache.org/>.
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,54,ackage org.apache.commons.math.analysis;
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,56,mport org.apache.commons.math.MathException;
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,58,mport junit.framework.Assert;
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,59,mport junit.framework.Test;
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,60,mport junit.framework.TestCase;
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,61,mport junit.framework.TestSuite;
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,64, Testcase for UnivariateRealSolver.
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,65, Because Brent-Dekker is guaranteed to converge in less than the default
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,66," maximum iteration count due to bisection fallback, it is quite hard to"
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,67, debug. I include measured iteration counts plus one in order to detect
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,68, regressions. On average Brent-Dekker should use 4..5 iterations for the
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,69, default absolute accuracy of 10E-8 for sinus and the quintic function around
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,70," zero, and 5..10 iterations for the other zeros."
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,72, @version $Revision: 1.6 $ $Date: 2003/10/16 15:24:28 $
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,74,ublic final class RealSolverTest extends TestCase {
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,76,ublic RealSolverTest(String name) {
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,77,uper(name);
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,80,ublic static Test suite() {
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,81,estSuite suite = new TestSuite(RealSolverTest.class);
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,82,"uite.setName(""UnivariateRealSolver Tests"");"
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,83,eturn suite;
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,86,ublic void testSinZero() throws MathException {
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,87,/ The sinus function is behaved well around the root at #pi. The second
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,88,"/ order derivative is zero, which means linar approximating methods will"
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,89,/ still converge quadratically.
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,90,nivariateRealFunction f = new SinFunction();
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,91,ouble result;
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,92,nivariateRealSolver solver = new BrentSolver(f);
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,93,/ Somewhat benign interval. The function is monotonous.
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,94,"esult = solver.solve(3, 4);"
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,95,ystem.out.println(
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,96,"Root: "" + result + "" Iterations: "" + solver.getIterationCount());"
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,97,"ssertEquals(result, Math.PI, solver.getAbsoluteAccuracy());"
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,98,/ 4 iterations on i586 JDK 1.4.1.
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,99,ssertTrue(solver.getIterationCount() <= 5);
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,100,/ Larger and somewhat less benign interval. The function is grows first.
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,101,"esult = solver.solve(1, 4);"
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,102,ystem.out.println(
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,103,"Root: "" + result + "" Iterations: "" + solver.getIterationCount());"
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,104,"ssertEquals(result, Math.PI, solver.getAbsoluteAccuracy());"
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,105,/ 5 iterations on i586 JDK 1.4.1.
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,106,ssertTrue(solver.getIterationCount() <= 6);
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,107,olver = new SecantSolver(f);
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,108,"esult = solver.solve(3, 4);"
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,109,ystem.out.println(
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,110,"Root: "" + result + "" Iterations: "" + solver.getIterationCount());"
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,111,"ssertEquals(result, Math.PI, solver.getAbsoluteAccuracy());"
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,112,/ 4 iterations on i586 JDK 1.4.1.
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,113,ssertTrue(solver.getIterationCount() <= 5);
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,114,"esult = solver.solve(1, 4);"
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,115,ystem.out.println(
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,116,"Root: "" + result + "" Iterations: "" + solver.getIterationCount());"
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,117,"ssertEquals(result, Math.PI, solver.getAbsoluteAccuracy());"
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,118,/ 5 iterations on i586 JDK 1.4.1.
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,119,ssertTrue(solver.getIterationCount() <= 6);
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,122,ublic void testQuinticZero() throws MathException {
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,123,"/ The quintic function has zeroes at 0, +-0.5 and +-1."
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,124,"/ Around the root of 0 the function is well behaved, with a second derivative"
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,125,/ of zero a 0.
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,126,"/ The other roots are less well to find, in particular the root at 1, because"
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,127,/ the function grows fast for x>1.
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,128,"/ The function has extrema (first derivative is zero) at 0.27195613 and 0.82221643,"
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,129,/ intervals containing these values are harder for the solvers.
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,130,nivariateRealFunction f = new QuinticFunction();
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,131,ouble result;
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,132,/ Brent-Dekker solver.
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,133,nivariateRealSolver solver = new BrentSolver(f);
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,134,/ Symmetric bracket around 0. Test whether solvers can handle hitting
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,135,/ the root in the first iteration.
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,136,"esult = solver.solve(-0.2, 0.2);"
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,137,ystem.out.println(
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,138,"Root: "" + result + "" Iterations: "" + solver.getIterationCount());"
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,139,"ssertEquals(result, 0, solver.getAbsoluteAccuracy());"
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,140,ssertTrue(solver.getIterationCount() <= 2);
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,141,/ 1 iterations on i586 JDK 1.4.1.
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,142,"/ Asymmetric bracket around 0, just for fun. Contains extremum."
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,143,"esult = solver.solve(-0.1, 0.3);"
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,144,ystem.out.println(
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,145,"Root: "" + result + "" Iterations: "" + solver.getIterationCount());"
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,146,"ssertEquals(result, 0, solver.getAbsoluteAccuracy());"
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,147,/ 5 iterations on i586 JDK 1.4.1.
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,148,ssertTrue(solver.getIterationCount() <= 6);
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,149,/ Large bracket around 0. Contains two extrema.
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,150,"esult = solver.solve(-0.3, 0.45);"
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,151,ystem.out.println(
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,152,"Root: "" + result + "" Iterations: "" + solver.getIterationCount());"
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,153,"ssertEquals(result, 0, solver.getAbsoluteAccuracy());"
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,154,/ 6 iterations on i586 JDK 1.4.1.
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,155,ssertTrue(solver.getIterationCount() <= 7);
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,156,"/ Benign bracket around 0.5, function is monotonous."
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,157,"esult = solver.solve(0.3, 0.7);"
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,158,ystem.out.println(
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,159,"Root: "" + result + "" Iterations: "" + solver.getIterationCount());"
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,160,"ssertEquals(result, 0.5, solver.getAbsoluteAccuracy());"
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,161,/ 6 iterations on i586 JDK 1.4.1.
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,162,ssertTrue(solver.getIterationCount() <= 7);
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,163,"/ Less benign bracket around 0.5, contains one extremum."
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,164,"esult = solver.solve(0.2, 0.6);"
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,165,ystem.out.println(
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,166,"Root: "" + result + "" Iterations: "" + solver.getIterationCount());"
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,167,"ssertEquals(result, 0.5, solver.getAbsoluteAccuracy());"
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,168,/ 6 iterations on i586 JDK 1.4.1.
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,169,ssertTrue(solver.getIterationCount() <= 7);
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,170,"/ Large, less benign bracket around 0.5, contains both extrema."
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,171,"esult = solver.solve(0.05, 0.95);"
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,172,ystem.out.println(
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,173,"Root: "" + result + "" Iterations: "" + solver.getIterationCount());"
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,174,"ssertEquals(result, 0.5, solver.getAbsoluteAccuracy());"
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,175,/ 8 iterations on i586 JDK 1.4.1.
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,176,ssertTrue(solver.getIterationCount() <= 9);
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,177,"/ Relatively benign bracket around 1, function is monotonous. Fast growth for x>1"
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,178,/ is still a problem.
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,179,"esult = solver.solve(0.85, 1.25);"
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,180,ystem.out.println(
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,181,"Root: "" + result + "" Iterations: "" + solver.getIterationCount());"
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,182,"ssertEquals(result, 1.0, solver.getAbsoluteAccuracy());"
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,183,/ 8 iterations on i586 JDK 1.4.1.
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,184,ssertTrue(solver.getIterationCount() <= 9);
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,185,/ Less benign bracket around 1 with extremum.
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,186,"esult = solver.solve(0.8, 1.2);"
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,187,ystem.out.println(
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,188,"Root: "" + result + "" Iterations: "" + solver.getIterationCount());"
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,189,"ssertEquals(result, 1.0, solver.getAbsoluteAccuracy());"
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,190,/ 8 iterations on i586 JDK 1.4.1.
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,191,ssertTrue(solver.getIterationCount() <= 9);
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,192,/ Large bracket around 1. Monotonous.
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,193,"esult = solver.solve(0.85, 1.75);"
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,194,ystem.out.println(
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,195,"Root: "" + result + "" Iterations: "" + solver.getIterationCount());"
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,196,"ssertEquals(result, 1.0, solver.getAbsoluteAccuracy());"
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,197,/ 10 iterations on i586 JDK 1.4.1.
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,198,ssertTrue(solver.getIterationCount() <= 11);
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,199,/ Large bracket around 1. Interval contains extremum.
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,200,"esult = solver.solve(0.55, 1.45);"
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,201,ystem.out.println(
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,202,"Root: "" + result + "" Iterations: "" + solver.getIterationCount());"
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,203,"ssertEquals(result, 1.0, solver.getAbsoluteAccuracy());"
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,204,/ 7 iterations on i586 JDK 1.4.1.
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,205,ssertTrue(solver.getIterationCount() <= 8);
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,206,/ Very large bracket around 1 for testing fast growth behaviour.
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,207,"esult = solver.solve(0.85, 5);"
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,208,ystem.out.println(
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,209,"Root: "" + result + "" Iterations: "" + solver.getIterationCount());"
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,210,"ssertEquals(result, 1.0, solver.getAbsoluteAccuracy());"
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,211,/ 12 iterations on i586 JDK 1.4.1.
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,212,ssertTrue(solver.getIterationCount() <= 13);
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,213,/ Secant solver.
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,214,olver = new SecantSolver(f);
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,215,"esult = solver.solve(-0.2, 0.2);"
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,216,ystem.out.println(
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,217,"Root: "" + result + "" Iterations: "" + solver.getIterationCount());"
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,218,"ssertEquals(result, 0, solver.getAbsoluteAccuracy());"
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,219,/ 1 iterations on i586 JDK 1.4.1.
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,220,ssertTrue(solver.getIterationCount() <= 2);
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,221,"esult = solver.solve(-0.1, 0.3);"
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,222,ystem.out.println(
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,223,"Root: "" + result + "" Iterations: "" + solver.getIterationCount());"
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,224,"ssertEquals(result, 0, solver.getAbsoluteAccuracy());"
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,225,/ 5 iterations on i586 JDK 1.4.1.
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,226,ssertTrue(solver.getIterationCount() <= 6);
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,227,"esult = solver.solve(-0.3, 0.45);"
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,228,ystem.out.println(
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,229,"Root: "" + result + "" Iterations: "" + solver.getIterationCount());"
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,230,"ssertEquals(result, 0, solver.getAbsoluteAccuracy());"
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,231,/ 6 iterations on i586 JDK 1.4.1.
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,232,ssertTrue(solver.getIterationCount() <= 7);
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,233,"esult = solver.solve(0.3, 0.7);"
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,234,ystem.out.println(
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,235,"Root: "" + result + "" Iterations: "" + solver.getIterationCount());"
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,236,"ssertEquals(result, 0.5, solver.getAbsoluteAccuracy());"
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,237,/ 7 iterations on i586 JDK 1.4.1.
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,238,ssertTrue(solver.getIterationCount() <= 8);
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,239,"esult = solver.solve(0.2, 0.6);"
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,240,ystem.out.println(
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,241,"Root: "" + result + "" Iterations: "" + solver.getIterationCount());"
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,242,"ssertEquals(result, 0.5, solver.getAbsoluteAccuracy());"
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,243,/ 6 iterations on i586 JDK 1.4.1.
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,244,ssertTrue(solver.getIterationCount() <= 7);
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,245,"esult = solver.solve(0.05, 0.95);"
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,246,ystem.out.println(
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,247,"Root: "" + result + "" Iterations: "" + solver.getIterationCount());"
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,248,"ssertEquals(result, 0.5, solver.getAbsoluteAccuracy());"
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,249,/ 8 iterations on i586 JDK 1.4.1.
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,250,ssertTrue(solver.getIterationCount() <= 9);
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,251,"esult = solver.solve(0.85, 1.25);"
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,252,ystem.out.println(
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,253,"Root: "" + result + "" Iterations: "" + solver.getIterationCount());"
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,254,"ssertEquals(result, 1.0, solver.getAbsoluteAccuracy());"
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,255,/ 10 iterations on i586 JDK 1.4.1.
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,256,ssertTrue(solver.getIterationCount() <= 11);
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,257,"esult = solver.solve(0.8, 1.2);"
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,258,ystem.out.println(
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,259,"Root: "" + result + "" Iterations: "" + solver.getIterationCount());"
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,260,"ssertEquals(result, 1.0, solver.getAbsoluteAccuracy());"
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,261,/ 8 iterations on i586 JDK 1.4.1.
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,262,ssertTrue(solver.getIterationCount() <= 9);
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,263,"esult = solver.solve(0.85, 1.75);"
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,264,ystem.out.println(
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,265,"Root: "" + result + "" Iterations: "" + solver.getIterationCount());"
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,266,"ssertEquals(result, 1.0, solver.getAbsoluteAccuracy());"
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,267,/ 14 iterations on i586 JDK 1.4.1.
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,268,ssertTrue(solver.getIterationCount() <= 15);
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,269,/ The followig is especially slow because the solver first has to reduce
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,270,"/ the bracket to exclude the extremum. After that, convergence is rapide."
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,271,"esult = solver.solve(0.55, 1.45);"
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,272,ystem.out.println(
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,273,"Root: "" + result + "" Iterations: "" + solver.getIterationCount());"
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,274,"ssertEquals(result, 1.0, solver.getAbsoluteAccuracy());"
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,275,/ 7 iterations on i586 JDK 1.4.1.
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,276,ssertTrue(solver.getIterationCount() <= 8);
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,277,"esult = solver.solve(0.85, 5);"
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,278,ystem.out.println(
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,279,"Root: "" + result + "" Iterations: "" + solver.getIterationCount());"
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,280,"ssertEquals(result, 1.0, solver.getAbsoluteAccuracy());"
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,281,/ 14 iterations on i586 JDK 1.4.1.
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,282,ssertTrue(solver.getIterationCount() <= 15);
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,283,/ Static solve method
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,284,"esult = UnivariateRealSolverUtils.solve(f, -0.2, 0.2);"
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,285,"ssertEquals(result, 0, solver.getAbsoluteAccuracy());"
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,286,"esult = UnivariateRealSolverUtils.solve(f, -0.1, 0.3);"
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,287,"ssert.assertEquals(result, 0, 1E-8);"
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,288,"esult = UnivariateRealSolverUtils.solve(f, -0.3, 0.45);"
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,289,"ssert.assertEquals(result, 0, 1E-6);"
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,290,"esult = UnivariateRealSolverUtils.solve(f, 0.3, 0.7);"
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,291,"ssert.assertEquals(result, 0.5, 1E-6);"
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,292,"esult = UnivariateRealSolverUtils.solve(f, 0.2, 0.6);"
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,293,"ssert.assertEquals(result, 0.5, 1E-6);"
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,294,"esult = UnivariateRealSolverUtils.solve(f, 0.05, 0.95);"
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,295,"ssert.assertEquals(result, 0.5, 1E-6);"
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,296,"esult = UnivariateRealSolverUtils.solve(f, 0.85, 1.25);"
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,297,"ssert.assertEquals(result, 1.0, 1E-6);"
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,298,"esult = UnivariateRealSolverUtils.solve(f, 0.8, 1.2);"
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,299,"ssert.assertEquals(result, 1.0, 1E-6);"
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,300,"esult = UnivariateRealSolverUtils.solve(f, 0.85, 1.75);"
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,301,"ssert.assertEquals(result, 1.0, 1E-6);"
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,302,"esult = UnivariateRealSolverUtils.solve(f, 0.55, 1.45);"
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,303,"ssert.assertEquals(result, 1.0, 1E-6);"
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,304,"esult = UnivariateRealSolverUtils.solve(f, 0.85, 5);"
False,src/test/org/apache/commons/math/analysis/RealSolverTest.java,src/test/org/apache/commons/math/analysis/RealSolverTest.java,305,"ssert.assertEquals(result, 1.0, 1E-6);"
False,src/test/org/apache/commons/math/analysis/SinFunction.java,src/test/org/apache/commons/math/analysis/SinFunction.java,2," The Apache Software License, Version 1.1"
False,src/test/org/apache/commons/math/analysis/SinFunction.java,src/test/org/apache/commons/math/analysis/SinFunction.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
False,src/test/org/apache/commons/math/analysis/SinFunction.java,src/test/org/apache/commons/math/analysis/SinFunction.java,5, reserved.
False,src/test/org/apache/commons/math/analysis/SinFunction.java,src/test/org/apache/commons/math/analysis/SinFunction.java,7," Redistribution and use in source and binary forms, with or without"
False,src/test/org/apache/commons/math/analysis/SinFunction.java,src/test/org/apache/commons/math/analysis/SinFunction.java,8," modification, are permitted provided that the following conditions"
False,src/test/org/apache/commons/math/analysis/SinFunction.java,src/test/org/apache/commons/math/analysis/SinFunction.java,9, are met:
False,src/test/org/apache/commons/math/analysis/SinFunction.java,src/test/org/apache/commons/math/analysis/SinFunction.java,11, 1. Redistributions of source code must retain the above copyright
False,src/test/org/apache/commons/math/analysis/SinFunction.java,src/test/org/apache/commons/math/analysis/SinFunction.java,12,"    notice, this list of conditions and the following disclaimer."
False,src/test/org/apache/commons/math/analysis/SinFunction.java,src/test/org/apache/commons/math/analysis/SinFunction.java,14, 2. Redistributions in binary form must reproduce the above copyright
False,src/test/org/apache/commons/math/analysis/SinFunction.java,src/test/org/apache/commons/math/analysis/SinFunction.java,15,"    notice, this list of conditions and the following disclaimer in"
False,src/test/org/apache/commons/math/analysis/SinFunction.java,src/test/org/apache/commons/math/analysis/SinFunction.java,16,    the documentation and/or other materials provided with the
False,src/test/org/apache/commons/math/analysis/SinFunction.java,src/test/org/apache/commons/math/analysis/SinFunction.java,17,    distribution.
False,src/test/org/apache/commons/math/analysis/SinFunction.java,src/test/org/apache/commons/math/analysis/SinFunction.java,19," 3. The end-user documentation included with the redistribution, if"
False,src/test/org/apache/commons/math/analysis/SinFunction.java,src/test/org/apache/commons/math/analysis/SinFunction.java,20,"    any, must include the following acknowledgement:"
False,src/test/org/apache/commons/math/analysis/SinFunction.java,src/test/org/apache/commons/math/analysis/SinFunction.java,21,"       ""This product includes software developed by the"
False,src/test/org/apache/commons/math/analysis/SinFunction.java,src/test/org/apache/commons/math/analysis/SinFunction.java,22,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/test/org/apache/commons/math/analysis/SinFunction.java,src/test/org/apache/commons/math/analysis/SinFunction.java,23,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/test/org/apache/commons/math/analysis/SinFunction.java,src/test/org/apache/commons/math/analysis/SinFunction.java,24,    if and wherever such third-party acknowledgements normally appear.
False,src/test/org/apache/commons/math/analysis/SinFunction.java,src/test/org/apache/commons/math/analysis/SinFunction.java,26," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/test/org/apache/commons/math/analysis/SinFunction.java,src/test/org/apache/commons/math/analysis/SinFunction.java,27,"    Foundation"" must not be used to endorse or promote products derived"
False,src/test/org/apache/commons/math/analysis/SinFunction.java,src/test/org/apache/commons/math/analysis/SinFunction.java,28,    from this software without prior written permission. For written
False,src/test/org/apache/commons/math/analysis/SinFunction.java,src/test/org/apache/commons/math/analysis/SinFunction.java,29,"    permission, please contact apache@apache.org."
False,src/test/org/apache/commons/math/analysis/SinFunction.java,src/test/org/apache/commons/math/analysis/SinFunction.java,31," 5. Products derived from this software may not be called ""Apache"""
False,src/test/org/apache/commons/math/analysis/SinFunction.java,src/test/org/apache/commons/math/analysis/SinFunction.java,32,"    nor may ""Apache"" appear in their name without prior written"
False,src/test/org/apache/commons/math/analysis/SinFunction.java,src/test/org/apache/commons/math/analysis/SinFunction.java,33,    permission of the Apache Software Foundation.
False,src/test/org/apache/commons/math/analysis/SinFunction.java,src/test/org/apache/commons/math/analysis/SinFunction.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/test/org/apache/commons/math/analysis/SinFunction.java,src/test/org/apache/commons/math/analysis/SinFunction.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/test/org/apache/commons/math/analysis/SinFunction.java,src/test/org/apache/commons/math/analysis/SinFunction.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/test/org/apache/commons/math/analysis/SinFunction.java,src/test/org/apache/commons/math/analysis/SinFunction.java,38, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/test/org/apache/commons/math/analysis/SinFunction.java,src/test/org/apache/commons/math/analysis/SinFunction.java,39," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/test/org/apache/commons/math/analysis/SinFunction.java,src/test/org/apache/commons/math/analysis/SinFunction.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/test/org/apache/commons/math/analysis/SinFunction.java,src/test/org/apache/commons/math/analysis/SinFunction.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/test/org/apache/commons/math/analysis/SinFunction.java,src/test/org/apache/commons/math/analysis/SinFunction.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/test/org/apache/commons/math/analysis/SinFunction.java,src/test/org/apache/commons/math/analysis/SinFunction.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/test/org/apache/commons/math/analysis/SinFunction.java,src/test/org/apache/commons/math/analysis/SinFunction.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/test/org/apache/commons/math/analysis/SinFunction.java,src/test/org/apache/commons/math/analysis/SinFunction.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/test/org/apache/commons/math/analysis/SinFunction.java,src/test/org/apache/commons/math/analysis/SinFunction.java,46, SUCH DAMAGE.
False,src/test/org/apache/commons/math/analysis/SinFunction.java,src/test/org/apache/commons/math/analysis/SinFunction.java,49, This software consists of voluntary contributions made by many
False,src/test/org/apache/commons/math/analysis/SinFunction.java,src/test/org/apache/commons/math/analysis/SinFunction.java,50, individuals on behalf of the Apache Software Foundation.  For more
False,src/test/org/apache/commons/math/analysis/SinFunction.java,src/test/org/apache/commons/math/analysis/SinFunction.java,51," information on the Apache Software Foundation, please see"
False,src/test/org/apache/commons/math/analysis/SinFunction.java,src/test/org/apache/commons/math/analysis/SinFunction.java,52, <http://www.apache.org/>.
False,src/test/org/apache/commons/math/analysis/SinFunction.java,src/test/org/apache/commons/math/analysis/SinFunction.java,54,ackage org.apache.commons.math.analysis;
False,src/test/org/apache/commons/math/analysis/SinFunction.java,src/test/org/apache/commons/math/analysis/SinFunction.java,56,mport org.apache.commons.math.MathException;
False,src/test/org/apache/commons/math/analysis/SinFunction.java,src/test/org/apache/commons/math/analysis/SinFunction.java,59, Auxillary class for testing solvers.
False,src/test/org/apache/commons/math/analysis/SinFunction.java,src/test/org/apache/commons/math/analysis/SinFunction.java,61, The function is extraordinarily well behaved around zero roots: it
False,src/test/org/apache/commons/math/analysis/SinFunction.java,src/test/org/apache/commons/math/analysis/SinFunction.java,62," has an inflection point there (second order derivative is zero),"
False,src/test/org/apache/commons/math/analysis/SinFunction.java,src/test/org/apache/commons/math/analysis/SinFunction.java,63, which means linear approximation (Regula Falsi) will converge
False,src/test/org/apache/commons/math/analysis/SinFunction.java,src/test/org/apache/commons/math/analysis/SinFunction.java,64, quadratically.
False,src/test/org/apache/commons/math/analysis/SinFunction.java,src/test/org/apache/commons/math/analysis/SinFunction.java,66, @version $Revision: 1.6 $ $Date: 2003/10/16 15:24:28 $
False,src/test/org/apache/commons/math/analysis/SinFunction.java,src/test/org/apache/commons/math/analysis/SinFunction.java,68,ublic class SinFunction implements UnivariateRealFunction {
False,src/test/org/apache/commons/math/analysis/SinFunction.java,src/test/org/apache/commons/math/analysis/SinFunction.java,70,* Evaluate sinus fuction.
False,src/test/org/apache/commons/math/analysis/SinFunction.java,src/test/org/apache/commons/math/analysis/SinFunction.java,71, @see org.apache.commons.math.UnivariateRealFunction#value(double)
False,src/test/org/apache/commons/math/analysis/SinFunction.java,src/test/org/apache/commons/math/analysis/SinFunction.java,73,ublic double value(double x) throws MathException {
False,src/test/org/apache/commons/math/analysis/SinFunction.java,src/test/org/apache/commons/math/analysis/SinFunction.java,74,eturn Math.sin(x);
False,src/test/org/apache/commons/math/analysis/SinFunction.java,src/test/org/apache/commons/math/analysis/SinFunction.java,77,* First derivative of sinus function
False,src/test/org/apache/commons/math/analysis/SinFunction.java,src/test/org/apache/commons/math/analysis/SinFunction.java,78, @see org.apache.commons.math.UnivariateRealFunction#firstDerivative(double)
False,src/test/org/apache/commons/math/analysis/SinFunction.java,src/test/org/apache/commons/math/analysis/SinFunction.java,80,ublic double firstDerivative(double x) throws MathException {
False,src/test/org/apache/commons/math/analysis/SinFunction.java,src/test/org/apache/commons/math/analysis/SinFunction.java,81,eturn Math.cos(x);
False,src/test/org/apache/commons/math/analysis/SinFunction.java,src/test/org/apache/commons/math/analysis/SinFunction.java,84,* Second derivative of sinus function.
False,src/test/org/apache/commons/math/analysis/SinFunction.java,src/test/org/apache/commons/math/analysis/SinFunction.java,85, Unsupported.
False,src/test/org/apache/commons/math/analysis/SinFunction.java,src/test/org/apache/commons/math/analysis/SinFunction.java,86, @see org.apache.commons.math.UnivariateRealFunction#secondDerivative(double)
False,src/test/org/apache/commons/math/analysis/SinFunction.java,src/test/org/apache/commons/math/analysis/SinFunction.java,88,ublic double secondDerivative(double x) throws MathException {
False,src/test/org/apache/commons/math/analysis/SinFunction.java,src/test/org/apache/commons/math/analysis/SinFunction.java,89,hrow new UnsupportedOperationException();
False,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,2," The Apache Software License, Version 1.1"
False,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
False,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,5, reserved.
False,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,7," Redistribution and use in source and binary forms, with or without"
False,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,8," modification, are permitted provided that the following conditions"
False,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,9, are met:
False,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,11, 1. Redistributions of source code must retain the above copyright
False,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,12,"    notice, this list of conditions and the following disclaimer."
False,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,14, 2. Redistributions in binary form must reproduce the above copyright
False,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,15,"    notice, this list of conditions and the following disclaimer in"
False,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,16,    the documentation and/or other materials provided with the
False,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,17,    distribution.
False,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,19," 3. The end-user documentation included with the redistribution, if"
False,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,20,"    any, must include the following acknowledgement:"
False,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,21,"       ""This product includes software developed by the"
False,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,22,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,23,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,24,    if and wherever such third-party acknowledgements normally appear.
False,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,26," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,27,"    Foundation"" must not be used to endorse or promote products derived"
False,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,28,    from this software without prior written permission. For written
False,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,29,"    permission, please contact apache@apache.org."
False,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,31," 5. Products derived from this software may not be called ""Apache"""
False,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,32,"    nor may ""Apache"" appear in their name without prior written"
False,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,33,    permission of the Apache Software Foundation.
False,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,38, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,39," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,46, SUCH DAMAGE.
False,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,49, This software consists of voluntary contributions made by many
False,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,50, individuals on behalf of the Apache Software Foundation.  For more
False,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,51," information on the Apache Software Foundation, please see"
False,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,52, <http://www.apache.org/>.
False,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,55,ackage org.apache.commons.math.analysis;
False,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,57,mport org.apache.commons.math.MathException;
False,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,59,mport junit.framework.TestCase;
False,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,62, @version $Revision: 1.3 $ $Date: 2003/10/16 15:24:28 $
False,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,64,ublic class UnivariateRealSolverUtilsTest extends TestCase {
False,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,68,ublic void testSolveNull(){
False,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,69,ry {
False,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,70,"nivariateRealSolverUtils.solve(null, 0.0, 4.0);"
False,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,71,ail();
False,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,72, catch(MathException ex){
False,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,73,"ail(""math exception should no be thrown."");"
False,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,74, catch(IllegalArgumentException ex){
False,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,75,/ success
False,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,82,ublic void testSolveSin(){
False,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,83,ry {
False,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,84,"ouble x = UnivariateRealSolverUtils.solve(new SinFunction(), 1.0,"
False,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,85,.0);
False,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,86,"ssertEquals(Math.PI, x, 1.0e-4);"
False,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,87, catch(MathException ex){
False,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,88,"ail(""math exception should no be thrown."");"
False,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,95,ublic void testSolveAccuracyNull(){
False,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,96,ry {
False,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,97,ouble accuracy = 1.0e-6;
False,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,98,"nivariateRealSolverUtils.solve(null, 0.0, 4.0, accuracy);"
False,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,99,ail();
False,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,100, catch(MathException ex){
False,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,101,"ail(""math exception should no be thrown."");"
False,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,102, catch(IllegalArgumentException ex){
False,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,103,/ success
False,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,110,ublic void testSolveAccuracySin(){
False,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,111,ry {
False,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,112,ouble accuracy = 1.0e-6;
False,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,113,"ouble x = UnivariateRealSolverUtils.solve(new SinFunction(), 1.0,"
False,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,114,".0, accuracy);"
False,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,115,"ssertEquals(Math.PI, x, accuracy);"
False,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,116, catch(MathException ex){
False,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,117,"ail(""math exception should no be thrown."");"
False,src/test/org/apache/commons/math/beans/Patient.java,src/test/org/apache/commons/math/beans/Patient.java,2," The Apache Software License, Version 1.1"
False,src/test/org/apache/commons/math/beans/Patient.java,src/test/org/apache/commons/math/beans/Patient.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
False,src/test/org/apache/commons/math/beans/Patient.java,src/test/org/apache/commons/math/beans/Patient.java,5, reserved.
False,src/test/org/apache/commons/math/beans/Patient.java,src/test/org/apache/commons/math/beans/Patient.java,7," Redistribution and use in source and binary forms, with or without"
False,src/test/org/apache/commons/math/beans/Patient.java,src/test/org/apache/commons/math/beans/Patient.java,8," modification, are permitted provided that the following conditions"
False,src/test/org/apache/commons/math/beans/Patient.java,src/test/org/apache/commons/math/beans/Patient.java,9, are met:
False,src/test/org/apache/commons/math/beans/Patient.java,src/test/org/apache/commons/math/beans/Patient.java,11, 1. Redistributions of source code must retain the above copyright
False,src/test/org/apache/commons/math/beans/Patient.java,src/test/org/apache/commons/math/beans/Patient.java,12,"    notice, this list of conditions and the following disclaimer."
False,src/test/org/apache/commons/math/beans/Patient.java,src/test/org/apache/commons/math/beans/Patient.java,14, 2. Redistributions in binary form must reproduce the above copyright
False,src/test/org/apache/commons/math/beans/Patient.java,src/test/org/apache/commons/math/beans/Patient.java,15,"    notice, this list of conditions and the following disclaimer in"
False,src/test/org/apache/commons/math/beans/Patient.java,src/test/org/apache/commons/math/beans/Patient.java,16,    the documentation and/or other materials provided with the
False,src/test/org/apache/commons/math/beans/Patient.java,src/test/org/apache/commons/math/beans/Patient.java,17,    distribution.
False,src/test/org/apache/commons/math/beans/Patient.java,src/test/org/apache/commons/math/beans/Patient.java,19," 3. The end-user documentation included with the redistribution, if"
False,src/test/org/apache/commons/math/beans/Patient.java,src/test/org/apache/commons/math/beans/Patient.java,20,"    any, must include the following acknowledgement:"
False,src/test/org/apache/commons/math/beans/Patient.java,src/test/org/apache/commons/math/beans/Patient.java,21,"       ""This product includes software developed by the"
False,src/test/org/apache/commons/math/beans/Patient.java,src/test/org/apache/commons/math/beans/Patient.java,22,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/test/org/apache/commons/math/beans/Patient.java,src/test/org/apache/commons/math/beans/Patient.java,23,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/test/org/apache/commons/math/beans/Patient.java,src/test/org/apache/commons/math/beans/Patient.java,24,    if and wherever such third-party acknowledgements normally appear.
False,src/test/org/apache/commons/math/beans/Patient.java,src/test/org/apache/commons/math/beans/Patient.java,26," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/test/org/apache/commons/math/beans/Patient.java,src/test/org/apache/commons/math/beans/Patient.java,27,"    Foundation"" must not be used to endorse or promote products derived"
False,src/test/org/apache/commons/math/beans/Patient.java,src/test/org/apache/commons/math/beans/Patient.java,28,    from this software without prior written permission. For written
False,src/test/org/apache/commons/math/beans/Patient.java,src/test/org/apache/commons/math/beans/Patient.java,29,"    permission, please contact apache@apache.org."
False,src/test/org/apache/commons/math/beans/Patient.java,src/test/org/apache/commons/math/beans/Patient.java,31," 5. Products derived from this software may not be called ""Apache"""
False,src/test/org/apache/commons/math/beans/Patient.java,src/test/org/apache/commons/math/beans/Patient.java,32,"    nor may ""Apache"" appear in their name without prior written"
False,src/test/org/apache/commons/math/beans/Patient.java,src/test/org/apache/commons/math/beans/Patient.java,33,    permission of the Apache Software Foundation.
False,src/test/org/apache/commons/math/beans/Patient.java,src/test/org/apache/commons/math/beans/Patient.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/test/org/apache/commons/math/beans/Patient.java,src/test/org/apache/commons/math/beans/Patient.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/test/org/apache/commons/math/beans/Patient.java,src/test/org/apache/commons/math/beans/Patient.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/test/org/apache/commons/math/beans/Patient.java,src/test/org/apache/commons/math/beans/Patient.java,38, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/test/org/apache/commons/math/beans/Patient.java,src/test/org/apache/commons/math/beans/Patient.java,39," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/test/org/apache/commons/math/beans/Patient.java,src/test/org/apache/commons/math/beans/Patient.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/test/org/apache/commons/math/beans/Patient.java,src/test/org/apache/commons/math/beans/Patient.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/test/org/apache/commons/math/beans/Patient.java,src/test/org/apache/commons/math/beans/Patient.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/test/org/apache/commons/math/beans/Patient.java,src/test/org/apache/commons/math/beans/Patient.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/test/org/apache/commons/math/beans/Patient.java,src/test/org/apache/commons/math/beans/Patient.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/test/org/apache/commons/math/beans/Patient.java,src/test/org/apache/commons/math/beans/Patient.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/test/org/apache/commons/math/beans/Patient.java,src/test/org/apache/commons/math/beans/Patient.java,46, SUCH DAMAGE.
False,src/test/org/apache/commons/math/beans/Patient.java,src/test/org/apache/commons/math/beans/Patient.java,49, This software consists of voluntary contributions made by many
False,src/test/org/apache/commons/math/beans/Patient.java,src/test/org/apache/commons/math/beans/Patient.java,50, individuals on behalf of the Apache Software Foundation.  For more
False,src/test/org/apache/commons/math/beans/Patient.java,src/test/org/apache/commons/math/beans/Patient.java,51," information on the Apache Software Foundation, please see"
False,src/test/org/apache/commons/math/beans/Patient.java,src/test/org/apache/commons/math/beans/Patient.java,52, <http://www.apache.org/>.
False,src/test/org/apache/commons/math/beans/Patient.java,src/test/org/apache/commons/math/beans/Patient.java,54,ackage org.apache.commons.math.beans;
False,src/test/org/apache/commons/math/beans/Patient.java,src/test/org/apache/commons/math/beans/Patient.java,57, @version $Revision: 1.4 $ $Date: 2003/10/16 15:24:33 $
False,src/test/org/apache/commons/math/beans/Patient.java,src/test/org/apache/commons/math/beans/Patient.java,59,ublic class Patient {
False,src/test/org/apache/commons/math/beans/Patient.java,src/test/org/apache/commons/math/beans/Patient.java,61,rivate VitalStats vitalStats;
False,src/test/org/apache/commons/math/beans/Patient.java,src/test/org/apache/commons/math/beans/Patient.java,62,rivate Integer age;
False,src/test/org/apache/commons/math/beans/Patient.java,src/test/org/apache/commons/math/beans/Patient.java,64,ublic Patient() {
False,src/test/org/apache/commons/math/beans/Patient.java,src/test/org/apache/commons/math/beans/Patient.java,67,"ublic Patient(VitalStats vitalStats, Integer age) {"
False,src/test/org/apache/commons/math/beans/Patient.java,src/test/org/apache/commons/math/beans/Patient.java,68,etVitalStats( vitalStats );
False,src/test/org/apache/commons/math/beans/Patient.java,src/test/org/apache/commons/math/beans/Patient.java,69,etAge( age );
False,src/test/org/apache/commons/math/beans/Patient.java,src/test/org/apache/commons/math/beans/Patient.java,72,ublic VitalStats getVitalStats() {
False,src/test/org/apache/commons/math/beans/Patient.java,src/test/org/apache/commons/math/beans/Patient.java,73,eturn( vitalStats );
False,src/test/org/apache/commons/math/beans/Patient.java,src/test/org/apache/commons/math/beans/Patient.java,76,ublic void setVitalStats(VitalStats vitalStats) {
False,src/test/org/apache/commons/math/beans/Patient.java,src/test/org/apache/commons/math/beans/Patient.java,77,his.vitalStats = vitalStats;
False,src/test/org/apache/commons/math/beans/Patient.java,src/test/org/apache/commons/math/beans/Patient.java,80,ublic Integer getAge() {
False,src/test/org/apache/commons/math/beans/Patient.java,src/test/org/apache/commons/math/beans/Patient.java,81,eturn age;
False,src/test/org/apache/commons/math/beans/Patient.java,src/test/org/apache/commons/math/beans/Patient.java,84,ublic void setAge(Integer age) {
False,src/test/org/apache/commons/math/beans/Patient.java,src/test/org/apache/commons/math/beans/Patient.java,85,his.age = age;
False,src/test/org/apache/commons/math/beans/VitalStats.java,src/test/org/apache/commons/math/beans/VitalStats.java,2," The Apache Software License, Version 1.1"
False,src/test/org/apache/commons/math/beans/VitalStats.java,src/test/org/apache/commons/math/beans/VitalStats.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
False,src/test/org/apache/commons/math/beans/VitalStats.java,src/test/org/apache/commons/math/beans/VitalStats.java,5, reserved.
False,src/test/org/apache/commons/math/beans/VitalStats.java,src/test/org/apache/commons/math/beans/VitalStats.java,7," Redistribution and use in source and binary forms, with or without"
False,src/test/org/apache/commons/math/beans/VitalStats.java,src/test/org/apache/commons/math/beans/VitalStats.java,8," modification, are permitted provided that the following conditions"
False,src/test/org/apache/commons/math/beans/VitalStats.java,src/test/org/apache/commons/math/beans/VitalStats.java,9, are met:
False,src/test/org/apache/commons/math/beans/VitalStats.java,src/test/org/apache/commons/math/beans/VitalStats.java,11, 1. Redistributions of source code must retain the above copyright
False,src/test/org/apache/commons/math/beans/VitalStats.java,src/test/org/apache/commons/math/beans/VitalStats.java,12,"    notice, this list of conditions and the following disclaimer."
False,src/test/org/apache/commons/math/beans/VitalStats.java,src/test/org/apache/commons/math/beans/VitalStats.java,14, 2. Redistributions in binary form must reproduce the above copyright
False,src/test/org/apache/commons/math/beans/VitalStats.java,src/test/org/apache/commons/math/beans/VitalStats.java,15,"    notice, this list of conditions and the following disclaimer in"
False,src/test/org/apache/commons/math/beans/VitalStats.java,src/test/org/apache/commons/math/beans/VitalStats.java,16,    the documentation and/or other materials provided with the
False,src/test/org/apache/commons/math/beans/VitalStats.java,src/test/org/apache/commons/math/beans/VitalStats.java,17,    distribution.
False,src/test/org/apache/commons/math/beans/VitalStats.java,src/test/org/apache/commons/math/beans/VitalStats.java,19," 3. The end-user documentation included with the redistribution, if"
False,src/test/org/apache/commons/math/beans/VitalStats.java,src/test/org/apache/commons/math/beans/VitalStats.java,20,"    any, must include the following acknowledgement:"
False,src/test/org/apache/commons/math/beans/VitalStats.java,src/test/org/apache/commons/math/beans/VitalStats.java,21,"       ""This product includes software developed by the"
False,src/test/org/apache/commons/math/beans/VitalStats.java,src/test/org/apache/commons/math/beans/VitalStats.java,22,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/test/org/apache/commons/math/beans/VitalStats.java,src/test/org/apache/commons/math/beans/VitalStats.java,23,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/test/org/apache/commons/math/beans/VitalStats.java,src/test/org/apache/commons/math/beans/VitalStats.java,24,    if and wherever such third-party acknowledgements normally appear.
False,src/test/org/apache/commons/math/beans/VitalStats.java,src/test/org/apache/commons/math/beans/VitalStats.java,26," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/test/org/apache/commons/math/beans/VitalStats.java,src/test/org/apache/commons/math/beans/VitalStats.java,27,"    Foundation"" must not be used to endorse or promote products derived"
False,src/test/org/apache/commons/math/beans/VitalStats.java,src/test/org/apache/commons/math/beans/VitalStats.java,28,    from this software without prior written permission. For written
False,src/test/org/apache/commons/math/beans/VitalStats.java,src/test/org/apache/commons/math/beans/VitalStats.java,29,"    permission, please contact apache@apache.org."
False,src/test/org/apache/commons/math/beans/VitalStats.java,src/test/org/apache/commons/math/beans/VitalStats.java,31," 5. Products derived from this software may not be called ""Apache"""
False,src/test/org/apache/commons/math/beans/VitalStats.java,src/test/org/apache/commons/math/beans/VitalStats.java,32,"    nor may ""Apache"" appear in their name without prior written"
False,src/test/org/apache/commons/math/beans/VitalStats.java,src/test/org/apache/commons/math/beans/VitalStats.java,33,    permission of the Apache Software Foundation.
False,src/test/org/apache/commons/math/beans/VitalStats.java,src/test/org/apache/commons/math/beans/VitalStats.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/test/org/apache/commons/math/beans/VitalStats.java,src/test/org/apache/commons/math/beans/VitalStats.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/test/org/apache/commons/math/beans/VitalStats.java,src/test/org/apache/commons/math/beans/VitalStats.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/test/org/apache/commons/math/beans/VitalStats.java,src/test/org/apache/commons/math/beans/VitalStats.java,38, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/test/org/apache/commons/math/beans/VitalStats.java,src/test/org/apache/commons/math/beans/VitalStats.java,39," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/test/org/apache/commons/math/beans/VitalStats.java,src/test/org/apache/commons/math/beans/VitalStats.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/test/org/apache/commons/math/beans/VitalStats.java,src/test/org/apache/commons/math/beans/VitalStats.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/test/org/apache/commons/math/beans/VitalStats.java,src/test/org/apache/commons/math/beans/VitalStats.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/test/org/apache/commons/math/beans/VitalStats.java,src/test/org/apache/commons/math/beans/VitalStats.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/test/org/apache/commons/math/beans/VitalStats.java,src/test/org/apache/commons/math/beans/VitalStats.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/test/org/apache/commons/math/beans/VitalStats.java,src/test/org/apache/commons/math/beans/VitalStats.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/test/org/apache/commons/math/beans/VitalStats.java,src/test/org/apache/commons/math/beans/VitalStats.java,46, SUCH DAMAGE.
False,src/test/org/apache/commons/math/beans/VitalStats.java,src/test/org/apache/commons/math/beans/VitalStats.java,49, This software consists of voluntary contributions made by many
False,src/test/org/apache/commons/math/beans/VitalStats.java,src/test/org/apache/commons/math/beans/VitalStats.java,50, individuals on behalf of the Apache Software Foundation.  For more
False,src/test/org/apache/commons/math/beans/VitalStats.java,src/test/org/apache/commons/math/beans/VitalStats.java,51," information on the Apache Software Foundation, please see"
False,src/test/org/apache/commons/math/beans/VitalStats.java,src/test/org/apache/commons/math/beans/VitalStats.java,52, <http://www.apache.org/>.
False,src/test/org/apache/commons/math/beans/VitalStats.java,src/test/org/apache/commons/math/beans/VitalStats.java,54,ackage org.apache.commons.math.beans;
False,src/test/org/apache/commons/math/beans/VitalStats.java,src/test/org/apache/commons/math/beans/VitalStats.java,57, @version $Revision: 1.4 $ $Date: 2003/10/16 15:24:33 $
False,src/test/org/apache/commons/math/beans/VitalStats.java,src/test/org/apache/commons/math/beans/VitalStats.java,59,ublic class VitalStats {
False,src/test/org/apache/commons/math/beans/VitalStats.java,src/test/org/apache/commons/math/beans/VitalStats.java,61,rivate Double heartrate;
False,src/test/org/apache/commons/math/beans/VitalStats.java,src/test/org/apache/commons/math/beans/VitalStats.java,62,rivate Double temperature;
False,src/test/org/apache/commons/math/beans/VitalStats.java,src/test/org/apache/commons/math/beans/VitalStats.java,64,ublic VitalStats() {
False,src/test/org/apache/commons/math/beans/VitalStats.java,src/test/org/apache/commons/math/beans/VitalStats.java,67,"ublic VitalStats(Double heartrate, Double temperature) {"
False,src/test/org/apache/commons/math/beans/VitalStats.java,src/test/org/apache/commons/math/beans/VitalStats.java,68,etHeartRate( heartrate );
False,src/test/org/apache/commons/math/beans/VitalStats.java,src/test/org/apache/commons/math/beans/VitalStats.java,69,etTemperature( temperature );
False,src/test/org/apache/commons/math/beans/VitalStats.java,src/test/org/apache/commons/math/beans/VitalStats.java,72,ublic Double getHeartRate() {
False,src/test/org/apache/commons/math/beans/VitalStats.java,src/test/org/apache/commons/math/beans/VitalStats.java,73,eturn heartrate;
False,src/test/org/apache/commons/math/beans/VitalStats.java,src/test/org/apache/commons/math/beans/VitalStats.java,76,ublic void setHeartRate(Double heartrate) {
False,src/test/org/apache/commons/math/beans/VitalStats.java,src/test/org/apache/commons/math/beans/VitalStats.java,77,his.heartrate = heartrate;
False,src/test/org/apache/commons/math/beans/VitalStats.java,src/test/org/apache/commons/math/beans/VitalStats.java,80,ublic Double getTemperature() {
False,src/test/org/apache/commons/math/beans/VitalStats.java,src/test/org/apache/commons/math/beans/VitalStats.java,81,eturn temperature;
False,src/test/org/apache/commons/math/beans/VitalStats.java,src/test/org/apache/commons/math/beans/VitalStats.java,84,ublic void setTemperature(Double temperature) {
False,src/test/org/apache/commons/math/beans/VitalStats.java,src/test/org/apache/commons/math/beans/VitalStats.java,85,his.temperature = temperature;
False,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,2," The Apache Software License, Version 1.1"
False,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
False,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,5, reserved.
False,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,7," Redistribution and use in source and binary forms, with or without"
False,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,8," modification, are permitted provided that the following conditions"
False,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,9, are met:
False,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,11, 1. Redistributions of source code must retain the above copyright
False,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,12,"    notice, this list of conditions and the following disclaimer."
False,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,14, 2. Redistributions in binary form must reproduce the above copyright
False,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,15,"    notice, this list of conditions and the following disclaimer in"
False,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,16,    the documentation and/or other materials provided with the
False,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,17,    distribution.
False,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,19," 3. The end-user documentation included with the redistribution,"
False,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,20,"    if any, must include the following acknowledgment:"
False,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,21,"       ""This product includes software developed by the"
False,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,22,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,23,"    Alternately, this acknowledgment may appear in the software itself,"
False,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,24,    if and wherever such third-party acknowledgments normally appear.
False,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,26," 4. The names ""Apache"" and ""Apache Software Foundation"" and"
False,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,27,"    ""Apache Geronimo"" must not be used to endorse or promote products"
False,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,28,    derived from this software without prior written permission. For
False,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,29,"    written permission, please contact apache@apache.org."
False,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,31," 5. Products derived from this software may not be called ""Apache"","
False,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,32,"    ""Apache Geronimo"", nor may ""Apache"" appear in their name, without"
False,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,33,    prior written permission of the Apache Software Foundation.
False,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,38, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,39," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,46, SUCH DAMAGE.
False,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,49, This software consists of voluntary contributions made by many
False,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,50, individuals on behalf of the Apache Software Foundation.  For more
False,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,51," information on the Apache Software Foundation, please see"
False,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,52, <http://www.apache.org/>.
False,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,57,ackage org.apache.commons.math.complex;
False,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,59,mport junit.framework.TestCase;
False,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,62, @version $Revision: 1.1 $ $Date: 2003/10/30 19:42:43 $
False,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,64,ublic class ComplexTest extends TestCase {
False,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,66,ublic void testConstructor() {
False,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,67,"omplex z = new Complex(3.0, 4.0);"
False,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,68,"ssertEquals(3.0, z.getReal(), 1.0e-5);"
False,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,69,"ssertEquals(4.0, z.getImaginary(), 1.0e-5);"
False,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,72,ublic void testConstructorNaN() {
False,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,73,"omplex z = new Complex(3.0, Double.NaN);"
False,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,74,ssertTrue(z.isNaN());
False,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,76," = new Complex(Double.NaN, 4.0);"
False,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,77,ssertTrue(z.isNaN());
False,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,79," = new Complex(3.0, 4.0);"
False,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,80,ssertFalse(z.isNaN());
False,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,83,ublic void testAbs() {
False,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,84,"omplex z = new Complex(3.0, 4.0);"
False,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,85,"ssertEquals(5.0, z.abs(), 1.0e-5);"
False,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,88,ublic void testAdd() {
False,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,89,"omplex x = new Complex(3.0, 4.0);"
False,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,90,"omplex y = new Complex(5.0, 6.0);"
False,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,91,omplex z = x.add(y);
False,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,92,"ssertEquals(8.0, z.getReal(), 1.0e-5);"
False,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,93,"ssertEquals(10.0, z.getImaginary(), 1.0e-5);"
False,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,96,ublic void testAddNaN() {
False,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,97,"omplex x = new Complex(3.0, 4.0);"
False,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,98,omplex z = x.add(Complex.NaN);
False,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,99,ssertTrue(z.isNaN());
False,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,102,ublic void testConjugate() {
False,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,103,"omplex x = new Complex(3.0, 4.0);"
False,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,104,omplex z = x.conjugate();
False,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,105,"ssertEquals(3.0, z.getReal(), 1.0e-5);"
False,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,106,"ssertEquals(-4.0, z.getImaginary(), 1.0e-5);"
False,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,109,ublic void testConjugateNaN() {
False,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,110,omplex z = Complex.NaN.conjugate();
False,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,111,ssertTrue(z.isNaN());
False,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,114,ublic void testDivide() {
False,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,115,"omplex x = new Complex(3.0, 4.0);"
False,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,116,"omplex y = new Complex(5.0, 6.0);"
False,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,117,omplex z = x.divide(y);
False,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,118,"ssertEquals(39.0 / 61.0, z.getReal(), 1.0e-5);"
False,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,119,"ssertEquals(2.0 / 61.0, z.getImaginary(), 1.0e-5);"
False,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,122,ublic void testDivideNaN() {
False,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,123,"omplex x = new Complex(3.0, 4.0);"
False,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,124,omplex z = x.divide(Complex.NaN);
False,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,125,ssertTrue(z.isNaN());
False,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,128,ublic void testMultiply() {
False,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,129,"omplex x = new Complex(3.0, 4.0);"
False,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,130,"omplex y = new Complex(5.0, 6.0);"
False,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,131,omplex z = x.multiply(y);
False,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,132,"ssertEquals(-9.0, z.getReal(), 1.0e-5);"
False,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,133,"ssertEquals(38.0, z.getImaginary(), 1.0e-5);"
False,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,136,ublic void testMultiplyNaN() {
False,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,137,"omplex x = new Complex(3.0, 4.0);"
False,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,138,omplex z = x.multiply(Complex.NaN);
False,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,139,ssertTrue(z.isNaN());
False,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,142,ublic void testNegate() {
False,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,143,"omplex x = new Complex(3.0, 4.0);"
False,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,144,omplex z = x.negate();
False,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,145,"ssertEquals(-3.0, z.getReal(), 1.0e-5);"
False,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,146,"ssertEquals(-4.0, z.getImaginary(), 1.0e-5);"
False,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,149,ublic void testNegateNaN() {
False,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,150,omplex z = Complex.NaN.negate();
False,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,151,ssertTrue(z.isNaN());
False,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,154,ublic void testSubtract() {
False,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,155,"omplex x = new Complex(3.0, 4.0);"
False,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,156,"omplex y = new Complex(5.0, 6.0);"
False,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,157,omplex z = x.subtract(y);
False,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,158,"ssertEquals(-2.0, z.getReal(), 1.0e-5);"
False,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,159,"ssertEquals(-2.0, z.getImaginary(), 1.0e-5);"
False,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,162,ublic void testSubtractNaN() {
False,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,163,"omplex x = new Complex(3.0, 4.0);"
False,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,164,omplex z = x.subtract(Complex.NaN);
False,src/test/org/apache/commons/math/complex/ComplexTest.java,src/test/org/apache/commons/math/complex/ComplexTest.java,165,ssertTrue(z.isNaN());
False,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,2," The Apache Software License, Version 1.1"
False,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
False,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,5, reserved.
False,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,7," Redistribution and use in source and binary forms, with or without"
False,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,8," modification, are permitted provided that the following conditions"
False,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,9, are met:
False,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,11, 1. Redistributions of source code must retain the above copyright
False,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,12,"    notice, this list of conditions and the following disclaimer."
False,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,14, 2. Redistributions in binary form must reproduce the above copyright
False,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,15,"    notice, this list of conditions and the following disclaimer in"
False,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,16,    the documentation and/or other materials provided with the
False,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,17,    distribution.
False,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,19," 3. The end-user documentation included with the redistribution, if"
False,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,20,"    any, must include the following acknowledgement:"
False,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,21,"       ""This product includes software developed by the"
False,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,22,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,23,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,24,    if and wherever such third-party acknowledgements normally appear.
False,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,26," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,27,"    Foundation"" must not be used to endorse or promote products derived"
False,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,28,    from this software without prior written permission. For written
False,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,29,"    permission, please contact apache@apache.org."
False,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,31," 5. Products derived from this software may not be called ""Apache"""
False,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,32,"    nor may ""Apache"" appear in their name without prior written"
False,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,33,    permission of the Apache Software Foundation.
False,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,38, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,39," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,46, SUCH DAMAGE.
False,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,49, This software consists of voluntary contributions made by many
False,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,50, individuals on behalf of the Apache Software Foundation.  For more
False,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,51," information on the Apache Software Foundation, please see"
False,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,52, <http://www.apache.org/>.
False,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,54,ackage org.apache.commons.math.stat.distribution;
False,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,56,mport junit.framework.TestCase;
False,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,59, @version $Revision: 1.5 $ $Date: 2003/10/16 15:24:31 $
False,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,61,ublic class BinomialDistributionTest extends TestCase {
False,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,62,rivate BinomialDistribution b;
False,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,65, Constructor for ChiSquareDistributionTest.
False,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,66, @param name
False,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,68,ublic BinomialDistributionTest(String name) {
False,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,69,uper(name);
False,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,73, @see TestCase#setUp()
False,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,75,rotected void setUp() throws Exception {
False,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,76,uper.setUp();
False,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,77," = DistributionFactory.newInstance().createBinomialDistribution(10, 0.70);"
False,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,81, @see TestCase#tearDown()
False,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,83,rotected void tearDown() throws Exception {
False,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,84, = null;
False,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,85,uper.tearDown();
False,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,88,ublic void testInverseCummulativeProbability001() {
False,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,89,"estValue(1, .001);"
False,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,92,ublic void testInverseCumulativeProbability010() {
False,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,93,"estValue(2, .010);"
False,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,96,ublic void testInverseCumulativeProbability025() {
False,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,97,"estValue(3, .025);"
False,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,100,ublic void testInverseCumulativeProbability050() {
False,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,101,"estValue(4, .050);"
False,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,104,ublic void testInverseCumulativeProbability100() {
False,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,105,"estValue(4, .100);"
False,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,108,ublic void testInverseCummulativeProbability999() {
False,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,109,"estValue(9, .999);"
False,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,112,ublic void testInverseCumulativeProbability990() {
False,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,113,"estValue(9, .990);"
False,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,116,ublic void testInverseCumulativeProbability975() {
False,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,117,"estValue(9, .975);"
False,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,120,ublic void testInverseCumulativeProbability950() {
False,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,121,"estValue(8, .950);"
False,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,124,ublic void testInverseCumulativeProbability900() {
False,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,125,"estValue(8, .900);"
False,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,128,ublic void testCummulativeProbability1() {
False,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,129,"estProbability(1, .00014);"
False,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,132,ublic void testCumulativeProbability2() {
False,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,133,"estProbability(2, .00159);"
False,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,136,ublic void testCumulativeProbability3() {
False,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,137,"estProbability(3, .01059);"
False,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,140,ublic void testCumulativeProbability4() {
False,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,141,"estProbability(4, .04735);"
False,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,144,ublic void testCumulativeProbability9() {
False,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,145,"estProbability(9, .97175);"
False,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,148,ublic void testCummulativeProbability8() {
False,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,149,"estProbability(8, .85069);"
False,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,152,"rivate void testProbability(int x, double expected){"
False,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,153,ouble actual = b.cummulativeProbability(x);
False,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,154,"ssertEquals(expected, actual, 10e-4);"
False,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,157,"rivate void testValue(int expected, double p){"
False,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,158,nt actual = b.inverseCummulativeProbability(p);
False,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,159,"ssertEquals(expected, actual);"
False,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,160,ssertTrue(b.cummulativeProbability(actual) <= p);
False,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,161,ssertTrue(b.cummulativeProbability(actual + 1) >= p);
False,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,2," The Apache Software License, Version 1.1"
False,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
False,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,5, reserved.
False,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,7," Redistribution and use in source and binary forms, with or without"
False,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,8," modification, are permitted provided that the following conditions"
False,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,9, are met:
False,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,11, 1. Redistributions of source code must retain the above copyright
False,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,12,"    notice, this list of conditions and the following disclaimer."
False,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,14, 2. Redistributions in binary form must reproduce the above copyright
False,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,15,"    notice, this list of conditions and the following disclaimer in"
False,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,16,    the documentation and/or other materials provided with the
False,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,17,    distribution.
False,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,19," 3. The end-user documentation included with the redistribution, if"
False,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,20,"    any, must include the following acknowledgement:"
False,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,21,"       ""This product includes software developed by the"
False,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,22,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,23,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,24,    if and wherever such third-party acknowledgements normally appear.
False,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,26," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,27,"    Foundation"" must not be used to endorse or promote products derived"
False,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,28,    from this software without prior written permission. For written
False,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,29,"    permission, please contact apache@apache.org."
False,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,31," 5. Products derived from this software may not be called ""Apache"""
False,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,32,"    nor may ""Apache"" appear in their name without prior written"
False,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,33,    permission of the Apache Software Foundation.
False,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,38, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,39," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,46, SUCH DAMAGE.
False,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,49, This software consists of voluntary contributions made by many
False,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,50, individuals on behalf of the Apache Software Foundation.  For more
False,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,51," information on the Apache Software Foundation, please see"
False,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,52, <http://www.apache.org/>.
False,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,55,ackage org.apache.commons.math.stat.distribution;
False,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,57,mport junit.framework.TestCase;
False,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,60, @version $Revision: 1.6 $ $Date: 2003/10/16 15:24:31 $
False,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,62,ublic class ChiSquareDistributionTest extends TestCase {
False,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,63,rivate ChiSquaredDistribution chiSquare;
False,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,66, Constructor for ChiSquareDistributionTest.
False,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,67, @param name
False,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,69,ublic ChiSquareDistributionTest(String name) {
False,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,70,uper(name);
False,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,74, @see TestCase#setUp()
False,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,76,rotected void setUp() throws Exception {
False,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,77,uper.setUp();
False,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,78,hiSquare = DistributionFactory.newInstance().createChiSquareDistribution(5.0);
False,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,82, @see TestCase#tearDown()
False,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,84,rotected void tearDown() throws Exception {
False,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,85,hiSquare = null;
False,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,86,uper.tearDown();
False,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,89,ublic void testLowerTailProbability(){
False,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,90,"estProbability( .210, .001);"
False,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,91,"estProbability( .554, .010);"
False,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,92,"estProbability( .831, .025);"
False,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,93,"estProbability(1.145, .050);"
False,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,94,"estProbability(1.610, .100);"
False,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,97,ublic void testUpperTailProbability(){
False,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,98,"estProbability(20.515, .999);"
False,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,99,"estProbability(15.086, .990);"
False,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,100,"estProbability(12.833, .975);"
False,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,101,"estProbability(11.070, .950);"
False,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,102,"estProbability( 9.236, .900);"
False,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,105,ublic void testLowerTailValues(){
False,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,106,"estValue(.001,  .210);"
False,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,107,"estValue(.010,  .554);"
False,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,108,"estValue(.025,  .831);"
False,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,109,"estValue(.050, 1.145);"
False,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,110,"estValue(.100, 1.610);"
False,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,113,ublic void testUpperTailValues(){
False,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,114,"estValue(.999, 20.515);"
False,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,115,"estValue(.990, 15.086);"
False,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,116,"estValue(.975, 12.833);"
False,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,117,"estValue(.950, 11.070);"
False,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,118,"estValue(.900,  9.236);"
False,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,121,"rivate void testProbability(double x, double expected){"
False,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,122,ouble actual = chiSquare.cummulativeProbability(x);
False,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,123,"ssertEquals(""probability for "" + x, expected, actual, 10e-4);"
False,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,126,"rivate void testValue(double p, double expected){"
False,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,127,ouble actual = chiSquare.inverseCummulativeProbability(p);
False,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,128,"ssertEquals(""value for "" + p, expected, actual, 10e-4);"
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,2," The Apache Software License, Version 1.1"
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,5, reserved.
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,7," Redistribution and use in source and binary forms, with or without"
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,8," modification, are permitted provided that the following conditions"
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,9, are met:
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,11, 1. Redistributions of source code must retain the above copyright
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,12,"    notice, this list of conditions and the following disclaimer."
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,14, 2. Redistributions in binary form must reproduce the above copyright
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,15,"    notice, this list of conditions and the following disclaimer in"
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,16,    the documentation and/or other materials provided with the
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,17,    distribution.
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,19," 3. The end-user documentation included with the redistribution, if"
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,20,"    any, must include the following acknowledgement:"
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,21,"       ""This product includes software developed by the"
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,22,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,23,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,24,    if and wherever such third-party acknowledgements normally appear.
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,26," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,27,"    Foundation"" must not be used to endorse or promote products derived"
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,28,    from this software without prior written permission. For written
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,29,"    permission, please contact apache@apache.org."
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,31," 5. Products derived from this software may not be called ""Apache"""
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,32,"    nor may ""Apache"" appear in their name without prior written"
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,33,    permission of the Apache Software Foundation.
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,38, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,39," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,46, SUCH DAMAGE.
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,49, This software consists of voluntary contributions made by many
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,50, individuals on behalf of the Apache Software Foundation.  For more
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,51," information on the Apache Software Foundation, please see"
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,52, <http://www.apache.org/>.
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,55,ackage org.apache.commons.math.stat.distribution;
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,57,mport junit.framework.TestCase;
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,60, @version $Revision: 1.11 $ $Date: 2003/10/16 15:24:31 $
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,62,ublic class DistributionFactoryImplTest extends TestCase {
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,64,rivate DistributionFactory factory;
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,67, Constructor for DistributionFactoryImplTest.
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,68, @param name
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,70,ublic DistributionFactoryImplTest(String name) {
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,71,uper(name);
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,74, @throws java.lang.Exception
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,76,rotected void setUp() throws Exception {
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,77,uper.setUp();
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,78,actory = new DistributionFactoryImpl();
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,82, @throws java.lang.Exception
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,84,rotected void tearDown() throws Exception {
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,85,actory = null;
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,86,uper.tearDown();
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,89,ublic void testCreateChiSquareDistributionNegative(){
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,90,ry {
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,91,actory.createChiSquareDistribution(-1.0);
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,92,"ail(""negative degrees of freedom.  IllegalArgumentException expected"");"
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,93, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,98,ublic void testCreateChiSquareDistributionZero(){
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,99,ry {
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,100,actory.createChiSquareDistribution(0.0);
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,101,"ail(""zero degrees of freedom.  IllegalArgumentException expected"");"
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,102, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,107,ublic void testCreateChiSquareDistributionPositive(){
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,108,ry {
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,109,actory.createChiSquareDistribution(1.0);
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,110, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,111,"ail(""positive degrees of freedom.  IllegalArgumentException is not expected"");"
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,115,ublic void testCreateFDistributionNegativePositive(){
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,116,ry {
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,117,"actory.createFDistribution(-1.0, 1.0);"
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,118,"ail(""negative degrees of freedom.  IllegalArgumentException expected"");"
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,119, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,124,ublic void testCreateFDistributionZeroPositive(){
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,125,ry {
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,126,"actory.createFDistribution(0.0, 1.0);"
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,127,"ail(""zero degrees of freedom.  IllegalArgumentException expected"");"
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,128, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,133,ublic void testCreateFDistributionPositiveNegative(){
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,134,ry {
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,135,"actory.createFDistribution(1.0, -1.0);"
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,136,"ail(""negative degrees of freedom.  IllegalArgumentException expected"");"
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,137, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,142,ublic void testCreateFDistributionPositiveZero(){
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,143,ry {
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,144,"actory.createFDistribution(1.0, 0.0);"
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,145,"ail(""zero degrees of freedom.  IllegalArgumentException expected"");"
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,146, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,151,ublic void testCreateFDistributionPositivePositive(){
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,152,ry {
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,153,"actory.createFDistribution(1.0, 1.0);"
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,154, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,155,"ail(""positive degrees of freedom.  IllegalArgumentException is not expected"");"
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,159,ublic void testCreateExponentialDistributionNegative(){
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,160,ry {
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,161,actory.createExponentialDistribution(-1.0);
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,162,"ail(""negative mean.  IllegalArgumentException expected"");"
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,163, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,168,ublic void testCreateExponentialDistributionZero(){
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,169,ry {
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,170,actory.createExponentialDistribution(0.0);
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,171,"ail(""zero mean.  IllegalArgumentException expected"");"
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,172, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,177,ublic void testCreateExponentialDistributionPositive(){
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,178,ry {
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,179,actory.createExponentialDistribution(1.0);
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,180, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,181,"ail(""positive mean.  IllegalArgumentException is not expected"");"
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,185,ublic void testCreateGammaDistributionNegativePositive(){
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,186,ry {
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,187,"actory.createGammaDistribution(-1.0, 1.0);"
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,188,"ail(""negative alpha.  IllegalArgumentException expected"");"
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,189, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,194,ublic void testCreateGammaDistributionZeroPositive(){
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,195,ry {
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,196,"actory.createGammaDistribution(0.0, 1.0);"
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,197,"ail(""zero alpha.  IllegalArgumentException expected"");"
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,198, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,203,ublic void testCreateGammaDistributionPositiveNegative(){
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,204,ry {
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,205,"actory.createGammaDistribution(1.0, -1.0);"
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,206,"ail(""negative beta.  IllegalArgumentException expected"");"
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,207, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,212,ublic void testCreateGammaDistributionPositiveZero(){
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,213,ry {
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,214,"actory.createGammaDistribution(1.0, 0.0);"
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,215,"ail(""zero beta.  IllegalArgumentException expected"");"
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,216, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,221,ublic void testCreateGammaDistributionPositivePositive(){
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,222,ry {
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,223,"actory.createGammaDistribution(1.0, 1.0);"
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,224, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,225,"ail(""positive alpah and beta.  IllegalArgumentException is not expected"");"
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,229,ublic void testCreateTDistributionNegative(){
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,230,ry {
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,231,actory.createTDistribution(-1.0);
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,232,"ail(""negative degrees of freedom.  IllegalArgumentException expected"");"
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,233, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,238,ublic void testCreateTDistributionZero(){
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,239,ry {
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,240,actory.createTDistribution(0.0);
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,241,"ail(""zero degrees of freedom.  IllegalArgumentException expected"");"
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,242, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,247,ublic void testCreateTDistributionPositive(){
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,248,ry {
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,249,actory.createTDistribution(1.0);
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,250, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,251,"ail(""positive degrees of freedom.  IllegalArgumentException is not expected"");"
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,255,ublic void testBinomialDistributionNegativePositive(){
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,256,ry {
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,257,"actory.createBinomialDistribution(-1, 0.5);"
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,258,"ail(""negative number of trials.  IllegalArgumentException expected"");"
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,259, catch (IllegalArgumentException ex ) {
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,263,ublic void testBinomialDistributionZeroPositive(){
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,264,ry {
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,265,"actory.createBinomialDistribution(0, 0.5);"
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,266, catch (IllegalArgumentException ex ) {
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,267,"ail(""zero number of trials.  IllegalArgumentException is not expected"");"
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,271,ublic void testBinomialDistributionPositivePositive(){
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,272,ry {
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,273,"actory.createBinomialDistribution(10, 0.5);"
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,274, catch (IllegalArgumentException ex ) {
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,275,"ail(""positive number of trials.  IllegalArgumentException is not expected"");"
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,279,ublic void testBinomialDistributionPositiveNegative(){
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,280,ry {
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,281,"actory.createBinomialDistribution(10, -0.5);"
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,282,"ail(""negative probability of success.  IllegalArgumentException expected"");"
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,283, catch (IllegalArgumentException ex ) {
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,287,ublic void testBinomialDistributionPositiveZero(){
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,288,ry {
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,289,"actory.createBinomialDistribution(10, 0.0);"
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,290, catch (IllegalArgumentException ex ) {
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,291,"ail(""zero probability of success.  IllegalArgumentException is not expected"");"
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,295,ublic void testBinomialDistributionPositiveOne(){
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,296,ry {
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,297,"actory.createBinomialDistribution(10, 1.0);"
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,298, catch (IllegalArgumentException ex ) {
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,299,"ail(""valid probability of success.  IllegalArgumentException is not expected"");"
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,303,ublic void testBinomialDistributionPositiveTwo(){
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,304,ry {
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,305,"actory.createBinomialDistribution(10, 2.0);"
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,306,"ail(""high probability of success.  IllegalArgumentException expected"");"
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,307, catch (IllegalArgumentException ex ) {
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,311,ublic void testHypergeometricDistributionNegativePositivePositive(){
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,312,ry {
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,313,"actory.createHypergeometricDistribution(-1, 10, 10);"
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,314,"ail(""negative population size.  IllegalArgumentException expected"");"
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,315, catch(IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,319,ublic void testHypergeometricDistributionZeroPositivePositive(){
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,320,ry {
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,321,"actory.createHypergeometricDistribution(0, 10, 10);"
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,322,"ail(""zero population size.  IllegalArgumentException expected"");"
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,323, catch(IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,327,ublic void testHypergeometricDistributionPositiveNegativePositive(){
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,328,ry {
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,329,"actory.createHypergeometricDistribution(20, -1, 10);"
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,330,"ail(""negative number of successes.  IllegalArgumentException expected"");"
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,331, catch(IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,335,ublic void testHypergeometricDistributionPositiveZeroPositive(){
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,336,ry {
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,337,"actory.createHypergeometricDistribution(20, 0, 10);"
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,338, catch(IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,339,"ail(""valid number of successes.  IllegalArgumentException is not expected"");"
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,343,ublic void testHypergeometricDistributionPositivePositiveNegative(){
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,344,ry {
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,345,"actory.createHypergeometricDistribution(20, 10, -1);"
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,346,"ail(""negative sample size.  IllegalArgumentException expected"");"
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,347, catch(IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,351,ublic void testHypergeometricDistributionPositivePositiveZero(){
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,352,ry {
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,353,"actory.createHypergeometricDistribution(20, 10, 0);"
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,354, catch(IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,355,"ail(""valid sample size.  IllegalArgumentException is not expected"");"
False,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,2," The Apache Software License, Version 1.1"
False,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
False,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,5, reserved.
False,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,7," Redistribution and use in source and binary forms, with or without"
False,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,8," modification, are permitted provided that the following conditions"
False,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,9, are met:
False,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,11, 1. Redistributions of source code must retain the above copyright
False,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,12,"    notice, this list of conditions and the following disclaimer."
False,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,14, 2. Redistributions in binary form must reproduce the above copyright
False,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,15,"    notice, this list of conditions and the following disclaimer in"
False,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,16,    the documentation and/or other materials provided with the
False,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,17,    distribution.
False,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,19," 3. The end-user documentation included with the redistribution, if"
False,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,20,"    any, must include the following acknowledgement:"
False,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,21,"       ""This product includes software developed by the"
False,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,22,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,23,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,24,    if and wherever such third-party acknowledgements normally appear.
False,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,26," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,27,"    Foundation"" must not be used to endorse or promote products derived"
False,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,28,    from this software without prior written permission. For written
False,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,29,"    permission, please contact apache@apache.org."
False,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,31," 5. Products derived from this software may not be called ""Apache"""
False,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,32,"    nor may ""Apache"" appear in their name without prior written"
False,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,33,    permission of the Apache Software Foundation.
False,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,38, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,39," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,46, SUCH DAMAGE.
False,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,49, This software consists of voluntary contributions made by many
False,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,50, individuals on behalf of the Apache Software Foundation.  For more
False,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,51," information on the Apache Software Foundation, please see"
False,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,52, <http://www.apache.org/>.
False,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,54,ackage org.apache.commons.math.stat.distribution;
False,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,56,mport org.apache.commons.math.TestUtils;
False,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,58,mport junit.framework.TestCase;
False,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,61, @version $Revision: 1.5 $ $Date: 2003/10/16 15:24:31 $
False,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,63,ublic class ExponentialDistributionTest extends TestCase {
False,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,64,rivate ExponentialDistribution exp;
False,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,67, Constructor for ChiSquareDistributionTest.
False,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,68, @param name
False,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,70,ublic ExponentialDistributionTest(String name) {
False,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,71,uper(name);
False,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,75, @see TestCase#setUp()
False,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,77,rotected void setUp() throws Exception {
False,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,78,uper.setUp();
False,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,79,xp = DistributionFactory.newInstance().createExponentialDistribution(5.0);
False,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,83, @see TestCase#tearDown()
False,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,85,rotected void tearDown() throws Exception {
False,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,86,xp = null;
False,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,87,uper.tearDown();
False,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,90,ublic void testInverseCummulativeProbability001() {
False,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,91,"estValue(.005003, .001);"
False,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,94,ublic void testInverseCummulativeProbability010() {
False,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,95,"estValue(0.050252, .010);"
False,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,98,ublic void testInverseCummulativeProbability025() {
False,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,99,"estValue(0.126589, .025);"
False,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,102,ublic void testInverseCummulativeProbability050() {
False,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,103,"estValue(0.256566, .050);"
False,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,106,ublic void testInverseCummulativeProbability100() {
False,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,107,"estValue(0.526803, .100);"
False,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,110,ublic void testInverseCummulativeProbability999() {
False,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,111,"estValue(34.5388, .999);"
False,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,114,ublic void testInverseCummulativeProbability990() {
False,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,115,"estValue(23.0259, .990);"
False,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,118,ublic void testInverseCummulativeProbability975() {
False,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,119,"estValue(18.4444, .975);"
False,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,122,ublic void testInverseCummulativeProbability950() {
False,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,123,"estValue(14.9787, .950);"
False,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,126,ublic void testInverseCummulativeProbability900() {
False,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,127,"estValue(11.5129, .900);"
False,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,130,ublic void testCummulativeProbability001() {
False,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,131,"estProbability(0.005003, .001);"
False,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,134,ublic void testCummulativeProbability010() {
False,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,135,"estProbability(0.050252, .010);"
False,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,138,ublic void testCummulativeProbability025() {
False,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,139,"estProbability(0.126589, .025);"
False,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,142,ublic void testCummulativeProbability050() {
False,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,143,"estProbability(0.256566, .050);"
False,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,146,ublic void testCummulativeProbability100() {
False,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,147,"estProbability(0.526803, .100);"
False,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,150,ublic void testCummulativeProbability999() {
False,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,151,"estProbability(34.5388, .999);"
False,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,154,ublic void testCummulativeProbability990() {
False,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,155,"estProbability(23.0259, .990);"
False,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,158,ublic void testCummulativeProbability975() {
False,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,159,"estProbability(18.4444, .975);"
False,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,162,ublic void testCummulativeProbability950() {
False,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,163,"estProbability(14.9787, .950);"
False,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,166,ublic void testCummulativeProbability900() {
False,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,167,"estProbability(11.5129, .900);"
False,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,170,ublic void testCummulativeProbabilityNegative() {
False,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,171,"estProbability(-1.0, 0.0);"
False,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,174,ublic void testCummulativeProbabilityZero() {
False,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,175,"estProbability(0.0, 0.0);"
False,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,178,ublic void testInverseCummulativeProbabilityNegative() {
False,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,179,"estValue(Double.NaN, -1.0);"
False,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,182,ublic void testInverseCummulativeProbabilityZero() {
False,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,183,"estValue(0.0, 0.0);"
False,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,186,ublic void testInverseCummulativeProbabilityOne() {
False,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,187,"estValue(Double.POSITIVE_INFINITY, 1.0);"
False,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,190,ublic void testInverseCummulativeProbabilityPositive() {
False,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,191,"estValue(Double.NaN, 2.0);"
False,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,194,ublic void testCummulativeProbability2() {
False,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,195,"ouble actual = exp.cummulativeProbability(0.25, 0.75);"
False,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,196,"ssertEquals(0.0905214, actual, 10e-4);"
False,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,199,"rivate void testProbability(double x, double expected){"
False,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,200,ouble actual = exp.cummulativeProbability(x);
False,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,201,"estUtils.assertEquals(expected, actual, 10e-4);"
False,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,204,"rivate void testValue(double expected, double p){"
False,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,205,ouble actual = exp.inverseCummulativeProbability(p);
False,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,206,"estUtils.assertEquals(expected, actual, 10e-4);"
False,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,2," The Apache Software License, Version 1.1"
False,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
False,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,5, reserved.
False,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,7," Redistribution and use in source and binary forms, with or without"
False,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,8," modification, are permitted provided that the following conditions"
False,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,9, are met:
False,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,11, 1. Redistributions of source code must retain the above copyright
False,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,12,"    notice, this list of conditions and the following disclaimer."
False,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,14, 2. Redistributions in binary form must reproduce the above copyright
False,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,15,"    notice, this list of conditions and the following disclaimer in"
False,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,16,    the documentation and/or other materials provided with the
False,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,17,    distribution.
False,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,19," 3. The end-user documentation included with the redistribution, if"
False,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,20,"    any, must include the following acknowledgement:"
False,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,21,"       ""This product includes software developed by the"
False,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,22,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,23,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,24,    if and wherever such third-party acknowledgements normally appear.
False,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,26," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,27,"    Foundation"" must not be used to endorse or promote products derived"
False,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,28,    from this software without prior written permission. For written
False,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,29,"    permission, please contact apache@apache.org."
False,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,31," 5. Products derived from this software may not be called ""Apache"""
False,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,32,"    nor may ""Apache"" appear in their name without prior written"
False,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,33,    permission of the Apache Software Foundation.
False,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,38, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,39," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,46, SUCH DAMAGE.
False,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,49, This software consists of voluntary contributions made by many
False,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,50, individuals on behalf of the Apache Software Foundation.  For more
False,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,51," information on the Apache Software Foundation, please see"
False,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,52, <http://www.apache.org/>.
False,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,54,ackage org.apache.commons.math.stat.distribution;
False,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,56,mport junit.framework.TestCase;
False,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,59, @version $Revision: 1.4 $ $Date: 2003/10/16 15:24:31 $
False,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,61,ublic class FDistributionTest extends TestCase {
False,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,62,rivate FDistribution f;
False,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,65, Constructor for ChiSquareDistributionTest.
False,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,66, @param name
False,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,68,ublic FDistributionTest(String name) {
False,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,69,uper(name);
False,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,73, @see TestCase#setUp()
False,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,75,rotected void setUp() throws Exception {
False,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,76,uper.setUp();
False,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,77," = DistributionFactory.newInstance().createFDistribution(5.0, 6.0);"
False,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,81, @see TestCase#tearDown()
False,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,83,rotected void tearDown() throws Exception {
False,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,84, = null;
False,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,85,uper.tearDown();
False,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,88,ublic void testLowerTailProbability(){
False,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,89,"estProbability(1.0 / 10.67, .010);"
False,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,90,"estProbability(1.0 /  6.98, .025);"
False,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,91,"estProbability(1.0 /  4.95, .050);"
False,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,92,"estProbability(1.0 /  3.40, .100);"
False,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,95,ublic void testUpperTailProbability(){
False,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,96,"estProbability(8.75, .990);"
False,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,97,"estProbability(5.99, .975);"
False,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,98,"estProbability(4.39, .950);"
False,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,99,"estProbability(3.11, .900);"
False,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,102,ublic void testLowerTailValues(){
False,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,103,"estValue(1.0 / 10.67, .010);"
False,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,104,"estValue(1.0 /  6.98, .025);"
False,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,105,"estValue(1.0 /  4.95, .050);"
False,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,106,"estValue(1.0 /  3.40, .100);"
False,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,109,ublic void testUpperTailValues(){
False,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,110,"estValue(8.75, .990);"
False,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,111,"estValue(5.99, .975);"
False,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,112,"estValue(4.39, .950);"
False,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,113,"estValue(3.11, .900);"
False,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,116,"rivate void testProbability(double x, double expected){"
False,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,117,ouble actual = f.cummulativeProbability(x);
False,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,118,"ssertEquals(""probability for "" + x, expected, actual, 1e-3);"
False,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,121,"rivate void testValue(double expected, double p){"
False,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,122,ouble actual = f.inverseCummulativeProbability(p);
False,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,123,"ssertEquals(""value for "" + p, expected, actual, 1e-2);"
False,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,2," The Apache Software License, Version 1.1"
False,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
False,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,5, reserved.
False,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,7," Redistribution and use in source and binary forms, with or without"
False,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,8," modification, are permitted provided that the following conditions"
False,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,9, are met:
False,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,11, 1. Redistributions of source code must retain the above copyright
False,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,12,"    notice, this list of conditions and the following disclaimer."
False,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,14, 2. Redistributions in binary form must reproduce the above copyright
False,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,15,"    notice, this list of conditions and the following disclaimer in"
False,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,16,    the documentation and/or other materials provided with the
False,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,17,    distribution.
False,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,19," 3. The end-user documentation included with the redistribution, if"
False,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,20,"    any, must include the following acknowledgement:"
False,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,21,"       ""This product includes software developed by the"
False,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,22,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,23,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,24,    if and wherever such third-party acknowledgements normally appear.
False,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,26," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,27,"    Foundation"" must not be used to endorse or promote products derived"
False,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,28,    from this software without prior written permission. For written
False,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,29,"    permission, please contact apache@apache.org."
False,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,31," 5. Products derived from this software may not be called ""Apache"""
False,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,32,"    nor may ""Apache"" appear in their name without prior written"
False,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,33,    permission of the Apache Software Foundation.
False,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,38, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,39," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,46, SUCH DAMAGE.
False,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,49, This software consists of voluntary contributions made by many
False,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,50, individuals on behalf of the Apache Software Foundation.  For more
False,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,51," information on the Apache Software Foundation, please see"
False,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,52, <http://www.apache.org/>.
False,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,55,ackage org.apache.commons.math.stat.distribution;
False,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,57,mport junit.framework.TestCase;
False,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,60, @version $Revision: 1.7 $ $Date: 2003/10/16 15:24:31 $
False,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,62,ublic class GammaDistributionTest extends TestCase {
False,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,63,ublic void testProbabilities(){
False,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,64,"estProbability(-1.000, 4.0, 2.0, .0000);"
False,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,65,"estProbability(15.501, 4.0, 2.0, .9499);"
False,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,66,"estProbability( 0.504, 4.0, 1.0, .0018);"
False,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,67,"estProbability(10.011, 1.0, 2.0, .9933);"
False,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,68,"estProbability( 5.000, 2.0, 2.0, .7127);"
False,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,71,ublic void testValues(){
False,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,72,"estValue(15.501, 4.0, 2.0, .9499);"
False,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,73,"estValue( 0.504, 4.0, 1.0, .0018);"
False,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,74,"estValue(10.011, 1.0, 2.0, .9933);"
False,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,75,"estValue( 5.000, 2.0, 2.0, .7127);"
False,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,78,"rivate void testProbability(double x, double a, double b, double expected){"
False,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,79,"ouble actual = DistributionFactory.newInstance().createGammaDistribution(a, b).cummulativeProbability(x);"
False,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,80,"ssertEquals(""probability for "" + x, expected, actual, 10e-4);"
False,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,83,"rivate void testValue(double expected, double a, double b, double p){"
False,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,84,"ouble actual = DistributionFactory.newInstance().createGammaDistribution(a, b).inverseCummulativeProbability(p);"
False,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,85,"ssertEquals(""critical value for "" + p, expected, actual, 10e-4);"
False,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,2," The Apache Software License, Version 1.1"
False,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
False,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,5, reserved.
False,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,7," Redistribution and use in source and binary forms, with or without"
False,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,8," modification, are permitted provided that the following conditions"
False,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,9, are met:
False,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,11, 1. Redistributions of source code must retain the above copyright
False,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,12,"    notice, this list of conditions and the following disclaimer."
False,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,14, 2. Redistributions in binary form must reproduce the above copyright
False,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,15,"    notice, this list of conditions and the following disclaimer in"
False,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,16,    the documentation and/or other materials provided with the
False,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,17,    distribution.
False,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,19," 3. The end-user documentation included with the redistribution, if"
False,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,20,"    any, must include the following acknowledgement:"
False,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,21,"       ""This product includes software developed by the"
False,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,22,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,23,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,24,    if and wherever such third-party acknowledgements normally appear.
False,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,26," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,27,"    Foundation"" must not be used to endorse or promote products derived"
False,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,28,    from this software without prior written permission. For written
False,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,29,"    permission, please contact apache@apache.org."
False,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,31," 5. Products derived from this software may not be called ""Apache"""
False,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,32,"    nor may ""Apache"" appear in their name without prior written"
False,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,33,    permission of the Apache Software Foundation.
False,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,38, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,39," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,46, SUCH DAMAGE.
False,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,49, This software consists of voluntary contributions made by many
False,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,50, individuals on behalf of the Apache Software Foundation.  For more
False,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,51," information on the Apache Software Foundation, please see"
False,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,52, <http://www.apache.org/>.
False,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,55,ackage org.apache.commons.math.stat.distribution;
False,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,57,mport junit.framework.TestCase;
False,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,60, @version $Revision: 1.3 $ $Date: 2003/10/16 15:24:31 $
False,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,62,ublic class HypergeometricDistributionTest extends TestCase {
False,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,63,rivate HypergeometricDistribution h;
False,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,66, Constructor for ChiSquareDistributionTest.
False,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,67, @param name
False,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,69,ublic HypergeometricDistributionTest(String name) {
False,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,70,uper(name);
False,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,74, @see TestCase#setUp()
False,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,76,rotected void setUp() throws Exception {
False,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,77,uper.setUp();
False,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,78," = DistributionFactory.newInstance().createHypergeometricDistribution(10, 5, 5);"
False,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,82, @see TestCase#tearDown()
False,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,84,rotected void tearDown() throws Exception {
False,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,85, = null;
False,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,86,uper.tearDown();
False,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,89,ublic void testInverseCummulativeProbability001() {
False,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,90,"estValue(-1, .001);"
False,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,93,ublic void testInverseCumulativeProbability010() {
False,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,94,"estValue(0, .010);"
False,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,97,ublic void testInverseCumulativeProbability025() {
False,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,98,"estValue(0, .025);"
False,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,101,ublic void testInverseCumulativeProbability050() {
False,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,102,"estValue(0, .050);"
False,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,105,ublic void testInverseCumulativeProbability100() {
False,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,106,"estValue(0, .100);"
False,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,109,ublic void testInverseCummulativeProbability999() {
False,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,110,"estValue(4, .999);"
False,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,113,ublic void testInverseCumulativeProbability990() {
False,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,114,"estValue(3, .990);"
False,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,117,ublic void testInverseCumulativeProbability975() {
False,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,118,"estValue(3, .975);"
False,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,121,ublic void testInverseCumulativeProbability950() {
False,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,122,"estValue(3, .950);"
False,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,125,ublic void testInverseCumulativeProbability900() {
False,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,126,"estValue(3, .900);"
False,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,129,ublic void testCummulativeProbability0() {
False,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,130,"estProbability(0, .00400);"
False,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,133,ublic void testCummulativeProbability1() {
False,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,134,"estProbability(1, .10318);"
False,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,137,ublic void testCumulativeProbability2() {
False,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,138,"estProbability(2, .50000);"
False,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,141,ublic void testCumulativeProbability3() {
False,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,142,"estProbability(3, .89683);"
False,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,145,ublic void testCumulativeProbability4() {
False,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,146,"estProbability(4, .99603);"
False,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,149,ublic void testCumulativeProbability5() {
False,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,150,"estProbability(5, 1.00000);"
False,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,153,"rivate void testProbability(int x, double expected){"
False,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,154,ouble actual = h.cummulativeProbability(x);
False,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,155,"ssertEquals(expected, actual, 10e-4);"
False,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,158,"rivate void testValue(int expected, double p){"
False,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,159,nt actual = h.inverseCummulativeProbability(p);
False,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,160,"ssertEquals(expected, actual);"
False,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,161,ssertTrue(h.cummulativeProbability(actual) <= p);
False,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,162,ssertTrue(h.cummulativeProbability(actual + 1) >= p);
False,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,2," The Apache Software License, Version 1.1"
False,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
False,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,5, reserved.
False,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,7," Redistribution and use in source and binary forms, with or without"
False,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,8," modification, are permitted provided that the following conditions"
False,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,9, are met:
False,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,11, 1. Redistributions of source code must retain the above copyright
False,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,12,"    notice, this list of conditions and the following disclaimer."
False,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,14, 2. Redistributions in binary form must reproduce the above copyright
False,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,15,"    notice, this list of conditions and the following disclaimer in"
False,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,16,    the documentation and/or other materials provided with the
False,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,17,    distribution.
False,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,19," 3. The end-user documentation included with the redistribution, if"
False,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,20,"    any, must include the following acknowledgement:"
False,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,21,"       ""This product includes software developed by the"
False,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,22,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,23,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,24,    if and wherever such third-party acknowledgements normally appear.
False,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,26," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,27,"    Foundation"" must not be used to endorse or promote products derived"
False,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,28,    from this software without prior written permission. For written
False,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,29,"    permission, please contact apache@apache.org."
False,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,31," 5. Products derived from this software may not be called ""Apache"""
False,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,32,"    nor may ""Apache"" appear in their name without prior written"
False,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,33,    permission of the Apache Software Foundation.
False,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,38, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,39," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,46, SUCH DAMAGE.
False,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,49, This software consists of voluntary contributions made by many
False,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,50, individuals on behalf of the Apache Software Foundation.  For more
False,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,51," information on the Apache Software Foundation, please see"
False,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,52, <http://www.apache.org/>.
False,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,54,ackage org.apache.commons.math.stat.distribution;
False,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,56,mport junit.framework.TestCase;
False,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,59, @version $Revision: 1.5 $ $Date: 2003/10/16 15:24:31 $
False,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,61,ublic class TDistributionTest extends TestCase {
False,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,62,rivate TDistribution t;
False,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,65, Constructor for ChiSquareDistributionTest.
False,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,66, @param name
False,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,68,ublic TDistributionTest(String name) {
False,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,69,uper(name);
False,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,73, @see TestCase#setUp()
False,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,75,rotected void setUp() throws Exception {
False,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,76,uper.setUp();
False,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,77, = DistributionFactory.newInstance().createTDistribution(5.0);
False,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,81, @see TestCase#tearDown()
False,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,83,rotected void tearDown() throws Exception {
False,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,84, = null;
False,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,85,uper.tearDown();
False,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,88,ublic void testInverseCummulativeProbability001() {
False,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,89,"estValue(-5.893, .001);"
False,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,92,ublic void testInverseCumulativeProbability010() {
False,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,93,"estValue(-3.365, .010);"
False,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,96,ublic void testInverseCumulativeProbability025() {
False,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,97,"estValue(-2.571, .025);"
False,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,100,ublic void testInverseCumulativeProbability050() {
False,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,101,"estValue(-2.015, .050);"
False,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,104,ublic void testInverseCumulativeProbability100() {
False,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,105,"estValue(-1.476, .100);"
False,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,108,ublic void testInverseCummulativeProbability999() {
False,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,109,"estValue(5.893, .999);"
False,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,112,ublic void testInverseCumulativeProbability990() {
False,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,113,"estValue(3.365, .990);"
False,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,116,ublic void testInverseCumulativeProbability975() {
False,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,117,"estValue(2.571, .975);"
False,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,120,ublic void testInverseCumulativeProbability950() {
False,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,121,"estValue(2.015, .950);"
False,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,124,ublic void testInverseCumulativeProbability900() {
False,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,125,"estValue(1.476, .900);"
False,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,128,ublic void testCummulativeProbability001() {
False,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,129,"estProbability(-5.893, .001);"
False,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,132,ublic void testCumulativeProbability010() {
False,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,133,"estProbability(-3.365, .010);"
False,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,136,ublic void testCumulativeProbability025() {
False,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,137,"estProbability(-2.571, .025);"
False,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,140,ublic void testCumulativeProbability050() {
False,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,141,"estProbability(-2.015, .050);"
False,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,144,ublic void testCumulativeProbability100() {
False,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,145,"estProbability(-1.476, .100);"
False,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,148,ublic void testCummulativeProbability999() {
False,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,149,"estProbability(5.893, .999);"
False,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,152,ublic void testCumulativeProbability990() {
False,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,153,"estProbability(3.365, .990);"
False,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,156,ublic void testCumulativeProbability975() {
False,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,157,"estProbability(2.571, .975);"
False,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,160,ublic void testCumulativeProbability950() {
False,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,161,"estProbability(2.015, .950);"
False,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,164,ublic void testCumulativeProbability900() {
False,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,165,"estProbability(1.476, .900);"
False,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,168,"rivate void testProbability(double x, double expected){"
False,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,169,ouble actual = t.cummulativeProbability(x);
False,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,170,"ssertEquals(expected, actual, 10e-4);"
False,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,173,"rivate void testValue(double expected, double p){"
False,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,174,ouble actual = t.inverseCummulativeProbability(p);
False,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,175,"ssertEquals(expected, actual, 10e-4);"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,2," The Apache Software License, Version 1.1"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,5, reserved.
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,7," Redistribution and use in source and binary forms, with or without"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,8," modification, are permitted provided that the following conditions"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,9, are met:
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,11, 1. Redistributions of source code must retain the above copyright
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,12,"    notice, this list of conditions and the following disclaimer."
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,14, 2. Redistributions in binary form must reproduce the above copyright
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,15,"    notice, this list of conditions and the following disclaimer in"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,16,    the documentation and/or other materials provided with the
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,17,    distribution.
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,19," 3. The end-user documentation included with the redistribution, if"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,20,"    any, must include the following acknowledgement:"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,21,"       ""This product includes software developed by the"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,22,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,23,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,24,    if and wherever such third-party acknowledgements normally appear.
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,26," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,27,"    Foundation"" must not be used to endorse or promote products derived"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,28,    from this software without prior written permission. For written
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,29,"    permission, please contact apache@apache.org."
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,31," 5. Products derived from this software may not be called ""Apache"""
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,32,"    nor may ""Apache"" appear in their name without prior written"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,33,    permission of the Apache Software Foundation.
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,38, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,39," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,46, SUCH DAMAGE.
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,49, This software consists of voluntary contributions made by many
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,50, individuals on behalf of the Apache Software Foundation.  For more
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,51," information on the Apache Software Foundation, please see"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,52, <http://www.apache.org/>.
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,54,ackage org.apache.commons.math.linear;
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,56,mport junit.framework.Test;
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,57,mport junit.framework.TestCase;
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,58,mport junit.framework.TestSuite;
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,61, Test cases for the {@link RealMatrixImpl} class.
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,63, @version $Revision: 1.5 $ $Date: 2003/10/16 15:24:33 $
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,66,ublic final class RealMatrixImplTest extends TestCase {
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,68,"rivate double[][] testData = { {1d,2d,3d}, {2d,5d,3d}, {1d,0d,8d} };"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,69,"rivate double[][] testDataPlus2 = { {3d,4d,5d}, {4d,7d,5d}, {3d,2d,10d} };"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,70,"rivate double[][] testDataMinus = { {-1d,-2d,-3d}, {-2d,-5d,-3d},"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,71,"-1d,0d,-8d} };"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,72,"rivate double[] testDataRow1 = {1d,2d,3d};"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,73,"rivate double[] testDataCol3 = {3d,3d,8d};"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,74,rivate double[][] testDataInv =
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,75," {-40d,16d,9d}, {13d,-5d,-3d}, {5d,-2d,-1d} };"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,76,"rivate double[][] preMultTest = {{8,12,33}};"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,77,"rivate double[][] testData2 ={ {1d,2d,3d}, {2d,5d,3d}};"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,78,"rivate double[][] testData2T = { {1d,2d}, {2d,5d}, {3d,3d}};"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,79,rivate double[][] testDataPlusInv =
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,80," {-39d,18d,12d}, {15d,0d,0d}, {6d,-2d,7d} };"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,81,"rivate double[][] id = { {1d,0d,0d}, {0d,1d,0d}, {0d,0d,1d} };"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,82,"rivate double[][] luData = { {2d,3d,3d}, {0d,5d,7d}, {6d,9d,8d} };"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,83,"rivate double[][] singular = { {2d,3d}, {2d,3d} };"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,84,"rivate double[][] bigSingular = {{1d,2d,3d,4d}, {2d,5d,3d,4d},"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,85,"7d,3d,256d,1930d}, {3d,7d,6d,8d}}; // 4th row = 1st + 2nd"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,86,"rivate double[][] detData = { {1d,2d,3d}, {4d,5d,6d}, {7d,8d,10d} };"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,87,"rivate double[] testVector = {1,2,3};"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,88,"rivate double[] testVector2 = {1,2,3,4};"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,89,rivate double entryTolerance = 10E-16;
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,90,rivate double normTolerance = 10E-14;
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,92,ublic RealMatrixImplTest(String name) {
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,93,uper(name);
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,96,ublic void setUp() {
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,100,ublic static Test suite() {
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,101,estSuite suite = new TestSuite(RealMatrixImplTest.class);
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,102,"uite.setName(""RealMatrixImpl Tests"");"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,103,eturn suite;
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,106,** test dimensions */
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,107,ublic void testDimensions() {
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,108,ealMatrixImpl m = new RealMatrixImpl(testData);
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,109,ealMatrixImpl m2 = new RealMatrixImpl(testData2);
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,110,"ssertEquals(""testData row dimension"",3,m.getRowDimension());"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,111,"ssertEquals(""testData column dimension"",3,m.getColumnDimension());"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,112,"ssertTrue(""testData is square"",m.isSquare());"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,113,"ssertEquals(""testData2 row dimension"",m2.getRowDimension(),2);"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,114,"ssertEquals(""testData2 column dimension"",m2.getColumnDimension(),3);"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,115,"ssertTrue(""testData2 is not square"",!m2.isSquare());"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,116,ealMatrixImpl m3 = new RealMatrixImpl();
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,117,3.setData(testData);
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,120,** test copy functions */
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,121,ublic void testCopyFunctions() {
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,122,ealMatrixImpl m = new RealMatrixImpl(testData);
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,123,ealMatrixImpl m2 = new RealMatrixImpl(testData2);
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,124,2.setData(m.getData());
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,125,"ssertClose(""getData"",m2,m,entryTolerance);"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,126,/ no dangling reference...
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,127,"2.setEntry(1,1,2000d);"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,128,ealMatrixImpl m3 = new RealMatrixImpl(testData);
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,129,"ssertClose(""no getData side effect"",m,m3,entryTolerance);"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,130,3 = (RealMatrixImpl) m.copy();
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,131,"ouble[][] stompMe = {{1d,2d,3d}};"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,132,3.setDataRef(stompMe);
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,133,"ssertClose(""no copy side effect"",m,new RealMatrixImpl(testData),"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,134,ntryTolerance);
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,137,** test add */
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,138,ublic void testAdd() {
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,139,ealMatrixImpl m = new RealMatrixImpl(testData);
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,140,ealMatrixImpl mInv = new RealMatrixImpl(testDataInv);
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,141,ealMatrixImpl mPlusMInv = (RealMatrixImpl)m.add(mInv);
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,142,ouble[][] sumEntries = mPlusMInv.getData();
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,143,or (int row = 0; row < m.getRowDimension(); row++) {
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,144,or (int col = 0; col < m.getColumnDimension(); col++) {
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,145,"ssertEquals(""sum entry entry"","
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,146,"estDataPlusInv[row][col],sumEntries[row][col],"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,147,ntryTolerance);
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,152,** test add failure */
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,153,ublic void testAddFail() {
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,154,ealMatrixImpl m = new RealMatrixImpl(testData);
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,155,ealMatrixImpl m2 = new RealMatrixImpl(testData2);
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,156,ry {
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,157,ealMatrixImpl mPlusMInv = (RealMatrixImpl)m.add(m2);
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,158,"ail(""IllegalArgumentException expected"");"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,159, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,164,** test norm */
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,165,ublic void testNorm() {
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,166,ealMatrixImpl m = new RealMatrixImpl(testData);
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,167,ealMatrixImpl m2 = new RealMatrixImpl(testData2);
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,168,"ssertEquals(""testData norm"",14d,m.getNorm(),entryTolerance);"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,169,"ssertEquals(""testData2 norm"",7d,m2.getNorm(),entryTolerance);"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,172,** test m-n = m + -n */
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,173,ublic void testPlusMinus() {
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,174,ealMatrixImpl m = new RealMatrixImpl(testData);
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,175,ealMatrixImpl m2 = new RealMatrixImpl(testDataInv);
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,176,"ssertClose(""m-n = m + -n"",m.subtract(m2),"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,177,"2.scalarMultiply(-1d).add(m),entryTolerance);"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,178,ry {
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,179,ealMatrix a = m.subtract(new RealMatrixImpl(testData2));
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,180,"ail(""Expecting illegalArgumentException"");"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,181, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,186,** test multiply */
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,187,ublic void testMultiply() {
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,188,ealMatrixImpl m = new RealMatrixImpl(testData);
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,189,ealMatrixImpl mInv = new RealMatrixImpl(testDataInv);
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,190,ealMatrixImpl identity = new RealMatrixImpl(id);
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,191,ealMatrixImpl m2 = new RealMatrixImpl(testData2);
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,192,"ssertClose(""inverse multiply"",m.multiply(mInv),"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,193,"dentity,entryTolerance);"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,194,"ssertClose(""inverse multiply"",mInv.multiply(m),"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,195,"dentity,entryTolerance);"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,196,"ssertClose(""identity multiply"",m.multiply(identity),"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,197,",entryTolerance);"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,198,"ssertClose(""identity multiply"",identity.multiply(mInv),"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,199,"Inv,entryTolerance);"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,200,"ssertClose(""identity multiply"",m2.multiply(identity),"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,201,"2,entryTolerance);"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,202,ry {
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,203,ealMatrix a = m.multiply(new RealMatrixImpl(bigSingular));
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,204,"ail(""Expecting illegalArgumentException"");"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,205, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,210,** test isSingular */
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,211,ublic void testIsSingular() {
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,212,ealMatrixImpl m = new RealMatrixImpl(singular);
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,213,"ssertTrue(""singular"",m.isSingular());"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,214, = new RealMatrixImpl(bigSingular);
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,215,"ssertTrue(""big singular"",m.isSingular());"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,216, = new RealMatrixImpl(id);
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,217,"ssertTrue(""identity nonsingular"",!m.isSingular());"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,218, = new RealMatrixImpl(testData);
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,219,"ssertTrue(""testData nonsingular"",!m.isSingular());"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,222,** test inverse */
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,223,ublic void testInverse() {
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,224,ealMatrixImpl m = new RealMatrixImpl(testData);
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,225,ealMatrix mInv = new RealMatrixImpl(testDataInv);
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,226,"ssertClose(""inverse"",mInv,m.inverse(),normTolerance);"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,227,"ssertClose(""inverse^2"",m,m.inverse().inverse(),10E-12);"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,230,** test solve */
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,231,ublic void testSolve() {
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,232,ealMatrixImpl m = new RealMatrixImpl(testData);
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,233,ealMatrix mInv = new RealMatrixImpl(testDataInv);
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,234,/ being a bit slothful here -- actually testing that X = A^-1 * B
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,235,"ssertClose(""inverse-operate"",mInv.operate(testVector),"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,236,".solve(testVector),normTolerance);"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,237,ry {
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,238,ouble[] x = m.solve(testVector2);
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,239,"ail(""expecting IllegalArgumentException"");"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,240, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,243,ealMatrix bs = new RealMatrixImpl(bigSingular);
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,244,ry {
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,245,ealMatrix a = bs.solve(bs);
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,246,"ail(""Expecting illegalArgumentException"");"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,247, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,250,ry {
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,251,ealMatrix a = m.solve(bs);
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,252,"ail(""Expecting illegalArgumentException"");"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,253, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,256,ry {
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,257,ealMatrix a = (new RealMatrixImpl(testData2)).solve(bs);
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,258,"ail(""Expecting illegalArgumentException"");"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,259, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,262,ry {
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,263,new RealMatrixImpl(testData2)).LUDecompose();
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,264,"ail(""Expecting illegalArgumentException"");"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,265, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,270,** test determinant */
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,271,ublic void testDeterminant() {
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,272,ealMatrix m = new RealMatrixImpl(bigSingular);
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,273,"ssertEquals(""singular determinant"",0,m.getDeterminant(),0);"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,274, = new RealMatrixImpl(detData);
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,275,"ssertEquals(""nonsingular test"",-3d,m.getDeterminant(),normTolerance);"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,276,ry {
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,277,ouble a = new RealMatrixImpl(testData2).getDeterminant();
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,278,"ail(""Expecting illegalArgumentException"");"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,279, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,284,** test trace */
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,285,ublic void testTrace() {
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,286,ealMatrix m = new RealMatrixImpl(id);
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,287,"ssertEquals(""identity trace"",3d,m.getTrace(),entryTolerance);"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,288, = new RealMatrixImpl(testData2);
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,289,ry {
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,290,ouble x = m.getTrace();
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,291,"ail(""Expecting illegalArgumentException"");"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,292, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,297,** test sclarAdd */
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,298,ublic void testScalarAdd() {
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,299,ealMatrix m = new RealMatrixImpl(testData);
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,300,"ssertClose(""scalar add"",new RealMatrixImpl(testDataPlus2),"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,301,".scalarAdd(2d),entryTolerance);"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,304,** test operate */
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,305,ublic void testOperate() {
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,306,ealMatrix m = new RealMatrixImpl(id);
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,307,ouble[] x = m.operate(testVector);
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,308,"ssertClose(""identity operate"",testVector,x,entryTolerance);"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,309, = new RealMatrixImpl(bigSingular);
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,310,ry {
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,311, = m.operate(testVector);
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,312,"ail(""Expecting illegalArgumentException"");"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,313, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,318,** test transpose */
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,319,ublic void testTranspose() {
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,320,ealMatrix m = new RealMatrixImpl(testData);
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,321,"ssertClose(""inverse-transpose"",m.inverse().transpose(),"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,322,".transpose().inverse(),normTolerance);"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,323, = new RealMatrixImpl(testData2);
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,324,ealMatrix mt = new RealMatrixImpl(testData2T);
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,325,"ssertClose(""transpose"",mt,m.transpose(),normTolerance);"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,328,** test preMultiply */
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,329,ublic void testPremultiply() {
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,330,ealMatrix m = new RealMatrixImpl(testData);
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,331,ealMatrix mp = new RealMatrixImpl(preMultTest);
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,332,"ssertClose(""premultiply"",m.preMultiply(testVector),mp,normTolerance);"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,333, = new RealMatrixImpl(bigSingular);
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,334,ry {
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,335,ealMatrix x = m.preMultiply(testVector);
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,336,"ail(""expecting IllegalArgumentException"");"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,337, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,342,ublic void testGetVectors() {
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,343,ealMatrix m = new RealMatrixImpl(testData);
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,344,"ssertClose(""get row"",m.getRow(1),testDataRow1,entryTolerance);"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,345,"ssertClose(""get col"",m.getColumn(3),testDataCol3,entryTolerance);"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,346,ry {
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,347,ouble[] x = m.getRow(10);
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,348,"ail(""expecting IllegalArgumentException"");"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,349, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,352,ry {
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,353,ouble[] x = m.getColumn(-1);
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,354,"ail(""expecting IllegalArgumentException"");"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,355, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,360,ublic void testEntryMutators() {
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,361,ealMatrix m = new RealMatrixImpl(testData);
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,362,"ssertEquals(""get entry"",m.getEntry(1,2),2d,entryTolerance);"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,363,".setEntry(1,2,100d);"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,364,"ssertEquals(""get entry"",m.getEntry(1,2),100d,entryTolerance);"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,365,ry {
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,366,"ouble x = m.getEntry(0,2);"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,367,"ail(""expecting IllegalArgumentException"");"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,368, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,371,ry {
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,372,".setEntry(1,4,200d);"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,373,"ail(""expecting IllegalArgumentException"");"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,374, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,380,/--------------- -----------------Private methods
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,382,** verifies that two matrices are close (1-norm) */
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,383,"rivate void assertClose(String msg, RealMatrix m, RealMatrix n,"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,384,ouble tolerance) {
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,385,"ssertTrue(msg,m.subtract(n).getNorm() < tolerance);"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,388,** verifies that two vectors are close (sup norm) */
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,389,"rivate void assertClose(String msg, double[] m, double[] n,"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,390,ouble tolerance) {
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,391,f (m.length != n.length) {
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,392,"ail(""vectors not same length"");"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,394,or (int i = 0; i < m.length; i++) {
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,395,"ssertEquals(msg + "" "" +  i + "" elements differ"","
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,396,"[i],n[i],tolerance);"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,400,** Useful for debugging */
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,401,rivate void dumpMatrix(RealMatrix m) {
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,402,or (int i = 0; i < m.getRowDimension(); i++) {
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,403,"tring os = """";"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,404,or (int j = 0; j < m.getColumnDimension(); j++) {
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,405,"s += m.getEntry(i+1, j+1) + "" "";"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,407,ystem.out.println(os);
False,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,2," The Apache Software License, Version 1.1"
False,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
False,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,5, reserved.
False,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,7," Redistribution and use in source and binary forms, with or without"
False,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,8," modification, are permitted provided that the following conditions"
False,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,9, are met:
False,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,11, 1. Redistributions of source code must retain the above copyright
False,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,12,"    notice, this list of conditions and the following disclaimer."
False,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,14, 2. Redistributions in binary form must reproduce the above copyright
False,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,15,"    notice, this list of conditions and the following disclaimer in"
False,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,16,    the documentation and/or other materials provided with the
False,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,17,    distribution.
False,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,19," 3. The end-user documentation included with the redistribution, if"
False,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,20,"    any, must include the following acknowledgement:"
False,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,21,"       ""This product includes software developed by the"
False,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,22,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,23,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,24,    if and wherever such third-party acknowledgements normally appear.
False,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,26," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,27,"    Foundation"" must not be used to endorse or promote products derived"
False,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,28,    from this software without prior written permission. For written
False,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,29,"    permission, please contact apache@apache.org."
False,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,31," 5. Products derived from this software may not be called ""Apache"""
False,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,32,"    nor may ""Apache"" appear in their name without prior written"
False,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,33,    permission of the Apache Software Foundation.
False,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,38, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,39," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,46, SUCH DAMAGE.
False,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,49, This software consists of voluntary contributions made by many
False,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,50, individuals on behalf of the Apache Software Foundation.  For more
False,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,51," information on the Apache Software Foundation, please see"
False,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,52, <http://www.apache.org/>.
False,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,54,ackage org.apache.commons.math.random;
False,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,56,mport junit.framework.Test;
False,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,57,mport junit.framework.TestCase;
False,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,58,mport junit.framework.TestSuite;
False,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,59,mport java.io.File;
False,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,60,mport java.net.URL;
False,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,62,mport org.apache.commons.math.stat.Univariate;
False,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,63,mport org.apache.commons.math.stat.UnivariateImpl;
False,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,66, Test cases for the EmpiricalDistribution class
False,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,68, @version $Revision: 1.4 $ $Date: 2003/10/16 15:24:29 $
False,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,71,ublic final class EmpiricalDistributionTest extends TestCase {
False,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,73,rivate EmpiricalDistribution empiricalDistribution = null;
False,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,74,rivate File file = null;
False,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,76,ublic EmpiricalDistributionTest(String name) {
False,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,77,uper(name);
False,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,80,ublic void setUp() {
False,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,81,mpiricalDistribution = new EmpiricalDistributionImpl(100);
False,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,82,"RL url = getClass().getResource(""testData.txt"");"
False,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,83,ile = new File(url.getFile());
False,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,86,ublic static Test suite() {
False,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,87,estSuite suite = new TestSuite(EmpiricalDistributionTest.class);
False,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,88,"uite.setName(""EmpiricalDistribution Tests"");"
False,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,89,eturn suite;
False,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,93, Test EmpiricalDistrbution.load() using sample data file.<br>
False,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,94," Check that the sampleCount, mu and sigma match data in"
False,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,95, the sample data file.
False,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,97,ublic void testLoad() throws Exception {
False,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,98,mpiricalDistribution.load(file);
False,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,99,"/ testData File has 10000 values, with mean ~ 5.0, std dev ~ 1"
False,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,100,/ Make sure that loaded distribution matches this
False,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,101,"ssertEquals(empiricalDistribution.getSampleStats().getN(),1000,10E-7);"
False,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,102,/TODO: replace with statistical tests
False,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,103,ssertEquals
False,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,104,"empiricalDistribution.getSampleStats().getMean(),"
False,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,105,".069831575018909,10E-7);"
False,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,106,ssertEquals
False,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,107,"empiricalDistribution.getSampleStats().getStandardDeviation(),"
False,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,108,".0173699343977738,10E-7);"
False,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,112, Generate 1000 random values and make sure they look OK.<br>
False,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,113, Note that there is a non-zero (but very small) probability that
False,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,114, these tests will fail even if the code is working as designed.
False,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,116,ublic void testNext() throws Exception {
False,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,117,stGen(0.1);
False,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,121, Make sure exception thrown if digest getNext is attempted
False,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,122, before loading empiricalDistribution.
False,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,124,ublic void testNexFail() {
False,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,125,ry {
False,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,126,mpiricalDistribution.getNextValue();
False,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,127,"ail(""Expecting IllegalStateException"");"
False,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,128, catch (IllegalStateException ex) {;}
False,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,132, Make sure we can handle a grid size that is too fine
False,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,134,ublic void testGridTooFine() throws Exception {
False,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,135,mpiricalDistribution = new EmpiricalDistributionImpl(10000);
False,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,136,stGen(0.1);
False,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,140, How about too fat?
False,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,142,ublic void testGridTooFat() throws Exception {
False,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,143,mpiricalDistribution = new EmpiricalDistributionImpl(1);
False,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,144,stGen(5); // ridiculous tolerance; but ridiculous grid size
False,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,145,/ really just checking to make sure we do not bomb
False,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,148,rivate void tstGen(double tolerance)throws Exception {
False,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,149,mpiricalDistribution.load(file);
False,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,150,nivariate stats = new UnivariateImpl();
False,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,151,or (int i = 1; i < 1000; i++) {
False,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,152,tats.addValue(empiricalDistribution.getNextValue());
False,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,154,/TODO: replace these with statistical tests -- refactor as necessary
False,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,155,"ssertEquals(""mean"", stats.getMean(),5.069831575018909,tolerance);"
False,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,156,ssertEquals
False,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/random/EmpiricalDistributionTest.java,157,"""std dev"", stats.getStandardDeviation(),1.0173699343977738,tolerance);"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,2," The Apache Software License, Version 1.1"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,5, reserved.
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,7," Redistribution and use in source and binary forms, with or without"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,8," modification, are permitted provided that the following conditions"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,9, are met:
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,11, 1. Redistributions of source code must retain the above copyright
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,12,"    notice, this list of conditions and the following disclaimer."
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,14, 2. Redistributions in binary form must reproduce the above copyright
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,15,"    notice, this list of conditions and the following disclaimer in"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,16,    the documentation and/or other materials provided with the
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,17,    distribution.
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,19," 3. The end-user documentation included with the redistribution, if"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,20,"    any, must include the following acknowledgement:"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,21,"       ""This product includes software developed by the"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,22,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,23,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,24,    if and wherever such third-party acknowledgements normally appear.
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,26," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,27,"    Foundation"" must not be used to endorse or promote products derived"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,28,    from this software without prior written permission. For written
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,29,"    permission, please contact apache@apache.org."
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,31," 5. Products derived from this software may not be called ""Apache"""
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,32,"    nor may ""Apache"" appear in their name without prior written"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,33,    permission of the Apache Software Foundation.
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,38, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,39," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,46, SUCH DAMAGE.
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,49, This software consists of voluntary contributions made by many
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,50, individuals on behalf of the Apache Software Foundation.  For more
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,51," information on the Apache Software Foundation, please see"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,52, <http://www.apache.org/>.
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,54,ackage org.apache.commons.math.random;
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,56,mport junit.framework.Test;
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,57,mport junit.framework.TestCase;
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,58,mport junit.framework.TestSuite;
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,59,mport java.security.NoSuchProviderException;
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,60,mport java.security.NoSuchAlgorithmException;
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,61,mport java.util.HashSet;
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,63,mport org.apache.commons.math.stat.Frequency;
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,64,mport org.apache.commons.math.stat.TestStatisticImpl;
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,65,mport org.apache.commons.math.stat.Univariate;
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,66,mport org.apache.commons.math.stat.UnivariateImpl;
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,69, Test cases for the RandomData class.
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,71, @version $Revision: 1.5 $ $Date: 2003/10/16 15:24:29 $
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,74,ublic final class RandomDataTest extends TestCase {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,76,ublic RandomDataTest(String name) {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,77,uper(name);
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,80,rivate long smallSampleSize = 1000;
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,81,"rivate double[] expected = {250,250,250,250};"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,82,rivate int largeSampleSize = 10000;
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,83,rivate int tolerance = 50;
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,84,rivate String[] hex =
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,85,"""0"",""1"",""2"",""3"",""4"",""5"",""6"",""7"",""8"",""9"",""a"",""b"",""c"",""d"",""e"",""f""};"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,86,rivate RandomDataImpl randomData = new RandomDataImpl();
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,87,rivate TestStatisticImpl testStatistic = new TestStatisticImpl();
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,90,ublic void setUp() {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,93,ublic static Test suite() {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,94,estSuite suite = new TestSuite(RandomDataTest.class);
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,95,"uite.setName(""RandomData Tests"");"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,96,eturn suite;
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,99,** test dispersion and failure modes for nextInt() */
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,100,ublic void testNextInt() {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,101,ry {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,102,"nt x = randomData.nextInt(4,3);"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,103,"ail(""IllegalArgumentException expected"");"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,104, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,107,requency freq = new Frequency();
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,108,nt value = 0;
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,109,or (int i=0;i<smallSampleSize;i++) {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,110,"alue = randomData.nextInt(0,3);"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,111,"ssertTrue(""nextInt range"",(value >= 0) && (value <= 3));"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,112,req.addValue(value);
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,114,ouble[] observed = new double[4];
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,115,or (int i=0; i<4; i++) {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,116,tring iString = new Integer(i).toString();
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,117,bserved[i] = freq.getCount(iString);
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,120,"* Use ChiSquare dist with df = 4-1 = 3, alpha = .001"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,121, Change to 11.34 for alpha = .01
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,123,"ssertTrue(""chi-square test -- will fail about 1 in 1000 times"","
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,124,"estStatistic.chiSquare(expected,observed) < 16.27);"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,127,** test dispersion and failure modes for nextLong() */
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,128,ublic void testNextLong() {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,129,ry {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,130,"ong x = randomData.nextLong(4,3);"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,131,"ail(""IllegalArgumentException expected"");"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,132, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,135,requency freq = new Frequency();
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,136,ong value = 0;
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,137,or (int i=0;i<smallSampleSize;i++) {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,138,"alue = randomData.nextLong(0,3);"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,139,"ssertTrue(""nextInt range"",(value >= 0) && (value <= 3));"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,140,req.addValue(value);
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,142,ouble[] observed = new double[4];
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,143,or (int i=0; i<4; i++) {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,144,tring iString = new Integer(i).toString();
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,145,bserved[i] = freq.getCount(iString);
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,148,"* Use ChiSquare dist with df = 4-1 = 3, alpha = .001"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,149, Change to 11.34 for alpha = .01
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,151,"ssertTrue(""chi-square test -- will fail about 1 in 1000 times"","
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,152,"estStatistic.chiSquare(expected,observed) < 16.27);"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,155,** test dispersion and failure modes for nextSecureLong() */
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,156,ublic void testNextSecureLong() {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,157,ry {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,158,"ong x = randomData.nextSecureLong(4,3);"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,159,"ail(""IllegalArgumentException expected"");"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,160, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,163,requency freq = new Frequency();
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,164,ong value = 0;
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,165,or (int i=0;i<smallSampleSize;i++) {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,166,"alue = randomData.nextSecureLong(0,3);"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,167,"ssertTrue(""nextInt range"",(value >= 0) && (value <= 3));"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,168,req.addValue(value);
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,170,ouble[] observed = new double[4];
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,171,or (int i=0; i<4; i++) {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,172,tring iString = new Integer(i).toString();
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,173,bserved[i] = freq.getCount(iString);
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,176,"* Use ChiSquare dist with df = 4-1 = 3, alpha = .001"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,177, Change to 11.34 for alpha = .01
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,179,"ssertTrue(""chi-square test -- will fail about 1 in 1000 times"","
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,180,"estStatistic.chiSquare(expected,observed) < 16.27);"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,183,** test dispersion and failure modes for nextSecureInt() */
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,184,ublic void testNextSecureInt() {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,185,ry {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,186,"ong x = randomData.nextSecureInt(4,3);"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,187,"ail(""IllegalArgumentException expected"");"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,188, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,191,requency freq = new Frequency();
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,192,nt value = 0;
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,193,or (int i=0;i<smallSampleSize;i++) {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,194,"alue = randomData.nextSecureInt(0,3);"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,195,"ssertTrue(""nextInt range"",(value >= 0) && (value <= 3));"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,196,req.addValue(value);
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,198,ouble[] observed = new double[4];
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,199,or (int i=0; i<4; i++) {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,200,tring iString = new Integer(i).toString();
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,201,bserved[i] = freq.getCount(iString);
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,204,"* Use ChiSquare dist with df = 4-1 = 3, alpha = .001"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,205, Change to 11.34 for alpha = .01
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,207,"ssertTrue(""chi-square test -- will fail about 1 in 1000 times"","
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,208,"estStatistic.chiSquare(expected,observed) < 16.27);"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,212, Make sure that empirical distribution of random Poisson(4)'s
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,213, has P(X <= 5) close to actual cumulative Poisson probablity
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,214, and that nextPoisson fails when mean is non-positive
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,215," TODO: replace with statistical test, adding test stat to TestStatistic"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,217,ublic void testNextPoisson() {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,218,ry {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,219,ong x = randomData.nextPoisson(0);
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,220,"ail(""zero mean -- expecting IllegalArgumentException"");"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,221, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,224,requency f = new Frequency();
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,225,ong v = 0;
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,226,or (int i = 0; i<largeSampleSize; i++) {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,227,ry {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,228,.addValue(randomData.nextPoisson(4.0d));
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,229, catch (Exception ex) {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,230,ail(ex.getMessage());
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,233,"ong cumFreq = f.getCount(""0"") + f.getCount(""1"") + f.getCount(""2"") +"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,234,".getCount(""3"") + f.getCount(""4"") + f.getCount(""5"");"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,235,ong sumFreq = f.getSumFreq();
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,236,ouble cumPct =
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,237,ew Double(cumFreq).doubleValue()/new Double(sumFreq).doubleValue();
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,238,"ssertEquals(""cum Poisson(4)"",cumPct,0.7851,0.2);"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,239,ry {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,240,ong x = randomData.nextPoisson(-1);
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,241,"ail(""negative mean supplied -- IllegalArgumentException expected"");"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,242, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,245,ry {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,246,ong x = randomData.nextPoisson(0);
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,247,"ail(""0 mean supplied -- IllegalArgumentException expected"");"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,248, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,254,** test dispersion and failute modes for nextHex() */
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,255,ublic void testNextHex() {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,256,ry {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,257,tring x = randomData.nextHexString(-1);
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,258,"ail(""negative length supplied -- IllegalArgumentException expected"");"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,259, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,262,ry {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,263,tring x = randomData.nextHexString(0);
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,264,"ail(""zero length supplied -- IllegalArgumentException expected"");"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,265, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,268,tring hexString = randomData.nextHexString(3);
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,269,f (hexString.length() != 3) {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,270,"ail(""incorrect length for generated string"");"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,272,exString = randomData.nextHexString(1);
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,273,f (hexString.length() != 1) {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,274,"ail(""incorrect length for generated string"");"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,276,ry {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,277,exString = randomData.nextHexString(0);
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,278,"ail(""zero length requested -- expecting IllegalArgumentException"");"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,279, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,282,f (hexString.length() != 1) {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,283,"ail(""incorrect length for generated string"");"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,285,requency f = new Frequency();
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,286,or (int i = 0; i < smallSampleSize; i++) {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,287,exString = randomData.nextHexString(100);
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,288,f (hexString.length() != 100) {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,289,"ail(""incorrect length for generated string"");"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,291,or (int j = 0; j < hexString.length(); j++) {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,292,".addValue(hexString.substring(j,j+1));"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,295,ouble[] expected = new double[16];
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,296,ouble[] observed = new double[16];
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,297,or (int i = 0; i < 16; i++) {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,298,xpected[i] = (double)smallSampleSize*100/(double)16;
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,299,bserved[i] = f.getCount(hex[i]);
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,301,"* Use ChiSquare dist with df = 16-1 = 15, alpha = .001"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,302, Change to 30.58 for alpha = .01
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,304,"ssertTrue(""chi-square test -- will fail about 1 in 1000 times"","
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,305,"estStatistic.chiSquare(expected,observed) < 37.70);"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,308,** test dispersion and failute modes for nextHex() */
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,309,ublic void testNextSecureHex() {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,310,ry {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,311,tring x = randomData.nextSecureHexString(-1);
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,312,"ail(""negative length -- IllegalArgumentException expected"");"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,313, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,316,ry {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,317,tring x = randomData.nextSecureHexString(0);
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,318,"ail(""zero length -- IllegalArgumentException expected"");"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,319, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,322,tring hexString = randomData.nextSecureHexString(3);
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,323,f (hexString.length() != 3) {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,324,"ail(""incorrect length for generated string"");"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,326,exString = randomData.nextSecureHexString(1);
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,327,f (hexString.length() != 1) {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,328,"ail(""incorrect length for generated string"");"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,330,ry {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,331,exString = randomData.nextSecureHexString(0);
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,332,"ail(""zero length requested -- expecting IllegalArgumentException"");"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,333, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,336,f (hexString.length() != 1) {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,337,"ail(""incorrect length for generated string"");"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,339,requency f = new Frequency();
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,340,or (int i = 0; i < smallSampleSize; i++) {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,341,exString = randomData.nextSecureHexString(100);
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,342,f (hexString.length() != 100) {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,343,"ail(""incorrect length for generated string"");"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,345,or (int j = 0; j < hexString.length(); j++) {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,346,".addValue(hexString.substring(j,j+1));"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,349,ouble[] expected = new double[16];
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,350,ouble[] observed = new double[16];
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,351,or (int i = 0; i < 16; i++) {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,352,xpected[i] = (double)smallSampleSize*100/(double)16;
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,353,bserved[i] = f.getCount(hex[i]);
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,355,"* Use ChiSquare dist with df = 16-1 = 15, alpha = .001"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,356, Change to 30.58 for alpha = .01
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,358,"ssertTrue(""chi-square test -- will fail about 1 in 1000 times"","
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,359,"estStatistic.chiSquare(expected,observed) < 37.70);"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,362,** test failure modes and dispersion of nextUniform() */
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,363,ublic void testNextUniform() {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,364,ry {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,365,"ouble x = randomData.nextUniform(4,3);"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,366,"ail(""IllegalArgumentException expected"");"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,367, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,370,ry {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,371,"ouble x = randomData.nextUniform(3,3);"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,372,"ail(""IllegalArgumentException expected"");"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,373, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,376,"ouble[] expected = new double[] {500,500};"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,377,"ouble[] observed = new double[] {0,0};"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,378,ouble lower = -1d;
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,379,ouble upper = 20d;
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,380,ouble midpoint = (lower + upper)/2d;
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,381,ouble result = 0;
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,382,or (int i = 0; i < 1000; i++) {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,383,"esult = randomData.nextUniform(lower,upper);"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,384,f ((result == lower) || (result == upper)) {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,385,"ail(""generated value equal to an endpoint: "" + result);"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,387,f (result < midpoint) {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,388,bserved[0]++;
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,389, else {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,390,bserved[1]++;
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,393,"* Use ChiSquare dist with df = 2-1 = 1, alpha = .001"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,394, Change to 6.64 for alpha = .01
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,396,"ssertTrue(""chi-square test -- will fail about 1 in 1000 times"","
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,397,"estStatistic.chiSquare(expected,observed) < 10.83);"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,400,** test failure modes and distribution of nextGaussian() */
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,401,ublic void testNextGaussian() {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,402,ry {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,403,"ouble x = randomData.nextGaussian(0,0);"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,404,"ail(""zero sigma -- IllegalArgumentException expected"");"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,405, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,408,nivariate u = new UnivariateImpl();
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,409,or (int i = 0; i<largeSampleSize; i++) {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,410,".addValue(randomData.nextGaussian(0,1));"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,412,ouble xbar = u.getMean();
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,413,ouble s = u.getStandardDeviation();
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,414,ouble n = (double) u.getN();
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,415,"* t-test at .001-level TODO: replace with externalized t-test, with"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,416, test statistic defined in TestStatistic
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,418,ssertTrue(Math.abs(xbar)/(s/Math.sqrt(n))< 3.29);
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,421,** test failure modes and distribution of nextExponential() */
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,422,ublic void testNextExponential() {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,423,ry {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,424,ouble x = randomData.nextExponential(-1);
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,425,"ail(""negative mean -- expecting IllegalArgumentException"");"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,426, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,429,"ssertEquals(""0 mean"", 0,randomData.nextExponential(0),10E-8);"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,430,ong cumFreq = 0;
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,431,ouble v = 0;
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,432,or (int i = 0; i < largeSampleSize; i++) {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,433, = randomData.nextExponential(1);
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,434,"ssertTrue(""exponential deviate postive"", v > 0);"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,435,f (v < 2) cumFreq++;
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,437,"* TODO: Replace with a statistical test, with statistic added to"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,438, TestStatistic.  Check below compares observed cumulative distribution
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,439, evaluated at 2 with exponential CDF
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,441,"ssertEquals(""exponential cumulative distribution"","
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,442,"double)cumFreq/(double)largeSampleSize,0.8646647167633873,.2);"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,445,"** test reseeding, algorithm/provider games */"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,446,"ublic void testConfig() throws NoSuchProviderException,"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,447,oSuchAlgorithmException{
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,448,andomData.reSeed(1000);
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,449,"ouble v = randomData.nextUniform(0,1);"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,450,andomData.reSeed();
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,451,"ssertTrue(""different seeds"","
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,452,"ath.abs(v - randomData.nextUniform(0,1)) > 10E-12);"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,453,andomData.reSeed(1000);
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,454,"ssertEquals(""same seeds"",v,randomData.nextUniform(0,1),10E-12);"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,455,andomData.reSeedSecure(1000);
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,456,tring hex = randomData.nextSecureHexString(40);
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,457,andomData.reSeedSecure();
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,458,"ssertTrue(""different seeds"","
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,459,hex.equals(randomData.nextSecureHexString(40)));
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,460,andomData.reSeedSecure(1000);
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,461,"ssertTrue(""same seeds"","
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,462,hex.equals(randomData.nextSecureHexString(40)));
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,464,"* remove this test back soon,"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,465, since it takes about 4 seconds */
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,467,"andomData.setSecureAlgorithm(""SHA1PRNG"",""SUN"");"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,468,"ssertTrue(""different seeds"","
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,469,hex.equals(randomData.nextSecureHexString(40)));
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,470,ry {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,471,"andomData.setSecureAlgorithm(""NOSUCHTHING"",""SUN"");"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,472,"ail(""expecting NoSuchAlgorithmException"");"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,473, catch (NoSuchAlgorithmException ex) {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,477,ry {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,478,"andomData.setSecureAlgorithm(""SHA1PRNG"",""NOSUCHPROVIDER"");"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,479,"ail(""expecting NoSuchProviderException"");"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,480, catch (NoSuchProviderException ex) {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,484,/ test reseeding without first using the generators
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,485,andomDataImpl rd = new RandomDataImpl();
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,486,d.reSeed(100);
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,487,"ouble ret = rd.nextLong(1,2);"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,488,andomDataImpl rd2 = new RandomDataImpl();
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,489,d2.reSeedSecure(2000);
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,490,"et = rd2.nextSecureLong(1,2);"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,491,d = new RandomDataImpl();
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,492,d.reSeed();
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,493,"et = rd.nextLong(1,2);"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,494,d2 = new RandomDataImpl();
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,495,d2.reSeedSecure();
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,496,"et = rd2.nextSecureLong(1,2);"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,499,** tests for nextSample() sampling from Collection */
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,500,ublic void testNextSample() {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,501,"bject[][] c = {{""0"",""1""},{""0"",""2""},{""0"",""3""},{""0"",""4""},{""1"",""2""},"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,502,"""1"",""3""},{""1"",""4""},{""2"",""3""},{""2"",""4""},{""3"",""4""}};"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,503,"ouble[] observed = {0,0,0,0,0,0,0,0,0,0};"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,504,"ouble[] expected = {100,100,100,100,100,100,100,100,100,100};"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,506,"ashSet cPop = new HashSet();  //{0,1,2,3,4}"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,507,or (int i = 0; i < 5; i++) {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,508,Pop.add(Integer.toString(i));
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,511,bject[] sets = new Object[10]; // 2-sets from 5
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,512,or (int i = 0; i < 10; i ++) {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,513,ashSet hs = new HashSet();
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,514,s.add(c[i][0]);
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,515,s.add(c[i][1]);
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,516,ets[i] = hs;
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,519,or (int i = 0; i < 1000; i ++) {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,520,"bject[] cSamp = randomData.nextSample(cPop,2);"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,521,"bserved[findSample(sets,cSamp)]++;"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,524,"* Use ChiSquare dist with df = 10-1 = 9, alpha = .001"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,525, Change to 21.67 for alpha = .01
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,527,"ssertTrue(""chi-square test -- will fail about 1 in 1000 times"","
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,528,"estStatistic.chiSquare(expected,observed) < 27.88);"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,530,/ Make sure sample of size = size of collection returns same collection
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,531,ashSet hs = new HashSet();
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,532,"s.add(""one"");"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,533,"bject[] one = randomData.nextSample(hs,1);"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,534,tring oneString = (String) one[0];
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,535,"f ((one.length != 1) || !oneString.equals(""one"")){"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,536,"ail(""bad sample for set size = 1, sample size = 1"");"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,539,/ Make sure we fail for sample size > collection size
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,540,ry {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,541,"ne = randomData.nextSample(hs,2);"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,542,"ail(""sample size > set size, expecting IllegalArgumentException"");"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,543, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,547,/ Make sure we fail for empty collection
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,548,ry {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,549,s = new HashSet();
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,550,"ne = randomData.nextSample(hs,0);"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,551,"ail(""n = k = 0, expecting IllegalArgumentException"");"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,552, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,557,"rivate int findSample(Object[] u, Object[] samp) {"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,558,nt result = -1;
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,559,or (int i = 0; i < u.length; i++) {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,560,ashSet set = (HashSet) u[i];
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,561,ashSet sampSet = new HashSet();
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,562,or (int j = 0; j < samp.length; j++) {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,563,ampSet.add(samp[j]);
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,565,f (set.equals(sampSet)) {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,566,eturn i;
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,569,"ail(""sample not found:{"" + samp[0] + "","" + samp[1] + ""}"");"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,570,eturn -1;
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,573,** tests for nextPermutation */
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,574,ublic void testNextPermutation() {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,575,"nt[][] p = {{0,1,2},{0,2,1},{1,0,2},{1,2,0},{2,0,1},{2,1,0}};"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,576,"ouble[] observed = {0,0,0,0,0,0,};"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,577,"ouble[] expected = {100,100,100,100,100,100};"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,579,or (int i = 0; i < 600; i++) {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,580,"nt[] perm = randomData.nextPermutation(3,3);"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,581,"bserved[findPerm(p,perm)]++;"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,584,"* Use ChiSquare dist with df = 6-1 = 5, alpha = .001"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,585, Change to 15.09 for alpha = .01
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,587,"ssertTrue(""chi-square test -- will fail about 1 in 1000 times"","
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,588,"estStatistic.chiSquare(expected,observed) < 20.52);"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,590,/ Check size = 1 boundary case
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,591,"nt[] perm = randomData.nextPermutation(1,1);"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,592,f ((perm.length != 1) || (perm[0] != 0)){
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,593,"ail(""bad permutation for n = 1, sample k = 1"");"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,595,/ Make sure we fail for k size > n
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,596,ry {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,597,"erm = randomData.nextPermutation(2,3);"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,598,"ail(""permutation k > n, expecting IllegalArgumentException"");"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,599, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,603,/ Make sure we fail for n = 0
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,604,ry {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,605,"erm = randomData.nextPermutation(0,0);"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,606,"ail(""permutation k = n = 0, expecting IllegalArgumentException"");"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,607, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,616,"rivate int findPerm(int[][] p, int[] samp) {"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,617,nt result = -1;
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,618,or (int i = 0; i < p.length; i++) {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,619,oolean good = true;
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,620,or (int j = 0; j < samp.length; j++) {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,621,f (samp[j] != p[i][j]) {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,622,ood = false;
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,625,f (good)  {
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,626,eturn i;
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,629,"ail(""permutation not found"");"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,630,eturn -1;
False,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,2," The Apache Software License, Version 1.1"
False,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
False,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,5, reserved.
False,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,7," Redistribution and use in source and binary forms, with or without"
False,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,8," modification, are permitted provided that the following conditions"
False,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,9, are met:
False,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,11, 1. Redistributions of source code must retain the above copyright
False,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,12,"    notice, this list of conditions and the following disclaimer."
False,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,14, 2. Redistributions in binary form must reproduce the above copyright
False,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,15,"    notice, this list of conditions and the following disclaimer in"
False,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,16,    the documentation and/or other materials provided with the
False,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,17,    distribution.
False,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,19," 3. The end-user documentation included with the redistribution, if"
False,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,20,"    any, must include the following acknowledgement:"
False,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,21,"       ""This product includes software developed by the"
False,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,22,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,23,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,24,    if and wherever such third-party acknowledgements normally appear.
False,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,26," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,27,"    Foundation"" must not be used to endorse or promote products derived"
False,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,28,    from this software without prior written permission. For written
False,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,29,"    permission, please contact apache@apache.org."
False,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,31," 5. Products derived from this software may not be called ""Apache"""
False,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,32,"    nor may ""Apache"" appear in their name without prior written"
False,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,33,    permission of the Apache Software Foundation.
False,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,38, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,39," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,46, SUCH DAMAGE.
False,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,49, This software consists of voluntary contributions made by many
False,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,50, individuals on behalf of the Apache Software Foundation.  For more
False,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,51," information on the Apache Software Foundation, please see"
False,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,52, <http://www.apache.org/>.
False,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,54,ackage org.apache.commons.math.random;
False,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,56,mport junit.framework.Test;
False,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,57,mport junit.framework.TestCase;
False,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,58,mport junit.framework.TestSuite;
False,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,59,mport java.net.URL;
False,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,61,mport org.apache.commons.math.stat.Univariate;
False,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,62,mport org.apache.commons.math.stat.UnivariateImpl;
False,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,65, Test cases for the ValueServer class.
False,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,67, @version $Revision: 1.5 $ $Date: 2003/10/16 15:24:29 $
False,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,70,ublic final class ValueServerTest extends TestCase {
False,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,72,rivate ValueServer vs = new ValueServer();
False,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,74,ublic ValueServerTest(String name) {
False,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,75,uper(name);
False,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,78,ublic void setUp() {
False,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,79,s.setMode(ValueServer.DIGEST_MODE);
False,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,80,ry {
False,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,81,"RL url = getClass().getResource(""testData.txt"");"
False,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,82,s.setValuesFileURL(url.toExternalForm());
False,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,83, catch (Exception ex) {
False,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,84,"ail(""malformed test URL"");"
False,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,88,ublic static Test suite() {
False,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,89,estSuite suite = new TestSuite(ValueServerTest.class);
False,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,90,"uite.setName(""ValueServer Tests"");"
False,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,91,eturn suite;
False,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,96, Generate 1000 random values and make sure they look OK.<br>
False,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,97, Note that there is a non-zero (but very small) probability that
False,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,98, these tests will fail even if the code is working as designed.
False,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,100,ublic void testNextDigest() throws Exception{
False,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,101,ouble next = 0.0;
False,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,102,ouble tolerance = 0.1;
False,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,103,s.computeDistribution();
False,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,104,"ssertTrue(""empirical distribution property"","
False,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,105,s.getEmpiricalDistribution() != null);
False,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,106,nivariate stats = new UnivariateImpl();
False,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,107,or (int i = 1; i < 1000; i++) {
False,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,108,ext = vs.getNext();
False,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,109,tats.addValue(next);
False,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,111,"ssertEquals(""mean"", 5.069831575018909, stats.getMean(), tolerance);"
False,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,112,ssertEquals
False,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,113,"""std dev"", 1.0173699343977738, stats.getStandardDeviation(),"
False,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,114,olerance);
False,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,116,s.computeDistribution(500);
False,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,117,tats = new UnivariateImpl();
False,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,118,or (int i = 1; i < 1000; i++) {
False,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,119,ext = vs.getNext();
False,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,120,tats.addValue(next);
False,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,122,"ssertEquals(""mean"", 5.069831575018909, stats.getMean(), tolerance);"
False,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,123,ssertEquals
False,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,124,"""std dev"", 1.0173699343977738, stats.getStandardDeviation(),"
False,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,125,olerance);
False,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,130, Make sure exception thrown if digest getNext is attempted
False,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,131, before loading empiricalDistribution.
False,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,133,ublic void testNextDigestFail() throws Exception {
False,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,134,ry {
False,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,135,s.getNext();
False,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,136,"ail(""Expecting IllegalStateException"");"
False,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,137, catch (IllegalStateException ex) {;}
False,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,141, Make sure exception thrown if nextReplay() is attempted
False,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,142, before opening replay file.
False,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,144,ublic void testNextReplayFail() throws Exception {
False,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,145,ry {
False,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,146,s.setMode(ValueServer.REPLAY_MODE);
False,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,147,s.getNext();
False,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,148,"ail(""Expecting IllegalStateException"");"
False,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,149, catch (IllegalStateException ex) {;}
False,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,153, Test ValueServer REPLAY_MODE using values in testData file.<br>
False,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,154," Check that the values 1,2,1001,1002 match data file values 1 and 2."
False,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,155, the sample data file.
False,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,157,ublic void testReplay() throws Exception {
False,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,158,ouble firstDataValue = 4.038625496201205;
False,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,159,ouble secondDataValue = 3.6485326248346936;
False,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,160,ouble tolerance = 10E-15;
False,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,161,ouble compareValue = 0.0d;
False,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,162,s.setMode(ValueServer.REPLAY_MODE);
False,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,163,s.openReplayFile();
False,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,164,ompareValue = vs.getNext();
False,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,165,"ssertEquals(compareValue,firstDataValue,tolerance);"
False,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,166,ompareValue = vs.getNext();
False,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,167,"ssertEquals(compareValue,secondDataValue,tolerance);"
False,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,168,or (int i = 3; i < 1001; i++) {
False,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,169,ompareValue = vs.getNext();
False,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,171,ompareValue = vs.getNext();
False,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,172,"ssertEquals(compareValue,firstDataValue,tolerance);"
False,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,173,ompareValue = vs.getNext();
False,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,174,"ssertEquals(compareValue,secondDataValue,tolerance);"
False,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,175,s.closeReplayFile();
False,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,176,/ make sure no NPE
False,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,177,s.closeReplayFile();
False,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,181, Test other ValueServer modes
False,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,183,ublic void testModes() throws Exception {
False,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,184,s.setMode(ValueServer.CONSTANT_MODE);
False,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,185,s.setMu(0);
False,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,186,"ssertEquals(""constant mode test"",vs.getMu(),vs.getNext(),Double.MIN_VALUE);"
False,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,187,s.setMode(ValueServer.UNIFORM_MODE);
False,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,188,s.setMu(2);
False,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,189,ouble val = vs.getNext();
False,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,190,ssertTrue(val > 0 && val < 4);
False,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,191,s.setSigma(1);
False,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,192,s.setMode(ValueServer.GAUSSIAN_MODE);
False,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,193,al = vs.getNext();
False,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,194,"ssertTrue(""gaussian value close enough to mean"","
False,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,195,al < vs.getMu() + 100*vs.getSigma());
False,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,196,s.setMode(ValueServer.EXPONENTIAL_MODE);
False,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,197,al = vs.getNext();
False,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,198,ssertTrue(val > 0);
False,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,199,ry {
False,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,200,s.setMode(1000);
False,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,201,s.getNext();
False,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,202,"ail(""bad mode, expecting IllegalStateException"");"
False,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,203, catch (IllegalStateException ex) {
False,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,209, Test fill
False,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,211,ublic void testFill() throws Exception {
False,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,212,s.setMode(ValueServer.CONSTANT_MODE);
False,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,213,s.setMu(2);
False,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,214,ouble[] val = new double[5];
False,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,215,s.fill(val);
False,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,216,or (int i = 0; i < 5; i++) {
False,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,217,"ssertEquals(""fill test in place"",2,val[i],Double.MIN_VALUE);"
False,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,219,ouble v2[] = vs.fill(3);
False,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,220,or (int i = 0; i < 3; i++) {
False,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,221,"ssertEquals(""fill test in place"",2,v2[i],Double.MIN_VALUE);"
False,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,226, Test getters to make Clover happy
False,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,228,ublic void testProperties() throws Exception {
False,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,229,s.setMode(ValueServer.CONSTANT_MODE);
False,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,230,"ssertEquals(""mode test"",ValueServer.CONSTANT_MODE,vs.getMode());"
False,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,231,"s.setValuesFileURL(""http://www.apache.org"");"
False,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,232,tring s = vs.getValuesFileURL();
False,src/test/org/apache/commons/math/random/ValueServerTest.java,src/test/org/apache/commons/math/random/ValueServerTest.java,233,"ssertEquals(""valuesFileURL test"",""http://www.apache.org"",s);"
False,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,2," The Apache Software License, Version 1.1"
False,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
False,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,5, reserved.
False,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,7," Redistribution and use in source and binary forms, with or without"
False,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,8," modification, are permitted provided that the following conditions"
False,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,9, are met:
False,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,11, 1. Redistributions of source code must retain the above copyright
False,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,12,"    notice, this list of conditions and the following disclaimer."
False,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,14, 2. Redistributions in binary form must reproduce the above copyright
False,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,15,"    notice, this list of conditions and the following disclaimer in"
False,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,16,    the documentation and/or other materials provided with the
False,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,17,    distribution.
False,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,19," 3. The end-user documentation included with the redistribution, if"
False,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,20,"    any, must include the following acknowledgement:"
False,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,21,"       ""This product includes software developed by the"
False,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,22,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,23,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,24,    if and wherever such third-party acknowledgements normally appear.
False,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,26," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,27,"    Foundation"" must not be used to endorse or promote products derived"
False,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,28,    from this software without prior written permission. For written
False,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,29,"    permission, please contact apache@apache.org."
False,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,31," 5. Products derived from this software may not be called ""Apache"""
False,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,32,"    nor may ""Apache"" appear in their name without prior written"
False,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,33,    permission of the Apache Software Foundation.
False,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,38, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,39," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,46, SUCH DAMAGE.
False,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,49, This software consists of voluntary contributions made by many
False,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,50, individuals on behalf of the Apache Software Foundation.  For more
False,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,51," information on the Apache Software Foundation, please see"
False,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,52, <http://www.apache.org/>.
False,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,54,ackage org.apache.commons.math.special;
False,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,56,mport org.apache.commons.math.MathException;
False,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,57,mport org.apache.commons.math.TestUtils;
False,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,59,mport junit.framework.TestCase;
False,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,62, @version $Revision: 1.4 $ $Date: 2003/10/16 15:24:32 $
False,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,64,ublic class BetaTest extends TestCase {
False,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,66, Constructor for BetaTest.
False,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,67, @param name
False,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,69,ublic BetaTest(String name) {
False,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,70,uper(name);
False,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,73,"rivate void testRegularizedBeta(double expected, double x, double a,"
False,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,74,ouble b)
False,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,76,ry {
False,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,77,"ouble actual = Beta.regularizedBeta(x, a, b);"
False,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,78,"estUtils.assertEquals(expected, actual, 10e-5);"
False,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,79, catch(MathException ex){
False,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,80,ail(ex.getMessage());
False,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,84,"rivate void testLogBeta(double expected, double a, double b) {"
False,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,85,"ouble actual = Beta.logBeta(a, b);"
False,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,86,"estUtils.assertEquals(expected, actual, 10e-5);"
False,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,89,ublic void testRegularizedBetaNanPositivePositive() {
False,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,90,"estRegularizedBeta(Double.NaN, Double.NaN, 1.0, 1.0);"
False,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,93,ublic void testRegularizedBetaPositiveNanPositive() {
False,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,94,"estRegularizedBeta(Double.NaN, 0.5, Double.NaN, 1.0);"
False,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,97,ublic void testRegularizedBetaPositivePositiveNan() {
False,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,98,"estRegularizedBeta(Double.NaN, 0.5, 1.0, Double.NaN);"
False,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,101,ublic void testRegularizedBetaNegativePositivePositive() {
False,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,102,"estRegularizedBeta(Double.NaN, -0.5, 1.0, 2.0);"
False,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,105,ublic void testRegularizedBetaPositiveNegativePositive() {
False,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,106,"estRegularizedBeta(Double.NaN, 0.5, -1.0, 2.0);"
False,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,109,ublic void testRegularizedBetaPositivePositiveNegative() {
False,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,110,"estRegularizedBeta(Double.NaN, 0.5, 1.0, -2.0);"
False,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,113,ublic void testRegularizedBetaZeroPositivePositive() {
False,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,114,"estRegularizedBeta(0.0, 0.0, 1.0, 2.0);"
False,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,117,ublic void testRegularizedBetaPositiveZeroPositive() {
False,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,118,"estRegularizedBeta(Double.NaN, 0.5, 0.0, 2.0);"
False,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,121,ublic void testRegularizedBetaPositivePositiveZero() {
False,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,122,"estRegularizedBeta(Double.NaN, 0.5, 1.0, 0.0);"
False,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,125,ublic void testRegularizedBetaPositivePositivePositive() {
False,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,126,"estRegularizedBeta(0.75, 0.5, 1.0, 2.0);"
False,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,129,ublic void testLogBetaNanPositive() {
False,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,130,"estLogBeta(Double.NaN, Double.NaN, 2.0);"
False,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,133,ublic void testLogBetaPositiveNan() {
False,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,134,"estLogBeta(Double.NaN, 1.0, Double.NaN);"
False,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,137,ublic void testLogBetaNegativePositive() {
False,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,138,"estLogBeta(Double.NaN, -1.0, 2.0);"
False,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,141,ublic void testLogBetaPositiveNegative() {
False,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,142,"estLogBeta(Double.NaN, 1.0, -2.0);"
False,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,145,ublic void testLogBetaZeroPositive() {
False,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,146,"estLogBeta(Double.NaN, 0.0, 2.0);"
False,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,149,ublic void testLogBetaPositiveZero() {
False,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,150,"estLogBeta(Double.NaN, 1.0, 0.0);"
False,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,153,ublic void testLogBetaPositivePositive() {
False,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,154,"estLogBeta(-0.693147, 1.0, 2.0);"
False,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,2," The Apache Software License, Version 1.1"
False,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
False,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,5, reserved.
False,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,7," Redistribution and use in source and binary forms, with or without"
False,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,8," modification, are permitted provided that the following conditions"
False,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,9, are met:
False,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,11, 1. Redistributions of source code must retain the above copyright
False,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,12,"    notice, this list of conditions and the following disclaimer."
False,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,14, 2. Redistributions in binary form must reproduce the above copyright
False,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,15,"    notice, this list of conditions and the following disclaimer in"
False,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,16,    the documentation and/or other materials provided with the
False,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,17,    distribution.
False,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,19," 3. The end-user documentation included with the redistribution, if"
False,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,20,"    any, must include the following acknowledgement:"
False,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,21,"       ""This product includes software developed by the"
False,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,22,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,23,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,24,    if and wherever such third-party acknowledgements normally appear.
False,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,26," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,27,"    Foundation"" must not be used to endorse or promote products derived"
False,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,28,    from this software without prior written permission. For written
False,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,29,"    permission, please contact apache@apache.org."
False,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,31," 5. Products derived from this software may not be called ""Apache"""
False,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,32,"    nor may ""Apache"" appear in their name without prior written"
False,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,33,    permission of the Apache Software Foundation.
False,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,38, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,39," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,46, SUCH DAMAGE.
False,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,49, This software consists of voluntary contributions made by many
False,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,50, individuals on behalf of the Apache Software Foundation.  For more
False,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,51," information on the Apache Software Foundation, please see"
False,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,52, <http://www.apache.org/>.
False,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,54,ackage org.apache.commons.math.special;
False,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,56,mport org.apache.commons.math.MathException;
False,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,57,mport org.apache.commons.math.TestUtils;
False,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,59,mport junit.framework.TestCase;
False,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,62, @version $Revision: 1.5 $ $Date: 2003/10/16 15:24:32 $
False,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,64,ublic class GammaTest extends TestCase {
False,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,66, Constructor for BetaTest.
False,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,67, @param name
False,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,69,ublic GammaTest(String name) {
False,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,70,uper(name);
False,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,73,"rivate void testRegularizedGamma(double expected, double a, double x) {"
False,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,74,ry {
False,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,75,"ouble actual = Gamma.regularizedGammaP(a, x);"
False,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,76,"estUtils.assertEquals(expected, actual, 10e-5);"
False,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,77, catch(MathException ex){
False,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,78,ail(ex.getMessage());
False,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,82,"rivate void testLogGamma(double expected, double x) {"
False,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,83,ouble actual = Gamma.logGamma(x);
False,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,84,"estUtils.assertEquals(expected, actual, 10e-5);"
False,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,87,ublic void testRegularizedGammaNanPositive() {
False,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,88,"estRegularizedGamma(Double.NaN, Double.NaN, 1.0);"
False,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,91,ublic void testRegularizedGammaPositiveNan() {
False,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,92,"estRegularizedGamma(Double.NaN, 1.0, Double.NaN);"
False,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,95,ublic void testRegularizedGammaNegativePositive() {
False,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,96,"estRegularizedGamma(Double.NaN, -1.5, 1.0);"
False,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,99,ublic void testRegularizedGammaPositiveNegative() {
False,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,100,"estRegularizedGamma(Double.NaN, 1.0, -1.0);"
False,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,103,ublic void testRegularizedGammaZeroPositive() {
False,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,104,"estRegularizedGamma(Double.NaN, 0.0, 1.0);"
False,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,107,ublic void testRegularizedGammaPositiveZero() {
False,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,108,"estRegularizedGamma(0.0, 1.0, 0.0);"
False,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,111,ublic void testRegularizedGammaPositivePositive() {
False,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,112,"estRegularizedGamma(0.632121, 1.0, 1.0);"
False,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,115,ublic void testLogGammaNan() {
False,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,116,"estLogGamma(Double.NaN, Double.NaN);"
False,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,119,ublic void testLogGammaNegative() {
False,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,120,"estLogGamma(Double.NaN, -1.0);"
False,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,123,ublic void testLogGammaZero() {
False,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,124,"estLogGamma(Double.NaN, 0.0);"
False,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,127,ublic void testLogGammaPositive() {
False,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,128,"estLogGamma(0.693147, 3.0);"
False,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,2," The Apache Software License, Version 1.1"
False,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
False,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,5, reserved.
False,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,7," Redistribution and use in source and binary forms, with or without"
False,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,8," modification, are permitted provided that the following conditions"
False,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,9, are met:
False,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,11, 1. Redistributions of source code must retain the above copyright
False,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,12,"    notice, this list of conditions and the following disclaimer."
False,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,14, 2. Redistributions in binary form must reproduce the above copyright
False,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,15,"    notice, this list of conditions and the following disclaimer in"
False,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,16,    the documentation and/or other materials provided with the
False,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,17,    distribution.
False,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,19," 3. The end-user documentation included with the redistribution, if"
False,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,20,"    any, must include the following acknowledgement:"
False,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,21,"       ""This product includes software developed by the"
False,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,22,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,23,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,24,    if and wherever such third-party acknowledgements normally appear.
False,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,26," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,27,"    Foundation"" must not be used to endorse or promote products derived"
False,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,28,    from this software without prior written permission. For written
False,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,29,"    permission, please contact apache@apache.org."
False,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,31," 5. Products derived from this software may not be called ""Apache"""
False,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,32,"    nor may ""Apache"" appear in their name without prior written"
False,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,33,    permission of the Apache Software Foundation.
False,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,38, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,39," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,46, SUCH DAMAGE.
False,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,49, This software consists of voluntary contributions made by many
False,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,50, individuals on behalf of the Apache Software Foundation.  For more
False,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,51," information on the Apache Software Foundation, please see"
False,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,52, <http://www.apache.org/>.
False,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,54,ackage org.apache.commons.math.stat;
False,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,56,mport java.util.ArrayList;
False,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,57,mport java.util.List;
False,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,59,mport junit.framework.Test;
False,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,60,mport junit.framework.TestCase;
False,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,61,mport junit.framework.TestSuite;
False,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,63,mport org.apache.commons.math.beans.*;
False,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,66, Test cases for the {@link BeanListUnivariateImpl} class.
False,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,68, @version $Revision: 1.7 $ $Date: 2003/10/16 15:24:28 $
False,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,71,ublic final class BeanListUnivariateImplTest extends TestCase {
False,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,73,rivate List patientList = null;
False,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,74,rivate double tolerance = Double.MIN_VALUE;
False,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,76,ublic BeanListUnivariateImplTest(String name) {
False,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,77,uper(name);
False,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,80,ublic void setUp() {
False,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,81,atientList = new ArrayList();
False,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,83,/ Create and add patient bean 1
False,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,84,"italStats vs1 = new VitalStats( new Double(120.0),"
False,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,85,ew Double(96.4) );
False,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,86,"atient p1 = new Patient( vs1, new Integer( 35 ) );"
False,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,87,atientList.add( p1 );
False,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,89,/ Create and add patient bean 2
False,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,90,"italStats vs2 = new VitalStats( new Double(70.0),"
False,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,91,ew Double(97.4) );
False,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,92,"atient p2 = new Patient( vs2, new Integer( 23 ) );"
False,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,93,atientList.add( p2 );
False,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,95,/ Create and add patient bean 3
False,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,96,"italStats vs3 = new VitalStats( new Double(90.0),"
False,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,97,ew Double(98.6) );
False,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,98,"atient p3 = new Patient( vs3, new Integer( 42 ) );"
False,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,99,atientList.add( p3 );
False,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,102,ublic static Test suite() {
False,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,103,estSuite suite = new TestSuite(BeanListUnivariateImplTest.class);
False,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,104,"uite.setName(""Frequency Tests"");"
False,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,105,eturn suite;
False,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,108,** test stats */
False,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,109,ublic void testStats() {
False,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,111,toreUnivariate u = new BeanListUnivariateImpl( patientList );
False,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,113,"ssertEquals(""total count"",3,u.getN(),tolerance);"
False,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,115,.clear();
False,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,116,"ssertEquals(""total count"",0,u.getN(),tolerance);"
False,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,119,ublic void testPropStats() {
False,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,121,"toreUnivariate heartU = new BeanListUnivariateImpl( patientList,"
False,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,122,"vitalStats.heartRate"" );"
False,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,126,"ssertEquals( ""Mean heart rate unexpected"", 93.333,"
False,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,127,"eartU.getMean(), 0.001 );"
False,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,128,"ssertEquals( ""Max heart rate unexpected"", 120.0,"
False,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,129,"eartU.getMax(), 0.001 );"
False,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,131,"toreUnivariate ageU = new BeanListUnivariateImpl( patientList,"
False,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,132,"age"" );"
False,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,134,"ssertEquals( ""Mean age unexpected"", 33.333,"
False,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,135,"geU.getMean(), 0.001 );"
False,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,136,"ssertEquals( ""Max age unexpected"", 42.0,"
False,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,137,"geU.getMax(), 0.001 );"
False,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,141,ublic void testSetPropertyName(){
False,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,142,eanListUnivariateImpl u = new BeanListUnivariateImpl(null);
False,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,143,"tring expected = ""property"";"
False,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,144,.setPropertyName(expected);
False,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/BeanListUnivariateImplTest.java,145,"ssertEquals(expected, u.getPropertyName());"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,2," The Apache Software License, Version 1.1"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,5, reserved.
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,7," Redistribution and use in source and binary forms, with or without"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,8," modification, are permitted provided that the following conditions"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,9, are met:
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,11, 1. Redistributions of source code must retain the above copyright
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,12,"    notice, this list of conditions and the following disclaimer."
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,14, 2. Redistributions in binary form must reproduce the above copyright
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,15,"    notice, this list of conditions and the following disclaimer in"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,16,    the documentation and/or other materials provided with the
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,17,    distribution.
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,19," 3. The end-user documentation included with the redistribution, if"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,20,"    any, must include the following acknowledgement:"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,21,"       ""This product includes software developed by the"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,22,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,23,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,24,    if and wherever such third-party acknowledgements normally appear.
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,26," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,27,"    Foundation"" must not be used to endorse or promote products derived"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,28,    from this software without prior written permission. For written
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,29,"    permission, please contact apache@apache.org."
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,31," 5. Products derived from this software may not be called ""Apache"""
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,32,"    nor may ""Apache"" appear in their name without prior written"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,33,    permission of the Apache Software Foundation.
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,38, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,39," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,46, SUCH DAMAGE.
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,49, This software consists of voluntary contributions made by many
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,50, individuals on behalf of the Apache Software Foundation.  For more
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,51," information on the Apache Software Foundation, please see"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,52, <http://www.apache.org/>.
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,54,ackage org.apache.commons.math.stat;
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,56,mport junit.framework.Test;
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,57,mport junit.framework.TestCase;
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,58,mport junit.framework.TestSuite;
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,60, Test cases for the TestStatistic class.
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,62, @version $Revision: 1.6 $ $Date: 2003/10/16 15:24:28 $
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,65,ublic final class BivariateRegressionTest extends TestCase {
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,68," NIST ""Norris"" refernce data set from"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,69, http://www.itl.nist.gov/div898/strd/lls/data/LINKS/DATA/Norris.dat
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,70," Strangely, order is {y,x}"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,72,"rivate double[][] data = {{0.1,0.2},{338.8,337.4},{118.1,118.2},"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,73,"888.0,884.6},{9.2,10.1},{228.1,226.5},{668.5,666.3},{998.5,996.3},"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,74,"449.1,448.6},{778.9,777.0},{559.2,558.2},{0.3,0.4},{0.1,0.6},"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,75,"778.1,775.5},{668.8,666.9},{339.3,338.0},{448.9,447.5},{10.8,11.6},"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,76,"557.7,556.0},{228.3,228.1},{998.0,995.8},{888.8,887.6},{119.6,120.2},"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,77,"0.3,0.3},{0.6,0.3},{557.6,556.8},{339.3,339.1},{888.0,887.2},"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,78,"998.5,999.0},{778.9,779.0},{10.2,11.1},{117.6,118.3},{228.9,229.2},"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,79,"668.4,669.1},{449.2,448.9},{0.2,0.5}};"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,82, Correlation example from
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,83, http://www.xycoon.com/correlation.htm
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,85,"rivate double[][] corrData = {{101.0,99.2},{100.1,99.0},{100.0,100.0},"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,86,"90.6,111.6},{86.5,122.2},{89.7,117.6},{90.6,121.1},{82.8,136.0},"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,87,"70.1,154.2},{65.4,153.6},{61.3,158.5},{62.5,140.6},{63.6,136.2},"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,88,"52.6,168.0},{59.7,154.3},{59.5,149.0},{61.3,165.5}};"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,91," From Moore and Mcabe, ""Introduction to the Practice of Statistics"""
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,92, Example 10.3
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,94,"rivate double[][] infData = {{15.6,5.2},{26.8,6.1},{37.8,8.7},{36.4,8.5},"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,95,"35.5,8.8},{18.6,4.9},{15.3,4.5},{7.9,2.5},{0.0,1.1}};"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,98, From http://www.xycoon.com/simple_linear_regression.htm
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,100,"rivate double[][] infData2 = {{1,3},{2,5},{3,7},{4,14},{5,11}};"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,102,ublic BivariateRegressionTest(String name) {
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,103,uper(name);
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,106,ublic void setUp() {
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,109,ublic static Test suite() {
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,110,estSuite suite = new TestSuite(BivariateRegressionTest.class);
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,111,"uite.setName(""BivariateRegression Tests"");"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,112,eturn suite;
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,115,ublic void testNorris() {
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,116,ivariateRegression regression = new BivariateRegression();
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,117,or (int i = 0; i < data.length; i++) {
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,118,"egression.addData(data[i][1],data[i][0]);"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,120,"ssertEquals(""slope"",1.00211681802045,"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,121,"egression.getSlope(),10E-12);"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,122,"ssertEquals(""slope std err"",0.429796848199937E-03,"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,123,"egression.getSlopeStdErr(),10E-12);"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,124,"ssertEquals(""number of observations"",36,regression.getN());"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,125,"ssertEquals(""intercept"", -0.262323073774029,"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,126,"egression.getIntercept(),10E-12);"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,127,"ssertEquals(""std err intercept"", 0.232818234301152,"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,128,"egression.getInterceptStdErr(),10E-12);"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,129,"ssertEquals(""r-square"",0.999993745883712,"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,130,"egression.getRSquare(),10E-12);"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,131,"ssertEquals(""SSR"",4255954.13232369,"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,132,"egression.getRegressionSumSquares(),10E-9);"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,133,"ssertEquals(""MSE"",0.782864662630069,"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,134,"egression.getMeanSquareError(),10E-10);"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,135,"ssertEquals(""SSE"",26.6173985294224,"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,136,"egression.getSumSquaredErrors(),10E-9);"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,137,"ssertEquals(""predict(0)"",-0.262323073774029,"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,138,"egression.predict(0),10E-12);"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,139,"ssertEquals(""predict(1)"",1.00211681802045-0.262323073774029,"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,140,"egression.predict(1),10E-12);"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,143,ublic void testCorr() {
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,144,ivariateRegression regression = new BivariateRegression();
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,145,egression.addData(corrData);
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,146,"ssertEquals(""number of observations"",17,regression.getN());"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,147,"ssertEquals(""r-square"",.896123,"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,148,"egression.getRSquare(),10E-6);"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,149,"ssertEquals(""r"",-.946638,"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,150,"egression.getR(),10E-6);"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,153,ublic void testNaNs() {
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,155,ivariateRegression regression = new BivariateRegression();
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,157,"ssertTrue(""intercept not NaN"",Double.isNaN(regression.getIntercept()));"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,158,"ssertTrue(""slope not NaN"",Double.isNaN(regression.getSlope()));"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,159,"ssertTrue(""slope std err not NaN"","
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,160,ouble.isNaN(regression.getSlopeStdErr()));
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,161,"ssertTrue(""intercept std err not NaN"","
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,162,ouble.isNaN(regression.getInterceptStdErr()));
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,163,"ssertTrue(""MSE not NaN"",Double.isNaN(regression.getMeanSquareError()));"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,164,"ssertTrue(""e not NaN"",Double.isNaN(regression.getR()));"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,165,"ssertTrue(""r-square not NaN"",Double.isNaN(regression.getRSquare()));"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,166,"ssertTrue(""RSS not NaN"","
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,167,ouble.isNaN(regression.getRegressionSumSquares()));
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,168,"ssertTrue(""SSE not NaN"",Double.isNaN(regression.getSumSquaredErrors()));"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,169,"ssertTrue(""SSTO not NaN"",Double.isNaN(regression.getTotalSumSquares()));"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,170,"ssertTrue(""predict not NaN"",Double.isNaN(regression.predict(0)));"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,172,"egression.addData(1,2);"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,173,"egression.addData(1,3);"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,175,"/ No x variation, so these should still blow..."
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,176,"ssertTrue(""intercept not NaN"",Double.isNaN(regression.getIntercept()));"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,177,"ssertTrue(""slope not NaN"",Double.isNaN(regression.getSlope()));"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,178,"ssertTrue(""slope std err not NaN"","
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,179,ouble.isNaN(regression.getSlopeStdErr()));
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,180,"ssertTrue(""intercept std err not NaN"","
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,181,ouble.isNaN(regression.getInterceptStdErr()));
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,182,"ssertTrue(""MSE not NaN"",Double.isNaN(regression.getMeanSquareError()));"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,183,"ssertTrue(""e not NaN"",Double.isNaN(regression.getR()));"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,184,"ssertTrue(""r-square not NaN"",Double.isNaN(regression.getRSquare()));"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,185,"ssertTrue(""RSS not NaN"","
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,186,ouble.isNaN(regression.getRegressionSumSquares()));
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,187,"ssertTrue(""SSE not NaN"",Double.isNaN(regression.getSumSquaredErrors()));"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,188,"ssertTrue(""predict not NaN"",Double.isNaN(regression.predict(0)));"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,190,/ but SSTO should be OK
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,191,"ssertTrue(""SSTO NaN"",!Double.isNaN(regression.getTotalSumSquares()));"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,193,egression = new BivariateRegression();
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,195,"egression.addData(1,2);"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,196,"egression.addData(3,3);"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,198,"/ All should be OK except MSE, s(b0), s(b1) which need one more df"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,199,"ssertTrue(""interceptNaN"",!Double.isNaN(regression.getIntercept()));"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,200,"ssertTrue(""slope NaN"",!Double.isNaN(regression.getSlope()));"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,201,"ssertTrue(""slope std err not NaN"","
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,202,ouble.isNaN(regression.getSlopeStdErr()));
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,203,"ssertTrue(""intercept std err not NaN"","
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,204,ouble.isNaN(regression.getInterceptStdErr()));
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,205,"ssertTrue(""MSE not NaN"",Double.isNaN(regression.getMeanSquareError()));"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,206,"ssertTrue(""r NaN"",!Double.isNaN(regression.getR()));"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,207,"ssertTrue(""r-square NaN"",!Double.isNaN(regression.getRSquare()));"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,208,"ssertTrue(""RSS NaN"","
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,209,Double.isNaN(regression.getRegressionSumSquares()));
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,210,"ssertTrue(""SSE NaN"",!Double.isNaN(regression.getSumSquaredErrors()));"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,211,"ssertTrue(""SSTO NaN"",!Double.isNaN(regression.getTotalSumSquares()));"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,212,"ssertTrue(""predict NaN"",!Double.isNaN(regression.predict(0)));"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,214,"egression.addData(1,4);"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,216,"/ MSE, MSE, s(b0), s(b1) should all be OK now"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,217,"ssertTrue(""MSE NaN"",!Double.isNaN(regression.getMeanSquareError()));"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,218,"ssertTrue(""slope std err NaN"","
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,219,Double.isNaN(regression.getSlopeStdErr()));
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,220,"ssertTrue(""intercept std err NaN"","
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,221,Double.isNaN(regression.getInterceptStdErr()));
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,224,ublic void testClear() {
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,225,ivariateRegression regression = new BivariateRegression();
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,226,egression.addData(corrData);
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,227,"ssertEquals(""number of observations"",17,regression.getN());"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,228,egression.clear();
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,229,"ssertEquals(""number of observations"",0,regression.getN());"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,230,egression.addData(corrData);
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,231,"ssertEquals(""r-square"",.896123,regression.getRSquare(),10E-6);"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,232,egression.addData(data);
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,233,"ssertEquals(""number of observations"",53,regression.getN());"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,236,ublic void testInference() {
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,237,ivariateRegression regression = new BivariateRegression();
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,238,egression.addData(infData);
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,239,"ssertEquals(""slope confidence interval"", 0.0271,"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,240,"egression.getSlopeConfidenceInterval(),0.0001);"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,241,"ssertEquals(""slope std err"",0.01146,"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,242,"egression.getSlopeStdErr(),0.0001);"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,244,egression = new BivariateRegression();
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,245,egression.addData(infData2);
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,246,"ssertEquals(""significance"", 0.023331,"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,247,"egression.getSignificance(),0.0001);"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,249,/FIXME: get a real example to test against with alpha = .01
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,250,"ssertTrue(""tighter means wider"","
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,251,egression.getSlopeConfidenceInterval() <
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,252,egression.getSlopeConfidenceInterval(0.01));
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,254,ry {
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,255,ouble x = regression.getSlopeConfidenceInterval(1);
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,256,"ail(""expecting IllegalArgumentException for alpha = 1"");"
False,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,src/test/org/apache/commons/math/stat/BivariateRegressionTest.java,257, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,2," The Apache Software License, Version 1.1"
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,5, reserved.
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,7," Redistribution and use in source and binary forms, with or without"
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,8," modification, are permitted provided that the following conditions"
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,9, are met:
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,11, 1. Redistributions of source code must retain the above copyright
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,12,"    notice, this list of conditions and the following disclaimer."
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,14, 2. Redistributions in binary form must reproduce the above copyright
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,15,"    notice, this list of conditions and the following disclaimer in"
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,16,    the documentation and/or other materials provided with the
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,17,    distribution.
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,19," 3. The end-user documentation included with the redistribution, if"
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,20,"    any, must include the following acknowledgement:"
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,21,"       ""This product includes software developed by the"
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,22,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,23,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,24,    if and wherever such third-party acknowledgements normally appear.
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,26," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,27,"    Foundation"" must not be used to endorse or promote products derived"
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,28,    from this software without prior written permission. For written
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,29,"    permission, please contact apache@apache.org."
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,31," 5. Products derived from this software may not be called ""Apache"""
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,32,"    nor may ""Apache"" appear in their name without prior written"
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,33,    permission of the Apache Software Foundation.
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,38, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,39," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,46, SUCH DAMAGE.
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,49, This software consists of voluntary contributions made by many
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,50, individuals on behalf of the Apache Software Foundation.  For more
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,51," information on the Apache Software Foundation, please see"
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,52, <http://www.apache.org/>.
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,54,ackage org.apache.commons.math.stat;
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,56,mport junit.framework.Test;
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,57,mport junit.framework.TestCase;
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,58,mport junit.framework.TestSuite;
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,60,mport java.io.BufferedReader;
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,61,mport java.io.FileNotFoundException;
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,62,mport java.io.IOException;
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,63,mport java.io.InputStreamReader;
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,64,mport org.apache.commons.logging.*;
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,66, Test cases for the {@link Univariate} class.
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,67, @version $Revision: 1.9 $ $Date: 2003/10/16 15:24:28 $
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,69,ublic class CertifiedDataTest extends TestCase {
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,71,rotected Univariate u = null;
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,73,rotected double mean = Double.NaN;
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,75,rotected double std = Double.NaN;
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,77,rotected Log log = LogFactory.getLog(this.getClass());
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,80, Certified Data Test Constructor
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,81, @param name
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,83,ublic CertifiedDataTest(String name) {
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,84,uper(name);
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,87,* (non-Javadoc)
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,88, @see junit.framework.TestCase#setUp()
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,90,ublic void setUp() {
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,94, @return The test suite
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,96,ublic static Test suite() {
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,97,estSuite suite = new TestSuite(CertifiedDataTest.class);
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,98,"uite.setName(""Certified Tests"");"
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,99,eturn suite;
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,103, Test UnivariateImpl
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,105,ublic void testUnivariateImpl() {
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,107, = new UnivariateImpl();
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,109,"oadStats(""data/Lew.txt"");"
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,110,"ssertEquals(""Lew: std"", std, u.getStandardDeviation(), .000000000001);"
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,111,"ssertEquals(""Lew: mean"", mean, u.getMean(), .000000000001);"
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,113,"oadStats(""data/Lottery.txt"");"
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,114,"ssertEquals(""Lottery: std"", std, u.getStandardDeviation(), .000000000001);"
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,115,"ssertEquals(""Lottery: mean"", mean, u.getMean(), .000000000001);"
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,117,"oadStats(""data/PiDigits.txt"");"
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,118,"ssertEquals(""PiDigits: std"", std, u.getStandardDeviation(), .0000000000001);"
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,119,"ssertEquals(""PiDigits: mean"", mean, u.getMean(), .0000000000001);"
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,121,"oadStats(""data/Mavro.txt"");"
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,122,"ssertEquals(""Mavro: std"", std, u.getStandardDeviation(), .00000000000001);"
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,123,"ssertEquals(""Mavro: mean"", mean, u.getMean(), .00000000000001);"
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,125,"/loadStats(""data/Michelso.txt"");"
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,126,"/assertEquals(""Michelso: std"", std, u.getStandardDeviation(), .00000000000001);"
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,127,"/assertEquals(""Michelso: mean"", mean, u.getMean(), .00000000000001);"
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,129,"oadStats(""data/NumAcc1.txt"");"
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,130,"ssertEquals(""NumAcc1: std"", std, u.getStandardDeviation(), .00000000000001);"
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,131,"ssertEquals(""NumAcc1: mean"", mean, u.getMean(), .00000000000001);"
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,133,"/loadStats(""data/NumAcc2.txt"");"
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,134,"/assertEquals(""NumAcc2: std"", std, u.getStandardDeviation(), .000000001);"
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,135,"/assertEquals(""NumAcc2: mean"", mean, u.getMean(), .00000000000001);"
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,139, Test UnivariateImpl
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,141,ublic void testStoredUnivariateImpl() {
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,143, = new StoreUnivariateImpl();
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,145,"oadStats(""data/Lew.txt"");"
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,146,"ssertEquals(""Lew: std"", std, u.getStandardDeviation(), .000000000001);"
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,147,"ssertEquals(""Lew: mean"", mean, u.getMean(), .000000000001);"
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,149,"oadStats(""data/Lottery.txt"");"
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,150,"ssertEquals(""Lottery: std"", std, u.getStandardDeviation(), .000000000001);"
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,151,"ssertEquals(""Lottery: mean"", mean, u.getMean(), .000000000001);"
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,153,"oadStats(""data/PiDigits.txt"");"
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,154,"ssertEquals(""PiDigits: std"", std, u.getStandardDeviation(), .0000000000001);"
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,155,"ssertEquals(""PiDigits: mean"", mean, u.getMean(), .0000000000001);"
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,157,"oadStats(""data/Mavro.txt"");"
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,158,"ssertEquals(""Mavro: std"", std, u.getStandardDeviation(), .00000000000001);"
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,159,"ssertEquals(""Mavro: mean"", mean, u.getMean(), .00000000000001);"
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,161,"/loadStats(""data/Michelso.txt"");"
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,162,"/assertEquals(""Michelso: std"", std, u.getStandardDeviation(), .00000000000001);"
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,163,"/assertEquals(""Michelso: mean"", mean, u.getMean(), .00000000000001);"
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,165,"oadStats(""data/NumAcc1.txt"");"
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,166,"ssertEquals(""NumAcc1: std"", std, u.getStandardDeviation(), .00000000000001);"
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,167,"ssertEquals(""NumAcc1: mean"", mean, u.getMean(), .00000000000001);"
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,169,"/loadStats(""data/NumAcc2.txt"");"
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,170,"/assertEquals(""NumAcc2: std"", std, u.getStandardDeviation(), .000000001);"
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,171,"/assertEquals(""NumAcc2: mean"", mean, u.getMean(), .00000000000001);"
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,175, loads a Univariate off of a test file
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,176, @param file
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,178,rivate void loadStats(String resource) {
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,180,ry {
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,182,.clear();
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,183,ean = Double.NaN;
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,184,td = Double.NaN;
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,186,ufferedReader in =
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,187,ew BufferedReader(
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,188,ew InputStreamReader(
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,189,etClass().getResourceAsStream(resource)));
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,191,tring line = null;
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,193,or (int j = 0; j < 60; j++) {
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,194,ine = in.readLine();
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,195,f (j == 40) {
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,196,ean =
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,197,ouble.parseDouble(
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,198,"ine.substring(line.lastIndexOf("":"") + 1).trim());"
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,200,f (j == 41) {
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,201,td =
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,202,ouble.parseDouble(
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,203,"ine.substring(line.lastIndexOf("":"") + 1).trim());"
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,207,ine = in.readLine();
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,209,hile (line != null) {
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,211,.addValue(Double.parseDouble(line.trim()));
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,212,ine = in.readLine();
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,215,n.close();
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,217, catch (FileNotFoundException fnfe) {
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,218,"og.error(fnfe.getMessage(), fnfe);"
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,219, catch (IOException ioe) {
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,220,"og.error(ioe.getMessage(), ioe);"
False,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,2," The Apache Software License, Version 1.1"
False,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
False,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,5, reserved.
False,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,7," Redistribution and use in source and binary forms, with or without"
False,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,8," modification, are permitted provided that the following conditions"
False,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,9, are met:
False,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,11, 1. Redistributions of source code must retain the above copyright
False,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,12,"    notice, this list of conditions and the following disclaimer."
False,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,14, 2. Redistributions in binary form must reproduce the above copyright
False,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,15,"    notice, this list of conditions and the following disclaimer in"
False,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,16,    the documentation and/or other materials provided with the
False,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,17,    distribution.
False,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,19," 3. The end-user documentation included with the redistribution, if"
False,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,20,"    any, must include the following acknowledgement:"
False,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,21,"       ""This product includes software developed by the"
False,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,22,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,23,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,24,    if and wherever such third-party acknowledgements normally appear.
False,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,26," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,27,"    Foundation"" must not be used to endorse or promote products derived"
False,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,28,    from this software without prior written permission. For written
False,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,29,"    permission, please contact apache@apache.org."
False,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,31," 5. Products derived from this software may not be called ""Apache"""
False,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,32,"    nor may ""Apache"" appear in their name without prior written"
False,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,33,    permission of the Apache Software Foundation.
False,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,38, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,39," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,46, SUCH DAMAGE.
False,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,49, This software consists of voluntary contributions made by many
False,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,50, individuals on behalf of the Apache Software Foundation.  For more
False,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,51," information on the Apache Software Foundation, please see"
False,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,52, <http://www.apache.org/>.
False,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,54,ackage org.apache.commons.math.stat;
False,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,56,mport java.io.BufferedReader;
False,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,57,mport java.io.IOException;
False,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,58,mport java.io.StringReader;
False,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,60,mport junit.framework.Test;
False,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,61,mport junit.framework.TestCase;
False,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,62,mport junit.framework.TestSuite;
False,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,65, Test cases for the {@link Frequency} class.
False,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,67, @version $Revision: 1.5 $ $Date: 2003/10/16 15:24:28 $
False,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,70,ublic final class FrequencyTest extends TestCase {
False,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,71,rivate long oneL = 1;
False,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,72,rivate long twoL = 2;
False,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,73,rivate int oneI = 1;
False,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,74,rivate int twoI = 2;
False,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,75,"rivate String oneS = ""1"";"
False,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,76,"rivate String twoS = ""2"";"
False,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,77,rivate double tolerance = 10E-15;
False,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,79,ublic FrequencyTest(String name) {
False,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,80,uper(name);
False,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,83,ublic void setUp() {
False,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,86,ublic static Test suite() {
False,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,87,estSuite suite = new TestSuite(FrequencyTest.class);
False,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,88,"uite.setName(""Frequency Tests"");"
False,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,89,eturn suite;
False,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,92,** test freq counts */
False,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,93,ublic void testCounts() {
False,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,94,"requency f = new Frequency(""test counts"");"
False,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,95,"ssertEquals(""total count"",0,f.getSumFreq());"
False,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,96,.addValue(oneL);
False,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,97,.addValue(twoL);
False,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,98,.addValue(oneS);
False,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,99,.addValue(oneI);
False,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,100,"ssertEquals(""one frequency count"",3,f.getCount(""1""));"
False,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,101,"ssertEquals(""two frequency count"",1,f.getCount(""2""));"
False,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,102,"ssertEquals(""foo frequency count"",0,f.getCount(""foo""));"
False,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,103,"ssertEquals(""total count"",4,f.getSumFreq());"
False,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,104,.clear();
False,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,105,"ssertEquals(""total count"",0,f.getSumFreq());"
False,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,108,** test pcts */
False,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,109,ublic void testPcts() {
False,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,110,"requency f = new Frequency(""test pcts"");"
False,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,111,.addValue(oneL);
False,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,112,.addValue(twoL);
False,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,113,.addValue(oneI);
False,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,114,.addValue(twoI);
False,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,115,".addValue(""foo"");"
False,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,116,".addValue(""foo"");"
False,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,117,".addValue(""foo"");"
False,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,118,".addValue(""foo"");"
False,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,119,"ssertEquals(""one pct"",0.25,f.getPct(""1""),tolerance);"
False,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,120,"ssertEquals(""two pct"",0.25,f.getPct(""2""),tolerance);"
False,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,121,"ssertEquals(""foo pct"",0.5,f.getPct(""foo""),tolerance);"
False,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,122,"ssertEquals(""bar pct"",0,f.getPct(""bar""),tolerance);"
False,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,128,ublic void testToString(){
False,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,129,"requency f = new Frequency(""test toString"");"
False,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,130,.addValue(oneL);
False,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,131,.addValue(twoL);
False,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,132,.addValue(oneI);
False,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,133,.addValue(twoI);
False,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,135,tring s = f.toString();
False,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,136,ssertNotNull(s);
False,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,137,ufferedReader reader = new BufferedReader(new StringReader(s));
False,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,138,ry {
False,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,139,tring line = reader.readLine(); // header line
False,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,140,ssertNotNull(line);
False,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,142,ine = reader.readLine(); // one's or two's line
False,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,143,ssertNotNull(line);
False,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,145,ine = reader.readLine(); // one's or two's line
False,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,146,ssertNotNull(line);
False,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,148,ine = reader.readLine(); // no more elements
False,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,149,ssertNull(line);
False,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,150, catch(IOException ex){
False,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,151,ail(ex.getMessage());
False,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,158,ublic void testSetName(){
False,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,159,"tring name = ""name"";"
False,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,160,requency f = new Frequency();
False,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,161,.setName(name);
False,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,162,"ssertEquals(name, f.getName());"
False,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,2," The Apache Software License, Version 1.1"
False,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
False,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,5, reserved.
False,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,7," Redistribution and use in source and binary forms, with or without"
False,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,8," modification, are permitted provided that the following conditions"
False,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,9, are met:
False,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,11, 1. Redistributions of source code must retain the above copyright
False,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,12,"    notice, this list of conditions and the following disclaimer."
False,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,14, 2. Redistributions in binary form must reproduce the above copyright
False,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,15,"    notice, this list of conditions and the following disclaimer in"
False,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,16,    the documentation and/or other materials provided with the
False,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,17,    distribution.
False,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,19," 3. The end-user documentation included with the redistribution, if"
False,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,20,"    any, must include the following acknowledgement:"
False,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,21,"       ""This product includes software developed by the"
False,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,22,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,23,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,24,    if and wherever such third-party acknowledgements normally appear.
False,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,26," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,27,"    Foundation"" must not be used to endorse or promote products derived"
False,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,28,    from this software without prior written permission. For written
False,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,29,"    permission, please contact apache@apache.org."
False,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,31," 5. Products derived from this software may not be called ""Apache"""
False,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,32,"    nor may ""Apache"" appear in their name without prior written"
False,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,33,    permission of the Apache Software Foundation.
False,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,38, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,39," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,46, SUCH DAMAGE.
False,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,49, This software consists of voluntary contributions made by many
False,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,50, individuals on behalf of the Apache Software Foundation.  For more
False,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,51," information on the Apache Software Foundation, please see"
False,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,52, <http://www.apache.org/>.
False,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,54,ackage org.apache.commons.math.stat;
False,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,56,mport java.util.ArrayList;
False,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,57,mport java.util.List;
False,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,59,mport junit.framework.Test;
False,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,60,mport junit.framework.TestCase;
False,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,61,mport junit.framework.TestSuite;
False,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,64, Test cases for the {@link Univariate} class.
False,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,66, @version $Revision: 1.7 $ $Date: 2003/10/16 15:24:28 $
False,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,69,ublic final class ListUnivariateImplTest extends TestCase {
False,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,70,rivate double one = 1;
False,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,71,rivate float two = 2;
False,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,72,rivate int three = 3;
False,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,74,rivate double mean = 2;
False,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,75,rivate double sumSq = 18;
False,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,76,rivate double sum = 8;
False,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,77,rivate double var = 0.666666666666666666667;
False,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,78,rivate double std = Math.sqrt(var);
False,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,79,rivate double n = 4;
False,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,80,rivate double min = 1;
False,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,81,rivate double max = 3;
False,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,82,rivate double skewness = 0;
False,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,83,rivate double kurtosis = 0.5;
False,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,84,rivate int kClass = StoreUnivariate.LEPTOKURTIC;
False,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,85,rivate double tolerance = 10E-15;
False,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,87,ublic ListUnivariateImplTest(String name) {
False,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,88,uper(name);
False,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,91,ublic void setUp() {
False,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,94,ublic static Test suite() {
False,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,95,estSuite suite = new TestSuite(ListUnivariateImplTest.class);
False,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,96,"uite.setName(""Frequency Tests"");"
False,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,97,eturn suite;
False,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,100,** test stats */
False,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,101,ublic void testStats() {
False,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,102,ist externalList = new ArrayList();
False,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,104,toreUnivariate u = new ListUnivariateImpl( externalList );
False,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,106,"ssertEquals(""total count"",0,u.getN(),tolerance);"
False,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,107,.addValue(one);
False,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,108,.addValue(two);
False,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,109,.addValue(two);
False,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,110,.addValue(three);
False,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,111,"ssertEquals(""N"",n,u.getN(),tolerance);"
False,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,112,"ssertEquals(""sum"",sum,u.getSum(),tolerance);"
False,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,113,"ssertEquals(""sumsq"",sumSq,u.getSumsq(),tolerance);"
False,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,114,"ssertEquals(""var"",var,u.getVariance(),tolerance);"
False,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,115,"ssertEquals(""std"",std,u.getStandardDeviation(),tolerance);"
False,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,116,"ssertEquals(""mean"",mean,u.getMean(),tolerance);"
False,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,117,"ssertEquals(""min"",min,u.getMin(),tolerance);"
False,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,118,"ssertEquals(""max"",max,u.getMax(),tolerance);"
False,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,119,.clear();
False,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,120,"ssertEquals(""total count"",0,u.getN(),tolerance);"
False,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,123,ublic void testN0andN1Conditions() throws Exception {
False,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,124,ist list = new ArrayList();
False,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,126,toreUnivariate u = new ListUnivariateImpl( list );
False,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,128,"ssertTrue(""Mean of n = 0 set should be NaN"", Double.isNaN( u.getMean() ) );"
False,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,129,"ssertTrue(""Standard Deviation of n = 0 set should be NaN"", Double.isNaN( u.getStandardDeviation() ) );"
False,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,130,"ssertTrue(""Variance of n = 0 set should be NaN"", Double.isNaN(u.getVariance() ) );"
False,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,132,ist.add( new Double(one));
False,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,134,"ssertTrue( ""Mean of n = 1 set should be value of single item n1"", u.getMean() == one);"
False,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,135,"ssertTrue( ""StdDev of n = 1 set should be zero, instead it is: "" + u.getStandardDeviation(), u.getStandardDeviation() == 0);"
False,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,136,"ssertTrue( ""Variance of n = 1 set should be zero"", u.getVariance() == 0);"
False,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,139,ublic void testSkewAndKurtosis() {
False,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,140,toreUnivariate u = new StoreUnivariateImpl();
False,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,142,"ouble[] testArray = { 12.5, 12, 11.8, 14.2, 14.9, 14.5, 21, 8.2, 10.3, 11.3, 14.1,"
False,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,143,".9, 12.2, 12, 12.1, 11, 19.8, 11, 10, 8.8, 9, 12.3 };"
False,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,144,or( int i = 0; i < testArray.length; i++) {
False,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,145,.addValue( testArray[i]);
False,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,148,"ssertEquals(""mean"", 12.40455, u.getMean(), 0.0001);"
False,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,149,"ssertEquals(""variance"", 10.00236, u.getVariance(), 0.0001);"
False,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,150,"ssertEquals(""skewness"", 1.437424, u.getSkewness(), 0.0001);"
False,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,151,"ssertEquals(""kurtosis"", 2.37719, u.getKurtosis(), 0.0001);"
False,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,154,ublic void testProductAndGeometricMean() throws Exception {
False,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,155,istUnivariateImpl u = new ListUnivariateImpl(new ArrayList());
False,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,156,.setWindowSize(10);
False,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,158,.addValue( 1.0 );
False,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,159,.addValue( 2.0 );
False,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,160,.addValue( 3.0 );
False,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,161,.addValue( 4.0 );
False,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,163,"ssertEquals( ""Geometric mean not expected"", 2.213364, u.getGeometricMean(), 0.00001 );"
False,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,165,/ Now test rolling - UnivariateImpl should discount the contribution
False,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,166,/ of a discarded element
False,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,167,or( int i = 0; i < 10; i++ ) {
False,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,168,.addValue( i + 2 );
False,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,170,"/ Values should be (2,3,4,5,6,7,8,9,10,11)"
False,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/ListUnivariateImplTest.java,172,"ssertEquals( ""Geometric mean not expected"", 5.755931, u.getGeometricMean(), 0.00001 );"
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,2," The Apache Software License, Version 1.1"
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,5, reserved.
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,7," Redistribution and use in source and binary forms, with or without"
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,8," modification, are permitted provided that the following conditions"
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,9, are met:
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,11, 1. Redistributions of source code must retain the above copyright
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,12,"    notice, this list of conditions and the following disclaimer."
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,14, 2. Redistributions in binary form must reproduce the above copyright
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,15,"    notice, this list of conditions and the following disclaimer in"
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,16,    the documentation and/or other materials provided with the
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,17,    distribution.
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,19," 3. The end-user documentation included with the redistribution, if"
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,20,"    any, must include the following acknowledgement:"
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,21,"       ""This product includes software developed by the"
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,22,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,23,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,24,    if and wherever such third-party acknowledgements normally appear.
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,26," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,27,"    Foundation"" must not be used to endorse or promote products derived"
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,28,    from this software without prior written permission. For written
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,29,"    permission, please contact apache@apache.org."
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,31," 5. Products derived from this software may not be called ""Apache"""
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,32,"    nor may ""Apache"" appear in their name without prior written"
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,33,    permission of the Apache Software Foundation.
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,38, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,39," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,46, SUCH DAMAGE.
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,49, This software consists of voluntary contributions made by many
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,50, individuals on behalf of the Apache Software Foundation.  For more
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,51," information on the Apache Software Foundation, please see"
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,52, <http://www.apache.org/>.
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,54,ackage org.apache.commons.math.stat;
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,56,mport java.util.ArrayList;
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,57,mport java.util.List;
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,58,mport org.apache.commons.math.util.NumberTransformer;
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,59,mport org.apache.commons.math.util.TransformerMap;
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,60,mport junit.framework.Test;
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,61,mport junit.framework.TestCase;
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,62,mport junit.framework.TestSuite;
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,65, Test cases for the {@link Univariate} class.
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,67, @version $Revision: 1.3 $ $Date: 2003/10/16 15:24:28 $
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,70,ublic final class MixedListUnivariateImplTest extends TestCase {
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,71,rivate double one = 1;
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,72,rivate float two = 2;
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,73,rivate int three = 3;
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,75,rivate double mean = 2;
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,76,rivate double sumSq = 18;
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,77,rivate double sum = 8;
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,78,rivate double var = 0.666666666666666666667;
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,79,rivate double std = Math.sqrt(var);
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,80,rivate double n = 4;
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,81,rivate double min = 1;
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,82,rivate double max = 3;
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,83,rivate double skewness = 0;
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,84,rivate double kurtosis = 0.5;
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,85,rivate int kClass = StoreUnivariate.LEPTOKURTIC;
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,86,rivate double tolerance = 10E-15;
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,88,rivate TransformerMap transformers = new TransformerMap();
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,90,ublic MixedListUnivariateImplTest(String name) {
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,91,uper(name);
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,92,ransformers = new TransformerMap();
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,94,"ransformers.putTransformer(Foo.class, new NumberTransformer() {"
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,95,ublic double transform(Object o) {
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,96,eturn Double.parseDouble(((Foo) o).heresFoo());
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,100,"ransformers.putTransformer(Bar.class, new NumberTransformer() {"
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,101,ublic double transform(Object o) {
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,102,eturn Double.parseDouble(((Bar) o).heresBar());
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,109,ublic void setUp() {
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,112,ublic static Test suite() {
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,113,estSuite suite = new TestSuite(MixedListUnivariateImplTest.class);
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,114,"uite.setName(""Mixed List Tests"");"
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,115,eturn suite;
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,118,** test stats */
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,119,ublic void testStats() {
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,120,ist externalList = new ArrayList();
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,122,"toreUnivariate u = new ListUnivariateImpl(externalList,transformers);"
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,124,"ssertEquals(""total count"", 0, u.getN(), tolerance);"
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,125,.addValue(one);
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,126,.addValue(two);
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,127,.addValue(two);
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,128,.addValue(three);
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,129,"ssertEquals(""N"", n, u.getN(), tolerance);"
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,130,"ssertEquals(""sum"", sum, u.getSum(), tolerance);"
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,131,"ssertEquals(""sumsq"", sumSq, u.getSumsq(), tolerance);"
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,132,"ssertEquals(""var"", var, u.getVariance(), tolerance);"
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,133,"ssertEquals(""std"", std, u.getStandardDeviation(), tolerance);"
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,134,"ssertEquals(""mean"", mean, u.getMean(), tolerance);"
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,135,"ssertEquals(""min"", min, u.getMin(), tolerance);"
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,136,"ssertEquals(""max"", max, u.getMax(), tolerance);"
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,137,.clear();
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,138,"ssertEquals(""total count"", 0, u.getN(), tolerance);"
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,141,ublic void testN0andN1Conditions() throws Exception {
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,142,ist list = new ArrayList();
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,144,"toreUnivariate u = new ListUnivariateImpl(new ArrayList(),transformers);"
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,146,ssertTrue(
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,147,"Mean of n = 0 set should be NaN"","
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,148,ouble.isNaN(u.getMean()));
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,149,ssertTrue(
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,150,"Standard Deviation of n = 0 set should be NaN"","
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,151,ouble.isNaN(u.getStandardDeviation()));
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,152,ssertTrue(
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,153,"Variance of n = 0 set should be NaN"","
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,154,ouble.isNaN(u.getVariance()));
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,156,.addValue(one);
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,158,ssertTrue(
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,159,"Mean of n = 1 set should be value of single item n1, instead it is "" + u.getMean() ,"
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,160,.getMean() == one);
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,162,ssertTrue(
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,163,"StdDev of n = 1 set should be zero, instead it is: """
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,164," u.getStandardDeviation(),"
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,165,.getStandardDeviation() == 0);
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,166,ssertTrue(
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,167,"Variance of n = 1 set should be zero"","
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,168,.getVariance() == 0);
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,171,ublic void testSkewAndKurtosis() {
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,172,istUnivariateImpl u =
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,173,"ew ListUnivariateImpl(new ArrayList(), transformers);"
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,175,".addObject(""12.5"");"
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,176,.addObject(new Integer(12));
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,177,".addObject(""11.8"");"
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,178,".addObject(""14.2"");"
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,179,.addObject(new Foo());
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,180,".addObject(""14.5"");"
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,181,.addObject(new Long(21));
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,182,".addObject(""8.2"");"
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,183,".addObject(""10.3"");"
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,184,".addObject(""11.3"");"
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,185,.addObject(new Float(14.1));
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,186,".addObject(""9.9"");"
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,187,".addObject(""12.2"");"
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,188,.addObject(new Bar());
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,189,".addObject(""12.1"");"
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,190,".addObject(""11"");"
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,191,.addObject(new Double(19.8));
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,192,".addObject(""11"");"
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,193,".addObject(""10"");"
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,194,".addObject(""8.8"");"
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,195,".addObject(""9"");"
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,196,".addObject(""12.3"");"
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,199,"ssertEquals(""mean"", 12.40455, u.getMean(), 0.0001);"
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,200,"ssertEquals(""variance"", 10.00236, u.getVariance(), 0.0001);"
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,201,"ssertEquals(""skewness"", 1.437424, u.getSkewness(), 0.0001);"
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,202,"ssertEquals(""kurtosis"", 2.37719, u.getKurtosis(), 0.0001);"
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,205,ublic void testProductAndGeometricMean() throws Exception {
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,206,"istUnivariateImpl u = new ListUnivariateImpl(new ArrayList(),transformers);"
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,207,.setWindowSize(10);
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,209,.addValue(1.0);
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,210,.addValue(2.0);
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,211,.addValue(3.0);
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,212,.addValue(4.0);
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,214,ssertEquals(
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,215,"Geometric mean not expected"","
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,216,".213364,"
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,217,".getGeometricMean(),"
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,218,.00001);
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,220,/ Now test rolling - UnivariateImpl should discount the contribution
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,221,/ of a discarded element
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,222,or (int i = 0; i < 10; i++) {
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,223,.addValue(i + 2);
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,225,"/ Values should be (2,3,4,5,6,7,8,9,10,11)"
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,226,ssertEquals(
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,227,"Geometric mean not expected"","
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,228,".755931,"
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,229,".getGeometricMean(),"
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,230,.00001);
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,234,ublic final class Foo {
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,235,ublic String heresFoo() {
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,236,"eturn ""14.9"";"
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,240,ublic final class Bar {
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,241,ublic String heresBar() {
False,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/MixedListUnivariateImplTest.java,242,"eturn ""12.0"";"
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,2," The Apache Software License, Version 1.1"
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,5, reserved.
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,7," Redistribution and use in source and binary forms, with or without"
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,8," modification, are permitted provided that the following conditions"
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,9, are met:
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,11, 1. Redistributions of source code must retain the above copyright
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,12,"    notice, this list of conditions and the following disclaimer."
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,14, 2. Redistributions in binary form must reproduce the above copyright
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,15,"    notice, this list of conditions and the following disclaimer in"
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,16,    the documentation and/or other materials provided with the
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,17,    distribution.
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,19," 3. The end-user documentation included with the redistribution, if"
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,20,"    any, must include the following acknowledgement:"
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,21,"       ""This product includes software developed by the"
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,22,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,23,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,24,    if and wherever such third-party acknowledgements normally appear.
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,26," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,27,"    Foundation"" must not be used to endorse or promote products derived"
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,28,    from this software without prior written permission. For written
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,29,"    permission, please contact apache@apache.org."
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,31," 5. Products derived from this software may not be called ""Apache"""
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,32,"    nor may ""Apache"" appear in their name without prior written"
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,33,    permission of the Apache Software Foundation.
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,38, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,39," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,46, SUCH DAMAGE.
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,49, This software consists of voluntary contributions made by many
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,50, individuals on behalf of the Apache Software Foundation.  For more
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,51," information on the Apache Software Foundation, please see"
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,52, <http://www.apache.org/>.
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,54,ackage org.apache.commons.math.stat;
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,56,mport junit.framework.Test;
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,57,mport junit.framework.TestCase;
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,58,mport junit.framework.TestSuite;
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,61, Test cases for the {@link StatUtils} class.
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,62, @version $Revision: 1.8 $ $Date: 2003/10/16 15:24:28 $
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,65,ublic final class StatUtilsTest extends TestCase {
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,67,rivate double one = 1;
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,68,rivate float two = 2;
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,69,rivate int three = 3;
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,70,rivate double mean = 2;
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,71,rivate double sumSq = 18;
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,72,rivate double sum = 8;
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,73,rivate double var = 0.666666666666666666667;
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,74,rivate double std = Math.sqrt(var);
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,75,rivate double n = 4;
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,76,rivate double min = 1;
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,77,rivate double max = 3;
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,78,rivate double skewness = 0;
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,79,rivate double kurtosis = 0.5;
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,80,rivate int kClass = StoreUnivariate.LEPTOKURTIC;
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,81,rivate double tolerance = 10E-15;
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,83,ublic StatUtilsTest(String name) {
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,84,uper(name);
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,87,ublic void setUp() {
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,90,ublic static Test suite() {
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,91,estSuite suite = new TestSuite(StatUtilsTest.class);
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,92,"uite.setName(""StatUtil Tests"");"
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,93,eturn suite;
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,96,** test stats */
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,97,ublic void testStats() {
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,98,"ouble[] values = new double[] { one, two, two, three };"
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,99,"ssertEquals(""sum"", sum, StatUtils.sum(values), tolerance);"
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,100,"ssertEquals(""sumsq"", sumSq, StatUtils.sumSq(values), tolerance);"
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,101,"ssertEquals(""var"", var, StatUtils.variance(values), tolerance);"
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,102,"ssertEquals(""mean"", mean, StatUtils.mean(values), tolerance);"
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,103,"ssertEquals(""min"", min, StatUtils.min(values), tolerance);"
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,104,"ssertEquals(""max"", max, StatUtils.max(values), tolerance);"
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,107,ublic void testN0andN1Conditions() throws Exception {
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,108,ouble[] values = new double[0];
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,110,ssertTrue(
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,111,"Mean of n = 0 set should be NaN"","
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,112,ouble.isNaN(StatUtils.mean(values)));
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,113,ssertTrue(
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,114,"Variance of n = 0 set should be NaN"","
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,115,ouble.isNaN(StatUtils.variance(values)));
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,117,alues = new double[] { one };
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,119,ssertTrue(
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,120,"Mean of n = 1 set should be value of single item n1"","
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,121,tatUtils.mean(values) == one);
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,122,ssertTrue(
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,123,"Variance of n = 1 set should be zero"","
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,124,tatUtils.variance(values) == 0);
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,127,ublic void testSkewAndKurtosis() {
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,129,ouble[] values =
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,131,"2.5,"
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,132,"2,"
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,133,"1.8,"
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,134,"4.2,"
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,135,"4.9,"
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,136,"4.5,"
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,137,"1,"
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,138,".2,"
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,139,"0.3,"
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,140,"1.3,"
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,141,"4.1,"
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,142,".9,"
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,143,"2.2,"
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,144,"2,"
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,145,"2.1,"
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,146,"1,"
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,147,"9.8,"
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,148,"1,"
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,149,"0,"
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,150,".8,"
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,151,","
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,152,2.3 };
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,154,"ssertEquals(""mean"", 12.40455, StatUtils.mean(values), 0.0001);"
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,155,"ssertEquals(""variance"", 10.00236, StatUtils.variance(values), 0.0001);"
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,158,ublic void testProductAndGeometricMean() throws Exception {
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,159,"ouble[] values = { 1.0, 2.0, 3.0, 4.0 };"
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,161,ssertEquals(
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,162,"Product not expected"","
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,163,"4.0,"
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,164,"tatUtils.product(values),"
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,165,ouble.MIN_VALUE);
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,168,ublic void testArrayIndexConditions() throws Exception {
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,169,"ouble[] values = { 1.0, 2.0, 3.0, 4.0 };"
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,171,ssertEquals(
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,172,"Sum not expected"","
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,173,".0,"
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,174,"tatUtils.sum(values, 1, 2),"
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,175,ouble.MIN_VALUE);
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,176,ssertEquals(
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,177,"Sum not expected"","
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,178,".0,"
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,179,"tatUtils.sum(values, 0, 2),"
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,180,ouble.MIN_VALUE);
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,181,ssertEquals(
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,182,"Sum not expected"","
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,183,".0,"
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,184,"tatUtils.sum(values, 2, 2),"
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,185,ouble.MIN_VALUE);
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,187,ry {
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,188,"tatUtils.sum(values, 2, 3);"
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,189,"ssertTrue(""Didn't throw exception"", false);"
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,190, catch (Exception e) {
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,191,ssertTrue(true);
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,194,ry {
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,195,"tatUtils.sum(values, -1, 2);"
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,196,"ssertTrue(""Didn't throw exception"", false);"
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,197, catch (Exception e) {
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,198,ssertTrue(true);
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,2," The Apache Software License, Version 1.1"
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,5, reserved.
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,7," Redistribution and use in source and binary forms, with or without"
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,8," modification, are permitted provided that the following conditions"
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,9, are met:
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,11, 1. Redistributions of source code must retain the above copyright
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,12,"    notice, this list of conditions and the following disclaimer."
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,14, 2. Redistributions in binary form must reproduce the above copyright
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,15,"    notice, this list of conditions and the following disclaimer in"
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,16,    the documentation and/or other materials provided with the
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,17,    distribution.
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,19," 3. The end-user documentation included with the redistribution, if"
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,20,"    any, must include the following acknowledgement:"
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,21,"       ""This product includes software developed by the"
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,22,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,23,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,24,    if and wherever such third-party acknowledgements normally appear.
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,26," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,27,"    Foundation"" must not be used to endorse or promote products derived"
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,28,    from this software without prior written permission. For written
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,29,"    permission, please contact apache@apache.org."
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,31," 5. Products derived from this software may not be called ""Apache"""
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,32,"    nor may ""Apache"" appear in their name without prior written"
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,33,    permission of the Apache Software Foundation.
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,38, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,39," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,46, SUCH DAMAGE.
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,49, This software consists of voluntary contributions made by many
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,50, individuals on behalf of the Apache Software Foundation.  For more
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,51," information on the Apache Software Foundation, please see"
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,52, <http://www.apache.org/>.
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,54,ackage org.apache.commons.math.stat;
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,56,mport junit.framework.Test;
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,57,mport junit.framework.TestCase;
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,58,mport junit.framework.TestSuite;
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,60,mport org.apache.commons.math.random.RandomData;
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,61,mport org.apache.commons.math.random.RandomDataImpl;
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,64, Test cases for the {@link Univariate} class.
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,66, @version $Revision: 1.7 $ $Date: 2003/10/16 15:24:28 $
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,69,ublic final class StoreUnivariateImplTest extends TestCase {
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,70,rivate double one = 1;
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,71,rivate float two = 2;
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,72,rivate int three = 3;
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,73,rivate double mean = 2;
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,74,rivate double sumSq = 18;
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,75,rivate double sum = 8;
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,76,rivate double var = 0.666666666666666666667;
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,77,rivate double std = Math.sqrt(var);
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,78,rivate double n = 4;
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,79,rivate double min = 1;
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,80,rivate double max = 3;
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,81,rivate double skewness = 0;
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,82,rivate double kurtosis = 0.5;
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,83,rivate int kClass = StoreUnivariate.LEPTOKURTIC;
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,84,rivate double tolerance = 10E-15;
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,86,ublic StoreUnivariateImplTest(String name) {
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,87,uper(name);
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,90,ublic void setUp() {
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,93,ublic static Test suite() {
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,94,estSuite suite = new TestSuite(StoreUnivariateImplTest.class);
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,95,"uite.setName(""Frequency Tests"");"
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,96,eturn suite;
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,99,** test stats */
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,100,ublic void testStats() {
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,101,toreUnivariate u = new StoreUnivariateImpl();
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,102,"ssertEquals(""total count"",0,u.getN(),tolerance);"
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,103,.addValue(one);
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,104,.addValue(two);
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,105,.addValue(two);
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,106,.addValue(three);
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,107,"ssertEquals(""N"",n,u.getN(),tolerance);"
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,108,"ssertEquals(""sum"",sum,u.getSum(),tolerance);"
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,109,"ssertEquals(""sumsq"",sumSq,u.getSumsq(),tolerance);"
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,110,"ssertEquals(""var"",var,u.getVariance(),tolerance);"
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,111,"ssertEquals(""std"",std,u.getStandardDeviation(),tolerance);"
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,112,"ssertEquals(""mean"",mean,u.getMean(),tolerance);"
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,113,"ssertEquals(""min"",min,u.getMin(),tolerance);"
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,114,"ssertEquals(""max"",max,u.getMax(),tolerance);"
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,115,.clear();
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,116,"ssertEquals(""total count"",0,u.getN(),tolerance);"
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,119,ublic void testN0andN1Conditions() throws Exception {
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,120,toreUnivariate u = new StoreUnivariateImpl();
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,122,"ssertTrue(""Mean of n = 0 set should be NaN"","
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,123,ouble.isNaN( u.getMean() ) );
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,124,"ssertTrue(""Standard Deviation of n = 0 set should be NaN"","
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,125,ouble.isNaN( u.getStandardDeviation() ) );
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,126,"ssertTrue(""Variance of n = 0 set should be NaN"","
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,127,ouble.isNaN(u.getVariance() ) );
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,129,.addValue(one);
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,131,"ssertTrue( ""Mean of n = 1 set should be value of single item n1"","
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,132,.getMean() == one);
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,133,"ssertTrue( ""StdDev of n = 1 set should be zero, instead it is: """
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,134," u.getStandardDeviation(), u.getStandardDeviation() == 0);"
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,135,"ssertTrue( ""Variance of n = 1 set should be zero"","
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,136,.getVariance() == 0);
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,139,ublic void testSkewAndKurtosis() {
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,140,toreUnivariate u = new StoreUnivariateImpl();
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,142,ouble[] testArray =
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,143," 12.5, 12, 11.8, 14.2, 14.9, 14.5, 21, 8.2, 10.3, 11.3, 14.1,"
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,144,".9, 12.2, 12, 12.1, 11, 19.8, 11, 10, 8.8, 9, 12.3 };"
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,145,or( int i = 0; i < testArray.length; i++) {
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,146,.addValue( testArray[i]);
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,149,"ssertEquals(""mean"", 12.40455, u.getMean(), 0.0001);"
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,150,"ssertEquals(""variance"", 10.00236, u.getVariance(), 0.0001);"
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,151,"ssertEquals(""skewness"", 1.437424, u.getSkewness(), 0.0001);"
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,152,"ssertEquals(""kurtosis"", 2.37719, u.getKurtosis(), 0.0001);"
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,155,ublic void testProductAndGeometricMean() throws Exception {
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,156,toreUnivariateImpl u = new StoreUnivariateImpl();
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,157,.setWindowSize(10);
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,159,.addValue( 1.0 );
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,160,.addValue( 2.0 );
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,161,.addValue( 3.0 );
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,162,.addValue( 4.0 );
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,164,"/assertEquals( ""Product not expected"","
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,165,"/    24.0, u.getProduct(), Double.MIN_VALUE );"
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,166,"ssertEquals( ""Geometric mean not expected"","
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,167,".213364, u.getGeometricMean(), 0.00001 );"
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,169,/ Now test rolling - UnivariateImpl should discount the contribution
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,170,/ of a discarded element
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,171,or( int i = 0; i < 10; i++ ) {
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,172,.addValue( i + 2 );
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,174,"/ Values should be (2,3,4,5,6,7,8,9,10,11)"
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,176,"/assertEquals( ""Product not expected"", 39916800.0,"
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,177,"/    u.getProduct(), 0.00001 );"
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,178,"ssertEquals( ""Geometric mean not expected"", 5.755931,"
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,179,".getGeometricMean(), 0.00001 );"
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,182,ublic void testGetSortedValues() {
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,183,"ouble[] test1 = {5,4,3,2,1};"
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,184,"ouble[] test2 = {5,2,1,3,4,0};"
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,185,ouble[] test3 = {1};
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,186,nt[] testi = null;
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,187,ouble[] test4 = null;
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,188,andomData rd = new RandomDataImpl();
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,189,stGetSortedValues(test1);
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,190,stGetSortedValues(test2);
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,191,stGetSortedValues(test3);
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,192,or (int i = 0; i < 10; i++) {
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,193,"esti = rd.nextPermutation(10,6);"
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,194,est4 = new double[6];
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,195,or (int j = 0; j < testi.length; j++) {
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,196,est4[j] = (double) testi[j];
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,198,stGetSortedValues(test4);
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,200,or (int i = 0; i < 10; i++) {
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,201,"esti = rd.nextPermutation(10,5);"
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,202,est4 = new double[5];
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,203,or (int j = 0; j < testi.length; j++) {
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,204,est4[j] = (double) testi[j];
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,206,stGetSortedValues(test4);
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,211,rivate void tstGetSortedValues(double[] test) {
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,212,toreUnivariateImpl u = new StoreUnivariateImpl();
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,213,or (int i = 0; i < test.length; i++) {
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,214,.addValue(test[i]);
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,216,ouble[] sorted = u.getSortedValues();
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,217,f (sorted.length != test.length) {
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,218,"ail(""wrong length for sorted values array"");"
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,220,or (int i = 0; i < sorted.length-1; i++) {
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,221,f (sorted[i] > sorted[i+1]) {
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,222,"ail(""sorted values out of sequence"");"
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,227,ublic void testPercentiles() {
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,228,"ouble[] test = {5,4,3,2,1};"
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,229,toreUnivariateImpl u = new StoreUnivariateImpl();
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,230,or (int i = 0; i < test.length; i++) {
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,231,.addValue(test[i]);
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,233,"ssertEquals(""expecting min"",1,u.getPercentile(5),10E-12);"
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,234,"ssertEquals(""expecting max"",5,u.getPercentile(99),10E-12);"
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,235,"ssertEquals(""expecting middle"",3,u.getPercentile(50),10E-12);"
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,236,ry {
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,237,ouble x = u.getPercentile(0);
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,238,"ail(""expecting IllegalArgumentException for getPercentile(0)"");"
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,239, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,242,ry {
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,243,ouble x = u.getPercentile(120);
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,244,"ail(""expecting IllegalArgumentException for getPercentile(120)"");"
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,245, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,249,.clear();
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,250,"ouble[] test2 = {1,2,3,4};"
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,251,or (int i = 0; i < test2.length; i++) {
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,252,.addValue(test2[i]);
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,254,"ssertEquals(""Q1"",1.25,u.getPercentile(25),10E-12);"
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,255,"ssertEquals(""Q3"",3.75,u.getPercentile(75),10E-12);"
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,256,"ssertEquals(""Q2"",2.5,u.getPercentile(50),10E-12);"
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,258,.clear();
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,259,ouble[] test3 = {1};
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,260,or (int i = 0; i < test3.length; i++) {
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,261,.addValue(test3[i]);
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,263,"ssertEquals(""Q1"",1,u.getPercentile(25),10E-12);"
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,264,"ssertEquals(""Q3"",1,u.getPercentile(75),10E-12);"
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,265,"ssertEquals(""Q2"",1,u.getPercentile(50),10E-12);"
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,267,.clear();
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,268,andomData rd = new RandomDataImpl();
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,269,"nt[] testi = rd.nextPermutation(100,100); // will contain 0-99"
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,270,or (int j = 0; j < testi.length; j++) {
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,271,".addValue((double) testi[j]);  //OK, laugh at me for the cast"
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,273,or (int i = 1; i < 100; i++) {
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,274,"ssertEquals(""percentile "" + i,"
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,275,"double) i-1 + (double) i*(.01), u.getPercentile(i),10E-12);"
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,278,.clear();
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,279,"ouble[] test4 = {1,2,3,4,100};"
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,280,or (int i = 0; i < test4.length; i++) {
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,281,.addValue(test4[i]);
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,283,"ssertEquals(""80th"",80.8,u.getPercentile(80),10E-12);"
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,285,.clear();
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,286,"ssertTrue(""empty value set should return NaN"","
False,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,src/test/org/apache/commons/math/stat/StoreUnivariateImplTest.java,287,ouble.isNaN(u.getPercentile(50)));
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,2," The Apache Software License, Version 1.1"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,5, reserved.
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,7," Redistribution and use in source and binary forms, with or without"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,8," modification, are permitted provided that the following conditions"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,9, are met:
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,11, 1. Redistributions of source code must retain the above copyright
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,12,"    notice, this list of conditions and the following disclaimer."
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,14, 2. Redistributions in binary form must reproduce the above copyright
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,15,"    notice, this list of conditions and the following disclaimer in"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,16,    the documentation and/or other materials provided with the
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,17,    distribution.
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,19," 3. The end-user documentation included with the redistribution, if"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,20,"    any, must include the following acknowledgement:"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,21,"       ""This product includes software developed by the"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,22,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,23,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,24,    if and wherever such third-party acknowledgements normally appear.
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,26," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,27,"    Foundation"" must not be used to endorse or promote products derived"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,28,    from this software without prior written permission. For written
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,29,"    permission, please contact apache@apache.org."
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,31," 5. Products derived from this software may not be called ""Apache"""
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,32,"    nor may ""Apache"" appear in their name without prior written"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,33,    permission of the Apache Software Foundation.
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,38, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,39," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,46, SUCH DAMAGE.
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,49, This software consists of voluntary contributions made by many
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,50, individuals on behalf of the Apache Software Foundation.  For more
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,51," information on the Apache Software Foundation, please see"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,52, <http://www.apache.org/>.
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,54,ackage org.apache.commons.math.stat;
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,56,mport junit.framework.Test;
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,57,mport junit.framework.TestCase;
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,58,mport junit.framework.TestSuite;
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,60, Test cases for the TestStatistic class.
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,62, @version $Revision: 1.5 $ $Date: 2003/10/16 15:24:28 $
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,65,ublic final class TestStatisticTest extends TestCase {
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,67,rivate TestStatisticImpl testStatistic = new TestStatisticImpl();
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,69,ublic TestStatisticTest(String name) {
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,70,uper(name);
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,74,ublic void setUp() {
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,77,ublic static Test suite() {
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,78,estSuite suite = new TestSuite(TestStatisticTest.class);
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,79,"uite.setName(""TestStatistic Tests"");"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,80,eturn suite;
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,83,ublic void testChiSquare() {
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,84,"ouble[] observed = {11,24,69,96};"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,85,"ouble[] expected = {8.2,25.2,65.8,100.8};"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,86,"ssertEquals(""chi-square statistic"","
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,87,".39743495,testStatistic.chiSquare(expected,observed),10E-5);"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,89,ouble[] tooShortObs = {0};
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,90,ouble[] tooShortEx = {1};
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,91,ry {
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,92,"estStatistic.chiSquare(tooShortObs,tooShortEx);"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,93,"ail(""arguments too short, IllegalArgumentException expected"");"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,94, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,98,ry {
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,99,"estStatistic.chiSquareTest(tooShortObs,tooShortEx);"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,100,"ail(""arguments too short, IllegalArgumentException expected"");"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,101, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,105,"ouble[] unMatchedObs = {0,1,2,3};"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,106,"ouble[] unMatchedEx = {1,1,2};"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,107,ry {
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,108,"estStatistic.chiSquare(unMatchedEx,unMatchedObs);"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,109,"ail(""arrays have different lengths,"" +"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,110," IllegalArgumentException expected"");"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,111, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,114,xpected[0] = 0;
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,115,ry {
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,116,"estStatistic.chiSquareTest(expected, observed, .01);"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,117,"ail(""bad expected count, IllegalArgumentException expected"");"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,118, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,121,** from http://www.vsenvirginia.org/stat/classpractice/Voter_Preferences_CP.pdf */
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,122,"ouble[] observed1 = {504, 523, 72, 70, 31};"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,123,"ouble[] expected1 = {480, 540, 84, 60, 36};"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,124,"ssertEquals(""chi-square test statistic"", 5.81,"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,125,"estStatistic.chiSquare(expected1,observed1),10E-2);"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,126,"ssertEquals(""chi-square p-value"", 0.21,"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,127,"estStatistic.chiSquareTest(expected1, observed1),10E-2);"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,128,"ssertTrue(""chi-square test reject"","
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,129,"estStatistic.chiSquareTest(expected1, observed1, 0.3));"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,130,"ssertTrue(""chi-square test accept"","
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,131,"testStatistic.chiSquareTest(expected1, observed1, 0.1));"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,132,ry {
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,133,"estStatistic.chiSquareTest(expected1, observed1, 95);"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,134,"ail(""alpha out of range, IllegalArgumentException expected"");"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,135, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,140,ublic void testT(){
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,141,"ouble[] observed = {93.0, 103.0, 95.0, 101.0, 91.0, 105.0, 96.0,"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,142,"4.0, 101.0, 88.0, 98.0, 94.0, 101.0, 92.0, 95.0};"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,143,ouble mu = 100.0;
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,144,nivariate sampleStats = new UnivariateImpl();
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,145,or (int i = 0; i < observed.length; i++) {
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,146,ampleStats.addValue(observed[i]);
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,149,"ssertEquals(""t statistic"", -2.82, testStatistic.t(mu, observed),"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,150,0E-3);
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,151,"ssertEquals(""t statistic"", -2.82, testStatistic.t(mu, sampleStats),"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,152,0E-3);
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,154,ouble[] nullObserved = null;
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,155,ry {
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,156,"estStatistic.t(mu, nullObserved);"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,157,"ail(""arguments too short, IllegalArgumentException expected"");"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,158, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,162,nivariateImpl nullStats = null;
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,163,ry {
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,164,"estStatistic.t(mu, nullStats);"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,165,"ail(""arguments too short, IllegalArgumentException expected"");"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,166, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,170,ouble[] emptyObs = {};
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,171,ry {
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,172,"estStatistic.t(mu, emptyObs);"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,173,"ail(""arguments too short, IllegalArgumentException expected"");"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,174, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,178,nivariate emptyStats = new UnivariateImpl();
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,179,ry {
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,180,"estStatistic.t(mu, emptyStats);"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,181,"ail(""arguments too short, IllegalArgumentException expected"");"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,182, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,186,ouble[] tooShortObs = {1.0};
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,187,ry {
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,188,"estStatistic.t(mu, tooShortObs);"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,189,"ail(""arguments too short, IllegalArgumentException expected"");"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,190, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,193,ry {
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,194,"estStatistic.tTest(mu, tooShortObs);"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,195,"ail(""arguments too short, IllegalArgumentException expected"");"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,196, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,200,nivariate tooShortStats = new UnivariateImpl();
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,201,ooShortStats.addValue(0d);
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,202,ooShortStats.addValue(2d);
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,203,ry {
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,204,"estStatistic.t(mu, tooShortStats);"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,205,"ail(""arguments too short, IllegalArgumentException expected"");"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,206, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,209,ry {
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,210,"estStatistic.tTest(mu, tooShortStats);"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,211,"ail(""arguments too short, IllegalArgumentException expected"");"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,212, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,216,"** Moore and McCabe Example 8.3, p 516 */"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,217,"ouble[] oneSidedP = {2d, 0d, 6d, 6d, 3d, 3d, 2d, 3d, -6d, 6d, 6d,"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,218,"d, 3d, 0d, 1d, 1d, 0d, 2d, 3d, 3d};"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,219,nivariate oneSidedPStats = new UnivariateImpl();
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,220,or (int i = 0; i < oneSidedP.length; i++) {
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,221,neSidedPStats.addValue(oneSidedP[i]);
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,223,"ssertEquals(""one sample t stat"",3.86,"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,224,"estStatistic.t(0d,oneSidedP),0.01);"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,225,"ssertEquals(""one sample t stat"",3.86,"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,226,"estStatistic.t(0d,oneSidedPStats),0.01);"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,227,"ssertEquals(""one sample p value"",0.00052,"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,228,"estStatistic.tTest(0d,oneSidedP)/2d,10E-5);"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,229,"ssertEquals(""one sample p value"",0.00052,"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,230,"estStatistic.tTest(0d,oneSidedPStats)/2d,10E-5);"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,231,"ssertTrue(""one sample t-test reject"","
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,232,"estStatistic.tTest(0d,oneSidedP,0.01));"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,233,"ssertTrue(""one sample t-test reject"","
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,234,"estStatistic.tTest(0d,oneSidedPStats,0.01));"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,235,"ssertTrue(""one sample t-test accept"","
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,236,"testStatistic.tTest(0d,oneSidedP,0.0001));"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,237,"ssertTrue(""one sample t-test accept"","
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,238,"testStatistic.tTest(0d,oneSidedPStats,0.0001));"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,239,ry {
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,240,"estStatistic.tTest(0d,oneSidedP, 95);"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,241,"ail(""alpha out of range, IllegalArgumentException expected"");"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,242, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,245,ry {
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,246,"estStatistic.tTest(0d,oneSidedPStats, 95);"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,247,"ail(""alpha out of range, IllegalArgumentException expected"");"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,248, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,252,"** Moore and McCabe Example 8.12, p 552 */"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,253,"ouble[] sample1 = {7d, -4d, 18d, 17d, -3d, -5d, 1d, 10d, 11d, -2d};"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,254,"ouble[] sample2 = {-1d, 12d, -1d, -3d, 3d, -5d, 5d, 2d, -11d, -1d, -3d};"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,255,nivariate sampleStats1 = new UnivariateImpl();
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,256,or (int i = 0; i < sample1.length; i++) {
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,257,ampleStats1.addValue(sample1[i]);
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,259,nivariate sampleStats2 = new UnivariateImpl();
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,260,or (int i = 0; i < sample2.length; i++) {
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,261,ampleStats2.addValue(sample2[i]);
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,263,/FIXME: textbook example reported t stat uses pooled variance
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,264,/ should replace with R-verified example
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,265,"ssertEquals(""two sample t stat"",1.634,"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,266,"estStatistic.t(sample1, sample2), 0.1);"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,267,"ssertEquals(""two sample t stat"",1.634,"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,268,"estStatistic.t(sampleStats1, sampleStats2), 0.1);"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,269,"/ This test is OK, since book reports non-pooled exact p-value"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,270,"ssertEquals(""two sample p value"",0.059,"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,271,"estStatistic.tTest(sample1, sample2)/2d, 10E-3);"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,272,"ssertEquals(""two sample p value"",0.059,"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,273,"estStatistic.tTest(sampleStats1, sampleStats2)/2d, 10E-3);"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,274,"ssertTrue(""two sample t-test reject"","
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,275,"estStatistic.tTest(sample1, sample2, 0.2));"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,276,"ssertTrue(""two sample t-test reject"","
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,277,"estStatistic.tTest(sampleStats1, sampleStats2, 0.2));"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,278,"ssertTrue(""two sample t-test accept"","
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,279,"testStatistic.tTest(sample1, sample2,0.1));"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,280,"ssertTrue(""two sample t-test accept"","
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,281,"testStatistic.tTest(sampleStats1, sampleStats2,0.1));"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,282,ry {
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,283,"estStatistic.tTest(sample1, sample2, 95);"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,284,"ail(""alpha out of range, IllegalArgumentException expected"");"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,285, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,288,ry {
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,289,"estStatistic.tTest(sampleStats1, sampleStats2, 95);"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,290,"ail(""alpha out of range, IllegalArgumentException expected"");"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,291, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,294,ry {
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,295,"estStatistic.tTest(sample1, tooShortObs, .01);"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,296,"ail(""insufficient data, IllegalArgumentException expected"");"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,297, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,300,ry {
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,301,"estStatistic.tTest(sampleStats1, tooShortStats, .01);"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,302,"ail(""insufficient data, IllegalArgumentException expected"");"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,303, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,306,ry {
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,307,"estStatistic.tTest(sample1, tooShortObs);"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,308,"ail(""insufficient data, IllegalArgumentException expected"");"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,309, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,312,ry {
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,313,"estStatistic.tTest(sampleStats1, tooShortStats);"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,314,"ail(""insufficient data, IllegalArgumentException expected"");"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,315, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,318,ry {
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,319,"estStatistic.t(sample1, tooShortObs);"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,320,"ail(""insufficient data, IllegalArgumentException expected"");"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,321, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,324,ry {
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,325,"estStatistic.t(sampleStats1, tooShortStats);"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,326,"ail(""insufficient data, IllegalArgumentException expected"");"
False,src/test/org/apache/commons/math/stat/TestStatisticTest.java,src/test/org/apache/commons/math/stat/TestStatisticTest.java,327, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,2," The Apache Software License, Version 1.1"
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,5, reserved.
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,7," Redistribution and use in source and binary forms, with or without"
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,8," modification, are permitted provided that the following conditions"
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,9, are met:
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,11, 1. Redistributions of source code must retain the above copyright
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,12,"    notice, this list of conditions and the following disclaimer."
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,14, 2. Redistributions in binary form must reproduce the above copyright
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,15,"    notice, this list of conditions and the following disclaimer in"
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,16,    the documentation and/or other materials provided with the
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,17,    distribution.
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,19," 3. The end-user documentation included with the redistribution, if"
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,20,"    any, must include the following acknowledgement:"
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,21,"       ""This product includes software developed by the"
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,22,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,23,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,24,    if and wherever such third-party acknowledgements normally appear.
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,26," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,27,"    Foundation"" must not be used to endorse or promote products derived"
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,28,    from this software without prior written permission. For written
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,29,"    permission, please contact apache@apache.org."
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,31," 5. Products derived from this software may not be called ""Apache"""
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,32,"    nor may ""Apache"" appear in their name without prior written"
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,33,    permission of the Apache Software Foundation.
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,38, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,39," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,46, SUCH DAMAGE.
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,49, This software consists of voluntary contributions made by many
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,50, individuals on behalf of the Apache Software Foundation.  For more
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,51," information on the Apache Software Foundation, please see"
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,52, <http://www.apache.org/>.
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,54,ackage org.apache.commons.math.stat;
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,56,mport junit.framework.Test;
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,57,mport junit.framework.TestCase;
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,58,mport junit.framework.TestSuite;
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,61, Test cases for the {@link Univariate} class.
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,63, @version $Revision: 1.9 $ $Date: 2003/10/16 15:24:28 $
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,66,ublic final class UnivariateImplTest extends TestCase {
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,67,rivate double one = 1;
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,68,rivate float twoF = 2;
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,69,rivate long twoL = 2;
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,70,rivate int three = 3;
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,71,rivate double mean = 2;
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,72,rivate double sumSq = 18;
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,73,rivate double sum = 8;
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,74,rivate double var = 0.666666666666666666667;
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,75,rivate double std = Math.sqrt(var);
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,76,rivate double n = 4;
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,77,rivate double min = 1;
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,78,rivate double max = 3;
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,79,rivate double tolerance = 10E-15;
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,81,ublic UnivariateImplTest(String name) {
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,82,uper(name);
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,85,ublic void setUp() {
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,88,ublic static Test suite() {
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,89,estSuite suite = new TestSuite(UnivariateImplTest.class);
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,90,"uite.setName(""Frequency Tests"");"
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,91,eturn suite;
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,94,** test stats */
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,95,ublic void testStats() {
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,96,nivariateImpl u = new UnivariateImpl();
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,97,"ssertEquals(""total count"",0,u.getN(),tolerance);"
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,98,.addValue(one);
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,99,.addValue(twoF);
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,100,.addValue(twoL);
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,101,.addValue(three);
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,102,"ssertEquals(""N"",n,u.getN(),tolerance);"
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,103,"ssertEquals(""sum"",sum,u.getSum(),tolerance);"
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,104,"ssertEquals(""sumsq"",sumSq,u.getSumsq(),tolerance);"
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,105,"ssertEquals(""var"",var,u.getVariance(),tolerance);"
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,106,"ssertEquals(""std"",std,u.getStandardDeviation(),tolerance);"
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,107,"ssertEquals(""mean"",mean,u.getMean(),tolerance);"
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,108,"ssertEquals(""min"",min,u.getMin(),tolerance);"
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,109,"ssertEquals(""max"",max,u.getMax(),tolerance);"
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,110,.clear();
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,111,"ssertEquals(""total count"",0,u.getN(),tolerance);"
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,114,ublic void testN0andN1Conditions() throws Exception {
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,115,nivariateImpl u = new UnivariateImpl();
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,116,"ssertTrue(""Mean of n = 0 set should be NaN"","
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,117,ouble.isNaN( u.getMean() ) );
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,118,"ssertTrue(""Standard Deviation of n = 0 set should be NaN"","
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,119,ouble.isNaN( u.getStandardDeviation() ) );
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,120,"ssertTrue(""Variance of n = 0 set should be NaN"","
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,121,ouble.isNaN(u.getVariance() ) );
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,122,"ssertTrue(""skew of n = 0 set should be NaN"","
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,123,ouble.isNaN(u.getSkewness() ) );
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,124,"ssertTrue(""kurtosis of n = 0 set should be NaN"","
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,125,ouble.isNaN(u.getKurtosis() ) );
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,128,* n=1 */
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,129,.addValue(one);
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,130,"ssertTrue(""mean should be one (n = 1)"","
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,131,.getMean() == one);
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,132,"ssertTrue(""geometric should be one (n = 1) instead it is "" + u.getGeometricMean(),"
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,133,.getGeometricMean() == one);
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,134,"ssertTrue(""Std should be zero (n = 1)"","
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,135,.getStandardDeviation() == 0.0);
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,136,"ssertTrue(""variance should be zero (n = 1)"","
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,137,.getVariance() == 0.0);
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,138,"ssertTrue(""skew should be zero (n = 1)"","
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,139,.getSkewness() == 0.0);
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,140,"ssertTrue(""kurtosis should be zero (n = 1)"","
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,141,.getKurtosis() == 0.0);
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,143,* n=2 */
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,144,.addValue(twoF);
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,145,"ssertTrue(""Std should not be zero (n = 2)"","
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,146,.getStandardDeviation() != 0.0);
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,147,"ssertTrue(""variance should not be zero (n = 2)"","
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,148,.getVariance() != 0.0);
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,149,"ssertTrue(""skew should not be zero (n = 2)"","
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,150,.getSkewness() == 0.0);
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,151,"ssertTrue(""kurtosis should be zero (n = 2)"","
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,152,.getKurtosis() == 0.0);
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,154,* n=3 */
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,155,.addValue(twoL);
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,156,"ssertTrue(""skew should not be zero (n = 3)"","
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,157,.getSkewness() != 0.0);
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,158,"ssertTrue(""kurtosis should be zero (n = 3)"","
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,159,.getKurtosis() == 0.0);
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,161,* n=4 */
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,162,.addValue(three);
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,163,"ssertTrue(""kurtosis should not be zero (n = 4)"","
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,164,.getKurtosis() != 0.0);
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,168,ublic void testProductAndGeometricMean() throws Exception {
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,169,nivariateImpl u = new UnivariateImpl(10);
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,171,.addValue( 1.0 );
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,172,.addValue( 2.0 );
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,173,.addValue( 3.0 );
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,174,.addValue( 4.0 );
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,176,"ssertEquals( ""Geometric mean not expected"", 2.213364,"
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,177,".getGeometricMean(), 0.00001 );"
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,179,/ Now test rolling - UnivariateImpl should discount the contribution
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,180,/ of a discarded element
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,181,or( int i = 0; i < 10; i++ ) {
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,182,.addValue( i + 2 );
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,184,"/ Values should be (2,3,4,5,6,7,8,9,10,11)"
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,186,"ssertEquals( ""Geometric mean not expected"", 5.755931,"
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,187,".getGeometricMean(), 0.00001 );"
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,190,ublic void testRollingMinMax() {
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,191,nivariateImpl u = new UnivariateImpl(3);
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,192,.addValue( 1.0 );
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,193,.addValue( 5.0 );
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,194,.addValue( 3.0 );
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,195,.addValue( 4.0 ); // discarding min
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,196,"ssertEquals( ""min not expected"", 3.0,"
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,197,".getMin(), Double.MIN_VALUE);"
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,198,.addValue(1.0);  // discarding max
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,199,"ssertEquals( ""max not expected"", 4.0,"
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,200,".getMax(), Double.MIN_VALUE);"
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,203,ublic void testNaNContracts() {
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,204,nivariateImpl u = new UnivariateImpl();
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,205,ouble nan = Double.NaN;
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,206,"ssertTrue(""mean not NaN"",Double.isNaN(u.getMean()));"
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,207,"ssertTrue(""min not NaN"",Double.isNaN(u.getMin()));"
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,208,"ssertTrue(""std dev not NaN"",Double.isNaN(u.getStandardDeviation()));"
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,209,"ssertTrue(""var not NaN"",Double.isNaN(u.getVariance()));"
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,210,"ssertTrue(""geom mean not NaN"",Double.isNaN(u.getGeometricMean()));"
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,212,.addValue(1.0);
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,214,"ssertEquals( ""mean not expected"", 1.0,"
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,215,".getMean(), Double.MIN_VALUE);"
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,216,"ssertEquals( ""variance not expected"", 0.0,"
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,217,".getVariance(), Double.MIN_VALUE);"
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,218,"ssertEquals( ""geometric mean not expected"", 1.0,"
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,219,".getGeometricMean(), Double.MIN_VALUE);"
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,221,.addValue(-1.0);
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,223,"ssertTrue(""geom mean not NaN"",Double.isNaN(u.getGeometricMean()));"
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,225,.addValue(0.0);
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,227,"ssertTrue(""geom mean not NaN"",Double.isNaN(u.getGeometricMean()));"
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,229,/FiXME: test all other NaN contract specs
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,232,ublic void testSkewAndKurtosis() {
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,233,nivariate u = new UnivariateImpl();
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,235,ouble[] testArray =
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,236," 12.5, 12, 11.8, 14.2, 14.9, 14.5, 21, 8.2, 10.3, 11.3, 14.1,"
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,237,".9, 12.2, 12, 12.1, 11, 19.8, 11, 10, 8.8, 9, 12.3 };"
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,238,or( int i = 0; i < testArray.length; i++) {
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,239,.addValue( testArray[i]);
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,242,"ssertEquals(""mean"", 12.40455, u.getMean(), 0.0001);"
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,243,"ssertEquals(""variance"", 10.00236, u.getVariance(), 0.0001);"
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,244,"ssertEquals(""skewness"", 1.437424, u.getSkewness(), 0.0001);"
False,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,src/test/org/apache/commons/math/stat/UnivariateImplTest.java,245,"ssertEquals(""kurtosis"", 2.37719, u.getKurtosis(), 0.0001);"
False,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,2," The Apache Software License, Version 1.1"
False,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
False,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,5, reserved.
False,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,7," Redistribution and use in source and binary forms, with or without"
False,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,8," modification, are permitted provided that the following conditions"
False,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,9, are met:
False,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,11, 1. Redistributions of source code must retain the above copyright
False,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,12,"    notice, this list of conditions and the following disclaimer."
False,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,14, 2. Redistributions in binary form must reproduce the above copyright
False,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,15,"    notice, this list of conditions and the following disclaimer in"
False,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,16,    the documentation and/or other materials provided with the
False,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,17,    distribution.
False,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,19," 3. The end-user documentation included with the redistribution, if"
False,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,20,"    any, must include the following acknowledgement:"
False,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,21,"       ""This product includes software developed by the"
False,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,22,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,23,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,24,    if and wherever such third-party acknowledgements normally appear.
False,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,26," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,27,"    Foundation"" must not be used to endorse or promote products derived"
False,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,28,    from this software without prior written permission. For written
False,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,29,"    permission, please contact apache@apache.org."
False,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,31," 5. Products derived from this software may not be called ""Apache"""
False,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,32,"    nor may ""Apache"" appear in their name without prior written"
False,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,33,    permission of the Apache Software Foundation.
False,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,38, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,39," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,46, SUCH DAMAGE.
False,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,49, This software consists of voluntary contributions made by many
False,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,50, individuals on behalf of the Apache Software Foundation.  For more
False,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,51," information on the Apache Software Foundation, please see"
False,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,52, <http://www.apache.org/>.
False,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,54,ackage org.apache.commons.math.stat.univariate;
False,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,56,mport org.apache.commons.math.stat.univariate.moment.FourthMoment;
False,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,57,mport org.apache.commons.math.stat.univariate.moment.Kurtosis;
False,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,58,mport org.apache.commons.math.stat.univariate.moment.Mean;
False,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,59,mport org.apache.commons.math.stat.univariate.moment.Skewness;
False,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,60,mport org.apache.commons.math.stat.univariate.moment.Variance;
False,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,62,mport junit.framework.TestCase;
False,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,65, @version $Revision: 1.5 $ $Date: 2003/10/16 15:24:33 $
False,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,67,ublic class InteractionTest extends TestCase {
False,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,69,rotected double mean = 12.40454545454550;
False,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,70,rotected double var = 10.00235930735930;
False,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,71,rotected double skew = 1.437423729196190;
False,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,72,rotected double kurt = 2.377191264804700;
False,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,74,rotected double tolerance = 10E-12;
False,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,76,rotected double[] testArray =
False,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,78,"2.5,"
False,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,79,"2,"
False,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,80,"1.8,"
False,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,81,"4.2,"
False,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,82,"4.9,"
False,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,83,"4.5,"
False,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,84,"1,"
False,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,85,".2,"
False,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,86,"0.3,"
False,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,87,"1.3,"
False,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,88,"4.1,"
False,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,89,".9,"
False,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,90,"2.2,"
False,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,91,"2,"
False,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,92,"2.1,"
False,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,93,"1,"
False,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,94,"9.8,"
False,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,95,"1,"
False,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,96,"0,"
False,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,97,".8,"
False,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,98,","
False,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,99,2.3 };
False,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,101,ublic InteractionTest(String name) {
False,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,102,uper(name);
False,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,106,ublic void testInteraction() {
False,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,108,ourthMoment m4 = new FourthMoment();
False,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,109,ean m = new Mean(m4);
False,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,110,ariance v = new Variance(m4);
False,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,111,kewness s= new Skewness(m4);
False,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,112,urtosis k = new Kurtosis(m4);
False,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,114,or (int i = 0; i < testArray.length; i++){
False,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,115,4.increment(testArray[i]);
False,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,116,.increment(testArray[i]);
False,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,117,.increment(testArray[i]);
False,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,118,.increment(testArray[i]);
False,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,119,.increment(testArray[i]);
False,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,122,"ssertEquals(mean,m.getResult(),tolerance);"
False,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,123,"ssertEquals(var,v.getResult(),tolerance);"
False,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,124,"ssertEquals(skew ,s.getResult(),tolerance);"
False,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,src/test/org/apache/commons/math/stat/univariate/InteractionTest.java,125,"ssertEquals(kurt,k.getResult(),tolerance);"
False,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,2," The Apache Software License, Version 1.1"
False,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
False,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,5, reserved.
False,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,7," Redistribution and use in source and binary forms, with or without"
False,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,8," modification, are permitted provided that the following conditions"
False,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,9, are met:
False,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,11, 1. Redistributions of source code must retain the above copyright
False,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,12,"    notice, this list of conditions and the following disclaimer."
False,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,14, 2. Redistributions in binary form must reproduce the above copyright
False,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,15,"    notice, this list of conditions and the following disclaimer in"
False,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,16,    the documentation and/or other materials provided with the
False,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,17,    distribution.
False,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,19," 3. The end-user documentation included with the redistribution, if"
False,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,20,"    any, must include the following acknowledgement:"
False,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,21,"       ""This product includes software developed by the"
False,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,22,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,23,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,24,    if and wherever such third-party acknowledgements normally appear.
False,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,26," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,27,"    Foundation"" must not be used to endorse or promote products derived"
False,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,28,    from this software without prior written permission. For written
False,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,29,"    permission, please contact apache@apache.org."
False,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,31," 5. Products derived from this software may not be called ""Apache"""
False,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,32,"    nor may ""Apache"" appear in their name without prior written"
False,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,33,    permission of the Apache Software Foundation.
False,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,38, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,39," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,46, SUCH DAMAGE.
False,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,49, This software consists of voluntary contributions made by many
False,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,50, individuals on behalf of the Apache Software Foundation.  For more
False,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,51," information on the Apache Software Foundation, please see"
False,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,52, <http://www.apache.org/>.
False,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,54,ackage org.apache.commons.math.stat.univariate;
False,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,58, Test cases for the {@link UnivariateStatistic} class.
False,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,59, @version $Revision: 1.6 $ $Date: 2003/10/16 15:24:33 $
False,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,61,ublic abstract class StorelessUnivariateStatisticAbstractTest
False,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,62,xtends UnivariateStatisticAbstractTest {
False,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,64,ublic StorelessUnivariateStatisticAbstractTest(String name) {
False,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,65,uper(name);
False,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,68,ublic abstract UnivariateStatistic getUnivariateStatistic();
False,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,70,ublic abstract double expectedValue();
False,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,72,ublic void testIncrementation() throws Exception {
False,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,74,torelessUnivariateStatistic statistic =
False,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,75,StorelessUnivariateStatistic) getUnivariateStatistic();
False,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,77,tatistic.clear();
False,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,79,or (int i = 0; i < testArray.length; i++) {
False,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,80,tatistic.increment(testArray[i]);
False,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,83,"ssertEquals(expectedValue(), statistic.getResult(), getTolerance());"
False,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,85,tatistic.clear();
False,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/StorelessUnivariateStatisticAbstractTest.java,87,ssertTrue(Double.isNaN(statistic.getResult()));
False,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,2," The Apache Software License, Version 1.1"
False,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
False,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,5, reserved.
False,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,7," Redistribution and use in source and binary forms, with or without"
False,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,8," modification, are permitted provided that the following conditions"
False,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,9, are met:
False,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,11, 1. Redistributions of source code must retain the above copyright
False,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,12,"    notice, this list of conditions and the following disclaimer."
False,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,14, 2. Redistributions in binary form must reproduce the above copyright
False,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,15,"    notice, this list of conditions and the following disclaimer in"
False,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,16,    the documentation and/or other materials provided with the
False,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,17,    distribution.
False,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,19," 3. The end-user documentation included with the redistribution, if"
False,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,20,"    any, must include the following acknowledgement:"
False,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,21,"       ""This product includes software developed by the"
False,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,22,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,23,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,24,    if and wherever such third-party acknowledgements normally appear.
False,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,26," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,27,"    Foundation"" must not be used to endorse or promote products derived"
False,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,28,    from this software without prior written permission. For written
False,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,29,"    permission, please contact apache@apache.org."
False,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,31," 5. Products derived from this software may not be called ""Apache"""
False,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,32,"    nor may ""Apache"" appear in their name without prior written"
False,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,33,    permission of the Apache Software Foundation.
False,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,38, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,39," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,46, SUCH DAMAGE.
False,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,49, This software consists of voluntary contributions made by many
False,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,50, individuals on behalf of the Apache Software Foundation.  For more
False,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,51," information on the Apache Software Foundation, please see"
False,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,52, <http://www.apache.org/>.
False,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,54,ackage org.apache.commons.math.stat.univariate;
False,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,56,mport junit.framework.TestCase;
False,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,59, Test cases for the {@link UnivariateStatistic} class.
False,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,60, @version $Revision: 1.6 $ $Date: 2003/10/16 15:24:33 $
False,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,62,ublic abstract class UnivariateStatisticAbstractTest extends TestCase {
False,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,64,rotected double mean = 12.40454545454550;
False,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,65,rotected double geoMean = 12.070589161633011;
False,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,67,rotected double var = 10.00235930735930;
False,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,68,rotected double std = Math.sqrt(var);
False,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,69,rotected double skew = 1.437423729196190;
False,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,70,rotected double kurt = 2.377191264804700;
False,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,72,rotected double min = 8.2;
False,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,73,rotected double max = 21;
False,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,74,rotected double median = 12;
False,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,75,rotected double percentile5 = 8.81;
False,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,76,rotected double percentile95 = 19.555;
False,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,78,rotected double product = 628096400563833200000000.0;
False,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,79,rotected double sumLog = 54.79698061164520;
False,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,80,rotected double sumSq = 3595.250;
False,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,81,rotected double sum = 272.90;
False,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,83,rotected double tolerance = 10E-12;
False,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,85,rotected double[] testArray =
False,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,87,"2.5,"
False,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,88,"2,"
False,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,89,"1.8,"
False,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,90,"4.2,"
False,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,91,"4.9,"
False,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,92,"4.5,"
False,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,93,"1,"
False,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,94,".2,"
False,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,95,"0.3,"
False,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,96,"1.3,"
False,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,97,"4.1,"
False,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,98,".9,"
False,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,99,"2.2,"
False,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,100,"2,"
False,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,101,"2.1,"
False,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,102,"1,"
False,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,103,"9.8,"
False,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,104,"1,"
False,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,105,"0,"
False,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,106,".8,"
False,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,107,","
False,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,108,2.3 };
False,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,110,ublic UnivariateStatisticAbstractTest(String name) {
False,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,111,uper(name);
False,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,114,ublic abstract UnivariateStatistic getUnivariateStatistic();
False,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,116,ublic abstract double expectedValue();
False,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,118,ublic double getTolerance() {
False,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,119,eturn tolerance;
False,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,122,ublic void testEvaluation() throws Exception {
False,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,123,ssertEquals(
False,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,124,"xpectedValue(),"
False,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,125,"etUnivariateStatistic().evaluate(testArray),"
False,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/univariate/UnivariateStatisticAbstractTest.java,126,etTolerance());
False,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,2," The Apache Software License, Version 1.1"
False,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
False,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,5, reserved.
False,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,7," Redistribution and use in source and binary forms, with or without"
False,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,8," modification, are permitted provided that the following conditions"
False,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,9, are met:
False,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,11, 1. Redistributions of source code must retain the above copyright
False,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,12,"    notice, this list of conditions and the following disclaimer."
False,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,14, 2. Redistributions in binary form must reproduce the above copyright
False,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,15,"    notice, this list of conditions and the following disclaimer in"
False,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,16,    the documentation and/or other materials provided with the
False,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,17,    distribution.
False,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,19," 3. The end-user documentation included with the redistribution, if"
False,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,20,"    any, must include the following acknowledgement:"
False,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,21,"       ""This product includes software developed by the"
False,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,22,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,23,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,24,    if and wherever such third-party acknowledgements normally appear.
False,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,26," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,27,"    Foundation"" must not be used to endorse or promote products derived"
False,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,28,    from this software without prior written permission. For written
False,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,29,"    permission, please contact apache@apache.org."
False,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,31," 5. Products derived from this software may not be called ""Apache"""
False,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,32,"    nor may ""Apache"" appear in their name without prior written"
False,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,33,    permission of the Apache Software Foundation.
False,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,38, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,39," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,46, SUCH DAMAGE.
False,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,49, This software consists of voluntary contributions made by many
False,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,50, individuals on behalf of the Apache Software Foundation.  For more
False,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,51," information on the Apache Software Foundation, please see"
False,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,52, <http://www.apache.org/>.
False,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,54,ackage org.apache.commons.math.stat.univariate.moment;
False,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,56,mport junit.framework.Test;
False,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,57,mport junit.framework.TestSuite;
False,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,59,mport org.apache.commons.math.stat.univariate.StorelessUnivariateStatisticAbstractTest;
False,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,60,mport org.apache.commons.math.stat.univariate.UnivariateStatistic;
False,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,63, Test cases for the {@link UnivariateStatistic} class.
False,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,64, @version $Revision: 1.5 $ $Date: 2003/10/16 15:24:28 $
False,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,66,ublic class GeometricMeanTest extends StorelessUnivariateStatisticAbstractTest{
False,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,68,rotected GeometricMean stat;
False,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,71, @param name
False,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,73,ublic GeometricMeanTest(String name) {
False,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,74,uper(name);
False,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,77,ublic static Test suite() {
False,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,78,estSuite suite = new TestSuite(GeometricMeanTest.class);
False,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,79,"uite.setName(""Mean  Tests"");"
False,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,80,eturn suite;
False,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,83,* (non-Javadoc)
False,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,84, @see org.apache.commons.math.stat.univariate.UnivariateStatisticAbstractTest#getUnivariateStatistic()
False,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,86,ublic UnivariateStatistic getUnivariateStatistic() {
False,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,88,f(stat == null)
False,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,89,tat = new GeometricMean();
False,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,91,eturn stat;
False,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,94,* (non-Javadoc)
False,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,95, @see org.apache.commons.math.stat.univariate.UnivariateStatisticAbstractTest#expectedValue()
False,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,97,ublic double expectedValue() {
False,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/GeometricMeanTest.java,98,eturn this.geoMean;
False,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,2," The Apache Software License, Version 1.1"
False,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
False,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,5, reserved.
False,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,7," Redistribution and use in source and binary forms, with or without"
False,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,8," modification, are permitted provided that the following conditions"
False,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,9, are met:
False,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,11, 1. Redistributions of source code must retain the above copyright
False,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,12,"    notice, this list of conditions and the following disclaimer."
False,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,14, 2. Redistributions in binary form must reproduce the above copyright
False,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,15,"    notice, this list of conditions and the following disclaimer in"
False,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,16,    the documentation and/or other materials provided with the
False,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,17,    distribution.
False,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,19," 3. The end-user documentation included with the redistribution, if"
False,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,20,"    any, must include the following acknowledgement:"
False,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,21,"       ""This product includes software developed by the"
False,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,22,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,23,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,24,    if and wherever such third-party acknowledgements normally appear.
False,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,26," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,27,"    Foundation"" must not be used to endorse or promote products derived"
False,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,28,    from this software without prior written permission. For written
False,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,29,"    permission, please contact apache@apache.org."
False,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,31," 5. Products derived from this software may not be called ""Apache"""
False,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,32,"    nor may ""Apache"" appear in their name without prior written"
False,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,33,    permission of the Apache Software Foundation.
False,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,38, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,39," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,46, SUCH DAMAGE.
False,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,49, This software consists of voluntary contributions made by many
False,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,50, individuals on behalf of the Apache Software Foundation.  For more
False,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,51," information on the Apache Software Foundation, please see"
False,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,52, <http://www.apache.org/>.
False,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,54,ackage org.apache.commons.math.stat.univariate.moment;
False,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,56,mport junit.framework.Test;
False,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,57,mport junit.framework.TestSuite;
False,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,59,mport org.apache.commons.math.stat.univariate.StorelessUnivariateStatisticAbstractTest;
False,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,60,mport org.apache.commons.math.stat.univariate.UnivariateStatistic;
False,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,63, Test cases for the {@link UnivariateStatistic} class.
False,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,64, @version $Revision: 1.6 $ $Date: 2003/10/16 15:24:28 $
False,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,66,ublic class KurtosisTest extends StorelessUnivariateStatisticAbstractTest{
False,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,68,rotected Kurtosis stat;
False,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,71, @param name
False,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,73,ublic KurtosisTest(String name) {
False,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,74,uper(name);
False,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,77,ublic static Test suite() {
False,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,78,estSuite suite = new TestSuite(KurtosisTest.class);
False,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,79,"uite.setName(""Kurtosis  Tests"");"
False,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,80,eturn suite;
False,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,83,* (non-Javadoc)
False,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,84, @see org.apache.commons.math.stat.univariate.UnivariateStatisticAbstractTest#getUnivariateStatistic()
False,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,86,ublic UnivariateStatistic getUnivariateStatistic() {
False,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,88,f(stat == null)
False,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,89,tat = new Kurtosis();
False,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,91,eturn stat;
False,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,94,* (non-Javadoc)
False,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,95, @see org.apache.commons.math.stat.univariate.UnivariateStatisticAbstractTest#expectedValue()
False,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,97,ublic double expectedValue() {
False,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,src/test/org/apache/commons/math/stat/univariate/moment/KurtosisTest.java,98,eturn this.kurt;
False,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,2," The Apache Software License, Version 1.1"
False,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
False,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,5, reserved.
False,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,7," Redistribution and use in source and binary forms, with or without"
False,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,8," modification, are permitted provided that the following conditions"
False,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,9, are met:
False,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,11, 1. Redistributions of source code must retain the above copyright
False,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,12,"    notice, this list of conditions and the following disclaimer."
False,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,14, 2. Redistributions in binary form must reproduce the above copyright
False,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,15,"    notice, this list of conditions and the following disclaimer in"
False,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,16,    the documentation and/or other materials provided with the
False,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,17,    distribution.
False,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,19," 3. The end-user documentation included with the redistribution, if"
False,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,20,"    any, must include the following acknowledgement:"
False,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,21,"       ""This product includes software developed by the"
False,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,22,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,23,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,24,    if and wherever such third-party acknowledgements normally appear.
False,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,26," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,27,"    Foundation"" must not be used to endorse or promote products derived"
False,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,28,    from this software without prior written permission. For written
False,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,29,"    permission, please contact apache@apache.org."
False,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,31," 5. Products derived from this software may not be called ""Apache"""
False,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,32,"    nor may ""Apache"" appear in their name without prior written"
False,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,33,    permission of the Apache Software Foundation.
False,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,38, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,39," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,46, SUCH DAMAGE.
False,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,49, This software consists of voluntary contributions made by many
False,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,50, individuals on behalf of the Apache Software Foundation.  For more
False,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,51," information on the Apache Software Foundation, please see"
False,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,52, <http://www.apache.org/>.
False,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,54,ackage org.apache.commons.math.stat.univariate.moment;
False,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,56,mport junit.framework.Test;
False,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,57,mport junit.framework.TestSuite;
False,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,59,mport org.apache.commons.math.stat.univariate.StorelessUnivariateStatisticAbstractTest;
False,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,60,mport org.apache.commons.math.stat.univariate.UnivariateStatistic;
False,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,63, Test cases for the {@link UnivariateStatistic} class.
False,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,64, @version $Revision: 1.6 $ $Date: 2003/10/16 15:24:28 $
False,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,66,ublic class MeanTest extends StorelessUnivariateStatisticAbstractTest{
False,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,68,rotected Mean stat;
False,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,71, @param name
False,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,73,ublic MeanTest(String name) {
False,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,74,uper(name);
False,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,77,ublic static Test suite() {
False,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,78,estSuite suite = new TestSuite(MeanTest.class);
False,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,79,"uite.setName(""Mean  Tests"");"
False,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,80,eturn suite;
False,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,83,* (non-Javadoc)
False,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,84, @see org.apache.commons.math.stat.univariate.UnivariateStatisticAbstractTest#getUnivariateStatistic()
False,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,86,ublic UnivariateStatistic getUnivariateStatistic() {
False,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,88,f(stat == null)
False,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,89,tat = new Mean();
False,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,91,eturn stat;
False,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,94,* (non-Javadoc)
False,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,95, @see org.apache.commons.math.stat.univariate.UnivariateStatisticAbstractTest#expectedValue()
False,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,97,ublic double expectedValue() {
False,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,src/test/org/apache/commons/math/stat/univariate/moment/MeanTest.java,98,eturn this.mean;
False,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,2," The Apache Software License, Version 1.1"
False,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
False,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,5, reserved.
False,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,7," Redistribution and use in source and binary forms, with or without"
False,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,8," modification, are permitted provided that the following conditions"
False,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,9, are met:
False,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,11, 1. Redistributions of source code must retain the above copyright
False,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,12,"    notice, this list of conditions and the following disclaimer."
False,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,14, 2. Redistributions in binary form must reproduce the above copyright
False,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,15,"    notice, this list of conditions and the following disclaimer in"
False,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,16,    the documentation and/or other materials provided with the
False,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,17,    distribution.
False,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,19," 3. The end-user documentation included with the redistribution, if"
False,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,20,"    any, must include the following acknowledgement:"
False,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,21,"       ""This product includes software developed by the"
False,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,22,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,23,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,24,    if and wherever such third-party acknowledgements normally appear.
False,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,26," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,27,"    Foundation"" must not be used to endorse or promote products derived"
False,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,28,    from this software without prior written permission. For written
False,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,29,"    permission, please contact apache@apache.org."
False,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,31," 5. Products derived from this software may not be called ""Apache"""
False,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,32,"    nor may ""Apache"" appear in their name without prior written"
False,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,33,    permission of the Apache Software Foundation.
False,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,38, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,39," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,46, SUCH DAMAGE.
False,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,49, This software consists of voluntary contributions made by many
False,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,50, individuals on behalf of the Apache Software Foundation.  For more
False,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,51," information on the Apache Software Foundation, please see"
False,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,52, <http://www.apache.org/>.
False,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,54,ackage org.apache.commons.math.stat.univariate.moment;
False,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,56,mport junit.framework.Test;
False,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,57,mport junit.framework.TestSuite;
False,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,59,mport org.apache.commons.math.stat.univariate.StorelessUnivariateStatisticAbstractTest;
False,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,60,mport org.apache.commons.math.stat.univariate.UnivariateStatistic;
False,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,63, Test cases for the {@link UnivariateStatistic} class.
False,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,65, @version $Revision: 1.6 $ $Date: 2003/10/16 15:24:28 $
False,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,67,ublic class SkewnessTest extends StorelessUnivariateStatisticAbstractTest{
False,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,69,rotected Skewness stat;
False,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,72, @param name
False,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,74,ublic SkewnessTest(String name) {
False,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,75,uper(name);
False,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,78,* (non-Javadoc)
False,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,79, @see org.apache.commons.math.stat.univariate.UnivariateStatisticAbstractTest#getUnivariateStatistic()
False,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,81,ublic UnivariateStatistic getUnivariateStatistic() {
False,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,83,f(stat == null)
False,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,84,tat = new Skewness();
False,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,86,eturn stat;
False,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,89,ublic static Test suite() {
False,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,90,estSuite suite = new TestSuite(SkewnessTest.class);
False,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,91,"uite.setName(""Skewness Tests"");"
False,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,92,eturn suite;
False,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,95,* (non-Javadoc)
False,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,96, @see org.apache.commons.math.stat.univariate.UnivariateStatisticAbstractTest#expectedValue()
False,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,98,ublic double expectedValue() {
False,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,src/test/org/apache/commons/math/stat/univariate/moment/SkewnessTest.java,99,eturn this.skew;
False,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,2," The Apache Software License, Version 1.1"
False,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
False,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,5, reserved.
False,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,7," Redistribution and use in source and binary forms, with or without"
False,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,8," modification, are permitted provided that the following conditions"
False,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,9, are met:
False,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,11, 1. Redistributions of source code must retain the above copyright
False,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,12,"    notice, this list of conditions and the following disclaimer."
False,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,14, 2. Redistributions in binary form must reproduce the above copyright
False,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,15,"    notice, this list of conditions and the following disclaimer in"
False,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,16,    the documentation and/or other materials provided with the
False,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,17,    distribution.
False,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,19," 3. The end-user documentation included with the redistribution, if"
False,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,20,"    any, must include the following acknowledgement:"
False,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,21,"       ""This product includes software developed by the"
False,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,22,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,23,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,24,    if and wherever such third-party acknowledgements normally appear.
False,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,26," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,27,"    Foundation"" must not be used to endorse or promote products derived"
False,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,28,    from this software without prior written permission. For written
False,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,29,"    permission, please contact apache@apache.org."
False,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,31," 5. Products derived from this software may not be called ""Apache"""
False,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,32,"    nor may ""Apache"" appear in their name without prior written"
False,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,33,    permission of the Apache Software Foundation.
False,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,38, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,39," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,46, SUCH DAMAGE.
False,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,49, This software consists of voluntary contributions made by many
False,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,50, individuals on behalf of the Apache Software Foundation.  For more
False,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,51," information on the Apache Software Foundation, please see"
False,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,52, <http://www.apache.org/>.
False,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,54,ackage org.apache.commons.math.stat.univariate.moment;
False,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,56,mport junit.framework.Test;
False,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,57,mport junit.framework.TestSuite;
False,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,59,mport org.apache.commons.math.stat.univariate.StorelessUnivariateStatisticAbstractTest;
False,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,60,mport org.apache.commons.math.stat.univariate.UnivariateStatistic;
False,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,63, Test cases for the {@link UnivariateStatistic} class.
False,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,65, @version $Revision: 1.6 $ $Date: 2003/10/16 15:24:28 $
False,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,67,ublic class StandardDeviationTest extends StorelessUnivariateStatisticAbstractTest{
False,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,69,rotected StandardDeviation stat;
False,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,72, @param name
False,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,74,ublic StandardDeviationTest(String name) {
False,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,75,uper(name);
False,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,78,* (non-Javadoc)
False,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,79, @see org.apache.commons.math.stat.univariate.UnivariateStatisticAbstractTest#getUnivariateStatistic()
False,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,81,ublic UnivariateStatistic getUnivariateStatistic() {
False,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,83,f(stat == null)
False,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,84,tat = new StandardDeviation();
False,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,86,eturn stat;
False,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,89,ublic static Test suite() {
False,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,90,estSuite suite = new TestSuite(StandardDeviationTest.class);
False,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,91,"uite.setName(""StandardDeviation Tests"");"
False,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,92,eturn suite;
False,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,95,* (non-Javadoc)
False,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,96, @see org.apache.commons.math.stat.univariate.UnivariateStatisticAbstractTest#expectedValue()
False,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,98,ublic double expectedValue() {
False,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,src/test/org/apache/commons/math/stat/univariate/moment/StandardDeviationTest.java,99,eturn this.std;
False,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,2," The Apache Software License, Version 1.1"
False,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
False,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,5, reserved.
False,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,7," Redistribution and use in source and binary forms, with or without"
False,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,8," modification, are permitted provided that the following conditions"
False,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,9, are met:
False,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,11, 1. Redistributions of source code must retain the above copyright
False,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,12,"    notice, this list of conditions and the following disclaimer."
False,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,14, 2. Redistributions in binary form must reproduce the above copyright
False,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,15,"    notice, this list of conditions and the following disclaimer in"
False,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,16,    the documentation and/or other materials provided with the
False,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,17,    distribution.
False,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,19," 3. The end-user documentation included with the redistribution, if"
False,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,20,"    any, must include the following acknowledgement:"
False,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,21,"       ""This product includes software developed by the"
False,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,22,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,23,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,24,    if and wherever such third-party acknowledgements normally appear.
False,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,26," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,27,"    Foundation"" must not be used to endorse or promote products derived"
False,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,28,    from this software without prior written permission. For written
False,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,29,"    permission, please contact apache@apache.org."
False,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,31," 5. Products derived from this software may not be called ""Apache"""
False,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,32,"    nor may ""Apache"" appear in their name without prior written"
False,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,33,    permission of the Apache Software Foundation.
False,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,38, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,39," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,46, SUCH DAMAGE.
False,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,49, This software consists of voluntary contributions made by many
False,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,50, individuals on behalf of the Apache Software Foundation.  For more
False,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,51," information on the Apache Software Foundation, please see"
False,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,52, <http://www.apache.org/>.
False,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,54,ackage org.apache.commons.math.stat.univariate.moment;
False,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,56,mport junit.framework.Test;
False,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,57,mport junit.framework.TestSuite;
False,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,59,mport org.apache.commons.math.stat.univariate.StorelessUnivariateStatisticAbstractTest;
False,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,60,mport org.apache.commons.math.stat.univariate.UnivariateStatistic;
False,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,63, Test cases for the {@link UnivariateStatistic} class.
False,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,65, @version $Revision: 1.6 $ $Date: 2003/10/16 15:24:28 $
False,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,67,ublic class VarianceTest extends StorelessUnivariateStatisticAbstractTest{
False,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,69,rotected Variance stat;
False,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,72, @param name
False,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,74,ublic VarianceTest(String name) {
False,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,75,uper(name);
False,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,78,* (non-Javadoc)
False,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,79, @see org.apache.commons.math.stat.univariate.UnivariateStatisticAbstractTest#getUnivariateStatistic()
False,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,81,ublic UnivariateStatistic getUnivariateStatistic() {
False,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,83,f(stat == null)
False,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,84,tat = new Variance();
False,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,86,eturn stat;
False,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,89,ublic static Test suite() {
False,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,90,estSuite suite = new TestSuite(VarianceTest.class);
False,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,91,"uite.setName(""Variance Tests"");"
False,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,92,eturn suite;
False,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,95,* (non-Javadoc)
False,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,96, @see org.apache.commons.math.stat.univariate.UnivariateStatisticAbstractTest#expectedValue()
False,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,98,ublic double expectedValue() {
False,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,src/test/org/apache/commons/math/stat/univariate/moment/VarianceTest.java,99,eturn this.var;
False,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,2," The Apache Software License, Version 1.1"
False,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
False,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,5, reserved.
False,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,7," Redistribution and use in source and binary forms, with or without"
False,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,8," modification, are permitted provided that the following conditions"
False,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,9, are met:
False,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,11, 1. Redistributions of source code must retain the above copyright
False,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,12,"    notice, this list of conditions and the following disclaimer."
False,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,14, 2. Redistributions in binary form must reproduce the above copyright
False,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,15,"    notice, this list of conditions and the following disclaimer in"
False,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,16,    the documentation and/or other materials provided with the
False,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,17,    distribution.
False,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,19," 3. The end-user documentation included with the redistribution, if"
False,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,20,"    any, must include the following acknowledgement:"
False,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,21,"       ""This product includes software developed by the"
False,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,22,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,23,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,24,    if and wherever such third-party acknowledgements normally appear.
False,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,26," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,27,"    Foundation"" must not be used to endorse or promote products derived"
False,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,28,    from this software without prior written permission. For written
False,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,29,"    permission, please contact apache@apache.org."
False,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,31," 5. Products derived from this software may not be called ""Apache"""
False,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,32,"    nor may ""Apache"" appear in their name without prior written"
False,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,33,    permission of the Apache Software Foundation.
False,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,38, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,39," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,46, SUCH DAMAGE.
False,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,49, This software consists of voluntary contributions made by many
False,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,50, individuals on behalf of the Apache Software Foundation.  For more
False,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,51," information on the Apache Software Foundation, please see"
False,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,52, <http://www.apache.org/>.
False,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,54,ackage org.apache.commons.math.stat.univariate.rank;
False,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,56,mport junit.framework.Test;
False,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,57,mport junit.framework.TestSuite;
False,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,59,mport org.apache.commons.math.stat.univariate.StorelessUnivariateStatisticAbstractTest;
False,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,60,mport org.apache.commons.math.stat.univariate.UnivariateStatistic;
False,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,63, Test cases for the {@link UnivariateStatistic} class.
False,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,64, @version $Revision: 1.6 $ $Date: 2003/10/16 15:24:32 $
False,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,66,ublic class MaxTest extends StorelessUnivariateStatisticAbstractTest{
False,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,68,rotected Max stat;
False,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,71, @param name
False,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,73,ublic MaxTest(String name) {
False,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,74,uper(name);
False,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,77,ublic static Test suite() {
False,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,78,estSuite suite = new TestSuite(MaxTest.class);
False,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,79,"uite.setName(""Max  Tests"");"
False,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,80,eturn suite;
False,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,83,* (non-Javadoc)
False,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,84, @see org.apache.commons.math.stat.univariate.UnivariateStatisticAbstractTest#getUnivariateStatistic()
False,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,86,ublic UnivariateStatistic getUnivariateStatistic() {
False,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,88,f(stat == null)
False,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,89,tat = new Max();
False,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,91,eturn stat;
False,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,94,* (non-Javadoc)
False,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,95, @see org.apache.commons.math.stat.univariate.UnivariateStatisticAbstractTest#expectedValue()
False,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,97,ublic double expectedValue() {
False,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,98,eturn this.max;
False,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,2," The Apache Software License, Version 1.1"
False,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
False,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,5, reserved.
False,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,7," Redistribution and use in source and binary forms, with or without"
False,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,8," modification, are permitted provided that the following conditions"
False,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,9, are met:
False,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,11, 1. Redistributions of source code must retain the above copyright
False,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,12,"    notice, this list of conditions and the following disclaimer."
False,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,14, 2. Redistributions in binary form must reproduce the above copyright
False,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,15,"    notice, this list of conditions and the following disclaimer in"
False,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,16,    the documentation and/or other materials provided with the
False,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,17,    distribution.
False,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,19," 3. The end-user documentation included with the redistribution, if"
False,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,20,"    any, must include the following acknowledgement:"
False,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,21,"       ""This product includes software developed by the"
False,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,22,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,23,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,24,    if and wherever such third-party acknowledgements normally appear.
False,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,26," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,27,"    Foundation"" must not be used to endorse or promote products derived"
False,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,28,    from this software without prior written permission. For written
False,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,29,"    permission, please contact apache@apache.org."
False,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,31," 5. Products derived from this software may not be called ""Apache"""
False,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,32,"    nor may ""Apache"" appear in their name without prior written"
False,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,33,    permission of the Apache Software Foundation.
False,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,38, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,39," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,46, SUCH DAMAGE.
False,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,49, This software consists of voluntary contributions made by many
False,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,50, individuals on behalf of the Apache Software Foundation.  For more
False,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,51," information on the Apache Software Foundation, please see"
False,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,52, <http://www.apache.org/>.
False,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,54,ackage org.apache.commons.math.stat.univariate.rank;
False,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,56,mport junit.framework.Test;
False,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,57,mport junit.framework.TestSuite;
False,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,59,mport org.apache.commons.math.stat.univariate.UnivariateStatistic;
False,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,60,mport org.apache.commons.math.stat.univariate.UnivariateStatisticAbstractTest;
False,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,63, Test cases for the {@link UnivariateStatistic} class.
False,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,64, @version $Revision: 1.5 $ $Date: 2003/10/16 15:24:32 $
False,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,66,ublic class MedianTest extends UnivariateStatisticAbstractTest{
False,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,68,rotected Median stat;
False,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,71, @param name
False,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,73,ublic MedianTest(String name) {
False,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,74,uper(name);
False,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,77,ublic static Test suite() {
False,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,78,estSuite suite = new TestSuite(MedianTest.class);
False,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,79,"uite.setName(""Median  Tests"");"
False,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,80,eturn suite;
False,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,83,* (non-Javadoc)
False,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,84, @see org.apache.commons.math.stat.univariate.UnivariateStatisticAbstractTest#getUnivariateStatistic()
False,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,86,ublic UnivariateStatistic getUnivariateStatistic() {
False,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,88,f(stat == null)
False,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,89,tat = new Median();
False,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,91,eturn stat;
False,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,94,* (non-Javadoc)
False,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,95, @see org.apache.commons.math.stat.univariate.UnivariateStatisticAbstractTest#expectedValue()
False,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,97,ublic double expectedValue() {
False,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MedianTest.java,98,eturn this.median;
False,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,2," The Apache Software License, Version 1.1"
False,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
False,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,5, reserved.
False,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,7," Redistribution and use in source and binary forms, with or without"
False,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,8," modification, are permitted provided that the following conditions"
False,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,9, are met:
False,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,11, 1. Redistributions of source code must retain the above copyright
False,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,12,"    notice, this list of conditions and the following disclaimer."
False,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,14, 2. Redistributions in binary form must reproduce the above copyright
False,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,15,"    notice, this list of conditions and the following disclaimer in"
False,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,16,    the documentation and/or other materials provided with the
False,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,17,    distribution.
False,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,19," 3. The end-user documentation included with the redistribution, if"
False,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,20,"    any, must include the following acknowledgement:"
False,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,21,"       ""This product includes software developed by the"
False,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,22,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,23,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,24,    if and wherever such third-party acknowledgements normally appear.
False,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,26," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,27,"    Foundation"" must not be used to endorse or promote products derived"
False,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,28,    from this software without prior written permission. For written
False,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,29,"    permission, please contact apache@apache.org."
False,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,31," 5. Products derived from this software may not be called ""Apache"""
False,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,32,"    nor may ""Apache"" appear in their name without prior written"
False,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,33,    permission of the Apache Software Foundation.
False,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,38, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,39," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,46, SUCH DAMAGE.
False,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,49, This software consists of voluntary contributions made by many
False,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,50, individuals on behalf of the Apache Software Foundation.  For more
False,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,51," information on the Apache Software Foundation, please see"
False,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,52, <http://www.apache.org/>.
False,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,54,ackage org.apache.commons.math.stat.univariate.rank;
False,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,56,mport junit.framework.Test;
False,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,57,mport junit.framework.TestSuite;
False,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,59,mport org.apache.commons.math.stat.univariate.StorelessUnivariateStatisticAbstractTest;
False,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,60,mport org.apache.commons.math.stat.univariate.UnivariateStatistic;
False,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,63, Test cases for the {@link UnivariateStatistic} class.
False,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,64, @version $Revision: 1.6 $ $Date: 2003/10/16 15:24:32 $
False,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,66,ublic class MinTest extends StorelessUnivariateStatisticAbstractTest{
False,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,68,rotected Min stat;
False,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,71, @param name
False,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,73,ublic MinTest(String name) {
False,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,74,uper(name);
False,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,77,ublic static Test suite() {
False,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,78,estSuite suite = new TestSuite(MinTest.class);
False,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,79,"uite.setName(""Min  Tests"");"
False,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,80,eturn suite;
False,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,83,* (non-Javadoc)
False,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,84, @see org.apache.commons.math.stat.univariate.UnivariateStatisticAbstractTest#getUnivariateStatistic()
False,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,86,ublic UnivariateStatistic getUnivariateStatistic() {
False,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,88,f(stat == null)
False,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,89,tat = new Min();
False,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,91,eturn stat;
False,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,94,* (non-Javadoc)
False,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,95, @see org.apache.commons.math.stat.univariate.UnivariateStatisticAbstractTest#expectedValue()
False,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,97,ublic double expectedValue() {
False,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MinTest.java,98,eturn this.min;
False,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,2," The Apache Software License, Version 1.1"
False,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
False,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,5, reserved.
False,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,7," Redistribution and use in source and binary forms, with or without"
False,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,8," modification, are permitted provided that the following conditions"
False,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,9, are met:
False,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,11, 1. Redistributions of source code must retain the above copyright
False,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,12,"    notice, this list of conditions and the following disclaimer."
False,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,14, 2. Redistributions in binary form must reproduce the above copyright
False,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,15,"    notice, this list of conditions and the following disclaimer in"
False,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,16,    the documentation and/or other materials provided with the
False,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,17,    distribution.
False,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,19," 3. The end-user documentation included with the redistribution, if"
False,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,20,"    any, must include the following acknowledgement:"
False,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,21,"       ""This product includes software developed by the"
False,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,22,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,23,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,24,    if and wherever such third-party acknowledgements normally appear.
False,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,26," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,27,"    Foundation"" must not be used to endorse or promote products derived"
False,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,28,    from this software without prior written permission. For written
False,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,29,"    permission, please contact apache@apache.org."
False,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,31," 5. Products derived from this software may not be called ""Apache"""
False,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,32,"    nor may ""Apache"" appear in their name without prior written"
False,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,33,    permission of the Apache Software Foundation.
False,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,38, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,39," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,46, SUCH DAMAGE.
False,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,49, This software consists of voluntary contributions made by many
False,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,50, individuals on behalf of the Apache Software Foundation.  For more
False,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,51," information on the Apache Software Foundation, please see"
False,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,52, <http://www.apache.org/>.
False,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,54,ackage org.apache.commons.math.stat.univariate.rank;
False,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,56,mport junit.framework.Test;
False,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,57,mport junit.framework.TestSuite;
False,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,59,mport org.apache.commons.math.stat.univariate.UnivariateStatistic;
False,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,60,mport org.apache.commons.math.stat.univariate.UnivariateStatisticAbstractTest;
False,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,63, Test cases for the {@link UnivariateStatistic} class.
False,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,64, @version $Revision: 1.6 $ $Date: 2003/10/16 15:24:32 $
False,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,66,ublic class PercentileTest extends UnivariateStatisticAbstractTest{
False,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,68,rotected Percentile stat;
False,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,71, @param name
False,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,73,ublic PercentileTest(String name) {
False,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,74,uper(name);
False,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,77,ublic static Test suite() {
False,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,78,estSuite suite = new TestSuite(PercentileTest.class);
False,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,79,"uite.setName(""Percentile Tests"");"
False,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,80,eturn suite;
False,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,83,* (non-Javadoc)
False,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,84, @see org.apache.commons.math.stat.univariate.UnivariateStatisticAbstractTest#getUnivariateStatistic()
False,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,86,ublic UnivariateStatistic getUnivariateStatistic() {
False,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,88,f(stat == null)
False,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,89,tat = new Percentile(95.0);
False,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,91,eturn stat;
False,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,94,* (non-Javadoc)
False,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,95, @see org.apache.commons.math.stat.univariate.UnivariateStatisticAbstractTest#expectedValue()
False,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,97,ublic double expectedValue() {
False,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,98,/ TODO: fix this bad calculation in Percentile
False,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,99,eturn 20.82;
False,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,102,ublic void testHighPercentile(){
False,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,103,"ouble[] d = new double[]{1, 2, 3};"
False,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,104,ercentile p = new Percentile(75);
False,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,src/test/org/apache/commons/math/stat/univariate/rank/PercentileTest.java,105,"ssertEquals(3.0, p.evaluate(d), 1.0e-5);"
False,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,2," The Apache Software License, Version 1.1"
False,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
False,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,5, reserved.
False,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,7," Redistribution and use in source and binary forms, with or without"
False,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,8," modification, are permitted provided that the following conditions"
False,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,9, are met:
False,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,11, 1. Redistributions of source code must retain the above copyright
False,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,12,"    notice, this list of conditions and the following disclaimer."
False,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,14, 2. Redistributions in binary form must reproduce the above copyright
False,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,15,"    notice, this list of conditions and the following disclaimer in"
False,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,16,    the documentation and/or other materials provided with the
False,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,17,    distribution.
False,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,19," 3. The end-user documentation included with the redistribution, if"
False,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,20,"    any, must include the following acknowledgement:"
False,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,21,"       ""This product includes software developed by the"
False,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,22,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,23,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,24,    if and wherever such third-party acknowledgements normally appear.
False,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,26," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,27,"    Foundation"" must not be used to endorse or promote products derived"
False,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,28,    from this software without prior written permission. For written
False,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,29,"    permission, please contact apache@apache.org."
False,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,31," 5. Products derived from this software may not be called ""Apache"""
False,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,32,"    nor may ""Apache"" appear in their name without prior written"
False,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,33,    permission of the Apache Software Foundation.
False,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,38, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,39," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,46, SUCH DAMAGE.
False,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,49, This software consists of voluntary contributions made by many
False,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,50, individuals on behalf of the Apache Software Foundation.  For more
False,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,51," information on the Apache Software Foundation, please see"
False,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,52, <http://www.apache.org/>.
False,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,54,ackage org.apache.commons.math.stat.univariate.summary;
False,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,56,mport junit.framework.Test;
False,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,57,mport junit.framework.TestSuite;
False,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,59,mport org.apache.commons.math.stat.univariate.StorelessUnivariateStatisticAbstractTest;
False,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,60,mport org.apache.commons.math.stat.univariate.UnivariateStatistic;
False,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,63, Test cases for the {@link UnivariateStatistic} class.
False,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,64, @version $Revision: 1.6 $ $Date: 2003/10/16 15:24:33 $
False,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,66,ublic class ProductTest extends StorelessUnivariateStatisticAbstractTest{
False,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,68,rotected Product stat;
False,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,71, @param name
False,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,73,ublic ProductTest(String name) {
False,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,74,uper(name);
False,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,77,ublic static Test suite() {
False,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,78,estSuite suite = new TestSuite(ProductTest.class);
False,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,79,"uite.setName(""Product Tests"");"
False,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,80,eturn suite;
False,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,83,* (non-Javadoc)
False,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,84, @see org.apache.commons.math.stat.univariate.UnivariateStatisticAbstractTest#getUnivariateStatistic()
False,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,86,ublic UnivariateStatistic getUnivariateStatistic() {
False,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,88,f(stat == null)
False,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,89,tat = new Product();
False,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,91,eturn stat;
False,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,94,* (non-Javadoc)
False,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,95, @see org.apache.commons.math.stat.univariate.UnivariateStatisticAbstractTest#expectedValue()
False,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,97,ublic double expectedValue() {
False,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,src/test/org/apache/commons/math/stat/univariate/summary/ProductTest.java,98,eturn this.product;
False,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,2," The Apache Software License, Version 1.1"
False,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
False,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,5, reserved.
False,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,7," Redistribution and use in source and binary forms, with or without"
False,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,8," modification, are permitted provided that the following conditions"
False,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,9, are met:
False,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,11, 1. Redistributions of source code must retain the above copyright
False,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,12,"    notice, this list of conditions and the following disclaimer."
False,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,14, 2. Redistributions in binary form must reproduce the above copyright
False,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,15,"    notice, this list of conditions and the following disclaimer in"
False,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,16,    the documentation and/or other materials provided with the
False,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,17,    distribution.
False,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,19," 3. The end-user documentation included with the redistribution, if"
False,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,20,"    any, must include the following acknowledgement:"
False,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,21,"       ""This product includes software developed by the"
False,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,22,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,23,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,24,    if and wherever such third-party acknowledgements normally appear.
False,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,26," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,27,"    Foundation"" must not be used to endorse or promote products derived"
False,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,28,    from this software without prior written permission. For written
False,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,29,"    permission, please contact apache@apache.org."
False,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,31," 5. Products derived from this software may not be called ""Apache"""
False,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,32,"    nor may ""Apache"" appear in their name without prior written"
False,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,33,    permission of the Apache Software Foundation.
False,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,38, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,39," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,46, SUCH DAMAGE.
False,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,49, This software consists of voluntary contributions made by many
False,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,50, individuals on behalf of the Apache Software Foundation.  For more
False,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,51," information on the Apache Software Foundation, please see"
False,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,52, <http://www.apache.org/>.
False,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,54,ackage org.apache.commons.math.stat.univariate.summary;
False,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,56,mport junit.framework.Test;
False,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,57,mport junit.framework.TestSuite;
False,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,59,mport org.apache.commons.math.stat.univariate.StorelessUnivariateStatisticAbstractTest;
False,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,60,mport org.apache.commons.math.stat.univariate.UnivariateStatistic;
False,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,63, Test cases for the {@link UnivariateStatistic} class.
False,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,64, @version $Revision: 1.6 $ $Date: 2003/10/16 15:24:33 $
False,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,66,ublic class SumLogTest extends StorelessUnivariateStatisticAbstractTest{
False,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,68,rotected SumOfLogs stat;
False,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,71, @param name
False,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,73,ublic SumLogTest(String name) {
False,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,74,uper(name);
False,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,77,ublic static Test suite() {
False,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,78,estSuite suite = new TestSuite(SumLogTest.class);
False,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,79,"uite.setName(""SumLog Tests"");"
False,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,80,eturn suite;
False,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,83,* (non-Javadoc)
False,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,84, @see org.apache.commons.math.stat.univariate.UnivariateStatisticAbstractTest#getUnivariateStatistic()
False,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,86,ublic UnivariateStatistic getUnivariateStatistic() {
False,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,88,f(stat == null)
False,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,89,tat = new SumOfLogs();
False,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,91,eturn stat;
False,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,94,* (non-Javadoc)
False,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,95, @see org.apache.commons.math.stat.univariate.UnivariateStatisticAbstractTest#expectedValue()
False,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,97,ublic double expectedValue() {
False,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumLogTest.java,98,eturn this.sumLog;
False,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,2," The Apache Software License, Version 1.1"
False,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
False,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,5, reserved.
False,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,7," Redistribution and use in source and binary forms, with or without"
False,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,8," modification, are permitted provided that the following conditions"
False,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,9, are met:
False,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,11, 1. Redistributions of source code must retain the above copyright
False,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,12,"    notice, this list of conditions and the following disclaimer."
False,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,14, 2. Redistributions in binary form must reproduce the above copyright
False,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,15,"    notice, this list of conditions and the following disclaimer in"
False,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,16,    the documentation and/or other materials provided with the
False,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,17,    distribution.
False,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,19," 3. The end-user documentation included with the redistribution, if"
False,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,20,"    any, must include the following acknowledgement:"
False,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,21,"       ""This product includes software developed by the"
False,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,22,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,23,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,24,    if and wherever such third-party acknowledgements normally appear.
False,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,26," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,27,"    Foundation"" must not be used to endorse or promote products derived"
False,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,28,    from this software without prior written permission. For written
False,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,29,"    permission, please contact apache@apache.org."
False,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,31," 5. Products derived from this software may not be called ""Apache"""
False,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,32,"    nor may ""Apache"" appear in their name without prior written"
False,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,33,    permission of the Apache Software Foundation.
False,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,38, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,39," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,46, SUCH DAMAGE.
False,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,49, This software consists of voluntary contributions made by many
False,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,50, individuals on behalf of the Apache Software Foundation.  For more
False,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,51," information on the Apache Software Foundation, please see"
False,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,52, <http://www.apache.org/>.
False,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,54,ackage org.apache.commons.math.stat.univariate.summary;
False,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,56,mport junit.framework.Test;
False,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,57,mport junit.framework.TestSuite;
False,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,59,mport org.apache.commons.math.stat.univariate.StorelessUnivariateStatisticAbstractTest;
False,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,60,mport org.apache.commons.math.stat.univariate.UnivariateStatistic;
False,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,63, Test cases for the {@link UnivariateStatistic} class.
False,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,64, @version $Revision: 1.6 $ $Date: 2003/10/16 15:24:33 $
False,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,66,ublic class SumSqTest extends StorelessUnivariateStatisticAbstractTest{
False,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,68,rotected SumOfSquares stat;
False,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,71, @param name
False,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,73,ublic SumSqTest(String name) {
False,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,74,uper(name);
False,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,77,ublic static Test suite() {
False,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,78,estSuite suite = new TestSuite(SumSqTest.class);
False,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,79,"uite.setName(""SumSq Tests"");"
False,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,80,eturn suite;
False,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,83,* (non-Javadoc)
False,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,84, @see org.apache.commons.math.stat.univariate.UnivariateStatisticAbstractTest#getUnivariateStatistic()
False,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,86,ublic UnivariateStatistic getUnivariateStatistic() {
False,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,88,f(stat == null)
False,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,89,tat = new SumOfSquares();
False,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,91,eturn stat;
False,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,94,* (non-Javadoc)
False,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,95, @see org.apache.commons.math.stat.univariate.UnivariateStatisticAbstractTest#expectedValue()
False,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,97,ublic double expectedValue() {
False,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumSqTest.java,98,eturn this.sumSq;
False,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,2," The Apache Software License, Version 1.1"
False,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
False,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,5, reserved.
False,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,7," Redistribution and use in source and binary forms, with or without"
False,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,8," modification, are permitted provided that the following conditions"
False,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,9, are met:
False,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,11, 1. Redistributions of source code must retain the above copyright
False,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,12,"    notice, this list of conditions and the following disclaimer."
False,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,14, 2. Redistributions in binary form must reproduce the above copyright
False,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,15,"    notice, this list of conditions and the following disclaimer in"
False,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,16,    the documentation and/or other materials provided with the
False,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,17,    distribution.
False,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,19," 3. The end-user documentation included with the redistribution, if"
False,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,20,"    any, must include the following acknowledgement:"
False,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,21,"       ""This product includes software developed by the"
False,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,22,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,23,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,24,    if and wherever such third-party acknowledgements normally appear.
False,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,26," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,27,"    Foundation"" must not be used to endorse or promote products derived"
False,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,28,    from this software without prior written permission. For written
False,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,29,"    permission, please contact apache@apache.org."
False,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,31," 5. Products derived from this software may not be called ""Apache"""
False,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,32,"    nor may ""Apache"" appear in their name without prior written"
False,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,33,    permission of the Apache Software Foundation.
False,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,38, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,39," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,46, SUCH DAMAGE.
False,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,49, This software consists of voluntary contributions made by many
False,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,50, individuals on behalf of the Apache Software Foundation.  For more
False,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,51," information on the Apache Software Foundation, please see"
False,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,52, <http://www.apache.org/>.
False,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,54,ackage org.apache.commons.math.stat.univariate.summary;
False,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,56,mport junit.framework.Test;
False,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,57,mport junit.framework.TestSuite;
False,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,59,mport org.apache.commons.math.stat.univariate.StorelessUnivariateStatisticAbstractTest;
False,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,60,mport org.apache.commons.math.stat.univariate.UnivariateStatistic;
False,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,63, Test cases for the {@link UnivariateStatistic} class.
False,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,64, @version $Revision: 1.6 $ $Date: 2003/10/16 15:24:33 $
False,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,66,ublic class SumTest extends StorelessUnivariateStatisticAbstractTest{
False,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,68,rotected Sum stat;
False,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,71, @param name
False,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,73,ublic SumTest(String name) {
False,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,74,uper(name);
False,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,77,ublic static Test suite() {
False,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,78,estSuite suite = new TestSuite(SumTest.class);
False,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,79,"uite.setName(""Sum Tests"");"
False,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,80,eturn suite;
False,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,83,* (non-Javadoc)
False,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,84, @see org.apache.commons.math.stat.univariate.UnivariateStatisticAbstractTest#getUnivariateStatistic()
False,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,86,ublic UnivariateStatistic getUnivariateStatistic() {
False,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,88,f(stat == null)
False,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,89,tat = new Sum();
False,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,91,eturn stat;
False,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,94,* (non-Javadoc)
False,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,95, @see org.apache.commons.math.stat.univariate.UnivariateStatisticAbstractTest#expectedValue()
False,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,97,ublic double expectedValue() {
False,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,src/test/org/apache/commons/math/stat/univariate/summary/SumTest.java,98,eturn this.sum;
False,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,2," The Apache Software License, Version 1.1"
False,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
False,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,5, reserved.
False,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,7," Redistribution and use in source and binary forms, with or without"
False,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,8," modification, are permitted provided that the following conditions"
False,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,9, are met:
False,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,11, 1. Redistributions of source code must retain the above copyright
False,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,12,"    notice, this list of conditions and the following disclaimer."
False,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,14, 2. Redistributions in binary form must reproduce the above copyright
False,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,15,"    notice, this list of conditions and the following disclaimer in"
False,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,16,    the documentation and/or other materials provided with the
False,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,17,    distribution.
False,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,19," 3. The end-user documentation included with the redistribution, if"
False,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,20,"    any, must include the following acknowledgement:"
False,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,21,"       ""This product includes software developed by the"
False,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,22,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,23,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,24,    if and wherever such third-party acknowledgements normally appear.
False,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,26," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,27,"    Foundation"" must not be used to endorse or promote products derived"
False,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,28,    from this software without prior written permission. For written
False,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,29,"    permission, please contact apache@apache.org."
False,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,31," 5. Products derived from this software may not be called ""Apache"""
False,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,32,"    nor may ""Apache"" appear in their name without prior written"
False,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,33,    permission of the Apache Software Foundation.
False,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,38, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,39," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,46, SUCH DAMAGE.
False,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,49, This software consists of voluntary contributions made by many
False,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,50, individuals on behalf of the Apache Software Foundation.  For more
False,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,51," information on the Apache Software Foundation, please see"
False,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,52, <http://www.apache.org/>.
False,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,55,ackage org.apache.commons.math.util;
False,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,57,mport org.apache.commons.math.TestUtils;
False,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,59,mport junit.framework.TestCase;
False,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,62, @version $Revision: 1.3 $ $Date: 2003/10/16 15:24:31 $
False,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,64,ublic class BeanTransformerTest extends TestCase {
False,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,69,ublic void testConstructor(){
False,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,70,eanTransformer b = new BeanTransformer();
False,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,71,ssertNull(b.getPropertyName());
False,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,77,ublic void testConstructorString(){
False,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,78,"tring name = ""property"";"
False,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,79,eanTransformer b = new BeanTransformer(name);
False,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,80,"ssertEquals(name, b.getPropertyName());"
False,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,86,ublic void testSetPropertyName(){
False,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,87,"tring name = ""property"";"
False,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,88,eanTransformer b = new BeanTransformer();
False,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,89,.setPropertyName(name);
False,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,90,"ssertEquals(name, b.getPropertyName());"
False,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,96,ublic void testTransformNoSuchMethod(){
False,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,97,"eanTransformer b = new BeanTransformer(""z"");"
False,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,98,estBean target = new TestBean();
False,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,99,ouble value = b.transform(target);
False,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,100,"estUtils.assertEquals(Double.NaN, value, 1.0e-2);"
False,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,106,ublic void testTransform(){
False,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,107,"eanTransformer b = new BeanTransformer(""x"");"
False,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,108,estBean target = new TestBean();
False,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,109,ouble value = b.transform(target);
False,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,110,"estUtils.assertEquals(1.0, value, 1.0e-2);"
False,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,116,ublic void testTransformInvocationError(){
False,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,117,"eanTransformer b = new BeanTransformer(""z"");"
False,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,118,estBean target = new TestBean();
False,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,119,ouble value = b.transform(target);
False,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,120,"estUtils.assertEquals(Double.NaN, value, 1.0e-2);"
False,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,126,ublic void testTransformInvalidType(){
False,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,127,"eanTransformer b = new BeanTransformer(""y"");"
False,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,128,estBean target = new TestBean();
False,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,129,ry {
False,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,130,.transform(target);
False,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,131,ail();
False,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,132, catch(ClassCastException ex){
False,src/test/org/apache/commons/math/util/BeanTransformerTest.java,src/test/org/apache/commons/math/util/BeanTransformerTest.java,133,/ success
False,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,2," The Apache Software License, Version 1.1"
False,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
False,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,5, reserved.
False,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,7," Redistribution and use in source and binary forms, with or without"
False,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,8," modification, are permitted provided that the following conditions"
False,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,9, are met:
False,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,11, 1. Redistributions of source code must retain the above copyright
False,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,12,"    notice, this list of conditions and the following disclaimer."
False,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,14, 2. Redistributions in binary form must reproduce the above copyright
False,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,15,"    notice, this list of conditions and the following disclaimer in"
False,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,16,    the documentation and/or other materials provided with the
False,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,17,    distribution.
False,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,19," 3. The end-user documentation included with the redistribution, if"
False,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,20,"    any, must include the following acknowledgement:"
False,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,21,"       ""This product includes software developed by the"
False,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,22,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,23,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,24,    if and wherever such third-party acknowledgements normally appear.
False,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,26," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,27,"    Foundation"" must not be used to endorse or promote products derived"
False,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,28,    from this software without prior written permission. For written
False,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,29,"    permission, please contact apache@apache.org."
False,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,31," 5. Products derived from this software may not be called ""Apache"""
False,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,32,"    nor may ""Apache"" appear in their name without prior written"
False,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,33,    permission of the Apache Software Foundation.
False,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,38, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,39," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,46, SUCH DAMAGE.
False,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,49, This software consists of voluntary contributions made by many
False,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,50, individuals on behalf of the Apache Software Foundation.  For more
False,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,51," information on the Apache Software Foundation, please see"
False,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,52, <http://www.apache.org/>.
False,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,54,ackage org.apache.commons.math.util;
False,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,56,mport org.apache.commons.math.MathException;
False,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,58,mport junit.framework.TestCase;
False,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,61, @version $Revision: 1.4 $ $Date: 2003/10/16 15:24:31 $
False,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,63,ublic class ContinuedFractionTest extends TestCase {
False,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,65, Constructor for ContinuedFractionTest.
False,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,66, @param name
False,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,68,ublic ContinuedFractionTest(String name) {
False,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,69,uper(name);
False,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,72,ublic void testGoldenRation(){
False,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,73,ontinuedFraction cf = new ContinuedFraction() {
False,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,74,"ublic double getA(int n, double x) {"
False,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,75,eturn 1.0;
False,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,78,"ublic double getB(int n, double x) {"
False,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,79,eturn 1.0;
False,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,83,ry {
False,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,84,"ouble gr = cf.evaluate(0.0, 10e-9);"
False,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,85,"ssertEquals(1.61803399, gr, 10e-9);"
False,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,86, catch (MathException e) {
False,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,87,ail(e.getMessage());
False,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,2," The Apache Software License, Version 1.1"
False,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
False,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,5, reserved.
False,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,7," Redistribution and use in source and binary forms, with or without"
False,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,8," modification, are permitted provided that the following conditions"
False,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,9, are met:
False,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,11, 1. Redistributions of source code must retain the above copyright
False,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,12,"    notice, this list of conditions and the following disclaimer."
False,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,14, 2. Redistributions in binary form must reproduce the above copyright
False,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,15,"    notice, this list of conditions and the following disclaimer in"
False,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,16,    the documentation and/or other materials provided with the
False,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,17,    distribution.
False,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,19," 3. The end-user documentation included with the redistribution, if"
False,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,20,"    any, must include the following acknowledgement:"
False,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,21,"       ""This product includes software developed by the"
False,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,22,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,23,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,24,    if and wherever such third-party acknowledgements normally appear.
False,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,26," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,27,"    Foundation"" must not be used to endorse or promote products derived"
False,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,28,    from this software without prior written permission. For written
False,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,29,"    permission, please contact apache@apache.org."
False,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,31," 5. Products derived from this software may not be called ""Apache"""
False,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,32,"    nor may ""Apache"" appear in their name without prior written"
False,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,33,    permission of the Apache Software Foundation.
False,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,38, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,39," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,46, SUCH DAMAGE.
False,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,49, This software consists of voluntary contributions made by many
False,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,50, individuals on behalf of the Apache Software Foundation.  For more
False,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,51," information on the Apache Software Foundation, please see"
False,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,52, <http://www.apache.org/>.
False,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,54,ackage org.apache.commons.math.util;
False,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,58, This class contains test cases for the ExpandableDoubleArray.
False,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,60, @version $Revision: 1.4 $ $Date: 2003/10/16 15:24:31 $
False,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,62,ublic class ContractableDoubleArrayTest extends ExpandableDoubleArrayTest {
False,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,64,ublic ContractableDoubleArrayTest(String name) {
False,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,65,uper( name );
False,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,68,* (non-Javadoc)
False,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,69, @see junit.framework.TestCase#setUp()
False,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,71,rotected void setUp() throws Exception {
False,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,72,a = new ContractableDoubleArray();
False,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ContractableDoubleArrayTest.java,73,a = new ContractableDoubleArray();
False,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,2," The Apache Software License, Version 1.1"
False,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
False,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,5, reserved.
False,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,7," Redistribution and use in source and binary forms, with or without"
False,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,8," modification, are permitted provided that the following conditions"
False,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,9, are met:
False,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,11, 1. Redistributions of source code must retain the above copyright
False,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,12,"    notice, this list of conditions and the following disclaimer."
False,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,14, 2. Redistributions in binary form must reproduce the above copyright
False,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,15,"    notice, this list of conditions and the following disclaimer in"
False,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,16,    the documentation and/or other materials provided with the
False,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,17,    distribution.
False,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,19," 3. The end-user documentation included with the redistribution, if"
False,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,20,"    any, must include the following acknowledgement:"
False,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,21,"       ""This product includes software developed by the"
False,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,22,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,23,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,24,    if and wherever such third-party acknowledgements normally appear.
False,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,26," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,27,"    Foundation"" must not be used to endorse or promote products derived"
False,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,28,    from this software without prior written permission. For written
False,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,29,"    permission, please contact apache@apache.org."
False,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,31," 5. Products derived from this software may not be called ""Apache"""
False,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,32,"    nor may ""Apache"" appear in their name without prior written"
False,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,33,    permission of the Apache Software Foundation.
False,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,38, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,39," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,46, SUCH DAMAGE.
False,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,49, This software consists of voluntary contributions made by many
False,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,50, individuals on behalf of the Apache Software Foundation.  For more
False,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,51," information on the Apache Software Foundation, please see"
False,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,52, <http://www.apache.org/>.
False,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,55,ackage org.apache.commons.math.util;
False,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,57,mport java.math.BigDecimal;
False,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,59,mport org.apache.commons.math.TestUtils;
False,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,61,mport junit.framework.TestCase;
False,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,64, @version $Revision: 1.3 $ $Date: 2003/10/16 15:24:31 $
False,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,66,ublic class DefaultTransformerTest extends TestCase {
False,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,70,ublic void testTransformDouble(){
False,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,71,ouble expected = 1.0;
False,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,72,ouble input = new Double(expected);
False,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,73,efaultTransformer t = new DefaultTransformer();
False,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,74,"ssertEquals(expected, t.transform(input), 1.0e-4);"
False,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,80,ublic void testTransformNull(){
False,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,81,ouble expected = Double.NaN;
False,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,82,efaultTransformer t = new DefaultTransformer();
False,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,83,"estUtils.assertEquals(expected, t.transform(null), 1.0e-4);"
False,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,89,ublic void testTransformInteger(){
False,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,90,ouble expected = 1.0;
False,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,91,nteger input = new Integer(1);
False,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,92,efaultTransformer t = new DefaultTransformer();
False,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,93,"ssertEquals(expected, t.transform(input), 1.0e-4);"
False,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,99,ublic void testTransformBigDecimal(){
False,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,100,ouble expected = 1.0;
False,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,101,"igDecimal input = new BigDecimal(""1.0"");"
False,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,102,efaultTransformer t = new DefaultTransformer();
False,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,103,"ssertEquals(expected, t.transform(input), 1.0e-4);"
False,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,109,ublic void testTransformString(){
False,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,110,ouble expected = 1.0;
False,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,111,"tring input = ""1.0"";"
False,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,112,efaultTransformer t = new DefaultTransformer();
False,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,113,"ssertEquals(expected, t.transform(input), 1.0e-4);"
False,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,119,ublic void testTransformObject(){
False,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,120,ouble expected = Double.NaN;
False,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,121,oolean input = Boolean.TRUE;
False,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,122,efaultTransformer t = new DefaultTransformer();
False,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,123,"estUtils.assertEquals(expected, t.transform(input), 1.0e-4);"
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,2," The Apache Software License, Version 1.1"
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,5, reserved.
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,7," Redistribution and use in source and binary forms, with or without"
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,8," modification, are permitted provided that the following conditions"
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,9, are met:
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,11, 1. Redistributions of source code must retain the above copyright
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,12,"    notice, this list of conditions and the following disclaimer."
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,14, 2. Redistributions in binary form must reproduce the above copyright
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,15,"    notice, this list of conditions and the following disclaimer in"
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,16,    the documentation and/or other materials provided with the
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,17,    distribution.
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,19," 3. The end-user documentation included with the redistribution, if"
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,20,"    any, must include the following acknowledgement:"
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,21,"       ""This product includes software developed by the"
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,22,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,23,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,24,    if and wherever such third-party acknowledgements normally appear.
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,26," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,27,"    Foundation"" must not be used to endorse or promote products derived"
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,28,    from this software without prior written permission. For written
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,29,"    permission, please contact apache@apache.org."
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,31," 5. Products derived from this software may not be called ""Apache"""
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,32,"    nor may ""Apache"" appear in their name without prior written"
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,33,    permission of the Apache Software Foundation.
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,38, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,39," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,46, SUCH DAMAGE.
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,49, This software consists of voluntary contributions made by many
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,50, individuals on behalf of the Apache Software Foundation.  For more
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,51," information on the Apache Software Foundation, please see"
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,52, <http://www.apache.org/>.
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,54,ackage org.apache.commons.math.util;
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,56,mport org.apache.commons.math.stat.StatUtils;
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,58,mport junit.framework.TestCase;
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,61, This class contains test cases for the ExpandableDoubleArray.
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,63, @version $Revision: 1.5 $ $Date: 2003/10/16 15:24:31 $
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,65,ublic abstract class DoubleArrayAbstractTest extends TestCase {
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,67,rotected DoubleArray da = null;
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,69,/ Array used to test rolling
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,70,rotected DoubleArray ra = null;
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,72,ublic DoubleArrayAbstractTest(String name) {
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,73,uper(name);
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,76,ublic void testAdd1000() {
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,78,or (int i = 0; i < 1000; i++) {
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,79,a.addElement(i);
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,82,ssertEquals(
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,83,"Number of elements should be equal to 1000 after adding 1000 values"","
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,84,"000,"
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,85,a.getNumElements());
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,87,ssertEquals(
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,88,"The element at the 56th index should be 56"","
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,89,"6.0,"
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,90,"a.getElement(56),"
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,91,ouble.MIN_VALUE);
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,95,ublic void testGetValues() {
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,96,"ouble[] controlArray = { 2.0, 4.0, 6.0 };"
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,98,a.addElement(2.0);
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,99,a.addElement(4.0);
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,100,a.addElement(6.0);
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,101,ouble[] testArray = da.getElements();
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,103,or (int i = 0; i < da.getNumElements(); i++) {
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,104,ssertEquals(
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,105,"The testArray values should equal the controlArray values, index i: """
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,106, i
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,107," "" does not match"","
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,108,"estArray[i],"
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,109,"ontrolArray[i],"
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,110,ouble.MIN_VALUE);
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,115,ublic void testAddElementRolling() {
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,116,a.addElement(0.5);
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,117,a.addElement(1.0);
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,118,a.addElement(1.0);
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,119,a.addElement(1.0);
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,120,a.addElement(1.0);
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,121,a.addElement(1.0);
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,122,a.addElementRolling(2.0);
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,124,ssertEquals(
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,125,"There should be 6 elements in the eda"","
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,126,","
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,127,a.getNumElements());
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,128,ssertEquals(
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,129,"The max element should be 2.0"","
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,130,".0,"
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,131,"tatUtils.max(ra.getElements()),"
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,132,ouble.MIN_VALUE);
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,133,ssertEquals(
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,134,"The min element should be 1.0"","
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,135,".0,"
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,136,"tatUtils.min(ra.getElements()),"
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,137,ouble.MIN_VALUE);
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,139,or (int i = 0; i < 1024; i++) {
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,140,a.addElementRolling(i);
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,143,ssertEquals(
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,144,"We just inserted 1024 rolling elements, num elements should still be 6"","
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,145,","
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,146,a.getNumElements());
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,149,ublic void testMinMax() {
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,150,a.addElement(2.0);
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,151,a.addElement(22.0);
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,152,a.addElement(-2.0);
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,153,a.addElement(21.0);
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,154,a.addElement(22.0);
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,155,a.addElement(42.0);
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,156,a.addElement(62.0);
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,157,a.addElement(22.0);
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,158,a.addElement(122.0);
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,159,a.addElement(1212.0);
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,161,"ssertEquals(""Min should be -2.0"", -2.0, StatUtils.min(da.getElements()), Double.MIN_VALUE);"
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,162,ssertEquals(
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,163,"Max should be 1212.0"","
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,164,"212.0,"
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,165,"tatUtils.max(da.getElements()),"
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,166,ouble.MIN_VALUE);
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,2," The Apache Software License, Version 1.1"
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,5, reserved.
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,7," Redistribution and use in source and binary forms, with or without"
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,8," modification, are permitted provided that the following conditions"
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,9, are met:
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,11, 1. Redistributions of source code must retain the above copyright
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,12,"    notice, this list of conditions and the following disclaimer."
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,14, 2. Redistributions in binary form must reproduce the above copyright
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,15,"    notice, this list of conditions and the following disclaimer in"
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,16,    the documentation and/or other materials provided with the
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,17,    distribution.
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,19," 3. The end-user documentation included with the redistribution, if"
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,20,"    any, must include the following acknowledgement:"
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,21,"       ""This product includes software developed by the"
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,22,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,23,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,24,    if and wherever such third-party acknowledgements normally appear.
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,26," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,27,"    Foundation"" must not be used to endorse or promote products derived"
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,28,    from this software without prior written permission. For written
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,29,"    permission, please contact apache@apache.org."
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,31," 5. Products derived from this software may not be called ""Apache"""
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,32,"    nor may ""Apache"" appear in their name without prior written"
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,33,    permission of the Apache Software Foundation.
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,38, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,39," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,46, SUCH DAMAGE.
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,49, This software consists of voluntary contributions made by many
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,50, individuals on behalf of the Apache Software Foundation.  For more
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,51," information on the Apache Software Foundation, please see"
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,52, <http://www.apache.org/>.
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,54,ackage org.apache.commons.math.util;
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,58, This class contains test cases for the ExpandableDoubleArray.
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,60, @version $Revision: 1.5 $ $Date: 2003/10/16 15:24:31 $
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,62,ublic class ExpandableDoubleArrayTest extends DoubleArrayAbstractTest {
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,64,ublic ExpandableDoubleArrayTest(String name) {
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,65,uper( name );
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,68,* (non-Javadoc)
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,69, @see junit.framework.TestCase#setUp()
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,71,rotected void setUp() throws Exception {
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,72,a = new ExpandableDoubleArray();
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,73,a = new ExpandableDoubleArray();
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,76,* (non-Javadoc)
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,77, @see junit.framework.TestCase#tearDown()
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,79,rotected void tearDown() throws Exception {
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,80,a = null;
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,81,a = null;
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,85,** TEST NORMAL OPERATIONS - calling super class test and then checking internal
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,86,   storage **/
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,89,ublic void testSetElementArbitraryExpansion() {
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,90,"ouble[] controlArray = {2.0, 4.0, 6.0};"
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,92,a.addElement(2.0);
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,93,a.addElement(4.0);
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,94,a.addElement(6.0);
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,95,"a.setElement(1, 3.0);"
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,97,/ Expand the array arbitrarily to 1000 items
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,98,"a.setElement(1000, 3.4);"
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,100,"ssertEquals( ""The number of elements should now be 1001, it isn't"", da.getNumElements(), 1001);"
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,102,"ssertEquals( ""Uninitialized Elements are default value of 0.0, index 766 wasn't"", 0.0,"
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,103,"a.getElement( 760 ), Double.MIN_VALUE );"
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,105,"ssertEquals( ""The 1000th index should be 3.4, it isn't"", 3.4, da.getElement(1000), Double.MIN_VALUE );"
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,106,"ssertEquals( ""The 0th index should be 2.0, it isn't"", 2.0, da.getElement(0), Double.MIN_VALUE);"
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,110,ublic void testAdd1000() {
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,111,uper.testAdd1000();
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,112,"ssertEquals(""Internal Storage length should be 1024 if we started out with initial capacity of "" +"
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,113,"16 and an expansion factor of 2.0"","
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,114,"024, ((ExpandableDoubleArray) da).getInternalLength());"
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,117,ublic void testAddElementRolling() {
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,118,uper.testAddElementRolling();
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,121,ublic void testSetNumberOfElements() {
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,122,a.addElement( 1.0 );
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,123,a.addElement( 1.0 );
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,124,a.addElement( 1.0 );
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,125,a.addElement( 1.0 );
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,126,a.addElement( 1.0 );
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,127,a.addElement( 1.0 );
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,128,"ssertEquals( ""Number of elements should equal 6"", da.getNumElements(), 6);"
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,130,(ExpandableDoubleArray) da).setNumElements( 3 );
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,131,"ssertEquals( ""Number of elements should equal 3"", da.getNumElements(), 3);"
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,133,ry {
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,134,(ExpandableDoubleArray) da).setNumElements( -3 );
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,135,"ail( ""Setting number of elements to negative should've thrown an exception"");"
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,136, catch( IllegalArgumentException iae ) {
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,139,(ExpandableDoubleArray) da).setNumElements(1024);
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,140,"ssertEquals( ""Number of elements should now be 1024"", da.getNumElements(), 1024);"
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,141,"ssertEquals( ""Element 453 should be a default double"", da.getElement( 453 ), 0.0, Double.MIN_VALUE);"
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,145,** TESTS WHICH FOCUS ON ExpandableSpecific internal storage */
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,147,ublic void testWithInitialCapacity() {
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,149,xpandableDoubleArray eDA2 = new ExpandableDoubleArray(2);
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,150,"ssertEquals(""Initial number of elements should be 0"", 0, eDA2.getNumElements());"
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,152,"nt iterations = (int) Math.pow(2.0, 15.0);"
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,154,or( int i = 0; i < iterations; i++) {
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,155,DA2.addElement( i );
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,158,"ssertEquals(""Number of elements should be equal to 2^15"", (int) Math.pow(2.0, 15.0), eDA2.getNumElements());"
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,160,DA2.addElement( 2.0 );
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,162,"ssertEquals(""Number of elements should be equals to 2^15 + 1"","
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,163," (int) Math.pow(2.0, 15.0) + 1 ), eDA2.getNumElements() );"
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,166,ublic void testWithInitialCapacityAndExpansionFactor() {
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,168,"xpandableDoubleArray eDA3 = new ExpandableDoubleArray(3, 3.0f);"
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,169,"ssertEquals(""Initial number of elements should be 0"", 0, eDA3.getNumElements() );"
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,171,"nt iterations = (int) Math.pow(3.0, 7.0);"
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,173,or( int i = 0; i < iterations; i++) {
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,174,DA3.addElement( i );
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,177,"ssertEquals(""Number of elements should be equal to 3^7"", (int) Math.pow(3.0, 7.0), eDA3.getNumElements());"
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,179,DA3.addElement( 2.0 );
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,181,"ssertEquals(""Number of elements should be equals to 3^7 + 1"","
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,182," (int) Math.pow(3.0, 7.0) + 1 ), eDA3.getNumElements() );"
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,184,"ssertEquals(""Expansion factor should equal 3.0"", 3.0f, eDA3.getExpansionFactor(), Double.MIN_VALUE);"
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,187,ublic void testDiscard() {
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,188,a.addElement(2.0);
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,189,a.addElement(2.0);
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,190,a.addElement(2.0);
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,191,a.addElement(2.0);
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,192,a.addElement(2.0);
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,193,a.addElement(2.0);
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,194,a.addElement(2.0);
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,195,a.addElement(2.0);
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,196,a.addElement(2.0);
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,197,a.addElement(2.0);
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,198,a.addElement(2.0);
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,199,"ssertEquals( ""Number of elements should be 11"", 11, da.getNumElements());"
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,201,(ExpandableDoubleArray)da).discardFrontElements(5);
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,202,"ssertEquals( ""Number of elements should be 6"", 6, da.getNumElements());"
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,204,ry {
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,205,(ExpandableDoubleArray)da).discardFrontElements(-1);
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,206,"ail( ""Trying to discard a negative number of element is not allowed"");"
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,207, catch( Exception e ){
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,210,ry {
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,211,(ExpandableDoubleArray)da).discardFrontElements( 10000 );
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,212,"ail( ""You can't discard more elements than the array contains"");"
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,213, catch( Exception e ){
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,218,** TEST ERROR CONDITIONS **/
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,220,ublic void testIllegalInitialCapacity() {
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,221,ry {
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,222,"xpandableDoubleArray eDA = new ExpandableDoubleArray(-3, 2.0f);"
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,223,"ail( ""That constructor should have thrown an IllegalArgumentException because "" +"
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,226, catch( IllegalArgumentException iae ) {
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,228,ry {
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,229,"xpandableDoubleArray eDA = new ExpandableDoubleArray(0, 2.0f);"
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,230,"ail( ""That constructor should have thrown an IllegalArgumentException because "" +"
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,231,"the initialCapacity was ZERO if it didn't then"" +"
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,232," the range checking of initialCapacity is not working properly"" );"
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,233, catch( IllegalArgumentException iae ) {
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,237,ublic void testIllegalExpansionFactor() {
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,238,ry {
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,239,"xpandableDoubleArray eDA = new ExpandableDoubleArray(3, 0.66f);"
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,240,"ail( ""That constructor should have thrown an IllegalArgumentException because "" +"
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,242, catch( IllegalArgumentException iae ) {
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,244,ry {
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,245,"xpandableDoubleArray eDA = new ExpandableDoubleArray(3, 0.0f);"
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,246,"ail( ""That constructor should have thrown an IllegalArgumentException because "" +"
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,247,"the expansionFactor for 0.0"");"
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,248, catch( IllegalArgumentException iae) {
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,251,ry {
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,252,"xpandableDoubleArray eDA = new ExpandableDoubleArray(3, -4.35f);"
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,253,"ail( ""That constructor should have thrown an IllegalArgumentException because "" +"
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,254,"the expansionFactor for -4.35"");"
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,255, catch( IllegalArgumentException iae) {
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,259,ublic void testSetOutOfBounds() {
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,260,ry {
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,261,"a.setElement( -1, 2.0);"
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,262,"ail( ""Cannot set a negative index"");"
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,263, catch( Exception e ){
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,267,ublic void testGetOutOfBounds() {
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,268,ry {
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,269,a.getElement(10000);
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,270,"ail( ""Cannot get an element that is larger than the number of elements"");"
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,271, catch( Exception e ) {
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,274,ry {
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,275,a.getElement(-3);
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,276,"ail(""Cannot get a negative index"");"
False,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ExpandableDoubleArrayTest.java,277, catch( Exception e ){
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,2," The Apache Software License, Version 1.1"
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,5, reserved.
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,7," Redistribution and use in source and binary forms, with or without"
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,8," modification, are permitted provided that the following conditions"
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,9, are met:
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,11, 1. Redistributions of source code must retain the above copyright
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,12,"    notice, this list of conditions and the following disclaimer."
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,14, 2. Redistributions in binary form must reproduce the above copyright
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,15,"    notice, this list of conditions and the following disclaimer in"
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,16,    the documentation and/or other materials provided with the
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,17,    distribution.
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,19," 3. The end-user documentation included with the redistribution, if"
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,20,"    any, must include the following acknowledgement:"
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,21,"       ""This product includes software developed by the"
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,22,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,23,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,24,    if and wherever such third-party acknowledgements normally appear.
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,26," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,27,"    Foundation"" must not be used to endorse or promote products derived"
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,28,    from this software without prior written permission. For written
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,29,"    permission, please contact apache@apache.org."
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,31," 5. Products derived from this software may not be called ""Apache"""
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,32,"    nor may ""Apache"" appear in their name without prior written"
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,33,    permission of the Apache Software Foundation.
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,38, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,39," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,46, SUCH DAMAGE.
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,49, This software consists of voluntary contributions made by many
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,50, individuals on behalf of the Apache Software Foundation.  For more
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,51," information on the Apache Software Foundation, please see"
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,52, <http://www.apache.org/>.
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,54,ackage org.apache.commons.math.util;
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,58, This class contains test cases for the ExpandableDoubleArray.
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,60, @version $Revision: 1.6 $ $Date: 2003/10/16 15:24:31 $
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,62,ublic class FixedDoubleArrayTest extends DoubleArrayAbstractTest {
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,64,ublic FixedDoubleArrayTest(String name) {
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,65,uper( name );
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,68,* (non-Javadoc)
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,69, @see junit.framework.TestCase#setUp()
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,71,rotected void setUp() throws Exception {
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,72,a = new FixedDoubleArray(4000);
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,75,* (non-Javadoc)
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,76, @see junit.framework.TestCase#tearDown()
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,78,rotected void tearDown() throws Exception {
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,79,a = null;
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,83,** TEST NORMAL OPERATIONS - calling super class test and then checking internal
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,84,   storage **/
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,86,ublic void testAddElementRolling() {
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,87,a = new FixedDoubleArray(6);
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,89,uper.testAddElementRolling();
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,91,"ssertEquals( ""FixedDoubleArray should have 6 size internal storage"","
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,92,", ((FixedDoubleArray) ra).getValues().length);"
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,95,ublic void testExceedingElements() {
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,97,or( int i = 0; i < 3999; i++) {
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,98,a.addElement( 1.0 );
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,101,a.addElement( 1.0 );
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,103,ry {
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,104,a.addElement( 2.0 );
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,105,"ail( "" Adding more than 4000 elements should cause an exception "");"
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,106, catch( Exception e ) {
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,109,a.addElementRolling(2.0);
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,110,"ssertEquals( ""This is the first rolling add, the first element should be 2.0"","
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,111,".0, da.getElement(0), Double.MIN_VALUE);"
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,114,ublic void testGetExceeding() {
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,115,ry {
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,116,a.getElement(100);
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,117,"ail( ""I haven't added 100 elements to the list yet, trying to getElement(100) should "" +"
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,119, catch (Exception e ){
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,124,ublic void testSetElement() {
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,125,a.addElement( 1.0 );
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,126,a.addElement( 1.0 );
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,127,a.addElement( 1.0 );
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,128,a.addElement( 1.0 );
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,129,a.addElement( 1.0 );
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,130,a.addElement( 1.0 );
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,131,a.addElement( 1.0 );
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,133,"a.setElement( 2, 4.0 );"
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,134,"ssertEquals( ""Index 2 should be 4.0"", 4.0, da.getElement(2), Double.MIN_VALUE);"
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,136,ry {
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,137,"a.setElement(2000, 45.0);"
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,138,"ail( ""The array does not contain 2000 elements yet, setting this element should"" +"
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,140, catch(Exception e) {
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,145,ublic void testOnlyRolling() {
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,146,or( int i = 0; i < 8000; i++) {
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,147,a.addElementRolling( i );
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,150,"ssertEquals( ""The 2000th element should equal 6000"","
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,151,"000.0, da.getElement(2000), Double.MIN_VALUE);"
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,154,ublic void testClear() {
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,155,or( int i = 0; i < 10; i++) {
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,156,a.addElementRolling(1.0);
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,159,"ssertEquals( ""There should be ten elements in the array"","
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,160,"0, da.getNumElements() );"
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,162,a.clear();
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,164,"ssertEquals( ""There should be zero elements in the array"","
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,165,", da.getNumElements() );"
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,167,or( int i = 0; i < 10; i++) {
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,168,a.addElementRolling(1.0);
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,171,"ssertEquals( ""There should be ten elements in the array"","
False,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,src/test/org/apache/commons/math/util/FixedDoubleArrayTest.java,172,"0, da.getNumElements() );"
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,2," The Apache Software License, Version 1.1"
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,5, reserved.
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,7," Redistribution and use in source and binary forms, with or without"
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,8," modification, are permitted provided that the following conditions"
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,9, are met:
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,11, 1. Redistributions of source code must retain the above copyright
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,12,"    notice, this list of conditions and the following disclaimer."
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,14, 2. Redistributions in binary form must reproduce the above copyright
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,15,"    notice, this list of conditions and the following disclaimer in"
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,16,    the documentation and/or other materials provided with the
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,17,    distribution.
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,19," 3. The end-user documentation included with the redistribution, if"
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,20,"    any, must include the following acknowledgement:"
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,21,"       ""This product includes software developed by the"
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,22,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,23,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,24,    if and wherever such third-party acknowledgements normally appear.
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,26," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,27,"    Foundation"" must not be used to endorse or promote products derived"
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,28,    from this software without prior written permission. For written
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,29,"    permission, please contact apache@apache.org."
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,31," 5. Products derived from this software may not be called ""Apache"""
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,32,"    nor may ""Apache"" appear in their name without prior written"
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,33,    permission of the Apache Software Foundation.
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,38, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,39," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,46, SUCH DAMAGE.
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,49, This software consists of voluntary contributions made by many
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,50, individuals on behalf of the Apache Software Foundation.  For more
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,51," information on the Apache Software Foundation, please see"
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,52, <http://www.apache.org/>.
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,54,ackage org.apache.commons.math.util;
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,56,mport junit.framework.Test;
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,57,mport junit.framework.TestCase;
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,58,mport junit.framework.TestSuite;
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,61, Test cases for the MathUtils class.
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,63, @version $Revision: 1.4 $ $Date: 2003/10/16 15:24:31 $
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,66,ublic final class MathUtilsTest extends TestCase {
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,68,ublic MathUtilsTest(String name) {
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,69,uper(name);
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,72,ublic void setUp() {
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,75,ublic static Test suite() {
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,76,estSuite suite = new TestSuite(MathUtilsTest.class);
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,77,"uite.setName(""MathUtils Tests"");"
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,78,eturn suite;
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,81,ublic void testBinomialCoefficient() {
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,82,"ong[] bcoef5 = {1,5,10,10,5,1};"
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,83,"ong[] bcoef6 = {1,6,15,20,15,6,1};"
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,84,or (int i = 0; i < 6; i++) {
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,85,"ssertEquals(""5 choose "" + i, bcoef5[i],"
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,86,"athUtils.binomialCoefficient(5,i));"
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,88,or (int i = 0; i < 7; i++) {
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,89,"ssertEquals(""6 choose "" + i, bcoef6[i],"
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,90,"athUtils.binomialCoefficient(6,i));"
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,93,or (int n = 1; n < 10; n++) {
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,94,or (int k = 0; k <= n; k++) {
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,95,"ssertEquals(n + "" choose "" + k, binomialCoefficient(n, k),"
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,96,"athUtils.binomialCoefficient(n, k));"
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,97,"ssertEquals(n + "" choose "" + k,(double) binomialCoefficient(n, k),"
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,98,"athUtils.binomialCoefficientDouble(n, k),Double.MIN_VALUE);"
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,99,"ssertEquals(n + "" choose "" + k,"
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,100,"ath.log((double) binomialCoefficient(n, k)),"
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,101,"athUtils.binomialCoefficientLog(n, k),10E-12);"
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,106," Takes a long time for recursion to unwind, but succeeds"
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,107," and yields exact value = 2,333,606,220"
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,109,"ssertEquals(MathUtils.binomialCoefficient(34,17),"
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,110,"inomialCoefficient(34,17));"
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,114,ublic void testBinomialCoefficientFail() {
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,115,ry {
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,116,"ong x = MathUtils.binomialCoefficient(0,0);"
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,117,"ail (""expecting IllegalArgumentException"");"
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,118, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,121,ry {
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,122,"ong x = MathUtils.binomialCoefficient(4,5);"
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,123,"ail (""expecting IllegalArgumentException"");"
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,124, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,127,ry {
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,128,"ouble x = MathUtils.binomialCoefficientDouble(0,0);"
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,129,"ail (""expecting IllegalArgumentException"");"
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,130, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,133,ry {
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,134,"ouble x = MathUtils.binomialCoefficientDouble(4,5);"
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,135,"ail (""expecting IllegalArgumentException"");"
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,136, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,139,ry {
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,140,"ouble x = MathUtils.binomialCoefficientLog(0,0);"
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,141,"ail (""expecting IllegalArgumentException"");"
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,142, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,145,ry {
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,146,"ouble x = MathUtils.binomialCoefficientLog(4,5);"
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,147,"ail (""expecting IllegalArgumentException"");"
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,148, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,151,ry {
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,152,"ong x = MathUtils.binomialCoefficient(67,34);"
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,153,"ail (""expecting ArithmeticException"");"
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,154, catch (ArithmeticException ex) {
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,157,"ouble x = MathUtils.binomialCoefficientDouble(1030,515);"
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,158,"ssertTrue(""expecting infinite binomial coefficient"","
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,159,ouble.isInfinite(x));
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,162,ublic void testFactorial() {
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,163,or (int i = 1; i < 10; i++) {
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,164,"ssertEquals(i + ""! "",factorial(i),MathUtils.factorial(i));"
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,165,"ssertEquals(i + ""! "",(double)factorial(i),"
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,166,"athUtils.factorialDouble(i),Double.MIN_VALUE);"
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,167,"ssertEquals(i + ""! "",Math.log((double)factorial(i)),"
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,168,"athUtils.factorialLog(i),10E-12);"
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,172,ublic void testFactorialFail() {
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,173,ry {
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,174,ong x = MathUtils.factorial(0);
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,175,"ail (""expecting IllegalArgumentException"");"
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,176, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,179,ry {
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,180,ouble x = MathUtils.factorialDouble(0);
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,181,"ail (""expecting IllegalArgumentException"");"
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,182, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,185,ry {
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,186,ouble x = MathUtils.factorialLog(0);
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,187,"ail (""expecting IllegalArgumentException"");"
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,188, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,191,ry {
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,192,ouble x = MathUtils.factorial(21);
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,193,"ail (""expecting ArithmeticException"");"
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,194, catch (ArithmeticException ex) {
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,197,"ssertTrue(""expecting infinite factorial value"","
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,198,ouble.isInfinite(MathUtils.factorialDouble(171)));
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,204, Exact recursive implementation to test against
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,206,"rivate long binomialCoefficient(int n, int k) {"
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,207,f ((n == k) || (k == 0)) {
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,208,eturn 1;
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,210,f ((k == 1) || (k == n - 1)) {
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,211,eturn n;
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,213,"eturn binomialCoefficient(n - 1, k - 1) +"
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,214,"inomialCoefficient(n - 1, k);"
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,218, Finds the largest values of n for which binomialCoefficient and
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,219," binomialCoefficientDouble will return values that fit in a long, double,"
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,220, resp.  Remove comments around test below to get this in test-report
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,222,ublic void testLimits() {
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,223,indBinomialLimits();
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,227,rivate void findBinomialLimits() {
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,229, will kick out 66 as the limit for long
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,231,oolean foundLimit = false;
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,232,nt test = 10;
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,233,hile (!foundLimit) {
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,234,ry {
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,235,"ouble x = MathUtils.binomialCoefficient(test, test / 2);"
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,236, catch (ArithmeticException ex) {
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,237,oundLimit = true;
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,238,ystem.out.println
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,239,"""largest n for binomialCoefficient = "" + (test - 1) );"
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,241,est++;
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,245, will kick out 1029 as the limit for double
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,247,oundLimit = false;
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,248,est = 10;
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,249,hile (!foundLimit) {
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,250,"ouble x = MathUtils.binomialCoefficientDouble(test, test / 2);"
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,251,f (Double.isInfinite(x)) {
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,252,oundLimit = true;
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,253,ystem.out.println
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,254,"""largest n for binomialCoefficientD = "" + (test - 1) );"
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,256,est++;
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,261, Finds the largest values of n for which factiorial and
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,262," factorialDouble will return values that fit in a long, double,"
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,263, resp.  Remove comments around test below to get this in test-report
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,265,ublic void testFactiorialLimits() {
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,266,indFactorialLimits();
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,270,rivate void findFactorialLimits() {
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,272, will kick out 20 as the limit for long
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,274,oolean foundLimit = false;
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,275,nt test = 10;
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,276,hile (!foundLimit) {
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,277,ry {
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,278,ouble x = MathUtils.factorial(test);
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,279, catch (ArithmeticException ex) {
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,280,oundLimit = true;
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,281,ystem.out.println
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,282,"""largest n for factorial = "" + (test - 1) );"
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,284,est++;
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,288, will kick out 170 as the limit for double
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,290,oundLimit = false;
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,291,est = 10;
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,292,hile (!foundLimit) {
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,293,ouble x = MathUtils.factorialDouble(test);
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,294,f (Double.isInfinite(x)) {
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,295,oundLimit = true;
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,296,ystem.out.println
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,297,"""largest n for factorialDouble = "" + (test - 1) );"
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,299,est++;
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,305, Exact direct multiplication implementation to test against
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,307,rivate long factorial(int n) {
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,308,ong result = 1;
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,309,or (int i = 2; i <= n; i++) {
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,310,esult *= i;
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,312,eturn result;
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,316,ublic void testSignDouble() {
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,317,ouble delta = 0.0 ;
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,318,"ssertEquals( 1.0, MathUtils.sign( 2.0 ), delta ) ;"
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,319,"ssertEquals( -1.0, MathUtils.sign( -2.0 ), delta ) ;"
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,323,ublic void testSignFloat() {
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,324,loat delta = 0.0F ;
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,325,"ssertEquals( 1.0F, MathUtils.sign( 2.0F ), delta ) ;"
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,326,"ssertEquals( -1.0F, MathUtils.sign( -2.0F ), delta ) ;"
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,330,ublic void testSignByte() {
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,331,"ssertEquals( (byte)1, MathUtils.sign( (byte)2 ) ) ;"
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,332,"ssertEquals( (byte)(-1), MathUtils.sign( (byte)(-2) ) ) ;"
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,336,ublic void testSignShort() {
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,337,"ssertEquals( (short)1, MathUtils.sign( (short)2 ) ) ;"
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,338,"ssertEquals( (short)(-1), MathUtils.sign( (short)(-2) ) ) ;"
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,342,ublic void testSignInt() {
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,343,"ssertEquals( (int)1, MathUtils.sign( (int)(2) ) ) ;"
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,344,"ssertEquals( (int)(-1), MathUtils.sign( (int)(-2) ) ) ;"
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,348,ublic void testSignLong() {
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,349,"ssertEquals( 1L, MathUtils.sign( 2L ) ) ;"
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,350,"ssertEquals( -1L, MathUtils.sign( -2L ) ) ;"
False,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,2," The Apache Software License, Version 1.1"
False,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
False,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,5, reserved.
False,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,7," Redistribution and use in source and binary forms, with or without"
False,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,8," modification, are permitted provided that the following conditions"
False,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,9, are met:
False,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,11, 1. Redistributions of source code must retain the above copyright
False,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,12,"    notice, this list of conditions and the following disclaimer."
False,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,14, 2. Redistributions in binary form must reproduce the above copyright
False,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,15,"    notice, this list of conditions and the following disclaimer in"
False,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,16,    the documentation and/or other materials provided with the
False,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,17,    distribution.
False,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,19," 3. The end-user documentation included with the redistribution, if"
False,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,20,"    any, must include the following acknowledgement:"
False,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,21,"       ""This product includes software developed by the"
False,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,22,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,23,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,24,    if and wherever such third-party acknowledgements normally appear.
False,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,26," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,27,"    Foundation"" must not be used to endorse or promote products derived"
False,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,28,    from this software without prior written permission. For written
False,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,29,"    permission, please contact apache@apache.org."
False,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,31," 5. Products derived from this software may not be called ""Apache"""
False,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,32,"    nor may ""Apache"" appear in their name without prior written"
False,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,33,    permission of the Apache Software Foundation.
False,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,38, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,39," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,46, SUCH DAMAGE.
False,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,49, This software consists of voluntary contributions made by many
False,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,50, individuals on behalf of the Apache Software Foundation.  For more
False,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,51," information on the Apache Software Foundation, please see"
False,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,52, <http://www.apache.org/>.
False,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,55,ackage org.apache.commons.math.util;
False,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,58, @version $Revision: 1.3 $ $Date: 2003/10/16 15:24:31 $
False,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,60,ublic class TestBean {
False,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,61,rivate Double x = new Double(1.0);
False,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,63,"rivate String y = ""1.0"";"
False,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,65,rivate Double z = new Double(2.0);
False,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,70,ublic Double getX() {
False,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,71,eturn x;
False,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,77,ublic String getY() {
False,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,78,eturn y;
False,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,84,ublic void setX(Double double1) {
False,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,85, = double1;
False,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,91,ublic void setY(String string) {
False,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,92, = string;
False,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,98,ublic Double getZ() {
False,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,99,hrow new RuntimeException();
False,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,105,ublic void setZ(Double double1) {
False,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,106, = double1;
False,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,2," The Apache Software License, Version 1.1"
False,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
False,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,5, reserved.
False,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,7," Redistribution and use in source and binary forms, with or without"
False,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,8," modification, are permitted provided that the following conditions"
False,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,9, are met:
False,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,11, 1. Redistributions of source code must retain the above copyright
False,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,12,"    notice, this list of conditions and the following disclaimer."
False,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,14, 2. Redistributions in binary form must reproduce the above copyright
False,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,15,"    notice, this list of conditions and the following disclaimer in"
False,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,16,    the documentation and/or other materials provided with the
False,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,17,    distribution.
False,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,19," 3. The end-user documentation included with the redistribution, if"
False,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,20,"    any, must include the following acknowledgement:"
False,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,21,"       ""This product includes software developed by the"
False,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,22,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,23,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,24,    if and wherever such third-party acknowledgements normally appear.
False,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,26," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,27,"    Foundation"" must not be used to endorse or promote products derived"
False,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,28,    from this software without prior written permission. For written
False,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,29,"    permission, please contact apache@apache.org."
False,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,31," 5. Products derived from this software may not be called ""Apache"""
False,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,32,"    nor may ""Apache"" appear in their name without prior written"
False,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,33,    permission of the Apache Software Foundation.
False,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,38, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,39," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,46, SUCH DAMAGE.
False,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,49, This software consists of voluntary contributions made by many
False,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,50, individuals on behalf of the Apache Software Foundation.  For more
False,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,51," information on the Apache Software Foundation, please see"
False,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,52, <http://www.apache.org/>.
False,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,55,ackage org.apache.commons.math.util;
False,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,57,mport junit.framework.TestCase;
False,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,60, @version $Revision: 1.3 $ $Date: 2003/10/16 15:24:31 $
False,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,62,ublic class TransformerMapTest extends TestCase {
False,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,66,ublic void testPutTransformer(){
False,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,67,umberTransformer expected = new DefaultTransformer();
False,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,69,ransformerMap map = new TransformerMap();
False,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,70,"ap.putTransformer(TransformerMapTest.class, expected);"
False,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,71,"ssertEquals(expected, map.getTransformer(TransformerMapTest.class));"
False,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,77,ublic void testContainsClass(){
False,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,78,umberTransformer expected = new DefaultTransformer();
False,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,79,ransformerMap map = new TransformerMap();
False,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,80,"ap.putTransformer(TransformerMapTest.class, expected);"
False,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,81,ssertTrue(map.containsClass(TransformerMapTest.class));
False,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,87,ublic void testContainsTransformer(){
False,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,88,umberTransformer expected = new DefaultTransformer();
False,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,89,ransformerMap map = new TransformerMap();
False,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,90,"ap.putTransformer(TransformerMapTest.class, expected);"
False,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,91,ssertTrue(map.containsTransformer(expected));
False,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,97,ublic void testRemoveTransformer(){
False,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,98,umberTransformer expected = new DefaultTransformer();
False,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,100,ransformerMap map = new TransformerMap();
False,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,101,"ap.putTransformer(TransformerMapTest.class, expected);"
False,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,102,ssertTrue(map.containsClass(TransformerMapTest.class));
False,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,103,ssertTrue(map.containsTransformer(expected));
False,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,104,ap.removeTransformer(TransformerMapTest.class);
False,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,105,ssertFalse(map.containsClass(TransformerMapTest.class));
False,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,106,ssertFalse(map.containsTransformer(expected));
False,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,112,ublic void testClear(){
False,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,113,umberTransformer expected = new DefaultTransformer();
False,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,115,ransformerMap map = new TransformerMap();
False,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,116,"ap.putTransformer(TransformerMapTest.class, expected);"
False,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,117,ssertTrue(map.containsClass(TransformerMapTest.class));
False,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,118,ap.clear();
False,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,119,ssertFalse(map.containsClass(TransformerMapTest.class));
False,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,125,ublic void testClasses(){
False,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,126,umberTransformer expected = new DefaultTransformer();
False,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,127,ransformerMap map = new TransformerMap();
False,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,128,"ap.putTransformer(TransformerMapTest.class, expected);"
False,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,129,ssertTrue(map.classes().contains(TransformerMapTest.class));
False,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,135,ublic void testTransformers(){
False,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,136,umberTransformer expected = new DefaultTransformer();
False,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,137,ransformerMap map = new TransformerMap();
False,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,138,"ap.putTransformer(TransformerMapTest.class, expected);"
False,src/test/org/apache/commons/math/util/TransformerMapTest.java,src/test/org/apache/commons/math/util/TransformerMapTest.java,139,ssertTrue(map.transformers().contains(expected));

is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,121,rivate SecureRandom secRand = null;
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,121,private RandomGenerator secRand = null;
False,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,281,ecureRandom secRan = getSecRan();
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,281,final RandomGenerator secRan = getSecRan();
False,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,326,f (lower >= upper) {
False,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,327,"hrow new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,"
False,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,328,"ower, upper, false);"
False,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,330,inal int max = (upper - lower) + 1;
False,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,331,f (max <= 0) {
False,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,332,/ the range is too wide to fit in a positive int (larger than 2^31); as it covers
False,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,333,"/ more than half the integer range, we use directly a simple rejection method"
False,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,334,inal SecureRandom rng = getSecRan();
False,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,335,hile (true) {
False,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,336,inal int r = rng.nextInt();
False,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,337,f (r >= lower && r <= upper) {
False,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,338,eturn r;
False,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,341, else {
False,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,342,/ we can shift the range and generate directly a positive int
False,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,343,eturn lower + getSecRan().nextInt(max);
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,326,"return new UniformIntegerDistribution(getSecRan(), lower, upper).sample();"
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,335,final RandomGenerator rng = getSecRan();
False,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,357,inal SecureRandom rng = getSecRan();
False,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,366,eturn lower + getSecRan().nextInt((int) max);
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,348,return lower + rng.nextInt((int) max);
False,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,369,"eturn lower + nextLong(getSecRan(), max);"
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,351,"return lower + nextLong(rng, max);"
False,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,374," Returns a pseudorandom, uniformly distributed <tt>long</tt> value"
False,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,375," between 0 (inclusive) and the specified value (exclusive), drawn from"
False,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,376, this random number generator's sequence.
False,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,378, @param rng random generator to use
False,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,379, @param n the bound on the random number to be returned.  Must be
False,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,380, positive.
False,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,381," @return  a pseudorandom, uniformly distributed <tt>long</tt>"
False,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,382, value between 0 (inclusive) and n (exclusive).
False,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,383, @throws IllegalArgumentException  if n is not positive.
False,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,385,"rivate static long nextLong(final SecureRandom rng, final long n) throws IllegalArgumentException {"
False,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,386,f (n > 0) {
False,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,387,inal byte[] byteArray = new byte[8];
False,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,388,ong bits;
False,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,389,ong val;
False,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,390,o {
False,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,391,ng.nextBytes(byteArray);
False,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,392,its = 0;
False,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,393,or (final byte b : byteArray) {
False,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,394,its = (bits << 8) | (((long) b) & 0xffL);
False,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,396,its = bits & 0x7fffffffffffffffL;
False,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,397,al  = bits % n;
False,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,398, while (bits - val + (n - 1) < 0);
False,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,399,eturn val;
False,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,401,hrow new NotStrictlyPositiveException(n);
False,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,796,"ecRand = SecureRandom.getInstance(algorithm, provider);"
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,747,"secRand = RandomGeneratorFactory.createRandomGenerator(SecureRandom.getInstance(algorithm, provider));"
False,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,832, @return the SecureRandom used to generate secure random data
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,783,"* @return the SecureRandom used to generate secure random data, wrapped in a"
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,784,* {@link RandomGenerator}.
False,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,834,rivate SecureRandom getSecRan() {
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,786,private RandomGenerator getSecRan() {
False,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,836,ecRand = new SecureRandom();
True,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java,788,secRand = RandomGeneratorFactory.createRandomGenerator(new SecureRandom());

is_addition,old_file_path,new_file_path,line_num,content
False,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,19,mport org.apache.commons.math.analysis.*;
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,19,import java.util.Arrays;
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,20,import java.util.Collection;
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,22,import org.apache.commons.math.analysis.SinFunction;
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,23,import org.apache.commons.math.analysis.UnivariateFunction;
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,24,import org.apache.commons.math.analysis.function.Sinc;
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,28,import org.junit.runner.RunWith;
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,29,import org.junit.runners.Parameterized;
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,30,import org.junit.runners.Parameterized.Parameters;
False,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,27," FCT algorithm is exact, the small tolerance number is used only"
False,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,28, to account for round-off errors.
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,35,"* FCT algorithm is exact, the small tolerance number is used only to account"
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,36,* for round-off errors.
False,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,32,ublic final class FastCosineTransformerTest {
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,40,@RunWith(value = Parameterized.class)
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,41,public final class FastCosineTransformerTest
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,42,extends RealTransformerAbstractTest {
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,44,private final boolean standard;
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,46,private final int[] invalidDataSize;
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,48,private final double[] relativeTolerance;
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,50,private final int[] validDataSize;
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,52,public FastCosineTransformerTest(final boolean standard) {
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,53,this.standard = standard;
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,54,this.validDataSize = new int[] {
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,55,"2, 3, 5, 9, 17, 33, 65, 129"
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,57,this.invalidDataSize = new int[] {
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,58,128
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,60,this.relativeTolerance = new double[] {
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,61,"1E-15, 1E-15, 1E-14, 1E-13, 1E-13, 1E-12, 1E-11, 1E-10"
False,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,35, Test of transformer for the ad hoc data.
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,66,"* Returns an array containing {@code true, false} in order to check both"
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,67,* standard and orthogonal DCTs.
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,69,* @return an array of parameters for this parameterized test
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,71,@Parameters
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,72,public static Collection<Object[]> data() {
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,73,final Object[][] data = new Boolean[][] {
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,75,Boolean.TRUE
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,77,Boolean.FALSE
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,80,return Arrays.asList(data);
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,83,@Override
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,84,RealTransformer createRealTransformer() {
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,85,if (standard) {
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,86,return FastCosineTransformer.create();
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,87,} else {
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,88,return FastCosineTransformer.createOrthogonal();
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,92,@Override
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,93,int getInvalidDataSize(final int i) {
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,94,return invalidDataSize[i];
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,97,@Override
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,98,int getNumberOfInvalidDataSizes() {
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,99,return invalidDataSize.length;
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,102,@Override
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,103,int getNumberOfValidDataSizes() {
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,104,return validDataSize.length;
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,107,@Override
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,108,double getRelativeTolerance(final int i) {
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,109,return relativeTolerance[i];
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,112,@Override
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,113,int getValidDataSize(final int i) {
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,114,return validDataSize[i];
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,117,@Override
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,118,UnivariateFunction getValidFunction() {
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,119,return new Sinc();
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,122,@Override
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,123,double getValidLowerBound() {
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,124,return 0.0;
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,127,@Override
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,128,double getValidUpperBound() {
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,129,return FastMath.PI;
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,132,@Override
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,133,"double[] transform(final double[] x, final boolean forward) {"
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,134,final int n = x.length;
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,135,final double[] y = new double[n];
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,136,final double[] cos = new double[2 * (n - 1)];
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,137,for (int i = 0; i < cos.length; i++) {
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,138,cos[i] = FastMath.cos(FastMath.PI * i / (n - 1.0));
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,140,int sgn = 1;
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,141,for (int j = 0; j < n; j++) {
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,142,double yj = 0.5 * (x[0] + sgn * x[n - 1]);
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,143,for (int i = 1; i < n - 1; i++) {
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,144,yj += x[i] * cos[(i * j) % cos.length];
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,146,y[j] = yj;
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,147,sgn *= -1;
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,149,final double s;
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,150,if (forward) {
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,151,s = standard ? 1.0 : FastMath.sqrt(2.0 / (n - 1.0));
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,152,} else {
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,153,s = standard ? 2.0 / (n - 1.0) : FastMath.sqrt(2.0 / (n - 1.0));
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,155,"TransformUtils.scaleArray(y, s);"
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,156,return y;
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,160,* Additional tests.
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,163,/** Test of transformer for the ad hoc data. */
False,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,42,"ouble x[] = { 0.0, 1.0, 4.0, 9.0, 16.0, 25.0, 36.0, 49.0, 64.0 };"
False,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,43,"ouble y[] = { 172.0, -105.096569476353, 27.3137084989848,"
False,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,44,"12.9593152353742, 8.0, -5.78585076868676,"
False,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,45,".68629150101524, -4.15826451958632, 4.0 };"
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,169,double x[] = {
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,170,"0.0, 1.0, 4.0, 9.0, 16.0, 25.0, 36.0, 49.0, 64.0"
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,172,double y[] =
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,174,"172.0, -105.096569476353, 27.3137084989848, -12.9593152353742,"
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,175,"8.0, -5.78585076868676, 4.68629150101524, -4.15826451958632,"
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,176,4.0
False,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,57,"ransformUtils.scaleArray(x, FastMath.sqrt(0.5 * (x.length-1)));"
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,189,"TransformUtils.scaleArray(x, FastMath.sqrt(0.5 * (x.length - 1)));"
False,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,72, Test of transformer for the sine function.
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,203,/** Test of parameters for the transformer. */
False,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,75,ublic void testSinFunction() {
False,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,76,nivariateFunction f = new SinFunction();
False,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,77,astCosineTransformer transformer = FastCosineTransformer.create();
False,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,78,"ouble min, max, result[], tolerance = 1E-12; int N = 9;"
False,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,80,"ouble expected[] = { 0.0, 3.26197262739567, 0.0,"
False,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,81,"2.17958042710327, 0.0, -0.648846697642915,"
False,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,82,".0, -0.433545502649478, 0.0 };"
False,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,83,in = 0.0; max = 2.0 * FastMath.PI * N / (N-1);
False,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,84,"esult = transformer.transform(f, min, max, N);"
False,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,85,or (int i = 0; i < N; i++) {
False,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,86,"ssert.assertEquals(expected[i], result[i], tolerance);"
False,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,89,in = -FastMath.PI; max = FastMath.PI * (N+1) / (N-1);
False,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,90,"esult = transformer.transform(f, min, max, N);"
False,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,91,or (int i = 0; i < N; i++) {
False,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,92,"ssert.assertEquals(-expected[i], result[i], tolerance);"
False,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,97, Test of parameters for the transformer.
False,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,99,Test
False,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,100,ublic void testParameters() throws Exception {
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,205,public void testParameters()
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,206,throws Exception {
False,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,114,"ssert.fail(""Expecting IllegalArgumentException - bad samples number"");"
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,220,Assert
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,221,".fail(""Expecting IllegalArgumentException - bad samples number"");"
False,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,121,"ssert.fail(""Expecting IllegalArgumentException - bad samples number"");"
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,228,Assert
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,229,".fail(""Expecting IllegalArgumentException - bad samples number"");"
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,235,/** Test of transformer for the sine function. */
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,236,@Test
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,237,public void testSinFunction() {
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,238,UnivariateFunction f = new SinFunction();
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,239,FastCosineTransformer transformer = FastCosineTransformer.create();
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,240,"double min, max, result[], tolerance = 1E-12;"
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,241,int N = 9;
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,243,double expected[] =
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,245,"0.0, 3.26197262739567, 0.0, -2.17958042710327, 0.0,"
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,246,"-0.648846697642915, 0.0, -0.433545502649478, 0.0"
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,248,min = 0.0;
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,249,max = 2.0 * FastMath.PI * N / (N - 1);
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,250,"result = transformer.transform(f, min, max, N);"
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,251,for (int i = 0; i < N; i++) {
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,252,"Assert.assertEquals(expected[i], result[i], tolerance);"
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,255,min = -FastMath.PI;
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,256,max = FastMath.PI * (N + 1) / (N - 1);
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,257,"result = transformer.transform(f, min, max, N);"
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,258,for (int i = 0; i < N; i++) {
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,259,"Assert.assertEquals(-expected[i], result[i], tolerance);"
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,14,* See the License for the specific language governing permissions and
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,15,* limitations under the License.
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,17,package org.apache.commons.math.transform;
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,19,import java.util.Random;
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,21,import org.apache.commons.math.analysis.UnivariateFunction;
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,22,import org.apache.commons.math.exception.MathIllegalArgumentException;
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,23,import org.apache.commons.math.exception.NotStrictlyPositiveException;
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,24,import org.apache.commons.math.exception.NumberIsTooLargeException;
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,25,import org.apache.commons.math.util.FastMath;
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,26,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,27,import org.junit.Test;
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,30,* Abstract test for classes implementing the {@link RealTransformer} interface.
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,31,* This abstract test handles the automatic generation of random data of various
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,32,"* sizes. For each generated data array, actual values (returned by the"
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,33,"* transformer to be tested) are compared to expected values, returned by the"
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,34,"* {@link #transform(double[], boolean)} (to be implemented by the user: a naive"
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,35,* method may be used). Methods are also provided to test that invalid parameters
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,36,* throw the expected exceptions.
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,38,* @since 3.0
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,39,* @version $Id$
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,41,public abstract class RealTransformerAbstractTest {
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,43,/** The common seed of all random number generators used in this test. */
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,44,private final static long SEED = 20110119L;
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,47,* Returns a random array of doubles. Random generator always uses the same
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,48,* seed.
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,50,* @param n the size of the array to be returned
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,51,* @return a random array of specified size
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,53,static double[] createRealData(final int n) {
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,54,final Random random = new Random(SEED);
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,55,final double[] data = new double[n];
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,56,for (int i = 0; i < n; i++) {
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,57,data[i] = 2.0 * random.nextDouble() - 1.0;
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,59,return data;
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,63,* Returns a new instance of the {@link RealTransformer} to be tested.
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,65,* @return a the transformer to be tested
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,67,abstract RealTransformer createRealTransformer();
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,70,* Returns an invalid data size. Transforms with this data size should
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,71,* trigger a {@link MathIllegalArgumentException}.
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,73,* @param i the index of the invalid data size ({@code 0 <= i <}
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,74,* {@link #getNumberOfInvalidDataSizes()}
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,75,* @return an invalid data size
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,77,abstract int getInvalidDataSize(int i);
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,80,* Returns the total number of invalid data sizes to be tested. If data
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,81,* array of any
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,82,"* size can be handled by the {@link RealTransformer} to be tested, this"
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,83,* method should return {@code 0}.
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,85,* @return the total number of invalid data sizes
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,87,abstract int getNumberOfInvalidDataSizes();
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,90,* Returns the total number of valid data sizes to be tested.
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,92,* @return the total number of valid data sizes
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,94,abstract int getNumberOfValidDataSizes();
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,97,* Returns the expected relative accuracy for data arrays of size
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,98,* {@code getValidDataSize(i)}.
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,100,* @param i the index of the valid data size
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,101,* @return the expected relative accuracy
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,103,abstract double getRelativeTolerance(int i);
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,106,* Returns a valid data size. This method allows for data arrays of various
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,107,* sizes to be automatically tested (by allowing multiple values of the
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,108,* specified index).
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,110,* @param i the index of the valid data size ({@code 0 <= i <}
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,111,* {@link #getNumberOfValidDataSizes()}
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,112,* @return a valid data size
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,114,abstract int getValidDataSize(int i);
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,117,* Returns a function for the accuracy check of
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,118,"* {@link RealTransformer#transform(UnivariateFunction, double, double, int)}"
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,119,* and
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,120,"* {@link RealTransformer#inverseTransform(UnivariateFunction, double, double, int)}."
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,121,"* This function should be valid. In other words, none of the above methods"
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,122,* should throw an exception when passed this function.
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,124,* @return a valid function
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,126,abstract UnivariateFunction getValidFunction();
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,129,* Returns a sampling lower bound for the accuracy check of
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,130,"* {@link RealTransformer#transform(UnivariateFunction, double, double, int)}"
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,131,* and
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,132,"* {@link RealTransformer#inverseTransform(UnivariateFunction, double, double, int)}."
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,133,"* This lower bound should be valid. In other words, none of the above"
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,134,* methods should throw an exception when passed this bound.
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,136,* @return a valid lower bound
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,138,abstract double getValidLowerBound();
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,141,* Returns a sampling upper bound for the accuracy check of
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,142,"* {@link RealTransformer#transform(UnivariateFunction, double, double, int)}"
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,143,* and
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,144,"* {@link RealTransformer#inverseTransform(UnivariateFunction, double, double, int)}."
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,145,"* This upper bound should be valid. In other words, none of the above"
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,146,* methods should throw an exception when passed this bound.
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,148,* @return a valid bound
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,150,abstract double getValidUpperBound();
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,153,* Returns the expected transform of the specified real data array.
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,155,* @param x the real data array to be transformed
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,156,* @param forward {@code true} (resp. {@code false}) if the forward (resp.
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,157,* inverse) transform is to be performed
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,158,* @return the expected transform
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,160,"abstract double[] transform(double[] x, boolean forward);"
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,163,* Check of preconditions.
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,167,* {@link RealTransformer#transform(double[])} should throw a
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,168,* {@link MathIllegalArgumentException} if data size is invalid.
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,170,@Test
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,171,public void testTransformRealInvalidDataSize() {
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,172,final RealTransformer transformer = createRealTransformer();
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,173,for (int i = 0; i < getNumberOfInvalidDataSizes(); i++) {
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,174,final int n = getInvalidDataSize(i);
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,175,try {
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,176,transformer.transform(createRealData(n));
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,177,Assert.fail(Integer.toString(n));
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,178,} catch (MathIllegalArgumentException e) {
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,179,// Expected: do nothing
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,185,"* {@link RealTransformer#transform(UnivariateFunction, double, double, int)}"
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,186,* should throw a {@link MathIllegalArgumentException} if number of samples
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,187,* is invalid.
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,189,@Test
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,190,public void testTransformFunctionInvalidDataSize() {
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,191,final RealTransformer transformer = createRealTransformer();
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,192,final UnivariateFunction f = getValidFunction();
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,193,final double a = getValidLowerBound();
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,194,final double b = getValidUpperBound();
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,195,for (int i = 0; i < getNumberOfInvalidDataSizes(); i++) {
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,196,final int n = getInvalidDataSize(i);
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,197,try {
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,198,"transformer.transform(f, a, b, n);"
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,199,Assert.fail(Integer.toString(n));
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,200,} catch (MathIllegalArgumentException e) {
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,201,// Expected: do nothing
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,207,"* {@link RealTransformer#transform(UnivariateFunction, double, double, int)}"
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,208,* should throw a {@link NotStrictlyPositiveException} if number of samples
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,209,* is not strictly positive.
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,211,@Test
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,212,public void testTransformFunctionNotStrictlyPositiveNumberOfSamples() {
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,213,final RealTransformer transformer = createRealTransformer();
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,214,final UnivariateFunction f = getValidFunction();
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,215,final double a = getValidLowerBound();
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,216,final double b = getValidUpperBound();
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,217,for (int i = 0; i < getNumberOfValidDataSizes(); i++) {
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,218,final int n = getValidDataSize(i);
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,219,try {
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,220,"transformer.transform(f, a, b, -n);"
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,221,Assert.fail(Integer.toString(-n));
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,222,} catch (NotStrictlyPositiveException e) {
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,223,// Expected: do nothing
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,229,"* {@link RealTransformer#transform(UnivariateFunction, double, double, int)}"
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,230,* should throw a {@link NumberIsTooLargeException} if sampling bounds are
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,231,* not correctly ordered.
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,233,@Test
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,234,public void testTransformFunctionInvalidBounds() {
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,235,final RealTransformer transformer = createRealTransformer();
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,236,final UnivariateFunction f = getValidFunction();
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,237,final double a = getValidLowerBound();
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,238,final double b = getValidUpperBound();
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,239,for (int i = 0; i < getNumberOfValidDataSizes(); i++) {
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,240,final int n = getValidDataSize(i);
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,241,try {
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,242,"transformer.transform(f, b, a, n);"
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,243,"Assert.fail(Double.toString(b) + "", "" + Double.toString(a));"
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,244,} catch (NumberIsTooLargeException e) {
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,245,// Expected: do nothing
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,251,* {@link RealTransformer#inverseTransform(double[])} should throw a
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,252,* {@link MathIllegalArgumentException} if data size is invalid.
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,254,@Test
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,255,public void testInverseTransformRealInvalidDataSize() {
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,256,final RealTransformer transformer = createRealTransformer();
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,257,for (int i = 0; i < getNumberOfInvalidDataSizes(); i++) {
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,258,final int n = getInvalidDataSize(i);
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,259,try {
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,260,transformer.inverseTransform(createRealData(n));
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,261,Assert.fail(Integer.toString(n));
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,262,} catch (MathIllegalArgumentException e) {
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,263,// Expected: do nothing
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,269,"* {@link RealTransformer#inverseTransform(UnivariateFunction, double, double, int)}"
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,270,* should throw a {@link MathIllegalArgumentException} if number of samples
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,271,* is invalid.
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,273,@Test
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,274,public void testInverseTransformFunctionInvalidDataSize() {
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,275,final RealTransformer transformer = createRealTransformer();
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,276,final UnivariateFunction f = getValidFunction();
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,277,final double a = getValidLowerBound();
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,278,final double b = getValidUpperBound();
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,279,for (int i = 0; i < getNumberOfInvalidDataSizes(); i++) {
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,280,final int n = getInvalidDataSize(i);
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,281,try {
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,282,"transformer.inverseTransform(f, a, b, n);"
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,283,Assert.fail(Integer.toString(n));
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,284,} catch (MathIllegalArgumentException e) {
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,285,// Expected: do nothing
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,291,"* {@link RealTransformer#inverseTransform(UnivariateFunction, double, double, int)}"
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,292,* should throw a {@link NotStrictlyPositiveException} if number of samples
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,293,* is not strictly positive.
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,295,@Test
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,296,public void
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,297,testInverseTransformFunctionNotStrictlyPositiveNumberOfSamples() {
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,298,final RealTransformer transformer = createRealTransformer();
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,299,final UnivariateFunction f = getValidFunction();
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,300,final double a = getValidLowerBound();
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,301,final double b = getValidUpperBound();
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,302,for (int i = 0; i < getNumberOfValidDataSizes(); i++) {
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,303,final int n = getValidDataSize(i);
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,304,try {
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,305,"transformer.inverseTransform(f, a, b, -n);"
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,306,Assert.fail(Integer.toString(-n));
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,307,} catch (NotStrictlyPositiveException e) {
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,308,// Expected: do nothing
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,314,"* {@link RealTransformer#inverseTransform(UnivariateFunction, double, double, int)}"
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,315,* should throw a {@link NumberIsTooLargeException} if sampling bounds are
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,316,* not correctly ordered.
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,318,@Test
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,319,public void testInverseTransformFunctionInvalidBounds() {
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,320,final RealTransformer transformer = createRealTransformer();
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,321,final UnivariateFunction f = getValidFunction();
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,322,final double a = getValidLowerBound();
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,323,final double b = getValidUpperBound();
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,324,for (int i = 0; i < getNumberOfValidDataSizes(); i++) {
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,325,final int n = getValidDataSize(i);
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,326,try {
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,327,"transformer.inverseTransform(f, b, a, n);"
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,328,"Assert.fail(Double.toString(b) + "", "" + Double.toString(a));"
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,329,} catch (NumberIsTooLargeException e) {
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,330,// Expected: do nothing
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,336,* Accuracy tests of transform of valid data.
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,340,* Accuracy check of {@link RealTransformer#transform(double[])}. For each
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,341,* valid data size returned by
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,342,"* {@link #getValidDataSize(int) getValidDataSize(i)},"
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,343,* a random data array is generated with
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,344,* {@link #createRealData(int) createRealData(i)}. The actual
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,345,"* transform is computed and compared to the expected transform, return by"
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,346,"* {@link #transform(double[], boolean)}. Actual and expected values should"
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,347,* be equal to within the relative error returned by
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,348,* {@link #getRelativeTolerance(int) getRelativeTolerance(i)}.
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,350,@Test
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,351,public void testTransformReal() {
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,352,for (int i = 0; i < getNumberOfValidDataSizes(); i++) {
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,353,final int n = getValidDataSize(i);
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,354,final double tol = getRelativeTolerance(i);
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,355,"doTestTransformReal(n, tol, true);"
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,360,* Accuracy check of
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,361,"* {@link RealTransformer#transform(UnivariateFunction, double, double, int)}."
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,362,* For each valid data size returned by
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,363,"* {@link #getValidDataSize(int) getValidDataSize(i)},"
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,364,* the {@link UnivariateFunction} returned by {@link #getValidFunction()} is
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,365,* sampled. The actual transform is computed and compared to the expected
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,366,"* transform, return by {@link #transform(double[], boolean)}. Actual and"
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,367,* expected values should be equal to within the relative error returned by
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,368,* {@link #getRelativeTolerance(int) getRelativeTolerance(i)}.
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,370,@Test
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,371,public void testTransformFunction() {
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,372,for (int i = 0; i < getNumberOfValidDataSizes(); i++) {
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,373,final int n = getValidDataSize(i);
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,374,final double tol = getRelativeTolerance(i);
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,375,"doTestTransformFunction(n, tol, true);"
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,380,* Accuracy check of {@link RealTransformer#inverseTransform(double[])}. For
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,381,* each valid data size returned by
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,382,"* {@link #getValidDataSize(int) getValidDataSize(i)},"
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,383,* a random data array is generated with
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,384,* {@link RealTransformerAbstractTest#createRealData(int)}. The actual
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,385,"* transform is computed and compared to the expected transform, return by"
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,386,"* {@link #transform(double[], boolean)}. Actual and expected values should"
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,387,* be equal to within the relative error returned by
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,388,* {@link #getRelativeTolerance(int) getRelativeTolerance(i)}.
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,390,@Test
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,391,public void testInverseTransformReal() {
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,392,for (int i = 0; i < getNumberOfValidDataSizes(); i++) {
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,393,final int n = getValidDataSize(i);
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,394,final double tol = getRelativeTolerance(i);
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,395,"doTestTransformReal(n, tol, false);"
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,400,* Accuracy check of
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,401,"* {@link RealTransformer#inverseTransform(UnivariateFunction, double, double, int)}."
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,402,* For each valid data size returned by
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,403,"* {@link #getValidDataSize(int) getValidDataSize(i)},"
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,404,* the {@link UnivariateFunction} returned by {@link #getValidFunction()} is
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,405,* sampled. The actual transform is computed and compared to the expected
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,406,"* transform, return by {@link #transform(double[], boolean)}. Actual and"
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,407,* expected values should be equal to within the relative error returned by
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,408,* {@link #getRelativeTolerance(int) getRelativeTolerance(i)}.
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,410,@Test
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,411,public void testInverseTransformFunction() {
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,412,for (int i = 0; i < getNumberOfValidDataSizes(); i++) {
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,413,final int n = getValidDataSize(i);
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,414,final double tol = getRelativeTolerance(i);
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,415,"doTestTransformFunction(n, tol, false);"
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,420,* The tests per se.
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,423,"private void doTestTransformReal(final int n, final double tol,"
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,424,final boolean forward) {
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,425,final RealTransformer transformer = createRealTransformer();
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,426,final double[] x = createRealData(n);
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,427,"final double[] expected = transform(x, forward);"
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,428,final double[] actual;
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,429,if (forward) {
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,430,actual = transformer.transform(x);
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,431,} else {
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,432,actual = transformer.inverseTransform(x);
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,434,for (int i = 0; i < n; i++) {
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,435,"final String msg = String.format(""%d, %d"", n, i);"
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,436,final double delta = tol * FastMath.abs(expected[i]);
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,437,"Assert.assertEquals(msg, expected[i], actual[i], delta);"
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,441,"private void doTestTransformFunction(final int n, final double tol,"
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,442,final boolean forward) {
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,443,final RealTransformer transformer = createRealTransformer();
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,444,final UnivariateFunction f = getValidFunction();
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,445,final double a = getValidLowerBound();
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,446,final double b = getValidUpperBound();
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,447,final double[] x = createRealData(n);
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,448,for (int i = 0; i < n; i++) {
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,449,final double t = a + i * (b - a) / n;
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,450,x[i] = f.value(t);
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,452,"final double[] expected = transform(x, forward);"
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,453,final double[] actual;
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,454,if (forward) {
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,455,"actual = transformer.transform(f, a, b, n);"
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,456,} else {
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,457,"actual = transformer.inverseTransform(f, a, b, n);"
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,459,for (int i = 0; i < n; i++) {
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,460,"final String msg = String.format(""%d, %d"", n, i);"
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,461,final double delta = tol * FastMath.abs(expected[i]);
True,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,src/test/java/org/apache/commons/math/transform/RealTransformerAbstractTest.java,462,"Assert.assertEquals(msg, expected[i], actual[i], delta);"

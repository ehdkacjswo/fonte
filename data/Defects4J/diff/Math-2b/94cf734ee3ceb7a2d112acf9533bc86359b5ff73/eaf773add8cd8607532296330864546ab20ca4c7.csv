is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math3/primes/PollardRho.java,src/main/java/org/apache/commons/math3/primes/PollardRho.java,32, Only static methods in this class
True,src/main/java/org/apache/commons/math3/primes/PollardRho.java,src/main/java/org/apache/commons/math3/primes/PollardRho.java,32,* Hide utility class.
False,src/main/java/org/apache/commons/math3/primes/PollardRho.java,src/main/java/org/apache/commons/math3/primes/PollardRho.java,39," @param n number to factors, must be >0"
True,src/main/java/org/apache/commons/math3/primes/PollardRho.java,src/main/java/org/apache/commons/math3/primes/PollardRho.java,39,"* @param n number to factors, must be &gt; 0"
False,src/main/java/org/apache/commons/math3/primes/PollardRho.java,src/main/java/org/apache/commons/math3/primes/PollardRho.java,62,  Implementation of the Pollard's rho factorization algorithm.
False,src/main/java/org/apache/commons/math3/primes/PollardRho.java,src/main/java/org/apache/commons/math3/primes/PollardRho.java,63,"  This implementation follows the paper ""An improved Monte Carlo factorization algorithm"" by Richard P. Brent."
False,src/main/java/org/apache/commons/math3/primes/PollardRho.java,src/main/java/org/apache/commons/math3/primes/PollardRho.java,64,  This avoid the triple computation of f(x) typically found in Pollard's rho implementations. It also batch several gcd computation into 1.
False,src/main/java/org/apache/commons/math3/primes/PollardRho.java,src/main/java/org/apache/commons/math3/primes/PollardRho.java,65,  The backtracking is not implemented as we deal only with semi-prime.
True,src/main/java/org/apache/commons/math3/primes/PollardRho.java,src/main/java/org/apache/commons/math3/primes/PollardRho.java,62,* Implementation of the Pollard's rho factorization algorithm.
True,src/main/java/org/apache/commons/math3/primes/PollardRho.java,src/main/java/org/apache/commons/math3/primes/PollardRho.java,63,* <p>
True,src/main/java/org/apache/commons/math3/primes/PollardRho.java,src/main/java/org/apache/commons/math3/primes/PollardRho.java,64,"* This implementation follows the paper ""An improved Monte Carlo factorization algorithm"""
True,src/main/java/org/apache/commons/math3/primes/PollardRho.java,src/main/java/org/apache/commons/math3/primes/PollardRho.java,65,* by Richard P. Brent. This avoids the triple computation of f(x) typically found in Pollard's
True,src/main/java/org/apache/commons/math3/primes/PollardRho.java,src/main/java/org/apache/commons/math3/primes/PollardRho.java,66,* rho implementations. It also batch several gcd computation into 1.
True,src/main/java/org/apache/commons/math3/primes/PollardRho.java,src/main/java/org/apache/commons/math3/primes/PollardRho.java,67,* <p>
True,src/main/java/org/apache/commons/math3/primes/PollardRho.java,src/main/java/org/apache/commons/math3/primes/PollardRho.java,68,* The backtracking is not implemented as we deal only with semi-prime.
False,src/main/java/org/apache/commons/math3/primes/PollardRho.java,src/main/java/org/apache/commons/math3/primes/PollardRho.java,69,tatic int rhoBrent(final int n){
True,src/main/java/org/apache/commons/math3/primes/PollardRho.java,src/main/java/org/apache/commons/math3/primes/PollardRho.java,73,static int rhoBrent(final int n) {
False,src/main/java/org/apache/commons/math3/primes/PollardRho.java,src/main/java/org/apache/commons/math3/primes/PollardRho.java,113, Gcd between two positive numbers
True,src/main/java/org/apache/commons/math3/primes/PollardRho.java,src/main/java/org/apache/commons/math3/primes/PollardRho.java,117,* Gcd between two positive numbers.
False,src/main/java/org/apache/commons/math3/primes/PollardRho.java,src/main/java/org/apache/commons/math3/primes/PollardRho.java,115," Gets the greatest common divisor of two numbers,"
False,src/main/java/org/apache/commons/math3/primes/PollardRho.java,src/main/java/org/apache/commons/math3/primes/PollardRho.java,116," using the ""binary gcd"" method which avoids division and modulo"
False,src/main/java/org/apache/commons/math3/primes/PollardRho.java,src/main/java/org/apache/commons/math3/primes/PollardRho.java,117, operations. See Knuth 4.5.2 algorithm B. This algorithm is due to Josef
False,src/main/java/org/apache/commons/math3/primes/PollardRho.java,src/main/java/org/apache/commons/math3/primes/PollardRho.java,118, Stein (1961).
True,src/main/java/org/apache/commons/math3/primes/PollardRho.java,src/main/java/org/apache/commons/math3/primes/PollardRho.java,119,"* Gets the greatest common divisor of two numbers, using the ""binary gcd"" method,"
True,src/main/java/org/apache/commons/math3/primes/PollardRho.java,src/main/java/org/apache/commons/math3/primes/PollardRho.java,120,* which avoids division and modulo operations. See Knuth 4.5.2 algorithm B.
True,src/main/java/org/apache/commons/math3/primes/PollardRho.java,src/main/java/org/apache/commons/math3/primes/PollardRho.java,121,* This algorithm is due to Josef Stein (1961).
False,src/main/java/org/apache/commons/math3/primes/PollardRho.java,src/main/java/org/apache/commons/math3/primes/PollardRho.java,122," <li>The result of {@code gcd(x, x)}, {@code gcd(0, x)} and"
False,src/main/java/org/apache/commons/math3/primes/PollardRho.java,src/main/java/org/apache/commons/math3/primes/PollardRho.java,123," {@code gcd(x, 0)} is the value of {@code x}."
False,src/main/java/org/apache/commons/math3/primes/PollardRho.java,src/main/java/org/apache/commons/math3/primes/PollardRho.java,124," <li>The invocation {@code gcd(0, 0)} is the only one which returns"
False,src/main/java/org/apache/commons/math3/primes/PollardRho.java,src/main/java/org/apache/commons/math3/primes/PollardRho.java,125, {@code 0}.</li>
True,src/main/java/org/apache/commons/math3/primes/PollardRho.java,src/main/java/org/apache/commons/math3/primes/PollardRho.java,125,"* <li>The result of {@code gcd(x, x)}, {@code gcd(0, x)} and {@code gcd(x, 0)} is the value of {@code x}.</li>"
True,src/main/java/org/apache/commons/math3/primes/PollardRho.java,src/main/java/org/apache/commons/math3/primes/PollardRho.java,126,"* <li>The invocation {@code gcd(0, 0)} is the only one which returns {@code 0}.</li>"
False,src/main/java/org/apache/commons/math3/primes/PollardRho.java,src/main/java/org/apache/commons/math3/primes/PollardRho.java,127," @param a first number, must be >=0"
False,src/main/java/org/apache/commons/math3/primes/PollardRho.java,src/main/java/org/apache/commons/math3/primes/PollardRho.java,128," @param b second number, must be >=0"
True,src/main/java/org/apache/commons/math3/primes/PollardRho.java,src/main/java/org/apache/commons/math3/primes/PollardRho.java,129,"* @param a first number, must be &ge; 0"
True,src/main/java/org/apache/commons/math3/primes/PollardRho.java,src/main/java/org/apache/commons/math3/primes/PollardRho.java,130,"* @param b second number, must be &ge; 0"
False,src/main/java/org/apache/commons/math3/primes/PollardRho.java,src/main/java/org/apache/commons/math3/primes/PollardRho.java,133,"/gdc(a,0) = a"
True,src/main/java/org/apache/commons/math3/primes/PollardRho.java,src/main/java/org/apache/commons/math3/primes/PollardRho.java,135,"// gdc(a,0) = a"
False,src/main/java/org/apache/commons/math3/primes/PollardRho.java,src/main/java/org/apache/commons/math3/primes/PollardRho.java,140,"/make a and b odd, keep in mind the common power of twos"
True,src/main/java/org/apache/commons/math3/primes/PollardRho.java,src/main/java/org/apache/commons/math3/primes/PollardRho.java,142,"// make a and b odd, keep in mind the common power of twos"
False,src/main/java/org/apache/commons/math3/primes/PollardRho.java,src/main/java/org/apache/commons/math3/primes/PollardRho.java,147,/a and b >0
False,src/main/java/org/apache/commons/math3/primes/PollardRho.java,src/main/java/org/apache/commons/math3/primes/PollardRho.java,148,"/if a > b then gdc(a,b) = gcd(a-b,b)"
False,src/main/java/org/apache/commons/math3/primes/PollardRho.java,src/main/java/org/apache/commons/math3/primes/PollardRho.java,149,"/if a < b then gcd(a,b) = gcd(b-a,a)"
False,src/main/java/org/apache/commons/math3/primes/PollardRho.java,src/main/java/org/apache/commons/math3/primes/PollardRho.java,150,/so next a is the absolute difference and next b is the minimum of current values
True,src/main/java/org/apache/commons/math3/primes/PollardRho.java,src/main/java/org/apache/commons/math3/primes/PollardRho.java,149,// a and b >0
True,src/main/java/org/apache/commons/math3/primes/PollardRho.java,src/main/java/org/apache/commons/math3/primes/PollardRho.java,150,"// if a > b then gdc(a,b) = gcd(a-b,b)"
True,src/main/java/org/apache/commons/math3/primes/PollardRho.java,src/main/java/org/apache/commons/math3/primes/PollardRho.java,151,"// if a < b then gcd(a,b) = gcd(b-a,a)"
True,src/main/java/org/apache/commons/math3/primes/PollardRho.java,src/main/java/org/apache/commons/math3/primes/PollardRho.java,152,// so next a is the absolute difference and next b is the minimum of current values
False,src/main/java/org/apache/commons/math3/primes/PollardRho.java,src/main/java/org/apache/commons/math3/primes/PollardRho.java,155,/for speed optimization:
False,src/main/java/org/apache/commons/math3/primes/PollardRho.java,src/main/java/org/apache/commons/math3/primes/PollardRho.java,156,/remove any power of two in a as b is guaranteed to be odd throughout all iterations
True,src/main/java/org/apache/commons/math3/primes/PollardRho.java,src/main/java/org/apache/commons/math3/primes/PollardRho.java,157,// for speed optimization:
True,src/main/java/org/apache/commons/math3/primes/PollardRho.java,src/main/java/org/apache/commons/math3/primes/PollardRho.java,158,// remove any power of two in a as b is guaranteed to be odd throughout all iterations
False,src/main/java/org/apache/commons/math3/primes/PollardRho.java,src/main/java/org/apache/commons/math3/primes/PollardRho.java,160,"/gcd(a,a) = a, just ""add"" the common power of twos"
True,src/main/java/org/apache/commons/math3/primes/PollardRho.java,src/main/java/org/apache/commons/math3/primes/PollardRho.java,162,"// gcd(a,a) = a, just ""add"" the common power of twos"
False,src/main/java/org/apache/commons/math3/primes/Primes.java,src/main/java/org/apache/commons/math3/primes/Primes.java,32, {@link Math}.
False,src/main/java/org/apache/commons/math3/primes/Primes.java,src/main/java/org/apache/commons/math3/primes/Primes.java,39, Only static methods in this class
True,src/main/java/org/apache/commons/math3/primes/Primes.java,src/main/java/org/apache/commons/math3/primes/Primes.java,39,* Hide utility class.
False,src/main/java/org/apache/commons/math3/primes/Primes.java,src/main/java/org/apache/commons/math3/primes/Primes.java,45, Primality test: tells if the argument is a (provable) prime or not.</p>
False,src/main/java/org/apache/commons/math3/primes/Primes.java,src/main/java/org/apache/commons/math3/primes/Primes.java,46, It uses the Miller-Rabin probabilistic test in such a way that result is always guaranteed: it uses the firsts prime numbers as successive base
False,src/main/java/org/apache/commons/math3/primes/Primes.java,src/main/java/org/apache/commons/math3/primes/Primes.java,47," (see Handbook of applied cryptography by Menezes, table 4.1)"
True,src/main/java/org/apache/commons/math3/primes/Primes.java,src/main/java/org/apache/commons/math3/primes/Primes.java,45,* Primality test: tells if the argument is a (provable) prime or not.
True,src/main/java/org/apache/commons/math3/primes/Primes.java,src/main/java/org/apache/commons/math3/primes/Primes.java,46,* <p>
True,src/main/java/org/apache/commons/math3/primes/Primes.java,src/main/java/org/apache/commons/math3/primes/Primes.java,47,* It uses the Miller-Rabin probabilistic test in such a way that result is always guaranteed:
True,src/main/java/org/apache/commons/math3/primes/Primes.java,src/main/java/org/apache/commons/math3/primes/Primes.java,48,* it uses the firsts prime numbers as successive base (see Handbook of applied cryptography
True,src/main/java/org/apache/commons/math3/primes/Primes.java,src/main/java/org/apache/commons/math3/primes/Primes.java,49,"* by Menezes, table 4.1)."
False,src/main/java/org/apache/commons/math3/primes/Primes.java,src/main/java/org/apache/commons/math3/primes/Primes.java,50, @return true if n is prime. (All numbers <2 return false).
True,src/main/java/org/apache/commons/math3/primes/Primes.java,src/main/java/org/apache/commons/math3/primes/Primes.java,52,* @return true if n is prime. (All numbers &lt; 2 return false).
False,src/main/java/org/apache/commons/math3/primes/Primes.java,src/main/java/org/apache/commons/math3/primes/Primes.java,70, @throws MathIllegalArgumentException if n <0.
True,src/main/java/org/apache/commons/math3/primes/Primes.java,src/main/java/org/apache/commons/math3/primes/Primes.java,72,* @throws MathIllegalArgumentException if n &lt; 0.
False,src/main/java/org/apache/commons/math3/primes/Primes.java,src/main/java/org/apache/commons/math3/primes/Primes.java,88,"/prepare entry in the +2, +4 loop:"
False,src/main/java/org/apache/commons/math3/primes/Primes.java,src/main/java/org/apache/commons/math3/primes/Primes.java,89,/n should not be a multiple of 3
True,src/main/java/org/apache/commons/math3/primes/Primes.java,src/main/java/org/apache/commons/math3/primes/Primes.java,90,"// prepare entry in the +2, +4 loop:"
True,src/main/java/org/apache/commons/math3/primes/Primes.java,src/main/java/org/apache/commons/math3/primes/Primes.java,91,// n should not be a multiple of 3
False,src/main/java/org/apache/commons/math3/primes/Primes.java,src/main/java/org/apache/commons/math3/primes/Primes.java,91,f (0 == rem) {// if n%3==0
False,src/main/java/org/apache/commons/math3/primes/Primes.java,src/main/java/org/apache/commons/math3/primes/Primes.java,92, += 2;//n%3==2
False,src/main/java/org/apache/commons/math3/primes/Primes.java,src/main/java/org/apache/commons/math3/primes/Primes.java,93, else if (1 == rem) {//if n%3==1
False,src/main/java/org/apache/commons/math3/primes/Primes.java,src/main/java/org/apache/commons/math3/primes/Primes.java,94,/if (isPrime(n)) return n;
False,src/main/java/org/apache/commons/math3/primes/Primes.java,src/main/java/org/apache/commons/math3/primes/Primes.java,95, += 4;//n%3==2
True,src/main/java/org/apache/commons/math3/primes/Primes.java,src/main/java/org/apache/commons/math3/primes/Primes.java,93,if (0 == rem) { // if n % 3 == 0
True,src/main/java/org/apache/commons/math3/primes/Primes.java,src/main/java/org/apache/commons/math3/primes/Primes.java,94,n += 2; // n % 3 == 2
True,src/main/java/org/apache/commons/math3/primes/Primes.java,src/main/java/org/apache/commons/math3/primes/Primes.java,95,} else if (1 == rem) { // if n % 3 == 1
True,src/main/java/org/apache/commons/math3/primes/Primes.java,src/main/java/org/apache/commons/math3/primes/Primes.java,96,// if (isPrime(n)) return n;
True,src/main/java/org/apache/commons/math3/primes/Primes.java,src/main/java/org/apache/commons/math3/primes/Primes.java,97,n += 4; // n % 3 == 2
False,src/main/java/org/apache/commons/math3/primes/Primes.java,src/main/java/org/apache/commons/math3/primes/Primes.java,97,hile (true) { //this loop skips all multiple of 3
True,src/main/java/org/apache/commons/math3/primes/Primes.java,src/main/java/org/apache/commons/math3/primes/Primes.java,99,while (true) { // this loop skips all multiple of 3
False,src/main/java/org/apache/commons/math3/primes/Primes.java,src/main/java/org/apache/commons/math3/primes/Primes.java,101, += 2;//n%3==1
True,src/main/java/org/apache/commons/math3/primes/Primes.java,src/main/java/org/apache/commons/math3/primes/Primes.java,103,n += 2; // n % 3 == 1
False,src/main/java/org/apache/commons/math3/primes/Primes.java,src/main/java/org/apache/commons/math3/primes/Primes.java,105, += 4;//n%3==2
True,src/main/java/org/apache/commons/math3/primes/Primes.java,src/main/java/org/apache/commons/math3/primes/Primes.java,107,n += 4; // n % 3 == 2
False,src/main/java/org/apache/commons/math3/primes/Primes.java,src/main/java/org/apache/commons/math3/primes/Primes.java,112, @param n number to factorize: must be >=2
True,src/main/java/org/apache/commons/math3/primes/Primes.java,src/main/java/org/apache/commons/math3/primes/Primes.java,114,* @param n number to factorize: must be &ge; 2
False,src/main/java/org/apache/commons/math3/primes/Primes.java,src/main/java/org/apache/commons/math3/primes/Primes.java,114, @throws MathIllegalArgumentException if n <2.
True,src/main/java/org/apache/commons/math3/primes/Primes.java,src/main/java/org/apache/commons/math3/primes/Primes.java,116,* @throws MathIllegalArgumentException if n &lt; 2.
False,src/main/java/org/apache/commons/math3/primes/Primes.java,src/main/java/org/apache/commons/math3/primes/Primes.java,121,/slower than trial div unless we do an awful lot of computation (then it finally gets JIT-compiled efficiently
False,src/main/java/org/apache/commons/math3/primes/Primes.java,src/main/java/org/apache/commons/math3/primes/Primes.java,122,/List<Integer> out = PollardRho.primeFactors(n);
True,src/main/java/org/apache/commons/math3/primes/Primes.java,src/main/java/org/apache/commons/math3/primes/Primes.java,123,// slower than trial div unless we do an awful lot of computation
True,src/main/java/org/apache/commons/math3/primes/Primes.java,src/main/java/org/apache/commons/math3/primes/Primes.java,124,// (then it finally gets JIT-compiled efficiently
True,src/main/java/org/apache/commons/math3/primes/Primes.java,src/main/java/org/apache/commons/math3/primes/Primes.java,125,// List<Integer> out = PollardRho.primeFactors(n);
False,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,34, The 512 firsts prime numbers
True,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,34,* The 512 firsts prime numbers.
True,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,35,* <p>
False,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,36," As a result, <code>int</code> numbers which are not reduced by those primes are garanteed to be either prime or semi prime."
True,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,37,"* As a result, <code>int</code> numbers which are not reduced by those primes are guaranteed"
True,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,38,* to be either prime or semi prime.
False,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,66, The last number in PRIMES
True,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,68,/** The last number in PRIMES. */
False,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,71, Only static methods in this class
True,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,72,* Hide utility class.
False,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,78," @param n the number to factor, must be >0."
True,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,79,"* @param n the number to factor, must be &gt; 0."
False,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,93, Extract factors in the range <code>PRIME_LAST+2</code> to <code>maxFactors</code>
True,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,94,* Extract factors in the range <code>PRIME_LAST+2</code> to <code>maxFactors</code>.
False,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,123, Factorization by trial division
True,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,124,* Factorization by trial division.
False,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,141," It uses the prime numbers as successive base therefore it is garanteed to be always correct. (see Handbook of applied cryptography by Menezes, table 4.1)"
True,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,142,* <p>
True,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,143,* It uses the prime numbers as successive base therefore it is guaranteed to be always correct.
True,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,144,"* (see Handbook of applied cryptography by Menezes, table 4.1)"
False,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,143, @param n number to test: an odd integer >= 3
True,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,146,* @param n number to test: an odd integer &ge; 3
False,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,175, //definitely composite
True,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,178,} // definitely composite
False,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,180, //definitely composite
True,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,183,} // definitely composite
False,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,183,eturn true; //definitely prime
True,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,src/main/java/org/apache/commons/math3/primes/SmallPrimes.java,186,return true; // definitely prime

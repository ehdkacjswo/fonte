is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math3/stat/Frequency.java,src/main/java/org/apache/commons/math3/stat/Frequency.java,21,import java.util.ArrayList;
True,src/main/java/org/apache/commons/math3/stat/Frequency.java,src/main/java/org/apache/commons/math3/stat/Frequency.java,25,import java.util.List;
True,src/main/java/org/apache/commons/math3/stat/Frequency.java,src/main/java/org/apache/commons/math3/stat/Frequency.java,27,import java.util.Map.Entry;
True,src/main/java/org/apache/commons/math3/stat/Frequency.java,src/main/java/org/apache/commons/math3/stat/Frequency.java,500,* Returns the mode value(s) in comparator order.
True,src/main/java/org/apache/commons/math3/stat/Frequency.java,src/main/java/org/apache/commons/math3/stat/Frequency.java,502,* @return a list containing the value(s) which appear most often.
True,src/main/java/org/apache/commons/math3/stat/Frequency.java,src/main/java/org/apache/commons/math3/stat/Frequency.java,503,* @since 3.3
True,src/main/java/org/apache/commons/math3/stat/Frequency.java,src/main/java/org/apache/commons/math3/stat/Frequency.java,505,public List<Comparable<?>> getMode() {
True,src/main/java/org/apache/commons/math3/stat/Frequency.java,src/main/java/org/apache/commons/math3/stat/Frequency.java,506,long mostPopular = 0; // frequencies are always positive
True,src/main/java/org/apache/commons/math3/stat/Frequency.java,src/main/java/org/apache/commons/math3/stat/Frequency.java,508,"// Get the max count first, so we avoid having to recreate the List each time"
True,src/main/java/org/apache/commons/math3/stat/Frequency.java,src/main/java/org/apache/commons/math3/stat/Frequency.java,509,for(Long l : freqTable.values()) {
True,src/main/java/org/apache/commons/math3/stat/Frequency.java,src/main/java/org/apache/commons/math3/stat/Frequency.java,510,long frequency = l.longValue();
True,src/main/java/org/apache/commons/math3/stat/Frequency.java,src/main/java/org/apache/commons/math3/stat/Frequency.java,511,if (frequency > mostPopular) {
True,src/main/java/org/apache/commons/math3/stat/Frequency.java,src/main/java/org/apache/commons/math3/stat/Frequency.java,512,mostPopular = frequency;
True,src/main/java/org/apache/commons/math3/stat/Frequency.java,src/main/java/org/apache/commons/math3/stat/Frequency.java,516,List<Comparable<?>> modeList = new ArrayList<Comparable<?>>();
True,src/main/java/org/apache/commons/math3/stat/Frequency.java,src/main/java/org/apache/commons/math3/stat/Frequency.java,517,"for (Entry<Comparable<?>, Long> ent : freqTable.entrySet()) {"
True,src/main/java/org/apache/commons/math3/stat/Frequency.java,src/main/java/org/apache/commons/math3/stat/Frequency.java,518,long frequency = ent.getValue().longValue();
True,src/main/java/org/apache/commons/math3/stat/Frequency.java,src/main/java/org/apache/commons/math3/stat/Frequency.java,519,if (frequency == mostPopular) {
True,src/main/java/org/apache/commons/math3/stat/Frequency.java,src/main/java/org/apache/commons/math3/stat/Frequency.java,520,modeList.add(ent.getKey());
True,src/main/java/org/apache/commons/math3/stat/Frequency.java,src/main/java/org/apache/commons/math3/stat/Frequency.java,521,"// Alternatively, to avoid scanning the entries twice, keep recreating the set"
True,src/main/java/org/apache/commons/math3/stat/Frequency.java,src/main/java/org/apache/commons/math3/stat/Frequency.java,522,"// To use this approach, comment out the values() scan loop above and uncomment below"
True,src/main/java/org/apache/commons/math3/stat/Frequency.java,src/main/java/org/apache/commons/math3/stat/Frequency.java,523,//            } else if (frequency > mostPopular) {
True,src/main/java/org/apache/commons/math3/stat/Frequency.java,src/main/java/org/apache/commons/math3/stat/Frequency.java,524,//                modeList.clear(); // the previous List is obsolete
True,src/main/java/org/apache/commons/math3/stat/Frequency.java,src/main/java/org/apache/commons/math3/stat/Frequency.java,525,//                modeList.add(ent.getKey());
True,src/main/java/org/apache/commons/math3/stat/Frequency.java,src/main/java/org/apache/commons/math3/stat/Frequency.java,526,//                mostPopular = frequency;
True,src/main/java/org/apache/commons/math3/stat/Frequency.java,src/main/java/org/apache/commons/math3/stat/Frequency.java,529,return modeList;
False,src/test/java/org/apache/commons/math3/stat/FrequencyTest.java,src/test/java/org/apache/commons/math3/stat/FrequencyTest.java,337,/    @Test
False,src/test/java/org/apache/commons/math3/stat/FrequencyTest.java,src/test/java/org/apache/commons/math3/stat/FrequencyTest.java,338,/    public void testMode() {
False,src/test/java/org/apache/commons/math3/stat/FrequencyTest.java,src/test/java/org/apache/commons/math3/stat/FrequencyTest.java,339,"/        Assert.assertEquals(0, f.getMode().size());"
False,src/test/java/org/apache/commons/math3/stat/FrequencyTest.java,src/test/java/org/apache/commons/math3/stat/FrequencyTest.java,340,"/        f.addValue(""1"");"
False,src/test/java/org/apache/commons/math3/stat/FrequencyTest.java,src/test/java/org/apache/commons/math3/stat/FrequencyTest.java,341,"/        Assert.assertEquals(1, f.getMode().size());"
False,src/test/java/org/apache/commons/math3/stat/FrequencyTest.java,src/test/java/org/apache/commons/math3/stat/FrequencyTest.java,342,"/        f.addValue(""2"");"
False,src/test/java/org/apache/commons/math3/stat/FrequencyTest.java,src/test/java/org/apache/commons/math3/stat/FrequencyTest.java,343,"/        Assert.assertEquals(2, f.getMode().size());"
False,src/test/java/org/apache/commons/math3/stat/FrequencyTest.java,src/test/java/org/apache/commons/math3/stat/FrequencyTest.java,344,"/        Assert.assertTrue(f.getMode().contains(""1""));"
False,src/test/java/org/apache/commons/math3/stat/FrequencyTest.java,src/test/java/org/apache/commons/math3/stat/FrequencyTest.java,345,"/        Assert.assertTrue(f.getMode().contains(""2""));"
False,src/test/java/org/apache/commons/math3/stat/FrequencyTest.java,src/test/java/org/apache/commons/math3/stat/FrequencyTest.java,346,"/        f.addValue(""2"");"
False,src/test/java/org/apache/commons/math3/stat/FrequencyTest.java,src/test/java/org/apache/commons/math3/stat/FrequencyTest.java,347,"/        Assert.assertEquals(1, f.getMode().size());"
False,src/test/java/org/apache/commons/math3/stat/FrequencyTest.java,src/test/java/org/apache/commons/math3/stat/FrequencyTest.java,348,"/        Assert.assertFalse(f.getMode().contains(""1""));"
False,src/test/java/org/apache/commons/math3/stat/FrequencyTest.java,src/test/java/org/apache/commons/math3/stat/FrequencyTest.java,349,"/        Assert.assertTrue(f.getMode().contains(""2""));"
True,src/test/java/org/apache/commons/math3/stat/FrequencyTest.java,src/test/java/org/apache/commons/math3/stat/FrequencyTest.java,337,@Test
True,src/test/java/org/apache/commons/math3/stat/FrequencyTest.java,src/test/java/org/apache/commons/math3/stat/FrequencyTest.java,338,public void testMode() {
True,src/test/java/org/apache/commons/math3/stat/FrequencyTest.java,src/test/java/org/apache/commons/math3/stat/FrequencyTest.java,339,List<Comparable<?>> mode;
True,src/test/java/org/apache/commons/math3/stat/FrequencyTest.java,src/test/java/org/apache/commons/math3/stat/FrequencyTest.java,340,mode = f.getMode();
True,src/test/java/org/apache/commons/math3/stat/FrequencyTest.java,src/test/java/org/apache/commons/math3/stat/FrequencyTest.java,341,"Assert.assertEquals(0, mode.size());"
True,src/test/java/org/apache/commons/math3/stat/FrequencyTest.java,src/test/java/org/apache/commons/math3/stat/FrequencyTest.java,343,"f.addValue(""3"");"
True,src/test/java/org/apache/commons/math3/stat/FrequencyTest.java,src/test/java/org/apache/commons/math3/stat/FrequencyTest.java,344,mode = f.getMode();
True,src/test/java/org/apache/commons/math3/stat/FrequencyTest.java,src/test/java/org/apache/commons/math3/stat/FrequencyTest.java,345,"Assert.assertEquals(1, mode.size());"
True,src/test/java/org/apache/commons/math3/stat/FrequencyTest.java,src/test/java/org/apache/commons/math3/stat/FrequencyTest.java,346,"Assert.assertEquals(""3"", mode.get(0));"
True,src/test/java/org/apache/commons/math3/stat/FrequencyTest.java,src/test/java/org/apache/commons/math3/stat/FrequencyTest.java,348,"f.addValue(""2"");"
True,src/test/java/org/apache/commons/math3/stat/FrequencyTest.java,src/test/java/org/apache/commons/math3/stat/FrequencyTest.java,349,mode = f.getMode();
True,src/test/java/org/apache/commons/math3/stat/FrequencyTest.java,src/test/java/org/apache/commons/math3/stat/FrequencyTest.java,350,"Assert.assertEquals(2, mode.size());"
True,src/test/java/org/apache/commons/math3/stat/FrequencyTest.java,src/test/java/org/apache/commons/math3/stat/FrequencyTest.java,351,"Assert.assertEquals(""2"", mode.get(0));"
True,src/test/java/org/apache/commons/math3/stat/FrequencyTest.java,src/test/java/org/apache/commons/math3/stat/FrequencyTest.java,352,"Assert.assertEquals(""3"",mode.get(1));"
True,src/test/java/org/apache/commons/math3/stat/FrequencyTest.java,src/test/java/org/apache/commons/math3/stat/FrequencyTest.java,354,"f.addValue(""2"");"
True,src/test/java/org/apache/commons/math3/stat/FrequencyTest.java,src/test/java/org/apache/commons/math3/stat/FrequencyTest.java,355,mode = f.getMode();
True,src/test/java/org/apache/commons/math3/stat/FrequencyTest.java,src/test/java/org/apache/commons/math3/stat/FrequencyTest.java,356,"Assert.assertEquals(1, mode.size());"
True,src/test/java/org/apache/commons/math3/stat/FrequencyTest.java,src/test/java/org/apache/commons/math3/stat/FrequencyTest.java,357,"Assert.assertEquals(""2"", mode.get(0));"
True,src/test/java/org/apache/commons/math3/stat/FrequencyTest.java,src/test/java/org/apache/commons/math3/stat/FrequencyTest.java,358,"Assert.assertFalse(mode.contains(""1""));"
True,src/test/java/org/apache/commons/math3/stat/FrequencyTest.java,src/test/java/org/apache/commons/math3/stat/FrequencyTest.java,359,"Assert.assertTrue(mode.contains(""2""));"

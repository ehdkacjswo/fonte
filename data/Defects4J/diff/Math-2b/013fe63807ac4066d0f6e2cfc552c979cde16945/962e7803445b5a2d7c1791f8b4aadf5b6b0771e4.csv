is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math/stat/StatUtils.java,src/main/java/org/apache/commons/math/stat/StatUtils.java,404,"* Returns the <a href=""http://en.wikibooks.org/wiki/Statistics/Summary/Variance"">"
True,src/main/java/org/apache/commons/math/stat/StatUtils.java,src/main/java/org/apache/commons/math/stat/StatUtils.java,405,"* population variance</a> of the entries in the input array, or"
True,src/main/java/org/apache/commons/math/stat/StatUtils.java,src/main/java/org/apache/commons/math/stat/StatUtils.java,406,* <code>Double.NaN</code> if the array is empty.
True,src/main/java/org/apache/commons/math/stat/StatUtils.java,src/main/java/org/apache/commons/math/stat/StatUtils.java,407,* <p>
True,src/main/java/org/apache/commons/math/stat/StatUtils.java,src/main/java/org/apache/commons/math/stat/StatUtils.java,408,* See {@link org.apache.commons.math.stat.descriptive.moment.Variance} for
True,src/main/java/org/apache/commons/math/stat/StatUtils.java,src/main/java/org/apache/commons/math/stat/StatUtils.java,409,* details on the formula and computing algorithm.</p>
True,src/main/java/org/apache/commons/math/stat/StatUtils.java,src/main/java/org/apache/commons/math/stat/StatUtils.java,410,* <p>
True,src/main/java/org/apache/commons/math/stat/StatUtils.java,src/main/java/org/apache/commons/math/stat/StatUtils.java,411,* Returns 0 for a single-value (i.e. length = 1) sample.</p>
True,src/main/java/org/apache/commons/math/stat/StatUtils.java,src/main/java/org/apache/commons/math/stat/StatUtils.java,412,* <p>
True,src/main/java/org/apache/commons/math/stat/StatUtils.java,src/main/java/org/apache/commons/math/stat/StatUtils.java,413,* Throws <code>IllegalArgumentException</code> if the array is null.</p>
True,src/main/java/org/apache/commons/math/stat/StatUtils.java,src/main/java/org/apache/commons/math/stat/StatUtils.java,415,* @param values the input array
True,src/main/java/org/apache/commons/math/stat/StatUtils.java,src/main/java/org/apache/commons/math/stat/StatUtils.java,416,* @return the population variance of the values or Double.NaN if the array is empty
True,src/main/java/org/apache/commons/math/stat/StatUtils.java,src/main/java/org/apache/commons/math/stat/StatUtils.java,417,* @throws IllegalArgumentException if the array is null
True,src/main/java/org/apache/commons/math/stat/StatUtils.java,src/main/java/org/apache/commons/math/stat/StatUtils.java,419,public static double populationVariance(final double[] values) {
True,src/main/java/org/apache/commons/math/stat/StatUtils.java,src/main/java/org/apache/commons/math/stat/StatUtils.java,420,return new Variance(false).evaluate(values);
True,src/main/java/org/apache/commons/math/stat/StatUtils.java,src/main/java/org/apache/commons/math/stat/StatUtils.java,424,"* Returns the <a href=""http://en.wikibooks.org/wiki/Statistics/Summary/Variance"">"
True,src/main/java/org/apache/commons/math/stat/StatUtils.java,src/main/java/org/apache/commons/math/stat/StatUtils.java,425,* population variance</a> of the entries in the specified portion of
True,src/main/java/org/apache/commons/math/stat/StatUtils.java,src/main/java/org/apache/commons/math/stat/StatUtils.java,426,"* the input array, or <code>Double.NaN</code> if the designated subarray"
True,src/main/java/org/apache/commons/math/stat/StatUtils.java,src/main/java/org/apache/commons/math/stat/StatUtils.java,427,* is empty.
True,src/main/java/org/apache/commons/math/stat/StatUtils.java,src/main/java/org/apache/commons/math/stat/StatUtils.java,428,* <p>
True,src/main/java/org/apache/commons/math/stat/StatUtils.java,src/main/java/org/apache/commons/math/stat/StatUtils.java,429,* See {@link org.apache.commons.math.stat.descriptive.moment.Variance} for
True,src/main/java/org/apache/commons/math/stat/StatUtils.java,src/main/java/org/apache/commons/math/stat/StatUtils.java,430,* details on the computing algorithm.</p>
True,src/main/java/org/apache/commons/math/stat/StatUtils.java,src/main/java/org/apache/commons/math/stat/StatUtils.java,431,* <p>
True,src/main/java/org/apache/commons/math/stat/StatUtils.java,src/main/java/org/apache/commons/math/stat/StatUtils.java,432,* Returns 0 for a single-value (i.e. length = 1) sample.</p>
True,src/main/java/org/apache/commons/math/stat/StatUtils.java,src/main/java/org/apache/commons/math/stat/StatUtils.java,433,* <p>
True,src/main/java/org/apache/commons/math/stat/StatUtils.java,src/main/java/org/apache/commons/math/stat/StatUtils.java,434,* Throws <code>IllegalArgumentException</code> if the array is null or the
True,src/main/java/org/apache/commons/math/stat/StatUtils.java,src/main/java/org/apache/commons/math/stat/StatUtils.java,435,* array index parameters are not valid.</p>
True,src/main/java/org/apache/commons/math/stat/StatUtils.java,src/main/java/org/apache/commons/math/stat/StatUtils.java,437,* @param values the input array
True,src/main/java/org/apache/commons/math/stat/StatUtils.java,src/main/java/org/apache/commons/math/stat/StatUtils.java,438,* @param begin index of the first array element to include
True,src/main/java/org/apache/commons/math/stat/StatUtils.java,src/main/java/org/apache/commons/math/stat/StatUtils.java,439,* @param length the number of elements to include
True,src/main/java/org/apache/commons/math/stat/StatUtils.java,src/main/java/org/apache/commons/math/stat/StatUtils.java,440,* @return the population variance of the values or Double.NaN if length = 0
True,src/main/java/org/apache/commons/math/stat/StatUtils.java,src/main/java/org/apache/commons/math/stat/StatUtils.java,441,* @throws IllegalArgumentException if the array is null or the array index
True,src/main/java/org/apache/commons/math/stat/StatUtils.java,src/main/java/org/apache/commons/math/stat/StatUtils.java,442,*  parameters are not valid
True,src/main/java/org/apache/commons/math/stat/StatUtils.java,src/main/java/org/apache/commons/math/stat/StatUtils.java,444,"public static double populationVariance(final double[] values, final int begin,"
True,src/main/java/org/apache/commons/math/stat/StatUtils.java,src/main/java/org/apache/commons/math/stat/StatUtils.java,445,final int length) {
True,src/main/java/org/apache/commons/math/stat/StatUtils.java,src/main/java/org/apache/commons/math/stat/StatUtils.java,446,"return new Variance(false).evaluate(values, begin, length);"
True,src/main/java/org/apache/commons/math/stat/StatUtils.java,src/main/java/org/apache/commons/math/stat/StatUtils.java,450,"* Returns the <a href=""http://en.wikibooks.org/wiki/Statistics/Summary/Variance"">"
True,src/main/java/org/apache/commons/math/stat/StatUtils.java,src/main/java/org/apache/commons/math/stat/StatUtils.java,451,* population variance</a> of the entries in the specified portion of
True,src/main/java/org/apache/commons/math/stat/StatUtils.java,src/main/java/org/apache/commons/math/stat/StatUtils.java,452,"* the input array, using the precomputed mean value.  Returns"
True,src/main/java/org/apache/commons/math/stat/StatUtils.java,src/main/java/org/apache/commons/math/stat/StatUtils.java,453,* <code>Double.NaN</code> if the designated subarray is empty.
True,src/main/java/org/apache/commons/math/stat/StatUtils.java,src/main/java/org/apache/commons/math/stat/StatUtils.java,454,* <p>
True,src/main/java/org/apache/commons/math/stat/StatUtils.java,src/main/java/org/apache/commons/math/stat/StatUtils.java,455,* See {@link org.apache.commons.math.stat.descriptive.moment.Variance} for
True,src/main/java/org/apache/commons/math/stat/StatUtils.java,src/main/java/org/apache/commons/math/stat/StatUtils.java,456,* details on the computing algorithm.</p>
True,src/main/java/org/apache/commons/math/stat/StatUtils.java,src/main/java/org/apache/commons/math/stat/StatUtils.java,457,* <p>
True,src/main/java/org/apache/commons/math/stat/StatUtils.java,src/main/java/org/apache/commons/math/stat/StatUtils.java,458,* The formula used assumes that the supplied mean value is the arithmetic
True,src/main/java/org/apache/commons/math/stat/StatUtils.java,src/main/java/org/apache/commons/math/stat/StatUtils.java,459,"* mean of the sample data, not a known population parameter.  This method"
True,src/main/java/org/apache/commons/math/stat/StatUtils.java,src/main/java/org/apache/commons/math/stat/StatUtils.java,460,* is supplied only to save computation when the mean has already been
True,src/main/java/org/apache/commons/math/stat/StatUtils.java,src/main/java/org/apache/commons/math/stat/StatUtils.java,461,* computed.</p>
True,src/main/java/org/apache/commons/math/stat/StatUtils.java,src/main/java/org/apache/commons/math/stat/StatUtils.java,462,* <p>
True,src/main/java/org/apache/commons/math/stat/StatUtils.java,src/main/java/org/apache/commons/math/stat/StatUtils.java,463,* Returns 0 for a single-value (i.e. length = 1) sample.</p>
True,src/main/java/org/apache/commons/math/stat/StatUtils.java,src/main/java/org/apache/commons/math/stat/StatUtils.java,464,* <p>
True,src/main/java/org/apache/commons/math/stat/StatUtils.java,src/main/java/org/apache/commons/math/stat/StatUtils.java,465,* Throws <code>IllegalArgumentException</code> if the array is null or the
True,src/main/java/org/apache/commons/math/stat/StatUtils.java,src/main/java/org/apache/commons/math/stat/StatUtils.java,466,* array index parameters are not valid.</p>
True,src/main/java/org/apache/commons/math/stat/StatUtils.java,src/main/java/org/apache/commons/math/stat/StatUtils.java,468,* @param values the input array
True,src/main/java/org/apache/commons/math/stat/StatUtils.java,src/main/java/org/apache/commons/math/stat/StatUtils.java,469,* @param mean the precomputed mean value
True,src/main/java/org/apache/commons/math/stat/StatUtils.java,src/main/java/org/apache/commons/math/stat/StatUtils.java,470,* @param begin index of the first array element to include
True,src/main/java/org/apache/commons/math/stat/StatUtils.java,src/main/java/org/apache/commons/math/stat/StatUtils.java,471,* @param length the number of elements to include
True,src/main/java/org/apache/commons/math/stat/StatUtils.java,src/main/java/org/apache/commons/math/stat/StatUtils.java,472,* @return the population variance of the values or Double.NaN if length = 0
True,src/main/java/org/apache/commons/math/stat/StatUtils.java,src/main/java/org/apache/commons/math/stat/StatUtils.java,473,* @throws IllegalArgumentException if the array is null or the array index
True,src/main/java/org/apache/commons/math/stat/StatUtils.java,src/main/java/org/apache/commons/math/stat/StatUtils.java,474,*  parameters are not valid
True,src/main/java/org/apache/commons/math/stat/StatUtils.java,src/main/java/org/apache/commons/math/stat/StatUtils.java,476,"public static double populationVariance(final double[] values, final double mean,"
True,src/main/java/org/apache/commons/math/stat/StatUtils.java,src/main/java/org/apache/commons/math/stat/StatUtils.java,477,"final int begin, final int length) {"
True,src/main/java/org/apache/commons/math/stat/StatUtils.java,src/main/java/org/apache/commons/math/stat/StatUtils.java,478,"return new Variance(false).evaluate(values, mean, begin, length);"
True,src/main/java/org/apache/commons/math/stat/StatUtils.java,src/main/java/org/apache/commons/math/stat/StatUtils.java,482,"* Returns the <a href=""http://en.wikibooks.org/wiki/Statistics/Summary/Variance"">"
True,src/main/java/org/apache/commons/math/stat/StatUtils.java,src/main/java/org/apache/commons/math/stat/StatUtils.java,483,"* population variance</a> of the entries in the input array, using the"
True,src/main/java/org/apache/commons/math/stat/StatUtils.java,src/main/java/org/apache/commons/math/stat/StatUtils.java,484,* precomputed mean value.  Returns <code>Double.NaN</code> if the array
True,src/main/java/org/apache/commons/math/stat/StatUtils.java,src/main/java/org/apache/commons/math/stat/StatUtils.java,485,* is empty.
True,src/main/java/org/apache/commons/math/stat/StatUtils.java,src/main/java/org/apache/commons/math/stat/StatUtils.java,486,* <p>
True,src/main/java/org/apache/commons/math/stat/StatUtils.java,src/main/java/org/apache/commons/math/stat/StatUtils.java,487,* See {@link org.apache.commons.math.stat.descriptive.moment.Variance} for
True,src/main/java/org/apache/commons/math/stat/StatUtils.java,src/main/java/org/apache/commons/math/stat/StatUtils.java,488,* details on the computing algorithm.</p>
True,src/main/java/org/apache/commons/math/stat/StatUtils.java,src/main/java/org/apache/commons/math/stat/StatUtils.java,489,* <p>
True,src/main/java/org/apache/commons/math/stat/StatUtils.java,src/main/java/org/apache/commons/math/stat/StatUtils.java,490,* The formula used assumes that the supplied mean value is the arithmetic
True,src/main/java/org/apache/commons/math/stat/StatUtils.java,src/main/java/org/apache/commons/math/stat/StatUtils.java,491,"* mean of the sample data, not a known population parameter.  This method"
True,src/main/java/org/apache/commons/math/stat/StatUtils.java,src/main/java/org/apache/commons/math/stat/StatUtils.java,492,* is supplied only to save computation when the mean has already been
True,src/main/java/org/apache/commons/math/stat/StatUtils.java,src/main/java/org/apache/commons/math/stat/StatUtils.java,493,* computed.</p>
True,src/main/java/org/apache/commons/math/stat/StatUtils.java,src/main/java/org/apache/commons/math/stat/StatUtils.java,494,* <p>
True,src/main/java/org/apache/commons/math/stat/StatUtils.java,src/main/java/org/apache/commons/math/stat/StatUtils.java,495,* Returns 0 for a single-value (i.e. length = 1) sample.</p>
True,src/main/java/org/apache/commons/math/stat/StatUtils.java,src/main/java/org/apache/commons/math/stat/StatUtils.java,496,* <p>
True,src/main/java/org/apache/commons/math/stat/StatUtils.java,src/main/java/org/apache/commons/math/stat/StatUtils.java,497,* Throws <code>IllegalArgumentException</code> if the array is null.</p>
True,src/main/java/org/apache/commons/math/stat/StatUtils.java,src/main/java/org/apache/commons/math/stat/StatUtils.java,499,* @param values the input array
True,src/main/java/org/apache/commons/math/stat/StatUtils.java,src/main/java/org/apache/commons/math/stat/StatUtils.java,500,* @param mean the precomputed mean value
True,src/main/java/org/apache/commons/math/stat/StatUtils.java,src/main/java/org/apache/commons/math/stat/StatUtils.java,501,* @return the population variance of the values or Double.NaN if the array is empty
True,src/main/java/org/apache/commons/math/stat/StatUtils.java,src/main/java/org/apache/commons/math/stat/StatUtils.java,502,* @throws IllegalArgumentException if the array is null
True,src/main/java/org/apache/commons/math/stat/StatUtils.java,src/main/java/org/apache/commons/math/stat/StatUtils.java,504,"public static double populationVariance(final double[] values, final double mean) {"
True,src/main/java/org/apache/commons/math/stat/StatUtils.java,src/main/java/org/apache/commons/math/stat/StatUtils.java,505,"return new Variance(false).evaluate(values, mean);"
True,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,274,@Test
True,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,275,public void testPopulationVariance() {
True,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,276,double[] x = null;
True,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,278,try {
True,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,279,"StatUtils.variance(x, 0, 4);"
True,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,280,"Assert.fail(""null is not a valid data array."");"
True,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,281,} catch (MathIllegalArgumentException ex) {
True,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,282,// success
True,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,285,// test empty
True,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,286,x = new double[] {};
True,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,287,"TestUtils.assertEquals(Double.NaN, StatUtils.populationVariance(x, 0, 0), tolerance);"
True,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,289,// test one
True,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,290,x = new double[] {two};
True,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,291,"TestUtils.assertEquals(0.0, StatUtils.populationVariance(x, 0, 1), tolerance);"
True,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,293,// test many
True,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,294,"x = new double[] {one, two, two, three};"
True,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,295,"TestUtils.assertEquals(0.25, StatUtils.populationVariance(x, 0, 2), tolerance);"
True,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,297,// test precomputed mean
True,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,298,"x = new double[] {one, two, two, three};"
True,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,299,"TestUtils.assertEquals(0.25, StatUtils.populationVariance(x, 2.5, 2, 2), tolerance);"

is_addition,old_file_path,new_file_path,line_num,content
False,gson/src/test/java/com/google/gson/internal/LinkedHashTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,41,rivate static final int MAX_CAPACITY = 8192;
True,gson/src/test/java/com/google/gson/internal/LinkedHashTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,567,// TODO: don't do anything if we're already at MAX_CAPACITY
False,gson/src/test/java/com/google/gson/internal/LinkedHashTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,570,f (oldCapacity >= MAX_CAPACITY) {
False,gson/src/test/java/com/google/gson/internal/LinkedHashTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,571,eturn oldTable;
False,gson/src/test/java/com/google/gson/internal/LinkedHashTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,574,nt newCapacity = oldCapacity * 2;
False,gson/src/test/java/com/google/gson/internal/LinkedHashTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,577,"ode<K, V>[] newTable = new Node[newCapacity];"
True,gson/src/test/java/com/google/gson/internal/LinkedHashTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,570,"Node<K, V>[] newTable = new Node[oldCapacity * 2];"
False,gson/src/test/java/com/google/gson/internal/LinkedHashTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,594,f ((node.hash & (newCapacity - 1)) == i) {
True,gson/src/test/java/com/google/gson/internal/LinkedHashTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,587,if ((node.hash & oldCapacity) == 0) {
False,gson/src/test/java/com/google/gson/internal/LinkedHashTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,602,"ode<K, V> leftRoot = null;"
False,gson/src/test/java/com/google/gson/internal/LinkedHashTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,603,"ode<K, V> rightRoot = null;"
False,gson/src/test/java/com/google/gson/internal/LinkedHashTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,604,f (leftSize > 0 && rightSize > 0) {
False,gson/src/test/java/com/google/gson/internal/LinkedHashTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,605,eftBuilder.reset(leftSize);
False,gson/src/test/java/com/google/gson/internal/LinkedHashTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,606,ightBuilder.reset(rightSize);
False,gson/src/test/java/com/google/gson/internal/LinkedHashTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,607,terator.reset(root);
False,gson/src/test/java/com/google/gson/internal/LinkedHashTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,608,"or (Node<K, V> node; (node = iterator.next()) != null; ) {"
False,gson/src/test/java/com/google/gson/internal/LinkedHashTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,609,f ((node.hash & (newCapacity - 1)) == i) {
False,gson/src/test/java/com/google/gson/internal/LinkedHashTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,610,eftBuilder.add(node);
False,gson/src/test/java/com/google/gson/internal/LinkedHashTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,611, else {
False,gson/src/test/java/com/google/gson/internal/LinkedHashTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,612,ightBuilder.add(node);
True,gson/src/test/java/com/google/gson/internal/LinkedHashTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,595,leftBuilder.reset(leftSize);
True,gson/src/test/java/com/google/gson/internal/LinkedHashTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,596,rightBuilder.reset(rightSize);
True,gson/src/test/java/com/google/gson/internal/LinkedHashTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,597,iterator.reset(root);
True,gson/src/test/java/com/google/gson/internal/LinkedHashTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,598,"for (Node<K, V> node; (node = iterator.next()) != null; ) {"
True,gson/src/test/java/com/google/gson/internal/LinkedHashTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,599,if ((node.hash & oldCapacity) == 0) {
True,gson/src/test/java/com/google/gson/internal/LinkedHashTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,600,leftBuilder.add(node);
True,gson/src/test/java/com/google/gson/internal/LinkedHashTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,601,} else {
True,gson/src/test/java/com/google/gson/internal/LinkedHashTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,602,rightBuilder.add(node);
False,gson/src/test/java/com/google/gson/internal/LinkedHashTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,615,eftRoot = leftBuilder.root();
False,gson/src/test/java/com/google/gson/internal/LinkedHashTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,616,ightRoot = rightBuilder.root();
False,gson/src/test/java/com/google/gson/internal/LinkedHashTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,617, else if (leftSize > 0) {
False,gson/src/test/java/com/google/gson/internal/LinkedHashTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,618,eftRoot = root;
False,gson/src/test/java/com/google/gson/internal/LinkedHashTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,619, else {
False,gson/src/test/java/com/google/gson/internal/LinkedHashTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,620,ightRoot = root;
False,gson/src/test/java/com/google/gson/internal/LinkedHashTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,624,ewTable[i] = leftRoot;
False,gson/src/test/java/com/google/gson/internal/LinkedHashTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,625,ewTable[i + oldCapacity] = rightRoot;
True,gson/src/test/java/com/google/gson/internal/LinkedHashTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,607,newTable[i] = leftSize > 0 ? leftBuilder.root() : null;
True,gson/src/test/java/com/google/gson/internal/LinkedHashTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,608,newTable[i + oldCapacity] = rightSize > 0 ? rightBuilder.root() : null;
False,gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java,24,mport junit.framework.TestCase;
True,gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java,28,import junit.framework.TestCase;
False,gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java,107,ublic void disabled_testForceDoublingAndRehash() throws Exception {
True,gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java,105,public void testForceDoublingAndRehash() throws Exception {
True,gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java,212,public void testDoubleCapacityAllNodesOnLeft() {
True,gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java,213,"@SuppressWarnings(""unchecked"") // Arrays and generics don't get along."
True,gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java,214,"Node<String, String>[] oldTable = new Node[1];"
True,gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java,215,"oldTable[0] = node(node(""b""), ""d"", node(""f""));"
True,gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java,217,"Node<String, String>[] newTable = LinkedHashTreeMap.doubleCapacity(oldTable);"
True,gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java,218,"assertTree(""(b d f)"", newTable[0]); // Even hash codes!"
True,gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java,219,assertNull(newTable[1]); // Odd hash codes!

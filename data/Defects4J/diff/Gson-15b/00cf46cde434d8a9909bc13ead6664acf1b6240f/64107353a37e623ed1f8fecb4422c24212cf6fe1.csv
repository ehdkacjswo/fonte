is_addition,old_file_path,new_file_path,line_num,content
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,33,import java.util.concurrent.atomic.AtomicLong;
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,34,import java.util.concurrent.atomic.AtomicLongArray;
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,213,"actories.add(TypeAdapters.newFactory(long.class, Long.class,"
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,214,ongAdapter(longSerializationPolicy)));
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,215,TypeAdapter<Number> longAdapter = longAdapter(longSerializationPolicy);
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,216,"factories.add(TypeAdapters.newFactory(long.class, Long.class, longAdapter));"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,222,factories.add(TypeAdapters.ATOMIC_INTEGER_FACTORY);
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,223,factories.add(TypeAdapters.ATOMIC_BOOLEAN_FACTORY);
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,224,"factories.add(TypeAdapters.newFactory(AtomicLong.class, atomicLongAdapter(longAdapter)));"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,225,"factories.add(TypeAdapters.newFactory(AtomicLongArray.class, atomicLongArrayAdapter(longAdapter)));"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,226,factories.add(TypeAdapters.ATOMIC_INTEGER_ARRAY_FACTORY);
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,306,rivate TypeAdapter<Number> longAdapter(LongSerializationPolicy longSerializationPolicy) {
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,313,private static TypeAdapter<Number> longAdapter(LongSerializationPolicy longSerializationPolicy) {
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,335,private static TypeAdapter<AtomicLong> atomicLongAdapter(final TypeAdapter<Number> longAdapter) {
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,336,return new TypeAdapter<AtomicLong>() {
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,337,"@Override public void write(JsonWriter out, AtomicLong value) throws IOException {"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,338,"longAdapter.write(out, value.get());"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,340,@Override public AtomicLong read(JsonReader in) throws IOException {
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,341,Number value = longAdapter.read(in);
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,342,return new AtomicLong(value.longValue());
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,344,}.nullSafe();
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,347,private static TypeAdapter<AtomicLongArray> atomicLongArrayAdapter(final TypeAdapter<Number> longAdapter) {
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,348,return new TypeAdapter<AtomicLongArray>() {
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,349,"@Override public void write(JsonWriter out, AtomicLongArray value) throws IOException {"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,350,out.beginArray();
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,351,"for (int i = 0, length = value.length(); i < length; i++) {"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,352,"longAdapter.write(out, value.get(i));"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,354,out.endArray();
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,356,@Override public AtomicLongArray read(JsonReader in) throws IOException {
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,357,List<Long> list = new ArrayList<Long>();
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,358,in.beginArray();
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,359,while (in.hasNext()) {
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,360,long value = longAdapter.read(in).longValue();
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,361,list.add(value);
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,363,in.endArray();
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,364,int length = list.size();
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,365,AtomicLongArray array = new AtomicLongArray(length);
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,366,for (int i = 0; i < length; ++i) {
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,367,"array.set(i, list.get(i));"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,369,return array;
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,371,}.nullSafe();
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,19,mport com.google.gson.Gson;
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,20,mport com.google.gson.JsonArray;
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,21,mport com.google.gson.JsonElement;
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,22,mport com.google.gson.JsonIOException;
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,23,mport com.google.gson.JsonNull;
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,24,mport com.google.gson.JsonObject;
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,25,mport com.google.gson.JsonPrimitive;
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,26,mport com.google.gson.JsonSyntaxException;
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,27,mport com.google.gson.TypeAdapter;
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,28,mport com.google.gson.TypeAdapterFactory;
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,29,mport com.google.gson.annotations.SerializedName;
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,30,mport com.google.gson.internal.LazilyParsedNumber;
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,31,mport com.google.gson.reflect.TypeToken;
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,32,mport com.google.gson.stream.JsonReader;
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,33,mport com.google.gson.stream.JsonToken;
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,34,mport com.google.gson.stream.JsonWriter;
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,27,import java.util.ArrayList;
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,33,import java.util.List;
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,38,import java.util.concurrent.atomic.AtomicBoolean;
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,39,import java.util.concurrent.atomic.AtomicInteger;
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,40,import java.util.concurrent.atomic.AtomicIntegerArray;
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,42,import com.google.gson.Gson;
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,43,import com.google.gson.JsonArray;
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,44,import com.google.gson.JsonElement;
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,45,import com.google.gson.JsonIOException;
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,46,import com.google.gson.JsonNull;
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,47,import com.google.gson.JsonObject;
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,48,import com.google.gson.JsonPrimitive;
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,49,import com.google.gson.JsonSyntaxException;
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,50,import com.google.gson.TypeAdapter;
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,51,import com.google.gson.TypeAdapterFactory;
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,52,import com.google.gson.annotations.SerializedName;
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,53,import com.google.gson.internal.LazilyParsedNumber;
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,54,import com.google.gson.reflect.TypeToken;
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,55,import com.google.gson.stream.JsonReader;
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,56,import com.google.gson.stream.JsonToken;
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,57,import com.google.gson.stream.JsonWriter;
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,259,public static final TypeAdapter<AtomicInteger> ATOMIC_INTEGER = new TypeAdapter<AtomicInteger>() {
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,260,@Override public AtomicInteger read(JsonReader in) throws IOException {
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,261,try {
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,262,return new AtomicInteger(in.nextInt());
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,263,} catch (NumberFormatException e) {
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,264,throw new JsonSyntaxException(e);
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,267,"@Override public void write(JsonWriter out, AtomicInteger value) throws IOException {"
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,268,out.value(value.get());
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,270,}.nullSafe();
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,271,public static final TypeAdapterFactory ATOMIC_INTEGER_FACTORY =
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,272,"newFactory(AtomicInteger.class, TypeAdapters.ATOMIC_INTEGER);"
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,274,public static final TypeAdapter<AtomicBoolean> ATOMIC_BOOLEAN = new TypeAdapter<AtomicBoolean>() {
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,275,@Override public AtomicBoolean read(JsonReader in) throws IOException {
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,276,return new AtomicBoolean(in.nextBoolean());
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,278,"@Override public void write(JsonWriter out, AtomicBoolean value) throws IOException {"
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,279,out.value(value.get());
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,281,}.nullSafe();
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,282,public static final TypeAdapterFactory ATOMIC_BOOLEAN_FACTORY =
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,283,"newFactory(AtomicBoolean.class, TypeAdapters.ATOMIC_BOOLEAN);"
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,285,public static final TypeAdapter<AtomicIntegerArray> ATOMIC_INTEGER_ARRAY = new TypeAdapter<AtomicIntegerArray>() {
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,286,@Override public AtomicIntegerArray read(JsonReader in) throws IOException {
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,287,List<Integer> list = new ArrayList<Integer>();
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,288,in.beginArray();
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,289,while (in.hasNext()) {
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,290,try {
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,291,int integer = in.nextInt();
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,292,list.add(integer);
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,293,} catch (NumberFormatException e) {
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,294,throw new JsonSyntaxException(e);
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,297,in.endArray();
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,298,int length = list.size();
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,299,AtomicIntegerArray array = new AtomicIntegerArray(length);
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,300,for (int i = 0; i < length; ++i) {
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,301,"array.set(i, list.get(i));"
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,303,return array;
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,305,"@Override public void write(JsonWriter out, AtomicIntegerArray value) throws IOException {"
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,306,out.beginArray();
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,307,"for (int i = 0, length = value.length(); i < length; i++) {"
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,308,out.value(value.get(i));
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,310,out.endArray();
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,312,}.nullSafe();
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,313,public static final TypeAdapterFactory ATOMIC_INTEGER_ARRAY_FACTORY =
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,314,"newFactory(AtomicIntegerArray.class, TypeAdapters.ATOMIC_INTEGER_ARRAY);"
True,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,2,* Copyright (C) 2015 Google Inc.
True,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,5,* you may not use this file except in compliance with the License.
True,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,6,* You may obtain a copy of the License at
True,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,8,* http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,13,* See the License for the specific language governing permissions and
True,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,14,* limitations under the License.
True,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,17,package com.google.gson.functional;
True,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,19,import java.util.concurrent.atomic.AtomicBoolean;
True,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,20,import java.util.concurrent.atomic.AtomicInteger;
True,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,21,import java.util.concurrent.atomic.AtomicIntegerArray;
True,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,22,import java.util.concurrent.atomic.AtomicLong;
True,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,23,import java.util.concurrent.atomic.AtomicLongArray;
True,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,25,import com.google.gson.Gson;
True,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,26,import com.google.gson.GsonBuilder;
True,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,27,import com.google.gson.LongSerializationPolicy;
True,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,29,import junit.framework.TestCase;
True,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,32,* Functional test for Json serialization and deserialization for classes in java.util.concurrent.atomic
True,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,34,public class JavaUtilConcurrentLocksTest extends TestCase {
True,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,35,private Gson gson;
True,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,37,@Override
True,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,38,protected void setUp() throws Exception {
True,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,39,super.setUp();
True,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,40,gson = new Gson();
True,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,43,public void testAtomicBoolean() throws Exception {
True,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,44,"AtomicBoolean target = gson.fromJson(""true"", AtomicBoolean.class);"
True,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,45,assertTrue(target.get());
True,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,46,String json = gson.toJson(target);
True,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,47,"assertEquals(""true"", json);"
True,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,50,public void testAtomicInteger() throws Exception {
True,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,51,"AtomicInteger target = gson.fromJson(""10"", AtomicInteger.class);"
True,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,52,"assertEquals(10, target.get());"
True,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,53,String json = gson.toJson(target);
True,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,54,"assertEquals(""10"", json);"
True,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,57,public void testAtomicLong() throws Exception {
True,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,58,"AtomicLong target = gson.fromJson(""10"", AtomicLong.class);"
True,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,59,"assertEquals(10, target.get());"
True,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,60,String json = gson.toJson(target);
True,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,61,"assertEquals(""10"", json);"
True,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,64,public void testAtomicLongWithStringSerializationPolicy() throws Exception {
True,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,65,Gson gson = new GsonBuilder()
True,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,66,.setLongSerializationPolicy(LongSerializationPolicy.STRING)
True,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,67,.create();
True,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,68,"AtomicLongHolder target = gson.fromJson(""{'value':'10'}"", AtomicLongHolder.class);"
True,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,69,"assertEquals(10, target.value.get());"
True,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,70,String json = gson.toJson(target);
True,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,71,"assertEquals(""{\""value\"":\""10\""}"", json);"
True,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,74,public void testAtomicIntegerArray() throws Exception {
True,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,75,"AtomicIntegerArray target = gson.fromJson(""[10, 13, 14]"", AtomicIntegerArray.class);"
True,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,76,"assertEquals(3, target.length());"
True,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,77,"assertEquals(10, target.get(0));"
True,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,78,"assertEquals(13, target.get(1));"
True,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,79,"assertEquals(14, target.get(2));"
True,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,80,String json = gson.toJson(target);
True,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,81,"assertEquals(""[10,13,14]"", json);"
True,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,84,public void testAtomicLongArray() throws Exception {
True,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,85,"AtomicLongArray target = gson.fromJson(""[10, 13, 14]"", AtomicLongArray.class);"
True,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,86,"assertEquals(3, target.length());"
True,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,87,"assertEquals(10, target.get(0));"
True,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,88,"assertEquals(13, target.get(1));"
True,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,89,"assertEquals(14, target.get(2));"
True,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,90,String json = gson.toJson(target);
True,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,91,"assertEquals(""[10,13,14]"", json);"
True,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,94,public void testAtomicLongArrayWithStringSerializationPolicy() throws Exception {
True,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,95,Gson gson = new GsonBuilder()
True,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,96,.setLongSerializationPolicy(LongSerializationPolicy.STRING)
True,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,97,.create();
True,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,98,"AtomicLongArray target = gson.fromJson(""['10', '13', '14']"", AtomicLongArray.class);"
True,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,99,"assertEquals(3, target.length());"
True,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,100,"assertEquals(10, target.get(0));"
True,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,101,"assertEquals(13, target.get(1));"
True,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,102,"assertEquals(14, target.get(2));"
True,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,103,String json = gson.toJson(target);
True,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,104,"assertEquals(""[\""10\"",\""13\"",\""14\""]"", json);"
True,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,107,private static class AtomicLongHolder {
True,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java,108,AtomicLong value;

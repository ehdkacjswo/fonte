is_addition,old_file_path,new_file_path,line_num,content
True,codegen/src/main/java/com/google/gson/codegen/CodeGen.java,codegen/src/main/java/com/google/gson/codegen/CodeGen.java,2,"* Copyright (C) 2012 Square, Inc."
True,codegen/src/main/java/com/google/gson/codegen/CodeGen.java,codegen/src/main/java/com/google/gson/codegen/CodeGen.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,codegen/src/main/java/com/google/gson/codegen/CodeGen.java,codegen/src/main/java/com/google/gson/codegen/CodeGen.java,5,* you may not use this file except in compliance with the License.
True,codegen/src/main/java/com/google/gson/codegen/CodeGen.java,codegen/src/main/java/com/google/gson/codegen/CodeGen.java,6,* You may obtain a copy of the License at
True,codegen/src/main/java/com/google/gson/codegen/CodeGen.java,codegen/src/main/java/com/google/gson/codegen/CodeGen.java,8,* http://www.apache.org/licenses/LICENSE-2.0
True,codegen/src/main/java/com/google/gson/codegen/CodeGen.java,codegen/src/main/java/com/google/gson/codegen/CodeGen.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,codegen/src/main/java/com/google/gson/codegen/CodeGen.java,codegen/src/main/java/com/google/gson/codegen/CodeGen.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,codegen/src/main/java/com/google/gson/codegen/CodeGen.java,codegen/src/main/java/com/google/gson/codegen/CodeGen.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,codegen/src/main/java/com/google/gson/codegen/CodeGen.java,codegen/src/main/java/com/google/gson/codegen/CodeGen.java,13,* See the License for the specific language governing permissions and
True,codegen/src/main/java/com/google/gson/codegen/CodeGen.java,codegen/src/main/java/com/google/gson/codegen/CodeGen.java,14,* limitations under the License.
True,codegen/src/main/java/com/google/gson/codegen/CodeGen.java,codegen/src/main/java/com/google/gson/codegen/CodeGen.java,17,package com.google.gson.codegen;
True,codegen/src/main/java/com/google/gson/codegen/CodeGen.java,codegen/src/main/java/com/google/gson/codegen/CodeGen.java,19,import javax.lang.model.element.Element;
True,codegen/src/main/java/com/google/gson/codegen/CodeGen.java,codegen/src/main/java/com/google/gson/codegen/CodeGen.java,20,import javax.lang.model.element.ElementKind;
True,codegen/src/main/java/com/google/gson/codegen/CodeGen.java,codegen/src/main/java/com/google/gson/codegen/CodeGen.java,21,import javax.lang.model.element.PackageElement;
True,codegen/src/main/java/com/google/gson/codegen/CodeGen.java,codegen/src/main/java/com/google/gson/codegen/CodeGen.java,22,import javax.lang.model.element.TypeElement;
True,codegen/src/main/java/com/google/gson/codegen/CodeGen.java,codegen/src/main/java/com/google/gson/codegen/CodeGen.java,24,public class CodeGen {
True,codegen/src/main/java/com/google/gson/codegen/CodeGen.java,codegen/src/main/java/com/google/gson/codegen/CodeGen.java,25,private CodeGen() {
True,codegen/src/main/java/com/google/gson/codegen/CodeGen.java,codegen/src/main/java/com/google/gson/codegen/CodeGen.java,28,public static PackageElement getPackage(Element type) {
True,codegen/src/main/java/com/google/gson/codegen/CodeGen.java,codegen/src/main/java/com/google/gson/codegen/CodeGen.java,29,while (type.getKind() != ElementKind.PACKAGE) {
True,codegen/src/main/java/com/google/gson/codegen/CodeGen.java,codegen/src/main/java/com/google/gson/codegen/CodeGen.java,30,type = type.getEnclosingElement();
True,codegen/src/main/java/com/google/gson/codegen/CodeGen.java,codegen/src/main/java/com/google/gson/codegen/CodeGen.java,32,return (PackageElement) type;
True,codegen/src/main/java/com/google/gson/codegen/CodeGen.java,codegen/src/main/java/com/google/gson/codegen/CodeGen.java,36,* Returns a fully qualified class name to complement {@code type}.
True,codegen/src/main/java/com/google/gson/codegen/CodeGen.java,codegen/src/main/java/com/google/gson/codegen/CodeGen.java,38,"public static String adapterName(TypeElement typeElement, String suffix) {"
True,codegen/src/main/java/com/google/gson/codegen/CodeGen.java,codegen/src/main/java/com/google/gson/codegen/CodeGen.java,39,StringBuilder builder = new StringBuilder();
True,codegen/src/main/java/com/google/gson/codegen/CodeGen.java,codegen/src/main/java/com/google/gson/codegen/CodeGen.java,40,"rawTypeToString(builder, typeElement, '$');"
True,codegen/src/main/java/com/google/gson/codegen/CodeGen.java,codegen/src/main/java/com/google/gson/codegen/CodeGen.java,41,builder.append(suffix);
True,codegen/src/main/java/com/google/gson/codegen/CodeGen.java,codegen/src/main/java/com/google/gson/codegen/CodeGen.java,42,return builder.toString();
True,codegen/src/main/java/com/google/gson/codegen/CodeGen.java,codegen/src/main/java/com/google/gson/codegen/CodeGen.java,45,"static void rawTypeToString(StringBuilder result, TypeElement type, char innerClassSeparator) {"
True,codegen/src/main/java/com/google/gson/codegen/CodeGen.java,codegen/src/main/java/com/google/gson/codegen/CodeGen.java,46,String packageName = getPackage(type).getQualifiedName().toString();
True,codegen/src/main/java/com/google/gson/codegen/CodeGen.java,codegen/src/main/java/com/google/gson/codegen/CodeGen.java,47,String qualifiedName = type.getQualifiedName().toString();
True,codegen/src/main/java/com/google/gson/codegen/CodeGen.java,codegen/src/main/java/com/google/gson/codegen/CodeGen.java,48,result.append(packageName);
True,codegen/src/main/java/com/google/gson/codegen/CodeGen.java,codegen/src/main/java/com/google/gson/codegen/CodeGen.java,49,result.append('.');
True,codegen/src/main/java/com/google/gson/codegen/CodeGen.java,codegen/src/main/java/com/google/gson/codegen/CodeGen.java,50,result.append(
True,codegen/src/main/java/com/google/gson/codegen/CodeGen.java,codegen/src/main/java/com/google/gson/codegen/CodeGen.java,51,"qualifiedName.substring(packageName.length() + 1).replace('.', innerClassSeparator));"
True,codegen/src/main/java/com/google/gson/codegen/GeneratedTypeAdapter.java,codegen/src/main/java/com/google/gson/codegen/GeneratedTypeAdapter.java,2,* Copyright (C) 2012 Google Inc.
True,codegen/src/main/java/com/google/gson/codegen/GeneratedTypeAdapter.java,codegen/src/main/java/com/google/gson/codegen/GeneratedTypeAdapter.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,codegen/src/main/java/com/google/gson/codegen/GeneratedTypeAdapter.java,codegen/src/main/java/com/google/gson/codegen/GeneratedTypeAdapter.java,5,* you may not use this file except in compliance with the License.
True,codegen/src/main/java/com/google/gson/codegen/GeneratedTypeAdapter.java,codegen/src/main/java/com/google/gson/codegen/GeneratedTypeAdapter.java,6,* You may obtain a copy of the License at
True,codegen/src/main/java/com/google/gson/codegen/GeneratedTypeAdapter.java,codegen/src/main/java/com/google/gson/codegen/GeneratedTypeAdapter.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,codegen/src/main/java/com/google/gson/codegen/GeneratedTypeAdapter.java,codegen/src/main/java/com/google/gson/codegen/GeneratedTypeAdapter.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,codegen/src/main/java/com/google/gson/codegen/GeneratedTypeAdapter.java,codegen/src/main/java/com/google/gson/codegen/GeneratedTypeAdapter.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,codegen/src/main/java/com/google/gson/codegen/GeneratedTypeAdapter.java,codegen/src/main/java/com/google/gson/codegen/GeneratedTypeAdapter.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,codegen/src/main/java/com/google/gson/codegen/GeneratedTypeAdapter.java,codegen/src/main/java/com/google/gson/codegen/GeneratedTypeAdapter.java,13,* See the License for the specific language governing permissions and
True,codegen/src/main/java/com/google/gson/codegen/GeneratedTypeAdapter.java,codegen/src/main/java/com/google/gson/codegen/GeneratedTypeAdapter.java,14,* limitations under the License.
True,codegen/src/main/java/com/google/gson/codegen/GeneratedTypeAdapter.java,codegen/src/main/java/com/google/gson/codegen/GeneratedTypeAdapter.java,17,package com.google.gson.codegen;
True,codegen/src/main/java/com/google/gson/codegen/GeneratedTypeAdapter.java,codegen/src/main/java/com/google/gson/codegen/GeneratedTypeAdapter.java,19,public @interface GeneratedTypeAdapter {
True,codegen/src/main/java/com/google/gson/codegen/GeneratedTypeAdapter.java,codegen/src/main/java/com/google/gson/codegen/GeneratedTypeAdapter.java,20,Class<?>[] value() default {};
True,codegen/src/main/java/com/google/gson/codegen/GeneratedTypeAdapterProcessor.java,codegen/src/main/java/com/google/gson/codegen/GeneratedTypeAdapterProcessor.java,2,* Copyright (C) 2012 Google Inc.
True,codegen/src/main/java/com/google/gson/codegen/GeneratedTypeAdapterProcessor.java,codegen/src/main/java/com/google/gson/codegen/GeneratedTypeAdapterProcessor.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,codegen/src/main/java/com/google/gson/codegen/GeneratedTypeAdapterProcessor.java,codegen/src/main/java/com/google/gson/codegen/GeneratedTypeAdapterProcessor.java,5,* you may not use this file except in compliance with the License.
True,codegen/src/main/java/com/google/gson/codegen/GeneratedTypeAdapterProcessor.java,codegen/src/main/java/com/google/gson/codegen/GeneratedTypeAdapterProcessor.java,6,* You may obtain a copy of the License at
True,codegen/src/main/java/com/google/gson/codegen/GeneratedTypeAdapterProcessor.java,codegen/src/main/java/com/google/gson/codegen/GeneratedTypeAdapterProcessor.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,codegen/src/main/java/com/google/gson/codegen/GeneratedTypeAdapterProcessor.java,codegen/src/main/java/com/google/gson/codegen/GeneratedTypeAdapterProcessor.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,codegen/src/main/java/com/google/gson/codegen/GeneratedTypeAdapterProcessor.java,codegen/src/main/java/com/google/gson/codegen/GeneratedTypeAdapterProcessor.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,codegen/src/main/java/com/google/gson/codegen/GeneratedTypeAdapterProcessor.java,codegen/src/main/java/com/google/gson/codegen/GeneratedTypeAdapterProcessor.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,codegen/src/main/java/com/google/gson/codegen/GeneratedTypeAdapterProcessor.java,codegen/src/main/java/com/google/gson/codegen/GeneratedTypeAdapterProcessor.java,13,* See the License for the specific language governing permissions and
True,codegen/src/main/java/com/google/gson/codegen/GeneratedTypeAdapterProcessor.java,codegen/src/main/java/com/google/gson/codegen/GeneratedTypeAdapterProcessor.java,14,* limitations under the License.
True,codegen/src/main/java/com/google/gson/codegen/GeneratedTypeAdapterProcessor.java,codegen/src/main/java/com/google/gson/codegen/GeneratedTypeAdapterProcessor.java,17,package com.google.gson.codegen;
True,codegen/src/main/java/com/google/gson/codegen/GeneratedTypeAdapterProcessor.java,codegen/src/main/java/com/google/gson/codegen/GeneratedTypeAdapterProcessor.java,19,import static java.lang.reflect.Modifier.FINAL;
True,codegen/src/main/java/com/google/gson/codegen/GeneratedTypeAdapterProcessor.java,codegen/src/main/java/com/google/gson/codegen/GeneratedTypeAdapterProcessor.java,21,import java.io.IOException;
True,codegen/src/main/java/com/google/gson/codegen/GeneratedTypeAdapterProcessor.java,codegen/src/main/java/com/google/gson/codegen/GeneratedTypeAdapterProcessor.java,22,import java.util.Set;
True,codegen/src/main/java/com/google/gson/codegen/GeneratedTypeAdapterProcessor.java,codegen/src/main/java/com/google/gson/codegen/GeneratedTypeAdapterProcessor.java,24,import javax.annotation.processing.AbstractProcessor;
True,codegen/src/main/java/com/google/gson/codegen/GeneratedTypeAdapterProcessor.java,codegen/src/main/java/com/google/gson/codegen/GeneratedTypeAdapterProcessor.java,25,import javax.annotation.processing.RoundEnvironment;
True,codegen/src/main/java/com/google/gson/codegen/GeneratedTypeAdapterProcessor.java,codegen/src/main/java/com/google/gson/codegen/GeneratedTypeAdapterProcessor.java,26,import javax.annotation.processing.SupportedAnnotationTypes;
True,codegen/src/main/java/com/google/gson/codegen/GeneratedTypeAdapterProcessor.java,codegen/src/main/java/com/google/gson/codegen/GeneratedTypeAdapterProcessor.java,27,import javax.annotation.processing.SupportedSourceVersion;
True,codegen/src/main/java/com/google/gson/codegen/GeneratedTypeAdapterProcessor.java,codegen/src/main/java/com/google/gson/codegen/GeneratedTypeAdapterProcessor.java,28,import javax.lang.model.SourceVersion;
True,codegen/src/main/java/com/google/gson/codegen/GeneratedTypeAdapterProcessor.java,codegen/src/main/java/com/google/gson/codegen/GeneratedTypeAdapterProcessor.java,29,import javax.lang.model.element.Element;
True,codegen/src/main/java/com/google/gson/codegen/GeneratedTypeAdapterProcessor.java,codegen/src/main/java/com/google/gson/codegen/GeneratedTypeAdapterProcessor.java,30,import javax.lang.model.element.TypeElement;
True,codegen/src/main/java/com/google/gson/codegen/GeneratedTypeAdapterProcessor.java,codegen/src/main/java/com/google/gson/codegen/GeneratedTypeAdapterProcessor.java,31,import javax.tools.Diagnostic;
True,codegen/src/main/java/com/google/gson/codegen/GeneratedTypeAdapterProcessor.java,codegen/src/main/java/com/google/gson/codegen/GeneratedTypeAdapterProcessor.java,32,import javax.tools.JavaFileObject;
True,codegen/src/main/java/com/google/gson/codegen/GeneratedTypeAdapterProcessor.java,codegen/src/main/java/com/google/gson/codegen/GeneratedTypeAdapterProcessor.java,34,"@SupportedAnnotationTypes(""com.google.gson.codegen.GeneratedTypeAdapter"")"
True,codegen/src/main/java/com/google/gson/codegen/GeneratedTypeAdapterProcessor.java,codegen/src/main/java/com/google/gson/codegen/GeneratedTypeAdapterProcessor.java,35,@SupportedSourceVersion(SourceVersion.RELEASE_6)
True,codegen/src/main/java/com/google/gson/codegen/GeneratedTypeAdapterProcessor.java,codegen/src/main/java/com/google/gson/codegen/GeneratedTypeAdapterProcessor.java,36,public final class GeneratedTypeAdapterProcessor extends AbstractProcessor {
True,codegen/src/main/java/com/google/gson/codegen/GeneratedTypeAdapterProcessor.java,codegen/src/main/java/com/google/gson/codegen/GeneratedTypeAdapterProcessor.java,37,"@Override public boolean process(Set<? extends TypeElement> types, RoundEnvironment env) {"
True,codegen/src/main/java/com/google/gson/codegen/GeneratedTypeAdapterProcessor.java,codegen/src/main/java/com/google/gson/codegen/GeneratedTypeAdapterProcessor.java,38,"System.out.println(""invoked GeneratedTypeAdapterProcessor"");"
True,codegen/src/main/java/com/google/gson/codegen/GeneratedTypeAdapterProcessor.java,codegen/src/main/java/com/google/gson/codegen/GeneratedTypeAdapterProcessor.java,39,try {
True,codegen/src/main/java/com/google/gson/codegen/GeneratedTypeAdapterProcessor.java,codegen/src/main/java/com/google/gson/codegen/GeneratedTypeAdapterProcessor.java,40,for (Element element : env.getElementsAnnotatedWith(GeneratedTypeAdapter.class)) {
True,codegen/src/main/java/com/google/gson/codegen/GeneratedTypeAdapterProcessor.java,codegen/src/main/java/com/google/gson/codegen/GeneratedTypeAdapterProcessor.java,41,writeAdapter((TypeElement) element);
True,codegen/src/main/java/com/google/gson/codegen/GeneratedTypeAdapterProcessor.java,codegen/src/main/java/com/google/gson/codegen/GeneratedTypeAdapterProcessor.java,43,} catch (IOException e) {
True,codegen/src/main/java/com/google/gson/codegen/GeneratedTypeAdapterProcessor.java,codegen/src/main/java/com/google/gson/codegen/GeneratedTypeAdapterProcessor.java,44,"processingEnv.getMessager().printMessage(Diagnostic.Kind.ERROR, e.getMessage());"
True,codegen/src/main/java/com/google/gson/codegen/GeneratedTypeAdapterProcessor.java,codegen/src/main/java/com/google/gson/codegen/GeneratedTypeAdapterProcessor.java,46,return true;
True,codegen/src/main/java/com/google/gson/codegen/GeneratedTypeAdapterProcessor.java,codegen/src/main/java/com/google/gson/codegen/GeneratedTypeAdapterProcessor.java,49,private void writeAdapter(TypeElement type) throws IOException {
True,codegen/src/main/java/com/google/gson/codegen/GeneratedTypeAdapterProcessor.java,codegen/src/main/java/com/google/gson/codegen/GeneratedTypeAdapterProcessor.java,50,"String typeAdapterName = CodeGen.adapterName(type, ""$TypeAdapter"");"
True,codegen/src/main/java/com/google/gson/codegen/GeneratedTypeAdapterProcessor.java,codegen/src/main/java/com/google/gson/codegen/GeneratedTypeAdapterProcessor.java,51,JavaFileObject sourceFile = processingEnv.getFiler()
True,codegen/src/main/java/com/google/gson/codegen/GeneratedTypeAdapterProcessor.java,codegen/src/main/java/com/google/gson/codegen/GeneratedTypeAdapterProcessor.java,52,".createSourceFile(typeAdapterName, type);"
True,codegen/src/main/java/com/google/gson/codegen/GeneratedTypeAdapterProcessor.java,codegen/src/main/java/com/google/gson/codegen/GeneratedTypeAdapterProcessor.java,53,"System.out.println(""Generating type adapter: "" + typeAdapterName + "" in "" + sourceFile.getName());"
True,codegen/src/main/java/com/google/gson/codegen/GeneratedTypeAdapterProcessor.java,codegen/src/main/java/com/google/gson/codegen/GeneratedTypeAdapterProcessor.java,55,JavaWriter writer = new JavaWriter(sourceFile.openWriter());
True,codegen/src/main/java/com/google/gson/codegen/GeneratedTypeAdapterProcessor.java,codegen/src/main/java/com/google/gson/codegen/GeneratedTypeAdapterProcessor.java,56,writer.addPackage(CodeGen.getPackage(type).getQualifiedName().toString());
True,codegen/src/main/java/com/google/gson/codegen/GeneratedTypeAdapterProcessor.java,codegen/src/main/java/com/google/gson/codegen/GeneratedTypeAdapterProcessor.java,57,"writer.beginType(typeAdapterName, ""class"", FINAL, null);"
True,codegen/src/main/java/com/google/gson/codegen/GeneratedTypeAdapterProcessor.java,codegen/src/main/java/com/google/gson/codegen/GeneratedTypeAdapterProcessor.java,58,writer.endType();
True,codegen/src/main/java/com/google/gson/codegen/GeneratedTypeAdapterProcessor.java,codegen/src/main/java/com/google/gson/codegen/GeneratedTypeAdapterProcessor.java,59,writer.close();
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,2,"* Copyright (C) 2012 Square, Inc."
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,5,* you may not use this file except in compliance with the License.
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,6,* You may obtain a copy of the License at
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,8,* http://www.apache.org/licenses/LICENSE-2.0
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,13,* See the License for the specific language governing permissions and
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,14,* limitations under the License.
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,17,package com.google.gson.codegen;
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,19,import java.io.IOException;
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,20,import java.io.Writer;
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,21,import java.lang.annotation.Annotation;
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,22,import java.lang.reflect.Modifier;
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,23,import java.util.ArrayList;
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,24,import java.util.HashMap;
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,25,import java.util.List;
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,26,import java.util.Map;
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,27,import java.util.regex.Matcher;
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,28,import java.util.regex.Pattern;
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,31,* Emits Java source files.
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,33,public final class JavaWriter {
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,34,"private static final Pattern TYPE_PATTERN = Pattern.compile(""(?:[\\w$]+\\.)*([\\w$]+)"");"
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,35,"private static final String INDENT = ""  "";"
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,37,/** Map fully qualified type names to their short names. */
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,38,"private final Map<String, String> importedTypes = new HashMap<String, String>();"
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,40,private String packagePrefix;
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,41,private final List<Scope> scopes = new ArrayList<Scope>();
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,42,private final Writer out;
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,45,* @param out the stream to which Java source will be written. This should be
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,46,*     a buffered stream.
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,48,public JavaWriter(Writer out) {
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,49,this.out = out;
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,53,* Emit a package declaration.
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,55,public void addPackage(String packageName) throws IOException {
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,56,if (this.packagePrefix != null) {
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,57,throw new IllegalStateException();
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,59,"out.write(""package "");"
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,60,out.write(packageName);
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,61,"out.write("";\n"");"
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,62,"this.packagePrefix = packageName + ""."";"
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,66,* Equivalent to {@code addImport(type.getName())}.
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,68,public void addImport(Class<?> type) throws IOException {
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,69,addImport(type.getName());
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,73,"* Emit an import for {@code type}. For the duration of the file, all"
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,74,* references to this class will be automatically shortened.
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,76,public void addImport(String type) throws IOException {
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,77,Matcher matcher = TYPE_PATTERN.matcher(type);
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,78,if (!matcher.matches()) {
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,79,throw new IllegalArgumentException(type);
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,81,"if (importedTypes.put(type, matcher.group(1)) != null) {"
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,82,throw new IllegalArgumentException(type);
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,84,"out.write(""import "");"
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,85,out.write(type);
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,86,"out.write("";\n"");"
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,90,* Emits a name like {@code java.lang.String} or {@code
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,91,"* java.util.List<java.lang.String>}, shorting it with imports if"
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,92,* possible.
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,94,private void type(String type) throws IOException {
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,95,if (this.packagePrefix == null) {
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,96,throw new IllegalStateException();
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,99,Matcher m = TYPE_PATTERN.matcher(type);
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,100,int pos = 0;
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,101,while (true) {
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,102,boolean found = m.find(pos);
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,104,"// copy non-matching characters like ""<"""
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,105,int typeStart = found ? m.start() : type.length();
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,106,"out.write(type, pos, typeStart - pos);"
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,108,if (!found) {
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,109,break;
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,112,"// copy a single class name, shortening it if possible"
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,113,String name = m.group(0);
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,114,String imported;
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,115,if ((imported = importedTypes.get(name)) != null) {
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,116,out.write(imported);
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,117,} else if (name.startsWith(packagePrefix)
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,118,"&& name.indexOf('.', packagePrefix.length()) == -1) {"
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,119,out.write(name.substring(packagePrefix.length()));
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,120,"} else if (name.startsWith(""java.lang."")) {"
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,121,"out.write(name.substring(""java.lang."".length()));"
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,122,} else {
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,123,out.write(name);
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,125,pos = m.end();
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,130,* Emits a type declaration.
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,132,"* @param kind such as ""class"", ""interface"" or ""enum""."
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,134,"public void beginType(String type, String kind, int modifiers) throws IOException {"
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,135,"beginType(type, kind, modifiers, null);"
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,139,* Emits a type declaration.
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,141,"* @param kind such as ""class"", ""interface"" or ""enum""."
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,142,"* @param extendsType the class to extend, or null for no extends clause."
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,144,"public void beginType(String type, String kind, int modifiers,"
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,145,"String extendsType, String... implementsTypes) throws IOException {"
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,146,indent();
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,147,modifiers(modifiers);
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,148,out.write(kind);
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,149,"out.write("" "");"
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,150,type(type);
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,151,if (extendsType != null) {
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,152,"out.write(""\n"");"
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,153,indent();
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,154,"out.write(""    extends "");"
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,155,type(extendsType);
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,157,if (implementsTypes.length > 0) {
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,158,"out.write(""\n"");"
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,159,indent();
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,160,"out.write(""    implements "");"
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,161,for (int i = 0; i < implementsTypes.length; i++) {
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,162,if (i != 0) {
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,163,"out.write("", "");"
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,165,type(implementsTypes[i]);
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,168,"out.write("" {\n"");"
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,169,pushScope(Scope.TYPE_DECLARATION);
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,173,* Completes the current type declaration.
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,175,public void endType() throws IOException {
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,176,if (popScope() != Scope.TYPE_DECLARATION) {
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,177,throw new IllegalStateException();
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,179,indent();
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,180,"out.write(""}\n"");"
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,184,* Emits a field declaration.
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,186,"public void field(String type, String name, int modifiers) throws IOException {"
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,187,"field(type, name, modifiers, null);"
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,190,"public void field(String type, String name, int modifiers, String initialValue)"
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,191,throws IOException {
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,192,indent();
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,193,modifiers(modifiers);
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,194,type(type);
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,195,"out.write("" "");"
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,196,out.write(name);
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,198,if (initialValue != null) {
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,199,"out.write("" = "");"
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,200,out.write(initialValue);
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,202,"out.write("";\n"");"
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,206,* Emit a method declaration.
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,208,"* @param returnType the method's return type, or null for constructors."
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,209,* @param parameters alternating parameter types and names.
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,210,"* @param name the method name, or the fully qualified class name for"
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,211,*     constructors.
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,213,"public void beginMethod(String returnType, String name, int modifiers, String... parameters)"
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,214,throws IOException {
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,215,indent();
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,216,modifiers(modifiers);
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,217,if (returnType != null) {
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,218,type(returnType);
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,219,"out.write("" "");"
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,220,out.write(name);
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,221,} else {
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,222,type(name);
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,224,"out.write(""("");"
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,225,for (int p = 0; p < parameters.length; ) {
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,226,if (p != 0) {
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,227,"out.write("", "");"
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,229,type(parameters[p++]);
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,230,"out.write("" "");"
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,231,type(parameters[p++]);
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,233,"out.write("")"");"
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,234,if ((modifiers & Modifier.ABSTRACT) != 0) {
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,235,"out.write("";\n"");"
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,236,pushScope(Scope.ABSTRACT_METHOD);
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,237,} else {
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,238,"out.write("" {\n"");"
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,239,pushScope(Scope.NON_ABSTRACT_METHOD);
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,244,* Annotates the next element with {@code annotation}. The annotation has no
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,245,* attributes.
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,247,public void annotation(String annotation) throws IOException {
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,248,indent();
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,249,"out.write(""@"");"
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,250,type(annotation);
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,251,"out.write(""\n"");"
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,255,* Equivalent to {@code annotation(annotationType.getName())}.
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,257,public void annotation(Class<? extends Annotation> annotationType) throws IOException {
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,258,annotation(annotationType.getName());
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,262,"* @param pattern a code pattern like ""int i = %s"". Shouldn't contain a"
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,263,* trailing semicolon or newline character.
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,265,"public void statement(String pattern, Object... args) throws IOException {"
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,266,checkInMethod();
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,267,indent();
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,268,"out.write(String.format(pattern, args));"
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,269,"out.write("";\n"");"
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,273,"* @param controlFlow the control flow construct and its code, such as"
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,274,"*     ""if (foo == 5)"". Shouldn't contain braces or newline characters."
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,276,public void beginControlFlow(String controlFlow) throws IOException {
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,277,checkInMethod();
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,278,indent();
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,279,out.write(controlFlow);
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,280,"out.write("" {\n"");"
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,281,pushScope(Scope.CONTROL_FLOW);
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,285,"* @param controlFlow the control flow construct and its code, such as"
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,286,"*     ""else if (foo == 10)"". Shouldn't contain braces or newline characters."
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,288,public void nextControlFlow(String controlFlow) throws IOException {
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,289,if (popScope() != Scope.CONTROL_FLOW) {
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,290,throw new IllegalArgumentException();
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,293,indent();
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,294,pushScope(Scope.CONTROL_FLOW);
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,295,"out.write(""} "");"
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,296,out.write(controlFlow);
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,297,"out.write("" {\n"");"
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,300,public void endControlFlow() throws IOException {
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,301,endControlFlow(null);
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,305,"* @param controlFlow the optional control flow construct and its code, such"
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,306,"*     as ""while(foo == 20)"". Only used for ""do/while"" control flows."
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,308,public void endControlFlow(String controlFlow) throws IOException {
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,309,if (popScope() != Scope.CONTROL_FLOW) {
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,310,throw new IllegalArgumentException();
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,313,indent();
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,314,if (controlFlow != null) {
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,315,"out.write(""} "");"
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,316,out.write(controlFlow);
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,317,"out.write("";\n"");"
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,318,} else {
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,319,"out.write(""}\n"");"
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,324,* Completes the current method declaration.
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,326,public void endMethod() throws IOException {
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,327,Scope popped = popScope();
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,328,if (popped == Scope.NON_ABSTRACT_METHOD) {
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,329,indent();
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,330,"out.write(""}\n"");"
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,331,} else if (popped != Scope.ABSTRACT_METHOD) {
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,332,throw new IllegalStateException();
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,337,"* Returns the string literal representing {@code data}, including wrapping"
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,338,* quotes.
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,340,public static String stringLiteral(String data) {
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,341,StringBuilder result = new StringBuilder();
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,342,"result.append('""');"
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,343,for (int i = 0; i < data.length(); i++) {
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,344,char c = data.charAt(i);
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,345,switch (c) {
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,346,"case '""':"
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,347,"result.append(""\\\"""");"
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,348,break;
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,349,case '\\':
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,350,"result.append(""\\\\"");"
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,351,break;
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,352,case '\t':
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,353,"result.append(""\\\t"");"
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,354,break;
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,355,case '\b':
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,356,"result.append(""\\\b"");"
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,357,break;
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,358,case '\n':
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,359,"result.append(""\\\n"");"
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,360,break;
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,361,case '\r':
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,362,"result.append(""\\\r"");"
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,363,break;
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,364,case '\f':
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,365,"result.append(""\\\f"");"
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,366,break;
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,367,default:
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,368,result.append(c);
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,371,"result.append('""');"
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,372,return result.toString();
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,375,public void close() throws IOException {
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,376,out.close();
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,380,* Emit modifier names.
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,382,private void modifiers(int modifiers) throws IOException {
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,383,if ((modifiers & Modifier.PUBLIC) != 0) {
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,384,"out.write(""public "");"
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,386,if ((modifiers & Modifier.PRIVATE) != 0) {
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,387,"out.write(""private "");"
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,389,if ((modifiers & Modifier.PROTECTED) != 0) {
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,390,"out.write(""protected "");"
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,392,if ((modifiers & Modifier.STATIC) != 0) {
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,393,"out.write(""static "");"
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,395,if ((modifiers & Modifier.FINAL) != 0) {
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,396,"out.write(""final "");"
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,398,if ((modifiers & Modifier.ABSTRACT) != 0) {
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,399,"out.write(""abstract "");"
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,401,if ((modifiers & Modifier.SYNCHRONIZED) != 0) {
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,402,"out.write(""synchronized "");"
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,404,if ((modifiers & Modifier.TRANSIENT) != 0) {
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,405,"out.write(""transient "");"
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,407,if ((modifiers & Modifier.VOLATILE) != 0) {
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,408,"out.write(""volatile "");"
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,412,private void indent() throws IOException {
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,413,for (int i = 0; i < scopes.size(); i++) {
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,414,out.write(INDENT);
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,418,private void checkInMethod() {
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,419,Scope scope = peekScope();
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,420,if (scope != Scope.NON_ABSTRACT_METHOD && scope != Scope.CONTROL_FLOW) {
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,421,throw new IllegalArgumentException();
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,425,private void pushScope(Scope pushed) {
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,426,scopes.add(pushed);
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,429,private Scope peekScope() {
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,430,return scopes.get(scopes.size() - 1);
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,433,private Scope popScope() {
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,434,return scopes.remove(scopes.size() - 1);
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,437,private enum Scope {
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,438,"TYPE_DECLARATION,"
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,439,"ABSTRACT_METHOD,"
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,440,"NON_ABSTRACT_METHOD,"
True,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,codegen/src/main/java/com/google/gson/codegen/JavaWriter.java,441,"CONTROL_FLOW,"
True,codegen/src/test/java/com/google/gson/codegen/functional/CodeGenFunctionalTest.java,codegen/src/test/java/com/google/gson/codegen/functional/CodeGenFunctionalTest.java,2,* Copyright (C) 2012 Gson Authors.
True,codegen/src/test/java/com/google/gson/codegen/functional/CodeGenFunctionalTest.java,codegen/src/test/java/com/google/gson/codegen/functional/CodeGenFunctionalTest.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,codegen/src/test/java/com/google/gson/codegen/functional/CodeGenFunctionalTest.java,codegen/src/test/java/com/google/gson/codegen/functional/CodeGenFunctionalTest.java,5,* you may not use this file except in compliance with the License.
True,codegen/src/test/java/com/google/gson/codegen/functional/CodeGenFunctionalTest.java,codegen/src/test/java/com/google/gson/codegen/functional/CodeGenFunctionalTest.java,6,* You may obtain a copy of the License at
True,codegen/src/test/java/com/google/gson/codegen/functional/CodeGenFunctionalTest.java,codegen/src/test/java/com/google/gson/codegen/functional/CodeGenFunctionalTest.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,codegen/src/test/java/com/google/gson/codegen/functional/CodeGenFunctionalTest.java,codegen/src/test/java/com/google/gson/codegen/functional/CodeGenFunctionalTest.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,codegen/src/test/java/com/google/gson/codegen/functional/CodeGenFunctionalTest.java,codegen/src/test/java/com/google/gson/codegen/functional/CodeGenFunctionalTest.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,codegen/src/test/java/com/google/gson/codegen/functional/CodeGenFunctionalTest.java,codegen/src/test/java/com/google/gson/codegen/functional/CodeGenFunctionalTest.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,codegen/src/test/java/com/google/gson/codegen/functional/CodeGenFunctionalTest.java,codegen/src/test/java/com/google/gson/codegen/functional/CodeGenFunctionalTest.java,13,* See the License for the specific language governing permissions and
True,codegen/src/test/java/com/google/gson/codegen/functional/CodeGenFunctionalTest.java,codegen/src/test/java/com/google/gson/codegen/functional/CodeGenFunctionalTest.java,14,* limitations under the License.
True,codegen/src/test/java/com/google/gson/codegen/functional/CodeGenFunctionalTest.java,codegen/src/test/java/com/google/gson/codegen/functional/CodeGenFunctionalTest.java,16,package com.google.gson.codegen.functional;
True,codegen/src/test/java/com/google/gson/codegen/functional/CodeGenFunctionalTest.java,codegen/src/test/java/com/google/gson/codegen/functional/CodeGenFunctionalTest.java,18,import junit.framework.TestCase;
True,codegen/src/test/java/com/google/gson/codegen/functional/CodeGenFunctionalTest.java,codegen/src/test/java/com/google/gson/codegen/functional/CodeGenFunctionalTest.java,20,public class CodeGenFunctionalTest extends TestCase {
True,codegen/src/test/java/com/google/gson/codegen/functional/CodeGenFunctionalTest.java,codegen/src/test/java/com/google/gson/codegen/functional/CodeGenFunctionalTest.java,22,public void testGeneratedJson() {
True,codegen/src/test/java/com/google/gson/codegen/functional/CodeGenFunctionalTest.java,codegen/src/test/java/com/google/gson/codegen/functional/CodeGenFunctionalTest.java,23,"Order order = new Order(""toy"", 10);"
True,codegen/src/test/java/com/google/gson/codegen/functional/CodeGenFunctionalTest.java,codegen/src/test/java/com/google/gson/codegen/functional/CodeGenFunctionalTest.java,24,// TODO: figure out how to access the generated type adapter
True,codegen/src/test/java/com/google/gson/codegen/functional/Order.java,codegen/src/test/java/com/google/gson/codegen/functional/Order.java,2,* Copyright (C) 2012 Gson Authors.
True,codegen/src/test/java/com/google/gson/codegen/functional/Order.java,codegen/src/test/java/com/google/gson/codegen/functional/Order.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,codegen/src/test/java/com/google/gson/codegen/functional/Order.java,codegen/src/test/java/com/google/gson/codegen/functional/Order.java,5,* you may not use this file except in compliance with the License.
True,codegen/src/test/java/com/google/gson/codegen/functional/Order.java,codegen/src/test/java/com/google/gson/codegen/functional/Order.java,6,* You may obtain a copy of the License at
True,codegen/src/test/java/com/google/gson/codegen/functional/Order.java,codegen/src/test/java/com/google/gson/codegen/functional/Order.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,codegen/src/test/java/com/google/gson/codegen/functional/Order.java,codegen/src/test/java/com/google/gson/codegen/functional/Order.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,codegen/src/test/java/com/google/gson/codegen/functional/Order.java,codegen/src/test/java/com/google/gson/codegen/functional/Order.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,codegen/src/test/java/com/google/gson/codegen/functional/Order.java,codegen/src/test/java/com/google/gson/codegen/functional/Order.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,codegen/src/test/java/com/google/gson/codegen/functional/Order.java,codegen/src/test/java/com/google/gson/codegen/functional/Order.java,13,* See the License for the specific language governing permissions and
True,codegen/src/test/java/com/google/gson/codegen/functional/Order.java,codegen/src/test/java/com/google/gson/codegen/functional/Order.java,14,* limitations under the License.
True,codegen/src/test/java/com/google/gson/codegen/functional/Order.java,codegen/src/test/java/com/google/gson/codegen/functional/Order.java,16,package com.google.gson.codegen.functional;
True,codegen/src/test/java/com/google/gson/codegen/functional/Order.java,codegen/src/test/java/com/google/gson/codegen/functional/Order.java,18,import com.google.gson.codegen.GeneratedTypeAdapter;
True,codegen/src/test/java/com/google/gson/codegen/functional/Order.java,codegen/src/test/java/com/google/gson/codegen/functional/Order.java,20,@GeneratedTypeAdapter
True,codegen/src/test/java/com/google/gson/codegen/functional/Order.java,codegen/src/test/java/com/google/gson/codegen/functional/Order.java,21,final class Order {
True,codegen/src/test/java/com/google/gson/codegen/functional/Order.java,codegen/src/test/java/com/google/gson/codegen/functional/Order.java,22,private final String itemName;
True,codegen/src/test/java/com/google/gson/codegen/functional/Order.java,codegen/src/test/java/com/google/gson/codegen/functional/Order.java,23,private final int price;
True,codegen/src/test/java/com/google/gson/codegen/functional/Order.java,codegen/src/test/java/com/google/gson/codegen/functional/Order.java,25,"public Order(String itemName, int price) {"
True,codegen/src/test/java/com/google/gson/codegen/functional/Order.java,codegen/src/test/java/com/google/gson/codegen/functional/Order.java,26,this.itemName = itemName;
True,codegen/src/test/java/com/google/gson/codegen/functional/Order.java,codegen/src/test/java/com/google/gson/codegen/functional/Order.java,27,this.price = price;
True,codegen/src/test/java/com/google/gson/codegen/functional/Order.java,codegen/src/test/java/com/google/gson/codegen/functional/Order.java,30,public String getItemName() {
True,codegen/src/test/java/com/google/gson/codegen/functional/Order.java,codegen/src/test/java/com/google/gson/codegen/functional/Order.java,31,return itemName;
True,codegen/src/test/java/com/google/gson/codegen/functional/Order.java,codegen/src/test/java/com/google/gson/codegen/functional/Order.java,34,public int getAmount() {
True,codegen/src/test/java/com/google/gson/codegen/functional/Order.java,codegen/src/test/java/com/google/gson/codegen/functional/Order.java,35,return price;

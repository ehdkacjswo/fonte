is_addition,old_file_path,new_file_path,line_num,content
True,gson/src/main/java/com/google/gson/internal/bind/JsonElementReader.java,gson/src/main/java/com/google/gson/internal/bind/JsonElementReader.java,219,public void promoteNameToValue() throws IOException {
True,gson/src/main/java/com/google/gson/internal/bind/JsonElementReader.java,gson/src/main/java/com/google/gson/internal/bind/JsonElementReader.java,220,expect(JsonToken.NAME);
True,gson/src/main/java/com/google/gson/internal/bind/JsonElementReader.java,gson/src/main/java/com/google/gson/internal/bind/JsonElementReader.java,221,Iterator<?> i = (Iterator<?>) peekStack();
True,gson/src/main/java/com/google/gson/internal/bind/JsonElementReader.java,gson/src/main/java/com/google/gson/internal/bind/JsonElementReader.java,222,"Map.Entry<?, ?> entry = (Map.Entry<?, ?>) i.next();"
True,gson/src/main/java/com/google/gson/internal/bind/JsonElementReader.java,gson/src/main/java/com/google/gson/internal/bind/JsonElementReader.java,223,stack.add(entry.getValue());
True,gson/src/main/java/com/google/gson/internal/bind/JsonElementReader.java,gson/src/main/java/com/google/gson/internal/bind/JsonElementReader.java,224,stack.add(new JsonPrimitive((String)entry.getKey()));
False,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,19,mport com.google.gson.internal.JsonReaderInternalAccess;
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,26,import com.google.gson.internal.JsonReaderInternalAccess;
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,27,import com.google.gson.internal.bind.JsonElementReader;
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,1245,if (reader instanceof JsonElementReader) {
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,1246,((JsonElementReader)reader).promoteNameToValue();
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,1247,return;
False,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,1245,"hrow new IllegalStateException(""Expected a name but was "" + reader.peek());"
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,1251,"throw new IllegalStateException(""Expected a name but was "" + reader.peek() + "" """
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,1252,+ reader.getSnippet());
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,19,import java.lang.reflect.Type;
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,20,import java.util.Collection;
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,21,import java.util.HashMap;
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,22,import java.util.LinkedHashMap;
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,23,import java.util.Map;
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,24,import java.util.TreeMap;
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,26,import junit.framework.TestCase;
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,34,import com.google.gson.JsonParser;
False,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,32,mport java.lang.reflect.Type;
False,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,33,mport java.util.Collection;
False,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,34,mport java.util.HashMap;
False,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,35,mport java.util.LinkedHashMap;
False,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,36,mport java.util.Map;
False,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,37,mport java.util.TreeMap;
False,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,38,mport junit.framework.TestCase;
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,494,public void testMapNamePromotionWithJsonElementReader() {
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,495,"String json = ""{'2.3':'a'}"";"
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,496,"Map<Double, String> map = new LinkedHashMap<Double, String>();"
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,497,"map.put(2.3, ""a"");"
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,498,JsonElement tree = new JsonParser().parse(json);
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,499,"assertEquals(map, gson.fromJson(tree, new TypeToken<Map<Double, String>>() {}.getType()));"

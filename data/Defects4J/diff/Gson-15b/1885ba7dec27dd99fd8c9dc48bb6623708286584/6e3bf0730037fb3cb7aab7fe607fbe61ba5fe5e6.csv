is_addition,old_file_path,new_file_path,line_num,content
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,215,factory(TypeAdapters.DOUBLE_FACTORY)
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,215,".factory(TypeAdapters.newFactory(double.class, Double.class,"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,216,doubleAdapter(serializeSpecialFloatingPointValues)))
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,217,".factory(TypeAdapters.newFactory(float.class, Float.class,"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,218,floatAdapter(serializeSpecialFloatingPointValues)))
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,231,private TypeAdapter<Double> doubleAdapter(boolean serializeSpecialFloatingPointValues) {
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,232,if (serializeSpecialFloatingPointValues) {
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,233,return TypeAdapters.DOUBLE;
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,235,return new TypeAdapter<Double>() {
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,236,@Override public Double read(JsonReader reader) throws IOException {
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,237,return reader.nextDouble();
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,239,"@Override public void write(JsonWriter writer, Double value) throws IOException {"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,240,checkValidFloatingPoint(value);
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,241,writer.value(value);
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,246,private TypeAdapter<Float> floatAdapter(boolean serializeSpecialFloatingPointValues) {
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,247,if (serializeSpecialFloatingPointValues) {
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,248,return TypeAdapters.FLOAT;
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,250,return new TypeAdapter<Float>() {
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,251,@Override public Float read(JsonReader reader) throws IOException {
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,252,return (float) reader.nextDouble();
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,254,"@Override public void write(JsonWriter writer, Float value) throws IOException {"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,255,checkValidFloatingPoint(value);
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,256,writer.value(value);
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,261,private void checkValidFloatingPoint(double value) {
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,262,if (Double.isNaN(value) || Double.isInfinite(value)) {
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,263,throw new IllegalArgumentException(value
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,264,"+ "" is not a valid double value as per JSON specification. To override this"""
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,265,"+ "" behavior, use GsonBuilder.serializeSpecialDoubleValues() method."");"
True,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,gson/src/main/java/com/google/gson/internal/bind/MiniGson.java,56,factories.add(TypeAdapters.FLOAT_FACTORY);
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,78,public static final TypeAdapter<Float> FLOAT = new TypeAdapter<Float>() {
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,79,public Float read(JsonReader reader) throws IOException {
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,80,return (float) reader.nextDouble();
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,82,"public void write(JsonWriter writer, Float value) throws IOException {"
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,83,writer.value(value);
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,87,public static final TypeAdapter.Factory FLOAT_FACTORY
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,88,"= newFactory(float.class, Float.class, FLOAT);"

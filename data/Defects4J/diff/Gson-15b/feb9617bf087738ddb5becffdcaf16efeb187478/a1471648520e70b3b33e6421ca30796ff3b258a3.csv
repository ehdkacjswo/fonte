is_addition,old_file_path,new_file_path,line_num,content
False,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,300,eturn o instanceof JsonArray && ((JsonArray) o).elements.equals(elements);
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,300,return (o == this) || (o instanceof JsonArray && ((JsonArray) o).elements.equals(elements));
False,gson/src/main/java/com/google/gson/JsonNull.java,gson/src/main/java/com/google/gson/JsonNull.java,56,eturn other instanceof JsonNull;
True,gson/src/main/java/com/google/gson/JsonNull.java,gson/src/main/java/com/google/gson/JsonNull.java,56,return this == other || other instanceof JsonNull;
False,gson/src/main/java/com/google/gson/JsonObject.java,gson/src/main/java/com/google/gson/JsonObject.java,194,eturn o instanceof JsonObject
False,gson/src/main/java/com/google/gson/JsonObject.java,gson/src/main/java/com/google/gson/JsonObject.java,195,& ((JsonObject) o).members.equals(members);
True,gson/src/main/java/com/google/gson/JsonObject.java,gson/src/main/java/com/google/gson/JsonObject.java,194,return (o == this) || (o instanceof JsonObject
True,gson/src/main/java/com/google/gson/JsonObject.java,gson/src/main/java/com/google/gson/JsonObject.java,195,&& ((JsonObject) o).members.equals(members));
True,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,359,"// Java standard types other than double return true for two NaN. So, need"
True,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,360,// special handling for double.
True,gson/src/test/java/com/google/gson/JsonArrayTest.java,gson/src/test/java/com/google/gson/JsonArrayTest.java,35,"assertEquals(a, a);"
True,gson/src/test/java/com/google/gson/JsonObjectTest.java,gson/src/test/java/com/google/gson/JsonObjectTest.java,141,"assertEquals(a, a);"
True,gson/src/test/java/com/google/gson/JsonPrimitiveTest.java,gson/src/test/java/com/google/gson/JsonPrimitiveTest.java,189,"MoreAsserts.assertEqualsAndHashCode(new JsonPrimitive(Float.NEGATIVE_INFINITY),"
True,gson/src/test/java/com/google/gson/JsonPrimitiveTest.java,gson/src/test/java/com/google/gson/JsonPrimitiveTest.java,190,new JsonPrimitive(Float.NEGATIVE_INFINITY));
True,gson/src/test/java/com/google/gson/JsonPrimitiveTest.java,gson/src/test/java/com/google/gson/JsonPrimitiveTest.java,191,"MoreAsserts.assertEqualsAndHashCode(new JsonPrimitive(Float.POSITIVE_INFINITY),"
True,gson/src/test/java/com/google/gson/JsonPrimitiveTest.java,gson/src/test/java/com/google/gson/JsonPrimitiveTest.java,192,new JsonPrimitive(Float.POSITIVE_INFINITY));
True,gson/src/test/java/com/google/gson/JsonPrimitiveTest.java,gson/src/test/java/com/google/gson/JsonPrimitiveTest.java,193,"MoreAsserts.assertEqualsAndHashCode(new JsonPrimitive(Double.NaN), new JsonPrimitive(Double.NaN));"
True,gson/src/test/java/com/google/gson/JsonPrimitiveTest.java,gson/src/test/java/com/google/gson/JsonPrimitiveTest.java,194,"MoreAsserts.assertEqualsAndHashCode(new JsonPrimitive(Double.NEGATIVE_INFINITY),"
True,gson/src/test/java/com/google/gson/JsonPrimitiveTest.java,gson/src/test/java/com/google/gson/JsonPrimitiveTest.java,195,new JsonPrimitive(Double.NEGATIVE_INFINITY));
True,gson/src/test/java/com/google/gson/JsonPrimitiveTest.java,gson/src/test/java/com/google/gson/JsonPrimitiveTest.java,196,"MoreAsserts.assertEqualsAndHashCode(new JsonPrimitive(Double.POSITIVE_INFINITY),"
True,gson/src/test/java/com/google/gson/JsonPrimitiveTest.java,gson/src/test/java/com/google/gson/JsonPrimitiveTest.java,197,new JsonPrimitive(Double.POSITIVE_INFINITY));

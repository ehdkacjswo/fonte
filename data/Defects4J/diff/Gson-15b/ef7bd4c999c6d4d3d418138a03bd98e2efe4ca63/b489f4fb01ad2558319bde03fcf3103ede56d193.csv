is_addition,old_file_path,new_file_path,line_num,content
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,46," <p>Along with modeling generic types, this class can resolve type parameters."
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,47," For example, to figure out what type {@code keySet()} returns on a {@code"
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,48," Map<Integer, String>}, use this code:<pre>   {@code"
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,50,"   TypeLiteral<Map<Integer, String>> mapType"
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,51,"       = new TypeToken<Map<Integer, String>>() {};"
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,52,   TypeToken<?> keySetType
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,53,"       = mapType.getReturnType(Map.class.getMethod(""keySet""));"
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,54,"   System.out.println(keySetType); // prints ""Set<Integer>""}</pre>"

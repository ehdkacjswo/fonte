is_addition,old_file_path,new_file_path,line_num,content
False,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,19,mport java.io.IOException;
False,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,20,mport java.lang.reflect.Type;
False,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,21,mport java.util.ArrayList;
False,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,22,mport java.util.List;
False,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,23,mport java.util.Map;
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,30,import java.io.IOException;
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,31,import java.lang.reflect.Type;
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,32,import java.util.ArrayList;
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,33,import java.util.List;
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,34,import java.util.Map;
False,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,122,ypeAdapter<?> keyAdapter = context.getAdapter(TypeToken.get(keyAndValueTypes[0]));
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,121,"TypeAdapter<?> keyAdapter = getKeyAdapter(context, keyAndValueTypes[0]);"
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,132,* Returns a type adapter that writes the value as a string.
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,134,"private TypeAdapter<?> getKeyAdapter(MiniGson context, Type keyType) {"
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,135,return (keyType == boolean.class || keyType == Boolean.class)
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,136,? TypeAdapters.BOOLEAN_AS_STRING
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,137,: context.getAdapter(TypeToken.get(keyType));
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,199,if (!complexMapKeySerialization) {
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,200,writer.beginObject();
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,201,"for (Map.Entry<K, V> entry : map.entrySet()) {"
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,202,writer.name(String.valueOf(entry.getKey()));
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,203,"valueTypeAdapter.write(writer, entry.getValue());"
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,205,writer.endObject();
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,206,return;
False,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,202,f (complexMapKeySerialization && hasComplexKeys) {
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,220,if (hasComplexKeys) {
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,131,"* Writes a boolean as a string. Useful for map keys, where booleans aren't"
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,132,* otherwise permitted.
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,134,public static final TypeAdapter<Boolean> BOOLEAN_AS_STRING = new TypeAdapter<Boolean>() {
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,135,@Override public Boolean read(JsonReader reader) throws IOException {
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,136,if (reader.peek() == JsonToken.NULL) {
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,137,reader.nextNull();
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,138,return null;
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,140,return Boolean.valueOf(reader.nextString());
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,143,"@Override public void write(JsonWriter writer, Boolean value) throws IOException {"
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,144,"writer.value(value == null ? ""null"" : value.toString());"
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,24,import com.google.gson.JsonParseException;
False,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,31,mport junit.framework.TestCase;
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,37,import junit.framework.TestCase;
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,440,public void testComplexKeysSerialization() {
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,441,"Map<Point, String> map = new LinkedHashMap<Point, String>();"
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,442,"map.put(new Point(2, 3), ""a"");"
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,443,"map.put(new Point(5, 7), ""b"");"
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,444,"String json = ""{\""2,3\"":\""a\"",\""5,7\"":\""b\""}"";"
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,445,"assertEquals(json, gson.toJson(map, new TypeToken<Map<Point, String>>() {}.getType()));"
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,446,"assertEquals(json, gson.toJson(map, Map.class));"
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,449,public void testComplexKeysDeserialization() {
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,450,"String json = ""{\""2,3\"":\""a\"",\""5,7\"":\""b\""}"";"
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,451,try {
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,452,"gson.fromJson(json, new TypeToken<Map<Point, String>>() {}.getType());"
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,453,fail();
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,454,} catch (JsonParseException expected) {
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,458,public void testStringKeyDeserialization() {
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,459,"String json = ""{\""2,3\"":\""a\"",\""5,7\"":\""b\""}"";"
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,460,"Map<String, String> map = new LinkedHashMap<String, String>();"
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,461,"map.put(""2,3"", ""a"");"
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,462,"map.put(""5,7"", ""b"");"
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,463,"assertEquals(map, gson.fromJson(json, new TypeToken<Map<String, String>>() {}.getType()));"
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,466,public void testNumberKeyDeserialization() {
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,467,"String json = ""{\""2.3\"":\""a\"",\""5.7\"":\""b\""}"";"
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,468,"Map<Double, String> map = new LinkedHashMap<Double, String>();"
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,469,"map.put(2.3, ""a"");"
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,470,"map.put(5.7, ""b"");"
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,471,"assertEquals(map, gson.fromJson(json, new TypeToken<Map<Double, String>>() {}.getType()));"
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,474,public void testBooleanKeyDeserialization() {
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,475,"String json = ""{\""true\"":\""a\"",\""false\"":\""b\""}"";"
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,476,"Map<Boolean, String> map = new LinkedHashMap<Boolean, String>();"
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,477,"map.put(true, ""a"");"
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,478,"map.put(false, ""b"");"
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,479,"assertEquals(map, gson.fromJson(json, new TypeToken<Map<Boolean, String>>() {}.getType()));"
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,482,static class Point {
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,483,private final int x;
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,484,private final int y;
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,486,"Point(int x, int y) {"
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,487,this.x = x;
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,488,this.y = y;
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,491,@Override public boolean equals(Object o) {
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,492,return o instanceof Point && x == ((Point) o).x && y == ((Point) o).y;
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,495,@Override public int hashCode() {
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,496,return x * 37 + y;
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,499,@Override public String toString() {
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,500,"return x + "","" + y;"

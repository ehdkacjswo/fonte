is_addition,old_file_path,new_file_path,line_num,content
False,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,210,f (exppart != null) {
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,210,if (exppart != null || fracpart != null) {
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,212,"exppart = (exppart == null) ? """" : exppart;"
False,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,213, else if (fracpart != null) {
False,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,214, = new Double(intpart + fracpart);
False,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,216,"/ See if the number fits in an integer, or long"
False,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,217,/ Use BigInteger only if it is big enough.
False,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,218,f (intpart.length() < 10) {
False,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,219, = new Integer(intpart);
False,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,220, else if (intpart.length() < 19) {
False,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,221, = new Long(intpart);
False,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,222, else {
False,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,223, = new java.math.BigInteger(intpart);
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,215,n = new java.math.BigInteger(intpart);
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,257,public void testBigDecimalPreservePrecisionSerialization() {
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,258,"String expectedValue = ""1.000"";"
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,259,BigDecimal obj = new BigDecimal(expectedValue);
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,260,String actualValue = gson.toJson(obj);
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,262,"assertEquals(expectedValue, actualValue);"
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,265,public void testBigDecimalPreservePrecisionDeserialization() {
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,266,"String json = ""1.000"";"
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,267,BigDecimal expected = new BigDecimal(json);
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,268,"BigDecimal actual = gson.fromJson(json, BigDecimal.class);"
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,270,"assertEquals(expected, actual);"

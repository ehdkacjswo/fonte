is_addition,old_file_path,new_file_path,line_num,content
False,extras/src/main/java/com/google/gson/mini/MiniGson.java,extras/src/main/java/com/google/gson/mini/MiniGson.java,53,actories.addAll(builder.factories);
True,extras/src/main/java/com/google/gson/mini/MiniGson.java,extras/src/main/java/com/google/gson/mini/MiniGson.java,58,factories.addAll(builder.factories);
False,extras/src/main/java/com/google/gson/mini/MiniGson.java,extras/src/main/java/com/google/gson/mini/MiniGson.java,69,eturn constructor.newInstance();
True,extras/src/main/java/com/google/gson/mini/MiniGson.java,extras/src/main/java/com/google/gson/mini/MiniGson.java,69,Object[] args = null;
True,extras/src/main/java/com/google/gson/mini/MiniGson.java,extras/src/main/java/com/google/gson/mini/MiniGson.java,70,return constructor.newInstance(args);
False,extras/src/main/java/com/google/gson/mini/MiniGson.java,extras/src/main/java/com/google/gson/mini/MiniGson.java,93,utureTypeAdapter<T> ongoingCall = (FutureTypeAdapter<T>) threadCalls.get(type);
True,extras/src/main/java/com/google/gson/mini/MiniGson.java,extras/src/main/java/com/google/gson/mini/MiniGson.java,94,FutureTypeAdapter<T> ongoingCall = (FutureTypeAdapter<T>) threadCalls.get(type);
False,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,54,"rivate Map<String, BoundField<?>> getBoundFields("
True,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,54,"private Map<String, BoundField> getBoundFields("
False,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,56,"ap<String, BoundField<?>> result = new LinkedHashMap<String, BoundField<?>>();"
True,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,56,"Map<String, BoundField> result = new LinkedHashMap<String, BoundField>();"
False,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,61,"oundField<?> boundField = BoundField.create(context, field, TypeToken.get(fieldType));"
True,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,61,"BoundField boundField = createBoundField(context, field, TypeToken.get(fieldType));"
False,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,72,"rivate final Map<String, BoundField<?>> map;"
False,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,73,rivate final BoundField<?>[] boundFields;
True,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,72,"private final Map<String, BoundField> map;"
True,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,73,private final BoundField[] boundFields;
False,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,75,"eflectiveTypeAdapter(Constructor<? super T> constructor, Map<String, BoundField<?>> map) {"
True,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,75,"ReflectiveTypeAdapter(Constructor<? super T> constructor, Map<String, BoundField> map) {"
False,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,78,his.boundFields = map.values().toArray(new BoundField<?>[map.size()]);
True,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,78,this.boundFields = map.values().toArray(new BoundField[map.size()]);
False,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,93,hile (reader.hasNext()) {
False,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,94,tring name = reader.nextName();
False,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,95,oundField<?> field = map.get(name);
False,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,96,f (field == null) {
False,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,97,/ TODO: define a better policy
False,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,98,eader.skipValue();
False,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,99, else {
False,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,100,"ield.read(reader, instance);"
True,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,93,try {
True,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,94,while (reader.hasNext()) {
True,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,95,String name = reader.nextName();
True,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,96,BoundField field = map.get(name);
True,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,97,if (field == null) {
True,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,98,// TODO: define a better policy
True,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,99,reader.skipValue();
True,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,100,} else {
True,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,101,"field.read(reader, instance);"
True,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,104,} catch (IllegalAccessException e) {
True,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,105,throw new AssertionError();
False,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,114,or (BoundField<?> boundField : boundFields) {
False,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,115,riter.name(boundField.name);
False,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,116,"oundField.write(writer, value);"
True,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,118,try {
True,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,119,for (BoundField boundField : boundFields) {
True,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,120,writer.name(boundField.name);
True,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,121,"boundField.write(writer, value);"
True,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,123,} catch (IllegalAccessException e) {
True,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,124,throw new AssertionError();
False,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,121,tatic class BoundField<T> {
True,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,129,static BoundField createBoundField(
True,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,130,"final MiniGson context, final Field field, final TypeToken<?> fieldType) {"
True,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,131,// special casing primitives here saves ~5% on Android...
True,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,132,return new BoundField(field.getName()) {
True,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,133,final TypeAdapter<?> typeAdapter = context.getAdapter(fieldType);
True,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,134,"@SuppressWarnings(""unchecked"") // the type adapter and field type always agree"
True,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,135,"@Override void write(JsonWriter writer, Object value)"
True,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,136,"throws IOException, IllegalAccessException {"
True,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,137,Object fieldValue = field.get(value);
True,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,138,"((TypeAdapter) typeAdapter).write(writer, fieldValue);"
True,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,140,"@Override void read(JsonReader reader, Object value)"
True,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,141,"throws IOException, IllegalAccessException {"
True,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,142,Object fieldValue = typeAdapter.read(reader);
True,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,143,"field.set(value, fieldValue);"
True,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,148,static abstract class BoundField {
False,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,123,inal Field field;
False,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,124,inal TypeAdapter<T> typeAdapter;
False,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,126,"oundField(String name, Field field, TypeAdapter<T> typeAdapter) {"
True,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,151,protected BoundField(String name) {
False,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,128,his.field = field;
False,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,129,his.typeAdapter = typeAdapter;
False,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,132,"tatic <T> BoundField<T> create(MiniGson context, Field field, TypeToken<T> fieldType) {"
False,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,133,"eturn new BoundField<T>(field.getName(), field, context.getAdapter(fieldType));"
False,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,136,"oid write(JsonWriter writer, Object value) throws IOException {"
False,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,137,ry {
False,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,138,"SuppressWarnings(""unchecked"") // we previously verified that field is of type T"
False,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,139, fieldValue = (T) field.get(value);
False,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,140,"ypeAdapter.write(writer, fieldValue);"
False,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,141, catch (IllegalAccessException e) {
False,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,142,hrow new AssertionError();
False,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,146,"oid read(JsonReader reader, Object value) throws IOException {"
False,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,147, fieldValue = typeAdapter.read(reader);
False,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,148,ry {
False,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,149,"ield.set(value, fieldValue);"
False,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,150, catch (IllegalAccessException e) {
False,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,151,hrow new AssertionError();
True,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,155,"abstract void write(JsonWriter writer, Object value) throws IOException, IllegalAccessException;"
True,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,extras/src/main/java/com/google/gson/mini/ReflectiveTypeAdapter.java,156,"abstract void read(JsonReader reader, Object value) throws IOException, IllegalAccessException;"

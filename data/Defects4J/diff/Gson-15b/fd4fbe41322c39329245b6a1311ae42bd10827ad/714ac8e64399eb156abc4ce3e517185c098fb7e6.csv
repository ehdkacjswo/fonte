is_addition,old_file_path,new_file_path,line_num,content
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,800,"nvokeInterceptorIfNeeded(object, typeToken);"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,800,"invokeInterceptorIfNeeded(object, typeToken.getRawType());"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,893,"private <T> void invokeInterceptorIfNeeded(T object, Type type) {"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,894,"@SuppressWarnings(""unchecked"")"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,895,TypeToken<T> typeToken = (TypeToken<T>) TypeToken.get(type);
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,896,Class<? super T> clazz = typeToken.getRawType();
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,897,"invokeInterceptorIfNeeded(object, clazz);"
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,894,"rivate <T> void invokeInterceptorIfNeeded(T object, TypeToken<T> type) {"
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,895,lass<? super T> clazz = type.getRawType();
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,901,"private <T> void invokeInterceptorIfNeeded(T object, Class<T> clazz) {"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,924,* Not part of the Gson API. Do not use.
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,926,public static final class $Internal$Access {
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,927,"public static <T> void invokeInterceptor(Gson gson, T instance, Type type) {"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,928,"gson.invokeInterceptorIfNeeded(instance, type);"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,930,"public static <T> void invokeInterceptor(Gson gson, T instance, Class<T> clazz) {"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,931,"gson.invokeInterceptorIfNeeded(instance, clazz);"
False,gson/src/main/java/com/google/gson/internal/bind/ArrayTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ArrayTypeAdapter.java,19,mport com.google.gson.Gson;
False,gson/src/main/java/com/google/gson/internal/bind/ArrayTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ArrayTypeAdapter.java,20,mport com.google.gson.TypeAdapter;
False,gson/src/main/java/com/google/gson/internal/bind/ArrayTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ArrayTypeAdapter.java,21,mport com.google.gson.TypeAdapterFactory;
True,gson/src/main/java/com/google/gson/internal/bind/ArrayTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ArrayTypeAdapter.java,26,import com.google.gson.Gson;
True,gson/src/main/java/com/google/gson/internal/bind/ArrayTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ArrayTypeAdapter.java,27,import com.google.gson.TypeAdapter;
True,gson/src/main/java/com/google/gson/internal/bind/ArrayTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ArrayTypeAdapter.java,28,import com.google.gson.TypeAdapterFactory;
True,gson/src/main/java/com/google/gson/internal/bind/ArrayTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ArrayTypeAdapter.java,54,private final Gson context;
True,gson/src/main/java/com/google/gson/internal/bind/ArrayTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ArrayTypeAdapter.java,59,this.context = context;
True,gson/src/main/java/com/google/gson/internal/bind/ArrayTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ArrayTypeAdapter.java,75,"Gson.$Internal$Access.invokeInterceptor(context, instance, componentType);"
True,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,61,private final Gson context;
True,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,62,private final Type elementType;
True,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,69,this.context = context;
True,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,70,this.elementType = elementType;
True,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,86,"Gson.$Internal$Access.invokeInterceptor(context, instance, elementType);"
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,147,private final Gson context;
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,148,private final Type keyType;
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,149,private final Type valueType;
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,157,this.context = context;
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,158,this.keyType = keyType;
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,159,this.valueType = valueType;
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,181,"Gson.$Internal$Access.invokeInterceptor(context, key, keyType);"
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,184,"Gson.$Internal$Access.invokeInterceptor(context, value, valueType);"
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,197,"Gson.$Internal$Access.invokeInterceptor(context, key, keyType);"
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,199,"Gson.$Internal$Access.invokeInterceptor(context, value, valueType);"
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,94,"Gson.$Internal$Access.invokeInterceptor(context, fieldValue, fieldType.getRawType());"
True,gson/src/test/java/com/google/gson/functional/InterceptorTest.java,gson/src/test/java/com/google/gson/functional/InterceptorTest.java,18,import java.io.IOException;
True,gson/src/test/java/com/google/gson/functional/InterceptorTest.java,gson/src/test/java/com/google/gson/functional/InterceptorTest.java,19,import java.lang.reflect.Type;
True,gson/src/test/java/com/google/gson/functional/InterceptorTest.java,gson/src/test/java/com/google/gson/functional/InterceptorTest.java,20,import java.util.Collection;
True,gson/src/test/java/com/google/gson/functional/InterceptorTest.java,gson/src/test/java/com/google/gson/functional/InterceptorTest.java,22,import java.util.Map;
True,gson/src/test/java/com/google/gson/functional/InterceptorTest.java,gson/src/test/java/com/google/gson/functional/InterceptorTest.java,23,import java.util.Map.Entry;
True,gson/src/test/java/com/google/gson/functional/InterceptorTest.java,gson/src/test/java/com/google/gson/functional/InterceptorTest.java,28,import com.google.gson.GsonBuilder;
True,gson/src/test/java/com/google/gson/functional/InterceptorTest.java,gson/src/test/java/com/google/gson/functional/InterceptorTest.java,30,import com.google.gson.JsonSyntaxException;
True,gson/src/test/java/com/google/gson/functional/InterceptorTest.java,gson/src/test/java/com/google/gson/functional/InterceptorTest.java,31,import com.google.gson.TypeAdapter;
True,gson/src/test/java/com/google/gson/functional/InterceptorTest.java,gson/src/test/java/com/google/gson/functional/InterceptorTest.java,35,import com.google.gson.stream.JsonReader;
True,gson/src/test/java/com/google/gson/functional/InterceptorTest.java,gson/src/test/java/com/google/gson/functional/InterceptorTest.java,36,import com.google.gson.stream.JsonWriter;
False,gson/src/test/java/com/google/gson/functional/InterceptorTest.java,gson/src/test/java/com/google/gson/functional/InterceptorTest.java,40,his.gson = new Gson();
True,gson/src/test/java/com/google/gson/functional/InterceptorTest.java,gson/src/test/java/com/google/gson/functional/InterceptorTest.java,50,this.gson = new GsonBuilder().enableComplexMapKeySerialization().create();
False,gson/src/test/java/com/google/gson/functional/InterceptorTest.java,gson/src/test/java/com/google/gson/functional/InterceptorTest.java,50,ublic void testPostDeserializeTopLevelClass() {
True,gson/src/test/java/com/google/gson/functional/InterceptorTest.java,gson/src/test/java/com/google/gson/functional/InterceptorTest.java,60,public void testTopLevelClass() {
False,gson/src/test/java/com/google/gson/functional/InterceptorTest.java,gson/src/test/java/com/google/gson/functional/InterceptorTest.java,55,ublic void testPostDeserializeList() {
True,gson/src/test/java/com/google/gson/functional/InterceptorTest.java,gson/src/test/java/com/google/gson/functional/InterceptorTest.java,65,public void testList() {
False,gson/src/test/java/com/google/gson/functional/InterceptorTest.java,gson/src/test/java/com/google/gson/functional/InterceptorTest.java,61,ublic void testPostDeserializeField() {
True,gson/src/test/java/com/google/gson/functional/InterceptorTest.java,gson/src/test/java/com/google/gson/functional/InterceptorTest.java,71,public void testCollection() {
True,gson/src/test/java/com/google/gson/functional/InterceptorTest.java,gson/src/test/java/com/google/gson/functional/InterceptorTest.java,72,"Collection<User> list = gson.fromJson(""[{name:'bob',password:'pwd'}]"", new TypeToken<Collection<User>>(){}.getType());"
True,gson/src/test/java/com/google/gson/functional/InterceptorTest.java,gson/src/test/java/com/google/gson/functional/InterceptorTest.java,73,User user = list.iterator().next();
True,gson/src/test/java/com/google/gson/functional/InterceptorTest.java,gson/src/test/java/com/google/gson/functional/InterceptorTest.java,74,"assertEquals(User.DEFAULT_EMAIL, user.email);"
True,gson/src/test/java/com/google/gson/functional/InterceptorTest.java,gson/src/test/java/com/google/gson/functional/InterceptorTest.java,77,public void testMapKeyAndValues() {
True,gson/src/test/java/com/google/gson/functional/InterceptorTest.java,gson/src/test/java/com/google/gson/functional/InterceptorTest.java,78,"Type mapType = new TypeToken<Map<User, Address>>(){}.getType();"
True,gson/src/test/java/com/google/gson/functional/InterceptorTest.java,gson/src/test/java/com/google/gson/functional/InterceptorTest.java,79,try {
True,gson/src/test/java/com/google/gson/functional/InterceptorTest.java,gson/src/test/java/com/google/gson/functional/InterceptorTest.java,80,"gson.fromJson(""[[{name:'bob',password:'pwd'},{}]]"", mapType);"
True,gson/src/test/java/com/google/gson/functional/InterceptorTest.java,gson/src/test/java/com/google/gson/functional/InterceptorTest.java,81,fail();
True,gson/src/test/java/com/google/gson/functional/InterceptorTest.java,gson/src/test/java/com/google/gson/functional/InterceptorTest.java,82,} catch (JsonSyntaxException expected) {}
True,gson/src/test/java/com/google/gson/functional/InterceptorTest.java,gson/src/test/java/com/google/gson/functional/InterceptorTest.java,83,"Map<User, Address> map = gson.fromJson(""[[{name:'bob',password:'pwd'},{city:'Mountain View',state:'CA',zip:'94043'}]]"","
True,gson/src/test/java/com/google/gson/functional/InterceptorTest.java,gson/src/test/java/com/google/gson/functional/InterceptorTest.java,84,mapType);
True,gson/src/test/java/com/google/gson/functional/InterceptorTest.java,gson/src/test/java/com/google/gson/functional/InterceptorTest.java,85,"Entry<User, Address> entry = map.entrySet().iterator().next();"
True,gson/src/test/java/com/google/gson/functional/InterceptorTest.java,gson/src/test/java/com/google/gson/functional/InterceptorTest.java,86,"assertEquals(User.DEFAULT_EMAIL, entry.getKey().email);"
True,gson/src/test/java/com/google/gson/functional/InterceptorTest.java,gson/src/test/java/com/google/gson/functional/InterceptorTest.java,87,"assertEquals(Address.DEFAULT_FIRST_LINE, entry.getValue().firstLine);"
True,gson/src/test/java/com/google/gson/functional/InterceptorTest.java,gson/src/test/java/com/google/gson/functional/InterceptorTest.java,90,public void testField() {
True,gson/src/test/java/com/google/gson/functional/InterceptorTest.java,gson/src/test/java/com/google/gson/functional/InterceptorTest.java,91,"UserGroup userGroup = gson.fromJson(""{user:{name:'bob',password:'pwd'}}"", UserGroup.class);"
True,gson/src/test/java/com/google/gson/functional/InterceptorTest.java,gson/src/test/java/com/google/gson/functional/InterceptorTest.java,92,"assertEquals(User.DEFAULT_EMAIL, userGroup.user.email);"
True,gson/src/test/java/com/google/gson/functional/InterceptorTest.java,gson/src/test/java/com/google/gson/functional/InterceptorTest.java,95,public void testCustomTypeAdapter() {
True,gson/src/test/java/com/google/gson/functional/InterceptorTest.java,gson/src/test/java/com/google/gson/functional/InterceptorTest.java,96,Gson gson = new GsonBuilder()
True,gson/src/test/java/com/google/gson/functional/InterceptorTest.java,gson/src/test/java/com/google/gson/functional/InterceptorTest.java,97,".registerTypeAdapter(User.class, new TypeAdapter<User>() {"
True,gson/src/test/java/com/google/gson/functional/InterceptorTest.java,gson/src/test/java/com/google/gson/functional/InterceptorTest.java,98,"@Override public void write(JsonWriter out, User value) throws IOException {"
True,gson/src/test/java/com/google/gson/functional/InterceptorTest.java,gson/src/test/java/com/google/gson/functional/InterceptorTest.java,99,throw new UnsupportedOperationException();
True,gson/src/test/java/com/google/gson/functional/InterceptorTest.java,gson/src/test/java/com/google/gson/functional/InterceptorTest.java,101,@Override public User read(JsonReader in) throws IOException {
True,gson/src/test/java/com/google/gson/functional/InterceptorTest.java,gson/src/test/java/com/google/gson/functional/InterceptorTest.java,102,in.beginObject();
True,gson/src/test/java/com/google/gson/functional/InterceptorTest.java,gson/src/test/java/com/google/gson/functional/InterceptorTest.java,103,in.nextName();
True,gson/src/test/java/com/google/gson/functional/InterceptorTest.java,gson/src/test/java/com/google/gson/functional/InterceptorTest.java,104,String name = in.nextString();
True,gson/src/test/java/com/google/gson/functional/InterceptorTest.java,gson/src/test/java/com/google/gson/functional/InterceptorTest.java,105,in.nextName();
True,gson/src/test/java/com/google/gson/functional/InterceptorTest.java,gson/src/test/java/com/google/gson/functional/InterceptorTest.java,106,String password = in.nextString();
True,gson/src/test/java/com/google/gson/functional/InterceptorTest.java,gson/src/test/java/com/google/gson/functional/InterceptorTest.java,107,in.endObject();
True,gson/src/test/java/com/google/gson/functional/InterceptorTest.java,gson/src/test/java/com/google/gson/functional/InterceptorTest.java,108,"return new User(name, password);"
True,gson/src/test/java/com/google/gson/functional/InterceptorTest.java,gson/src/test/java/com/google/gson/functional/InterceptorTest.java,110,.create();
True,gson/src/test/java/com/google/gson/functional/InterceptorTest.java,gson/src/test/java/com/google/gson/functional/InterceptorTest.java,115,public void testDirectInvocationOfTypeAdapter() throws Exception {
True,gson/src/test/java/com/google/gson/functional/InterceptorTest.java,gson/src/test/java/com/google/gson/functional/InterceptorTest.java,116,TypeAdapter<UserGroup> adapter = gson.getAdapter(UserGroup.class);
True,gson/src/test/java/com/google/gson/functional/InterceptorTest.java,gson/src/test/java/com/google/gson/functional/InterceptorTest.java,117,"UserGroup userGroup = adapter.fromJson(""{\""user\"":{\""name\"":\""bob\"",\""password\"":\""pwd\""}}"");"
True,gson/src/test/java/com/google/gson/functional/InterceptorTest.java,gson/src/test/java/com/google/gson/functional/InterceptorTest.java,118,"assertEquals(User.DEFAULT_EMAIL, userGroup.user.email);"
True,gson/src/test/java/com/google/gson/functional/InterceptorTest.java,gson/src/test/java/com/google/gson/functional/InterceptorTest.java,121,"@SuppressWarnings(""unused"")"
True,gson/src/test/java/com/google/gson/functional/InterceptorTest.java,gson/src/test/java/com/google/gson/functional/InterceptorTest.java,128,"@SuppressWarnings(""unused"")"
True,gson/src/test/java/com/google/gson/functional/InterceptorTest.java,gson/src/test/java/com/google/gson/functional/InterceptorTest.java,134,Address address;
True,gson/src/test/java/com/google/gson/functional/InterceptorTest.java,gson/src/test/java/com/google/gson/functional/InterceptorTest.java,135,"public User(String name, String password) {"
True,gson/src/test/java/com/google/gson/functional/InterceptorTest.java,gson/src/test/java/com/google/gson/functional/InterceptorTest.java,136,this.name = name;
True,gson/src/test/java/com/google/gson/functional/InterceptorTest.java,gson/src/test/java/com/google/gson/functional/InterceptorTest.java,137,this.password = password;
False,gson/src/test/java/com/google/gson/functional/InterceptorTest.java,gson/src/test/java/com/google/gson/functional/InterceptorTest.java,82,"hrow new JsonParseException(""name and password are required fields."");"
True,gson/src/test/java/com/google/gson/functional/InterceptorTest.java,gson/src/test/java/com/google/gson/functional/InterceptorTest.java,144,"throw new JsonSyntaxException(""name and password are required fields."");"
True,gson/src/test/java/com/google/gson/functional/InterceptorTest.java,gson/src/test/java/com/google/gson/functional/InterceptorTest.java,151,@Intercept(postDeserialize = AddressValidator.class)
True,gson/src/test/java/com/google/gson/functional/InterceptorTest.java,gson/src/test/java/com/google/gson/functional/InterceptorTest.java,152,"@SuppressWarnings(""unused"")"
True,gson/src/test/java/com/google/gson/functional/InterceptorTest.java,gson/src/test/java/com/google/gson/functional/InterceptorTest.java,153,private static final class Address {
True,gson/src/test/java/com/google/gson/functional/InterceptorTest.java,gson/src/test/java/com/google/gson/functional/InterceptorTest.java,154,"static final String DEFAULT_FIRST_LINE = ""unknown"";"
True,gson/src/test/java/com/google/gson/functional/InterceptorTest.java,gson/src/test/java/com/google/gson/functional/InterceptorTest.java,155,String firstLine;
True,gson/src/test/java/com/google/gson/functional/InterceptorTest.java,gson/src/test/java/com/google/gson/functional/InterceptorTest.java,156,String secondLine;
True,gson/src/test/java/com/google/gson/functional/InterceptorTest.java,gson/src/test/java/com/google/gson/functional/InterceptorTest.java,157,String city;
True,gson/src/test/java/com/google/gson/functional/InterceptorTest.java,gson/src/test/java/com/google/gson/functional/InterceptorTest.java,158,String state;
True,gson/src/test/java/com/google/gson/functional/InterceptorTest.java,gson/src/test/java/com/google/gson/functional/InterceptorTest.java,159,String zip;
True,gson/src/test/java/com/google/gson/functional/InterceptorTest.java,gson/src/test/java/com/google/gson/functional/InterceptorTest.java,162,private static final class AddressValidator implements JsonPostDeserializer<Address> {
True,gson/src/test/java/com/google/gson/functional/InterceptorTest.java,gson/src/test/java/com/google/gson/functional/InterceptorTest.java,163,public void postDeserialize(Address address) {
True,gson/src/test/java/com/google/gson/functional/InterceptorTest.java,gson/src/test/java/com/google/gson/functional/InterceptorTest.java,164,if (address.city == null || address.state == null || address.zip == null) {
True,gson/src/test/java/com/google/gson/functional/InterceptorTest.java,gson/src/test/java/com/google/gson/functional/InterceptorTest.java,165,"throw new JsonSyntaxException(""Address city, state and zip are required fields."");"
True,gson/src/test/java/com/google/gson/functional/InterceptorTest.java,gson/src/test/java/com/google/gson/functional/InterceptorTest.java,167,if (address.firstLine == null) address.firstLine = Address.DEFAULT_FIRST_LINE;

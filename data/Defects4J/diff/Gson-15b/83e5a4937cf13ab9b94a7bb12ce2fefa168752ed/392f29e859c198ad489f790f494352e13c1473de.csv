is_addition,old_file_path,new_file_path,line_num,content
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,19,import java.io.EOFException;
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,20,import java.io.IOException;
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,21,import java.io.Reader;
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,22,import java.io.StringReader;
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,23,import java.io.StringWriter;
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,24,import java.io.Writer;
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,25,import java.lang.reflect.Type;
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,26,import java.math.BigDecimal;
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,27,import java.math.BigInteger;
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,28,import java.util.ArrayList;
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,29,import java.util.Collections;
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,30,import java.util.HashMap;
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,31,import java.util.List;
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,32,import java.util.Map;
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,39,mport java.io.EOFException;
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,40,mport java.io.IOException;
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,41,mport java.io.Reader;
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,42,mport java.io.StringReader;
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,43,mport java.io.StringWriter;
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,44,mport java.io.Writer;
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,45,mport java.lang.reflect.Type;
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,46,mport java.math.BigDecimal;
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,47,mport java.math.BigInteger;
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,48,mport java.util.ArrayList;
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,49,mport java.util.Collections;
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,50,mport java.util.HashMap;
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,51,mport java.util.List;
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,52,mport java.util.Map;
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,96,* @author Jesse Wilson
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,361, TODO: needs documentation
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,363,* This method is used to get an alternate type adapter for the specified type. This is used
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,364,* to access a type adapter that is overridden by a {@link TypeAdapterFactory} that you
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,365,* may have registered. This features is typically used when you want to register a type
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,366,* adapter that does a little bit of work but then delegates further processing to the Gson
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,367,* default type adapter. Here is an example:
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,368,* <p>Let's say we want to write a type adapter that counts the number of objects being read
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,369,*  from or written to JSON. We can achieve this by writing a type adapter factory that uses
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,370,*  the <code>getDelegateAdapter</code> method:
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,371,*  <pre> {@code
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,372,*  class StatsTypeAdapterFactory implements TypeAdapterFactory {
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,373,*    public int numReads = 0;
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,374,*    public int numWrites = 0;
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,375,"*    public &lt;T&gt; TypeAdapter&lt;T&gt; create(Gson gson, TypeToken&lt;T&gt; type) {"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,376,"*      final TypeAdapter&lt;T&gt; delegate = gson.getDelegateAdapter(this, type);"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,377,*      return new TypeAdapter&lt;T&gt;() {
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,378,"*        public void write(JsonWriter out, T value) throws IOException {"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,379,*          ++numWrites;
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,380,"*          delegate.write(out, value);"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,382,*        public T read(JsonReader in) throws IOException {
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,383,*          ++numReads;
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,384,*          return delegate.read(in);
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,389,*  } </pre>
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,390,*  This factory can now be used like this:
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,391,*  <pre> {@code
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,392,*  StatsTypeAdapterFactory stats = new StatsTypeAdapterFactory();
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,393,*  Gson gson = new GsonBuilder().registerTypeAdapterFactory(stats).create();
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,394,*  // Call gson.toJson() and fromJson methods on objects
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,395,"*  System.out.println(""Num JSON reads"" + stats.numReads);"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,396,"*  System.out.println(""Num JSON writes"" + stats.numWrites);"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,397,*  }</pre>
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,398,*  Note that since you can not override type adapter factories for String and Java primitive
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,399,"*  types, our stats factory will not count the number of String or primitives that will be"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,400,*  read or written.
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,401,* @param skipPast The type adapter factory that needs to be skipped while searching for
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,402,"*   a matching type adapter. In most cases, you should just pass <i>this</i> (the type adapter"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,403,*   factory from where {@link getDelegateAdapter} method is being invoked).
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,404,* @param type Type for which the delegate adapter is being searched for.
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,364,"ublic <T> TypeAdapter<T> getNextAdapter(TypeAdapterFactory skipPast, TypeToken<T> type) {"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,408,"public <T> TypeAdapter<T> getDelegateAdapter(TypeAdapterFactory skipPast, TypeToken<T> type) {"
False,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,78," (delegate = gson.getNextAdapter(skipPast, typeToken));"
True,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,78,": (delegate = gson.getDelegateAdapter(skipPast, typeToken));"
False,gson/src/main/java/com/google/gson/internal/Excluder.java,gson/src/main/java/com/google/gson/internal/Excluder.java,144," (delegate = gson.getNextAdapter(Excluder.this, type));"
True,gson/src/main/java/com/google/gson/internal/Excluder.java,gson/src/main/java/com/google/gson/internal/Excluder.java,144,": (delegate = gson.getDelegateAdapter(Excluder.this, type));"
True,gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java,2,* Copyright (C) 2012 Google Inc.
True,gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java,5,* you may not use this file except in compliance with the License.
True,gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java,6,* You may obtain a copy of the License at
True,gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java,13,* See the License for the specific language governing permissions and
True,gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java,14,* limitations under the License.
True,gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java,16,package com.google.gson.functional;
True,gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java,18,import java.io.IOException;
True,gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java,19,import java.util.ArrayList;
True,gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java,20,import java.util.List;
True,gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java,22,import junit.framework.TestCase;
True,gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java,24,import com.google.gson.Gson;
True,gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java,25,import com.google.gson.GsonBuilder;
True,gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java,26,import com.google.gson.TypeAdapter;
True,gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java,27,import com.google.gson.TypeAdapterFactory;
True,gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java,28,import com.google.gson.common.TestTypes.BagOfPrimitives;
True,gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java,29,import com.google.gson.reflect.TypeToken;
True,gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java,30,import com.google.gson.stream.JsonReader;
True,gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java,31,import com.google.gson.stream.JsonWriter;
True,gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java,34,"* Functional tests for {@link Gson#getDelegateAdapter(TypeAdapterFactory, TypeToken)} method."
True,gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java,36,* @author Inderjeet Singh
True,gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java,38,public class DelegateTypeAdapterTest extends TestCase {
True,gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java,40,private StatsTypeAdapterFactory stats;
True,gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java,41,private Gson gson;
True,gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java,42,protected void setUp() throws Exception {
True,gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java,43,super.setUp();
True,gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java,44,stats = new StatsTypeAdapterFactory();
True,gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java,45,gson = new GsonBuilder()
True,gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java,46,.registerTypeAdapterFactory(stats)
True,gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java,47,.create();
True,gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java,50,public void testDelegateInvokedOnObjectsButNotOnPrimitives() {
True,gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java,51,List<BagOfPrimitives> bags = new ArrayList<BagOfPrimitives>();
True,gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java,52,for (int i = 0; i < 10; ++i) {
True,gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java,53,"bags.add(new BagOfPrimitives(i, i, i % 2 == 0, String.valueOf(i)));"
True,gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java,55,String json = gson.toJson(bags);
True,gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java,56,"bags = gson.fromJson(json, new TypeToken<List<BagOfPrimitives>>(){}.getType());"
True,gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java,57,"// 11: 1 list object, and 10 entries. stats not invoked on individual fields of"
True,gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java,58,// BagOfPrimitives since those are primitives.
True,gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java,59,"assertEquals(11, stats.numReads);"
True,gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java,60,"assertEquals(11, stats.numWrites);"
True,gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java,63,public void testDelegateNotInvokedOnStrings() {
True,gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java,64,"String[] bags = {""1"", ""2"", ""3"", ""4""};"
True,gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java,65,String json = gson.toJson(bags);
True,gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java,66,"bags = gson.fromJson(json, String[].class);"
True,gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java,67,// Only 1 array object. stats not invoked on individual strings.
True,gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java,68,"assertEquals(1, stats.numReads);"
True,gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java,69,"assertEquals(1, stats.numWrites);"
True,gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java,72,private static class StatsTypeAdapterFactory implements TypeAdapterFactory {
True,gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java,73,public int numReads = 0;
True,gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java,74,public int numWrites = 0;
True,gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java,76,"public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {"
True,gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java,77,"final TypeAdapter<T> delegate = gson.getDelegateAdapter(this, type);"
True,gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java,78,return new TypeAdapter<T>() {
True,gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java,79,@Override
True,gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java,80,"public void write(JsonWriter out, T value) throws IOException {"
True,gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java,81,++numWrites;
True,gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java,82,"delegate.write(out, value);"
True,gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java,85,@Override
True,gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java,86,public T read(JsonReader in) throws IOException {
True,gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java,87,++numReads;
True,gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java,88,return delegate.read(in);

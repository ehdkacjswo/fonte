is_addition,old_file_path,new_file_path,line_num,content
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,173,"efaultTypeAdapters.getAllDefaultDeserializers(), DEFAULT_JSON_NON_EXECUTABLE, true, false,"
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,174,"alse, LongSerializationPolicy.DEFAULT);"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,173,"DefaultTypeAdapters.getAllDefaultDeserializers(), false, DEFAULT_JSON_NON_EXECUTABLE, true,"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,174,"false, false, LongSerializationPolicy.DEFAULT);"
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,183,"oolean generateNonExecutableGson, boolean htmlSafe, boolean prettyPrinting,"
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,184,"oolean serializeSpecialFloatingPointValues, LongSerializationPolicy longSerializationPolicy) {"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,183,"boolean complexMapKeySerialization, boolean generateNonExecutableGson, boolean htmlSafe,"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,184,"boolean prettyPrinting, boolean serializeSpecialFloatingPointValues,"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,185,LongSerializationPolicy longSerializationPolicy) {
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,248,factory(new MapTypeAdapterFactory(constructorConstructor))
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,254,".factory(new MapTypeAdapterFactory(constructorConstructor, complexMapKeySerialization))"
False,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,31,mport java.util.Map;
False,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,68,rivate static final MapAsArrayTypeAdapter COMPLEX_KEY_MAP_TYPE_ADAPTER =
False,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,69,ew MapAsArrayTypeAdapter();
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,94,private boolean complexMapKeySerialization = false;
False,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,276,"egisterTypeHierarchyAdapter(Map.class, COMPLEX_KEY_MAP_TYPE_ADAPTER);"
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,274,complexMapKeySerialization = true;
False,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,697,"ustomSerializers, customDeserializers, generateNonExecutableJson, escapeHtmlChars,"
False,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,698,"rettyPrinting, serializeSpecialFloatingPointValues, longSerializationPolicy);"
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,695,"customSerializers, customDeserializers, complexMapKeySerialization,"
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,696,"generateNonExecutableJson, escapeHtmlChars, prettyPrinting,"
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,697,"serializeSpecialFloatingPointValues, longSerializationPolicy);"
False,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,2, Copyright (C) 2010 Google Inc.
False,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,4," Licensed under the Apache License, Version 2.0 (the ""License"");"
False,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,5, you may not use this file except in compliance with the License.
False,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,6, You may obtain a copy of the License at
False,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,8,      http://www.apache.org/licenses/LICENSE-2.0
False,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,10," Unless required by applicable law or agreed to in writing, software"
False,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,11," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,12," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,13, See the License for the specific language governing permissions and
False,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,14, limitations under the License.
False,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,17,ackage com.google.gson;
False,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,19,mport java.lang.reflect.Type;
False,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,20,mport java.util.Map;
False,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,23, Adapts maps containing complex keys as arrays of map entries.
False,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,25, <h3>Maps as JSON objects</h3>
False,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,26, The standard GSON map type adapter converts Java {@link Map Maps} to JSON
False,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,27, Objects. This requires that map keys can be serialized as strings; this is
False,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,28," insufficient for some key types. For example, consider a map whose keys are"
False,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,29, points on a grid. The default JSON form encodes reasonably: <pre>   {@code
False,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,30,"   Map<Point, String> original = new LinkedHashMap<Point, String>();"
False,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,31,"   original.put(new Point(5, 6), ""a"");"
False,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,32,"   original.put(new Point(8, 8), ""b"");"
False,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,33,"   System.out.println(gson.toJson(original, type));"
False,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,34, }</pre>
False,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,35, The above code prints this JSON object:<pre>   {@code
False,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,37,"     ""(5,6)"": ""a"","
False,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,38,"     ""(8,8)"": ""b"""
False,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,40, }</pre>
False,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,41, But GSON is unable to deserialize this value because the JSON string name is
False,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,42, just the {@link Object#toString() toString()} of the map key. Attempting to
False,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,43, convert the above JSON to an object fails with a parse exception:
False,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,44," <pre>com.google.gson.JsonParseException: Expecting object found: ""(5,6)"""
False,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,45,   at com.google.gson.JsonObjectDeserializationVisitor.visitFieldUsingCustomHandler
False,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,46,   at com.google.gson.ObjectNavigator.navigateClassFields
False,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,47,   ...</pre>
False,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,49, <h3>Maps as JSON arrays</h3>
False,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,50, An alternative approach taken by this type adapter is to encode maps as
False,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,51, arrays of map entries. Each map entry is a two element array containing a key
False,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,52, and a value. This approach is more flexible because any type can be used as
False,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,53, the map's key; not just strings. But it's also less portable because the
False,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,54, receiver of such JSON must be aware of the map entry convention.
False,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,56, <p>Register this adapter when you are creating your GSON instance.
False,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,57, <pre>   {@code
False,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,58,   Gson gson = new GsonBuilder()
False,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,59,"     .registerTypeAdapter(Map.class, new MapAsArrayTypeAdapter())"
False,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,60,     .create();
False,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,61, }</pre>
False,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,62, This will change the structure of the JSON emitted by the code above. Now we
False,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,63, get an array. In this case the arrays elements are map entries:
False,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,64, <pre>   {@code
False,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,68,"         ""x"": 5,"
False,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,69,"         ""y"": 6"
False,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,71,"       ""a"","
False,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,75,"         ""x"": 8,"
False,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,76,"         ""y"": 8"
False,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,78,"       ""b"""
False,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,81, }</pre>
False,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,82, This format will serialize and deserialize just fine as long as this adapter
False,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,83, is registered.
False,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,85, <p>This adapter returns regular JSON objects for maps whose keys are not
False,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,86, complex. A key is complex if its JSON-serialized form is an array or an
False,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,87, object.
False,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,89,inal class MapAsArrayTypeAdapter
False,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,90,"mplements JsonSerializer<Map<?, ?>>, JsonDeserializer<Map<?, ?>> {"
False,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,92,"ublic Map<?, ?> deserialize(JsonElement json, Type typeOfT,"
False,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,93,sonDeserializationContext context) throws JsonParseException {
False,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,94,/ TODO
False,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,95,hrow new UnsupportedOperationException();
False,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,98,"ublic JsonElement serialize(Map<?, ?> src, Type typeOfSrc, JsonSerializationContext context) {"
False,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,99,/ TODO
False,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java,100,hrow new UnsupportedOperationException();
False,gson/src/main/java/com/google/gson/internal/$Gson$Types.java,gson/src/main/java/com/google/gson/internal/$Gson$Types.java,326,arameterizedType mapParameterizedType = (ParameterizedType) mapType;
False,gson/src/main/java/com/google/gson/internal/$Gson$Types.java,gson/src/main/java/com/google/gson/internal/$Gson$Types.java,327,eturn mapParameterizedType.getActualTypeArguments();
True,gson/src/main/java/com/google/gson/internal/$Gson$Types.java,gson/src/main/java/com/google/gson/internal/$Gson$Types.java,326,// TODO: strip wildcards?
True,gson/src/main/java/com/google/gson/internal/$Gson$Types.java,gson/src/main/java/com/google/gson/internal/$Gson$Types.java,327,if (mapType instanceof ParameterizedType) {
True,gson/src/main/java/com/google/gson/internal/$Gson$Types.java,gson/src/main/java/com/google/gson/internal/$Gson$Types.java,328,ParameterizedType mapParameterizedType = (ParameterizedType) mapType;
True,gson/src/main/java/com/google/gson/internal/$Gson$Types.java,gson/src/main/java/com/google/gson/internal/$Gson$Types.java,329,return mapParameterizedType.getActualTypeArguments();
True,gson/src/main/java/com/google/gson/internal/$Gson$Types.java,gson/src/main/java/com/google/gson/internal/$Gson$Types.java,331,"return new Type[] { Object.class, Object.class };"
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,19,import com.google.gson.JsonElement;
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,20,import com.google.gson.JsonPrimitive;
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,21,import com.google.gson.JsonSyntaxException;
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,25,import com.google.gson.internal.Streams;
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,32,import java.util.ArrayList;
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,33,import java.util.List;
False,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,31, Adapt a map whose keys are any type.
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,37,* Adapts maps to either JSON objects or JSON arrays.
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,39,* <h3>Maps as JSON objects</h3>
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,40,"* For primitive keys or when complex map key serialization is not enabled, this"
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,41,* converts Java {@link Map Maps} to JSON Objects. This requires that map keys
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,42,* can be serialized as strings; this is insufficient for some key types. For
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,43,"* example, consider a map whose keys are points on a grid. The default JSON"
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,44,* form encodes reasonably: <pre>   {@code
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,45,"*   Map<Point, String> original = new LinkedHashMap<Point, String>();"
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,46,"*   original.put(new Point(5, 6), ""a"");"
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,47,"*   original.put(new Point(8, 8), ""b"");"
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,48,"*   System.out.println(gson.toJson(original, type));"
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,49,* }</pre>
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,50,* The above code prints this JSON object:<pre>   {@code
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,52,"*     ""(5,6)"": ""a"","
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,53,"*     ""(8,8)"": ""b"""
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,55,* }</pre>
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,56,* But GSON is unable to deserialize this value because the JSON string name is
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,57,* just the {@link Object#toString() toString()} of the map key. Attempting to
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,58,* convert the above JSON to an object fails with a parse exception:
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,59,"* <pre>com.google.gson.JsonParseException: Expecting object found: ""(5,6)"""
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,60,*   at com.google.gson.JsonObjectDeserializationVisitor.visitFieldUsingCustomHandler
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,61,*   at com.google.gson.ObjectNavigator.navigateClassFields
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,62,*   ...</pre>
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,64,* <h3>Maps as JSON arrays</h3>
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,65,* An alternative approach taken by this type adapter when it is required and
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,66,* complex map key serialization is enabled is to encode maps as arrays of map
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,67,* entries. Each map entry is a two element array containing a key and a value.
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,68,* This approach is more flexible because any type can be used as the map's key;
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,69,* not just strings. But it's also less portable because the receiver of such
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,70,* JSON must be aware of the map entry convention.
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,72,* <p>Register this adapter when you are creating your GSON instance.
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,73,* <pre>   {@code
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,74,*   Gson gson = new GsonBuilder()
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,75,"*     .registerTypeAdapter(Map.class, new MapAsArrayTypeAdapter())"
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,76,*     .create();
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,77,* }</pre>
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,78,* This will change the structure of the JSON emitted by the code above. Now we
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,79,* get an array. In this case the arrays elements are map entries:
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,80,* <pre>   {@code
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,84,"*         ""x"": 5,"
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,85,"*         ""y"": 6"
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,87,"*       ""a"","
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,91,"*         ""x"": 8,"
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,92,"*         ""y"": 8"
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,94,"*       ""b"""
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,97,* }</pre>
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,98,* This format will serialize and deserialize just fine as long as this adapter
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,99,* is registered.
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,103,private final boolean complexMapKeySerialization;
False,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,36,ublic MapTypeAdapterFactory(ConstructorConstructor constructorConstructor) {
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,105,"public MapTypeAdapterFactory(ConstructorConstructor constructorConstructor,"
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,106,boolean complexMapKeySerialization) {
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,108,this.complexMapKeySerialization = complexMapKeySerialization;
False,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,49,"ype childGenericType = $Gson$Types.getMapKeyAndValueTypes(type, rawTypeOfSrc)[1];"
False,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,50,ypeAdapter valueAdapter = context.getAdapter(TypeToken.get(childGenericType));
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,120,"Type[] keyAndValueTypes = $Gson$Types.getMapKeyAndValueTypes(type, rawTypeOfSrc);"
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,121,TypeAdapter<?> keyAdapter = context.getAdapter(TypeToken.get(keyAndValueTypes[0]));
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,122,TypeAdapter<?> valueAdapter = context.getAdapter(TypeToken.get(keyAndValueTypes[1]));
False,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,54,"ypeAdapter<T> result = new Adapter(valueAdapter, constructor);"
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,126,"TypeAdapter<T> result = new Adapter(keyAdapter, valueAdapter, constructor);"
False,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,58,"rivate final class Adapter<V> extends TypeAdapter<Map<?, V>> {"
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,130,"private final class Adapter<K, V> extends TypeAdapter<Map<K, V>> {"
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,131,private final TypeAdapter<K> keyTypeAdapter;
False,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,60,"rivate final ObjectConstructor<? extends Map<String, V>> constructor;"
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,133,"private final ObjectConstructor<? extends Map<K, V>> constructor;"
False,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,62,"ublic Adapter(TypeAdapter<V> valueTypeAdapter,"
False,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,63,"bjectConstructor<? extends Map<String, V>> constructor) {"
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,135,"public Adapter(TypeAdapter<K> keyTypeAdapter, TypeAdapter<V> valueTypeAdapter,"
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,136,"ObjectConstructor<? extends Map<K, V>> constructor) {"
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,137,this.keyTypeAdapter = keyTypeAdapter;
False,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,68,"ublic Map<?, V> read(JsonReader reader) throws IOException {"
False,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,69,f (reader.peek() == JsonToken.NULL) {
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,142,"public Map<K, V> read(JsonReader reader) throws IOException {"
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,143,JsonToken peek = reader.peek();
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,144,if (peek == JsonToken.NULL) {
False,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,74,"ap<String, V> map = constructor.construct();"
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,149,"Map<K, V> map = constructor.construct();"
False,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,76,eader.beginObject();
False,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,77,hile (reader.hasNext()) {
False,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,78,tring key = reader.nextName();
False,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,79, value = valueTypeAdapter.read(reader);
False,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,80,"ap.put(key, value); // TODO: convert to the map's key type?"
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,151,if (peek == JsonToken.BEGIN_ARRAY) {
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,152,reader.beginArray();
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,153,while (reader.hasNext()) {
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,154,reader.beginArray(); // entry array
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,155,K key = keyTypeAdapter.read(reader);
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,156,V value = valueTypeAdapter.read(reader);
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,157,"V replaced = map.put(key, value);"
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,158,if (replaced != null) {
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,159,"throw new JsonSyntaxException(""duplicate key: "" + key);"
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,161,reader.endArray();
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,163,reader.endArray();
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,164,} else {
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,165,reader.beginObject();
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,166,while (reader.hasNext()) {
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,167,String keyString = reader.nextName();
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,168,K key = keyTypeAdapter.fromJsonElement(new JsonPrimitive(keyString));
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,169,V value = valueTypeAdapter.read(reader);
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,170,"V replaced = map.put(key, value);"
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,171,if (replaced != null) {
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,172,"throw new JsonSyntaxException(""duplicate key: "" + key);"
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,175,reader.endObject();
False,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,82,eader.endObject();
False,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,86,"ublic void write(JsonWriter writer, Map<?, V> map) throws IOException {"
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,180,"public void write(JsonWriter writer, Map<K, V> map) throws IOException {"
False,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,92,riter.beginObject();
False,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,93,"or (Map.Entry<?, V> entry : map.entrySet()) {"
False,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,94,tring key = String.valueOf(entry.getKey());
False,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,95,riter.name(key);
False,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,96,"alueTypeAdapter.write(writer, entry.getValue());"
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,186,boolean hasComplexKeys = false;
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,187,List<JsonElement> keys = new ArrayList<JsonElement>(map.size());
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,189,List<V> values = new ArrayList<V>(map.size());
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,190,"for (Map.Entry<K, V> entry : map.entrySet()) {"
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,191,JsonElement keyElement = keyTypeAdapter.toJsonElement(entry.getKey());
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,192,keys.add(keyElement);
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,193,values.add(entry.getValue());
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,194,hasComplexKeys |= keyElement.isJsonArray() || keyElement.isJsonObject();
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,197,if (complexMapKeySerialization && hasComplexKeys) {
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,198,writer.beginArray();
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,199,for (int i = 0; i < keys.size(); i++) {
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,200,writer.beginArray(); // entry array
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,201,"Streams.write(keys.get(i), true, writer);"
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,202,"valueTypeAdapter.write(writer, values.get(i));"
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,203,writer.endArray();
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,205,writer.endArray();
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,206,} else {
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,207,writer.beginObject();
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,208,for (int i = 0; i < keys.size(); i++) {
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,209,JsonElement keyElement = keys.get(i);
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,210,writer.name(keyToString(keyElement));
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,211,"valueTypeAdapter.write(writer, values.get(i));"
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,213,writer.endObject();
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,217,private String keyToString(JsonElement keyElement) {
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,218,if (keyElement.isJsonPrimitive()) {
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,219,JsonPrimitive primitive = keyElement.getAsJsonPrimitive();
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,220,if (primitive.isNumber()) {
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,221,return String.valueOf(primitive.getAsNumber());
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,222,} else if (primitive.isBoolean()) {
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,223,return Boolean.toString(primitive.getAsBoolean());
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,224,} else if (primitive.isString()) {
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,225,return primitive.getAsString();
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,226,} else {
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,227,throw new AssertionError();
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,229,} else if (keyElement.isJsonNull()) {
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,230,"return ""null"";"
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,231,} else {
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,232,throw new AssertionError();
False,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,98,riter.endObject();
False,gson/src/test/java/com/google/gson/FunctionWithInternalDependenciesTest.java,gson/src/test/java/com/google/gson/FunctionWithInternalDependenciesTest.java,42,"efaultTypeAdapters.getDefaultDeserializers(), Gson.DEFAULT_JSON_NON_EXECUTABLE, true,"
False,gson/src/test/java/com/google/gson/FunctionWithInternalDependenciesTest.java,gson/src/test/java/com/google/gson/FunctionWithInternalDependenciesTest.java,43,"alse, false, LongSerializationPolicy.DEFAULT);"
True,gson/src/test/java/com/google/gson/FunctionWithInternalDependenciesTest.java,gson/src/test/java/com/google/gson/FunctionWithInternalDependenciesTest.java,42,"DefaultTypeAdapters.getDefaultDeserializers(), false, Gson.DEFAULT_JSON_NON_EXECUTABLE,"
True,gson/src/test/java/com/google/gson/FunctionWithInternalDependenciesTest.java,gson/src/test/java/com/google/gson/FunctionWithInternalDependenciesTest.java,43,"true, false, false, LongSerializationPolicy.DEFAULT);"
False,gson/src/test/java/com/google/gson/functional/MapAsArrayTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/MapAsArrayTypeAdapterTest.java,56,ublic void testTwoTypesCollapseToOneSerialize() {
True,gson/src/test/java/com/google/gson/functional/MapAsArrayTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/MapAsArrayTypeAdapterTest.java,56,public void disabled_testTwoTypesCollapseToOneSerialize() {
False,gson/src/test/java/com/google/gson/functional/MapAsArrayTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/MapAsArrayTypeAdapterTest.java,66,ail();
True,gson/src/test/java/com/google/gson/functional/MapAsArrayTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/MapAsArrayTypeAdapterTest.java,66,fail(); // we no longer hash keys at serialization time
False,gson/src/test/java/com/google/gson/internal/ParameterizedTypeHandlerMapTest.java,gson/src/test/java/com/google/gson/internal/ParameterizedTypeHandlerMapTest.java,21,mport com.google.gson.internal.ParameterizedTypeHandlerMap;
False,gson/src/test/java/com/google/gson/internal/ParameterizedTypeHandlerMapTest.java,gson/src/test/java/com/google/gson/internal/ParameterizedTypeHandlerMapTest.java,24,mport junit.framework.TestCase;
True,gson/src/test/java/com/google/gson/internal/ParameterizedTypeHandlerMapTest.java,gson/src/test/java/com/google/gson/internal/ParameterizedTypeHandlerMapTest.java,24,import junit.framework.TestCase;

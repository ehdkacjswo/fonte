is_addition,old_file_path,new_file_path,line_num,content
False,gson/src/main/java/com/google/gson/internal/$Gson$Types.java,gson/src/main/java/com/google/gson/internal/$Gson$Types.java,78,"eturn new WildcardTypeImpl(new Type[] { bound }, EMPTY_TYPE_ARRAY);"
True,gson/src/main/java/com/google/gson/internal/$Gson$Types.java,gson/src/main/java/com/google/gson/internal/$Gson$Types.java,78,Type[] upperBounds;
True,gson/src/main/java/com/google/gson/internal/$Gson$Types.java,gson/src/main/java/com/google/gson/internal/$Gson$Types.java,79,if (bound instanceof WildcardType) {
True,gson/src/main/java/com/google/gson/internal/$Gson$Types.java,gson/src/main/java/com/google/gson/internal/$Gson$Types.java,80,upperBounds = ((WildcardType) bound).getUpperBounds();
True,gson/src/main/java/com/google/gson/internal/$Gson$Types.java,gson/src/main/java/com/google/gson/internal/$Gson$Types.java,81,} else {
True,gson/src/main/java/com/google/gson/internal/$Gson$Types.java,gson/src/main/java/com/google/gson/internal/$Gson$Types.java,82,upperBounds = new Type[] { bound };
True,gson/src/main/java/com/google/gson/internal/$Gson$Types.java,gson/src/main/java/com/google/gson/internal/$Gson$Types.java,84,"return new WildcardTypeImpl(upperBounds, EMPTY_TYPE_ARRAY);"
False,gson/src/main/java/com/google/gson/internal/$Gson$Types.java,gson/src/main/java/com/google/gson/internal/$Gson$Types.java,87,"eturn new WildcardTypeImpl(new Type[] { Object.class }, new Type[] { bound });"
True,gson/src/main/java/com/google/gson/internal/$Gson$Types.java,gson/src/main/java/com/google/gson/internal/$Gson$Types.java,93,Type[] lowerBounds;
True,gson/src/main/java/com/google/gson/internal/$Gson$Types.java,gson/src/main/java/com/google/gson/internal/$Gson$Types.java,94,if (bound instanceof WildcardType) {
True,gson/src/main/java/com/google/gson/internal/$Gson$Types.java,gson/src/main/java/com/google/gson/internal/$Gson$Types.java,95,lowerBounds = ((WildcardType) bound).getLowerBounds();
True,gson/src/main/java/com/google/gson/internal/$Gson$Types.java,gson/src/main/java/com/google/gson/internal/$Gson$Types.java,96,} else {
True,gson/src/main/java/com/google/gson/internal/$Gson$Types.java,gson/src/main/java/com/google/gson/internal/$Gson$Types.java,97,lowerBounds = new Type[] { bound };
True,gson/src/main/java/com/google/gson/internal/$Gson$Types.java,gson/src/main/java/com/google/gson/internal/$Gson$Types.java,99,"return new WildcardTypeImpl(new Type[] { Object.class }, lowerBounds);"
True,gson/src/test/java/com/google/gson/internal/bind/RecursiveTypesResolveTest.java,gson/src/test/java/com/google/gson/internal/bind/RecursiveTypesResolveTest.java,2,* Copyright (C) 2017 Gson Authors
True,gson/src/test/java/com/google/gson/internal/bind/RecursiveTypesResolveTest.java,gson/src/test/java/com/google/gson/internal/bind/RecursiveTypesResolveTest.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/test/java/com/google/gson/internal/bind/RecursiveTypesResolveTest.java,gson/src/test/java/com/google/gson/internal/bind/RecursiveTypesResolveTest.java,5,* you may not use this file except in compliance with the License.
True,gson/src/test/java/com/google/gson/internal/bind/RecursiveTypesResolveTest.java,gson/src/test/java/com/google/gson/internal/bind/RecursiveTypesResolveTest.java,6,* You may obtain a copy of the License at
True,gson/src/test/java/com/google/gson/internal/bind/RecursiveTypesResolveTest.java,gson/src/test/java/com/google/gson/internal/bind/RecursiveTypesResolveTest.java,8,* http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/test/java/com/google/gson/internal/bind/RecursiveTypesResolveTest.java,gson/src/test/java/com/google/gson/internal/bind/RecursiveTypesResolveTest.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/test/java/com/google/gson/internal/bind/RecursiveTypesResolveTest.java,gson/src/test/java/com/google/gson/internal/bind/RecursiveTypesResolveTest.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/test/java/com/google/gson/internal/bind/RecursiveTypesResolveTest.java,gson/src/test/java/com/google/gson/internal/bind/RecursiveTypesResolveTest.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/test/java/com/google/gson/internal/bind/RecursiveTypesResolveTest.java,gson/src/test/java/com/google/gson/internal/bind/RecursiveTypesResolveTest.java,13,* See the License for the specific language governing permissions and
True,gson/src/test/java/com/google/gson/internal/bind/RecursiveTypesResolveTest.java,gson/src/test/java/com/google/gson/internal/bind/RecursiveTypesResolveTest.java,14,* limitations under the License.
True,gson/src/test/java/com/google/gson/internal/bind/RecursiveTypesResolveTest.java,gson/src/test/java/com/google/gson/internal/bind/RecursiveTypesResolveTest.java,17,package com.google.gson.internal.bind;
True,gson/src/test/java/com/google/gson/internal/bind/RecursiveTypesResolveTest.java,gson/src/test/java/com/google/gson/internal/bind/RecursiveTypesResolveTest.java,19,import com.google.gson.Gson;
True,gson/src/test/java/com/google/gson/internal/bind/RecursiveTypesResolveTest.java,gson/src/test/java/com/google/gson/internal/bind/RecursiveTypesResolveTest.java,20,import com.google.gson.TypeAdapter;
True,gson/src/test/java/com/google/gson/internal/bind/RecursiveTypesResolveTest.java,gson/src/test/java/com/google/gson/internal/bind/RecursiveTypesResolveTest.java,21,import com.google.gson.internal.$Gson$Types;
True,gson/src/test/java/com/google/gson/internal/bind/RecursiveTypesResolveTest.java,gson/src/test/java/com/google/gson/internal/bind/RecursiveTypesResolveTest.java,22,import junit.framework.TestCase;
True,gson/src/test/java/com/google/gson/internal/bind/RecursiveTypesResolveTest.java,gson/src/test/java/com/google/gson/internal/bind/RecursiveTypesResolveTest.java,24,import java.io.PrintStream;
True,gson/src/test/java/com/google/gson/internal/bind/RecursiveTypesResolveTest.java,gson/src/test/java/com/google/gson/internal/bind/RecursiveTypesResolveTest.java,25,import java.lang.ref.WeakReference;
True,gson/src/test/java/com/google/gson/internal/bind/RecursiveTypesResolveTest.java,gson/src/test/java/com/google/gson/internal/bind/RecursiveTypesResolveTest.java,28,"* Test fixes for infinite recursion on {@link $Gson$Types#resolve(java.lang.reflect.Type, Class,"
True,gson/src/test/java/com/google/gson/internal/bind/RecursiveTypesResolveTest.java,gson/src/test/java/com/google/gson/internal/bind/RecursiveTypesResolveTest.java,29,"* java.lang.reflect.Type)}, described at <a href=""https://github.com/google/gson/issues/440"">Issue #440</a>"
True,gson/src/test/java/com/google/gson/internal/bind/RecursiveTypesResolveTest.java,gson/src/test/java/com/google/gson/internal/bind/RecursiveTypesResolveTest.java,30,* and similar issues.
True,gson/src/test/java/com/google/gson/internal/bind/RecursiveTypesResolveTest.java,gson/src/test/java/com/google/gson/internal/bind/RecursiveTypesResolveTest.java,31,* <p>
True,gson/src/test/java/com/google/gson/internal/bind/RecursiveTypesResolveTest.java,gson/src/test/java/com/google/gson/internal/bind/RecursiveTypesResolveTest.java,32,* These tests originally caused {@link StackOverflowError} because of infinite recursion on attempts to
True,gson/src/test/java/com/google/gson/internal/bind/RecursiveTypesResolveTest.java,gson/src/test/java/com/google/gson/internal/bind/RecursiveTypesResolveTest.java,33,"* resolve generics on types, with an intermediate types like 'Foo2&lt;? extends ? super ? extends ... ? extends A&gt;'"
True,gson/src/test/java/com/google/gson/internal/bind/RecursiveTypesResolveTest.java,gson/src/test/java/com/google/gson/internal/bind/RecursiveTypesResolveTest.java,35,public class RecursiveTypesResolveTest extends TestCase {
True,gson/src/test/java/com/google/gson/internal/bind/RecursiveTypesResolveTest.java,gson/src/test/java/com/google/gson/internal/bind/RecursiveTypesResolveTest.java,37,private static class Foo1<A> {
True,gson/src/test/java/com/google/gson/internal/bind/RecursiveTypesResolveTest.java,gson/src/test/java/com/google/gson/internal/bind/RecursiveTypesResolveTest.java,38,public Foo2<? extends A> foo2;
True,gson/src/test/java/com/google/gson/internal/bind/RecursiveTypesResolveTest.java,gson/src/test/java/com/google/gson/internal/bind/RecursiveTypesResolveTest.java,41,private static class Foo2<B> {
True,gson/src/test/java/com/google/gson/internal/bind/RecursiveTypesResolveTest.java,gson/src/test/java/com/google/gson/internal/bind/RecursiveTypesResolveTest.java,42,public Foo1<? super B> foo1;
True,gson/src/test/java/com/google/gson/internal/bind/RecursiveTypesResolveTest.java,gson/src/test/java/com/google/gson/internal/bind/RecursiveTypesResolveTest.java,46,* Test simplest case of recursion.
True,gson/src/test/java/com/google/gson/internal/bind/RecursiveTypesResolveTest.java,gson/src/test/java/com/google/gson/internal/bind/RecursiveTypesResolveTest.java,48,public void testRecursiveResolveSimple() {
True,gson/src/test/java/com/google/gson/internal/bind/RecursiveTypesResolveTest.java,gson/src/test/java/com/google/gson/internal/bind/RecursiveTypesResolveTest.java,49,TypeAdapter<Foo1> adapter = new Gson().getAdapter(Foo1.class);
True,gson/src/test/java/com/google/gson/internal/bind/RecursiveTypesResolveTest.java,gson/src/test/java/com/google/gson/internal/bind/RecursiveTypesResolveTest.java,50,assertNotNull(adapter);
True,gson/src/test/java/com/google/gson/internal/bind/RecursiveTypesResolveTest.java,gson/src/test/java/com/google/gson/internal/bind/RecursiveTypesResolveTest.java,54,"// Real-world samples, found in Issues #603 and #440."
True,gson/src/test/java/com/google/gson/internal/bind/RecursiveTypesResolveTest.java,gson/src/test/java/com/google/gson/internal/bind/RecursiveTypesResolveTest.java,56,public void testIssue603PrintStream() {
True,gson/src/test/java/com/google/gson/internal/bind/RecursiveTypesResolveTest.java,gson/src/test/java/com/google/gson/internal/bind/RecursiveTypesResolveTest.java,57,TypeAdapter<PrintStream> adapter = new Gson().getAdapter(PrintStream.class);
True,gson/src/test/java/com/google/gson/internal/bind/RecursiveTypesResolveTest.java,gson/src/test/java/com/google/gson/internal/bind/RecursiveTypesResolveTest.java,58,assertNotNull(adapter);
True,gson/src/test/java/com/google/gson/internal/bind/RecursiveTypesResolveTest.java,gson/src/test/java/com/google/gson/internal/bind/RecursiveTypesResolveTest.java,61,public void testIssue440WeakReference() throws Exception {
True,gson/src/test/java/com/google/gson/internal/bind/RecursiveTypesResolveTest.java,gson/src/test/java/com/google/gson/internal/bind/RecursiveTypesResolveTest.java,62,TypeAdapter<WeakReference> adapter = new Gson().getAdapter(WeakReference.class);
True,gson/src/test/java/com/google/gson/internal/bind/RecursiveTypesResolveTest.java,gson/src/test/java/com/google/gson/internal/bind/RecursiveTypesResolveTest.java,63,assertNotNull(adapter);
True,gson/src/test/java/com/google/gson/internal/bind/RecursiveTypesResolveTest.java,gson/src/test/java/com/google/gson/internal/bind/RecursiveTypesResolveTest.java,67,// Tests belows check the behaviour of the methods changed for the fix
True,gson/src/test/java/com/google/gson/internal/bind/RecursiveTypesResolveTest.java,gson/src/test/java/com/google/gson/internal/bind/RecursiveTypesResolveTest.java,70,public void testDoubleSupertype() {
True,gson/src/test/java/com/google/gson/internal/bind/RecursiveTypesResolveTest.java,gson/src/test/java/com/google/gson/internal/bind/RecursiveTypesResolveTest.java,71,"assertEquals($Gson$Types.supertypeOf(Number.class),"
True,gson/src/test/java/com/google/gson/internal/bind/RecursiveTypesResolveTest.java,gson/src/test/java/com/google/gson/internal/bind/RecursiveTypesResolveTest.java,72,$Gson$Types.supertypeOf($Gson$Types.supertypeOf(Number.class)));
True,gson/src/test/java/com/google/gson/internal/bind/RecursiveTypesResolveTest.java,gson/src/test/java/com/google/gson/internal/bind/RecursiveTypesResolveTest.java,75,public void testDoubleSubtype() {
True,gson/src/test/java/com/google/gson/internal/bind/RecursiveTypesResolveTest.java,gson/src/test/java/com/google/gson/internal/bind/RecursiveTypesResolveTest.java,76,"assertEquals($Gson$Types.subtypeOf(Number.class),"
True,gson/src/test/java/com/google/gson/internal/bind/RecursiveTypesResolveTest.java,gson/src/test/java/com/google/gson/internal/bind/RecursiveTypesResolveTest.java,77,$Gson$Types.subtypeOf($Gson$Types.subtypeOf(Number.class)));
True,gson/src/test/java/com/google/gson/internal/bind/RecursiveTypesResolveTest.java,gson/src/test/java/com/google/gson/internal/bind/RecursiveTypesResolveTest.java,80,public void testSuperSubtype() {
True,gson/src/test/java/com/google/gson/internal/bind/RecursiveTypesResolveTest.java,gson/src/test/java/com/google/gson/internal/bind/RecursiveTypesResolveTest.java,81,"assertEquals($Gson$Types.subtypeOf(Object.class),"
True,gson/src/test/java/com/google/gson/internal/bind/RecursiveTypesResolveTest.java,gson/src/test/java/com/google/gson/internal/bind/RecursiveTypesResolveTest.java,82,$Gson$Types.supertypeOf($Gson$Types.subtypeOf(Number.class)));
True,gson/src/test/java/com/google/gson/internal/bind/RecursiveTypesResolveTest.java,gson/src/test/java/com/google/gson/internal/bind/RecursiveTypesResolveTest.java,85,public void testSubSupertype() {
True,gson/src/test/java/com/google/gson/internal/bind/RecursiveTypesResolveTest.java,gson/src/test/java/com/google/gson/internal/bind/RecursiveTypesResolveTest.java,86,"assertEquals($Gson$Types.subtypeOf(Object.class),"
True,gson/src/test/java/com/google/gson/internal/bind/RecursiveTypesResolveTest.java,gson/src/test/java/com/google/gson/internal/bind/RecursiveTypesResolveTest.java,87,$Gson$Types.subtypeOf($Gson$Types.supertypeOf(Number.class)));

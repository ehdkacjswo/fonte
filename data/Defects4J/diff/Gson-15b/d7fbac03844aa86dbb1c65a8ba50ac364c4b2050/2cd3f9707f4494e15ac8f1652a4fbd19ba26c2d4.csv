is_addition,old_file_path,new_file_path,line_num,content
True,extras/src/main/java/com/google/gson/typeadapters/RuntimeTypeAdapterFactory.java,extras/src/main/java/com/google/gson/typeadapters/RuntimeTypeAdapterFactory.java,21,import com.google.gson.JsonIOException;
True,extras/src/main/java/com/google/gson/typeadapters/RuntimeTypeAdapterFactory.java,extras/src/main/java/com/google/gson/typeadapters/RuntimeTypeAdapterFactory.java,26,import com.google.gson.TypeAdapterFactory;
True,extras/src/main/java/com/google/gson/typeadapters/RuntimeTypeAdapterFactory.java,extras/src/main/java/com/google/gson/typeadapters/RuntimeTypeAdapterFactory.java,28,import com.google.gson.internal.bind.JsonElementWriter;
True,extras/src/main/java/com/google/gson/typeadapters/RuntimeTypeAdapterFactory.java,extras/src/main/java/com/google/gson/typeadapters/RuntimeTypeAdapterFactory.java,29,import com.google.gson.internal.bind.JsonTreeReader;
False,extras/src/main/java/com/google/gson/typeadapters/RuntimeTypeAdapterFactory.java,extras/src/main/java/com/google/gson/typeadapters/RuntimeTypeAdapterFactory.java,122,ublic final class RuntimeTypeAdapterFactory<T> implements TypeAdapter.Factory {
True,extras/src/main/java/com/google/gson/typeadapters/RuntimeTypeAdapterFactory.java,extras/src/main/java/com/google/gson/typeadapters/RuntimeTypeAdapterFactory.java,126,public final class RuntimeTypeAdapterFactory<T> implements TypeAdapterFactory {
False,extras/src/main/java/com/google/gson/typeadapters/RuntimeTypeAdapterFactory.java,extras/src/main/java/com/google/gson/typeadapters/RuntimeTypeAdapterFactory.java,212,eturn delegate.fromJsonTree(jsonElement);
True,extras/src/main/java/com/google/gson/typeadapters/RuntimeTypeAdapterFactory.java,extras/src/main/java/com/google/gson/typeadapters/RuntimeTypeAdapterFactory.java,216,"return fromJsonTree(delegate, jsonElement);"
True,extras/src/main/java/com/google/gson/typeadapters/RuntimeTypeAdapterFactory.java,extras/src/main/java/com/google/gson/typeadapters/RuntimeTypeAdapterFactory.java,219,// TODO: remove this when TypeAdapter.fromJsonTree() is public
True,extras/src/main/java/com/google/gson/typeadapters/RuntimeTypeAdapterFactory.java,extras/src/main/java/com/google/gson/typeadapters/RuntimeTypeAdapterFactory.java,220,"private T fromJsonTree(TypeAdapter<T> delegate, JsonElement jsonTree) {"
True,extras/src/main/java/com/google/gson/typeadapters/RuntimeTypeAdapterFactory.java,extras/src/main/java/com/google/gson/typeadapters/RuntimeTypeAdapterFactory.java,221,try {
True,extras/src/main/java/com/google/gson/typeadapters/RuntimeTypeAdapterFactory.java,extras/src/main/java/com/google/gson/typeadapters/RuntimeTypeAdapterFactory.java,222,JsonReader jsonReader = new JsonTreeReader(jsonTree);
True,extras/src/main/java/com/google/gson/typeadapters/RuntimeTypeAdapterFactory.java,extras/src/main/java/com/google/gson/typeadapters/RuntimeTypeAdapterFactory.java,223,jsonReader.setLenient(true);
True,extras/src/main/java/com/google/gson/typeadapters/RuntimeTypeAdapterFactory.java,extras/src/main/java/com/google/gson/typeadapters/RuntimeTypeAdapterFactory.java,224,return delegate.read(jsonReader);
True,extras/src/main/java/com/google/gson/typeadapters/RuntimeTypeAdapterFactory.java,extras/src/main/java/com/google/gson/typeadapters/RuntimeTypeAdapterFactory.java,225,} catch (IOException e) {
True,extras/src/main/java/com/google/gson/typeadapters/RuntimeTypeAdapterFactory.java,extras/src/main/java/com/google/gson/typeadapters/RuntimeTypeAdapterFactory.java,226,throw new JsonIOException(e);
False,extras/src/main/java/com/google/gson/typeadapters/RuntimeTypeAdapterFactory.java,extras/src/main/java/com/google/gson/typeadapters/RuntimeTypeAdapterFactory.java,224,sonObject jsonObject = delegate.toJsonTree(value).getAsJsonObject();
True,extras/src/main/java/com/google/gson/typeadapters/RuntimeTypeAdapterFactory.java,extras/src/main/java/com/google/gson/typeadapters/RuntimeTypeAdapterFactory.java,239,"JsonObject jsonObject = toJsonTree(delegate, value).getAsJsonObject();"
True,extras/src/main/java/com/google/gson/typeadapters/RuntimeTypeAdapterFactory.java,extras/src/main/java/com/google/gson/typeadapters/RuntimeTypeAdapterFactory.java,252,// TODO: remove this when TypeAdapter.toJsonTree() is public
True,extras/src/main/java/com/google/gson/typeadapters/RuntimeTypeAdapterFactory.java,extras/src/main/java/com/google/gson/typeadapters/RuntimeTypeAdapterFactory.java,253,"private JsonElement toJsonTree(TypeAdapter<T> delegate, T value) {"
True,extras/src/main/java/com/google/gson/typeadapters/RuntimeTypeAdapterFactory.java,extras/src/main/java/com/google/gson/typeadapters/RuntimeTypeAdapterFactory.java,254,try {
True,extras/src/main/java/com/google/gson/typeadapters/RuntimeTypeAdapterFactory.java,extras/src/main/java/com/google/gson/typeadapters/RuntimeTypeAdapterFactory.java,255,JsonElementWriter jsonWriter = new JsonElementWriter();
True,extras/src/main/java/com/google/gson/typeadapters/RuntimeTypeAdapterFactory.java,extras/src/main/java/com/google/gson/typeadapters/RuntimeTypeAdapterFactory.java,256,jsonWriter.setLenient(true);
True,extras/src/main/java/com/google/gson/typeadapters/RuntimeTypeAdapterFactory.java,extras/src/main/java/com/google/gson/typeadapters/RuntimeTypeAdapterFactory.java,257,"delegate.write(jsonWriter, value);"
True,extras/src/main/java/com/google/gson/typeadapters/RuntimeTypeAdapterFactory.java,extras/src/main/java/com/google/gson/typeadapters/RuntimeTypeAdapterFactory.java,258,return jsonWriter.get();
True,extras/src/main/java/com/google/gson/typeadapters/RuntimeTypeAdapterFactory.java,extras/src/main/java/com/google/gson/typeadapters/RuntimeTypeAdapterFactory.java,259,} catch (IOException e) {
True,extras/src/main/java/com/google/gson/typeadapters/RuntimeTypeAdapterFactory.java,extras/src/main/java/com/google/gson/typeadapters/RuntimeTypeAdapterFactory.java,260,throw new JsonIOException(e);
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,120,rivate final List<TypeAdapter.Factory> factories;
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,120,private final List<TypeAdapterFactory> factories;
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,182,ollections.<TypeAdapter.Factory>emptyList());
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,182,Collections.<TypeAdapterFactory>emptyList());
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,190,ist<TypeAdapter.Factory> typeAdapterFactories) {
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,190,List<TypeAdapterFactory> typeAdapterFactories) {
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,197,ypeAdapter.Factory reflectiveTypeAdapterFactory = new ReflectiveTypeAdapterFactory(
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,197,TypeAdapterFactory reflectiveTypeAdapterFactory = new ReflectiveTypeAdapterFactory(
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,201,ist<TypeAdapter.Factory> factories = new ArrayList<TypeAdapter.Factory>();
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,201,List<TypeAdapterFactory> factories = new ArrayList<TypeAdapterFactory>();
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,351,or (TypeAdapter.Factory factory : factories) {
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,351,for (TypeAdapterFactory factory : factories) {
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,373,"ublic <T> TypeAdapter<T> getNextAdapter(TypeAdapter.Factory skipPast, TypeToken<T> type) {"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,373,"public <T> TypeAdapter<T> getNextAdapter(TypeAdapterFactory skipPast, TypeToken<T> type) {"
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,376,or (TypeAdapter.Factory factory : factories) {
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,376,for (TypeAdapterFactory factory : factories) {
False,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,75,rivate final List<TypeAdapter.Factory> factories = new ArrayList<TypeAdapter.Factory>();
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,75,private final List<TypeAdapterFactory> factories = new ArrayList<TypeAdapterFactory>();
False,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,77,rivate final List<TypeAdapter.Factory> hierarchyFactories = new ArrayList<TypeAdapter.Factory>();
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,77,private final List<TypeAdapterFactory> hierarchyFactories = new ArrayList<TypeAdapterFactory>();
False,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,475,ublic GsonBuilder registerTypeAdapterFactory(TypeAdapter.Factory factory) {
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,475,public GsonBuilder registerTypeAdapterFactory(TypeAdapterFactory factory) {
False,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,543,ist<TypeAdapter.Factory> factories = new ArrayList<TypeAdapter.Factory>();
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,543,List<TypeAdapterFactory> factories = new ArrayList<TypeAdapterFactory>();
False,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,556,ist<TypeAdapter.Factory> factories) {
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,556,List<TypeAdapterFactory> factories) {
False,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,36,rivate final Factory skipPast;
True,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,36,private final TypeAdapterFactory skipPast;
False,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,42,"son gson, TypeToken<T> typeToken, Factory skipPast) {"
True,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,42,"Gson gson, TypeToken<T> typeToken, TypeAdapterFactory skipPast) {"
False,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,84,"ublic static Factory newFactory(TypeToken<?> exactType, Object typeAdapter) {"
True,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,84,"public static TypeAdapterFactory newFactory(TypeToken<?> exactType, Object typeAdapter) {"
False,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,92,"ublic static Factory newFactoryWithMatchRawType(TypeToken<?> exactType, Object typeAdapter) {"
True,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,92,public static TypeAdapterFactory newFactoryWithMatchRawType(
True,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,93,"TypeToken<?> exactType, Object typeAdapter) {"
False,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,102,"ublic static Factory newTypeHierarchyFactory(Class<?> hierarchyType, Object typeAdapter) {"
True,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,103,public static TypeAdapterFactory newTypeHierarchyFactory(
True,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,104,"Class<?> hierarchyType, Object typeAdapter) {"
False,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,106,rivate static class SingleTypeFactory implements TypeAdapter.Factory {
True,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,108,private static class SingleTypeFactory implements TypeAdapterFactory {
False,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,286, Creates type adapters for set of related types. Type adapter factories are
False,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,287, most useful when several types share similar structure in their JSON form.
False,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,289, <h3>Example: Converting enums to lowercase</h3>
False,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,290," In this example, we implement a factory that creates type adapters for all"
False,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,291," enums. The type adapters will write enums in lowercase, despite the fact"
False,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,292, that they're defined in {@code CONSTANT_CASE} in the corresponding Java
False,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,293, model: <pre>   {@code
False,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,295,   public class LowercaseEnumTypeAdapterFactory implements TypeAdapter.Factory {
False,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,296,"     public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {"
False,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,297,       Class<T> rawType = (Class<T>) type.getRawType();
False,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,298,       if (!rawType.isEnum()) {
False,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,299,         return null;
False,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,302,"       final Map<String, T> lowercaseToConstant = new HashMap<String, T>();"
False,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,303,       for (T constant : rawType.getEnumConstants()) {
False,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,304,"         lowercaseToConstant.put(toLowercase(constant), constant);"
False,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,307,       return new TypeAdapter<T>() {
False,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,308,"         public void write(JsonWriter out, T value) throws IOException {"
False,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,309,           if (value == null) {
False,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,310,             out.nullValue();
False,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,311,           } else {
False,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,312,             out.value(toLowercase(value));
False,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,316,         public T read(JsonReader reader) throws IOException {
False,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,317,           if (reader.peek() == JsonToken.NULL) {
False,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,318,             reader.nextNull();
False,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,319,             return null;
False,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,320,           } else {
False,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,321,             return lowercaseToConstant.get(reader.nextString());
False,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,327,     private String toLowercase(Object o) {
False,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,328,       return o.toString().toLowerCase(Locale.US);
False,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,331, }</pre>
False,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,333, <p>Type adapter factories select which types they provide type adapters
False,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,334," for. If a factory cannot support a given type, it must return null when"
False,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,335, that type is passed to {@link #create}. Factories should expect {@code
False,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,336, create()} to be called on them for many types and should return null for
False,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,337, most of those types. In the above example the factory returns null for
False,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,338, calls to {@code create()} where {@code type} is not an enum.
False,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,340," <p>A factory is typically called once per type, but the returned type"
False,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,341, adapter may be used many times. It is most efficient to do expensive work
False,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,342, like reflection in {@code create()} so that the type adapter's {@code
False,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,343, read()} and {@code write()} methods can be very fast. In this example the
False,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,344, mapping from lowercase name to enum value is computed eagerly.
False,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,346," <p>As with type adapters, factories must be <i>registered</i> with a {@link"
False,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,347, GsonBuilder} for them to take effect: <pre>   {@code
False,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,349,  GsonBuilder builder = new GsonBuilder();
False,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,350,  builder.registerTypeAdapterFactory(new LowercaseEnumTypeAdapterFactory());
False,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,352,  Gson gson = builder.create();
False,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,353, }</pre>
False,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,354," If multiple factories support the same type, the factory registered earlier"
False,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,355, takes precedence.
False,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,357, <h3>Example: composing other type adapters</h3>
False,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,358, In this example we implement a factory for Guava's {@code Multiset}
False,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,359, collection type. The factory can be used to create type adapters for
False,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,360, multisets of any element type: the type adapter for {@code
False,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,361, Multiset<String>} is different from the type adapter for {@code
False,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,362, Multiset<URL>}.
False,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,364, <p>The type adapter <i>delegates</i> to another type adapter for the
False,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,365, multiset elements. It figures out the element type by reflecting on the
False,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,366, multiset's type token. A {@code Gson} is passed in to {@code create} for
False,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,367, just this purpose: <pre>   {@code
False,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,369,   public class MultisetTypeAdapterFactory implements TypeAdapter.Factory {
False,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,370,"     public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> typeToken) {"
False,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,371,       Type type = typeToken.getType();
False,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,372,       if (typeToken.getRawType() != Multiset.class
False,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,373,           || !(type instanceof ParameterizedType)) {
False,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,374,         return null;
False,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,377,       Type elementType = ((ParameterizedType) type).getActualTypeArguments()[0];
False,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,378,       TypeAdapter<?> elementAdapter = gson.getAdapter(TypeToken.get(elementType));
False,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,379,       return (TypeAdapter<T>) newMultisetAdapter(elementAdapter);
False,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,382,     private <E> TypeAdapter<Multiset<E>> newMultisetAdapter(
False,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,383,         final TypeAdapter<E> elementAdapter) {
False,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,384,       return new TypeAdapter<Multiset<E>>() {
False,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,385,"         public void write(JsonWriter out, Multiset<E> value) throws IOException {"
False,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,386,           if (value == null) {
False,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,387,             out.nullValue();
False,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,388,             return;
False,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,391,           out.beginArray();
False,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,392,           for (Multiset.Entry<E> entry : value.entrySet()) {
False,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,393,             out.value(entry.getCount());
False,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,394,"             elementAdapter.write(out, entry.getElement());"
False,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,396,           out.endArray();
False,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,399,         public Multiset<E> read(JsonReader in) throws IOException {
False,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,400,           if (in.peek() == JsonToken.NULL) {
False,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,401,             in.nextNull();
False,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,402,             return null;
False,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,405,           Multiset<E> result = LinkedHashMultiset.create();
False,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,406,           in.beginArray();
False,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,407,           while (in.hasNext()) {
False,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,408,             int count = in.nextInt();
False,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,409,             E element = elementAdapter.read(in);
False,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,410,"             result.add(element, count);"
False,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,412,           in.endArray();
False,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,413,           return result;
False,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,418, }</pre>
False,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,419, Delegating from one type adapter to another is extremely powerful; it's
False,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,420, the foundation of how Gson converts Java objects and collections. Whenever
False,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,421, possible your factory should retrieve its delegate type adapter in the
False,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,422, {@code create()} method; this ensures potentially-expensive type adapter
False,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,423, creation happens only once.
False,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,425, @since 2.1
False,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,427,ublic interface Factory {
False,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,430," Returns a type adapter for {@code type}, or null if this factory doesn't"
False,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,431, support {@code type}.
False,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,433,"T> TypeAdapter<T> create(Gson gson, TypeToken<T> type);"
True,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,2,* Copyright (C) 2011 Google Inc.
True,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,5,* you may not use this file except in compliance with the License.
True,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,6,* You may obtain a copy of the License at
True,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,13,* See the License for the specific language governing permissions and
True,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,14,* limitations under the License.
True,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,17,package com.google.gson;
True,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,19,import com.google.gson.reflect.TypeToken;
True,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,22,* Creates type adapters for set of related types. Type adapter factories are
True,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,23,* most useful when several types share similar structure in their JSON form.
True,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,25,* <h3>Example: Converting enums to lowercase</h3>
True,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,26,"* In this example, we implement a factory that creates type adapters for all"
True,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,27,"* enums. The type adapters will write enums in lowercase, despite the fact"
True,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,28,* that they're defined in {@code CONSTANT_CASE} in the corresponding Java
True,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,29,* model: <pre>   {@code
True,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,31,*   public class LowercaseEnumTypeAdapterFactory implements TypeAdapter.Factory {
True,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,32,"*     public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {"
True,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,33,*       Class<T> rawType = (Class<T>) type.getRawType();
True,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,34,*       if (!rawType.isEnum()) {
True,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,35,*         return null;
True,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,38,"*       final Map<String, T> lowercaseToConstant = new HashMap<String, T>();"
True,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,39,*       for (T constant : rawType.getEnumConstants()) {
True,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,40,"*         lowercaseToConstant.put(toLowercase(constant), constant);"
True,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,43,*       return new TypeAdapter<T>() {
True,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,44,"*         public void write(JsonWriter out, T value) throws IOException {"
True,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,45,*           if (value == null) {
True,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,46,*             out.nullValue();
True,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,47,*           } else {
True,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,48,*             out.value(toLowercase(value));
True,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,52,*         public T read(JsonReader reader) throws IOException {
True,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,53,*           if (reader.peek() == JsonToken.NULL) {
True,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,54,*             reader.nextNull();
True,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,55,*             return null;
True,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,56,*           } else {
True,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,57,*             return lowercaseToConstant.get(reader.nextString());
True,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,63,*     private String toLowercase(Object o) {
True,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,64,*       return o.toString().toLowerCase(Locale.US);
True,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,67,* }</pre>
True,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,69,* <p>Type adapter factories select which types they provide type adapters
True,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,70,"* for. If a factory cannot support a given type, it must return null when"
True,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,71,* that type is passed to {@link #create}. Factories should expect {@code
True,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,72,* create()} to be called on them for many types and should return null for
True,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,73,* most of those types. In the above example the factory returns null for
True,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,74,* calls to {@code create()} where {@code type} is not an enum.
True,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,76,"* <p>A factory is typically called once per type, but the returned type"
True,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,77,* adapter may be used many times. It is most efficient to do expensive work
True,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,78,* like reflection in {@code create()} so that the type adapter's {@code
True,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,79,* read()} and {@code write()} methods can be very fast. In this example the
True,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,80,* mapping from lowercase name to enum value is computed eagerly.
True,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,82,"* <p>As with type adapters, factories must be <i>registered</i> with a {@link"
True,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,83,* com.google.gson.GsonBuilder} for them to take effect: <pre>   {@code
True,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,85,*  GsonBuilder builder = new GsonBuilder();
True,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,86,*  builder.registerTypeAdapterFactory(new LowercaseEnumTypeAdapterFactory());
True,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,88,*  Gson gson = builder.create();
True,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,89,* }</pre>
True,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,90,"* If multiple factories support the same type, the factory registered earlier"
True,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,91,* takes precedence.
True,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,93,* <h3>Example: composing other type adapters</h3>
True,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,94,* In this example we implement a factory for Guava's {@code Multiset}
True,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,95,* collection type. The factory can be used to create type adapters for
True,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,96,* multisets of any element type: the type adapter for {@code
True,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,97,* Multiset<String>} is different from the type adapter for {@code
True,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,98,* Multiset<URL>}.
True,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,100,* <p>The type adapter <i>delegates</i> to another type adapter for the
True,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,101,* multiset elements. It figures out the element type by reflecting on the
True,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,102,* multiset's type token. A {@code Gson} is passed in to {@code create} for
True,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,103,* just this purpose: <pre>   {@code
True,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,105,*   public class MultisetTypeAdapterFactory implements TypeAdapter.Factory {
True,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,106,"*     public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> typeToken) {"
True,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,107,*       Type type = typeToken.getType();
True,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,108,*       if (typeToken.getRawType() != Multiset.class
True,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,109,*           || !(type instanceof ParameterizedType)) {
True,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,110,*         return null;
True,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,113,*       Type elementType = ((ParameterizedType) type).getActualTypeArguments()[0];
True,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,114,*       TypeAdapter<?> elementAdapter = gson.getAdapter(TypeToken.get(elementType));
True,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,115,*       return (TypeAdapter<T>) newMultisetAdapter(elementAdapter);
True,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,118,*     private <E> TypeAdapter<Multiset<E>> newMultisetAdapter(
True,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,119,*         final TypeAdapter<E> elementAdapter) {
True,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,120,*       return new TypeAdapter<Multiset<E>>() {
True,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,121,"*         public void write(JsonWriter out, Multiset<E> value) throws IOException {"
True,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,122,*           if (value == null) {
True,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,123,*             out.nullValue();
True,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,124,*             return;
True,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,127,*           out.beginArray();
True,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,128,*           for (Multiset.Entry<E> entry : value.entrySet()) {
True,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,129,*             out.value(entry.getCount());
True,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,130,"*             elementAdapter.write(out, entry.getElement());"
True,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,132,*           out.endArray();
True,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,135,*         public Multiset<E> read(JsonReader in) throws IOException {
True,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,136,*           if (in.peek() == JsonToken.NULL) {
True,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,137,*             in.nextNull();
True,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,138,*             return null;
True,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,141,*           Multiset<E> result = LinkedHashMultiset.create();
True,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,142,*           in.beginArray();
True,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,143,*           while (in.hasNext()) {
True,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,144,*             int count = in.nextInt();
True,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,145,*             E element = elementAdapter.read(in);
True,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,146,"*             result.add(element, count);"
True,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,148,*           in.endArray();
True,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,149,*           return result;
True,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,154,* }</pre>
True,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,155,* Delegating from one type adapter to another is extremely powerful; it's
True,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,156,* the foundation of how Gson converts Java objects and collections. Whenever
True,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,157,* possible your factory should retrieve its delegate type adapter in the
True,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,158,* {@code create()} method; this ensures potentially-expensive type adapter
True,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,159,* creation happens only once.
True,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,161,* @since 2.1
True,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,163,public interface TypeAdapterFactory {
True,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,166,"* Returns a type adapter for {@code type}, or null if this factory doesn't"
True,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,167,* support {@code type}.
True,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,gson/src/main/java/com/google/gson/TypeAdapterFactory.java,169,"<T> TypeAdapter<T> create(Gson gson, TypeToken<T> type);"
True,gson/src/main/java/com/google/gson/internal/Excluder.java,gson/src/main/java/com/google/gson/internal/Excluder.java,23,import com.google.gson.TypeAdapterFactory;
False,gson/src/main/java/com/google/gson/internal/Excluder.java,gson/src/main/java/com/google/gson/internal/Excluder.java,49,"ublic final class Excluder implements TypeAdapter.Factory, Cloneable {"
True,gson/src/main/java/com/google/gson/internal/Excluder.java,gson/src/main/java/com/google/gson/internal/Excluder.java,50,"public final class Excluder implements TypeAdapterFactory, Cloneable {"
True,gson/src/main/java/com/google/gson/internal/bind/ArrayTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ArrayTypeAdapter.java,21,import com.google.gson.TypeAdapterFactory;
False,gson/src/main/java/com/google/gson/internal/bind/ArrayTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ArrayTypeAdapter.java,38,ublic static final Factory FACTORY = new Factory() {
True,gson/src/main/java/com/google/gson/internal/bind/ArrayTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ArrayTypeAdapter.java,39,public static final TypeAdapterFactory FACTORY = new TypeAdapterFactory() {
True,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,21,import com.google.gson.TypeAdapterFactory;
False,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,35,ublic final class CollectionTypeAdapterFactory implements TypeAdapter.Factory {
True,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java,36,public final class CollectionTypeAdapterFactory implements TypeAdapterFactory {
True,gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java,22,import com.google.gson.TypeAdapterFactory;
False,gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java,41,ublic static final Factory FACTORY = new Factory() {
True,gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java,42,public static final TypeAdapterFactory FACTORY = new TypeAdapterFactory() {
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,25,import com.google.gson.TypeAdapterFactory;
False,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,105,ublic final class MapTypeAdapterFactory implements TypeAdapter.Factory {
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,106,public final class MapTypeAdapterFactory implements TypeAdapterFactory {
True,gson/src/main/java/com/google/gson/internal/bind/ObjectTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ObjectTypeAdapter.java,21,import com.google.gson.TypeAdapterFactory;
False,gson/src/main/java/com/google/gson/internal/bind/ObjectTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ObjectTypeAdapter.java,36,ublic static final Factory FACTORY = new Factory() {
True,gson/src/main/java/com/google/gson/internal/bind/ObjectTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/ObjectTypeAdapter.java,37,public static final TypeAdapterFactory FACTORY = new TypeAdapterFactory() {
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,23,import com.google.gson.TypeAdapterFactory;
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,43,ublic final class ReflectiveTypeAdapterFactory implements TypeAdapter.Factory {
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,44,public final class ReflectiveTypeAdapterFactory implements TypeAdapterFactory {
True,gson/src/main/java/com/google/gson/internal/bind/SqlDateTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/SqlDateTypeAdapter.java,22,import com.google.gson.TypeAdapterFactory;
False,gson/src/main/java/com/google/gson/internal/bind/SqlDateTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/SqlDateTypeAdapter.java,38,ublic static final Factory FACTORY = new Factory() {
True,gson/src/main/java/com/google/gson/internal/bind/SqlDateTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/SqlDateTypeAdapter.java,39,public static final TypeAdapterFactory FACTORY = new TypeAdapterFactory() {
True,gson/src/main/java/com/google/gson/internal/bind/TimeTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/TimeTypeAdapter.java,22,import com.google.gson.TypeAdapterFactory;
False,gson/src/main/java/com/google/gson/internal/bind/TimeTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/TimeTypeAdapter.java,40,ublic static final Factory FACTORY = new Factory() {
True,gson/src/main/java/com/google/gson/internal/bind/TimeTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/TimeTypeAdapter.java,41,public static final TypeAdapterFactory FACTORY = new TypeAdapterFactory() {
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,19,import com.google.gson.TypeAdapterFactory;
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,70,"ublic static final TypeAdapter.Factory CLASS_FACTORY = newFactory(Class.class, CLASS);"
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,71,"public static final TypeAdapterFactory CLASS_FACTORY = newFactory(Class.class, CLASS);"
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,129,"ublic static final TypeAdapter.Factory BIT_SET_FACTORY = newFactory(BitSet.class, BIT_SET);"
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,130,"public static final TypeAdapterFactory BIT_SET_FACTORY = newFactory(BitSet.class, BIT_SET);"
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,171,ublic static final TypeAdapter.Factory BOOLEAN_FACTORY
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,172,public static final TypeAdapterFactory BOOLEAN_FACTORY
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,194,ublic static final TypeAdapter.Factory BYTE_FACTORY
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,195,public static final TypeAdapterFactory BYTE_FACTORY
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,216,ublic static final TypeAdapter.Factory SHORT_FACTORY
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,217,public static final TypeAdapterFactory SHORT_FACTORY
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,238,ublic static final TypeAdapter.Factory INTEGER_FACTORY
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,239,public static final TypeAdapterFactory INTEGER_FACTORY
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,310,"ublic static final TypeAdapter.Factory NUMBER_FACTORY = newFactory(Number.class, NUMBER);"
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,311,"public static final TypeAdapterFactory NUMBER_FACTORY = newFactory(Number.class, NUMBER);"
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,331,ublic static final TypeAdapter.Factory CHARACTER_FACTORY
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,332,public static final TypeAdapterFactory CHARACTER_FACTORY
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,354,"ublic static final TypeAdapter.Factory STRING_FACTORY = newFactory(String.class, STRING);"
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,355,"public static final TypeAdapterFactory STRING_FACTORY = newFactory(String.class, STRING);"
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,371,ublic static final TypeAdapter.Factory STRING_BUILDER_FACTORY =
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,372,public static final TypeAdapterFactory STRING_BUILDER_FACTORY =
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,389,ublic static final TypeAdapter.Factory STRING_BUFFER_FACTORY =
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,390,public static final TypeAdapterFactory STRING_BUFFER_FACTORY =
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,408,"ublic static final TypeAdapter.Factory URL_FACTORY = newFactory(URL.class, URL);"
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,409,"public static final TypeAdapterFactory URL_FACTORY = newFactory(URL.class, URL);"
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,430,"ublic static final TypeAdapter.Factory URI_FACTORY = newFactory(URI.class, URI);"
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,431,"public static final TypeAdapterFactory URI_FACTORY = newFactory(URI.class, URI);"
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,448,ublic static final TypeAdapter.Factory INET_ADDRESS_FACTORY =
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,449,public static final TypeAdapterFactory INET_ADDRESS_FACTORY =
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,466,"ublic static final TypeAdapter.Factory UUID_FACTORY = newFactory(UUID.class, UUID);"
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,467,"public static final TypeAdapterFactory UUID_FACTORY = newFactory(UUID.class, UUID);"
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,468,ublic static final TypeAdapter.Factory TIMESTAMP_FACTORY = new TypeAdapter.Factory() {
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,469,public static final TypeAdapterFactory TIMESTAMP_FACTORY = new TypeAdapterFactory() {
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,554,ublic static final TypeAdapter.Factory CALENDAR_FACTORY =
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,555,public static final TypeAdapterFactory CALENDAR_FACTORY =
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,592,"ublic static final TypeAdapter.Factory LOCALE_FACTORY = newFactory(Locale.class, LOCALE);"
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,593,"public static final TypeAdapterFactory LOCALE_FACTORY = newFactory(Locale.class, LOCALE);"
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,666,ublic static final TypeAdapter.Factory JSON_ELEMENT_FACTORY
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,667,public static final TypeAdapterFactory JSON_ELEMENT_FACTORY
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,701,ublic static final TypeAdapter.Factory ENUM_FACTORY = newEnumTypeHierarchyFactory();
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,702,public static final TypeAdapterFactory ENUM_FACTORY = newEnumTypeHierarchyFactory();
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,703,ublic static <TT> TypeAdapter.Factory newEnumTypeHierarchyFactory() {
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,704,eturn new TypeAdapter.Factory() {
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,704,public static <TT> TypeAdapterFactory newEnumTypeHierarchyFactory() {
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,705,return new TypeAdapterFactory() {
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,719,ublic static <TT> TypeAdapter.Factory newFactory(
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,720,public static <TT> TypeAdapterFactory newFactory(
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,721,eturn new TypeAdapter.Factory() {
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,722,return new TypeAdapterFactory() {
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,729,ublic static <TT> TypeAdapter.Factory newFactory(
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,730,public static <TT> TypeAdapterFactory newFactory(
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,731,eturn new TypeAdapter.Factory() {
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,732,return new TypeAdapterFactory() {
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,742,ublic static <TT> TypeAdapter.Factory newFactory(
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,743,public static <TT> TypeAdapterFactory newFactory(
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,744,eturn new TypeAdapter.Factory() {
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,745,return new TypeAdapterFactory() {
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,757,ublic static <TT> TypeAdapter.Factory newFactoryForMultipleTypes(
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,758,"inal Class<TT> base, final Class<? extends TT> sub, final TypeAdapter<? super TT> typeAdapter) {"
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,759,eturn new TypeAdapter.Factory() {
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,758,"public static <TT> TypeAdapterFactory newFactoryForMultipleTypes(final Class<TT> base,"
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,759,"final Class<? extends TT> sub, final TypeAdapter<? super TT> typeAdapter) {"
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,760,return new TypeAdapterFactory() {
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,772,ublic static <TT> TypeAdapter.Factory newTypeHierarchyFactory(
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,773,public static <TT> TypeAdapterFactory newTypeHierarchyFactory(
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,774,eturn new TypeAdapter.Factory() {
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,775,return new TypeAdapterFactory() {

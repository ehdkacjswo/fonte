is_addition,old_file_path,new_file_path,line_num,content
False,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,559,f (!serializers.hasSpecificHandlerFor(Date.class)
False,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,560,& !deserializers.hasSpecificHandlerFor(Date.class)) {
False,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,561,"/ NOTE: if a date pattern exists, then that style takes priority"
False,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,562,efaultDateTypeAdapter dateTypeAdapter = null;
False,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,563,"f (datePattern != null && !"""".equals(datePattern.trim())) {"
False,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,564,ateTypeAdapter = new DefaultDateTypeAdapter(datePattern);
False,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,565, else if (dateStyle != DateFormat.DEFAULT && timeStyle != DateFormat.DEFAULT) {
False,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,566,"ateTypeAdapter = new DefaultDateTypeAdapter(dateStyle, timeStyle);"
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,559,DefaultDateTypeAdapter dateTypeAdapter = null;
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,560,"if (datePattern != null && !"""".equals(datePattern.trim())) {"
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,561,dateTypeAdapter = new DefaultDateTypeAdapter(datePattern);
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,562,} else if (dateStyle != DateFormat.DEFAULT && timeStyle != DateFormat.DEFAULT) {
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,563,"dateTypeAdapter = new DefaultDateTypeAdapter(dateStyle, timeStyle);"
False,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,569,f (dateTypeAdapter != null) {
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,566,if (dateTypeAdapter != null) {
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,567,if (!serializers.hasSpecificHandlerFor(Date.class)) {
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,570,if (!deserializers.hasSpecificHandlerFor(Date.class)) {
False,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,18,mport com.google.gson.Gson;
False,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,19,mport com.google.gson.GsonBuilder;
False,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,20,mport com.google.gson.JsonParseException;
False,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,21,mport com.google.gson.reflect.TypeToken;
False,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,23,mport junit.framework.TestCase;
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,38,import junit.framework.TestCase;
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,40,import com.google.gson.Gson;
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,41,import com.google.gson.GsonBuilder;
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,42,import com.google.gson.JsonDeserializationContext;
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,43,import com.google.gson.JsonDeserializer;
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,44,import com.google.gson.JsonElement;
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,45,import com.google.gson.JsonParseException;
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,46,import com.google.gson.reflect.TypeToken;
False,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,225,"ssertEquals(year-1900, date.getYear());"
False,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,226,"ssertEquals(month, date.getMonth());"
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,228,"assertEquals(year-1900, date.getYear());"
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,229,"assertEquals(month, date.getMonth());"
False,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,232,"ssertEquals(hours, date.getHours());"
False,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,233,"ssertEquals(minutes, date.getMinutes());"
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,235,"assertEquals(hours, date.getHours());"
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,236,"assertEquals(minutes, date.getMinutes());"
False,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,286,"ssertEquals(now.toString(), extracted.toString());"
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,289,"assertEquals(now.toString(), extracted.toString());"
False,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,352,"ssertEquals(now.getYear(), extracted.getYear());"
False,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,353,"ssertEquals(now.getMonth(), extracted.getMonth());"
False,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,354,"ssertEquals(now.getDay(), extracted.getDay());"
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,355,"assertEquals(now.getYear(), extracted.getYear());"
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,356,"assertEquals(now.getMonth(), extracted.getMonth());"
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,357,"assertEquals(now.getDay(), extracted.getDay());"
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,360,"@SuppressWarnings(""deprecation"")"
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,361,public void testDateSerializationWithPatternNotOverridenByTypeAdapter() throws Exception {
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,362,"String pattern = ""yyyy-MM-dd"";"
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,363,DateFormat formatter = new SimpleDateFormat(pattern);
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,364,Gson gson = new GsonBuilder()
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,365,.setDateFormat(pattern)
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,366,".registerTypeAdapter(Date.class, new JsonDeserializer<Date>() {"
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,367,"public Date deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)"
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,368,throws JsonParseException {
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,369,return new Date();
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,372,.create();
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,374,Date now = new Date();
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,375,"String expectedDateString = ""\"""" + formatter.format(now) + ""\"""";"
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,376,String json = gson.toJson(now);
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,377,"assertEquals(expectedDateString, json);"

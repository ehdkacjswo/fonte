is_addition,old_file_path,new_file_path,line_num,content
False,extras/src/main/java/com/google/gson/typeadapters/RuntimeTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/RuntimeTypeAdapter.java,187,"sonElement serialized = context.serialize(src, srcType);"
True,extras/src/main/java/com/google/gson/typeadapters/RuntimeTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/RuntimeTypeAdapter.java,187,"JsonElement serialized = context.serializeDefault(src, srcType);"
False,extras/src/main/java/com/google/gson/typeadapters/RuntimeTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/RuntimeTypeAdapter.java,215," result = (T) context.deserialize(json, subtype);"
True,extras/src/main/java/com/google/gson/typeadapters/RuntimeTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/RuntimeTypeAdapter.java,215,"T result = (T) context.deserializeDefault(json, subtype);"
False,extras/src/test/java/com/google/gson/typeadapters/RuntimeTypeAdapterTest.java,extras/src/test/java/com/google/gson/typeadapters/RuntimeTypeAdapterTest.java,53,"{type:'CreditCard',ownerName:'Jesse'}"", BillingInstrument.class);"
True,extras/src/test/java/com/google/gson/typeadapters/RuntimeTypeAdapterTest.java,extras/src/test/java/com/google/gson/typeadapters/RuntimeTypeAdapterTest.java,53,"""{type:'BillingInstrument',ownerName:'Jesse'}"", BillingInstrument.class);"
False,gson/src/main/java/com/google/gson/BaseMapTypeAdapter.java,gson/src/main/java/com/google/gson/BaseMapTypeAdapter.java,33,"eturn context.serialize(src, srcType, false);"
True,gson/src/main/java/com/google/gson/BaseMapTypeAdapter.java,gson/src/main/java/com/google/gson/BaseMapTypeAdapter.java,33,"return context.serialize(src, srcType, false, false);"
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,680,"sonElement element = context.serialize(child, childType, false);"
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,680,"JsonElement element = context.serialize(child, childType, false, false);"
False,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,58,sonDeserializationContext context) throws JsonParseException {
True,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,58,"JsonDeserializationContext context, boolean systemOnly) throws JsonParseException {"
False,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,62,"bjectNavigator.accept(new ObjectTypePair(null, arrayType, true), visitor);"
True,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,62,"objectNavigator.accept(new ObjectTypePair(null, arrayType, true, systemOnly), visitor);"
False,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,67,sonDeserializationContext context) throws JsonParseException {
True,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,67,"JsonDeserializationContext context, boolean systemOnly) throws JsonParseException {"
False,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,71,"bjectNavigator.accept(new ObjectTypePair(null, typeOfT, true), visitor);"
True,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,71,"objectNavigator.accept(new ObjectTypePair(null, typeOfT, true, systemOnly), visitor);"
False,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,77,sonDeserializationContext context) throws JsonParseException {
True,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,77,"JsonDeserializationContext context, boolean systemOnly) throws JsonParseException {"
False,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,80,"bjectNavigator.accept(new ObjectTypePair(json.getAsObject(), typeOfT, true), visitor);"
True,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,80,"objectNavigator.accept(new ObjectTypePair(json.getAsObject(), typeOfT, true, systemOnly), visitor);"
False,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,102,"bject array = fromJsonArray(typeOfT, json.getAsJsonArray(), this);"
True,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,102,"Object array = fromJsonArray(typeOfT, json.getAsJsonArray(), this, false);"
False,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,105,"bject object = fromJsonObject(typeOfT, json.getAsJsonObject(), this);"
True,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,105,"Object object = fromJsonObject(typeOfT, json.getAsJsonObject(), this, false);"
False,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,108,"bject primitive = fromJsonPrimitive(typeOfT, json.getAsJsonPrimitive(), this);"
True,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,108,"Object primitive = fromJsonPrimitive(typeOfT, json.getAsJsonPrimitive(), this, false);"
True,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,109,return (T) primitive;
True,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,110,} else {
True,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,111,"throw new JsonParseException(""Failed parsing JSON source: "" + json + "" to Json"");"
True,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,115,"@SuppressWarnings(""unchecked"")"
True,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,116,"public <T> T deserializeDefault(JsonElement json, Type typeOfT) throws JsonParseException {"
True,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,117,if (json == null || json.isJsonNull()) {
True,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,118,return null;
True,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,119,} else if (json.isJsonArray()) {
True,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,120,"Object array = fromJsonArray(typeOfT, json.getAsJsonArray(), this, true);"
True,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,121,return (T) array;
True,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,122,} else if (json.isJsonObject()) {
True,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,123,"Object object = fromJsonObject(typeOfT, json.getAsJsonObject(), this, true);"
True,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,124,return (T) object;
True,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,125,} else if (json.isJsonPrimitive()) {
True,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,gson/src/main/java/com/google/gson/JsonDeserializationContext.java,126,"Object primitive = fromJsonPrimitive(typeOfT, json.getAsJsonPrimitive(), this, true);"
False,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,110,"bjectNavigator.accept(new ObjectTypePair(null, type, false), childVisitor);"
True,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,110,"objectNavigator.accept(new ObjectTypePair(null, type, false, false), childVisitor);"
False,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,112,"bjectTypePair objTypePair = new ObjectTypePair(null, declaredTypeOfField, false);"
True,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,112,"ObjectTypePair objTypePair = new ObjectTypePair(null, declaredTypeOfField, false, false);"
False,gson/src/main/java/com/google/gson/JsonSerializationContext.java,gson/src/main/java/com/google/gson/JsonSerializationContext.java,56,"eturn serialize(src, src.getClass(), false);"
True,gson/src/main/java/com/google/gson/JsonSerializationContext.java,gson/src/main/java/com/google/gson/JsonSerializationContext.java,56,"return serialize(src, src.getClass(), false, false);"
False,gson/src/main/java/com/google/gson/JsonSerializationContext.java,gson/src/main/java/com/google/gson/JsonSerializationContext.java,70,"eturn serialize(src, typeOfSrc, true);"
True,gson/src/main/java/com/google/gson/JsonSerializationContext.java,gson/src/main/java/com/google/gson/JsonSerializationContext.java,70,"return serialize(src, typeOfSrc, true, false);"
False,gson/src/main/java/com/google/gson/JsonSerializationContext.java,gson/src/main/java/com/google/gson/JsonSerializationContext.java,73,"sonElement serialize(Object src, Type typeOfSrc, boolean preserveType) {"
True,gson/src/main/java/com/google/gson/JsonSerializationContext.java,gson/src/main/java/com/google/gson/JsonSerializationContext.java,73,"public JsonElement serializeDefault(Object src, Type typeOfSrc) {"
True,gson/src/main/java/com/google/gson/JsonSerializationContext.java,gson/src/main/java/com/google/gson/JsonSerializationContext.java,74,"return serialize(src, typeOfSrc, true, true);"
True,gson/src/main/java/com/google/gson/JsonSerializationContext.java,gson/src/main/java/com/google/gson/JsonSerializationContext.java,77,"JsonElement serialize(Object src, Type typeOfSrc, boolean preserveType, boolean defaultOnly) {"
False,gson/src/main/java/com/google/gson/JsonSerializationContext.java,gson/src/main/java/com/google/gson/JsonSerializationContext.java,79,"bjectTypePair objTypePair = new ObjectTypePair(src, typeOfSrc, preserveType);"
True,gson/src/main/java/com/google/gson/JsonSerializationContext.java,gson/src/main/java/com/google/gson/JsonSerializationContext.java,83,"ObjectTypePair objTypePair = new ObjectTypePair(src, typeOfSrc, preserveType, defaultOnly);"
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,57,f (node == null) {
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,57,if (node == null || node.isSystemOnly()) {
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,67,f (node != null) {
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,67,if (node != null && !node.isSystemOnly()) {
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,84,"ddAsArrayElement(new ObjectTypePair(child, componentType, false));"
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,84,"addAsArrayElement(new ObjectTypePair(child, componentType, false, false));"
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,96,"ddAsChildOfObject(f, new ObjectTypePair(array, typeOfF, false));"
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,96,"addAsChildOfObject(f, new ObjectTypePair(array, typeOfF, false, false));"
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,114,"ddAsChildOfObject(f, new ObjectTypePair(fieldValue, typeOfF, false));"
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,114,"addAsChildOfObject(f, new ObjectTypePair(fieldValue, typeOfF, false, false));"
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,203,"bjectTypePair objTypePair = new ObjectTypePair(obj, declaredTypeOfField, false);"
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,203,"ObjectTypePair objTypePair = new ObjectTypePair(obj, declaredTypeOfField, false, false);"
False,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,48,nstanceCreator<T> creator = (InstanceCreator<T>) instanceCreatorMap.getHandlerFor(typeOfT);
True,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,48,"InstanceCreator<T> creator = (InstanceCreator<T>) instanceCreatorMap.getHandlerFor(typeOfT, false);"
True,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,30,private final boolean systemOnly;
False,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,31,"bjectTypePair(Object obj, Type type, boolean preserveType) {"
True,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,32,"ObjectTypePair(Object obj, Type type, boolean preserveType, boolean systemOnly) {"
True,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,36,this.systemOnly = systemOnly;
False,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,60,andler = handlers.getHandlerFor(moreSpecificType.type);
True,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,62,"handler = handlers.getHandlerFor(moreSpecificType.type, systemOnly);"
False,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,66,andler = handlers.getHandlerFor(type);
True,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,68,"handler = handlers.getHandlerFor(type, systemOnly);"
False,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,78,"eturn new ObjectTypePair(obj, actualType, true);"
True,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,80,"return new ObjectTypePair(obj, actualType, true, systemOnly);"
False,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,138,eturn preserveType == other.preserveType;
True,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,140,return preserveType == other.preserveType && systemOnly == other.systemOnly;
True,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,147,public boolean isSystemOnly() {
True,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,148,return systemOnly;
False,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,167,ublic synchronized T getHandlerFor(Type type) {
False,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,168, handler = userMap.get(type);
False,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,169,f (handler != null) {
False,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,170,eturn handler;
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,167,"public synchronized T getHandlerFor(Type type, boolean systemOnly) {"
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,168,T handler;
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,169,if (!systemOnly) {
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,170,handler = userMap.get(type);
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,171,if (handler != null) {
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,172,return handler;
False,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,178,andler = getHandlerFor(rawClass);
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,181,"handler = getHandlerFor(rawClass, systemOnly);"
False,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,184,andler = getHandlerForTypeHierarchy(rawClass);
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,187,"handler = getHandlerForTypeHierarchy(rawClass, systemOnly);"
False,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,188,rivate T getHandlerForTypeHierarchy(Class<?> type) {
False,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,189,"or (Pair<Class<?>, T> entry : userTypeHierarchyList) {"
False,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,190,f (entry.first.isAssignableFrom(type)) {
False,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,191,eturn entry.second;
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,191,"private T getHandlerForTypeHierarchy(Class<?> type, boolean systemOnly) {"
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,192,if (!systemOnly) {
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,193,"for (Pair<Class<?>, T> entry : userTypeHierarchyList) {"
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,194,if (entry.first.isAssignableFrom(type)) {
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,195,return entry.second;
False,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,45,"bjectTypePair obj = new ObjectTypePair(this, getClass(), true);"
True,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,45,"ObjectTypePair obj = new ObjectTypePair(this, getClass(), true, false);"
False,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,53,"bjectTypePair obj = new ObjectTypePair(this, getClass(), true);"
True,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,53,"ObjectTypePair obj = new ObjectTypePair(this, getClass(), true, false);"
False,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,66,"tack.push(new ObjectTypePair(objA, MockObject.class, true));"
False,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,67,"ssertTrue(stack.contains(new ObjectTypePair(objA, MockObject.class, true)));"
False,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,68,"ssertFalse(stack.contains(new ObjectTypePair(objB, MockObject.class, true)));"
True,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,66,"stack.push(new ObjectTypePair(objA, MockObject.class, true, false));"
True,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,67,"assertTrue(stack.contains(new ObjectTypePair(objA, MockObject.class, true, false)));"
True,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,gson/src/test/java/com/google/gson/MemoryRefStackTest.java,68,"assertFalse(stack.contains(new ObjectTypePair(objB, MockObject.class, true, false)));"
False,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,44,ssertNull(paramMap.getHandlerFor(String.class));
False,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,45,ssertNull(paramMap.getHandlerFor(String.class));
True,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,44,"assertNull(paramMap.getHandlerFor(String.class, false));"
True,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,45,"assertNull(paramMap.getHandlerFor(String.class, false));"
False,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,55,ssertNotNull(paramMap.getHandlerFor(specificType));
False,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,56,ssertNotNull(paramMap.getHandlerFor(List.class));
False,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,57,"ssertEquals(handler, paramMap.getHandlerFor(specificType));"
True,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,55,"assertNotNull(paramMap.getHandlerFor(specificType, false));"
True,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,56,"assertNotNull(paramMap.getHandlerFor(List.class, false));"
True,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,57,"assertEquals(handler, paramMap.getHandlerFor(specificType, false));"
False,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,67,ssertNotNull(paramMap.getHandlerFor(specificType));
False,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,68,ssertNull(paramMap.getHandlerFor(List.class));
False,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,69,"ssertEquals(handler, paramMap.getHandlerFor(specificType));"
True,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,67,"assertNotNull(paramMap.getHandlerFor(specificType, false));"
True,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,68,"assertNull(paramMap.getHandlerFor(List.class, false));"
True,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,69,"assertEquals(handler, paramMap.getHandlerFor(specificType, false));"
False,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,79,"ssertEquals(handler2, paramMap.getHandlerFor(String.class));"
True,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,79,"assertEquals(handler2, paramMap.getHandlerFor(String.class, false));"
False,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,92,tring handler = paramMap.getHandlerFor(Sub.class);
True,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,92,"String handler = paramMap.getHandlerFor(Sub.class, false);"
False,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,99,tring handler = paramMap.getHandlerFor(SubOfSub.class);
True,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,99,"String handler = paramMap.getHandlerFor(SubOfSub.class, false);"
False,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,108,tring handler = paramMap.getHandlerFor(Base.class);
True,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,108,"String handler = paramMap.getHandlerFor(Base.class, false);"
False,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,115,tring handler = paramMap.getHandlerFor(Base.class);
True,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,gson/src/test/java/com/google/gson/ParameterizedTypeHandlerMapTest.java,115,"String handler = paramMap.getHandlerFor(Base.class, false);"
True,gson/src/test/java/com/google/gson/functional/SystemOnlyTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/SystemOnlyTypeAdaptersTest.java,2,* Copyright (C) 2011 Google Inc.
True,gson/src/test/java/com/google/gson/functional/SystemOnlyTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/SystemOnlyTypeAdaptersTest.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/test/java/com/google/gson/functional/SystemOnlyTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/SystemOnlyTypeAdaptersTest.java,5,* you may not use this file except in compliance with the License.
True,gson/src/test/java/com/google/gson/functional/SystemOnlyTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/SystemOnlyTypeAdaptersTest.java,6,* You may obtain a copy of the License at
True,gson/src/test/java/com/google/gson/functional/SystemOnlyTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/SystemOnlyTypeAdaptersTest.java,8,* http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/test/java/com/google/gson/functional/SystemOnlyTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/SystemOnlyTypeAdaptersTest.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/test/java/com/google/gson/functional/SystemOnlyTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/SystemOnlyTypeAdaptersTest.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/test/java/com/google/gson/functional/SystemOnlyTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/SystemOnlyTypeAdaptersTest.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/test/java/com/google/gson/functional/SystemOnlyTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/SystemOnlyTypeAdaptersTest.java,13,* See the License for the specific language governing permissions and
True,gson/src/test/java/com/google/gson/functional/SystemOnlyTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/SystemOnlyTypeAdaptersTest.java,14,* limitations under the License.
True,gson/src/test/java/com/google/gson/functional/SystemOnlyTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/SystemOnlyTypeAdaptersTest.java,16,package com.google.gson.functional;
True,gson/src/test/java/com/google/gson/functional/SystemOnlyTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/SystemOnlyTypeAdaptersTest.java,18,import java.lang.reflect.Type;
True,gson/src/test/java/com/google/gson/functional/SystemOnlyTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/SystemOnlyTypeAdaptersTest.java,20,import junit.framework.TestCase;
True,gson/src/test/java/com/google/gson/functional/SystemOnlyTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/SystemOnlyTypeAdaptersTest.java,22,import com.google.gson.Gson;
True,gson/src/test/java/com/google/gson/functional/SystemOnlyTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/SystemOnlyTypeAdaptersTest.java,23,import com.google.gson.GsonBuilder;
True,gson/src/test/java/com/google/gson/functional/SystemOnlyTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/SystemOnlyTypeAdaptersTest.java,24,import com.google.gson.JsonDeserializationContext;
True,gson/src/test/java/com/google/gson/functional/SystemOnlyTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/SystemOnlyTypeAdaptersTest.java,25,import com.google.gson.JsonDeserializer;
True,gson/src/test/java/com/google/gson/functional/SystemOnlyTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/SystemOnlyTypeAdaptersTest.java,26,import com.google.gson.JsonElement;
True,gson/src/test/java/com/google/gson/functional/SystemOnlyTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/SystemOnlyTypeAdaptersTest.java,27,import com.google.gson.JsonObject;
True,gson/src/test/java/com/google/gson/functional/SystemOnlyTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/SystemOnlyTypeAdaptersTest.java,28,import com.google.gson.JsonParseException;
True,gson/src/test/java/com/google/gson/functional/SystemOnlyTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/SystemOnlyTypeAdaptersTest.java,29,import com.google.gson.JsonSerializationContext;
True,gson/src/test/java/com/google/gson/functional/SystemOnlyTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/SystemOnlyTypeAdaptersTest.java,30,import com.google.gson.JsonSerializer;
True,gson/src/test/java/com/google/gson/functional/SystemOnlyTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/SystemOnlyTypeAdaptersTest.java,33,* Functional tests for serialize default behavior where a custom type adapter is allowed to invoke
True,gson/src/test/java/com/google/gson/functional/SystemOnlyTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/SystemOnlyTypeAdaptersTest.java,34,* context.serialize on self.
True,gson/src/test/java/com/google/gson/functional/SystemOnlyTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/SystemOnlyTypeAdaptersTest.java,36,* @author Inderjeet Singh
True,gson/src/test/java/com/google/gson/functional/SystemOnlyTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/SystemOnlyTypeAdaptersTest.java,38,public class SystemOnlyTypeAdaptersTest extends TestCase {
True,gson/src/test/java/com/google/gson/functional/SystemOnlyTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/SystemOnlyTypeAdaptersTest.java,40,private Gson gson;
True,gson/src/test/java/com/google/gson/functional/SystemOnlyTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/SystemOnlyTypeAdaptersTest.java,41,@Override
True,gson/src/test/java/com/google/gson/functional/SystemOnlyTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/SystemOnlyTypeAdaptersTest.java,42,protected void setUp() throws Exception {
True,gson/src/test/java/com/google/gson/functional/SystemOnlyTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/SystemOnlyTypeAdaptersTest.java,43,super.setUp();
True,gson/src/test/java/com/google/gson/functional/SystemOnlyTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/SystemOnlyTypeAdaptersTest.java,44,"this.gson = new GsonBuilder().registerTypeAdapter(Foo.class, new FooTypeAdapter()).create();"
True,gson/src/test/java/com/google/gson/functional/SystemOnlyTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/SystemOnlyTypeAdaptersTest.java,47,public void testSerializeDefault() {
True,gson/src/test/java/com/google/gson/functional/SystemOnlyTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/SystemOnlyTypeAdaptersTest.java,48,String json = gson.toJson(new Foo());
True,gson/src/test/java/com/google/gson/functional/SystemOnlyTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/SystemOnlyTypeAdaptersTest.java,49,"assertEquals(""{\""a\"":10,\""secret-key\"":\""abracadabra\""}"", json);"
True,gson/src/test/java/com/google/gson/functional/SystemOnlyTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/SystemOnlyTypeAdaptersTest.java,52,public void testDeserializeDefault() {
True,gson/src/test/java/com/google/gson/functional/SystemOnlyTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/SystemOnlyTypeAdaptersTest.java,53,"String json = ""{a:5,'secret-key':'abracadabra'}"";"
True,gson/src/test/java/com/google/gson/functional/SystemOnlyTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/SystemOnlyTypeAdaptersTest.java,54,"Foo foo = gson.fromJson(json, Foo.class);"
True,gson/src/test/java/com/google/gson/functional/SystemOnlyTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/SystemOnlyTypeAdaptersTest.java,55,"assertEquals(5, foo.a);"
True,gson/src/test/java/com/google/gson/functional/SystemOnlyTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/SystemOnlyTypeAdaptersTest.java,58,private static class Foo {
True,gson/src/test/java/com/google/gson/functional/SystemOnlyTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/SystemOnlyTypeAdaptersTest.java,59,int a = 10;
True,gson/src/test/java/com/google/gson/functional/SystemOnlyTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/SystemOnlyTypeAdaptersTest.java,62,"private static class FooTypeAdapter implements JsonSerializer<Foo>, JsonDeserializer<Foo> {"
True,gson/src/test/java/com/google/gson/functional/SystemOnlyTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/SystemOnlyTypeAdaptersTest.java,63,"public JsonElement serialize(Foo src, Type typeOfSrc, JsonSerializationContext context) {"
True,gson/src/test/java/com/google/gson/functional/SystemOnlyTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/SystemOnlyTypeAdaptersTest.java,64,"JsonObject json = context.serializeDefault(src, typeOfSrc).getAsJsonObject();"
True,gson/src/test/java/com/google/gson/functional/SystemOnlyTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/SystemOnlyTypeAdaptersTest.java,65,"json.addProperty(""secret-key"", ""abracadabra"");"
True,gson/src/test/java/com/google/gson/functional/SystemOnlyTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/SystemOnlyTypeAdaptersTest.java,66,return json;
True,gson/src/test/java/com/google/gson/functional/SystemOnlyTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/SystemOnlyTypeAdaptersTest.java,69,"public Foo deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)"
True,gson/src/test/java/com/google/gson/functional/SystemOnlyTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/SystemOnlyTypeAdaptersTest.java,70,throws JsonParseException {
True,gson/src/test/java/com/google/gson/functional/SystemOnlyTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/SystemOnlyTypeAdaptersTest.java,71,"if (!""abracadabra"".equals(json.getAsJsonObject().get(""secret-key"").getAsString())) {"
True,gson/src/test/java/com/google/gson/functional/SystemOnlyTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/SystemOnlyTypeAdaptersTest.java,72,"throw new IllegalArgumentException(""invalid key"");"
True,gson/src/test/java/com/google/gson/functional/SystemOnlyTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/SystemOnlyTypeAdaptersTest.java,74,"return context.deserializeDefault(json, typeOfT);"

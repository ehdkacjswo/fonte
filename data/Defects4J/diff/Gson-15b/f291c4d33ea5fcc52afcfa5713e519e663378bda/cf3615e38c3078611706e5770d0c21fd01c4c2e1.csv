is_addition,old_file_path,new_file_path,line_num,content
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,680,"sonElement element = context.serialize(child, childType);"
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,680,JsonSerializationContextDefault contextImpl = (JsonSerializationContextDefault) context;
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,681,"JsonElement element = contextImpl.serialize(child, childType, false);"
False,gson/src/main/java/com/google/gson/JsonSerializationContextDefault.java,gson/src/main/java/com/google/gson/JsonSerializationContextDefault.java,62,"bjectNavigator.accept(new ObjectTypePair(src, typeOfSrc, preserveType), visitor);"
True,gson/src/main/java/com/google/gson/JsonSerializationContextDefault.java,gson/src/main/java/com/google/gson/JsonSerializationContextDefault.java,61,"ObjectTypePair objTypePair = new ObjectTypePair(src, typeOfSrc, preserveType);"
True,gson/src/main/java/com/google/gson/JsonSerializationContextDefault.java,gson/src/main/java/com/google/gson/JsonSerializationContextDefault.java,62,"objectNavigator.accept(objTypePair, visitor);"
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,103,objTypePair = objTypePair.toMoreSpecificType();
False,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,111,f ($Gson$Types.isArray(objTypePair.type)) {
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,112,if ($Gson$Types.isArray(objTypePair.getMoreSpecificType())) {
False,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,78,"eturn new ObjectTypePair(obj, actualType, preserveType);"
True,gson/src/main/java/com/google/gson/ObjectTypePair.java,gson/src/main/java/com/google/gson/ObjectTypePair.java,78,"return new ObjectTypePair(obj, actualType, true);"
True,gson/src/test/java/com/google/gson/functional/ArrayTest.java,gson/src/test/java/com/google/gson/functional/ArrayTest.java,278,* Regression test for Issue 205
True,gson/src/test/java/com/google/gson/functional/ArrayTest.java,gson/src/test/java/com/google/gson/functional/ArrayTest.java,280,public void testMixingTypesInObjectArraySerialization() {
True,gson/src/test/java/com/google/gson/functional/ArrayTest.java,gson/src/test/java/com/google/gson/functional/ArrayTest.java,281,"Object[] array = new Object[] { 1, 2, new Object[] { ""one"", ""two"" } };"
True,gson/src/test/java/com/google/gson/functional/ArrayTest.java,gson/src/test/java/com/google/gson/functional/ArrayTest.java,282,"assertEquals(""[1,2,[\""one\"",\""two\""]]"", gson.toJson(array));"
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,424,public void testGeneralMapField() throws Exception {
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,425,MapWithGeneralMapParameters map = new MapWithGeneralMapParameters();
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,426,"map.map.put(""string"", ""testString"");"
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,427,"map.map.put(""stringArray"", new String[] { ""one"", ""two"" });"
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,428,"map.map.put(""objectArray"", new Object[] { 1, 2L, ""three"" });"
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,430,"String expected = ""{\""map\"":{\""string\"":\""testString\"",\""stringArray\"":"""
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,431,"+ ""[\""one\"",\""two\""],\""objectArray\"":[1,2,\""three\""]}}"";"
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,432,"assertEquals(expected, gson.toJson(map));"
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,434,gson = new GsonBuilder()
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,435,.enableComplexMapKeySerialization()
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,436,.create();
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,437,"assertEquals(expected, gson.toJson(map));"
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,453,static final class MapWithGeneralMapParameters {
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,454,"final Map<String, Object> map = new LinkedHashMap();"
False,gson/src/test/java/com/google/gson/functional/MoreSpecificTypeSerializationTest.java,gson/src/test/java/com/google/gson/functional/MoreSpecificTypeSerializationTest.java,51,ublic void disabled_testListOfSubclassFields() {
True,gson/src/test/java/com/google/gson/functional/MoreSpecificTypeSerializationTest.java,gson/src/test/java/com/google/gson/functional/MoreSpecificTypeSerializationTest.java,51,public void testListOfSubclassFields() {
False,gson/src/test/java/com/google/gson/functional/MoreSpecificTypeSerializationTest.java,gson/src/test/java/com/google/gson/functional/MoreSpecificTypeSerializationTest.java,58,"ssertTrue(json, json.contains(""{\""b\"":2,\""s\"":3}""));"
True,gson/src/test/java/com/google/gson/functional/MoreSpecificTypeSerializationTest.java,gson/src/test/java/com/google/gson/functional/MoreSpecificTypeSerializationTest.java,58,"assertTrue(json, json.contains(""{\""s\"":3,\""b\"":2}""));"

is_addition,old_file_path,new_file_path,line_num,content
False,gson/src/main/java/com/google/gson/Cache.java,gson/src/main/java/com/google/gson/Cache.java,45, Removes the value from the cache for the given key.
False,gson/src/main/java/com/google/gson/Cache.java,gson/src/main/java/com/google/gson/Cache.java,47, @param key the key identifying the value to remove
False,gson/src/main/java/com/google/gson/Cache.java,gson/src/main/java/com/google/gson/Cache.java,48, @return the value for the given {@code key}
False,gson/src/main/java/com/google/gson/Cache.java,gson/src/main/java/com/google/gson/Cache.java,50, removeElement(K key);
False,gson/src/main/java/com/google/gson/FieldAttributes.java,gson/src/main/java/com/google/gson/FieldAttributes.java,20,mport com.google.gson.internal.$Gson$Types;
False,gson/src/main/java/com/google/gson/FieldAttributes.java,gson/src/main/java/com/google/gson/FieldAttributes.java,53,rivate final Type resolvedType;
False,gson/src/main/java/com/google/gson/FieldAttributes.java,gson/src/main/java/com/google/gson/FieldAttributes.java,63, @param declaringType The type in which the field is declared
False,gson/src/main/java/com/google/gson/FieldAttributes.java,gson/src/main/java/com/google/gson/FieldAttributes.java,65,"ieldAttributes(Class<?> declaringClazz, Field f, Type declaringType) {"
True,gson/src/main/java/com/google/gson/FieldAttributes.java,gson/src/main/java/com/google/gson/FieldAttributes.java,61,"FieldAttributes(Class<?> declaringClazz, Field f) {"
False,gson/src/main/java/com/google/gson/FieldAttributes.java,gson/src/main/java/com/google/gson/FieldAttributes.java,72,"his.resolvedType = getTypeInfoForField(f, declaringType);"
False,gson/src/main/java/com/google/gson/FieldAttributes.java,gson/src/main/java/com/google/gson/FieldAttributes.java,124, Returns the {@code Class<?>} object that was declared for this field.
True,gson/src/main/java/com/google/gson/FieldAttributes.java,gson/src/main/java/com/google/gson/FieldAttributes.java,119,* Returns the {@code Class} object that was declared for this field.
False,gson/src/main/java/com/google/gson/FieldAttributes.java,gson/src/main/java/com/google/gson/FieldAttributes.java,189, This is exposed internally only for the removing synthetic fields from the JSON output.
False,gson/src/main/java/com/google/gson/FieldAttributes.java,gson/src/main/java/com/google/gson/FieldAttributes.java,191, @throws IllegalAccessException
False,gson/src/main/java/com/google/gson/FieldAttributes.java,gson/src/main/java/com/google/gson/FieldAttributes.java,192, @throws IllegalArgumentException
False,gson/src/main/java/com/google/gson/FieldAttributes.java,gson/src/main/java/com/google/gson/FieldAttributes.java,194,"oid set(Object instance, Object value) throws IllegalAccessException {"
False,gson/src/main/java/com/google/gson/FieldAttributes.java,gson/src/main/java/com/google/gson/FieldAttributes.java,195,"ield.set(instance, value);"
False,gson/src/main/java/com/google/gson/FieldAttributes.java,gson/src/main/java/com/google/gson/FieldAttributes.java,226,ype getResolvedType() {
False,gson/src/main/java/com/google/gson/FieldAttributes.java,gson/src/main/java/com/google/gson/FieldAttributes.java,227,eturn resolvedType;
False,gson/src/main/java/com/google/gson/FieldAttributes.java,gson/src/main/java/com/google/gson/FieldAttributes.java,242," Evaluates the ""actual"" type for the field.  If the field is a ""TypeVariable"" or has a"
False,gson/src/main/java/com/google/gson/FieldAttributes.java,gson/src/main/java/com/google/gson/FieldAttributes.java,243," ""TypeVariable"" in a parameterized type then it evaluates the real type."
False,gson/src/main/java/com/google/gson/FieldAttributes.java,gson/src/main/java/com/google/gson/FieldAttributes.java,245, @param f the actual field object to retrieve the type from
False,gson/src/main/java/com/google/gson/FieldAttributes.java,gson/src/main/java/com/google/gson/FieldAttributes.java,246, @param typeDefiningF the type that contains the field {@code f}
False,gson/src/main/java/com/google/gson/FieldAttributes.java,gson/src/main/java/com/google/gson/FieldAttributes.java,247, @return the type information for the field
False,gson/src/main/java/com/google/gson/FieldAttributes.java,gson/src/main/java/com/google/gson/FieldAttributes.java,249,"tatic Type getTypeInfoForField(Field f, Type typeDefiningF) {"
False,gson/src/main/java/com/google/gson/FieldAttributes.java,gson/src/main/java/com/google/gson/FieldAttributes.java,250,lass<?> rawType = $Gson$Types.getRawType(typeDefiningF);
False,gson/src/main/java/com/google/gson/FieldAttributes.java,gson/src/main/java/com/google/gson/FieldAttributes.java,251,f (!f.getDeclaringClass().isAssignableFrom(rawType)) {
False,gson/src/main/java/com/google/gson/FieldAttributes.java,gson/src/main/java/com/google/gson/FieldAttributes.java,252,/ this field is unrelated to the type; the user probably omitted type information
False,gson/src/main/java/com/google/gson/FieldAttributes.java,gson/src/main/java/com/google/gson/FieldAttributes.java,253,eturn f.getGenericType();
False,gson/src/main/java/com/google/gson/FieldAttributes.java,gson/src/main/java/com/google/gson/FieldAttributes.java,255,"eturn $Gson$Types.resolve(typeDefiningF, rawType, f.getGenericType());"
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,114,"ew ModifierBasedExclusionStrategy(new int[] { Modifier.TRANSIENT, Modifier.STATIC });"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,114,"new ModifierBasedExclusionStrategy(Modifier.TRANSIENT, Modifier.STATIC);"
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,212,"eturn fieldNamingPolicy.translateName(new FieldAttributes(declaringClazz, f, declaredType));"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,212,"return fieldNamingPolicy.translateName(new FieldAttributes(declaringClazz, f));"
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,218,"& !strategy.shouldSkipField(new FieldAttributes(declaringClazz, f, declaredType));"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,218,"&& !strategy.shouldSkipField(new FieldAttributes(declaringClazz, f));"
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,225,"& !strategy.shouldSkipField(new FieldAttributes(declaringClazz, f, declaredType));"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,225,"&& !strategy.shouldSkipField(new FieldAttributes(declaringClazz, f));"
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,257,"uilder.factory(new GsonToMiniGsonTypeAdapterFactory(this, serializers, deserializers, serializeNulls))"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,257,"builder.factory(new GsonToMiniGsonTypeAdapterFactory(this, serializers, deserializers))"
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,688," object = this.<T>fromJson(jsonReader, typeOfT);"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,688,"T object = fromJson(jsonReader, typeOfT);"
False,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,33,rivate final boolean serializeNulls;
False,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,37,"arameterizedTypeHandlerMap<JsonDeserializer<?>> deserializers,"
False,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,38,oolean serializeNulls) {
True,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,36,ParameterizedTypeHandlerMap<JsonDeserializer<?>> deserializers) {
False,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,41,his.serializeNulls = serializeNulls;
False,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,22,mport java.util.Collections;
False,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,78, Reverses the elements of the array.
False,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,80,oid reverse() {
False,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,81,ollections.reverse(elements);
False,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,294, convenience method to get this array as an Object if it contains a single element.
False,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,296, @return get this element as an Object if it is single element array.
False,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,297, @throws ClassCastException if the element in the array is of not a {@link JsonPrimitive} and
False,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,298, is not a valid Object.
False,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,299, @throws IllegalStateException if the array has more than one element.
False,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,301,Override
False,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,302,bject getAsObject() {
False,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,303,f (elements.size() == 1) {
False,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,304,eturn elements.get(0).getAsObject();
False,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,306,hrow new IllegalStateException();
False,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,310, convenience method to get this element as an {@link Object} value.
False,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,312, @return get this element as an Object value.
False,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,313, @throws ClassCastException if the element is of not a {@link JsonPrimitive} and is not a valid
False,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,314, Object value.
False,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,315, @throws IllegalStateException if the element is of the type {@link JsonArray} but contains
False,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,316, more than a single element.
False,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,318,bject getAsObject() {
False,gson/src/main/java/com/google/gson/JsonElement.java,gson/src/main/java/com/google/gson/JsonElement.java,319,hrow new UnsupportedOperationException(getClass().getSimpleName());
False,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,279, convenience method to get this element as an Object.
False,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,281, @return get this element as an Object that can be converted to a suitable value.
False,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,283,Override
False,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,284,bject getAsObject() {
False,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,285,f (value instanceof BigInteger) {
False,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,286,igInteger big = (BigInteger) value;
False,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,287,f (big.compareTo(INTEGER_MAX) < 0) {
False,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,288,eturn big.intValue();
False,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,289, else if (big.compareTo(LONG_MAX) < 0) {
False,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,290,eturn big.longValue();
False,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,293,/ No need to convert to float or double since those lose precision
False,gson/src/main/java/com/google/gson/JsonPrimitive.java,gson/src/main/java/com/google/gson/JsonPrimitive.java,294,eturn value;
False,gson/src/main/java/com/google/gson/LruCache.java,gson/src/main/java/com/google/gson/LruCache.java,49,ublic synchronized V removeElement(K key) {
False,gson/src/main/java/com/google/gson/LruCache.java,gson/src/main/java/com/google/gson/LruCache.java,50,eturn remove(key);
False,gson/src/main/java/com/google/gson/internal/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/internal/ParameterizedTypeHandlerMap.java,131,ublic synchronized void register(ParameterizedTypeHandlerMap<T> other) {
False,gson/src/main/java/com/google/gson/internal/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/internal/ParameterizedTypeHandlerMap.java,132,f (!modifiable) {
False,gson/src/main/java/com/google/gson/internal/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/internal/ParameterizedTypeHandlerMap.java,133,"hrow new IllegalStateException(""Attempted to modify an unmodifiable map."");"
False,gson/src/main/java/com/google/gson/internal/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/internal/ParameterizedTypeHandlerMap.java,135,"or (Map.Entry<Type, T> entry : other.userMap.entrySet()) {"
False,gson/src/main/java/com/google/gson/internal/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/internal/ParameterizedTypeHandlerMap.java,136,"egister(entry.getKey(), entry.getValue(), false);"
False,gson/src/main/java/com/google/gson/internal/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/internal/ParameterizedTypeHandlerMap.java,138,"or (Map.Entry<Type, T> entry : other.systemMap.entrySet()) {"
False,gson/src/main/java/com/google/gson/internal/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/internal/ParameterizedTypeHandlerMap.java,139,"egister(entry.getKey(), entry.getValue(), true);"
False,gson/src/main/java/com/google/gson/internal/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/internal/ParameterizedTypeHandlerMap.java,141,/ Quite important to traverse the typeHierarchyList from stack bottom first since
False,gson/src/main/java/com/google/gson/internal/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/internal/ParameterizedTypeHandlerMap.java,142,/ we want to register the handlers in the same order to preserve priority order
False,gson/src/main/java/com/google/gson/internal/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/internal/ParameterizedTypeHandlerMap.java,143,or (int i = other.userTypeHierarchyList.size()-1; i >= 0; --i) {
False,gson/src/main/java/com/google/gson/internal/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/internal/ParameterizedTypeHandlerMap.java,144,"air<Class<?>, T> entry = other.userTypeHierarchyList.get(i);"
False,gson/src/main/java/com/google/gson/internal/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/internal/ParameterizedTypeHandlerMap.java,145,"egisterForTypeHierarchy(entry, false);"
False,gson/src/main/java/com/google/gson/internal/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/internal/ParameterizedTypeHandlerMap.java,147,or (int i = other.systemTypeHierarchyList.size()-1; i >= 0; --i) {
False,gson/src/main/java/com/google/gson/internal/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/internal/ParameterizedTypeHandlerMap.java,148,"air<Class<?>, T> entry = other.systemTypeHierarchyList.get(i);"
False,gson/src/main/java/com/google/gson/internal/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/internal/ParameterizedTypeHandlerMap.java,149,"egisterForTypeHierarchy(entry, true);"
False,gson/src/main/java/com/google/gson/internal/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/internal/ParameterizedTypeHandlerMap.java,153,"ublic synchronized void registerIfAbsent(Type typeOfT, T value) {"
False,gson/src/main/java/com/google/gson/internal/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/internal/ParameterizedTypeHandlerMap.java,154,f (!modifiable) {
False,gson/src/main/java/com/google/gson/internal/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/internal/ParameterizedTypeHandlerMap.java,155,"hrow new IllegalStateException(""Attempted to modify an unmodifiable map."");"
False,gson/src/main/java/com/google/gson/internal/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/internal/ParameterizedTypeHandlerMap.java,157,f (!userMap.containsKey(typeOfT)) {
False,gson/src/main/java/com/google/gson/internal/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/internal/ParameterizedTypeHandlerMap.java,158,"egister(typeOfT, value, false);"
False,gson/src/main/java/com/google/gson/internal/Streams.java,gson/src/main/java/com/google/gson/internal/Streams.java,124,* always print null when its parent element is an array! */
False,gson/src/main/java/com/google/gson/internal/Streams.java,gson/src/main/java/com/google/gson/internal/Streams.java,125,f (e.isJsonNull()) {
False,gson/src/main/java/com/google/gson/internal/Streams.java,gson/src/main/java/com/google/gson/internal/Streams.java,126,riter.nullValue();
False,gson/src/main/java/com/google/gson/internal/Streams.java,gson/src/main/java/com/google/gson/internal/Streams.java,127,ontinue;
False,gson/src/test/java/com/google/gson/DisjunctionExclusionStrategyTest.java,gson/src/test/java/com/google/gson/DisjunctionExclusionStrategyTest.java,38,"ew FieldAttributes(CLAZZ, CLAZZ.getFields()[0], CLAZZ);"
True,gson/src/test/java/com/google/gson/DisjunctionExclusionStrategyTest.java,gson/src/test/java/com/google/gson/DisjunctionExclusionStrategyTest.java,38,"new FieldAttributes(CLAZZ, CLAZZ.getFields()[0]);"
False,gson/src/test/java/com/google/gson/ExposeAnnotationExclusionStrategyTest.java,gson/src/test/java/com/google/gson/ExposeAnnotationExclusionStrategyTest.java,78,"eturn new FieldAttributes(MockObject.class, f, MockObject.class);"
True,gson/src/test/java/com/google/gson/ExposeAnnotationExclusionStrategyTest.java,gson/src/test/java/com/google/gson/ExposeAnnotationExclusionStrategyTest.java,78,"return new FieldAttributes(MockObject.class, f);"
False,gson/src/test/java/com/google/gson/FieldAttributesTest.java,gson/src/test/java/com/google/gson/FieldAttributesTest.java,39,"ieldAttributes = new FieldAttributes(Foo.class, Foo.class.getField(""bar""), Foo.class);"
True,gson/src/test/java/com/google/gson/FieldAttributesTest.java,gson/src/test/java/com/google/gson/FieldAttributesTest.java,39,"fieldAttributes = new FieldAttributes(Foo.class, Foo.class.getField(""bar""));"
False,gson/src/test/java/com/google/gson/FieldAttributesTest.java,gson/src/test/java/com/google/gson/FieldAttributesTest.java,44,"ew FieldAttributes(Foo.class, null, Foo.class);"
True,gson/src/test/java/com/google/gson/FieldAttributesTest.java,gson/src/test/java/com/google/gson/FieldAttributesTest.java,44,"new FieldAttributes(Foo.class, null);"
False,gson/src/test/java/com/google/gson/FieldNamingStrategy2AdapterTest.java,gson/src/test/java/com/google/gson/FieldNamingStrategy2AdapterTest.java,37,"ew FieldAttributes(String.class, field, String.class)));"
True,gson/src/test/java/com/google/gson/FieldNamingStrategy2AdapterTest.java,gson/src/test/java/com/google/gson/FieldNamingStrategy2AdapterTest.java,37,"new FieldAttributes(String.class, field)));"
False,gson/src/test/java/com/google/gson/InnerClassExclusionStrategyTest.java,gson/src/test/java/com/google/gson/InnerClassExclusionStrategyTest.java,49,"ssertTrue(strategy.shouldSkipField(new FieldAttributes(getClass(), f, getClass())));"
True,gson/src/test/java/com/google/gson/InnerClassExclusionStrategyTest.java,gson/src/test/java/com/google/gson/InnerClassExclusionStrategyTest.java,49,"assertTrue(strategy.shouldSkipField(new FieldAttributes(getClass(), f)));"
False,gson/src/test/java/com/google/gson/InnerClassExclusionStrategyTest.java,gson/src/test/java/com/google/gson/InnerClassExclusionStrategyTest.java,59,"ssertFalse(strategy.shouldSkipField(new FieldAttributes(getClass(), f, getClass())));"
True,gson/src/test/java/com/google/gson/InnerClassExclusionStrategyTest.java,gson/src/test/java/com/google/gson/InnerClassExclusionStrategyTest.java,59,"assertFalse(strategy.shouldSkipField(new FieldAttributes(getClass(), f)));"
False,gson/src/test/java/com/google/gson/JavaFieldNamingPolicyTest.java,gson/src/test/java/com/google/gson/JavaFieldNamingPolicyTest.java,37,"ieldAttributes f = new FieldAttributes(String.class, String.class.getFields()[0], String.class);"
True,gson/src/test/java/com/google/gson/JavaFieldNamingPolicyTest.java,gson/src/test/java/com/google/gson/JavaFieldNamingPolicyTest.java,37,"FieldAttributes f = new FieldAttributes(String.class, String.class.getFields()[0]);"
False,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,158, value = (T) json.getAsJsonObject().get(className).getAsObject();
True,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,158,JsonElement jsonElement = json.getAsJsonObject().get(className);
True,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,160,T value;
True,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,161,if (genericClass == Integer.class) {
True,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,162,value = (T) Integer.valueOf(jsonElement.getAsInt());
True,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,163,} else if (genericClass == String.class) {
True,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,164,value = (T) jsonElement.getAsString();
True,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,165,} else {
True,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,166,value = (T) jsonElement;
False,gson/src/test/java/com/google/gson/SerializedNameAnnotationInterceptingNamingPolicyTest.java,gson/src/test/java/com/google/gson/SerializedNameAnnotationInterceptingNamingPolicyTest.java,42,"omeObject.class, SomeObject.class.getField(fieldName), SomeObject.class);"
True,gson/src/test/java/com/google/gson/SerializedNameAnnotationInterceptingNamingPolicyTest.java,gson/src/test/java/com/google/gson/SerializedNameAnnotationInterceptingNamingPolicyTest.java,42,"SomeObject.class, SomeObject.class.getField(fieldName));"
False,gson/src/test/java/com/google/gson/SerializedNameAnnotationInterceptingNamingPolicyTest.java,gson/src/test/java/com/google/gson/SerializedNameAnnotationInterceptingNamingPolicyTest.java,51,"omeObject.class, SomeObject.class.getField(fieldName), SomeObject.class);"
True,gson/src/test/java/com/google/gson/SerializedNameAnnotationInterceptingNamingPolicyTest.java,gson/src/test/java/com/google/gson/SerializedNameAnnotationInterceptingNamingPolicyTest.java,51,"SomeObject.class, SomeObject.class.getField(fieldName));"
False,gson/src/test/java/com/google/gson/VersionExclusionStrategyTest.java,gson/src/test/java/com/google/gson/VersionExclusionStrategyTest.java,46,"ieldAttributes fieldAttributes = new FieldAttributes(clazz, f, clazz);"
True,gson/src/test/java/com/google/gson/VersionExclusionStrategyTest.java,gson/src/test/java/com/google/gson/VersionExclusionStrategyTest.java,46,"FieldAttributes fieldAttributes = new FieldAttributes(clazz, f);"
False,gson/src/test/java/com/google/gson/VersionExclusionStrategyTest.java,gson/src/test/java/com/google/gson/VersionExclusionStrategyTest.java,56,"ieldAttributes fieldAttributes = new FieldAttributes(clazz, f, clazz);"
True,gson/src/test/java/com/google/gson/VersionExclusionStrategyTest.java,gson/src/test/java/com/google/gson/VersionExclusionStrategyTest.java,56,"FieldAttributes fieldAttributes = new FieldAttributes(clazz, f);"
False,gson/src/test/java/com/google/gson/VersionExclusionStrategyTest.java,gson/src/test/java/com/google/gson/VersionExclusionStrategyTest.java,66,"ieldAttributes fieldAttributes = new FieldAttributes(clazz, f, clazz);"
True,gson/src/test/java/com/google/gson/VersionExclusionStrategyTest.java,gson/src/test/java/com/google/gson/VersionExclusionStrategyTest.java,66,"FieldAttributes fieldAttributes = new FieldAttributes(clazz, f);"
False,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,130,"ssertEquals(10, ((Number)intTarget.value).intValue());"
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,130,"assertEquals(10, intTarget.value.intValue());"

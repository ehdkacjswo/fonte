is_addition,old_file_path,new_file_path,line_num,content
True,gson/src/main/java/com/google/gson/CircularReferenceException.java,gson/src/main/java/com/google/gson/CircularReferenceException.java,2,* Copyright (C) 2009 Google Inc.
True,gson/src/main/java/com/google/gson/CircularReferenceException.java,gson/src/main/java/com/google/gson/CircularReferenceException.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/main/java/com/google/gson/CircularReferenceException.java,gson/src/main/java/com/google/gson/CircularReferenceException.java,5,* you may not use this file except in compliance with the License.
True,gson/src/main/java/com/google/gson/CircularReferenceException.java,gson/src/main/java/com/google/gson/CircularReferenceException.java,6,* You may obtain a copy of the License at
True,gson/src/main/java/com/google/gson/CircularReferenceException.java,gson/src/main/java/com/google/gson/CircularReferenceException.java,8,* http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/main/java/com/google/gson/CircularReferenceException.java,gson/src/main/java/com/google/gson/CircularReferenceException.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/main/java/com/google/gson/CircularReferenceException.java,gson/src/main/java/com/google/gson/CircularReferenceException.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/main/java/com/google/gson/CircularReferenceException.java,gson/src/main/java/com/google/gson/CircularReferenceException.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/main/java/com/google/gson/CircularReferenceException.java,gson/src/main/java/com/google/gson/CircularReferenceException.java,13,* See the License for the specific language governing permissions and
True,gson/src/main/java/com/google/gson/CircularReferenceException.java,gson/src/main/java/com/google/gson/CircularReferenceException.java,14,* limitations under the License.
True,gson/src/main/java/com/google/gson/CircularReferenceException.java,gson/src/main/java/com/google/gson/CircularReferenceException.java,16,package com.google.gson;
True,gson/src/main/java/com/google/gson/CircularReferenceException.java,gson/src/main/java/com/google/gson/CircularReferenceException.java,18,import java.lang.reflect.Field;
True,gson/src/main/java/com/google/gson/CircularReferenceException.java,gson/src/main/java/com/google/gson/CircularReferenceException.java,21,* Exception class to indicate a circular reference error.
True,gson/src/main/java/com/google/gson/CircularReferenceException.java,gson/src/main/java/com/google/gson/CircularReferenceException.java,22,* This class is not part of the public API and hence is not public.
True,gson/src/main/java/com/google/gson/CircularReferenceException.java,gson/src/main/java/com/google/gson/CircularReferenceException.java,24,* @author Inderjeet Singh
True,gson/src/main/java/com/google/gson/CircularReferenceException.java,gson/src/main/java/com/google/gson/CircularReferenceException.java,25,* @author Joel Leitch
True,gson/src/main/java/com/google/gson/CircularReferenceException.java,gson/src/main/java/com/google/gson/CircularReferenceException.java,27,final class CircularReferenceException extends RuntimeException {
True,gson/src/main/java/com/google/gson/CircularReferenceException.java,gson/src/main/java/com/google/gson/CircularReferenceException.java,28,private static final long serialVersionUID = 7444343294106513081L;
True,gson/src/main/java/com/google/gson/CircularReferenceException.java,gson/src/main/java/com/google/gson/CircularReferenceException.java,29,private final Object offendingNode;
True,gson/src/main/java/com/google/gson/CircularReferenceException.java,gson/src/main/java/com/google/gson/CircularReferenceException.java,31,CircularReferenceException(Object offendingNode) {
True,gson/src/main/java/com/google/gson/CircularReferenceException.java,gson/src/main/java/com/google/gson/CircularReferenceException.java,32,"super(""circular reference error"");"
True,gson/src/main/java/com/google/gson/CircularReferenceException.java,gson/src/main/java/com/google/gson/CircularReferenceException.java,33,this.offendingNode = offendingNode;
True,gson/src/main/java/com/google/gson/CircularReferenceException.java,gson/src/main/java/com/google/gson/CircularReferenceException.java,36,public IllegalStateException createDetailedException(Field offendingField) {
True,gson/src/main/java/com/google/gson/CircularReferenceException.java,gson/src/main/java/com/google/gson/CircularReferenceException.java,37,StringBuilder msg = new StringBuilder(getMessage());
True,gson/src/main/java/com/google/gson/CircularReferenceException.java,gson/src/main/java/com/google/gson/CircularReferenceException.java,38,if (offendingField != null) {
True,gson/src/main/java/com/google/gson/CircularReferenceException.java,gson/src/main/java/com/google/gson/CircularReferenceException.java,39,"msg.append(""\n  "").append(""Offending field: "").append(offendingField.getName() + ""\n"");"
True,gson/src/main/java/com/google/gson/CircularReferenceException.java,gson/src/main/java/com/google/gson/CircularReferenceException.java,41,if (offendingNode != null) {
True,gson/src/main/java/com/google/gson/CircularReferenceException.java,gson/src/main/java/com/google/gson/CircularReferenceException.java,42,"msg.append(""\n  "").append(""Offending object: "").append(offendingNode);"
True,gson/src/main/java/com/google/gson/CircularReferenceException.java,gson/src/main/java/com/google/gson/CircularReferenceException.java,44,"return new IllegalStateException(msg.toString(), this);"
False,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,20,mport java.util.HashMap;
False,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,gson/src/main/java/com/google/gson/JsonPrintFormatter.java,21,mport java.util.Map;
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,57,"hrow new IllegalStateException(""Circular reference found: "" + node);"
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,57,throw new CircularReferenceException(node);
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,88,"f (isFieldNull(f, obj)) {"
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,89,f (serializeNulls) {
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,90,"ddChildAsElement(f, JsonNull.createJsonNull());"
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,88,try {
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,89,"if (isFieldNull(f, obj)) {"
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,90,if (serializeNulls) {
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,91,"addChildAsElement(f, JsonNull.createJsonNull());"
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,93,} else {
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,94,"Object array = getFieldValue(f, obj);"
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,95,"addAsChildOfObject(f, typeOfF, array);"
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,92, else {
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,93,"bject array = getFieldValue(f, obj);"
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,94,"ddAsChildOfObject(f, typeOfF, array);"
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,97,} catch (CircularReferenceException e) {
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,98,throw e.createDetailedException(f);
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,99,"f (isFieldNull(f, obj)) {"
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,100,f (serializeNulls) {
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,101,"ddChildAsElement(f, JsonNull.createJsonNull());"
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,103, else {
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,104,"bject fieldValue = getFieldValue(f, obj);"
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,105,f (fieldValue != null) {
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,106,"ypeOfF = getActualTypeIfMoreSpecific(typeOfF, fieldValue.getClass());"
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,103,try {
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,104,"if (isFieldNull(f, obj)) {"
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,105,if (serializeNulls) {
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,106,"addChildAsElement(f, JsonNull.createJsonNull());"
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,108,} else {
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,109,"Object fieldValue = getFieldValue(f, obj);"
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,110,if (fieldValue != null) {
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,111,"typeOfF = getActualTypeIfMoreSpecific(typeOfF, fieldValue.getClass());"
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,113,"addAsChildOfObject(f, typeOfF, fieldValue);"
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,108,"ddAsChildOfObject(f, typeOfF, fieldValue);"
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,115,} catch (CircularReferenceException e) {
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,116,throw e.createDetailedException(f);
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,163,sonSerializer serializer = serializers.getHandlerFor(objType);
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,164,f (serializer == null && obj != null) {
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,165,erializer = serializers.getHandlerFor(obj.getClass());
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,171,try {
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,172,JsonSerializer serializer = serializers.getHandlerFor(objType);
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,173,if (serializer == null && obj != null) {
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,174,serializer = serializers.getHandlerFor(obj.getClass());
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,168,f (serializer != null) {
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,169,f (obj == null) {
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,170,ssignToRoot(JsonNull.createJsonNull());
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,171, else {
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,172,"ssignToRoot(serializer.serialize(obj, objType, context));"
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,177,if (serializer != null) {
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,178,if (obj == null) {
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,179,assignToRoot(JsonNull.createJsonNull());
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,180,} else {
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,181,"assignToRoot(invokeCustomHandler(obj, objType, serializer));"
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,183,return true;
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,174,eturn true;
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,185,return false;
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,186,} catch (CircularReferenceException e) {
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,187,throw e.createDetailedException(null);
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,191,"@SuppressWarnings(""unchecked"")"
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,192,"private JsonElement invokeCustomHandler(Object obj, Type objType, JsonSerializer serializer) {"
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,193,start(obj);
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,194,try {
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,195,"return serializer.serialize(obj, objType, context);"
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,196,} finally {
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,197,end(obj);
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,176,eturn false;
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,192,"sonElement child = serializer.serialize(obj, actualTypeOfField, context);"
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,214,"JsonElement child = invokeCustomHandler(obj, actualTypeOfField, serializer);"
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,221,} catch (CircularReferenceException e) {
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,222,throw e.createDetailedException(f);
True,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,2,* Copyright (C) 2008 Google Inc.
True,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,5,* you may not use this file except in compliance with the License.
True,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,6,* You may obtain a copy of the License at
True,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,8,* http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,13,* See the License for the specific language governing permissions and
True,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,14,* limitations under the License.
True,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,16,package com.google.gson.functional;
True,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,18,import java.lang.reflect.Type;
True,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,19,import java.util.ArrayList;
True,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,20,import java.util.Collection;
True,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,22,import junit.framework.TestCase;
True,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,24,import com.google.gson.Gson;
True,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,25,import com.google.gson.GsonBuilder;
True,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,26,import com.google.gson.JsonElement;
True,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,27,import com.google.gson.JsonObject;
True,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,28,import com.google.gson.JsonSerializationContext;
True,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,29,import com.google.gson.JsonSerializer;
True,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,30,import com.google.gson.common.TestTypes.ClassOverridingEquals;
True,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,33,* Functional tests related to circular reference detection and error reporting.
True,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,35,* @author Inderjeet Singh
True,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,36,* @author Joel Leitch
True,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,38,public class CircularReferenceTest extends TestCase {
True,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,39,private Gson gson;
True,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,41,@Override
True,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,42,protected void setUp() throws Exception {
True,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,43,super.setUp();
True,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,44,gson = new Gson();
True,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,47,public void testCircularSerialization() throws Exception {
True,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,48,ContainsReferenceToSelfType a = new ContainsReferenceToSelfType();
True,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,49,ContainsReferenceToSelfType b = new ContainsReferenceToSelfType();
True,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,50,a.children.add(b);
True,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,51,b.children.add(a);
True,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,52,try {
True,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,53,gson.toJson(a);
True,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,54,"fail(""Circular types should not get printed!"");"
True,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,55,} catch (IllegalStateException expected) {
True,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,56,"assertTrue(expected.getMessage().contains(""children""));"
True,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,60,public void testSelfReferenceSerialization() throws Exception {
True,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,61,ClassOverridingEquals objA = new ClassOverridingEquals();
True,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,62,objA.ref = objA;
True,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,64,try {
True,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,65,gson.toJson(objA);
True,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,66,"fail(""Circular reference to self can not be serialized!"");"
True,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,67,} catch (IllegalStateException expected) { }
True,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,70,public void testSelfReferenceArrayFieldSerialization() throws Exception {
True,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,71,ClassWithSelfReferenceArray objA = new ClassWithSelfReferenceArray();
True,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,72,objA.children = new ClassWithSelfReferenceArray[]{objA};
True,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,74,try {
True,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,75,gson.toJson(objA);
True,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,76,"fail(""Circular reference to self can not be serialized!"");"
True,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,77,} catch (IllegalStateException expected) {
True,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,78,"assertTrue(expected.getMessage().contains(""children""));"
True,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,82,public void testSelfReferenceCustomHandlerSerialization() throws Exception {
True,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,83,ClassWithSelfReference obj = new ClassWithSelfReference();
True,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,84,obj.child = obj;
True,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,85,"Gson gson = new GsonBuilder().registerTypeAdapter(ClassWithSelfReference.class, new JsonSerializer<ClassWithSelfReference>() {"
True,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,86,"public JsonElement serialize(ClassWithSelfReference src, Type typeOfSrc,"
True,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,87,JsonSerializationContext context) {
True,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,88,JsonObject obj = new JsonObject();
True,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,89,"obj.addProperty(""property"", ""value"");"
True,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,90,"obj.add(""child"", context.serialize(src.child));"
True,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,91,return obj;
True,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,93,}).create();
True,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,94,try {
True,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,95,gson.toJson(obj);
True,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,96,"fail(""Circular reference to self can not be serialized!"");"
True,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,97,} catch (IllegalStateException expected) {
True,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,98,"assertTrue(expected.getMessage().contains(""Offending""));"
True,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,102,public void testDirectedAcyclicGraphSerialization() throws Exception {
True,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,103,ContainsReferenceToSelfType a = new ContainsReferenceToSelfType();
True,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,104,ContainsReferenceToSelfType b = new ContainsReferenceToSelfType();
True,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,105,ContainsReferenceToSelfType c = new ContainsReferenceToSelfType();
True,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,106,a.children.add(b);
True,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,107,a.children.add(c);
True,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,108,b.children.add(c);
True,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,109,assertNotNull(gson.toJson(a));
True,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,112,public void testDirectedAcyclicGraphDeserialization() throws Exception {
True,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,113,"String json = ""{\""children\"":[{\""children\"":[{\""children\"":[]}]},{\""children\"":[]}]}"";"
True,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,114,"ContainsReferenceToSelfType target = gson.fromJson(json, ContainsReferenceToSelfType.class);"
True,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,115,assertNotNull(target);
True,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,116,"assertEquals(2, target.children.size());"
True,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,119,private static class ContainsReferenceToSelfType {
True,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,120,Collection<ContainsReferenceToSelfType> children = new ArrayList<ContainsReferenceToSelfType>();
True,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,123,private static class ClassWithSelfReference {
True,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,124,ClassWithSelfReference child;
True,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,127,private static class ClassWithSelfReferenceArray {
True,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,128,"@SuppressWarnings(""unused"")"
True,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java,129,ClassWithSelfReferenceArray[] children;
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,31,mport com.google.gson.common.TestTypes.ClassOverridingEquals;
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,94,ublic void testDirectedAcyclicGraphSerialization() throws Exception {
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,95,ontainsReferenceToSelfType a = new ContainsReferenceToSelfType();
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,96,ontainsReferenceToSelfType b = new ContainsReferenceToSelfType();
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,97,ontainsReferenceToSelfType c = new ContainsReferenceToSelfType();
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,98,.children.add(b);
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,99,.children.add(c);
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,100,.children.add(c);
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,101,ssertNotNull(gson.toJson(a));
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,104,ublic void testDirectedAcyclicGraphDeserialization() throws Exception {
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,105,"tring json = ""{\""children\"":[{\""children\"":[{\""children\"":[]}]},{\""children\"":[]}]}"";"
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,106,"ontainsReferenceToSelfType target = gson.fromJson(json, ContainsReferenceToSelfType.class);"
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,107,ssertNotNull(target);
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,108,"ssertEquals(2, target.children.size());"
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,234,"ontainsReferenceToSelfType target = gson.fromJson(json, ContainsReferenceToSelfType.class);"
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,216,"ClassWithCollectionField target = gson.fromJson(json, ClassWithCollectionField.class);"
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,221,private static class ClassWithCollectionField {
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,222,Collection<String> children = new ArrayList<String>();
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,255,ontainsReferenceToSelfType target = new ContainsReferenceToSelfType();
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,241,ClassWithCollectionField target = new ClassWithCollectionField();
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,259,ublic void testCircularSerialization() throws Exception {
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,260,ontainsReferenceToSelfType a = new ContainsReferenceToSelfType();
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,261,ontainsReferenceToSelfType b = new ContainsReferenceToSelfType();
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,262,.children.add(b);
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,263,.children.add(a);
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,264,ry {
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,265,son.toJson(a);
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,266,"ail(""Circular types should not get printed!"");"
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,267, catch (IllegalStateException expected) { }
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,270,ublic void testSelfReferenceSerialization() throws Exception {
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,271,lassOverridingEquals objA = new ClassOverridingEquals();
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,272,bjA.ref = objA;
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,274,ry {
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,275,son.toJson(objA);
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,276,"ail(""Circular reference to self can not be serialized!"");"
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,277, catch (IllegalStateException expected) { }
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,342,rivate static class ContainsReferenceToSelfType {
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,343,ublic Collection<ContainsReferenceToSelfType> children =
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,344,ew ArrayList<ContainsReferenceToSelfType>();

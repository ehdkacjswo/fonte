is_addition,old_file_path,new_file_path,line_num,content
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,646,if (Float.isNaN(src) || Float.isInfinite(src)) {
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,647,"throw new IllegalArgumentException(src + "" is not a valid double value as per JavaScript specification."");"
False,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,352,ublic void testNaNSerializationNotSupported() {
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,352,public void testDoubleNaNSerializationNotSupported() {
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,356,Double dw = Double.NaN;
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,357,gson.toJson(dw);
False,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,361,ublic void testNaNDeserializationNotSupported() {
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,363,public void testDoubleNaNDeserializationNotSupported() {
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,367,"assertEquals(Double.NaN, gson.fromJson(json, double.class));"
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,368,"fail(""Gson should not accept NaN for deserialization"");"
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,373,public void testFloatNaNSerializationNotSupported() {
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,374,try {
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,375,float f = Float.NaN;
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,376,gson.toJson(f);
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,377,Float fw = Float.NaN;
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,378,gson.toJson(fw);
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,379,"fail(""Gson should not accept NaN for serialization"");"
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,380,} catch (IllegalArgumentException expected) {
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,384,public void testFloatNaNDeserializationNotSupported() {
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,385,try {
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,386,"String json = ""NaN"";"
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,387,"assertEquals(Float.NaN, gson.fromJson(json, Float.class));"
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,388,"assertEquals(Float.NaN, gson.fromJson(json, float.class));"
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,389,"fail(""Gson should not accept NaN for deserialization"");"
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,390,} catch (JsonParseException expected) {
False,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,369,ublic void testInfinitySerializationNotSupported() {
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,394,public void testDoubleInfinitySerializationNotSupported() {
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,398,Double dw = Double.POSITIVE_INFINITY;
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,399,gson.toJson(dw);
False,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,378,ublic void testInfinityDeserializationNotSupported() {
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,405,public void testDoubleInfinityDeserializationNotSupported() {
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,409,"assertEquals(Double.POSITIVE_INFINITY, gson.fromJson(json, double.class));"
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,410,"fail(""Gson should not accept positive infinity for deserialization"");"
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,411,} catch (JsonParseException expected) {
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,415,public void testFloatInfinitySerializationNotSupported() {
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,416,try {
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,417,float f = Float.POSITIVE_INFINITY;
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,418,gson.toJson(f);
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,419,Float fw = Float.POSITIVE_INFINITY;
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,420,gson.toJson(fw);
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,421,"fail(""Gson should not accept positive infinity for serialization"");"
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,422,} catch (IllegalArgumentException expected) {
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,426,public void testFloatInfinityDeserializationNotSupported() {
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,427,try {
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,428,"String json = ""Infinity"";"
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,429,"assertEquals(Float.POSITIVE_INFINITY, gson.fromJson(json, Float.class));"
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,430,"assertEquals(Float.POSITIVE_INFINITY, gson.fromJson(json, float.class));"
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,431,"fail(""Gson should not accept positive infinity for deserialization"");"
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,440,Double dw = Double.NEGATIVE_INFINITY;
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,441,gson.toJson(dw);
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,450,"assertEquals(Double.NEGATIVE_INFINITY, gson.fromJson(json, double.class));"
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,452,"fail(""Gson should not accept positive infinity for serialization"");"
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,453,} catch (JsonParseException expected) {
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,457,public void testNegativeInfinityFloatSerializationNotSupported() {
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,458,try {
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,459,float f = Float.NEGATIVE_INFINITY;
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,460,gson.toJson(f);
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,461,Float fw = Float.NEGATIVE_INFINITY;
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,462,gson.toJson(fw);
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,463,"fail(""Gson should not accept positive infinity for serialization"");"
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,464,} catch (IllegalArgumentException expected) {
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,468,public void testNegativeInfinityFloatDeserializationNotSupported() {
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,469,try {
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,470,"String json = ""-Infinity"";"
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,471,"assertEquals(Float.NEGATIVE_INFINITY, gson.fromJson(json, float.class));"
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,472,"assertEquals(Float.NEGATIVE_INFINITY, gson.fromJson(json, Float.class));"
True,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,473,"fail(""Gson should not accept positive infinity for serialization"");"

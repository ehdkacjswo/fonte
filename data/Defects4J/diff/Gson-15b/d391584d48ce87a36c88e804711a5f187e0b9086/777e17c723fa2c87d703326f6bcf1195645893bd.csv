is_addition,old_file_path,new_file_path,line_num,content
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,20,mport com.google.gson.internal.ParameterizedTypeHandlerMap;
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,22,import com.google.gson.internal.TypeMap;
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,104,tatic final ParameterizedTypeHandlerMap EMPTY_MAP =
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,105,ew ParameterizedTypeHandlerMap().makeUnmodifiable();
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,104,static final TypeMap EMPTY_MAP = new TypeMap().makeUnmodifiable();
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,143,rivate final ParameterizedTypeHandlerMap<JsonSerializer<?>> serializers;
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,142,private final TypeMap<JsonSerializer<?>> serializers;
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,146,rivate final ParameterizedTypeHandlerMap<JsonDeserializer<?>> deserializers;
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,145,private final TypeMap<JsonDeserializer<?>> deserializers;
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,152,final JsonDeserializationContext deserializationContext = new JsonDeserializationContext() {
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,153,"public <T> T deserialize(JsonElement json, Type typeOfT) throws JsonParseException {"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,154,"return (T) fromJson(json, typeOfT);"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,158,final JsonSerializationContext serializationContext = new JsonSerializationContext() {
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,159,public JsonElement serialize(Object src) {
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,160,return toJsonTree(src);
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,162,"public JsonElement serialize(Object src, Type typeOfSrc) {"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,163,"return toJsonTree(src, typeOfSrc);"
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,198,"inal ParameterizedTypeHandlerMap<InstanceCreator<?>> instanceCreators, boolean serializeNulls,"
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,199,"inal ParameterizedTypeHandlerMap<JsonSerializer<?>> serializers,"
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,200,"inal ParameterizedTypeHandlerMap<JsonDeserializer<?>> deserializers,"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,212,"final TypeMap<InstanceCreator<?>> instanceCreators, boolean serializeNulls,"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,213,"final TypeMap<JsonSerializer<?>> serializers,"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,214,"final TypeMap<JsonDeserializer<?>> deserializers,"
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,271,"actories.add(new GsonToMiniGsonTypeAdapterFactory(this, serializers, deserializers));"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,285,"factories.add(new TreeTypeAdapter.TypeHierarchyFactory(serializers, deserializers));"
False,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,21,mport com.google.gson.internal.ParameterizedTypeHandlerMap;
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,22,import com.google.gson.internal.TypeMap;
False,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,90,rivate final ParameterizedTypeHandlerMap<InstanceCreator<?>> instanceCreators;
False,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,91,rivate final ParameterizedTypeHandlerMap<JsonSerializer<?>> serializers;
False,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,92,rivate final ParameterizedTypeHandlerMap<JsonDeserializer<?>> deserializers;
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,90,private final TypeMap<InstanceCreator<?>> instanceCreators;
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,91,private final TypeMap<JsonSerializer<?>> serializers;
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,92,private final TypeMap<JsonDeserializer<?>> deserializers;
False,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,127,nstanceCreators = new ParameterizedTypeHandlerMap<InstanceCreator<?>>();
False,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,128,erializers = new ParameterizedTypeHandlerMap<JsonSerializer<?>>();
False,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,129,eserializers = new ParameterizedTypeHandlerMap<JsonDeserializer<?>>();
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,127,instanceCreators = new TypeMap<InstanceCreator<?>>();
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,128,serializers = new TypeMap<JsonSerializer<?>>();
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,129,deserializers = new TypeMap<JsonDeserializer<?>>();
False,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,532,f (typeAdapter instanceof JsonSerializer<?>) {
False,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,533,"egisterSerializer(type, (JsonSerializer<?>) typeAdapter);"
False,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,535,f (typeAdapter instanceof JsonDeserializer<?>) {
False,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,536,"egisterDeserializer(type, (JsonDeserializer<?>) typeAdapter);"
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,532,if (typeAdapter instanceof JsonSerializer<?> || typeAdapter instanceof JsonDeserializer<?>) {
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,533,TypeToken<?> typeToken = TypeToken.get(type);
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,534,"typeAdapterFactories.add(new TreeTypeAdapter.SingleTypeFactory(typeToken, typeAdapter));"
False,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,562, Configures Gson to use a custom JSON serializer for the specified type. You should use this
False,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,563, method if you want to register different serializers for different generic types corresponding
False,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,564, to a raw type.
False,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,567, @param typeOfT The type definition for T
False,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,568, @param serializer the custom serializer
False,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,569," @return a reference to this {@code GsonBuilder} object to fulfill the ""Builder"" pattern"
False,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,571,"rivate <T> GsonBuilder registerSerializer(Type typeOfT, JsonSerializer<T> serializer) {"
False,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,572,"erializers.register(typeOfT, serializer);"
False,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,573,eturn this;
False,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,577, Configures Gson to use a custom JSON deserializer for the specified type. You should use this
False,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,578, method if you want to register different deserializers for different generic types
False,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,579, corresponding to a raw type.
False,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,582, @param typeOfT The type definition for T
False,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,583, @param deserializer the custom deserializer
False,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,584," @return a reference to this {@code GsonBuilder} object to fulfill the ""Builder"" pattern"
False,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,586,"rivate <T> GsonBuilder registerDeserializer(Type typeOfT, JsonDeserializer<T> deserializer) {"
False,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,587,"eserializers.register(typeOfT, new JsonDeserializerExceptionWrapper<T>(deserializer));"
False,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,588,eturn this;
False,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,706,"arameterizedTypeHandlerMap<JsonSerializer<?>> serializers,"
False,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,707,arameterizedTypeHandlerMap<JsonDeserializer<?>> deserializers) {
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,674,"TypeMap<JsonSerializer<?>> serializers, TypeMap<JsonDeserializer<?>> deserializers) {"
False,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,725,"rivate static <T> void registerIfAbsent(Class<?> type,"
False,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,726,"arameterizedTypeHandlerMap<T> adapters, T adapter) {"
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,692,"private static <T> void registerIfAbsent(Class<?> type, TypeMap<T> adapters, T adapter) {"
False,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,2, Copyright (C) 2011 Google Inc.
False,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,4," Licensed under the Apache License, Version 2.0 (the ""License"");"
False,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,5, you may not use this file except in compliance with the License.
False,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,6, You may obtain a copy of the License at
False,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,8, http://www.apache.org/licenses/LICENSE-2.0
False,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,10," Unless required by applicable law or agreed to in writing, software"
False,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,11," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,12," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,13, See the License for the specific language governing permissions and
False,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,14, limitations under the License.
False,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,16,ackage com.google.gson;
False,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,18,mport com.google.gson.internal.ParameterizedTypeHandlerMap;
False,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,19,mport com.google.gson.internal.Streams;
False,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,20,mport com.google.gson.reflect.TypeToken;
False,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,21,mport com.google.gson.stream.JsonReader;
False,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,22,mport com.google.gson.stream.JsonWriter;
False,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,23,mport java.io.IOException;
False,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,24,mport java.lang.reflect.Type;
False,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,26,inal class GsonToMiniGsonTypeAdapterFactory implements TypeAdapter.Factory {
False,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,27,rivate final ParameterizedTypeHandlerMap<JsonSerializer<?>> serializers;
False,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,28,rivate final ParameterizedTypeHandlerMap<JsonDeserializer<?>> deserializers;
False,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,29,rivate final JsonDeserializationContext deserializationContext;
False,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,30,rivate final JsonSerializationContext serializationContext;
False,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,32,"ublic GsonToMiniGsonTypeAdapterFactory(final Gson gson,"
False,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,33,"arameterizedTypeHandlerMap<JsonSerializer<?>> serializers,"
False,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,34,arameterizedTypeHandlerMap<JsonDeserializer<?>> deserializers) {
False,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,35,his.serializers = serializers;
False,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,36,his.deserializers = deserializers;
False,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,38,his.deserializationContext = new JsonDeserializationContext() {
False,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,39,"ublic <T> T deserialize(JsonElement json, Type typeOfT) throws JsonParseException {"
False,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,40,"eturn (T) gson.fromJson(json, typeOfT);"
False,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,44,his.serializationContext = new JsonSerializationContext() {
False,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,45,ublic JsonElement serialize(Object src) {
False,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,46,eturn gson.toJsonTree(src);
False,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,48,"ublic JsonElement serialize(Object src, Type typeOfSrc) {"
False,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,49,"eturn gson.toJsonTree(src, typeOfSrc);"
False,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,54,"ublic <T> TypeAdapter<T> create(final Gson context, final TypeToken<T> typeToken) {"
False,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,55,inal Type type = typeToken.getType();
False,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,57,"SuppressWarnings(""unchecked"") // guaranteed to match typeOfT"
False,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,58,inal JsonSerializer<T> serializer
False,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,59," (JsonSerializer<T>) serializers.getHandlerFor(type, false);"
False,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,60,"SuppressWarnings(""unchecked"") // guaranteed to match typeOfT"
False,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,61,inal JsonDeserializer<T> deserializer
False,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,62," (JsonDeserializer<T>) deserializers.getHandlerFor(type, false);"
False,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,64,f (serializer == null && deserializer == null) {
False,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,65,eturn null;
False,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,68,eturn new TypeAdapter<T>() {
False,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,70," The delegate is lazily created because it may not be needed, and"
False,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,71, creating it may fail.
False,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,73,rivate TypeAdapter<T> delegate;
False,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,75,Override public T read(JsonReader reader) throws IOException {
False,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,76,f (deserializer == null) {
False,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,77,eturn delegate().read(reader);
False,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,79,sonElement value = Streams.parse(reader);
False,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,80,f (value.isJsonNull()) {
False,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,81,eturn null;
False,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,83,"eturn deserializer.deserialize(value, type, deserializationContext);"
False,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,86,"Override public void write(JsonWriter writer, T value) throws IOException {"
False,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,87,f (serializer == null) {
False,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,88,"elegate().write(writer, value);"
False,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,89,eturn;
False,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,91,f (value == null) {
False,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,92,riter.nullValue();
False,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,93,eturn;
False,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,95,"sonElement element = serializer.serialize(value, type, serializationContext);"
False,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,96,"treams.write(element, writer);"
False,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,99,rivate TypeAdapter<T> delegate() {
False,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,100,ypeAdapter<T> d = delegate;
False,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,101,eturn d != null
False,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,102, d
False,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java,103," (delegate = context.getNextAdapter(GsonToMiniGsonTypeAdapterFactory.this, typeToken));"
True,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,2,* Copyright (C) 2011 Google Inc.
True,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,5,* you may not use this file except in compliance with the License.
True,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,6,* You may obtain a copy of the License at
True,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,8,* http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,13,* See the License for the specific language governing permissions and
True,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,14,* limitations under the License.
True,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,17,package com.google.gson;
True,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,19,import com.google.gson.internal.$Gson$Preconditions;
True,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,20,import com.google.gson.internal.Streams;
True,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,21,import com.google.gson.internal.TypeMap;
True,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,22,import com.google.gson.reflect.TypeToken;
True,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,23,import com.google.gson.stream.JsonReader;
True,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,24,import com.google.gson.stream.JsonWriter;
True,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,25,import java.io.IOException;
True,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,26,import java.lang.reflect.Type;
True,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,29,* Adapts a Gson 1.x tree-style adapter as a streaming TypeAdapter. Since the
True,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,30,"* tree adapter may be serialization-only or deserialization-only, this class"
True,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,31,* has a facility to lookup a delegate type adapter on demand.
True,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,33,public final class TreeTypeAdapter<T> extends TypeAdapter<T> {
True,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,34,private final JsonSerializer<T> serializer;
True,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,35,private final JsonDeserializer<T> deserializer;
True,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,36,private final Gson gson;
True,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,37,private final TypeToken<T> typeToken;
True,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,38,private final Factory skipPast;
True,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,40,"/** The delegate is lazily created because it may not be needed, and creating it may fail. */"
True,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,41,private TypeAdapter<T> delegate;
True,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,43,"private TreeTypeAdapter(JsonSerializer<T> serializer, JsonDeserializer<T> deserializer,"
True,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,44,"Gson gson, TypeToken<T> typeToken, Factory skipPast) {"
True,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,45,this.serializer = serializer;
True,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,46,this.deserializer = deserializer;
True,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,47,this.gson = gson;
True,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,48,this.typeToken = typeToken;
True,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,49,this.skipPast = skipPast;
True,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,52,@Override public T read(JsonReader reader) throws IOException {
True,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,53,if (deserializer == null) {
True,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,54,return delegate().read(reader);
True,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,56,JsonElement value = Streams.parse(reader);
True,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,57,if (value.isJsonNull()) {
True,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,58,return null;
True,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,60,"return deserializer.deserialize(value, typeToken.getType(), gson.deserializationContext);"
True,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,63,"@Override public void write(JsonWriter writer, T value) throws IOException {"
True,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,64,if (serializer == null) {
True,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,65,"delegate().write(writer, value);"
True,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,66,return;
True,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,68,if (value == null) {
True,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,69,writer.nullValue();
True,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,70,return;
True,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,72,"JsonElement tree = serializer.serialize(value, typeToken.getType(), gson.serializationContext);"
True,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,73,"Streams.write(tree,writer);"
True,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,76,private TypeAdapter<T> delegate() {
True,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,77,TypeAdapter<T> d = delegate;
True,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,78,return d != null
True,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,79,? d
True,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,80,": (delegate = gson.getNextAdapter(skipPast, typeToken));"
True,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,83,public static class SingleTypeFactory implements TypeAdapter.Factory {
True,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,84,private final TypeToken<?> typeToken;
True,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,85,private final JsonSerializer<?> serializer;
True,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,86,private final JsonDeserializer<?> deserializer;
True,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,88,"public SingleTypeFactory(TypeToken<?> typeToken, Object typeAdapter) {"
True,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,89,this.typeToken = typeToken;
True,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,90,serializer = typeAdapter instanceof JsonSerializer
True,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,91,? (JsonSerializer) typeAdapter
True,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,92,: null;
True,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,93,deserializer = typeAdapter instanceof JsonDeserializer
True,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,94,? (JsonDeserializer) typeAdapter
True,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,95,: null;
True,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,96,$Gson$Preconditions.checkArgument(serializer != null || deserializer != null);
True,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,99,"@SuppressWarnings(""unchecked"") // guarded by typeToken.equals() call"
True,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,100,"public <T> TypeAdapter<T> create(Gson context, TypeToken<T> type) {"
True,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,101,return typeToken.equals(type)
True,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,102,"? new TreeTypeAdapter<T>((JsonSerializer<T>) serializer,"
True,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,103,"(JsonDeserializer<T>) deserializer, context, type, this)"
True,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,104,: null;
True,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,108,public static class TypeHierarchyFactory implements TypeAdapter.Factory {
True,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,109,private final TypeMap<JsonSerializer<?>> serializers;
True,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,110,private final TypeMap<JsonDeserializer<?>> deserializers;
True,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,112,"public TypeHierarchyFactory(TypeMap<JsonSerializer<?>> serializers,"
True,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,113,TypeMap<JsonDeserializer<?>> deserializers) {
True,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,114,this.serializers = serializers;
True,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,115,this.deserializers = deserializers;
True,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,118,"@SuppressWarnings(""unchecked"") // guaranteed by serializers lookup matching type"
True,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,119,"public <T> TypeAdapter<T> create(Gson context, TypeToken<T> typeToken) {"
True,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,120,Type type = typeToken.getType();
True,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,121,JsonSerializer<T> serializer = (JsonSerializer<T>) serializers.getHandlerFor(type);
True,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,122,JsonDeserializer<T> deserializer = (JsonDeserializer<T>) deserializers.getHandlerFor(type);
True,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,123,return (serializer != null || deserializer != null)
True,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,124,"? new TreeTypeAdapter<T>(serializer, deserializer, context, typeToken, this)"
True,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,gson/src/main/java/com/google/gson/TreeTypeAdapter.java,125,: null;
False,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,39,rivate final ParameterizedTypeHandlerMap<InstanceCreator<?>> instanceCreators;
True,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,39,private final TypeMap<InstanceCreator<?>> instanceCreators;
False,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,41,ublic ConstructorConstructor(ParameterizedTypeHandlerMap<InstanceCreator<?>> instanceCreators) {
True,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,41,public ConstructorConstructor(TypeMap<InstanceCreator<?>> instanceCreators) {
False,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,46,his(new ParameterizedTypeHandlerMap<InstanceCreator<?>>());
True,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,46,this(new TypeMap<InstanceCreator<?>>());
False,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,57," (InstanceCreator<T>) instanceCreators.getHandlerFor(type, false);"
True,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java,57,= (InstanceCreator<T>) instanceCreators.getHandlerFor(type);
False,gson/src/main/java/com/google/gson/internal/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,36,ublic final class ParameterizedTypeHandlerMap<T> {
False,gson/src/main/java/com/google/gson/internal/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,38,rivate static final Logger logger =
False,gson/src/main/java/com/google/gson/internal/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,39,ogger.getLogger(ParameterizedTypeHandlerMap.class.getName());
True,gson/src/main/java/com/google/gson/internal/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,36,public final class TypeMap<T> {
True,gson/src/main/java/com/google/gson/internal/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,37,private static final Logger logger = Logger.getLogger(TypeMap.class.getName());
False,gson/src/main/java/com/google/gson/internal/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,42,"rivate final Map<Type, T> userMap = new HashMap<Type, T>();"
True,gson/src/main/java/com/google/gson/internal/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,40,"private final Map<Type, T> typeMap = new HashMap<Type, T>();"
False,gson/src/main/java/com/google/gson/internal/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,45,"rivate final List<Pair<Class<?>, T>> userTypeHierarchyList = new ArrayList<Pair<Class<?>, T>>();"
True,gson/src/main/java/com/google/gson/internal/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,43,"private final List<Pair<Class<?>, T>> typeHierarchyList = new ArrayList<Pair<Class<?>, T>>();"
False,gson/src/main/java/com/google/gson/internal/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,57,"ist<Pair<Class<?>, T>> typeHierarchyList = userTypeHierarchyList;"
False,gson/src/main/java/com/google/gson/internal/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,59,f (index >= 0) {
True,gson/src/main/java/com/google/gson/internal/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,56,if (index != -1) {
False,gson/src/main/java/com/google/gson/internal/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,64,f (index >= 0) {
True,gson/src/main/java/com/google/gson/internal/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,61,if (index != -1) {
False,gson/src/main/java/com/google/gson/internal/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,88,f (hasSpecificHandlerFor(typeOfT)) {
False,gson/src/main/java/com/google/gson/internal/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,89,"ogger.log(Level.WARNING, ""Overriding the existing type handler for {0}"", typeOfT);"
False,gson/src/main/java/com/google/gson/internal/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,91,"ap<Type, T> map = userMap;"
False,gson/src/main/java/com/google/gson/internal/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,92,"ap.put(typeOfT, value);"
True,gson/src/main/java/com/google/gson/internal/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,85,"typeMap.put(typeOfT, value);"
False,gson/src/main/java/com/google/gson/internal/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,95,ublic synchronized void registerIfAbsent(ParameterizedTypeHandlerMap<T> other) {
False,gson/src/main/java/com/google/gson/internal/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,96,f (!modifiable) {
False,gson/src/main/java/com/google/gson/internal/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,97,"hrow new IllegalStateException(""Attempted to modify an unmodifiable map."");"
False,gson/src/main/java/com/google/gson/internal/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,99,"or (Map.Entry<Type, T> entry : other.userMap.entrySet()) {"
False,gson/src/main/java/com/google/gson/internal/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,100,f (!userMap.containsKey(entry.getKey())) {
False,gson/src/main/java/com/google/gson/internal/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,101,"egister(entry.getKey(), entry.getValue());"
False,gson/src/main/java/com/google/gson/internal/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,104,/ Quite important to traverse the typeHierarchyList from stack bottom first since
False,gson/src/main/java/com/google/gson/internal/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,105,/ we want to register the handlers in the same order to preserve priority order
False,gson/src/main/java/com/google/gson/internal/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,106,or (int i = other.userTypeHierarchyList.size()-1; i >= 0; --i) {
False,gson/src/main/java/com/google/gson/internal/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,107,"air<Class<?>, T> entry = other.userTypeHierarchyList.get(i);"
False,gson/src/main/java/com/google/gson/internal/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,108,"nt index = getIndexOfSpecificHandlerForTypeHierarchy(entry.first, userTypeHierarchyList);"
False,gson/src/main/java/com/google/gson/internal/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,109,f (index < 0) {
False,gson/src/main/java/com/google/gson/internal/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,110,egisterForTypeHierarchy(entry);
False,gson/src/main/java/com/google/gson/internal/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,115,ublic synchronized ParameterizedTypeHandlerMap<T> makeUnmodifiable() {
True,gson/src/main/java/com/google/gson/internal/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,88,public synchronized TypeMap<T> makeUnmodifiable() {
False,gson/src/main/java/com/google/gson/internal/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,120,"ublic synchronized T getHandlerFor(Type type, boolean systemOnly) {"
False,gson/src/main/java/com/google/gson/internal/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,121, handler;
False,gson/src/main/java/com/google/gson/internal/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,122,f (!systemOnly) {
False,gson/src/main/java/com/google/gson/internal/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,123,andler = userMap.get(type);
False,gson/src/main/java/com/google/gson/internal/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,124,f (handler != null) {
False,gson/src/main/java/com/google/gson/internal/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,125,eturn handler;
True,gson/src/main/java/com/google/gson/internal/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,93,public synchronized T getHandlerFor(Type type) {
True,gson/src/main/java/com/google/gson/internal/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,94,T handler = typeMap.get(type);
True,gson/src/main/java/com/google/gson/internal/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,95,if (handler != null) {
True,gson/src/main/java/com/google/gson/internal/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,96,return handler;
False,gson/src/main/java/com/google/gson/internal/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,130,"andler = getHandlerFor(rawClass, systemOnly);"
True,gson/src/main/java/com/google/gson/internal/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,100,handler = getHandlerFor(rawClass);
False,gson/src/main/java/com/google/gson/internal/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,136,"andler = getHandlerForTypeHierarchy(rawClass, systemOnly);"
False,gson/src/main/java/com/google/gson/internal/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,137,eturn handler;
True,gson/src/main/java/com/google/gson/internal/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,106,return getHandlerForTypeHierarchy(rawClass);
False,gson/src/main/java/com/google/gson/internal/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,140,"rivate T getHandlerForTypeHierarchy(Class<?> type, boolean systemOnly) {"
False,gson/src/main/java/com/google/gson/internal/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,141,f (!systemOnly) {
False,gson/src/main/java/com/google/gson/internal/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,142,"or (Pair<Class<?>, T> entry : userTypeHierarchyList) {"
False,gson/src/main/java/com/google/gson/internal/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,143,f (entry.first.isAssignableFrom(type)) {
False,gson/src/main/java/com/google/gson/internal/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,144,eturn entry.second;
True,gson/src/main/java/com/google/gson/internal/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,109,private T getHandlerForTypeHierarchy(Class<?> type) {
True,gson/src/main/java/com/google/gson/internal/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,110,"for (Pair<Class<?>, T> entry : typeHierarchyList) {"
True,gson/src/main/java/com/google/gson/internal/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,111,if (entry.first.isAssignableFrom(type)) {
True,gson/src/main/java/com/google/gson/internal/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,112,return entry.second;
False,gson/src/main/java/com/google/gson/internal/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,152,eturn userMap.containsKey(type);
True,gson/src/main/java/com/google/gson/internal/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,119,return typeMap.containsKey(type);
False,gson/src/main/java/com/google/gson/internal/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,165,ublic synchronized ParameterizedTypeHandlerMap<T> copyOf() {
False,gson/src/main/java/com/google/gson/internal/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,166,arameterizedTypeHandlerMap<T> copy = new ParameterizedTypeHandlerMap<T>();
True,gson/src/main/java/com/google/gson/internal/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,132,public synchronized TypeMap<T> copyOf() {
True,gson/src/main/java/com/google/gson/internal/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,133,TypeMap<T> copy = new TypeMap<T>();
False,gson/src/main/java/com/google/gson/internal/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,170,/ TODO (inder): Performance optimization. We can probably just share the
False,gson/src/main/java/com/google/gson/internal/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,171,/ systemMap and systemTypeHierarchyList instead of making copies
False,gson/src/main/java/com/google/gson/internal/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,172,opy.userMap.putAll(userMap);
False,gson/src/main/java/com/google/gson/internal/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,173,opy.userTypeHierarchyList.addAll(userTypeHierarchyList);
True,gson/src/main/java/com/google/gson/internal/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,136,copy.typeMap.putAll(typeMap);
True,gson/src/main/java/com/google/gson/internal/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,137,copy.typeHierarchyList.addAll(typeHierarchyList);
False,gson/src/main/java/com/google/gson/internal/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,179,"tringBuilder sb = new StringBuilder(""{userTypeHierarchyList:{"");"
False,gson/src/main/java/com/google/gson/internal/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,180,"ppendList(sb, userTypeHierarchyList);"
False,gson/src/main/java/com/google/gson/internal/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,181,"b.append(""},userMap:{"");"
False,gson/src/main/java/com/google/gson/internal/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,182,"ppendMap(sb, userMap);"
True,gson/src/main/java/com/google/gson/internal/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,143,"StringBuilder sb = new StringBuilder(""{typeHierarchyList:{"");"
True,gson/src/main/java/com/google/gson/internal/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,144,"appendList(sb, typeHierarchyList);"
True,gson/src/main/java/com/google/gson/internal/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,145,"sb.append(""},typeMap:{"");"
True,gson/src/main/java/com/google/gson/internal/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/internal/TypeMap.java,146,"appendMap(sb, typeMap);"
False,gson/src/test/java/com/google/gson/internal/ParameterizedTypeHandlerMapTest.java,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,27, Unit tests for the {@link com.google.gson.internal.ParameterizedTypeHandlerMap} class.
True,gson/src/test/java/com/google/gson/internal/ParameterizedTypeHandlerMapTest.java,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,27,* Unit tests for the {@link TypeMap} class.
False,gson/src/test/java/com/google/gson/internal/ParameterizedTypeHandlerMapTest.java,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,31,ublic class ParameterizedTypeHandlerMapTest extends TestCase {
False,gson/src/test/java/com/google/gson/internal/ParameterizedTypeHandlerMapTest.java,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,32,rivate ParameterizedTypeHandlerMap<String> paramMap;
True,gson/src/test/java/com/google/gson/internal/ParameterizedTypeHandlerMapTest.java,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,31,public class TypeMapTest extends TestCase {
True,gson/src/test/java/com/google/gson/internal/ParameterizedTypeHandlerMapTest.java,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,32,private TypeMap<String> paramMap;
False,gson/src/test/java/com/google/gson/internal/ParameterizedTypeHandlerMapTest.java,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,37,aramMap = new ParameterizedTypeHandlerMap<String>();
True,gson/src/test/java/com/google/gson/internal/ParameterizedTypeHandlerMapTest.java,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,37,paramMap = new TypeMap<String>();
False,gson/src/test/java/com/google/gson/internal/ParameterizedTypeHandlerMapTest.java,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,42,"ssertNull(paramMap.getHandlerFor(String.class, false));"
False,gson/src/test/java/com/google/gson/internal/ParameterizedTypeHandlerMapTest.java,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,43,"ssertNull(paramMap.getHandlerFor(String.class, false));"
True,gson/src/test/java/com/google/gson/internal/ParameterizedTypeHandlerMapTest.java,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,42,assertNull(paramMap.getHandlerFor(String.class));
True,gson/src/test/java/com/google/gson/internal/ParameterizedTypeHandlerMapTest.java,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,43,assertNull(paramMap.getHandlerFor(String.class));
False,gson/src/test/java/com/google/gson/internal/ParameterizedTypeHandlerMapTest.java,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,53,"ssertNotNull(paramMap.getHandlerFor(specificType, false));"
False,gson/src/test/java/com/google/gson/internal/ParameterizedTypeHandlerMapTest.java,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,54,"ssertNotNull(paramMap.getHandlerFor(List.class, false));"
False,gson/src/test/java/com/google/gson/internal/ParameterizedTypeHandlerMapTest.java,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,55,"ssertEquals(handler, paramMap.getHandlerFor(specificType, false));"
True,gson/src/test/java/com/google/gson/internal/ParameterizedTypeHandlerMapTest.java,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,53,assertNotNull(paramMap.getHandlerFor(specificType));
True,gson/src/test/java/com/google/gson/internal/ParameterizedTypeHandlerMapTest.java,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,54,assertNotNull(paramMap.getHandlerFor(List.class));
True,gson/src/test/java/com/google/gson/internal/ParameterizedTypeHandlerMapTest.java,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,55,"assertEquals(handler, paramMap.getHandlerFor(specificType));"
False,gson/src/test/java/com/google/gson/internal/ParameterizedTypeHandlerMapTest.java,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,65,"ssertNotNull(paramMap.getHandlerFor(specificType, false));"
False,gson/src/test/java/com/google/gson/internal/ParameterizedTypeHandlerMapTest.java,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,66,"ssertNull(paramMap.getHandlerFor(List.class, false));"
False,gson/src/test/java/com/google/gson/internal/ParameterizedTypeHandlerMapTest.java,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,67,"ssertEquals(handler, paramMap.getHandlerFor(specificType, false));"
True,gson/src/test/java/com/google/gson/internal/ParameterizedTypeHandlerMapTest.java,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,65,assertNotNull(paramMap.getHandlerFor(specificType));
True,gson/src/test/java/com/google/gson/internal/ParameterizedTypeHandlerMapTest.java,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,66,assertNull(paramMap.getHandlerFor(List.class));
True,gson/src/test/java/com/google/gson/internal/ParameterizedTypeHandlerMapTest.java,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,67,"assertEquals(handler, paramMap.getHandlerFor(specificType));"
False,gson/src/test/java/com/google/gson/internal/ParameterizedTypeHandlerMapTest.java,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,77,"ssertEquals(handler2, paramMap.getHandlerFor(String.class, false));"
True,gson/src/test/java/com/google/gson/internal/ParameterizedTypeHandlerMapTest.java,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,77,"assertEquals(handler2, paramMap.getHandlerFor(String.class));"
False,gson/src/test/java/com/google/gson/internal/ParameterizedTypeHandlerMapTest.java,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,90,"tring handler = paramMap.getHandlerFor(Sub.class, false);"
True,gson/src/test/java/com/google/gson/internal/ParameterizedTypeHandlerMapTest.java,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,90,String handler = paramMap.getHandlerFor(Sub.class);
False,gson/src/test/java/com/google/gson/internal/ParameterizedTypeHandlerMapTest.java,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,97,"tring handler = paramMap.getHandlerFor(SubOfSub.class, false);"
True,gson/src/test/java/com/google/gson/internal/ParameterizedTypeHandlerMapTest.java,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,97,String handler = paramMap.getHandlerFor(SubOfSub.class);
False,gson/src/test/java/com/google/gson/internal/ParameterizedTypeHandlerMapTest.java,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,101,ublic void testTypeHierarchyRegisterIfAbsent() {
False,gson/src/test/java/com/google/gson/internal/ParameterizedTypeHandlerMapTest.java,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,102,"aramMap.registerForTypeHierarchy(Base.class, ""baseHandler"");"
False,gson/src/test/java/com/google/gson/internal/ParameterizedTypeHandlerMapTest.java,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,103,arameterizedTypeHandlerMap<String> otherMap = new ParameterizedTypeHandlerMap<String>();
False,gson/src/test/java/com/google/gson/internal/ParameterizedTypeHandlerMapTest.java,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,104,"therMap.registerForTypeHierarchy(Base.class, ""baseHandler2"");"
False,gson/src/test/java/com/google/gson/internal/ParameterizedTypeHandlerMapTest.java,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,105,aramMap.registerIfAbsent(otherMap);
False,gson/src/test/java/com/google/gson/internal/ParameterizedTypeHandlerMapTest.java,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,106,"tring handler = paramMap.getHandlerFor(Base.class, false);"
False,gson/src/test/java/com/google/gson/internal/ParameterizedTypeHandlerMapTest.java,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,107,"ssertEquals(""baseHandler"", handler);"
False,gson/src/test/java/com/google/gson/internal/ParameterizedTypeHandlerMapTest.java,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,113,"tring handler = paramMap.getHandlerFor(Base.class, false);"
True,gson/src/test/java/com/google/gson/internal/ParameterizedTypeHandlerMapTest.java,gson/src/test/java/com/google/gson/internal/TypeMapTest.java,104,String handler = paramMap.getHandlerFor(Base.class);

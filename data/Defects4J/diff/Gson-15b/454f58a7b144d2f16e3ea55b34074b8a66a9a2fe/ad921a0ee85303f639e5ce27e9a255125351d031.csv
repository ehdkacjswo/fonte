is_addition,old_file_path,new_file_path,line_num,content
True,gson/src/main/java/com/google/gson/DefaultConstructorAllocator.java,gson/src/main/java/com/google/gson/DefaultConstructorAllocator.java,2,* Copyright (C) 2011 Google Inc.
True,gson/src/main/java/com/google/gson/DefaultConstructorAllocator.java,gson/src/main/java/com/google/gson/DefaultConstructorAllocator.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/main/java/com/google/gson/DefaultConstructorAllocator.java,gson/src/main/java/com/google/gson/DefaultConstructorAllocator.java,5,* you may not use this file except in compliance with the License.
True,gson/src/main/java/com/google/gson/DefaultConstructorAllocator.java,gson/src/main/java/com/google/gson/DefaultConstructorAllocator.java,6,* You may obtain a copy of the License at
True,gson/src/main/java/com/google/gson/DefaultConstructorAllocator.java,gson/src/main/java/com/google/gson/DefaultConstructorAllocator.java,8,* http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/main/java/com/google/gson/DefaultConstructorAllocator.java,gson/src/main/java/com/google/gson/DefaultConstructorAllocator.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/main/java/com/google/gson/DefaultConstructorAllocator.java,gson/src/main/java/com/google/gson/DefaultConstructorAllocator.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/main/java/com/google/gson/DefaultConstructorAllocator.java,gson/src/main/java/com/google/gson/DefaultConstructorAllocator.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/main/java/com/google/gson/DefaultConstructorAllocator.java,gson/src/main/java/com/google/gson/DefaultConstructorAllocator.java,13,* See the License for the specific language governing permissions and
True,gson/src/main/java/com/google/gson/DefaultConstructorAllocator.java,gson/src/main/java/com/google/gson/DefaultConstructorAllocator.java,14,* limitations under the License.
True,gson/src/main/java/com/google/gson/DefaultConstructorAllocator.java,gson/src/main/java/com/google/gson/DefaultConstructorAllocator.java,17,package com.google.gson;
True,gson/src/main/java/com/google/gson/DefaultConstructorAllocator.java,gson/src/main/java/com/google/gson/DefaultConstructorAllocator.java,19,import com.google.gson.internal.Cache;
True,gson/src/main/java/com/google/gson/DefaultConstructorAllocator.java,gson/src/main/java/com/google/gson/DefaultConstructorAllocator.java,20,import com.google.gson.internal.LruCache;
True,gson/src/main/java/com/google/gson/DefaultConstructorAllocator.java,gson/src/main/java/com/google/gson/DefaultConstructorAllocator.java,22,import java.lang.reflect.Constructor;
True,gson/src/main/java/com/google/gson/DefaultConstructorAllocator.java,gson/src/main/java/com/google/gson/DefaultConstructorAllocator.java,25,* Use the default constructor on the class to instantiate an object.
True,gson/src/main/java/com/google/gson/DefaultConstructorAllocator.java,gson/src/main/java/com/google/gson/DefaultConstructorAllocator.java,27,* @author Joel Leitch
True,gson/src/main/java/com/google/gson/DefaultConstructorAllocator.java,gson/src/main/java/com/google/gson/DefaultConstructorAllocator.java,29,class DefaultConstructorAllocator {
True,gson/src/main/java/com/google/gson/DefaultConstructorAllocator.java,gson/src/main/java/com/google/gson/DefaultConstructorAllocator.java,30,private static final Constructor<Null> NULL_CONSTRUCTOR = createNullConstructor();
True,gson/src/main/java/com/google/gson/DefaultConstructorAllocator.java,gson/src/main/java/com/google/gson/DefaultConstructorAllocator.java,32,// Package private for testing purposes.
True,gson/src/main/java/com/google/gson/DefaultConstructorAllocator.java,gson/src/main/java/com/google/gson/DefaultConstructorAllocator.java,33,"final Cache<Class<?>, Constructor<?>> constructorCache;"
True,gson/src/main/java/com/google/gson/DefaultConstructorAllocator.java,gson/src/main/java/com/google/gson/DefaultConstructorAllocator.java,35,public DefaultConstructorAllocator() {
True,gson/src/main/java/com/google/gson/DefaultConstructorAllocator.java,gson/src/main/java/com/google/gson/DefaultConstructorAllocator.java,36,this(200);
True,gson/src/main/java/com/google/gson/DefaultConstructorAllocator.java,gson/src/main/java/com/google/gson/DefaultConstructorAllocator.java,39,public DefaultConstructorAllocator(int cacheSize) {
True,gson/src/main/java/com/google/gson/DefaultConstructorAllocator.java,gson/src/main/java/com/google/gson/DefaultConstructorAllocator.java,40,"constructorCache = new LruCache<Class<?>, Constructor<?>>(cacheSize);"
True,gson/src/main/java/com/google/gson/DefaultConstructorAllocator.java,gson/src/main/java/com/google/gson/DefaultConstructorAllocator.java,43,private static final Constructor<Null> createNullConstructor() {
True,gson/src/main/java/com/google/gson/DefaultConstructorAllocator.java,gson/src/main/java/com/google/gson/DefaultConstructorAllocator.java,44,try {
True,gson/src/main/java/com/google/gson/DefaultConstructorAllocator.java,gson/src/main/java/com/google/gson/DefaultConstructorAllocator.java,45,return getNoArgsConstructor(Null.class);
True,gson/src/main/java/com/google/gson/DefaultConstructorAllocator.java,gson/src/main/java/com/google/gson/DefaultConstructorAllocator.java,46,} catch (Exception e) {
True,gson/src/main/java/com/google/gson/DefaultConstructorAllocator.java,gson/src/main/java/com/google/gson/DefaultConstructorAllocator.java,47,return null;
True,gson/src/main/java/com/google/gson/DefaultConstructorAllocator.java,gson/src/main/java/com/google/gson/DefaultConstructorAllocator.java,51,public <T> T newInstance(Class<T> c) throws Exception {
True,gson/src/main/java/com/google/gson/DefaultConstructorAllocator.java,gson/src/main/java/com/google/gson/DefaultConstructorAllocator.java,52,Constructor<T> constructor = findConstructor(c);
True,gson/src/main/java/com/google/gson/DefaultConstructorAllocator.java,gson/src/main/java/com/google/gson/DefaultConstructorAllocator.java,53,return (constructor != null) ? constructor.newInstance() : null;
True,gson/src/main/java/com/google/gson/DefaultConstructorAllocator.java,gson/src/main/java/com/google/gson/DefaultConstructorAllocator.java,56,"@SuppressWarnings(""unchecked"")"
True,gson/src/main/java/com/google/gson/DefaultConstructorAllocator.java,gson/src/main/java/com/google/gson/DefaultConstructorAllocator.java,57,private <T> Constructor<T> findConstructor(Class<T> c) {
True,gson/src/main/java/com/google/gson/DefaultConstructorAllocator.java,gson/src/main/java/com/google/gson/DefaultConstructorAllocator.java,58,Constructor<T> cachedElement = (Constructor<T>) constructorCache.getElement(c);
True,gson/src/main/java/com/google/gson/DefaultConstructorAllocator.java,gson/src/main/java/com/google/gson/DefaultConstructorAllocator.java,59,if (cachedElement != null) {
True,gson/src/main/java/com/google/gson/DefaultConstructorAllocator.java,gson/src/main/java/com/google/gson/DefaultConstructorAllocator.java,60,if (cachedElement == NULL_CONSTRUCTOR) {
True,gson/src/main/java/com/google/gson/DefaultConstructorAllocator.java,gson/src/main/java/com/google/gson/DefaultConstructorAllocator.java,61,return null;
True,gson/src/main/java/com/google/gson/DefaultConstructorAllocator.java,gson/src/main/java/com/google/gson/DefaultConstructorAllocator.java,62,} else {
True,gson/src/main/java/com/google/gson/DefaultConstructorAllocator.java,gson/src/main/java/com/google/gson/DefaultConstructorAllocator.java,63,return cachedElement;
True,gson/src/main/java/com/google/gson/DefaultConstructorAllocator.java,gson/src/main/java/com/google/gson/DefaultConstructorAllocator.java,67,Constructor<T> noArgsConstructor = getNoArgsConstructor(c);
True,gson/src/main/java/com/google/gson/DefaultConstructorAllocator.java,gson/src/main/java/com/google/gson/DefaultConstructorAllocator.java,68,if (noArgsConstructor != null) {
True,gson/src/main/java/com/google/gson/DefaultConstructorAllocator.java,gson/src/main/java/com/google/gson/DefaultConstructorAllocator.java,69,"constructorCache.addElement(c, noArgsConstructor);"
True,gson/src/main/java/com/google/gson/DefaultConstructorAllocator.java,gson/src/main/java/com/google/gson/DefaultConstructorAllocator.java,70,} else {
True,gson/src/main/java/com/google/gson/DefaultConstructorAllocator.java,gson/src/main/java/com/google/gson/DefaultConstructorAllocator.java,71,"constructorCache.addElement(c, NULL_CONSTRUCTOR);"
True,gson/src/main/java/com/google/gson/DefaultConstructorAllocator.java,gson/src/main/java/com/google/gson/DefaultConstructorAllocator.java,73,return noArgsConstructor;
True,gson/src/main/java/com/google/gson/DefaultConstructorAllocator.java,gson/src/main/java/com/google/gson/DefaultConstructorAllocator.java,76,private static <T> Constructor<T> getNoArgsConstructor(Class<T> c) {
True,gson/src/main/java/com/google/gson/DefaultConstructorAllocator.java,gson/src/main/java/com/google/gson/DefaultConstructorAllocator.java,77,try {
True,gson/src/main/java/com/google/gson/DefaultConstructorAllocator.java,gson/src/main/java/com/google/gson/DefaultConstructorAllocator.java,78,Constructor<T> declaredConstructor = c.getDeclaredConstructor();
True,gson/src/main/java/com/google/gson/DefaultConstructorAllocator.java,gson/src/main/java/com/google/gson/DefaultConstructorAllocator.java,79,declaredConstructor.setAccessible(true);
True,gson/src/main/java/com/google/gson/DefaultConstructorAllocator.java,gson/src/main/java/com/google/gson/DefaultConstructorAllocator.java,80,return declaredConstructor;
True,gson/src/main/java/com/google/gson/DefaultConstructorAllocator.java,gson/src/main/java/com/google/gson/DefaultConstructorAllocator.java,81,} catch (Exception e) {
True,gson/src/main/java/com/google/gson/DefaultConstructorAllocator.java,gson/src/main/java/com/google/gson/DefaultConstructorAllocator.java,82,return null;
True,gson/src/main/java/com/google/gson/DefaultConstructorAllocator.java,gson/src/main/java/com/google/gson/DefaultConstructorAllocator.java,86,// placeholder class for Null constructor
True,gson/src/main/java/com/google/gson/DefaultConstructorAllocator.java,gson/src/main/java/com/google/gson/DefaultConstructorAllocator.java,87,private static final class Null {
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,36,import java.util.ArrayList;
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,42,import java.util.LinkedHashMap;
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,44,import java.util.List;
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,44,mport java.util.Properties;
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,47,import java.util.Queue;
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,77,rivate static final CollectionTypeAdapter COLLECTION_TYPE_ADAPTER = new CollectionTypeAdapter();
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,80,private static final CollectionTypeAdapter COLLECTION_TYPE_ADAPTER = new CollectionTypeAdapter();
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,93,ew StringBuilderTypeAdapter();
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,96,new StringBuilderTypeAdapter();
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,95,ew StringBufferTypeAdapter();
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,98,new StringBufferTypeAdapter();
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,97,rivate static final PropertiesCreator PROPERTIES_CREATOR = new PropertiesCreator();
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,98,rivate static final TreeSetCreator TREE_SET_CREATOR = new TreeSetCreator();
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,99,rivate static final HashSetCreator HASH_SET_CREATOR = new HashSetCreator();
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,218,"@SuppressWarnings(""unchecked"")"
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,221,"ap.registerForTypeHierarchy(Map.class, MAP_TYPE_ADAPTER);"
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,222,DefaultConstructorAllocator allocator = new DefaultConstructorAllocator(50);
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,224,// Map Instance Creators
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,225,"map.registerForTypeHierarchy(Map.class,"
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,226,"new DefaultConstructorCreator<Map>(LinkedHashMap.class, allocator));"
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,224,"ap.registerForTypeHierarchy(Collection.class, COLLECTION_TYPE_ADAPTER);"
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,229,DefaultConstructorCreator<List> listCreator =
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,230,"new DefaultConstructorCreator<List>(ArrayList.class, allocator);"
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,231,DefaultConstructorCreator<Queue> queueCreator =
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,232,"new DefaultConstructorCreator<Queue>(LinkedList.class, allocator);"
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,233,DefaultConstructorCreator<Set> setCreator =
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,234,"new DefaultConstructorCreator<Set>(HashSet.class, allocator);"
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,235,DefaultConstructorCreator<SortedSet> sortedSetCreator =
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,236,"new DefaultConstructorCreator<SortedSet>(TreeSet.class, allocator);"
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,237,"map.registerForTypeHierarchy(Collection.class, listCreator);"
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,238,"map.registerForTypeHierarchy(Queue.class, queueCreator);"
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,239,"map.registerForTypeHierarchy(Set.class, setCreator);"
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,240,"map.registerForTypeHierarchy(SortedSet.class, sortedSetCreator);"
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,226,"ap.registerForTypeHierarchy(Set.class, HASH_SET_CREATOR);"
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,227,"ap.registerForTypeHierarchy(SortedSet.class, TREE_SET_CREATOR);"
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,228,"ap.register(Properties.class, PROPERTIES_CREATOR);"
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,597,"sonDeserializer<Collection>, InstanceCreator<Collection> {"
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,610,JsonDeserializer<Collection> {
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,648,ublic Collection createInstance(Type type) {
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,649,eturn new LinkedList();
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,653,rivate static class PropertiesCreator implements InstanceCreator<Properties> {
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,654,ublic Properties createInstance(Type type) {
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,655,eturn new Properties();
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,1015,rivate static final class TreeSetCreator implements InstanceCreator<TreeSet<?>> {
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,1016,ublic TreeSet<?> createInstance(Type type) {
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,1017,eturn new TreeSet<Object>();
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,1019,Override
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,1020,ublic String toString() {
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,1021,eturn TreeSetCreator.class.getSimpleName();
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,1018,"@SuppressWarnings(""unchecked"")"
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,1019,private static final class DefaultConstructorCreator<T> implements InstanceCreator<T> {
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,1020,private final Class<? extends T> defaultInstance;
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,1021,private final DefaultConstructorAllocator allocator;
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,1023,"public DefaultConstructorCreator(Class<? extends T> defaultInstance,"
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,1024,DefaultConstructorAllocator allocator) {
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,1025,this.defaultInstance = defaultInstance;
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,1026,this.allocator = allocator;
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,1025,rivate static final class HashSetCreator implements InstanceCreator<HashSet<?>> {
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,1026,ublic HashSet<?> createInstance(Type type) {
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,1027,eturn new HashSet<Object>();
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,1029,public T createInstance(Type type) {
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,1030,Class<?> rawType = Types.getRawType(type);
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,1031,try {
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,1032,T specificInstance = (T) allocator.newInstance(rawType);
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,1033,return (specificInstance == null)
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,1034,? allocator.newInstance(defaultInstance)
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,1035,: specificInstance;
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,1036,} catch (Exception e) {
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,1037,throw new JsonIOException(e);
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,1031,eturn HashSetCreator.class.getSimpleName();
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,1043,return DefaultConstructorCreator.class.getSimpleName();
False,gson/src/main/java/com/google/gson/MapTypeAdapter.java,gson/src/main/java/com/google/gson/MapTypeAdapter.java,23,mport java.util.LinkedHashMap;
False,gson/src/main/java/com/google/gson/MapTypeAdapter.java,gson/src/main/java/com/google/gson/MapTypeAdapter.java,34,"SuppressWarnings(""unchecked"")"
True,gson/src/main/java/com/google/gson/MapTypeAdapter.java,gson/src/main/java/com/google/gson/MapTypeAdapter.java,33,"@SuppressWarnings(""unchecked"")"
False,gson/src/main/java/com/google/gson/MapTypeAdapter.java,gson/src/main/java/com/google/gson/MapTypeAdapter.java,36,"sonDeserializer<Map<?, ?>>, InstanceCreator<Map<?, ?>> {"
True,gson/src/main/java/com/google/gson/MapTypeAdapter.java,gson/src/main/java/com/google/gson/MapTypeAdapter.java,35,"JsonDeserializer<Map<?, ?>> {"
False,gson/src/main/java/com/google/gson/MapTypeAdapter.java,gson/src/main/java/com/google/gson/MapTypeAdapter.java,82,"ublic Map<Object, Object> createInstance(Type type) {"
False,gson/src/main/java/com/google/gson/MapTypeAdapter.java,gson/src/main/java/com/google/gson/MapTypeAdapter.java,83,eturn new LinkedHashMap();
False,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,19,mport com.google.gson.internal.LruCache;
False,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,24,mport java.lang.reflect.Constructor;
True,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,37,private static final DefaultConstructorAllocator defaultConstructorAllocator =
True,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,38,new DefaultConstructorAllocator(500);
False,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,40,"rivate static final LruCache<Class<?>, Constructor<?>> noArgsConstructorsCache ="
False,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,41,"ew LruCache<Class<?>, Constructor<?>>(500);"
False,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,44, We need a special null value to indicate that the class does not have a no-args constructor.
False,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,45," This helps avoid using reflection over and over again for such classes. For convenience, we"
False,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,46, use the no-args constructor of this class itself since this class would never be
False,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,47, deserialized using Gson.
False,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,49,rivate static final Constructor<MappedObjectConstructor> NULL_VALUE =
False,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,50,etNoArgsConstructorUsingReflection(MappedObjectConstructor.class);
False,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,52,"SuppressWarnings(""unused"")"
False,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,53,rivate MappedObjectConstructor() {
False,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,54,his(null);
False,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,68,eturn (T) constructWithNoArgConstructor(typeOfT);
True,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,53,return (T) constructWithAllocators(typeOfT);
False,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,76,rivate <T> T constructWithNoArgConstructor(Type typeOfT) {
True,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,61,private <T> T constructWithAllocators(Type typeOfT) {
False,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,79,onstructor<T> constructor = getNoArgsConstructor(clazz);
False,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,80,eturn constructor == null
True,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,64,T obj = defaultConstructorAllocator.newInstance(clazz);
True,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,65,return (obj == null)
False,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,82, constructor.newInstance();
True,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,67,: obj;
False,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,89,rivate <T> Constructor<T> getNoArgsConstructor(Class<T> clazz) {
False,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,90,"SuppressWarnings(""unchecked"")"
False,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,91,onstructor<T> constructor = (Constructor<T>)noArgsConstructorsCache.getElement(clazz);
False,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,92,f (constructor == NULL_VALUE) {
False,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,93,eturn null;
False,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,95,f (constructor == null) {
False,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,96,onstructor = getNoArgsConstructorUsingReflection(clazz);
False,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,97,"oArgsConstructorsCache.addElement(clazz, constructor);"
False,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,99,eturn constructor == NULL_VALUE ? null : constructor;
False,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,102,"SuppressWarnings(""unchecked"")"
False,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,103,rivate static <T> Constructor<T> getNoArgsConstructorUsingReflection(Class<T> clazz) {
False,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,104,ry {
False,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,105,onstructor<T> constructor = clazz.getDeclaredConstructor();
False,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,106,onstructor.setAccessible(true);
False,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,107,eturn constructor;
False,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,108, catch (Exception e) {
False,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,109,eturn (Constructor<T>) NULL_VALUE;
True,gson/src/test/java/com/google/gson/DefaultConstructorAllocatorTest.java,gson/src/test/java/com/google/gson/DefaultConstructorAllocatorTest.java,2,* Copyright (C) 2011 Google Inc.
True,gson/src/test/java/com/google/gson/DefaultConstructorAllocatorTest.java,gson/src/test/java/com/google/gson/DefaultConstructorAllocatorTest.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/test/java/com/google/gson/DefaultConstructorAllocatorTest.java,gson/src/test/java/com/google/gson/DefaultConstructorAllocatorTest.java,5,* you may not use this file except in compliance with the License.
True,gson/src/test/java/com/google/gson/DefaultConstructorAllocatorTest.java,gson/src/test/java/com/google/gson/DefaultConstructorAllocatorTest.java,6,* You may obtain a copy of the License at
True,gson/src/test/java/com/google/gson/DefaultConstructorAllocatorTest.java,gson/src/test/java/com/google/gson/DefaultConstructorAllocatorTest.java,8,* http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/test/java/com/google/gson/DefaultConstructorAllocatorTest.java,gson/src/test/java/com/google/gson/DefaultConstructorAllocatorTest.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/test/java/com/google/gson/DefaultConstructorAllocatorTest.java,gson/src/test/java/com/google/gson/DefaultConstructorAllocatorTest.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/test/java/com/google/gson/DefaultConstructorAllocatorTest.java,gson/src/test/java/com/google/gson/DefaultConstructorAllocatorTest.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/test/java/com/google/gson/DefaultConstructorAllocatorTest.java,gson/src/test/java/com/google/gson/DefaultConstructorAllocatorTest.java,13,* See the License for the specific language governing permissions and
True,gson/src/test/java/com/google/gson/DefaultConstructorAllocatorTest.java,gson/src/test/java/com/google/gson/DefaultConstructorAllocatorTest.java,14,* limitations under the License.
True,gson/src/test/java/com/google/gson/DefaultConstructorAllocatorTest.java,gson/src/test/java/com/google/gson/DefaultConstructorAllocatorTest.java,17,package com.google.gson;
True,gson/src/test/java/com/google/gson/DefaultConstructorAllocatorTest.java,gson/src/test/java/com/google/gson/DefaultConstructorAllocatorTest.java,19,import com.google.gson.DefaultConstructorAllocator;
True,gson/src/test/java/com/google/gson/DefaultConstructorAllocatorTest.java,gson/src/test/java/com/google/gson/DefaultConstructorAllocatorTest.java,21,import junit.framework.TestCase;
True,gson/src/test/java/com/google/gson/DefaultConstructorAllocatorTest.java,gson/src/test/java/com/google/gson/DefaultConstructorAllocatorTest.java,23,import java.util.ArrayList;
True,gson/src/test/java/com/google/gson/DefaultConstructorAllocatorTest.java,gson/src/test/java/com/google/gson/DefaultConstructorAllocatorTest.java,24,import java.util.LinkedList;
True,gson/src/test/java/com/google/gson/DefaultConstructorAllocatorTest.java,gson/src/test/java/com/google/gson/DefaultConstructorAllocatorTest.java,27,* Unit tests for the default constructor allocator class.
True,gson/src/test/java/com/google/gson/DefaultConstructorAllocatorTest.java,gson/src/test/java/com/google/gson/DefaultConstructorAllocatorTest.java,29,* @author Joel Leitch
True,gson/src/test/java/com/google/gson/DefaultConstructorAllocatorTest.java,gson/src/test/java/com/google/gson/DefaultConstructorAllocatorTest.java,31,public class DefaultConstructorAllocatorTest extends TestCase {
True,gson/src/test/java/com/google/gson/DefaultConstructorAllocatorTest.java,gson/src/test/java/com/google/gson/DefaultConstructorAllocatorTest.java,32,private DefaultConstructorAllocator allocator;
True,gson/src/test/java/com/google/gson/DefaultConstructorAllocatorTest.java,gson/src/test/java/com/google/gson/DefaultConstructorAllocatorTest.java,34,@Override
True,gson/src/test/java/com/google/gson/DefaultConstructorAllocatorTest.java,gson/src/test/java/com/google/gson/DefaultConstructorAllocatorTest.java,35,protected void setUp() throws Exception {
True,gson/src/test/java/com/google/gson/DefaultConstructorAllocatorTest.java,gson/src/test/java/com/google/gson/DefaultConstructorAllocatorTest.java,36,super.setUp();
True,gson/src/test/java/com/google/gson/DefaultConstructorAllocatorTest.java,gson/src/test/java/com/google/gson/DefaultConstructorAllocatorTest.java,37,allocator = new DefaultConstructorAllocator();
True,gson/src/test/java/com/google/gson/DefaultConstructorAllocatorTest.java,gson/src/test/java/com/google/gson/DefaultConstructorAllocatorTest.java,40,"@SuppressWarnings(""unchecked"")"
True,gson/src/test/java/com/google/gson/DefaultConstructorAllocatorTest.java,gson/src/test/java/com/google/gson/DefaultConstructorAllocatorTest.java,41,public void testObjectConstructor() throws Exception {
True,gson/src/test/java/com/google/gson/DefaultConstructorAllocatorTest.java,gson/src/test/java/com/google/gson/DefaultConstructorAllocatorTest.java,42,ArrayList<Object> arrayList = allocator.newInstance(ArrayList.class);
True,gson/src/test/java/com/google/gson/DefaultConstructorAllocatorTest.java,gson/src/test/java/com/google/gson/DefaultConstructorAllocatorTest.java,43,assertTrue(arrayList.isEmpty());
True,gson/src/test/java/com/google/gson/DefaultConstructorAllocatorTest.java,gson/src/test/java/com/google/gson/DefaultConstructorAllocatorTest.java,44,assertInCache(ArrayList.class);
True,gson/src/test/java/com/google/gson/DefaultConstructorAllocatorTest.java,gson/src/test/java/com/google/gson/DefaultConstructorAllocatorTest.java,46,LinkedList<Object> linkedList = allocator.newInstance(LinkedList.class);
True,gson/src/test/java/com/google/gson/DefaultConstructorAllocatorTest.java,gson/src/test/java/com/google/gson/DefaultConstructorAllocatorTest.java,47,assertTrue(linkedList.isEmpty());
True,gson/src/test/java/com/google/gson/DefaultConstructorAllocatorTest.java,gson/src/test/java/com/google/gson/DefaultConstructorAllocatorTest.java,48,assertInCache(LinkedList.class);
True,gson/src/test/java/com/google/gson/DefaultConstructorAllocatorTest.java,gson/src/test/java/com/google/gson/DefaultConstructorAllocatorTest.java,51,public void testMissingDefaultConstructor() throws Exception {
True,gson/src/test/java/com/google/gson/DefaultConstructorAllocatorTest.java,gson/src/test/java/com/google/gson/DefaultConstructorAllocatorTest.java,52,assertNull(allocator.newInstance(NoDefaultConstructor.class));
True,gson/src/test/java/com/google/gson/DefaultConstructorAllocatorTest.java,gson/src/test/java/com/google/gson/DefaultConstructorAllocatorTest.java,53,assertInCache(NoDefaultConstructor.class);
True,gson/src/test/java/com/google/gson/DefaultConstructorAllocatorTest.java,gson/src/test/java/com/google/gson/DefaultConstructorAllocatorTest.java,56,private void assertInCache(Class<?> clazz) {
True,gson/src/test/java/com/google/gson/DefaultConstructorAllocatorTest.java,gson/src/test/java/com/google/gson/DefaultConstructorAllocatorTest.java,57,assertNotNull(allocator.constructorCache.getElement(clazz));
True,gson/src/test/java/com/google/gson/DefaultConstructorAllocatorTest.java,gson/src/test/java/com/google/gson/DefaultConstructorAllocatorTest.java,60,private static class NoDefaultConstructor {
True,gson/src/test/java/com/google/gson/DefaultConstructorAllocatorTest.java,gson/src/test/java/com/google/gson/DefaultConstructorAllocatorTest.java,61,"@SuppressWarnings(""unused"")"
True,gson/src/test/java/com/google/gson/DefaultConstructorAllocatorTest.java,gson/src/test/java/com/google/gson/DefaultConstructorAllocatorTest.java,62,public NoDefaultConstructor(int i) {
True,gson/src/test/java/com/google/gson/DefaultConstructorAllocatorTest.java,gson/src/test/java/com/google/gson/DefaultConstructorAllocatorTest.java,63,// do nothing

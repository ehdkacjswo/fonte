is_addition,old_file_path,new_file_path,line_num,content
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,26,import com.google.gson.internal.bind.FieldTypeAdapterFactory;
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,241,factories.add(new FieldTypeAdapterFactory());
True,gson/src/main/java/com/google/gson/internal/$Gson$Types.java,gson/src/main/java/com/google/gson/internal/$Gson$Types.java,395,"* Given a parameterized type A&lt;B,C&gt;, returns B. If the specified type is not"
True,gson/src/main/java/com/google/gson/internal/$Gson$Types.java,gson/src/main/java/com/google/gson/internal/$Gson$Types.java,396,"* a generic type, returns null."
True,gson/src/main/java/com/google/gson/internal/$Gson$Types.java,gson/src/main/java/com/google/gson/internal/$Gson$Types.java,398,public static Type getFirstTypeArgument(Type type) {
True,gson/src/main/java/com/google/gson/internal/$Gson$Types.java,gson/src/main/java/com/google/gson/internal/$Gson$Types.java,399,try {
True,gson/src/main/java/com/google/gson/internal/$Gson$Types.java,gson/src/main/java/com/google/gson/internal/$Gson$Types.java,400,if (!(type instanceof ParameterizedType)) return null;
True,gson/src/main/java/com/google/gson/internal/$Gson$Types.java,gson/src/main/java/com/google/gson/internal/$Gson$Types.java,401,ParameterizedType ptype = (ParameterizedType) type;
True,gson/src/main/java/com/google/gson/internal/$Gson$Types.java,gson/src/main/java/com/google/gson/internal/$Gson$Types.java,402,Type[] actualTypeArguments = ptype.getActualTypeArguments();
True,gson/src/main/java/com/google/gson/internal/$Gson$Types.java,gson/src/main/java/com/google/gson/internal/$Gson$Types.java,403,if (actualTypeArguments.length == 0) return null;
True,gson/src/main/java/com/google/gson/internal/$Gson$Types.java,gson/src/main/java/com/google/gson/internal/$Gson$Types.java,404,return canonicalize(actualTypeArguments[0]);
True,gson/src/main/java/com/google/gson/internal/$Gson$Types.java,gson/src/main/java/com/google/gson/internal/$Gson$Types.java,405,} catch (Exception e) {
True,gson/src/main/java/com/google/gson/internal/$Gson$Types.java,gson/src/main/java/com/google/gson/internal/$Gson$Types.java,406,return null;
True,gson/src/main/java/com/google/gson/internal/bind/FieldTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/FieldTypeAdapterFactory.java,2,* Copyright (C) 2014 Google Inc.
True,gson/src/main/java/com/google/gson/internal/bind/FieldTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/FieldTypeAdapterFactory.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/main/java/com/google/gson/internal/bind/FieldTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/FieldTypeAdapterFactory.java,5,* you may not use this file except in compliance with the License.
True,gson/src/main/java/com/google/gson/internal/bind/FieldTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/FieldTypeAdapterFactory.java,6,* You may obtain a copy of the License at
True,gson/src/main/java/com/google/gson/internal/bind/FieldTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/FieldTypeAdapterFactory.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/main/java/com/google/gson/internal/bind/FieldTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/FieldTypeAdapterFactory.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/main/java/com/google/gson/internal/bind/FieldTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/FieldTypeAdapterFactory.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/main/java/com/google/gson/internal/bind/FieldTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/FieldTypeAdapterFactory.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/main/java/com/google/gson/internal/bind/FieldTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/FieldTypeAdapterFactory.java,13,* See the License for the specific language governing permissions and
True,gson/src/main/java/com/google/gson/internal/bind/FieldTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/FieldTypeAdapterFactory.java,14,* limitations under the License.
True,gson/src/main/java/com/google/gson/internal/bind/FieldTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/FieldTypeAdapterFactory.java,17,package com.google.gson.internal.bind;
True,gson/src/main/java/com/google/gson/internal/bind/FieldTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/FieldTypeAdapterFactory.java,19,import java.lang.reflect.Field;
True,gson/src/main/java/com/google/gson/internal/bind/FieldTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/FieldTypeAdapterFactory.java,20,import java.lang.reflect.Modifier;
True,gson/src/main/java/com/google/gson/internal/bind/FieldTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/FieldTypeAdapterFactory.java,21,import java.lang.reflect.Type;
True,gson/src/main/java/com/google/gson/internal/bind/FieldTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/FieldTypeAdapterFactory.java,23,import com.google.gson.Gson;
True,gson/src/main/java/com/google/gson/internal/bind/FieldTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/FieldTypeAdapterFactory.java,24,import com.google.gson.TypeAdapter;
True,gson/src/main/java/com/google/gson/internal/bind/FieldTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/FieldTypeAdapterFactory.java,25,import com.google.gson.TypeAdapterFactory;
True,gson/src/main/java/com/google/gson/internal/bind/FieldTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/FieldTypeAdapterFactory.java,26,import com.google.gson.internal.$Gson$Types;
True,gson/src/main/java/com/google/gson/internal/bind/FieldTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/FieldTypeAdapterFactory.java,27,import com.google.gson.reflect.TypeToken;
True,gson/src/main/java/com/google/gson/internal/bind/FieldTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/FieldTypeAdapterFactory.java,30,"* Given a type T, looks for the magic static field named GSON_TYPE_ADAPTER of type"
True,gson/src/main/java/com/google/gson/internal/bind/FieldTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/FieldTypeAdapterFactory.java,31,* TypeAdapter&lt;T&gt; and uses it as the default type adapter.
True,gson/src/main/java/com/google/gson/internal/bind/FieldTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/FieldTypeAdapterFactory.java,33,* @since 2.3
True,gson/src/main/java/com/google/gson/internal/bind/FieldTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/FieldTypeAdapterFactory.java,35,public final class FieldTypeAdapterFactory implements TypeAdapterFactory {
True,gson/src/main/java/com/google/gson/internal/bind/FieldTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/FieldTypeAdapterFactory.java,36,"private static final String FIELD_ADAPTER_NAME = ""GSON_TYPE_ADAPTER"";"
True,gson/src/main/java/com/google/gson/internal/bind/FieldTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/FieldTypeAdapterFactory.java,38,"@SuppressWarnings({ ""rawtypes"", ""unchecked"" })"
True,gson/src/main/java/com/google/gson/internal/bind/FieldTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/FieldTypeAdapterFactory.java,39,"public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> targetType) {"
True,gson/src/main/java/com/google/gson/internal/bind/FieldTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/FieldTypeAdapterFactory.java,40,Class<? super T> clazz = targetType.getRawType();
True,gson/src/main/java/com/google/gson/internal/bind/FieldTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/FieldTypeAdapterFactory.java,41,try {
True,gson/src/main/java/com/google/gson/internal/bind/FieldTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/FieldTypeAdapterFactory.java,42,Field typeAdapterField = clazz.getDeclaredField(FIELD_ADAPTER_NAME);
True,gson/src/main/java/com/google/gson/internal/bind/FieldTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/FieldTypeAdapterFactory.java,43,typeAdapterField.setAccessible(true);
True,gson/src/main/java/com/google/gson/internal/bind/FieldTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/FieldTypeAdapterFactory.java,44,if (!Modifier.isStatic(typeAdapterField.getModifiers())) return null;
True,gson/src/main/java/com/google/gson/internal/bind/FieldTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/FieldTypeAdapterFactory.java,45,Object fieldAdapterValue = typeAdapterField.get(null);
True,gson/src/main/java/com/google/gson/internal/bind/FieldTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/FieldTypeAdapterFactory.java,46,if (fieldAdapterValue != null && fieldAdapterValue instanceof TypeAdapter) {
True,gson/src/main/java/com/google/gson/internal/bind/FieldTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/FieldTypeAdapterFactory.java,47,// We know that the GSON_TYPE_ADAPTER field is of type TypeAdapter.
True,gson/src/main/java/com/google/gson/internal/bind/FieldTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/FieldTypeAdapterFactory.java,48,"// However, we need to assert that its type variable TypeAdapter<TypeVariable> matches"
True,gson/src/main/java/com/google/gson/internal/bind/FieldTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/FieldTypeAdapterFactory.java,49,// the target type
True,gson/src/main/java/com/google/gson/internal/bind/FieldTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/FieldTypeAdapterFactory.java,50,Type fieldTypeVariable = $Gson$Types.getFirstTypeArgument(typeAdapterField.getGenericType());
True,gson/src/main/java/com/google/gson/internal/bind/FieldTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/FieldTypeAdapterFactory.java,51,if (targetType.getType().equals(fieldTypeVariable)) {
True,gson/src/main/java/com/google/gson/internal/bind/FieldTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/FieldTypeAdapterFactory.java,52,return (TypeAdapter) fieldAdapterValue;
True,gson/src/main/java/com/google/gson/internal/bind/FieldTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/FieldTypeAdapterFactory.java,55,} catch (Exception e) { // ignore1
True,gson/src/main/java/com/google/gson/internal/bind/FieldTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/FieldTypeAdapterFactory.java,57,return null;
True,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,2,* Copyright (C) 2014 Google Inc.
True,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,5,* you may not use this file except in compliance with the License.
True,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,6,* You may obtain a copy of the License at
True,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,13,* See the License for the specific language governing permissions and
True,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,14,* limitations under the License.
True,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,17,package com.google.gson.functional;
True,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,19,import java.io.IOException;
True,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,20,import java.lang.reflect.Type;
True,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,22,import junit.framework.TestCase;
True,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,24,import com.google.gson.Gson;
True,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,25,import com.google.gson.GsonBuilder;
True,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,26,import com.google.gson.JsonDeserializationContext;
True,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,27,import com.google.gson.JsonDeserializer;
True,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,28,import com.google.gson.JsonElement;
True,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,29,import com.google.gson.JsonParseException;
True,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,30,import com.google.gson.JsonPrimitive;
True,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,31,import com.google.gson.JsonSerializationContext;
True,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,32,import com.google.gson.JsonSerializer;
True,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,33,import com.google.gson.TypeAdapter;
True,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,34,import com.google.gson.stream.JsonReader;
True,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,35,import com.google.gson.stream.JsonWriter;
True,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,38,* Functional tests for the magic field GSON_TYPE_ADAPTER present in a class.
True,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,40,"@SuppressWarnings(""unused"")"
True,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,41,public final class GsonFieldTypeAdapterTest extends TestCase {
True,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,43,public void testFieldAdapterInvoked() {
True,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,44,"String json = new Gson().toJson(new ClassWithFieldAdapter(""bar""));"
True,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,45,"assertEquals(""\""fieldAdapter\"""", json);"
True,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,48,public void testRegisteredAdapterOverridesFieldAdapter() {
True,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,49,TypeAdapter<ClassWithFieldAdapter> typeAdapter = new TypeAdapter<ClassWithFieldAdapter>() {
True,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,50,"@Override public void write(JsonWriter out, ClassWithFieldAdapter value) throws IOException {"
True,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,51,"out.value(""registeredAdapter"");"
True,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,53,@Override public ClassWithFieldAdapter read(JsonReader in) throws IOException {
True,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,54,return new ClassWithFieldAdapter(in.nextString());
True,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,57,Gson gson = new GsonBuilder()
True,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,58,".registerTypeAdapter(ClassWithFieldAdapter.class, typeAdapter)"
True,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,59,.create();
True,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,60,"String json = gson.toJson(new ClassWithFieldAdapter(""abcd""));"
True,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,61,"assertEquals(""\""registeredAdapter\"""", json);"
True,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,65,"* The serializer overrides field adapter, but for deserializer the fieldAdapter is used."
True,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,67,public void testRegisteredSerializerOverridesFieldAdapter() {
True,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,68,JsonSerializer<ClassWithFieldAdapter> serializer = new JsonSerializer<ClassWithFieldAdapter>() {
True,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,69,"public JsonElement serialize(ClassWithFieldAdapter src, Type typeOfSrc,"
True,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,70,JsonSerializationContext context) {
True,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,71,"return new JsonPrimitive(""registeredSerializer"");"
True,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,74,Gson gson = new GsonBuilder()
True,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,75,".registerTypeAdapter(ClassWithFieldAdapter.class, serializer)"
True,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,76,.create();
True,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,77,"String json = gson.toJson(new ClassWithFieldAdapter(""abcd""));"
True,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,78,"assertEquals(""\""registeredSerializer\"""", json);"
True,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,79,"ClassWithFieldAdapter target = gson.fromJson(""abcd"", ClassWithFieldAdapter.class);"
True,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,80,"assertEquals(""fieldAdapter"", target.value);"
True,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,84,"* The deserializer overrides field adapter, but for serializer the fieldAdapter is used."
True,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,86,public void testRegisteredDeserializerOverridesFieldAdapter() {
True,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,87,JsonDeserializer<ClassWithFieldAdapter> deserializer = new JsonDeserializer<ClassWithFieldAdapter>() {
True,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,88,"public ClassWithFieldAdapter deserialize(JsonElement json, Type typeOfT,"
True,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,89,JsonDeserializationContext context) throws JsonParseException {
True,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,90,"return new ClassWithFieldAdapter(""registeredDeserializer"");"
True,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,93,Gson gson = new GsonBuilder()
True,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,94,".registerTypeAdapter(ClassWithFieldAdapter.class, deserializer)"
True,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,95,.create();
True,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,96,"String json = gson.toJson(new ClassWithFieldAdapter(""abcd""));"
True,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,97,"assertEquals(""\""fieldAdapter\"""", json);"
True,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,98,"ClassWithFieldAdapter target = gson.fromJson(""abcd"", ClassWithFieldAdapter.class);"
True,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,99,"assertEquals(""registeredDeserializer"", target.value);"
True,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,102,public void testFieldAdapterNotInvokedIfNull() {
True,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,103,"String json = new Gson().toJson(new ClassWithNullFieldAdapter(""bar""));"
True,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,104,"assertEquals(""{\""value\"":\""bar\""}"", json);"
True,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,107,public void testNonStaticFieldAdapterNotInvoked() {
True,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,108,"String json = new Gson().toJson(new ClassWithNonStaticFieldAdapter(""bar""));"
True,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,109,"assertFalse(json.contains(""fieldAdapter""));"
True,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,112,public void testIncorrectTypeAdapterNotInvoked() {
True,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,113,"String json = new Gson().toJson(new ClassWithIncorrectFieldAdapter(""bar""));"
True,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,114,"assertFalse(json.contains(""fieldAdapter""));"
True,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,117,public void testSuperclassTypeAdapterNotInvoked() {
True,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,118,"String json = new Gson().toJson(new ClassWithSuperClassFieldAdapter(""bar""));"
True,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,119,"assertFalse(json.contains(""fieldAdapter""));"
True,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,122,private static class ClassWithFieldAdapter {
True,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,123,final String value;
True,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,124,ClassWithFieldAdapter(String value) {
True,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,125,this.value = value;
True,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,127,private static final TypeAdapter<ClassWithFieldAdapter> GSON_TYPE_ADAPTER =
True,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,128,new TypeAdapter<GsonFieldTypeAdapterTest.ClassWithFieldAdapter>() {
True,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,129,"@Override public void write(JsonWriter out, ClassWithFieldAdapter value) throws IOException {"
True,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,130,"out.value(""fieldAdapter"");"
True,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,132,@Override public ClassWithFieldAdapter read(JsonReader in) throws IOException {
True,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,133,in.nextString();
True,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,134,"return new ClassWithFieldAdapter(""fieldAdapter"");"
True,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,139,private static final class ClassWithSuperClassFieldAdapter extends ClassWithFieldAdapter {
True,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,140,ClassWithSuperClassFieldAdapter(String value) {
True,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,141,super(value);
True,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,145,private static final class ClassWithNullFieldAdapter {
True,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,146,final String value;
True,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,147,ClassWithNullFieldAdapter(String value) {
True,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,148,this.value = value;
True,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,150,private static final TypeAdapter<ClassWithFieldAdapter> GSON_TYPE_ADAPTER = null;
True,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,153,private static final class ClassWithNonStaticFieldAdapter {
True,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,154,final String value;
True,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,155,ClassWithNonStaticFieldAdapter(String value) {
True,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,156,this.value = value;
True,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,158,private final TypeAdapter<ClassWithNonStaticFieldAdapter> GSON_TYPE_ADAPTER =
True,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,159,new TypeAdapter<ClassWithNonStaticFieldAdapter>() {
True,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,160,"@Override public void write(JsonWriter out, ClassWithNonStaticFieldAdapter value) throws IOException {"
True,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,161,"out.value(""fieldAdapter"");"
True,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,163,@Override public ClassWithNonStaticFieldAdapter read(JsonReader in) throws IOException {
True,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,164,in.nextString();
True,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,165,"return new ClassWithNonStaticFieldAdapter(""fieldAdapter"");"
True,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,170,private static final class ClassWithIncorrectFieldAdapter {
True,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,171,final String value;
True,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,172,ClassWithIncorrectFieldAdapter(String value) {
True,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,173,this.value = value;
True,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,175,// Note that the type is NOT TypeAdapter<ClassWithIncorrectFieldAdapter> so this
True,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,176,// field should be ignored.
True,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,177,private static final TypeAdapter<ClassWithFieldAdapter> GSON_TYPE_ADAPTER =
True,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,178,new TypeAdapter<GsonFieldTypeAdapterTest.ClassWithFieldAdapter>() {
True,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,179,"@Override public void write(JsonWriter out, ClassWithFieldAdapter value) throws IOException {"
True,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,180,"out.value(""fieldAdapter"");"
True,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,182,@Override public ClassWithFieldAdapter read(JsonReader in) throws IOException {
True,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,183,in.nextString();
True,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/GsonFieldTypeAdapterTest.java,184,"return new ClassWithFieldAdapter(""fieldAdapter"");"
True,gson/src/test/java/com/google/gson/internal/GsonTypesTest.java,gson/src/test/java/com/google/gson/internal/GsonTypesTest.java,2,* Copyright (C) 2014 Google Inc.
True,gson/src/test/java/com/google/gson/internal/GsonTypesTest.java,gson/src/test/java/com/google/gson/internal/GsonTypesTest.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/test/java/com/google/gson/internal/GsonTypesTest.java,gson/src/test/java/com/google/gson/internal/GsonTypesTest.java,5,* you may not use this file except in compliance with the License.
True,gson/src/test/java/com/google/gson/internal/GsonTypesTest.java,gson/src/test/java/com/google/gson/internal/GsonTypesTest.java,6,* You may obtain a copy of the License at
True,gson/src/test/java/com/google/gson/internal/GsonTypesTest.java,gson/src/test/java/com/google/gson/internal/GsonTypesTest.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/test/java/com/google/gson/internal/GsonTypesTest.java,gson/src/test/java/com/google/gson/internal/GsonTypesTest.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/test/java/com/google/gson/internal/GsonTypesTest.java,gson/src/test/java/com/google/gson/internal/GsonTypesTest.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/test/java/com/google/gson/internal/GsonTypesTest.java,gson/src/test/java/com/google/gson/internal/GsonTypesTest.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/test/java/com/google/gson/internal/GsonTypesTest.java,gson/src/test/java/com/google/gson/internal/GsonTypesTest.java,13,* See the License for the specific language governing permissions and
True,gson/src/test/java/com/google/gson/internal/GsonTypesTest.java,gson/src/test/java/com/google/gson/internal/GsonTypesTest.java,14,* limitations under the License.
True,gson/src/test/java/com/google/gson/internal/GsonTypesTest.java,gson/src/test/java/com/google/gson/internal/GsonTypesTest.java,17,package com.google.gson.internal;
True,gson/src/test/java/com/google/gson/internal/GsonTypesTest.java,gson/src/test/java/com/google/gson/internal/GsonTypesTest.java,19,import java.lang.reflect.Type;
True,gson/src/test/java/com/google/gson/internal/GsonTypesTest.java,gson/src/test/java/com/google/gson/internal/GsonTypesTest.java,20,import java.util.List;
True,gson/src/test/java/com/google/gson/internal/GsonTypesTest.java,gson/src/test/java/com/google/gson/internal/GsonTypesTest.java,22,import junit.framework.TestCase;
True,gson/src/test/java/com/google/gson/internal/GsonTypesTest.java,gson/src/test/java/com/google/gson/internal/GsonTypesTest.java,24,public final class GsonTypesTest extends TestCase {
True,gson/src/test/java/com/google/gson/internal/GsonTypesTest.java,gson/src/test/java/com/google/gson/internal/GsonTypesTest.java,26,public void testNewParameterizedTypeWithoutOwner() {
True,gson/src/test/java/com/google/gson/internal/GsonTypesTest.java,gson/src/test/java/com/google/gson/internal/GsonTypesTest.java,27,// List<A>. List is a top-level class
True,gson/src/test/java/com/google/gson/internal/GsonTypesTest.java,gson/src/test/java/com/google/gson/internal/GsonTypesTest.java,28,"Type type = $Gson$Types.newParameterizedTypeWithOwner(null, List.class, A.class);"
True,gson/src/test/java/com/google/gson/internal/GsonTypesTest.java,gson/src/test/java/com/google/gson/internal/GsonTypesTest.java,29,"assertEquals(A.class, $Gson$Types.getFirstTypeArgument(type));"
True,gson/src/test/java/com/google/gson/internal/GsonTypesTest.java,gson/src/test/java/com/google/gson/internal/GsonTypesTest.java,31,// A<B>. A is a static inner class.
True,gson/src/test/java/com/google/gson/internal/GsonTypesTest.java,gson/src/test/java/com/google/gson/internal/GsonTypesTest.java,32,"type = $Gson$Types.newParameterizedTypeWithOwner(null, A.class, B.class);"
True,gson/src/test/java/com/google/gson/internal/GsonTypesTest.java,gson/src/test/java/com/google/gson/internal/GsonTypesTest.java,33,"assertEquals(B.class, $Gson$Types.getFirstTypeArgument(type));"
True,gson/src/test/java/com/google/gson/internal/GsonTypesTest.java,gson/src/test/java/com/google/gson/internal/GsonTypesTest.java,35,final class D {
True,gson/src/test/java/com/google/gson/internal/GsonTypesTest.java,gson/src/test/java/com/google/gson/internal/GsonTypesTest.java,37,try {
True,gson/src/test/java/com/google/gson/internal/GsonTypesTest.java,gson/src/test/java/com/google/gson/internal/GsonTypesTest.java,38,// D<A> is not allowed since D is not a static inner class
True,gson/src/test/java/com/google/gson/internal/GsonTypesTest.java,gson/src/test/java/com/google/gson/internal/GsonTypesTest.java,39,"$Gson$Types.newParameterizedTypeWithOwner(null, D.class, A.class);"
True,gson/src/test/java/com/google/gson/internal/GsonTypesTest.java,gson/src/test/java/com/google/gson/internal/GsonTypesTest.java,40,} catch (IllegalArgumentException expected) {}
True,gson/src/test/java/com/google/gson/internal/GsonTypesTest.java,gson/src/test/java/com/google/gson/internal/GsonTypesTest.java,42,// A<D> is allowed.
True,gson/src/test/java/com/google/gson/internal/GsonTypesTest.java,gson/src/test/java/com/google/gson/internal/GsonTypesTest.java,43,"type = $Gson$Types.newParameterizedTypeWithOwner(null, A.class, D.class);"
True,gson/src/test/java/com/google/gson/internal/GsonTypesTest.java,gson/src/test/java/com/google/gson/internal/GsonTypesTest.java,44,"assertEquals(D.class, $Gson$Types.getFirstTypeArgument(type));"
True,gson/src/test/java/com/google/gson/internal/GsonTypesTest.java,gson/src/test/java/com/google/gson/internal/GsonTypesTest.java,47,public void testGetFirstTypeArgument() {
True,gson/src/test/java/com/google/gson/internal/GsonTypesTest.java,gson/src/test/java/com/google/gson/internal/GsonTypesTest.java,48,assertNull($Gson$Types.getFirstTypeArgument(A.class));
True,gson/src/test/java/com/google/gson/internal/GsonTypesTest.java,gson/src/test/java/com/google/gson/internal/GsonTypesTest.java,50,"Type type = $Gson$Types.newParameterizedTypeWithOwner(null, A.class, B.class, C.class);"
True,gson/src/test/java/com/google/gson/internal/GsonTypesTest.java,gson/src/test/java/com/google/gson/internal/GsonTypesTest.java,51,"assertEquals(B.class, $Gson$Types.getFirstTypeArgument(type));"
True,gson/src/test/java/com/google/gson/internal/GsonTypesTest.java,gson/src/test/java/com/google/gson/internal/GsonTypesTest.java,54,private static final class A {
True,gson/src/test/java/com/google/gson/internal/GsonTypesTest.java,gson/src/test/java/com/google/gson/internal/GsonTypesTest.java,56,private static final class B {
True,gson/src/test/java/com/google/gson/internal/GsonTypesTest.java,gson/src/test/java/com/google/gson/internal/GsonTypesTest.java,58,private static final class C {

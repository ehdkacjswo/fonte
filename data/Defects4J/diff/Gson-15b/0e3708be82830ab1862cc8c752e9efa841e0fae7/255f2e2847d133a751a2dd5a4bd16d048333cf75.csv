is_addition,old_file_path,new_file_path,line_num,content
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,22,import java.text.ParsePosition;
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,24,import java.util.Calendar;
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,26,import java.util.GregorianCalendar;
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,37,"private final TimeZone UTC_TIME_ZONE = TimeZone.getTimeZone(""UTC"");"
False,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,36,"his.iso8601Format = new SimpleDateFormat(""yyyy-MM-dd'T'HH:mm:ss.SSSXXX"", Locale.US);"
False,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,37,"his.iso8601Format.setTimeZone(TimeZone.getTimeZone(""UTC""));"
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,40,this(false);
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,43,public UtcDateTypeAdapter(boolean jdk6Compatible) {
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,44,if (jdk6Compatible) {
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,45,this.iso8601Format = null;
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,46,} else {
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,47,// XXX is only supported by JDK 1.7+
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,48,"this.iso8601Format = new SimpleDateFormat(""yyyy-MM-dd'T'HH:mm:ss.SSSXXX"", Locale.US);"
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,49,this.iso8601Format.setTimeZone(UTC_TIME_ZONE);
False,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,40,/ These methods need to be synchronized since JDK DateFormat classes are not thread-safe
False,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,41,/ See issue 162
False,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,43,"ublic synchronized void write(JsonWriter out, Date date) throws IOException {"
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,54,"public void write(JsonWriter out, Date date) throws IOException {"
False,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,47,ut.value(iso8601Format.format(date));
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,58,String value = null;
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,59,if (iso8601Format != null) {
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,60,synchronized (iso8601Format) {
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,61,// Need synchronization since JDK DateFormat classes are not thread-safe
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,62,try {
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,63,value = iso8601Format.format(date);
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,64,} catch (Exception e) {
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,65,value = null;
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,69,if (value == null) { // Try other formatter
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,70,"value = format(date, true, UTC_TIME_ZONE);"
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,72,out.value(value);
False,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,50,/ These methods need to be synchronized since JDK DateFormat classes are not thread-safe
False,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,51,/ See issue 162
False,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,53,ublic synchronized Date read(JsonReader in) throws IOException {
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,76,public Date read(JsonReader in) throws IOException {
False,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,56,ase NULL: return null;
False,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,57,efault: return iso8601Format.parse(in.nextString());
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,79,case NULL:
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,80,in.nextNull();
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,81,return null;
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,82,default:
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,83,String date = in.nextString();
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,84,if (iso8601Format != null) {
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,85,synchronized (iso8601Format) {
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,86,// Need synchronization since JDK DateFormat classes are not thread-safe
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,87,try {
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,88,return iso8601Format.parse(date);
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,89,} catch (Exception e) {
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,90,// Ignore and try the other parser
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,94,"// Instead of using iso8601Format.parse(value), we use Jackson's date parsing"
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,95,// This is because Android doesn't support XXX because it is JDK 1.6
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,96,"return parse(date, new ParsePosition(0));"
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,103,// Date parsing code from Jackson databind ISO8601Utils.java
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,104,// https://github.com/FasterXML/jackson-databind/blob/master/src/main/java/com/fasterxml/jackson/databind/util/ISO8601Utils.java
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,105,"private static final String GMT_ID = ""GMT"";"
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,108,* Format date into yyyy-MM-ddThh:mm:ss[.sss][Z|[+-]hh:mm]
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,110,* @param date the date to format
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,111,* @param millis true to include millis precision otherwise false
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,112,* @param tz timezone to use for the formatting (GMT will produce 'Z')
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,113,* @return the date formatted as yyyy-MM-ddThh:mm:ss[.sss][Z|[+-]hh:mm]
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,115,"private static String format(Date date, boolean millis, TimeZone tz) {"
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,116,"Calendar calendar = new GregorianCalendar(tz, Locale.US);"
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,117,calendar.setTime(date);
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,119,"// estimate capacity of buffer as close as we can (yeah, that's pedantic ;)"
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,120,"int capacity = ""yyyy-MM-ddThh:mm:ss"".length();"
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,121,"capacity += millis ? "".sss"".length() : 0;"
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,122,"capacity += tz.getRawOffset() == 0 ? ""Z"".length() : ""+hh:mm"".length();"
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,123,StringBuilder formatted = new StringBuilder(capacity);
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,125,"padInt(formatted, calendar.get(Calendar.YEAR), ""yyyy"".length());"
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,126,formatted.append('-');
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,127,"padInt(formatted, calendar.get(Calendar.MONTH) + 1, ""MM"".length());"
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,128,formatted.append('-');
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,129,"padInt(formatted, calendar.get(Calendar.DAY_OF_MONTH), ""dd"".length());"
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,130,formatted.append('T');
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,131,"padInt(formatted, calendar.get(Calendar.HOUR_OF_DAY), ""hh"".length());"
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,132,formatted.append(':');
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,133,"padInt(formatted, calendar.get(Calendar.MINUTE), ""mm"".length());"
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,134,formatted.append(':');
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,135,"padInt(formatted, calendar.get(Calendar.SECOND), ""ss"".length());"
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,136,if (millis) {
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,137,formatted.append('.');
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,138,"padInt(formatted, calendar.get(Calendar.MILLISECOND), ""sss"".length());"
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,141,int offset = tz.getOffset(calendar.getTimeInMillis());
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,142,if (offset != 0) {
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,143,int hours = Math.abs((offset / (60 * 1000)) / 60);
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,144,int minutes = Math.abs((offset / (60 * 1000)) % 60);
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,145,formatted.append(offset < 0 ? '-' : '+');
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,146,"padInt(formatted, hours, ""hh"".length());"
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,147,formatted.append(':');
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,148,"padInt(formatted, minutes, ""mm"".length());"
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,149,} else {
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,150,formatted.append('Z');
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,153,return formatted.toString();
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,156,* Zero pad a number to a specified length
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,158,* @param buffer buffer to use for padding
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,159,* @param value the integer value to pad if necessary.
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,160,* @param length the length of the string we should zero pad
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,162,"private static void padInt(StringBuilder buffer, int value, int length) {"
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,163,String strValue = Integer.toString(value);
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,164,for (int i = length - strValue.length(); i > 0; i--) {
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,165,buffer.append('0');
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,167,buffer.append(strValue);
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,171,* Parse a date from ISO-8601 formatted string. It expects a format
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,172,* [yyyy-MM-dd|yyyyMMdd][T(hh:mm[:ss[.sss]]|hhmm[ss[.sss]])]?[Z|[+-]hh:mm]]
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,174,* @param date ISO string to parse in the appropriate format.
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,175,"* @param pos The position to start parsing from, updated to where parsing stopped."
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,176,* @return the parsed date
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,177,* @throws ParseException if the date is not in the appropriate format
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,179,"private static Date parse(String date, ParsePosition pos) throws ParseException {"
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,180,Exception fail = null;
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,181,try {
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,182,int offset = pos.getIndex();
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,184,// extract year
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,185,"int year = parseInt(date, offset, offset += 4);"
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,186,"if (checkOffset(date, offset, '-')) {"
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,187,offset += 1;
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,190,// extract month
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,191,"int month = parseInt(date, offset, offset += 2);"
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,192,"if (checkOffset(date, offset, '-')) {"
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,193,offset += 1;
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,196,// extract day
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,197,"int day = parseInt(date, offset, offset += 2);"
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,198,// default time value
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,199,int hour = 0;
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,200,int minutes = 0;
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,201,int seconds = 0;
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,202,int milliseconds = 0; // always use 0 otherwise returned date will include millis of current time
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,203,"if (checkOffset(date, offset, 'T')) {"
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,205,"// extract hours, minutes, seconds and milliseconds"
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,206,"hour = parseInt(date, offset += 1, offset += 2);"
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,207,"if (checkOffset(date, offset, ':')) {"
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,208,offset += 1;
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,211,"minutes = parseInt(date, offset, offset += 2);"
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,212,"if (checkOffset(date, offset, ':')) {"
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,213,offset += 1;
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,215,// second and milliseconds can be optional
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,216,if (date.length() > offset) {
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,217,char c = date.charAt(offset);
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,218,if (c != 'Z' && c != '+' && c != '-') {
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,219,"seconds = parseInt(date, offset, offset += 2);"
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,220,// milliseconds can be optional in the format
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,221,"if (checkOffset(date, offset, '.')) {"
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,222,"milliseconds = parseInt(date, offset += 1, offset += 3);"
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,228,// extract timezone
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,229,String timezoneId;
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,230,if (date.length() <= offset) {
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,231,"throw new IllegalArgumentException(""No time zone indicator"");"
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,233,char timezoneIndicator = date.charAt(offset);
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,234,if (timezoneIndicator == '+' || timezoneIndicator == '-') {
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,235,String timezoneOffset = date.substring(offset);
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,236,timezoneId = GMT_ID + timezoneOffset;
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,237,offset += timezoneOffset.length();
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,238,} else if (timezoneIndicator == 'Z') {
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,239,timezoneId = GMT_ID;
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,240,offset += 1;
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,241,} else {
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,242,"throw new IndexOutOfBoundsException(""Invalid time zone indicator "" + timezoneIndicator);"
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,245,TimeZone timezone = TimeZone.getTimeZone(timezoneId);
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,246,if (!timezone.getID().equals(timezoneId)) {
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,247,throw new IndexOutOfBoundsException();
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,250,Calendar calendar = new GregorianCalendar(timezone);
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,251,calendar.setLenient(false);
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,252,"calendar.set(Calendar.YEAR, year);"
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,253,"calendar.set(Calendar.MONTH, month - 1);"
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,254,"calendar.set(Calendar.DAY_OF_MONTH, day);"
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,255,"calendar.set(Calendar.HOUR_OF_DAY, hour);"
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,256,"calendar.set(Calendar.MINUTE, minutes);"
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,257,"calendar.set(Calendar.SECOND, seconds);"
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,258,"calendar.set(Calendar.MILLISECOND, milliseconds);"
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,260,pos.setIndex(offset);
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,261,return calendar.getTime();
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,262,// If we get a ParseException it'll already have the right message/offset.
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,263,// Other exception types can convert here.
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,264,} catch (IndexOutOfBoundsException e) {
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,265,fail = e;
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,266,} catch (NumberFormatException e) {
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,267,fail = e;
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,268,} catch (IllegalArgumentException e) {
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,269,fail = e;
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,271,"String input = (date == null) ? null : ('""' + date + ""'"");"
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,272,"throw new ParseException(""Failed to parse date ["" + input + ""]: "" + fail.getMessage(), pos.getIndex());"
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,276,* Check if the expected character exist at the given offset in the value.
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,278,* @param value the string to check at the specified offset
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,279,* @param offset the offset to look for the expected character
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,280,* @param expected the expected character
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,281,* @return true if the expected character exist at the given offset
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,283,"private static boolean checkOffset(String value, int offset, char expected) {"
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,284,return (offset < value.length()) && (value.charAt(offset) == expected);
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,288,* Parse an integer located between 2 given offsets in a string
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,290,* @param value the string to parse
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,291,* @param beginIndex the start index for the integer in the string
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,292,* @param endIndex the end index for the integer in the string
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,293,* @return the int
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,294,* @throws NumberFormatException if the value is not a number
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,296,"private static int parseInt(String value, int beginIndex, int endIndex) throws NumberFormatException {"
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,297,if (beginIndex < 0 || endIndex > value.length() || beginIndex > endIndex) {
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,298,throw new NumberFormatException(value);
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,300,// use same logic as in Integer.parseInt() but less generic we're not supporting negative values
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,301,int i = beginIndex;
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,302,int result = 0;
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,303,int digit;
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,304,if (i < endIndex) {
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,305,"digit = Character.digit(value.charAt(i++), 10);"
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,306,if (digit < 0) {
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,307,"throw new NumberFormatException(""Invalid number: "" + value);"
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,309,result = -digit;
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,311,while (i < endIndex) {
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,312,"digit = Character.digit(value.charAt(i++), 10);"
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,313,if (digit < 0) {
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,314,"throw new NumberFormatException(""Invalid number: "" + value);"
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,316,result *= 10;
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,317,result -= digit;
True,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java,319,return -result;
True,extras/src/test/java/com/google/gson/typeadapters/UtcDateTypeAdapterTest.java,extras/src/test/java/com/google/gson/typeadapters/UtcDateTypeAdapterTest.java,52,* JDK 1.7 introduced support for XXX format to indicate UTC date. But Android is older JDK.
True,extras/src/test/java/com/google/gson/typeadapters/UtcDateTypeAdapterTest.java,extras/src/test/java/com/google/gson/typeadapters/UtcDateTypeAdapterTest.java,53,* We want to make sure that this date is parseable in Android.
True,extras/src/test/java/com/google/gson/typeadapters/UtcDateTypeAdapterTest.java,extras/src/test/java/com/google/gson/typeadapters/UtcDateTypeAdapterTest.java,55,public void testUtcDatesOnJdkBefore1_7() {
True,extras/src/test/java/com/google/gson/typeadapters/UtcDateTypeAdapterTest.java,extras/src/test/java/com/google/gson/typeadapters/UtcDateTypeAdapterTest.java,56,Gson gson = new GsonBuilder()
True,extras/src/test/java/com/google/gson/typeadapters/UtcDateTypeAdapterTest.java,extras/src/test/java/com/google/gson/typeadapters/UtcDateTypeAdapterTest.java,57,".registerTypeAdapter(Date.class, new UtcDateTypeAdapter(true))"
True,extras/src/test/java/com/google/gson/typeadapters/UtcDateTypeAdapterTest.java,extras/src/test/java/com/google/gson/typeadapters/UtcDateTypeAdapterTest.java,58,.create();
True,extras/src/test/java/com/google/gson/typeadapters/UtcDateTypeAdapterTest.java,extras/src/test/java/com/google/gson/typeadapters/UtcDateTypeAdapterTest.java,59,"gson.fromJson(""'2014-12-05T04:00:00.000Z'"", Date.class);"

is_addition,old_file_path,new_file_path,line_num,content
True,gson/src/test/java/com/google/gson/functional/EnumTest.java,gson/src/test/java/com/google/gson/functional/EnumTest.java,19,import com.google.gson.Gson;
True,gson/src/test/java/com/google/gson/functional/EnumTest.java,gson/src/test/java/com/google/gson/functional/EnumTest.java,20,import com.google.gson.GsonBuilder;
True,gson/src/test/java/com/google/gson/functional/EnumTest.java,gson/src/test/java/com/google/gson/functional/EnumTest.java,21,import com.google.gson.JsonDeserializationContext;
True,gson/src/test/java/com/google/gson/functional/EnumTest.java,gson/src/test/java/com/google/gson/functional/EnumTest.java,22,import com.google.gson.JsonDeserializer;
True,gson/src/test/java/com/google/gson/functional/EnumTest.java,gson/src/test/java/com/google/gson/functional/EnumTest.java,23,import com.google.gson.JsonElement;
True,gson/src/test/java/com/google/gson/functional/EnumTest.java,gson/src/test/java/com/google/gson/functional/EnumTest.java,24,import com.google.gson.JsonParseException;
True,gson/src/test/java/com/google/gson/functional/EnumTest.java,gson/src/test/java/com/google/gson/functional/EnumTest.java,25,import com.google.gson.JsonPrimitive;
True,gson/src/test/java/com/google/gson/functional/EnumTest.java,gson/src/test/java/com/google/gson/functional/EnumTest.java,26,import com.google.gson.JsonSerializationContext;
True,gson/src/test/java/com/google/gson/functional/EnumTest.java,gson/src/test/java/com/google/gson/functional/EnumTest.java,27,import com.google.gson.JsonSerializer;
True,gson/src/test/java/com/google/gson/functional/EnumTest.java,gson/src/test/java/com/google/gson/functional/EnumTest.java,28,import com.google.gson.common.MoreAsserts;
True,gson/src/test/java/com/google/gson/functional/EnumTest.java,gson/src/test/java/com/google/gson/functional/EnumTest.java,29,import com.google.gson.reflect.TypeToken;
True,gson/src/test/java/com/google/gson/functional/EnumTest.java,gson/src/test/java/com/google/gson/functional/EnumTest.java,31,import junit.framework.TestCase;
False,gson/src/test/java/com/google/gson/functional/EnumTest.java,gson/src/test/java/com/google/gson/functional/EnumTest.java,25,mport junit.framework.TestCase;
False,gson/src/test/java/com/google/gson/functional/EnumTest.java,gson/src/test/java/com/google/gson/functional/EnumTest.java,27,mport com.google.gson.Gson;
False,gson/src/test/java/com/google/gson/functional/EnumTest.java,gson/src/test/java/com/google/gson/functional/EnumTest.java,28,mport com.google.gson.common.MoreAsserts;
False,gson/src/test/java/com/google/gson/functional/EnumTest.java,gson/src/test/java/com/google/gson/functional/EnumTest.java,29,mport com.google.gson.reflect.TypeToken;
True,gson/src/test/java/com/google/gson/functional/EnumTest.java,gson/src/test/java/com/google/gson/functional/EnumTest.java,123,assertRoshambo();
True,gson/src/test/java/com/google/gson/functional/EnumTest.java,gson/src/test/java/com/google/gson/functional/EnumTest.java,126,public void disabled_testEnumSubclassWithRegisteredTypeAdapter() {
True,gson/src/test/java/com/google/gson/functional/EnumTest.java,gson/src/test/java/com/google/gson/functional/EnumTest.java,127,gson = new GsonBuilder()
True,gson/src/test/java/com/google/gson/functional/EnumTest.java,gson/src/test/java/com/google/gson/functional/EnumTest.java,128,".registerTypeHierarchyAdapter(Roshambo.class, new MyEnumTypeAdapter())"
True,gson/src/test/java/com/google/gson/functional/EnumTest.java,gson/src/test/java/com/google/gson/functional/EnumTest.java,129,.create();
True,gson/src/test/java/com/google/gson/functional/EnumTest.java,gson/src/test/java/com/google/gson/functional/EnumTest.java,130,assertRoshambo();
True,gson/src/test/java/com/google/gson/functional/EnumTest.java,gson/src/test/java/com/google/gson/functional/EnumTest.java,133,private void assertRoshambo() {
False,gson/src/test/java/com/google/gson/functional/EnumTest.java,gson/src/test/java/com/google/gson/functional/EnumTest.java,123,rivate enum Roshambo {
True,gson/src/test/java/com/google/gson/functional/EnumTest.java,gson/src/test/java/com/google/gson/functional/EnumTest.java,142,public enum Roshambo {
True,gson/src/test/java/com/google/gson/functional/EnumTest.java,gson/src/test/java/com/google/gson/functional/EnumTest.java,162,private static class MyEnumTypeAdapter
True,gson/src/test/java/com/google/gson/functional/EnumTest.java,gson/src/test/java/com/google/gson/functional/EnumTest.java,163,"implements JsonSerializer<Roshambo>, JsonDeserializer<Roshambo> {"
True,gson/src/test/java/com/google/gson/functional/EnumTest.java,gson/src/test/java/com/google/gson/functional/EnumTest.java,164,"public JsonElement serialize(Roshambo src, Type typeOfSrc, JsonSerializationContext context) {"
True,gson/src/test/java/com/google/gson/functional/EnumTest.java,gson/src/test/java/com/google/gson/functional/EnumTest.java,165,"return new JsonPrimitive(""123"" + src.name());"
True,gson/src/test/java/com/google/gson/functional/EnumTest.java,gson/src/test/java/com/google/gson/functional/EnumTest.java,168,"public Roshambo deserialize(JsonElement json, Type classOfT, JsonDeserializationContext context)"
True,gson/src/test/java/com/google/gson/functional/EnumTest.java,gson/src/test/java/com/google/gson/functional/EnumTest.java,169,throws JsonParseException {
True,gson/src/test/java/com/google/gson/functional/EnumTest.java,gson/src/test/java/com/google/gson/functional/EnumTest.java,170,return Roshambo.valueOf(json.getAsString().substring(3));
True,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,29,* classes with type variables.
False,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,33,ublic void testSingle() throws Exception {
True,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,35,public void disabled_testAdvancedTypeVariables() throws Exception {
False,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,35,"ar bar1 = new Bar(""someString"", 1);"
True,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,37,"Bar bar1 = new Bar(""someString"", 1, true);"
True,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,41,arrayList.add(3);
False,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,47,"ublic static class Foo<S, T> {"
True,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,50,public void testBasicTypeVariables() throws Exception {
True,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,51,Gson gson = new Gson();
True,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,52,Blue blue1 = new Blue(true);
True,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,53,String json = gson.toJson(blue1);
True,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,55,"Blue blue2 = gson.fromJson(json, Blue.class);"
True,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,56,"assertEquals(blue1, blue2);"
True,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,59,public static class Blue extends Red<Boolean> {
True,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,60,public Blue() {
True,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,61,super(false);
True,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,64,public Blue(boolean value) {
True,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,65,super(value);
True,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,68,"// Technically, we should implement hashcode too"
True,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,69,@Override
True,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,70,public boolean equals(Object o) {
True,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,71,if (!(o instanceof Blue)) {
True,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,72,return false;
True,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,73,} else {
True,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,74,Blue blue = (Blue) o;
True,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,75,return redField.equals(blue.redField);
True,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,81,public static class Red<S> {
True,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,82,protected final S redField;
True,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,84,public Red(S redField) {
True,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,85,this.redField = redField;
True,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,89,"public static class Foo<S, T> extends Red<Boolean> {"
False,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,52,"ublic Foo(S sValue, T tValue) {"
True,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,94,"public Foo(S sValue, T tValue, Boolean redField) {"
True,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,95,super(redField);
False,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,57,"SuppressWarnings(""unchecked"")"
True,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,100,"// Technically, we should implement hashcode too"
True,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,102,"@SuppressWarnings(""unchecked"")"
False,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,60,f (!(o instanceof Foo)) {
True,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,104,"if (!(o instanceof Foo<?, ?>)) {"
True,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,106,} else {
True,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,107,"Foo<S, T> realFoo = (Foo<S, T>) o;"
True,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,108,return redField.equals(realFoo.redField)
True,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,109,&& someTField.equals(realFoo.someTField)
True,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,110,&& someSField.equals(realFoo.someSField)
True,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,111,&& map.equals(realFoo.map);
False,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,63,"oo<S, T> realFoo = (Foo<S, T>) o;"
False,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,64,eturn someTField.equals(realFoo.someTField)
False,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,65,& someSField.equals(realFoo.someSField)
False,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,66,& map.equals(realFoo.map);
False,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,72,"his("""", 0);"
True,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,119,"this("""", 0, false);"
False,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,75,"ublic Bar(String s, Integer i) {"
False,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,76,"uper(s, i);"
True,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,122,"public Bar(String s, Integer i, boolean b) {"
True,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,123,"super(s, i, b);"

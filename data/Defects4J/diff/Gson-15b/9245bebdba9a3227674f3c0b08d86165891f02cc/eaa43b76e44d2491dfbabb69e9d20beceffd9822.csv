is_addition,old_file_path,new_file_path,line_num,content
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,32,import java.util.ArrayList;
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,331,"rivate static class CollectionTypeAdapter implements JsonSerializer<Collection>, JsonDeserializer<Collection>, InstanceCreator<Collection> {"
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,332,"private static class CollectionTypeAdapter implements JsonSerializer<Collection>,"
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,333,"JsonDeserializer<Collection>, InstanceCreator<Collection> {"
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,351,"ublic Collection deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)"
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,352,hrows JsonParseException {
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,353,"public Collection deserialize(JsonElement json, Type typeOfT,"
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,354,JsonDeserializationContext context) throws JsonParseException {
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,356,/ Using list to preserve order in which elements are entered
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,357,ist<Object> list = new LinkedList<Object>();
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,358,// Use ObjectConstructor to create instance instead of hard-coding a specific type.
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,359,// This handles cases where users are using their own subclass of Collection.
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,360,"Collection collection = constructCollectionType(typeOfT, context);"
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,360,"bject value = context.deserialize(childElement, childType);"
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,361,ist.add(value);
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,363,if (childElement == null || childElement.isJsonNull()) {
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,364,collection.add(null);
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,365,} else {
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,366,"Object value = context.deserialize(childElement, childType);"
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,367,collection.add(value);
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,363,eturn list;
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,370,return collection;
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,373,"private Collection constructCollectionType(Type collectionType,"
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,374,JsonDeserializationContext context) {
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,375,JsonDeserializationContextDefault contextImpl = (JsonDeserializationContextDefault) context;
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,376,ObjectConstructor objectConstructor = contextImpl.getObjectConstructor();
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,377,return (Collection) objectConstructor.construct(collectionType);
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,392,/ Using linked hash map to preserve order in which elements are entered
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,393,"ap<String, Object> map = new LinkedHashMap<String, Object>();"
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,408,// Use ObjectConstructor to create instance instead of hard-coding a specific type.
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,409,// This handles cases where users are using their own subclass of Map.
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,410,"Map<String, Object> map = constructMapType(typeOfT, context);"
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,419,"private Map constructMapType(Type mapType, JsonDeserializationContext context) {"
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,420,JsonDeserializationContextDefault contextImpl = (JsonDeserializationContextDefault) context;
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,421,ObjectConstructor objectConstructor = contextImpl.getObjectConstructor();
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,422,return (Map) objectConstructor.construct(mapType);
True,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,42,ObjectConstructor getObjectConstructor() {
True,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,43,return objectConstructor;
False,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,83,sonDeserializer deserializer = (JsonDeserializer) deserializers.getHandlerFor(objType);
False,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,84,f (deserializer == null) {
False,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,85,f (objType instanceof Map) {
False,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,86,eserializer = deserializers.getHandlerFor(Map.class);
False,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,87, else if (objType instanceof Collection) {
False,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,88,eserializer = deserializers.getHandlerFor(Collection.class);
True,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,83,JsonDeserializer deserializer = deserializers.getHandlerFor(objType);
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,190,f (serializer == null) {
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,191,f (obj instanceof Map) {
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,192,erializer = serializers.getHandlerFor(Map.class);
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,193, else if (obj instanceof Collection) {
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,194,erializer = serializers.getHandlerFor(Collection.class);
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,190,//    if (serializer == null) {
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,191,//      if (obj instanceof Map) {
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,192,//        serializer = serializers.getHandlerFor(Map.class);
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,193,//      } else if (obj instanceof Collection) {
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,194,//        serializer = serializers.getHandlerFor(Collection.class);
False,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,54,"isitChild(object, member.getKey(), member.getValue(), isFirst);"
False,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,55,f (isFirst) {
True,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,54,"boolean visited = visitChild(object, member.getKey(), member.getValue(), isFirst);"
True,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,55,if (visited && isFirst) {
False,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,65,"rivate void visitChild(JsonObject parent, String childName, JsonElement child, boolean isFirst) {"
True,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,66,"* Returns true if the child was visited, false if it was skipped."
True,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,68,"private boolean visitChild(JsonObject parent, String childName, JsonElement child,"
True,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,69,boolean isFirst) {
True,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,75,} else { // Null value is being skipped.
True,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,76,return false;
True,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,90,return true;
True,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,gson/src/main/java/com/google/gson/JsonTreeNavigator.java,94,"* Returns true if the child was visited, false if it was skipped."
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,21,import java.util.Collection;
False,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,65, handler = map.get(type);
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,66,T handler = getRawHandlerFor(type);
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,67,Type rawType = type;
False,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,67,"/ a handler for a non-generic version is registered, so use that"
False,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,68,ype rawType = ((ParameterizedType)type).getRawType();
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,69,"// a handler for a non-generic version may be registered, so use that"
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,70,rawType = ((ParameterizedType)type).getRawType();
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,73,// Check for map or collection
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,74,if (handler == null) {
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,75,if (rawType instanceof Class) {
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,76,Class<?> rawClass = (Class<?>) rawType;
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,77,if (Map.class.isAssignableFrom(rawClass)) {
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,78,handler = map.get(Map.class);
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,79,} else if (Collection.class.isAssignableFrom(rawClass)) {
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,80,handler = map.get(Collection.class);
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,84,return handler;
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,87,private synchronized T getRawHandlerFor(Type type) {
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,88,T handler = map.get(type);
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,89,if (type instanceof Map) {
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,90,handler = map.get(Map.class);
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,91,} else if (type instanceof Collection) {
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,92,handler = map.get(Collection.class);
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,33,import java.util.LinkedList;
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,35,import java.util.Queue;
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,84,public void testLinkedListSerialization() {
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,85,List<String> list = new LinkedList<String>();
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,86,"list.add(""a1"");"
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,87,"list.add(""a2"");"
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,88,Type linkedListType = new TypeToken<LinkedList<String>>() {}.getType();
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,89,"String json = gson.toJson(list, linkedListType);"
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,90,"assertTrue(json.contains(""a1""));"
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,91,"assertTrue(json.contains(""a2""));"
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,94,public void testLinkedListDeserialization() {
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,95,"String json = ""['a1','a2']"";"
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,96,Type linkedListType = new TypeToken<LinkedList<String>>() {}.getType();
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,97,"List<String> list = gson.fromJson(json, linkedListType);"
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,98,"assertEquals(""a1"", list.get(0));"
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,99,"assertEquals(""a2"", list.get(1));"
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,102,public void testQueueSerialization() {
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,103,Queue<String> queue = new LinkedList<String>();
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,104,"queue.add(""a1"");"
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,105,"queue.add(""a2"");"
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,106,Type queueType = new TypeToken<Queue<String>>() {}.getType();
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,107,"String json = gson.toJson(queue, queueType);"
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,108,"assertTrue(json.contains(""a1""));"
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,109,"assertTrue(json.contains(""a2""));"
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,112,public void testQueueDeserialization() {
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,113,"String json = ""['a1','a2']"";"
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,114,Type queueType = new TypeToken<Queue<String>>() {}.getType();
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,115,"Queue<String> queue = gson.fromJson(json, queueType);"
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,116,"assertEquals(""a1"", queue.element());"
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,117,queue.remove();
True,gson/src/test/java/com/google/gson/functional/CollectionTest.java,gson/src/test/java/com/google/gson/functional/CollectionTest.java,118,"assertEquals(""a2"", queue.element());"
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,79,public void testParameterizedMapSubclassSerialization() {
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,80,"MyParameterizedMap<String, String> map = new MyParameterizedMap<String, String>();"
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,81,"map.put(""a"", ""b"");"
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,82,"Type type = new TypeToken<MyParameterizedMap<String, String>>() {}.getType();"
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,83,"String json = gson.toJson(map, type);"
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,84,"assertTrue(json.contains(""\""a\"":\""b\""""));"
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,87,"@SuppressWarnings(""unchecked"")"
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,88,public void testParameterizedMapSubclassDeserialization() {
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,89,"Type type = new TypeToken<MyParameterizedMap<String, Integer>>() {}.getType();"
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,90,"Gson gson = new GsonBuilder().registerTypeAdapter(type,"
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,91,new InstanceCreator<MyParameterizedMap>() {
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,92,public MyParameterizedMap createInstance(Type type) {
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,93,return new MyParameterizedMap();
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,95,}).create();
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,96,"String json = ""{\""a\"":1,\""b\"":2}"";"
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,97,"MyParameterizedMap<String, Integer> map = gson.fromJson(json, type);"
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,98,"assertEquals(1, ((Integer) map.get(""a"")).intValue());"
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,99,"assertEquals(2, ((Integer) map.get(""b"")).intValue());"
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,102,"private static class MyParameterizedMap<K, V> extends LinkedHashMap<K, V> {"
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,103,int foo = 10;
False,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,82,tring json = gson.toJson(map);
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,109,"String json = gson.toJson(map, MyMap.class);"
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,230,"@SuppressWarnings(""unchecked"")"
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,231,public void testParameterizedTypeGenericArraysSerialization() throws Exception {
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,232,List<Integer> list = new ArrayList<Integer>();
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,233,list.add(1);
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,234,list.add(2);
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,235,"List<Integer>[] arrayOfLists = new List[] { list, list };"
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,237,Type typeOfSrc = new TypeToken<ObjectWithTypeVariables<Integer>>() {}.getType();
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,238,ObjectWithTypeVariables<Integer> objToSerialize =
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,239,"new ObjectWithTypeVariables<Integer>(null, null, null, arrayOfLists, null, null);"
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,240,"String json = gson.toJson(objToSerialize, typeOfSrc);"
True,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java,241,"assertEquals(""{\""arrayOfListOfTypeParameters\"":[[1,2],[1,2]]}"", json);"

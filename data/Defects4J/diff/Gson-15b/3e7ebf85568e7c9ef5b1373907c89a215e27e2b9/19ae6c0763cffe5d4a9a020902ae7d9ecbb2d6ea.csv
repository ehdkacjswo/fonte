is_addition,old_file_path,new_file_path,line_num,content
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,79,"ddAsArrayElement(componentType, child);"
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,79,Type childType = componentType;
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,80,if (child != null) {
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,81,"childType = getActualTypeIfMoreSpecific(childType, child.getClass());"
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,83,"addAsArrayElement(childType, child);"
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,101,"/ This takes care of situations where the field was declared as an Object, but the"
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,102,/ actual value contains something more specific. See Issue 54.
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,103,f (fieldValue != null && typeOfF == Object.class) {
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,104,ypeOfF = fieldValue.getClass();
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,105,if (fieldValue != null) {
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,106,"typeOfF = getActualTypeIfMoreSpecific(typeOfF, fieldValue.getClass());"
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,112,"// This takes care of situations where the field was declared as an Object, but the"
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,113,// actual value contains something more specific. See Issue 54.
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,114,"private Type getActualTypeIfMoreSpecific(Type type, Class<?> actualClass) {"
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,115,if (type instanceof Class<?>) {
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,116,Class<?> typeAsClass = (Class<?>) type;
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,117,if (typeAsClass.isAssignableFrom(actualClass)) {
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,118,type = actualClass;
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,120,if (type == Object.class) {
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,121,type = actualClass;
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,124,return type;
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,38,public static class BaseClass {
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,39,final String baseField;
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,40,public BaseClass() {
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,41,"this(""baseFieldValue"");"
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,43,public BaseClass(String value) {
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,44,this.baseField = value;
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,46,public String getExpectedJson() {
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,47,"return String.format(""{\""baseField\"":\""%s\""}"", baseField);"
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,51,public static class SubClass extends BaseClass {
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,52,final String subField;
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,53,public SubClass() {
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,54,"this(""subFieldValue"");"
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,56,public SubClass(String subFieldValue) {
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,57,this.subField = subFieldValue;
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,59,@Override
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,60,public String getExpectedJson() {
True,gson/src/test/java/com/google/gson/common/TestTypes.java,gson/src/test/java/com/google/gson/common/TestTypes.java,61,"return String.format(""{\""subField\"":\""%s\"",\""baseField\"":\""%s\""}"", subField, baseField);"
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,2,* Copyright (C) 2009 Google Inc.
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,5,* you may not use this file except in compliance with the License.
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,6,* You may obtain a copy of the License at
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,8,* http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,13,* See the License for the specific language governing permissions and
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,14,* limitations under the License.
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,16,package com.google.gson.functional;
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,18,import java.util.Collection;
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,19,import java.util.LinkedList;
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,20,import java.util.List;
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,21,import java.util.Queue;
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,22,import java.util.Set;
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,23,import java.util.SortedSet;
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,24,import java.util.TreeSet;
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,26,import junit.framework.TestCase;
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,28,import com.google.gson.Gson;
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,29,import com.google.gson.common.TestTypes.BagOfPrimitives;
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,30,import com.google.gson.common.TestTypes.BaseClass;
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,31,import com.google.gson.common.TestTypes.Nested;
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,32,import com.google.gson.common.TestTypes.SubClass;
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,35,* Functional tests for Json serialization and deserialization of classes with
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,36,* inheritance hierarchies.
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,38,* @author Inderjeet Singh
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,39,* @author Joel Leitch
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,41,public class InheritanceTest extends TestCase {
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,42,private Gson gson;
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,44,@Override
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,45,protected void setUp() throws Exception {
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,46,super.setUp();
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,47,gson = new Gson();
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,50,public void testSubClassSerialization() throws Exception {
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,51,"SubTypeOfNested target = new SubTypeOfNested(new BagOfPrimitives(10, 20, false, ""stringValue""),"
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,52,"new BagOfPrimitives(30, 40, true, ""stringValue""));"
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,53,"assertEquals(target.getExpectedJson(), gson.toJson(target));"
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,56,public void testSubClassDeserialization() throws Exception {
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,57,"String json = ""{\""value\"":5,\""primitive1\"":{\""longValue\"":10,\""intValue\"":20,"""
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,58,"+ ""\""booleanValue\"":false,\""stringValue\"":\""stringValue\""},\""primitive2\"":"""
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,59,"+ ""{\""longValue\"":30,\""intValue\"":40,\""booleanValue\"":true,"""
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,60,"+ ""\""stringValue\"":\""stringValue\""}}"";"
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,61,"SubTypeOfNested target = gson.fromJson(json, SubTypeOfNested.class);"
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,62,"assertEquals(json, target.getExpectedJson());"
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,65,public void testClassWithBaseFieldSerialization() throws Exception {
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,66,ClassWithBaseFields sub = new ClassWithBaseFields();
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,67,sub.field = new SubClass();
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,68,String json = gson.toJson(sub);
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,69,String expectedJson = sub.field.getExpectedJson();
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,70,assertTrue(json.contains(expectedJson));
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,73,public void testClassWithBaseArrayFieldSerialization() throws Exception {
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,74,ClassWithBaseFields sub = new ClassWithBaseFields();
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,75,"sub.array = new BaseClass[]{ new SubClass(""sub1""), new SubClass(""sub2"")};"
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,76,String json = gson.toJson(sub);
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,77,"assertTrue(json.contains(""sub1""));"
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,78,"assertTrue(json.contains(""sub2""));"
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,81,private static class ClassWithBaseFields {
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,82,BaseClass field;
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,83,"@SuppressWarnings(""unused"")"
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,84,BaseClass[] array;
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,87,private static class SubTypeOfNested extends Nested {
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,88,private final long value = 5;
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,90,// Used by Gson
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,91,"@SuppressWarnings(""unused"")"
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,92,private SubTypeOfNested() {
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,93,"this(null, null);"
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,96,"public SubTypeOfNested(BagOfPrimitives primitive1, BagOfPrimitives primitive2) {"
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,97,"super(primitive1, primitive2);"
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,100,@Override
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,101,public void appendFields(StringBuilder sb) {
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,102,"sb.append(""\""value\"":"").append(value).append("","");"
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,103,super.appendFields(sb);
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,107,public void testSubInterfacesOfCollectionSerialization() throws Exception {
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,108,List<Integer> list = new LinkedList<Integer>();
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,109,list.add(0);
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,110,list.add(1);
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,111,list.add(2);
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,112,list.add(3);
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,113,Queue<Long> queue = new LinkedList<Long>();
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,114,queue.add(0L);
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,115,queue.add(1L);
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,116,queue.add(2L);
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,117,queue.add(3L);
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,118,Set<Float> set = new TreeSet<Float>();
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,119,set.add(0.1F);
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,120,set.add(0.2F);
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,121,set.add(0.3F);
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,122,set.add(0.4F);
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,123,SortedSet<Character> sortedSet = new TreeSet<Character>();
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,124,sortedSet.add('a');
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,125,sortedSet.add('b');
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,126,sortedSet.add('c');
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,127,sortedSet.add('d');
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,128,ClassWithSubInterfacesOfCollection target =
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,129,"new ClassWithSubInterfacesOfCollection(list, queue, set, sortedSet);"
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,130,"assertEquals(target.getExpectedJson(), gson.toJson(target));"
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,133,public void testSubInterfacesOfCollectionDeserialization() throws Exception {
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,134,"String json = ""{\""list\"":[0,1,2,3],\""queue\"":[0,1,2,3],\""set\"":[0.1,0.2,0.3,0.4],"""
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,135,"+ ""\""sortedSet\"":[\""a\"",\""b\"",\""c\"",\""d\""]"""
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,137,ClassWithSubInterfacesOfCollection target =
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,138,"gson.fromJson(json, ClassWithSubInterfacesOfCollection.class);"
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,139,"assertTrue(target.listContains(0, 1, 2, 3));"
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,140,"assertTrue(target.queueContains(0, 1, 2, 3));"
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,141,"assertTrue(target.setContains(0.1F, 0.2F, 0.3F, 0.4F));"
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,142,"assertTrue(target.sortedSetContains('a', 'b', 'c', 'd'));"
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,145,private static class ClassWithSubInterfacesOfCollection {
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,146,private List<Integer> list;
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,147,private Queue<Long> queue;
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,148,private Set<Float> set;
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,149,private SortedSet<Character> sortedSet;
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,151,// For use by Gson
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,152,"@SuppressWarnings(""unused"")"
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,153,private ClassWithSubInterfacesOfCollection() {
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,156,"public ClassWithSubInterfacesOfCollection(List<Integer> list, Queue<Long> queue, Set<Float> set,"
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,157,SortedSet<Character> sortedSet) {
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,158,this.list = list;
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,159,this.queue = queue;
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,160,this.set = set;
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,161,this.sortedSet = sortedSet;
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,164,boolean listContains(int... values) {
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,165,for (int value : values) {
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,166,if (!list.contains(value)) {
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,167,return false;
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,170,return true;
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,173,boolean queueContains(long... values) {
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,174,for (long value : values) {
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,175,if (!queue.contains(value)) {
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,176,return false;
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,179,return true;
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,182,boolean setContains(float... values) {
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,183,for (float value : values) {
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,184,if (!set.contains(value)) {
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,185,return false;
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,188,return true;
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,191,boolean sortedSetContains(char... values) {
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,192,for (char value : values) {
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,193,if (!sortedSet.contains(value)) {
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,194,return false;
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,197,return true;
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,200,public String getExpectedJson() {
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,201,StringBuilder sb = new StringBuilder();
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,202,"sb.append(""{"");"
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,203,"sb.append(""\""list\"":"");"
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,204,"append(sb, list).append("","");"
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,205,"sb.append(""\""queue\"":"");"
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,206,"append(sb, queue).append("","");"
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,207,"sb.append(""\""set\"":"");"
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,208,"append(sb, set).append("","");"
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,209,"sb.append(""\""sortedSet\"":"");"
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,210,"append(sb, sortedSet);"
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,211,"sb.append(""}"");"
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,212,return sb.toString();
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,215,"private StringBuilder append(StringBuilder sb, Collection<?> c) {"
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,216,"sb.append(""["");"
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,217,boolean first = true;
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,218,for (Object o : c) {
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,219,if (!first) {
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,220,"sb.append("","");"
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,221,} else {
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,222,first = false;
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,224,if (o instanceof String || o instanceof Character) {
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,225,"sb.append('\""');"
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,227,sb.append(o.toString());
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,228,if (o instanceof String || o instanceof Character) {
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,229,"sb.append('\""');"
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,232,"sb.append(""]"");"
True,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,gson/src/test/java/com/google/gson/functional/InheritanceTest.java,233,return sb;
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,22,mport java.util.LinkedList;
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,23,mport java.util.List;
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,24,mport java.util.Queue;
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,25,mport java.util.Set;
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,26,mport java.util.SortedSet;
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,27,mport java.util.TreeSet;
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,162,ublic void testInheritenceSerialization() throws Exception {
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,163,"ubTypeOfNested target = new SubTypeOfNested(new BagOfPrimitives(10, 20, false, ""stringValue""),"
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,164,"ew BagOfPrimitives(30, 40, true, ""stringValue""));"
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,165,"ssertEquals(target.getExpectedJson(), gson.toJson(target));"
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,168,ublic void testInheritenceDeserialization() throws Exception {
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,169,"tring json = ""{\""value\"":5,\""primitive1\"":{\""longValue\"":10,\""intValue\"":20,"""
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,170," ""\""booleanValue\"":false,\""stringValue\"":\""stringValue\""},\""primitive2\"":"""
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,171," ""{\""longValue\"":30,\""intValue\"":40,\""booleanValue\"":true,"""
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,172," ""\""stringValue\"":\""stringValue\""}}"";"
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,173,"ubTypeOfNested target = gson.fromJson(json, SubTypeOfNested.class);"
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,174,"ssertEquals(json, target.getExpectedJson());"
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,220,ublic void testSubInterfacesOfCollectionSerialization() throws Exception {
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,221,ist<Integer> list = new LinkedList<Integer>();
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,222,ist.add(0);
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,223,ist.add(1);
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,224,ist.add(2);
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,225,ist.add(3);
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,226,ueue<Long> queue = new LinkedList<Long>();
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,227,ueue.add(0L);
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,228,ueue.add(1L);
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,229,ueue.add(2L);
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,230,ueue.add(3L);
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,231,et<Float> set = new TreeSet<Float>();
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,232,et.add(0.1F);
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,233,et.add(0.2F);
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,234,et.add(0.3F);
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,235,et.add(0.4F);
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,236,ortedSet<Character> sortedSet = new TreeSet<Character>();
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,237,ortedSet.add('a');
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,238,ortedSet.add('b');
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,239,ortedSet.add('c');
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,240,ortedSet.add('d');
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,241,lassWithSubInterfacesOfCollection target =
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,242,"ew ClassWithSubInterfacesOfCollection(list, queue, set, sortedSet);"
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,243,"ssertEquals(target.getExpectedJson(), gson.toJson(target));"
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,246,ublic void testSubInterfacesOfCollectionDeserialization() throws Exception {
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,247,"tring json = ""{\""list\"":[0,1,2,3],\""queue\"":[0,1,2,3],\""set\"":[0.1,0.2,0.3,0.4],"""
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,248," ""\""sortedSet\"":[\""a\"",\""b\"",\""c\"",\""d\""]"""
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,250,lassWithSubInterfacesOfCollection target =
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,251,"son.fromJson(json, ClassWithSubInterfacesOfCollection.class);"
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,252,"ssertTrue(target.listContains(0, 1, 2, 3));"
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,253,"ssertTrue(target.queueContains(0, 1, 2, 3));"
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,254,"ssertTrue(target.setContains(0.1F, 0.2F, 0.3F, 0.4F));"
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,255,"ssertTrue(target.sortedSetContains('a', 'b', 'c', 'd'));"
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,402,rivate static class ClassWithSubInterfacesOfCollection {
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,403,rivate List<Integer> list;
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,404,rivate Queue<Long> queue;
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,405,rivate Set<Float> set;
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,406,rivate SortedSet<Character> sortedSet;
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,408,/ For use by Gson
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,409,"SuppressWarnings(""unused"")"
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,410,rivate ClassWithSubInterfacesOfCollection() {
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,413,"ublic ClassWithSubInterfacesOfCollection(List<Integer> list, Queue<Long> queue, Set<Float> set,"
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,414,ortedSet<Character> sortedSet) {
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,415,his.list = list;
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,416,his.queue = queue;
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,417,his.set = set;
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,418,his.sortedSet = sortedSet;
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,421,oolean listContains(int... values) {
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,422,or (int value : values) {
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,423,f (!list.contains(value)) {
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,424,eturn false;
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,427,eturn true;
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,430,oolean queueContains(long... values) {
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,431,or (long value : values) {
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,432,f (!queue.contains(value)) {
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,433,eturn false;
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,436,eturn true;
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,439,oolean setContains(float... values) {
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,440,or (float value : values) {
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,441,f (!set.contains(value)) {
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,442,eturn false;
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,445,eturn true;
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,448,oolean sortedSetContains(char... values) {
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,449,or (char value : values) {
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,450,f (!sortedSet.contains(value)) {
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,451,eturn false;
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,454,eturn true;
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,457,ublic String getExpectedJson() {
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,458,tringBuilder sb = new StringBuilder();
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,459,"b.append(""{"");"
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,460,"b.append(""\""list\"":"");"
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,461,"ppend(sb, list).append("","");"
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,462,"b.append(""\""queue\"":"");"
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,463,"ppend(sb, queue).append("","");"
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,464,"b.append(""\""set\"":"");"
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,465,"ppend(sb, set).append("","");"
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,466,"b.append(""\""sortedSet\"":"");"
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,467,"ppend(sb, sortedSet);"
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,468,"b.append(""}"");"
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,469,eturn sb.toString();
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,472,"rivate StringBuilder append(StringBuilder sb, Collection<?> c) {"
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,473,"b.append(""["");"
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,474,oolean first = true;
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,475,or (Object o : c) {
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,476,f (!first) {
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,477,"b.append("","");"
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,478, else {
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,479,irst = false;
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,481,f (o instanceof String || o instanceof Character) {
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,482,"b.append('\""');"
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,484,b.append(o.toString());
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,485,f (o instanceof String || o instanceof Character) {
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,486,"b.append('\""');"
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,489,"b.append(""]"");"
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,490,eturn sb;
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,499,rivate static class SubTypeOfNested extends Nested {
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,500,rivate final long value = 5;
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,502,/ Used by Gson
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,503,"SuppressWarnings(""unused"")"
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,504,rivate SubTypeOfNested() {
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,505,"his(null, null);"
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,508,"ublic SubTypeOfNested(BagOfPrimitives primitive1, BagOfPrimitives primitive2) {"
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,509,"uper(primitive1, primitive2);"
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,512,Override
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,513,ublic void appendFields(StringBuilder sb) {
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,514,"b.append(""\""value\"":"").append(value).append("","");"
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,515,uper.appendFields(sb);

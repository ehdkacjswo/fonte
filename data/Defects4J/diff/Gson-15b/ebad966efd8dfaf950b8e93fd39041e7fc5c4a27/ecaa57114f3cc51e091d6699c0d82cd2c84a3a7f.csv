is_addition,old_file_path,new_file_path,line_num,content
False,extras/src/main/java/com/google/gson/typeadapters/RuntimeTypeAdapterFactory.java,extras/src/main/java/com/google/gson/typeadapters/RuntimeTypeAdapterFactory.java,100,   RuntimeTypeAdapterFactory<Shape> shapeAdapter
True,extras/src/main/java/com/google/gson/typeadapters/RuntimeTypeAdapterFactory.java,extras/src/main/java/com/google/gson/typeadapters/RuntimeTypeAdapterFactory.java,100,*   RuntimeTypeAdapterFactory<Shape> shapeAdapterFactory
False,extras/src/main/java/com/google/gson/typeadapters/RuntimeTypeAdapterFactory.java,extras/src/main/java/com/google/gson/typeadapters/RuntimeTypeAdapterFactory.java,111," Finally, register the type adapter in your application's GSON builder:"
True,extras/src/main/java/com/google/gson/typeadapters/RuntimeTypeAdapterFactory.java,extras/src/main/java/com/google/gson/typeadapters/RuntimeTypeAdapterFactory.java,111,"* Finally, register the type adapter factory in your application's GSON builder:"
False,extras/src/main/java/com/google/gson/typeadapters/RuntimeTypeAdapterFactory.java,extras/src/main/java/com/google/gson/typeadapters/RuntimeTypeAdapterFactory.java,114,"       .registerTypeAdapter(Shape.class, shapeAdapter)"
True,extras/src/main/java/com/google/gson/typeadapters/RuntimeTypeAdapterFactory.java,extras/src/main/java/com/google/gson/typeadapters/RuntimeTypeAdapterFactory.java,114,*       .registerTypeAdapterFactory(shapeAdapterFactory)
False,extras/src/main/java/com/google/gson/typeadapters/RuntimeTypeAdapterFactory.java,extras/src/main/java/com/google/gson/typeadapters/RuntimeTypeAdapterFactory.java,118,   RuntimeTypeAdapterFactory<Shape> shapeAdapter = RuntimeTypeAdapterFactory.of(Shape.class)
True,extras/src/main/java/com/google/gson/typeadapters/RuntimeTypeAdapterFactory.java,extras/src/main/java/com/google/gson/typeadapters/RuntimeTypeAdapterFactory.java,118,*   RuntimeTypeAdapterFactory<Shape> shapeAdapterFactory = RuntimeTypeAdapterFactory.of(Shape.class)
False,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,27,mport java.util.TimeZone;
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,722, Returns a new JSON writer configured for the settings on this Gson instance.
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,722,* Returns a new JSON reader configured for the settings on this Gson instance.
False,gson/src/main/java/com/google/gson/internal/Streams.java,gson/src/main/java/com/google/gson/internal/Streams.java,75,"SuppressWarnings(""resource"")"
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,108,JsonAdapter annotation = field.getAnnotation(JsonAdapter.class);
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,109,TypeAdapter<?> mapped = null;
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,110,if (annotation != null) {
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,111,"mapped = getTypeAdapter(constructorConstructor, context, fieldType, annotation);"
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,113,final boolean jsonAdapterPresent = mapped != null;
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,114,if (mapped == null) mapped = context.getAdapter(fieldType);
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,116,final TypeAdapter<?> typeAdapter = mapped;
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,108,"inal TypeAdapter<?> typeAdapter = getFieldAdapter(context, field, fieldType);"
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,113,ypeAdapter t =
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,114,"ew TypeAdapterRuntimeTypeWrapper(context, this.typeAdapter, fieldType.getType());"
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,122,TypeAdapter t = jsonAdapterPresent ? typeAdapter
True,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,123,": new TypeAdapterRuntimeTypeWrapper(context, typeAdapter, fieldType.getType());"
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,132,"ypeAdapter<?> getFieldAdapter(Gson gson, Field field, TypeToken<?> fieldType) {"
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,133,sonAdapter annotation = field.getAnnotation(JsonAdapter.class);
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,134,f (annotation != null) {
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,135,"ypeAdapter<?> adapter = getTypeAdapter(constructorConstructor, gson, fieldType, annotation);"
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,136,f (adapter != null) return adapter;
False,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java,138,eturn gson.getAdapter(fieldType);
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapterRuntimeTypeWrapper.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapterRuntimeTypeWrapper.java,18,import java.io.IOException;
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapterRuntimeTypeWrapper.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapterRuntimeTypeWrapper.java,19,import java.lang.reflect.Type;
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapterRuntimeTypeWrapper.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapterRuntimeTypeWrapper.java,20,import java.lang.reflect.TypeVariable;
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapterRuntimeTypeWrapper.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapterRuntimeTypeWrapper.java,23,mport java.io.IOException;
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapterRuntimeTypeWrapper.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapterRuntimeTypeWrapper.java,24,mport java.lang.reflect.Type;
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapterRuntimeTypeWrapper.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapterRuntimeTypeWrapper.java,25,mport java.lang.reflect.TypeVariable;
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,808,"hrow new AssertionError(""Missing field in "" + classOfT.getName(), e);"
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,808,throw new AssertionError(e);
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,1546,case '/':
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,1547,return escaped;
False,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,1547,eturn escaped;
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,1549,// throw error when none of the above cases are matched
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,1550,"throw syntaxError(""Invalid escape sequence"");"
True,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java,223,/** Regression test contributed through https://github.com/google/gson/issues/831 */
True,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java,224,public void testNonPrimitiveFieldAnnotationTakesPrecedenceOverDefault() {
True,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java,225,Gson gson = new Gson();
True,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java,226,"String json = gson.toJson(new GadgetWithOptionalPart(new Part(""foo"")));"
True,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java,227,"assertEquals(""{\""part\"":\""PartJsonFieldAnnotationAdapter\""}"", json);"
True,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java,228,"GadgetWithOptionalPart gadget = gson.fromJson(""{'part':'foo'}"", GadgetWithOptionalPart.class);"
True,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java,229,"assertEquals(""PartJsonFieldAnnotationAdapter"", gadget.part.name);"
True,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java,232,/** Regression test contributed through https://github.com/google/gson/issues/831 */
True,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java,233,public void testPrimitiveFieldAnnotationTakesPrecedenceOverDefault() {
True,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java,234,Gson gson = new Gson();
True,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java,235,String json = gson.toJson(new GadgetWithPrimitivePart(42));
True,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java,236,"assertEquals(""{\""part\"":\""42\""}"", json);"
True,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java,237,"GadgetWithPrimitivePart gadget = gson.fromJson(json, GadgetWithPrimitivePart.class);"
True,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java,238,"assertEquals(42, gadget.part);"
True,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java,241,private static final class GadgetWithPrimitivePart {
True,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java,242,@JsonAdapter(LongToStringTypeAdapterFactory.class)
True,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java,243,final long part;
True,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java,245,private GadgetWithPrimitivePart(long part) {
True,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java,246,this.part = part;
True,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java,250,private static final class LongToStringTypeAdapterFactory implements TypeAdapterFactory {
True,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java,251,static final TypeAdapter<Long> ADAPTER = new TypeAdapter<Long>() {
True,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java,252,"@Override public void write(JsonWriter out, Long value) throws IOException {"
True,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java,253,out.value(value.toString());
True,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java,255,@Override public Long read(JsonReader in) throws IOException {
True,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java,256,return in.nextLong();
True,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java,259,"@SuppressWarnings(""unchecked"")"
True,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java,260,"@Override public <T> TypeAdapter<T> create(Gson gson, final TypeToken<T> type) {"
True,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java,261,Class<?> cls = type.getRawType();
True,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java,262,if (Long.class.isAssignableFrom(cls)) {
True,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java,263,return (TypeAdapter<T>) ADAPTER;
True,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java,264,} else if (long.class.isAssignableFrom(cls)) {
True,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java,265,return (TypeAdapter<T>) ADAPTER;
True,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java,267,"throw new IllegalStateException(""Non-long field of type "" + type"
True,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java,268,"+ "" annotated with @JsonAdapter(LongToStringTypeAdapterFactory.class)"");"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,177,public void testInvalidJsonInput() throws IOException {
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,178,"String json = ""{\n"""
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,179,"+ ""   \""h\\ello\"": true,\n"""
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,180,"+ ""   \""foo\"": [\""world\""]\n"""
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,183,JsonReader reader = new JsonReader(reader(json));
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,184,reader.beginObject();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,185,try {
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,186,reader.nextName();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,187,fail();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,188,} catch (IOException expected) {
False,proto/src/main/java/com/google/gson/protobuf/ProtoTypeAdapter.java,proto/src/main/java/com/google/gson/protobuf/ProtoTypeAdapter.java,265,f (jsonObject.has(jsonFieldName)) {
False,proto/src/main/java/com/google/gson/protobuf/ProtoTypeAdapter.java,proto/src/main/java/com/google/gson/protobuf/ProtoTypeAdapter.java,266,sonElement jsonElement = jsonObject.get(jsonFieldName);
True,proto/src/main/java/com/google/gson/protobuf/ProtoTypeAdapter.java,proto/src/main/java/com/google/gson/protobuf/ProtoTypeAdapter.java,265,JsonElement jsonElement = jsonObject.get(jsonFieldName);
True,proto/src/main/java/com/google/gson/protobuf/ProtoTypeAdapter.java,proto/src/main/java/com/google/gson/protobuf/ProtoTypeAdapter.java,266,if (jsonElement != null && !jsonElement.isJsonNull()) {
True,proto/src/test/java/com/google/gson/protobuf/functional/ProtosWithPrimitiveTypesTest.java,proto/src/test/java/com/google/gson/protobuf/functional/ProtosWithPrimitiveTypesTest.java,70,public void testDeserializeWithExplicitNullValue() {
True,proto/src/test/java/com/google/gson/protobuf/functional/ProtosWithPrimitiveTypesTest.java,proto/src/test/java/com/google/gson/protobuf/functional/ProtosWithPrimitiveTypesTest.java,71,"SimpleProto proto = gson.fromJson(""{msg:'foo',count:null}"", SimpleProto.class);"
True,proto/src/test/java/com/google/gson/protobuf/functional/ProtosWithPrimitiveTypesTest.java,proto/src/test/java/com/google/gson/protobuf/functional/ProtosWithPrimitiveTypesTest.java,72,"assertEquals(""foo"", proto.getMsg());"
True,proto/src/test/java/com/google/gson/protobuf/functional/ProtosWithPrimitiveTypesTest.java,proto/src/test/java/com/google/gson/protobuf/functional/ProtosWithPrimitiveTypesTest.java,73,"assertEquals(0, proto.getCount());"

is_addition,old_file_path,new_file_path,line_num,content
False,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,24,mport java.util.ArrayDeque;
False,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,41,"ublic final class LinkedTreeMap<K, V> extends AbstractMap<K, V> implements Serializable {"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,40,"public final class LinkedHashTreeMap<K, V> extends AbstractMap<K, V> implements Serializable {"
False,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,61,ublic LinkedTreeMap() {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,60,public LinkedHashTreeMap() {
False,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,73,ublic LinkedTreeMap(Comparator<? super K> comparator) {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,72,public LinkedHashTreeMap(Comparator<? super K> comparator) {
False,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,87,"ntry<K, V> entry = findByObject(key);"
False,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,88,eturn entry != null ? entry.getValue() : null;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,86,"Node<K, V> node = findByObject(key);"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,87,return node != null ? node.value : null;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,132,Comparator<? super K> comparator = this.comparator;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,133,"Node<K, V>[] table = this.table;"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,136,"Node<K, V> nearest = table[index];"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,137,int comparison = 0;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,139,if (nearest != null) {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,140,// Micro-optimization: avoid polymorphic calls to Comparator.compare().
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,141,"@SuppressWarnings(""unchecked"") // Throws a ClassCastException below if there's trouble."
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,142,Comparable<Object> comparableKey = (comparator == NATURAL_ORDER)
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,143,? (Comparable<Object>) key
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,144,: null;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,146,while (true) {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,147,comparison = (comparableKey != null)
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,148,? comparableKey.compareTo(nearest.key)
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,149,": comparator.compare(key, nearest.key);"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,151,// We found the requested key.
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,152,if (comparison == 0) {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,153,return nearest;
False,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,136,f (table[index] == null) {
False,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,137,f (comparator == NATURAL_ORDER && !(key instanceof Comparable)) {
False,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,138,"hrow new ClassCastException(key.getClass().getName() + "" is not Comparable"");"
False,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,140,f (create) {
False,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,141,"ode<K, V> created = new Node<K, V>(null, key, hash, header, header.prev);"
False,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,142,ize++;
False,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,143,able[index] = created;
False,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,144,odCount++;
False,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,145,f (size > threshold) {
False,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,146,oubleCapacity();
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,156,"// If it exists, the key is in a subtree. Go deeper."
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,157,"Node<K, V> child = (comparison < 0) ? nearest.left : nearest.right;"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,158,if (child == null) {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,159,break;
False,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,148,eturn created;
False,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,149, else {
False,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,150,eturn null;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,162,nearest = child;
False,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,154,"ode<K, V> nearest = table[index];"
False,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,155,hile (true) {
False,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,156,"nt comparison = comparator.compare(key, nearest.key);"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,166,// The key doesn't exist in this tree.
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,167,if (!create) {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,168,return null;
False,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,158,/ We found the requested key.
False,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,159,f (comparison == 0) {
False,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,160,eturn nearest;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,171,// Create the node and add it to the tree or the table.
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,172,"Node<K, V> header = this.header;"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,173,"Node<K, V> created;"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,174,if (nearest == null) {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,175,// Check that the value is comparable if we didn't do any comparisons.
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,176,if (comparator == NATURAL_ORDER && !(key instanceof Comparable)) {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,177,"throw new ClassCastException(key.getClass().getName() + "" is not Comparable"");"
False,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,163,"/ If it exists, the key is in a subtree. Go deeper."
False,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,164,"ode<K, V> child = (comparison < 0) ? nearest.left : nearest.right;"
False,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,165,f (child != null) {
False,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,166,earest = child;
False,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,167,ontinue;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,179,"created = new Node<K, V>(nearest, key, hash, header, header.prev);"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,180,table[index] = created;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,181,} else {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,182,"created = new Node<K, V>(nearest, key, hash, header, header.prev);"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,183,if (comparison < 0) { // nearest.key is higher
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,184,nearest.left = created;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,185,"} else { // comparison > 0, nearest.key is lower"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,186,nearest.right = created;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,188,"rebalance(nearest, true);"
False,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,170,"/ The key doesn't exist in this tree. Create it here, then rebalance."
False,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,171,f (create) {
False,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,172,"ode<K, V> created = new Node<K, V>(nearest, key, hash, header, header.prev);"
False,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,173,f (comparison < 0) { // nearest.key is higher
False,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,174,earest.left = created;
False,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,175," else { // comparison > 0, nearest.key is lower"
False,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,176,earest.right = created;
False,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,178,ize++;
False,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,179,odCount++;
False,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,180,"ebalance(nearest, true);"
False,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,181,f (size > threshold) {
False,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,182,oubleCapacity();
False,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,184,eturn created;
False,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,185, else {
False,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,186,eturn null;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,191,if (size++ > threshold) {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,192,doubleCapacity();
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,194,modCount++;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,196,return created;
False,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,455,"tatic class Node<K, V> implements Entry<K, V> {"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,463,"static final class Node<K, V> implements Entry<K, V> {"
False,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,573,hile (iterator.hasNext()) {
False,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,574,"ode<K, V> node = iterator.next();"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,581,"for (Node<K, V> node; (node = iterator.next()) != null; ) {"
False,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,589,hile (iterator.hasNext()) {
False,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,590,"ode<K, V> node = iterator.next();"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,596,"for (Node<K, V> node; (node = iterator.next()) != null; ) {"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,623,* <p><strong>Warning:</strong> this iterator is destructive. It clears the
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,624,* parent node of all nodes in the tree. It is an error to make a partial
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,625,* iteration of a tree.
False,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,617,"tatic class AvlIterator<K, V> implements Iterator<Node<K, V>> {"
False,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,618,"rivate final ArrayDeque<Node<K, V>> stack = new ArrayDeque<Node<K, V>>();"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,627,"static class AvlIterator<K, V> {"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,628,"/** This stack is a singly linked list, linked by the 'parent' field. */"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,629,"private Node<K, V> stackTop;"
False,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,621,tack.clear();
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,632,"Node<K, V> stackTop = null;"
False,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,623,tack.add(n);
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,634,n.parent = stackTop;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,635,stackTop = n; // Stack push.
False,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,627,ublic boolean hasNext() {
False,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,628,eturn !stack.isEmpty();
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,637,this.stackTop = stackTop;
False,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,632,"ode<K, V> node = stack.removeLast();"
False,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,633,"or (Node<K, V> n = node.right; n != null; n = n.left) {"
False,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,634,tack.add(n);
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,641,"Node<K, V> stackTop = this.stackTop;"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,642,if (stackTop == null) {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,643,return null;
False,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,636,eturn node;
False,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,639,ublic void remove() {
False,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,640,hrow new UnsupportedOperationException();
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,645,"Node<K, V> result = stackTop;"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,646,stackTop = result.parent;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,647,result.parent = null;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,648,"for (Node<K, V> n = result.right; n != null; n = n.left) {"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,649,n.parent = stackTop;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,650,stackTop = n; // Stack push.
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,652,this.stackTop = stackTop;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,653,return result;
False,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,664,"rivate final ArrayDeque<Node<K, V>> stack = new ArrayDeque<Node<K, V>>();"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,676,"/** This stack is a singly linked list, linked by the 'parent' field. */"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,677,"private Node<K, V> stack;"
False,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,675,tack.clear();
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,688,stack = null;
False,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,689,tack.addLast(node);
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,702,node.parent = stack;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,703,stack = node; // Stack push.
False,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,712,nt centerHeight = 2;
False,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,715,"ode<K, V> right = stack.removeLast();"
False,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,716,"ode<K, V> center = stack.removeLast();"
False,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,717,"ode<K, V> left = stack.removeLast();"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,728,"// Pop right, center and left, then make center the top of the stack."
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,729,"Node<K, V> right = stack;"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,730,"Node<K, V> center = right.parent;"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,731,"Node<K, V> left = center.parent;"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,732,center.parent = left.parent;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,733,stack = center;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,734,// Construct a tree.
False,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,719,eft.parent = center;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,737,center.height = right.height + 1;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,738,left.parent = center;
False,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,722,enter.height = centerHeight;
False,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,723,tack.addLast(center);
False,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,725,"ode<K, V> right = stack.removeLast();"
False,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,726,"ode<K, V> center = stack.removeLast();"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,741,"// Pop right and center, then make center the top of the stack."
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,742,"Node<K, V> right = stack;"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,743,"Node<K, V> center = right.parent;"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,744,stack = center;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,745,// Construct a tree with no left child.
False,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,728,enter.height = centerHeight;
False,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,729,enter.height++;
False,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,730,tack.addLast(center);
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,747,center.height = right.height + 1;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,748,right.parent = center;
False,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,735,enterHeight++;
False,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,740,f (stack.size() != 1) {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,757,"Node<K, V> stackTop = this.stack;"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,758,if (stackTop.parent != null) {
False,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,743,eturn stack.getLast();
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,761,return stackTop;
False,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,809,inkedTreeMap.this.clear();
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,827,LinkedHashTreeMap.this.clear();
False,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,835,inkedTreeMap.this.clear();
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java,853,LinkedHashTreeMap.this.clear();
False,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java,19,mport com.google.gson.internal.LinkedTreeMap.AvlBuilder;
False,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java,20,mport com.google.gson.internal.LinkedTreeMap.AvlIterator;
False,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java,21,mport com.google.gson.internal.LinkedTreeMap.Node;
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java,19,import com.google.gson.internal.LinkedHashTreeMap.AvlBuilder;
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java,20,import com.google.gson.internal.LinkedHashTreeMap.AvlIterator;
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java,21,import com.google.gson.internal.LinkedHashTreeMap.Node;
False,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java,28,ublic final class LinkedTreeMapTest extends TestCase {
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java,28,public final class LinkedHashTreeMapTest extends TestCase {
False,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java,30,"inkedTreeMap<String, String> map = new LinkedTreeMap<String, String>();"
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java,30,"LinkedHashTreeMap<String, String> map = new LinkedHashTreeMap<String, String>();"
False,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java,39,"inkedTreeMap<String, String> map = new LinkedTreeMap<String, String>();"
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java,39,"LinkedHashTreeMap<String, String> map = new LinkedHashTreeMap<String, String>();"
False,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java,52,"inkedTreeMap<String, String> map = new LinkedTreeMap<String, String>();"
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java,52,"LinkedHashTreeMap<String, String> map = new LinkedHashTreeMap<String, String>();"
False,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java,61,"inkedTreeMap<String, String> map = new LinkedTreeMap<String, String>();"
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java,61,"LinkedHashTreeMap<String, String> map = new LinkedHashTreeMap<String, String>();"
False,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java,66,ublic void testContainsNonComparableKeyThrows() {
False,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java,67,"inkedTreeMap<String, String> map = new LinkedTreeMap<String, String>();"
False,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java,68,"ap.put(""a"", ""android"");"
False,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java,69,ry {
False,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java,70,ap.containsKey(new Object());
False,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java,71,ail();
False,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java,72, catch (ClassCastException expected) {
False,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java,77,"inkedTreeMap<String, String> map = new LinkedTreeMap<String, String>();"
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java,67,"LinkedHashTreeMap<String, String> map = new LinkedHashTreeMap<String, String>();"
False,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java,103,ssertTrue(iterator.hasNext());
False,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java,106,ssertFalse(iterator.hasNext());
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java,95,assertNull(iterator.next());
False,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java,139,"ssertEquals(expected, toString(avlBuilder.root()));"
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java,128,"assertTree(expected, avlBuilder.root());"
False,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java,147,"ode<String, String>[] newTable = LinkedTreeMap.doubleCapacity(oldTable);"
False,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java,148,"ssertEquals(""(b d f)"", toString(newTable[0])); // Even hash codes!"
False,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java,149,"ssertEquals(""(a c (. e g))"", toString(newTable[1])); // Odd hash codes!"
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java,136,"Node<String, String>[] newTable = LinkedHashTreeMap.doubleCapacity(oldTable);"
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java,137,"assertTree(""(b d f)"", newTable[0]); // Even hash codes!"
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java,138,"assertTree(""(a c (. e g))"", newTable[1]); // Odd hash codes!"
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java,140,"for (Node<?, ?> node : newTable) {"
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java,141,if (node != null) {
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java,142,assertConsistent(node);
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java,167,"private void assertTree(String expected, Node<?, ?> root) {"
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java,168,"assertEquals(expected, toString(root));"
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java,169,assertConsistent(root);
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java,172,"private void assertConsistent(Node<?, ?> node) {"
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java,173,int leftHeight = 0;
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java,174,if (node.left != null) {
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java,175,assertConsistent(node.left);
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java,176,"assertSame(node, node.left.parent);"
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java,177,leftHeight = node.left.height;
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java,179,int rightHeight = 0;
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java,180,if (node.right != null) {
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java,181,assertConsistent(node.right);
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java,182,"assertSame(node, node.right.parent);"
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java,183,rightHeight = node.right.height;
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java,185,if (node.parent != null) {
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java,186,assertTrue(node.parent.left == node || node.parent.right == node);
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java,188,"if (Math.max(leftHeight, rightHeight) + 1 != node.height) {"
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java,189,fail();

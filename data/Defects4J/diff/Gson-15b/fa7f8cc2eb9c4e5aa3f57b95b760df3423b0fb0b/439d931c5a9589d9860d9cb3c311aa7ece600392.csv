is_addition,old_file_path,new_file_path,line_num,content
True,gson/src/test/java/com/google/gson/reflect/reflect/TypeTokenTest.java,gson/src/test/java/com/google/gson/reflect/reflect/TypeTokenTest.java,2,* Copyright (C) 2010 Google Inc.
True,gson/src/test/java/com/google/gson/reflect/reflect/TypeTokenTest.java,gson/src/test/java/com/google/gson/reflect/reflect/TypeTokenTest.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/test/java/com/google/gson/reflect/reflect/TypeTokenTest.java,gson/src/test/java/com/google/gson/reflect/reflect/TypeTokenTest.java,5,* you may not use this file except in compliance with the License.
True,gson/src/test/java/com/google/gson/reflect/reflect/TypeTokenTest.java,gson/src/test/java/com/google/gson/reflect/reflect/TypeTokenTest.java,6,* You may obtain a copy of the License at
True,gson/src/test/java/com/google/gson/reflect/reflect/TypeTokenTest.java,gson/src/test/java/com/google/gson/reflect/reflect/TypeTokenTest.java,8,* http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/test/java/com/google/gson/reflect/reflect/TypeTokenTest.java,gson/src/test/java/com/google/gson/reflect/reflect/TypeTokenTest.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/test/java/com/google/gson/reflect/reflect/TypeTokenTest.java,gson/src/test/java/com/google/gson/reflect/reflect/TypeTokenTest.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/test/java/com/google/gson/reflect/reflect/TypeTokenTest.java,gson/src/test/java/com/google/gson/reflect/reflect/TypeTokenTest.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/test/java/com/google/gson/reflect/reflect/TypeTokenTest.java,gson/src/test/java/com/google/gson/reflect/reflect/TypeTokenTest.java,13,* See the License for the specific language governing permissions and
True,gson/src/test/java/com/google/gson/reflect/reflect/TypeTokenTest.java,gson/src/test/java/com/google/gson/reflect/reflect/TypeTokenTest.java,14,* limitations under the License.
True,gson/src/test/java/com/google/gson/reflect/reflect/TypeTokenTest.java,gson/src/test/java/com/google/gson/reflect/reflect/TypeTokenTest.java,17,package com.google.gson.reflect;
True,gson/src/test/java/com/google/gson/reflect/reflect/TypeTokenTest.java,gson/src/test/java/com/google/gson/reflect/reflect/TypeTokenTest.java,19,import java.lang.reflect.Type;
True,gson/src/test/java/com/google/gson/reflect/reflect/TypeTokenTest.java,gson/src/test/java/com/google/gson/reflect/reflect/TypeTokenTest.java,20,import java.util.ArrayList;
True,gson/src/test/java/com/google/gson/reflect/reflect/TypeTokenTest.java,gson/src/test/java/com/google/gson/reflect/reflect/TypeTokenTest.java,21,import java.util.List;
True,gson/src/test/java/com/google/gson/reflect/reflect/TypeTokenTest.java,gson/src/test/java/com/google/gson/reflect/reflect/TypeTokenTest.java,22,import java.util.RandomAccess;
True,gson/src/test/java/com/google/gson/reflect/reflect/TypeTokenTest.java,gson/src/test/java/com/google/gson/reflect/reflect/TypeTokenTest.java,23,import java.util.Set;
True,gson/src/test/java/com/google/gson/reflect/reflect/TypeTokenTest.java,gson/src/test/java/com/google/gson/reflect/reflect/TypeTokenTest.java,24,import junit.framework.TestCase;
True,gson/src/test/java/com/google/gson/reflect/reflect/TypeTokenTest.java,gson/src/test/java/com/google/gson/reflect/reflect/TypeTokenTest.java,27,* @author Jesse Wilson
True,gson/src/test/java/com/google/gson/reflect/reflect/TypeTokenTest.java,gson/src/test/java/com/google/gson/reflect/reflect/TypeTokenTest.java,29,"@SuppressWarnings({""UnusedDeclaration"", ""deprecation""})"
True,gson/src/test/java/com/google/gson/reflect/reflect/TypeTokenTest.java,gson/src/test/java/com/google/gson/reflect/reflect/TypeTokenTest.java,30,public final class TypeTokenTest extends TestCase {
True,gson/src/test/java/com/google/gson/reflect/reflect/TypeTokenTest.java,gson/src/test/java/com/google/gson/reflect/reflect/TypeTokenTest.java,32,List<Integer> listOfInteger = null;
True,gson/src/test/java/com/google/gson/reflect/reflect/TypeTokenTest.java,gson/src/test/java/com/google/gson/reflect/reflect/TypeTokenTest.java,33,List<Number> listOfNumber = null;
True,gson/src/test/java/com/google/gson/reflect/reflect/TypeTokenTest.java,gson/src/test/java/com/google/gson/reflect/reflect/TypeTokenTest.java,34,List<String> listOfString = null;
True,gson/src/test/java/com/google/gson/reflect/reflect/TypeTokenTest.java,gson/src/test/java/com/google/gson/reflect/reflect/TypeTokenTest.java,35,List<?> listOfUnknown = null;
True,gson/src/test/java/com/google/gson/reflect/reflect/TypeTokenTest.java,gson/src/test/java/com/google/gson/reflect/reflect/TypeTokenTest.java,36,List<Set<String>> listOfSetOfString = null;
True,gson/src/test/java/com/google/gson/reflect/reflect/TypeTokenTest.java,gson/src/test/java/com/google/gson/reflect/reflect/TypeTokenTest.java,37,List<Set<?>> listOfSetOfUnknown = null;
True,gson/src/test/java/com/google/gson/reflect/reflect/TypeTokenTest.java,gson/src/test/java/com/google/gson/reflect/reflect/TypeTokenTest.java,39,public void testIsAssignableFromRawTypes() {
True,gson/src/test/java/com/google/gson/reflect/reflect/TypeTokenTest.java,gson/src/test/java/com/google/gson/reflect/reflect/TypeTokenTest.java,40,assertTrue(TypeToken.get(Object.class).isAssignableFrom(String.class));
True,gson/src/test/java/com/google/gson/reflect/reflect/TypeTokenTest.java,gson/src/test/java/com/google/gson/reflect/reflect/TypeTokenTest.java,41,assertFalse(TypeToken.get(String.class).isAssignableFrom(Object.class));
True,gson/src/test/java/com/google/gson/reflect/reflect/TypeTokenTest.java,gson/src/test/java/com/google/gson/reflect/reflect/TypeTokenTest.java,42,assertTrue(TypeToken.get(RandomAccess.class).isAssignableFrom(ArrayList.class));
True,gson/src/test/java/com/google/gson/reflect/reflect/TypeTokenTest.java,gson/src/test/java/com/google/gson/reflect/reflect/TypeTokenTest.java,43,assertFalse(TypeToken.get(ArrayList.class).isAssignableFrom(RandomAccess.class));
True,gson/src/test/java/com/google/gson/reflect/reflect/TypeTokenTest.java,gson/src/test/java/com/google/gson/reflect/reflect/TypeTokenTest.java,46,public void testIsAssignableFromWithTypeParameters() throws Exception {
True,gson/src/test/java/com/google/gson/reflect/reflect/TypeTokenTest.java,gson/src/test/java/com/google/gson/reflect/reflect/TypeTokenTest.java,47,"Type a = getClass().getDeclaredField(""listOfInteger"").getGenericType();"
True,gson/src/test/java/com/google/gson/reflect/reflect/TypeTokenTest.java,gson/src/test/java/com/google/gson/reflect/reflect/TypeTokenTest.java,48,"Type b = getClass().getDeclaredField(""listOfNumber"").getGenericType();"
True,gson/src/test/java/com/google/gson/reflect/reflect/TypeTokenTest.java,gson/src/test/java/com/google/gson/reflect/reflect/TypeTokenTest.java,49,assertTrue(TypeToken.get(a).isAssignableFrom(a));
True,gson/src/test/java/com/google/gson/reflect/reflect/TypeTokenTest.java,gson/src/test/java/com/google/gson/reflect/reflect/TypeTokenTest.java,50,assertTrue(TypeToken.get(b).isAssignableFrom(b));
True,gson/src/test/java/com/google/gson/reflect/reflect/TypeTokenTest.java,gson/src/test/java/com/google/gson/reflect/reflect/TypeTokenTest.java,52,// listOfInteger = listOfNumber; // doesn't compile; must be false
True,gson/src/test/java/com/google/gson/reflect/reflect/TypeTokenTest.java,gson/src/test/java/com/google/gson/reflect/reflect/TypeTokenTest.java,53,assertFalse(TypeToken.get(a).isAssignableFrom(b));
True,gson/src/test/java/com/google/gson/reflect/reflect/TypeTokenTest.java,gson/src/test/java/com/google/gson/reflect/reflect/TypeTokenTest.java,54,// listOfNumber = listOfInteger; // doesn't compile; must be false
True,gson/src/test/java/com/google/gson/reflect/reflect/TypeTokenTest.java,gson/src/test/java/com/google/gson/reflect/reflect/TypeTokenTest.java,55,assertFalse(TypeToken.get(b).isAssignableFrom(a));
True,gson/src/test/java/com/google/gson/reflect/reflect/TypeTokenTest.java,gson/src/test/java/com/google/gson/reflect/reflect/TypeTokenTest.java,58,public void testIsAssignableFromWithBasicWildcards() throws Exception {
True,gson/src/test/java/com/google/gson/reflect/reflect/TypeTokenTest.java,gson/src/test/java/com/google/gson/reflect/reflect/TypeTokenTest.java,59,"Type a = getClass().getDeclaredField(""listOfString"").getGenericType();"
True,gson/src/test/java/com/google/gson/reflect/reflect/TypeTokenTest.java,gson/src/test/java/com/google/gson/reflect/reflect/TypeTokenTest.java,60,"Type b = getClass().getDeclaredField(""listOfUnknown"").getGenericType();"
True,gson/src/test/java/com/google/gson/reflect/reflect/TypeTokenTest.java,gson/src/test/java/com/google/gson/reflect/reflect/TypeTokenTest.java,61,assertTrue(TypeToken.get(a).isAssignableFrom(a));
True,gson/src/test/java/com/google/gson/reflect/reflect/TypeTokenTest.java,gson/src/test/java/com/google/gson/reflect/reflect/TypeTokenTest.java,62,assertTrue(TypeToken.get(b).isAssignableFrom(b));
True,gson/src/test/java/com/google/gson/reflect/reflect/TypeTokenTest.java,gson/src/test/java/com/google/gson/reflect/reflect/TypeTokenTest.java,64,// listOfString = listOfUnknown  // doesn't compile; must be false
True,gson/src/test/java/com/google/gson/reflect/reflect/TypeTokenTest.java,gson/src/test/java/com/google/gson/reflect/reflect/TypeTokenTest.java,65,assertFalse(TypeToken.get(a).isAssignableFrom(b));
True,gson/src/test/java/com/google/gson/reflect/reflect/TypeTokenTest.java,gson/src/test/java/com/google/gson/reflect/reflect/TypeTokenTest.java,66,listOfUnknown = listOfString; // compiles; must be true
True,gson/src/test/java/com/google/gson/reflect/reflect/TypeTokenTest.java,gson/src/test/java/com/google/gson/reflect/reflect/TypeTokenTest.java,67,assertTrue(TypeToken.get(b).isAssignableFrom(a));
True,gson/src/test/java/com/google/gson/reflect/reflect/TypeTokenTest.java,gson/src/test/java/com/google/gson/reflect/reflect/TypeTokenTest.java,70,public void testIsAssignableFromWithNestedWildcards() throws Exception {
True,gson/src/test/java/com/google/gson/reflect/reflect/TypeTokenTest.java,gson/src/test/java/com/google/gson/reflect/reflect/TypeTokenTest.java,71,"Type a = getClass().getDeclaredField(""listOfSetOfString"").getGenericType();"
True,gson/src/test/java/com/google/gson/reflect/reflect/TypeTokenTest.java,gson/src/test/java/com/google/gson/reflect/reflect/TypeTokenTest.java,72,"Type b = getClass().getDeclaredField(""listOfSetOfUnknown"").getGenericType();"
True,gson/src/test/java/com/google/gson/reflect/reflect/TypeTokenTest.java,gson/src/test/java/com/google/gson/reflect/reflect/TypeTokenTest.java,73,assertTrue(TypeToken.get(a).isAssignableFrom(a));
True,gson/src/test/java/com/google/gson/reflect/reflect/TypeTokenTest.java,gson/src/test/java/com/google/gson/reflect/reflect/TypeTokenTest.java,74,assertTrue(TypeToken.get(b).isAssignableFrom(b));
True,gson/src/test/java/com/google/gson/reflect/reflect/TypeTokenTest.java,gson/src/test/java/com/google/gson/reflect/reflect/TypeTokenTest.java,76,// listOfSetOfString = listOfSetOfUnknown; // doesn't compile; must be false
True,gson/src/test/java/com/google/gson/reflect/reflect/TypeTokenTest.java,gson/src/test/java/com/google/gson/reflect/reflect/TypeTokenTest.java,77,assertFalse(TypeToken.get(a).isAssignableFrom(b));
True,gson/src/test/java/com/google/gson/reflect/reflect/TypeTokenTest.java,gson/src/test/java/com/google/gson/reflect/reflect/TypeTokenTest.java,78,// listOfSetOfUnknown = listOfSetOfString; // doesn't compile; must be false
True,gson/src/test/java/com/google/gson/reflect/reflect/TypeTokenTest.java,gson/src/test/java/com/google/gson/reflect/reflect/TypeTokenTest.java,79,assertFalse(TypeToken.get(b).isAssignableFrom(a));

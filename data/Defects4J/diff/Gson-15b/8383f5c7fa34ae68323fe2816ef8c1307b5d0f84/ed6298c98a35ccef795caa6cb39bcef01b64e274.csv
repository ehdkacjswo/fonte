is_addition,old_file_path,new_file_path,line_num,content
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,104,static final boolean DEFAULT_LENIENT = false;
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,105,static final boolean DEFAULT_PRETTY_PRINT = false;
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,106,static final boolean DEFAULT_ESCAPE_HTML = true;
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,107,static final boolean DEFAULT_SERIALIZE_NULLS = false;
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,108,static final boolean DEFAULT_COMPLEX_MAP_KEYS = false;
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,109,static final boolean DEFAULT_SPECIALIZE_FLOAT_VALUES = false;
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,133,private final boolean lenient;
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,180,"ollections.<Type, InstanceCreator<?>>emptyMap(), false, false, DEFAULT_JSON_NON_EXECUTABLE,"
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,181,"rue, false, false, LongSerializationPolicy.DEFAULT,"
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,182,ollections.<TypeAdapterFactory>emptyList());
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,187,"Collections.<Type, InstanceCreator<?>>emptyMap(), DEFAULT_SERIALIZE_NULLS,"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,188,"DEFAULT_COMPLEX_MAP_KEYS, DEFAULT_JSON_NON_EXECUTABLE, DEFAULT_ESCAPE_HTML,"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,189,"DEFAULT_PRETTY_PRINT, DEFAULT_LENIENT, DEFAULT_SPECIALIZE_FLOAT_VALUES,"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,190,"LongSerializationPolicy.DEFAULT, Collections.<TypeAdapterFactory>emptyList());"
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,188,"oolean prettyPrinting, boolean serializeSpecialFloatingPointValues,"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,196,"boolean prettyPrinting, boolean lenient, boolean serializeSpecialFloatingPointValues,"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,204,this.lenient = lenient;
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,717,* Returns a new JSON writer configured for the settings on this Gson instance.
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,719,public JsonReader newJsonReader(Reader reader) {
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,720,JsonReader jsonReader = new JsonReader(reader);
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,721,jsonReader.setLenient(lenient);
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,722,return jsonReader;
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,798,sonReader jsonReader = new JsonReader(json);
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,816,JsonReader jsonReader = newJsonReader(json);
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,825,sonReader jsonReader = new JsonReader(json);
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,843,JsonReader jsonReader = newJsonReader(json);
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,19,import com.google.gson.stream.JsonReader;
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,35,import static com.google.gson.Gson.DEFAULT_COMPLEX_MAP_KEYS;
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,36,import static com.google.gson.Gson.DEFAULT_ESCAPE_HTML;
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,37,import static com.google.gson.Gson.DEFAULT_JSON_NON_EXECUTABLE;
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,38,import static com.google.gson.Gson.DEFAULT_LENIENT;
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,39,import static com.google.gson.Gson.DEFAULT_PRETTY_PRINT;
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,40,import static com.google.gson.Gson.DEFAULT_SERIALIZE_NULLS;
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,41,import static com.google.gson.Gson.DEFAULT_SPECIALIZE_FLOAT_VALUES;
False,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,77,rivate boolean serializeNulls;
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,86,private boolean serializeNulls = DEFAULT_SERIALIZE_NULLS;
False,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,81,rivate boolean complexMapKeySerialization;
False,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,82,rivate boolean serializeSpecialFloatingPointValues;
False,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,83,rivate boolean escapeHtmlChars = true;
False,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,84,rivate boolean prettyPrinting;
False,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,85,rivate boolean generateNonExecutableJson;
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,90,private boolean complexMapKeySerialization = DEFAULT_COMPLEX_MAP_KEYS;
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,91,private boolean serializeSpecialFloatingPointValues = DEFAULT_SPECIALIZE_FLOAT_VALUES;
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,92,private boolean escapeHtmlChars = DEFAULT_ESCAPE_HTML;
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,93,private boolean prettyPrinting = DEFAULT_PRETTY_PRINT;
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,94,private boolean generateNonExecutableJson = DEFAULT_JSON_NON_EXECUTABLE;
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,95,private boolean lenient = DEFAULT_LENIENT;
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,365,"* By default, Gson is strict and only accepts JSON as specified by"
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,366,"* <a href=""http://www.ietf.org/rfc/rfc4627.txt"">RFC 4627</a>. This option makes the parser"
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,367,* liberal in what it accepts.
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,369,"* @return a reference to this {@code GsonBuilder} object to fulfill the ""Builder"" pattern"
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,370,* @see JsonReader#setLenient(boolean)
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,372,public GsonBuilder setLenient() {
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,373,lenient = true;
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,374,return this;
False,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,547,"enerateNonExecutableJson, escapeHtmlChars, prettyPrinting,"
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,570,"generateNonExecutableJson, escapeHtmlChars, prettyPrinting, lenient,"
False,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,165," Returns an iterator to navigate the elemetns of the array. Since the array is an ordered list,"
True,gson/src/main/java/com/google/gson/JsonArray.java,gson/src/main/java/com/google/gson/JsonArray.java,165,"* Returns an iterator to navigate the elements of the array. Since the array is an ordered list,"
True,gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java,54,final TypeAdapter<?> typeAdapter;
False,gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java,55,lass<TypeAdapter<?>> typeAdapter = (Class<TypeAdapter<?>>) value;
False,gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java,56,eturn constructorConstructor.get(TypeToken.get(typeAdapter)).construct();
False,gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java,58,f (TypeAdapterFactory.class.isAssignableFrom(value)) {
False,gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java,59,lass<TypeAdapterFactory> typeAdapterFactory = (Class<TypeAdapterFactory>) value;
False,gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java,60,eturn constructorConstructor.get(TypeToken.get(typeAdapterFactory))
True,gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java,56,Class<TypeAdapter<?>> typeAdapterClass = (Class<TypeAdapter<?>>) value;
True,gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java,57,typeAdapter = constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();
True,gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java,58,} else if (TypeAdapterFactory.class.isAssignableFrom(value)) {
True,gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java,59,Class<TypeAdapterFactory> typeAdapterFactory = (Class<TypeAdapterFactory>) value;
True,gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java,60,typeAdapter = constructorConstructor.get(TypeToken.get(typeAdapterFactory))
True,gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java,63,} else {
True,gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java,64,throw new IllegalArgumentException(
True,gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java,65,"""@JsonAdapter value must be TypeAdapter or TypeAdapterFactory reference."");"
False,gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java,65,hrow new IllegalArgumentException(
False,gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java,66,"@JsonAdapter value must be TypeAdapter or TypeAdapterFactory reference."");"
True,gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java,68,return typeAdapter.nullSafe();
False,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,27," Reads a JSON (<a href=""http://www.ietf.org/rfc/rfc4627.txt"">RFC 4627</a>)"
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,27,"* Reads a JSON (<a href=""http://www.ietf.org/rfc/rfc7159.txt"">RFC 7159</a>)"
False,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,297," Configure this parser to be  be liberal in what it accepts. By default,"
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,297,"* Configure this parser to be liberal in what it accepts. By default,"
False,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,574,f (stackSize == 1) {
False,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,575,heckLenient();
False,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,586,f (stackSize == 1) {
False,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,587,heckLenient(); // Top-level value isn't an array or an object.
False,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,33," Writes a JSON (<a href=""http://www.ietf.org/rfc/rfc4627.txt"">RFC 4627</a>)"
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,33,"* Writes a JSON (<a href=""http://www.ietf.org/rfc/rfc7159.txt"">RFC 7159</a>)"
False,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,133," From RFC 4627, ""All Unicode characters may be placed within the"
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,133,"* From RFC 7159, ""All Unicode characters may be placed within the"
False,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,225," href=""http://www.ietf.org/rfc/rfc4627.txt"">RFC 4627</a>. Setting the writer"
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,225,"* href=""http://www.ietf.org/rfc/rfc7159.txt"">RFC 7159</a>. Setting the writer"
False,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,325,eforeValue(true);
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,325,beforeValue();
False,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,418,eforeValue(false);
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,418,beforeValue();
False,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,435,eforeValue(false);
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,435,beforeValue();
False,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,454,eforeValue(false);
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,454,beforeValue();
False,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,466,eforeValue(false);
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,466,beforeValue();
False,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,483,eforeValue(false);
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,483,beforeValue();
False,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,495,eforeValue(false);
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,495,beforeValue();
False,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,518,eforeValue(false);
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,518,beforeValue();
False,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,612," @param root true if the value is a new array or object, the two values"
False,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,613,     permitted as top-level elements.
False,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,616,rivate void beforeValue(boolean root) throws IOException {
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,613,private void beforeValue() throws IOException {
False,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,625,f (!lenient && !root) {
False,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,626,hrow new IllegalStateException(
False,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,627,"JSON must start with an array or an object."");"
True,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnClassesTest.java,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnClassesTest.java,136,public void testNullSafeObjectFromJson() {
True,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnClassesTest.java,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnClassesTest.java,137,Gson gson = new Gson();
True,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnClassesTest.java,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnClassesTest.java,138,"NullableClass fromJson = gson.fromJson(""null"", NullableClass.class);"
True,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnClassesTest.java,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnClassesTest.java,139,assertNull(fromJson);
True,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnClassesTest.java,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnClassesTest.java,224,@JsonAdapter(value = NullableClassJsonAdapter.class)
True,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnClassesTest.java,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnClassesTest.java,225,private static class NullableClass {
True,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnClassesTest.java,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnClassesTest.java,228,private static class NullableClassJsonAdapter extends TypeAdapter<NullableClass> {
True,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnClassesTest.java,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnClassesTest.java,229,@Override
True,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnClassesTest.java,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnClassesTest.java,230,"public void write(JsonWriter out, NullableClass value) throws IOException {"
True,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnClassesTest.java,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnClassesTest.java,231,"out.value(""nullable"");"
True,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnClassesTest.java,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnClassesTest.java,234,@Override
True,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnClassesTest.java,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnClassesTest.java,235,public NullableClass read(JsonReader in) throws IOException {
True,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnClassesTest.java,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnClassesTest.java,236,in.nextString();
True,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnClassesTest.java,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnClassesTest.java,237,return new NullableClass();
True,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java,204,public void testJsonAdapterWrappedInNullSafeAsRequested() {
True,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java,205,Gson gson = new Gson();
True,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java,206,"String fromJson = ""{'part':null}"";"
True,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java,208,"GadgetWithOptionalPart gadget = gson.fromJson(fromJson, GadgetWithOptionalPart.class);"
True,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java,209,assertNull(gadget.part);
True,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java,211,String toJson = gson.toJson(gadget);
True,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java,212,"assertFalse(toJson.contains(""PartJsonFieldAnnotationAdapter""));"
True,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java,215,private static final class GadgetWithOptionalPart {
True,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java,216,@JsonAdapter(value = PartJsonFieldAnnotationAdapter.class)
True,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java,217,final Part part;
True,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java,219,private GadgetWithOptionalPart(Part part) {
True,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java,gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java,220,this.part = part;
True,gson/src/test/java/com/google/gson/functional/LeniencyTest.java,gson/src/test/java/com/google/gson/functional/LeniencyTest.java,2,* Copyright (C) 2016 The Gson Authors
True,gson/src/test/java/com/google/gson/functional/LeniencyTest.java,gson/src/test/java/com/google/gson/functional/LeniencyTest.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/test/java/com/google/gson/functional/LeniencyTest.java,gson/src/test/java/com/google/gson/functional/LeniencyTest.java,5,* you may not use this file except in compliance with the License.
True,gson/src/test/java/com/google/gson/functional/LeniencyTest.java,gson/src/test/java/com/google/gson/functional/LeniencyTest.java,6,* You may obtain a copy of the License at
True,gson/src/test/java/com/google/gson/functional/LeniencyTest.java,gson/src/test/java/com/google/gson/functional/LeniencyTest.java,8,* http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/test/java/com/google/gson/functional/LeniencyTest.java,gson/src/test/java/com/google/gson/functional/LeniencyTest.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/test/java/com/google/gson/functional/LeniencyTest.java,gson/src/test/java/com/google/gson/functional/LeniencyTest.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/test/java/com/google/gson/functional/LeniencyTest.java,gson/src/test/java/com/google/gson/functional/LeniencyTest.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/test/java/com/google/gson/functional/LeniencyTest.java,gson/src/test/java/com/google/gson/functional/LeniencyTest.java,13,* See the License for the specific language governing permissions and
True,gson/src/test/java/com/google/gson/functional/LeniencyTest.java,gson/src/test/java/com/google/gson/functional/LeniencyTest.java,14,* limitations under the License.
True,gson/src/test/java/com/google/gson/functional/LeniencyTest.java,gson/src/test/java/com/google/gson/functional/LeniencyTest.java,16,package com.google.gson.functional;
True,gson/src/test/java/com/google/gson/functional/LeniencyTest.java,gson/src/test/java/com/google/gson/functional/LeniencyTest.java,18,import com.google.gson.Gson;
True,gson/src/test/java/com/google/gson/functional/LeniencyTest.java,gson/src/test/java/com/google/gson/functional/LeniencyTest.java,19,import com.google.gson.GsonBuilder;
True,gson/src/test/java/com/google/gson/functional/LeniencyTest.java,gson/src/test/java/com/google/gson/functional/LeniencyTest.java,20,import com.google.gson.reflect.TypeToken;
True,gson/src/test/java/com/google/gson/functional/LeniencyTest.java,gson/src/test/java/com/google/gson/functional/LeniencyTest.java,21,import java.util.List;
True,gson/src/test/java/com/google/gson/functional/LeniencyTest.java,gson/src/test/java/com/google/gson/functional/LeniencyTest.java,22,import junit.framework.TestCase;
True,gson/src/test/java/com/google/gson/functional/LeniencyTest.java,gson/src/test/java/com/google/gson/functional/LeniencyTest.java,24,import static java.util.Collections.singletonList;
True,gson/src/test/java/com/google/gson/functional/LeniencyTest.java,gson/src/test/java/com/google/gson/functional/LeniencyTest.java,27,* Functional tests for leniency option.
True,gson/src/test/java/com/google/gson/functional/LeniencyTest.java,gson/src/test/java/com/google/gson/functional/LeniencyTest.java,29,public class LeniencyTest extends TestCase {
True,gson/src/test/java/com/google/gson/functional/LeniencyTest.java,gson/src/test/java/com/google/gson/functional/LeniencyTest.java,31,private Gson gson;
True,gson/src/test/java/com/google/gson/functional/LeniencyTest.java,gson/src/test/java/com/google/gson/functional/LeniencyTest.java,33,@Override
True,gson/src/test/java/com/google/gson/functional/LeniencyTest.java,gson/src/test/java/com/google/gson/functional/LeniencyTest.java,34,protected void setUp() throws Exception {
True,gson/src/test/java/com/google/gson/functional/LeniencyTest.java,gson/src/test/java/com/google/gson/functional/LeniencyTest.java,35,super.setUp();
True,gson/src/test/java/com/google/gson/functional/LeniencyTest.java,gson/src/test/java/com/google/gson/functional/LeniencyTest.java,36,gson = new GsonBuilder().setLenient().create();
True,gson/src/test/java/com/google/gson/functional/LeniencyTest.java,gson/src/test/java/com/google/gson/functional/LeniencyTest.java,39,public void testLenientFromJson() {
True,gson/src/test/java/com/google/gson/functional/LeniencyTest.java,gson/src/test/java/com/google/gson/functional/LeniencyTest.java,40,"List<String> json = gson.fromJson("""""
True,gson/src/test/java/com/google/gson/functional/LeniencyTest.java,gson/src/test/java/com/google/gson/functional/LeniencyTest.java,41,"+ ""[ # One!\n"""
True,gson/src/test/java/com/google/gson/functional/LeniencyTest.java,gson/src/test/java/com/google/gson/functional/LeniencyTest.java,42,"+ ""  'Hi' #Element!\n"""
True,gson/src/test/java/com/google/gson/functional/LeniencyTest.java,gson/src/test/java/com/google/gson/functional/LeniencyTest.java,43,"+ ""] # Array!"", new TypeToken<List<String>>() {}.getType());"
True,gson/src/test/java/com/google/gson/functional/LeniencyTest.java,gson/src/test/java/com/google/gson/functional/LeniencyTest.java,44,"assertEquals(singletonList(""Hi""), json);"
False,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,198,ublic void testNoTopLevelObject() {
False,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,199,ry {
False,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,200,"ew JsonReader(reader(""true"")).nextBoolean();"
False,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,201,ail();
False,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,202, catch (IOException expected) {
False,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,1230,ublic void testStrictTopLevelString() {
False,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,1231,"sonReader reader = new JsonReader(reader(""\""a\""""));"
False,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,1232,ry {
False,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,1233,eader.nextString();
False,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,1234,ail();
False,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,1235, catch (IOException expected) {
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,1222,public void testTopLevelValueTypes() throws IOException {
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,1223,"JsonReader reader1 = new JsonReader(reader(""true""));"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,1224,assertTrue(reader1.nextBoolean());
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,1225,"assertEquals(JsonToken.END_DOCUMENT, reader1.peek());"
False,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,1239,ublic void testLenientTopLevelString() throws IOException {
False,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,1240,"sonReader reader = new JsonReader(reader(""\""a\""""));"
False,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,1241,eader.setLenient(true);
False,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,1242,"ssertEquals(""a"", reader.nextString());"
False,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,1243,"ssertEquals(JsonToken.END_DOCUMENT, reader.peek());"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,1227,"JsonReader reader2 = new JsonReader(reader(""false""));"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,1228,assertFalse(reader2.nextBoolean());
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,1229,"assertEquals(JsonToken.END_DOCUMENT, reader2.peek());"
False,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,1246,ublic void testStrictTopLevelValueType() {
False,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,1247,"sonReader reader = new JsonReader(reader(""true""));"
False,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,1248,ry {
False,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,1249,eader.nextBoolean();
False,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,1250,ail();
False,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,1251, catch (IOException expected) {
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,1231,"JsonReader reader3 = new JsonReader(reader(""null""));"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,1232,"assertEquals(JsonToken.NULL, reader3.peek());"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,1233,reader3.nextNull();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,1234,"assertEquals(JsonToken.END_DOCUMENT, reader3.peek());"
False,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,1255,ublic void testLenientTopLevelValueType() throws IOException {
False,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,1256,"sonReader reader = new JsonReader(reader(""true""));"
False,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,1257,eader.setLenient(true);
False,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,1258,"ssertEquals(true, reader.nextBoolean());"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,1236,"JsonReader reader4 = new JsonReader(reader(""123""));"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,1237,"assertEquals(123, reader4.nextInt());"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,1238,"assertEquals(JsonToken.END_DOCUMENT, reader4.peek());"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,1240,"JsonReader reader5 = new JsonReader(reader(""123.4""));"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,1241,"assertEquals(123.4, reader5.nextDouble());"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,1242,"assertEquals(JsonToken.END_DOCUMENT, reader5.peek());"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,1244,"JsonReader reader6 = new JsonReader(reader(""\""a\""""));"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,1245,"assertEquals(""a"", reader6.nextString());"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,1246,"assertEquals(JsonToken.END_DOCUMENT, reader6.peek());"
False,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,1261,ublic void testStrictTopLevelValueTypeWithSkipValue() {
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,1249,public void testTopLevelValueTypeWithSkipValue() throws IOException {
False,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,1263,ry {
False,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,1264,eader.skipValue();
False,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,1265,ail();
False,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,1266, catch (IOException expected) {
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,1251,reader.skipValue();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,1252,"assertEquals(JsonToken.END_DOCUMENT, reader.peek());"
False,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,28,ublic void testWrongTopLevelType() throws IOException {
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,28,public void testTopLevelValueTypes() throws IOException {
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,29,StringWriter string1 = new StringWriter();
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,30,JsonWriter writer1 = new JsonWriter(string1);
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,31,writer1.value(true);
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,32,writer1.close();
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,33,"assertEquals(""true"", string1.toString());"
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,35,StringWriter string2 = new StringWriter();
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,36,JsonWriter writer2 = new JsonWriter(string2);
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,37,writer2.nullValue();
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,38,writer2.close();
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,39,"assertEquals(""null"", string2.toString());"
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,41,StringWriter string3 = new StringWriter();
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,42,JsonWriter writer3 = new JsonWriter(string3);
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,43,writer3.value(123);
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,44,writer3.close();
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,45,"assertEquals(""123"", string3.toString());"
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,47,StringWriter string4 = new StringWriter();
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,48,JsonWriter writer4 = new JsonWriter(string4);
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,49,writer4.value(123.4);
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,50,writer4.close();
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,51,"assertEquals(""123.4"", string4.toString());"
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,53,StringWriter string5 = new StringWriter();
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,54,JsonWriter writert = new JsonWriter(string5);
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,55,"writert.value(""a"");"
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,56,writert.close();
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,57,"assertEquals(""\""a\"""", string5.toString());"
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,60,public void testInvalidTopLevelTypes() throws IOException {
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,63,"jsonWriter.name(""hello"");"
False,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,32,"sonWriter.value(""a"");"
True,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,65,"jsonWriter.value(""world"");"

is_addition,old_file_path,new_file_path,line_num,content
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,446,sonElement root = GsonReader.parse(jsonReader);
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,446,JsonElement root = Streams.parse(jsonReader);
False,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,56,eturn GsonReader.parse(jsonReader);
True,gson/src/main/java/com/google/gson/JsonParser.java,gson/src/main/java/com/google/gson/JsonParser.java,56,return Streams.parse(jsonReader);
False,gson/src/main/java/com/google/gson/JsonStreamParser.java,gson/src/main/java/com/google/gson/JsonStreamParser.java,85,eturn GsonReader.parse(parser);
True,gson/src/main/java/com/google/gson/JsonStreamParser.java,gson/src/main/java/com/google/gson/JsonStreamParser.java,85,return Streams.parse(parser);
True,gson/src/main/java/com/google/gson/Streams.java,gson/src/main/java/com/google/gson/Streams.java,2,* Copyright (C) 2010 Google Inc.
True,gson/src/main/java/com/google/gson/Streams.java,gson/src/main/java/com/google/gson/Streams.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/main/java/com/google/gson/Streams.java,gson/src/main/java/com/google/gson/Streams.java,5,* you may not use this file except in compliance with the License.
True,gson/src/main/java/com/google/gson/Streams.java,gson/src/main/java/com/google/gson/Streams.java,6,* You may obtain a copy of the License at
True,gson/src/main/java/com/google/gson/Streams.java,gson/src/main/java/com/google/gson/Streams.java,8,* http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/main/java/com/google/gson/Streams.java,gson/src/main/java/com/google/gson/Streams.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/main/java/com/google/gson/Streams.java,gson/src/main/java/com/google/gson/Streams.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/main/java/com/google/gson/Streams.java,gson/src/main/java/com/google/gson/Streams.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/main/java/com/google/gson/Streams.java,gson/src/main/java/com/google/gson/Streams.java,13,* See the License for the specific language governing permissions and
True,gson/src/main/java/com/google/gson/Streams.java,gson/src/main/java/com/google/gson/Streams.java,14,* limitations under the License.
True,gson/src/main/java/com/google/gson/Streams.java,gson/src/main/java/com/google/gson/Streams.java,17,package com.google.gson;
True,gson/src/main/java/com/google/gson/Streams.java,gson/src/main/java/com/google/gson/Streams.java,19,import com.google.gson.stream.JsonReader;
True,gson/src/main/java/com/google/gson/Streams.java,gson/src/main/java/com/google/gson/Streams.java,20,import com.google.gson.stream.JsonWriter;
True,gson/src/main/java/com/google/gson/Streams.java,gson/src/main/java/com/google/gson/Streams.java,21,import java.io.EOFException;
True,gson/src/main/java/com/google/gson/Streams.java,gson/src/main/java/com/google/gson/Streams.java,22,import java.io.IOException;
True,gson/src/main/java/com/google/gson/Streams.java,gson/src/main/java/com/google/gson/Streams.java,23,import java.io.Writer;
True,gson/src/main/java/com/google/gson/Streams.java,gson/src/main/java/com/google/gson/Streams.java,24,import java.util.Map;
True,gson/src/main/java/com/google/gson/Streams.java,gson/src/main/java/com/google/gson/Streams.java,27,* Reads and writes GSON parse trees over streams.
True,gson/src/main/java/com/google/gson/Streams.java,gson/src/main/java/com/google/gson/Streams.java,29,final class Streams {
True,gson/src/main/java/com/google/gson/Streams.java,gson/src/main/java/com/google/gson/Streams.java,32,* Takes a reader in any state and returns the next value as a JsonElement.
True,gson/src/main/java/com/google/gson/Streams.java,gson/src/main/java/com/google/gson/Streams.java,34,static JsonElement parse(JsonReader reader) throws JsonParseException {
True,gson/src/main/java/com/google/gson/Streams.java,gson/src/main/java/com/google/gson/Streams.java,35,try {
True,gson/src/main/java/com/google/gson/Streams.java,gson/src/main/java/com/google/gson/Streams.java,36,switch (reader.peek()) {
True,gson/src/main/java/com/google/gson/Streams.java,gson/src/main/java/com/google/gson/Streams.java,37,case STRING:
True,gson/src/main/java/com/google/gson/Streams.java,gson/src/main/java/com/google/gson/Streams.java,38,return new JsonPrimitive(reader.nextString());
True,gson/src/main/java/com/google/gson/Streams.java,gson/src/main/java/com/google/gson/Streams.java,39,case NUMBER:
True,gson/src/main/java/com/google/gson/Streams.java,gson/src/main/java/com/google/gson/Streams.java,40,String number = reader.nextString();
True,gson/src/main/java/com/google/gson/Streams.java,gson/src/main/java/com/google/gson/Streams.java,41,return new JsonPrimitive(JsonPrimitive.stringToNumber(number));
True,gson/src/main/java/com/google/gson/Streams.java,gson/src/main/java/com/google/gson/Streams.java,42,case BOOLEAN:
True,gson/src/main/java/com/google/gson/Streams.java,gson/src/main/java/com/google/gson/Streams.java,43,return new JsonPrimitive(reader.nextBoolean());
True,gson/src/main/java/com/google/gson/Streams.java,gson/src/main/java/com/google/gson/Streams.java,44,case NULL:
True,gson/src/main/java/com/google/gson/Streams.java,gson/src/main/java/com/google/gson/Streams.java,45,reader.nextNull();
True,gson/src/main/java/com/google/gson/Streams.java,gson/src/main/java/com/google/gson/Streams.java,46,return JsonNull.createJsonNull();
True,gson/src/main/java/com/google/gson/Streams.java,gson/src/main/java/com/google/gson/Streams.java,47,case BEGIN_ARRAY:
True,gson/src/main/java/com/google/gson/Streams.java,gson/src/main/java/com/google/gson/Streams.java,48,JsonArray array = new JsonArray();
True,gson/src/main/java/com/google/gson/Streams.java,gson/src/main/java/com/google/gson/Streams.java,49,reader.beginArray();
True,gson/src/main/java/com/google/gson/Streams.java,gson/src/main/java/com/google/gson/Streams.java,50,while (reader.hasNext()) {
True,gson/src/main/java/com/google/gson/Streams.java,gson/src/main/java/com/google/gson/Streams.java,51,array.add(parse(reader));
True,gson/src/main/java/com/google/gson/Streams.java,gson/src/main/java/com/google/gson/Streams.java,53,reader.endArray();
True,gson/src/main/java/com/google/gson/Streams.java,gson/src/main/java/com/google/gson/Streams.java,54,return array;
True,gson/src/main/java/com/google/gson/Streams.java,gson/src/main/java/com/google/gson/Streams.java,55,case BEGIN_OBJECT:
True,gson/src/main/java/com/google/gson/Streams.java,gson/src/main/java/com/google/gson/Streams.java,56,JsonObject object = new JsonObject();
True,gson/src/main/java/com/google/gson/Streams.java,gson/src/main/java/com/google/gson/Streams.java,57,reader.beginObject();
True,gson/src/main/java/com/google/gson/Streams.java,gson/src/main/java/com/google/gson/Streams.java,58,while (reader.hasNext()) {
True,gson/src/main/java/com/google/gson/Streams.java,gson/src/main/java/com/google/gson/Streams.java,59,"object.add(reader.nextName(), parse(reader));"
True,gson/src/main/java/com/google/gson/Streams.java,gson/src/main/java/com/google/gson/Streams.java,61,reader.endObject();
True,gson/src/main/java/com/google/gson/Streams.java,gson/src/main/java/com/google/gson/Streams.java,62,return object;
True,gson/src/main/java/com/google/gson/Streams.java,gson/src/main/java/com/google/gson/Streams.java,63,case END_DOCUMENT:
True,gson/src/main/java/com/google/gson/Streams.java,gson/src/main/java/com/google/gson/Streams.java,64,case NAME:
True,gson/src/main/java/com/google/gson/Streams.java,gson/src/main/java/com/google/gson/Streams.java,65,case END_OBJECT:
True,gson/src/main/java/com/google/gson/Streams.java,gson/src/main/java/com/google/gson/Streams.java,66,case END_ARRAY:
True,gson/src/main/java/com/google/gson/Streams.java,gson/src/main/java/com/google/gson/Streams.java,67,default:
True,gson/src/main/java/com/google/gson/Streams.java,gson/src/main/java/com/google/gson/Streams.java,68,throw new IllegalArgumentException();
True,gson/src/main/java/com/google/gson/Streams.java,gson/src/main/java/com/google/gson/Streams.java,70,} catch (IOException e) {
True,gson/src/main/java/com/google/gson/Streams.java,gson/src/main/java/com/google/gson/Streams.java,71,if (e instanceof EOFException) {
True,gson/src/main/java/com/google/gson/Streams.java,gson/src/main/java/com/google/gson/Streams.java,72,return JsonNull.createJsonNull();
True,gson/src/main/java/com/google/gson/Streams.java,gson/src/main/java/com/google/gson/Streams.java,74,throw new JsonParseException(e);
True,gson/src/main/java/com/google/gson/Streams.java,gson/src/main/java/com/google/gson/Streams.java,75,} catch (NumberFormatException e) {
True,gson/src/main/java/com/google/gson/Streams.java,gson/src/main/java/com/google/gson/Streams.java,76,throw new JsonParseException(e);
True,gson/src/main/java/com/google/gson/Streams.java,gson/src/main/java/com/google/gson/Streams.java,81,"* Writes the JSON element to the writer, recursively."
True,gson/src/main/java/com/google/gson/Streams.java,gson/src/main/java/com/google/gson/Streams.java,83,"static void write(JsonElement element, boolean serializeNulls, JsonWriter writer)"
True,gson/src/main/java/com/google/gson/Streams.java,gson/src/main/java/com/google/gson/Streams.java,84,throws IOException {
True,gson/src/main/java/com/google/gson/Streams.java,gson/src/main/java/com/google/gson/Streams.java,85,if (element == null || element.isJsonNull()) {
True,gson/src/main/java/com/google/gson/Streams.java,gson/src/main/java/com/google/gson/Streams.java,86,if (serializeNulls) {
True,gson/src/main/java/com/google/gson/Streams.java,gson/src/main/java/com/google/gson/Streams.java,87,writer.nullValue();
True,gson/src/main/java/com/google/gson/Streams.java,gson/src/main/java/com/google/gson/Streams.java,90,} else if (element.isJsonPrimitive()) {
True,gson/src/main/java/com/google/gson/Streams.java,gson/src/main/java/com/google/gson/Streams.java,91,JsonPrimitive primitive = element.getAsJsonPrimitive();
True,gson/src/main/java/com/google/gson/Streams.java,gson/src/main/java/com/google/gson/Streams.java,92,if (primitive.isNumber()) {
True,gson/src/main/java/com/google/gson/Streams.java,gson/src/main/java/com/google/gson/Streams.java,93,writer.value(primitive.getAsNumber());
True,gson/src/main/java/com/google/gson/Streams.java,gson/src/main/java/com/google/gson/Streams.java,94,} else if (primitive.isBoolean()) {
True,gson/src/main/java/com/google/gson/Streams.java,gson/src/main/java/com/google/gson/Streams.java,95,writer.value(primitive.getAsBoolean());
True,gson/src/main/java/com/google/gson/Streams.java,gson/src/main/java/com/google/gson/Streams.java,96,} else {
True,gson/src/main/java/com/google/gson/Streams.java,gson/src/main/java/com/google/gson/Streams.java,97,writer.value(primitive.getAsString());
True,gson/src/main/java/com/google/gson/Streams.java,gson/src/main/java/com/google/gson/Streams.java,100,} else if (element.isJsonArray()) {
True,gson/src/main/java/com/google/gson/Streams.java,gson/src/main/java/com/google/gson/Streams.java,101,writer.beginArray();
True,gson/src/main/java/com/google/gson/Streams.java,gson/src/main/java/com/google/gson/Streams.java,102,for (JsonElement e : element.getAsJsonArray()) {
True,gson/src/main/java/com/google/gson/Streams.java,gson/src/main/java/com/google/gson/Streams.java,103,/* always print null when its parent element is an array! */
True,gson/src/main/java/com/google/gson/Streams.java,gson/src/main/java/com/google/gson/Streams.java,104,if (e.isJsonNull()) {
True,gson/src/main/java/com/google/gson/Streams.java,gson/src/main/java/com/google/gson/Streams.java,105,writer.nullValue();
True,gson/src/main/java/com/google/gson/Streams.java,gson/src/main/java/com/google/gson/Streams.java,106,continue;
True,gson/src/main/java/com/google/gson/Streams.java,gson/src/main/java/com/google/gson/Streams.java,108,"write(e, serializeNulls, writer);"
True,gson/src/main/java/com/google/gson/Streams.java,gson/src/main/java/com/google/gson/Streams.java,110,writer.endArray();
True,gson/src/main/java/com/google/gson/Streams.java,gson/src/main/java/com/google/gson/Streams.java,112,} else if (element.isJsonObject()) {
True,gson/src/main/java/com/google/gson/Streams.java,gson/src/main/java/com/google/gson/Streams.java,113,writer.beginObject();
True,gson/src/main/java/com/google/gson/Streams.java,gson/src/main/java/com/google/gson/Streams.java,114,"for (Map.Entry<String, JsonElement> e : element.getAsJsonObject().entrySet()) {"
True,gson/src/main/java/com/google/gson/Streams.java,gson/src/main/java/com/google/gson/Streams.java,115,JsonElement value = e.getValue();
True,gson/src/main/java/com/google/gson/Streams.java,gson/src/main/java/com/google/gson/Streams.java,116,if (!serializeNulls && value.isJsonNull()) {
True,gson/src/main/java/com/google/gson/Streams.java,gson/src/main/java/com/google/gson/Streams.java,117,continue;
True,gson/src/main/java/com/google/gson/Streams.java,gson/src/main/java/com/google/gson/Streams.java,119,writer.name(e.getKey());
True,gson/src/main/java/com/google/gson/Streams.java,gson/src/main/java/com/google/gson/Streams.java,120,"write(value, serializeNulls, writer);"
True,gson/src/main/java/com/google/gson/Streams.java,gson/src/main/java/com/google/gson/Streams.java,122,writer.endObject();
True,gson/src/main/java/com/google/gson/Streams.java,gson/src/main/java/com/google/gson/Streams.java,124,} else {
True,gson/src/main/java/com/google/gson/Streams.java,gson/src/main/java/com/google/gson/Streams.java,125,"throw new IllegalArgumentException(""Couldn't write "" + element.getClass());"
True,gson/src/main/java/com/google/gson/Streams.java,gson/src/main/java/com/google/gson/Streams.java,129,static Writer writerForAppendable(Appendable appendable) {
True,gson/src/main/java/com/google/gson/Streams.java,gson/src/main/java/com/google/gson/Streams.java,130,return appendable instanceof Writer ? (Writer) appendable : new AppendableWriter(appendable);
True,gson/src/main/java/com/google/gson/Streams.java,gson/src/main/java/com/google/gson/Streams.java,134,* Adapts an {@link Appendable} so it can be passed anywhere a {@link Writer}
True,gson/src/main/java/com/google/gson/Streams.java,gson/src/main/java/com/google/gson/Streams.java,135,* is used.
True,gson/src/main/java/com/google/gson/Streams.java,gson/src/main/java/com/google/gson/Streams.java,137,private static class AppendableWriter extends Writer {
True,gson/src/main/java/com/google/gson/Streams.java,gson/src/main/java/com/google/gson/Streams.java,138,private final Appendable appendable;
True,gson/src/main/java/com/google/gson/Streams.java,gson/src/main/java/com/google/gson/Streams.java,139,private final CurrentWrite currentWrite = new CurrentWrite();
True,gson/src/main/java/com/google/gson/Streams.java,gson/src/main/java/com/google/gson/Streams.java,141,private AppendableWriter(Appendable appendable) {
True,gson/src/main/java/com/google/gson/Streams.java,gson/src/main/java/com/google/gson/Streams.java,142,this.appendable = appendable;
True,gson/src/main/java/com/google/gson/Streams.java,gson/src/main/java/com/google/gson/Streams.java,145,"@Override public void write(char[] chars, int offset, int length) throws IOException {"
True,gson/src/main/java/com/google/gson/Streams.java,gson/src/main/java/com/google/gson/Streams.java,146,currentWrite.chars = chars;
True,gson/src/main/java/com/google/gson/Streams.java,gson/src/main/java/com/google/gson/Streams.java,147,"appendable.append(currentWrite, offset, offset + length);"
True,gson/src/main/java/com/google/gson/Streams.java,gson/src/main/java/com/google/gson/Streams.java,150,@Override public void write(int i) throws IOException {
True,gson/src/main/java/com/google/gson/Streams.java,gson/src/main/java/com/google/gson/Streams.java,151,appendable.append((char) i);
True,gson/src/main/java/com/google/gson/Streams.java,gson/src/main/java/com/google/gson/Streams.java,154,@Override public void flush() throws IOException {}
True,gson/src/main/java/com/google/gson/Streams.java,gson/src/main/java/com/google/gson/Streams.java,155,@Override public void close() throws IOException {}
True,gson/src/main/java/com/google/gson/Streams.java,gson/src/main/java/com/google/gson/Streams.java,158,* A mutable char sequence pointing at a single char[].
True,gson/src/main/java/com/google/gson/Streams.java,gson/src/main/java/com/google/gson/Streams.java,160,static class CurrentWrite implements CharSequence {
True,gson/src/main/java/com/google/gson/Streams.java,gson/src/main/java/com/google/gson/Streams.java,161,char[] chars;
True,gson/src/main/java/com/google/gson/Streams.java,gson/src/main/java/com/google/gson/Streams.java,162,public int length() {
True,gson/src/main/java/com/google/gson/Streams.java,gson/src/main/java/com/google/gson/Streams.java,163,return chars.length;
True,gson/src/main/java/com/google/gson/Streams.java,gson/src/main/java/com/google/gson/Streams.java,165,public char charAt(int i) {
True,gson/src/main/java/com/google/gson/Streams.java,gson/src/main/java/com/google/gson/Streams.java,166,return chars[i];
True,gson/src/main/java/com/google/gson/Streams.java,gson/src/main/java/com/google/gson/Streams.java,168,"public CharSequence subSequence(int start, int end) {"
True,gson/src/main/java/com/google/gson/Streams.java,gson/src/main/java/com/google/gson/Streams.java,169,"return new String(chars, start, end - start);"

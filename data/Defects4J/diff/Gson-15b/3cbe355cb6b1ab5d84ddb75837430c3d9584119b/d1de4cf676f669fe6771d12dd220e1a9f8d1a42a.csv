is_addition,old_file_path,new_file_path,line_num,content
False,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,24,mport com.google.gson.JsonParseException;
False,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,36,rivate static final JsonSerializer<Foo> FOO_SERIALIZER = new JsonSerializer<Foo>() {
False,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,37,"ublic JsonElement serialize(Foo src, Type typeOfSrc, JsonSerializationContext context) {"
False,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,38,"eturn new JsonPrimitive(src.name + "" (via FOO_SERIALIZER)"");"
False,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,42,rivate static final JsonDeserializer<Foo> FOO_DESERIALIZER = new JsonDeserializer<Foo>() {
False,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,43,"ublic Foo deserialize(JsonElement json, Type typeOfT,"
False,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,44,sonDeserializationContext context) throws JsonParseException {
False,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,45,"eturn new Foo(json.getAsString() + "" (via FOO_DESERIALIZER)"");"
False,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,49,rivate static final TypeAdapter<Foo> FOO_TYPE_ADAPTER = new TypeAdapter<Foo>() {
False,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,50,Override public Foo read(JsonReader reader) throws IOException {
False,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,51,"eturn new Foo(reader.nextString() + "" (via FOO_TYPE_ADAPTER)"");"
False,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,53,"Override public void write(JsonWriter writer, Foo value) throws IOException {"
False,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,54,"riter.value(value.name + "" (via FOO_TYPE_ADAPTER)"");"
False,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,60,"registerTypeAdapter(Foo.class, FOO_SERIALIZER)"
False,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,61,"registerTypeAdapter(Foo.class, FOO_TYPE_ADAPTER)"
True,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,37,".registerTypeAdapter(Foo.class, newSerializer(""serializer""))"
True,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,38,".registerTypeAdapter(Foo.class, newDeserializer(""deserializer""))"
True,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,39,".registerTypeAdapter(Foo.class, newTypeAdapter(""type adapter""))"
False,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,63,"ssertEquals(""\""foo (via FOO_SERIALIZER)\"""", gson.toJson(new Foo(""foo"")));"
True,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,41,"assertEquals(""\""foo via serializer\"""", gson.toJson(new Foo(""foo"")));"
True,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,42,"assertEquals(""foo via deserializer"", gson.fromJson(""foo"", Foo.class).name);"
False,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,66,ublic void testSerializeStreamingTypeAdapterFollowedByNonstreamingTypeAdapter() {
True,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,45,public void testStreamingFollowedByNonstreaming() {
False,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,68,"registerTypeAdapter(Foo.class, FOO_TYPE_ADAPTER)"
False,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,69,"registerTypeAdapter(Foo.class, FOO_SERIALIZER)"
True,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,47,".registerTypeAdapter(Foo.class, newTypeAdapter(""type adapter""))"
True,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,48,".registerTypeAdapter(Foo.class, newSerializer(""serializer""))"
True,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,49,".registerTypeAdapter(Foo.class, newDeserializer(""deserializer""))"
False,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,71,"ssertEquals(""\""foo (via FOO_TYPE_ADAPTER)\"""", gson.toJson(new Foo(""foo"")));"
True,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,51,"assertEquals(""\""foo via type adapter\"""", gson.toJson(new Foo(""foo"")));"
True,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,52,"assertEquals(""foo via type adapter"", gson.fromJson(""foo"", Foo.class).name);"
False,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,74,ublic void testDeserializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter() {
True,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,55,public void testStreamingHierarchicalFollowedByNonstreaming() {
False,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,76,"registerTypeAdapter(Foo.class, FOO_DESERIALIZER)"
False,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,77,"registerTypeAdapter(Foo.class, FOO_TYPE_ADAPTER)"
True,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,57,".registerTypeHierarchyAdapter(Foo.class, newTypeAdapter(""type adapter""))"
True,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,58,".registerTypeAdapter(Foo.class, newSerializer(""serializer""))"
True,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,59,".registerTypeAdapter(Foo.class, newDeserializer(""deserializer""))"
False,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,79,"ssertEquals(""foo (via FOO_DESERIALIZER)"", gson.fromJson(""foo"", Foo.class).name);"
True,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,61,"assertEquals(""\""foo via type adapter\"""", gson.toJson(new Foo(""foo"")));"
True,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,62,"assertEquals(""foo via type adapter"", gson.fromJson(""foo"", Foo.class).name);"
False,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,82,ublic void testDeserializeStreamingTypeAdapterFollowedByNonstreamingTypeAdapter() {
True,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,65,public void testStreamingFollowedByNonstreamingHierarchical() {
False,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,84,"registerTypeAdapter(Foo.class, FOO_TYPE_ADAPTER)"
False,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,85,"registerTypeAdapter(Foo.class, FOO_DESERIALIZER)"
True,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,67,".registerTypeAdapter(Foo.class, newTypeAdapter(""type adapter""))"
True,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,68,".registerTypeHierarchyAdapter(Foo.class, newSerializer(""serializer""))"
True,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,69,".registerTypeHierarchyAdapter(Foo.class, newDeserializer(""deserializer""))"
False,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,87,"ssertEquals(""foo (via FOO_TYPE_ADAPTER)"", gson.fromJson(""foo"", Foo.class).name);"
True,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,71,"assertEquals(""\""foo via type adapter\"""", gson.toJson(new Foo(""foo"")));"
True,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,72,"assertEquals(""foo via type adapter"", gson.fromJson(""foo"", Foo.class).name);"
True,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,75,public void testStreamingHierarchicalFollowedByNonstreamingHierarchical() {
True,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,76,Gson gson = new GsonBuilder()
True,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,77,".registerTypeHierarchyAdapter(Foo.class, newSerializer(""serializer""))"
True,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,78,".registerTypeHierarchyAdapter(Foo.class, newDeserializer(""deserializer""))"
True,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,79,".registerTypeHierarchyAdapter(Foo.class, newTypeAdapter(""type adapter""))"
True,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,80,.create();
True,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,81,"assertEquals(""\""foo via type adapter\"""", gson.toJson(new Foo(""foo"")));"
True,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,82,"assertEquals(""foo via type adapter"", gson.fromJson(""foo"", Foo.class).name);"
False,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,91,rivate final String name;
True,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,86,final String name;
True,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,92,private JsonSerializer<Foo> newSerializer(final String name) {
True,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,93,return new JsonSerializer<Foo>() {
True,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,94,"public JsonElement serialize(Foo src, Type typeOfSrc, JsonSerializationContext context) {"
True,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,95,"return new JsonPrimitive(src.name + "" via "" + name);"
True,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,100,private JsonDeserializer<Foo> newDeserializer(final String name) {
True,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,101,return new JsonDeserializer<Foo>() {
True,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,102,"public Foo deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) {"
True,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,103,"return new Foo(json.getAsString() + "" via "" + name);"
True,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,108,private TypeAdapter<Foo> newTypeAdapter(final String name) {
True,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,109,return new TypeAdapter<Foo>() {
True,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,110,@Override public Foo read(JsonReader reader) throws IOException {
True,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,111,"return new Foo(reader.nextString() + "" via "" + name);"
True,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,113,"@Override public void write(JsonWriter writer, Foo value) throws IOException {"
True,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java,114,"writer.value(value.name + "" via "" + name);"

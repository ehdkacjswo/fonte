is_addition,old_file_path,new_file_path,line_num,content
False,gson/src/main/java/com/google/gson/Cache.java,gson/src/main/java/com/google/gson/Cache.java,2, Copyright (C) 2010 Google Inc.
False,gson/src/main/java/com/google/gson/Cache.java,gson/src/main/java/com/google/gson/Cache.java,4," Licensed under the Apache License, Version 2.0 (the ""License"");"
False,gson/src/main/java/com/google/gson/Cache.java,gson/src/main/java/com/google/gson/Cache.java,5, you may not use this file except in compliance with the License.
False,gson/src/main/java/com/google/gson/Cache.java,gson/src/main/java/com/google/gson/Cache.java,6, You may obtain a copy of the License at
False,gson/src/main/java/com/google/gson/Cache.java,gson/src/main/java/com/google/gson/Cache.java,8, http://www.apache.org/licenses/LICENSE-2.0
False,gson/src/main/java/com/google/gson/Cache.java,gson/src/main/java/com/google/gson/Cache.java,10," Unless required by applicable law or agreed to in writing, software"
False,gson/src/main/java/com/google/gson/Cache.java,gson/src/main/java/com/google/gson/Cache.java,11," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,gson/src/main/java/com/google/gson/Cache.java,gson/src/main/java/com/google/gson/Cache.java,12," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,gson/src/main/java/com/google/gson/Cache.java,gson/src/main/java/com/google/gson/Cache.java,13, See the License for the specific language governing permissions and
False,gson/src/main/java/com/google/gson/Cache.java,gson/src/main/java/com/google/gson/Cache.java,14, limitations under the License.
False,gson/src/main/java/com/google/gson/Cache.java,gson/src/main/java/com/google/gson/Cache.java,17,ackage com.google.gson;
False,gson/src/main/java/com/google/gson/Cache.java,gson/src/main/java/com/google/gson/Cache.java,20, Defines generic cache interface.
False,gson/src/main/java/com/google/gson/Cache.java,gson/src/main/java/com/google/gson/Cache.java,22, @author Inderjeet Singh
False,gson/src/main/java/com/google/gson/Cache.java,gson/src/main/java/com/google/gson/Cache.java,23, @author Joel Leitch
False,gson/src/main/java/com/google/gson/Cache.java,gson/src/main/java/com/google/gson/Cache.java,25,"nterface Cache<K, V> {"
False,gson/src/main/java/com/google/gson/Cache.java,gson/src/main/java/com/google/gson/Cache.java,28, Adds the new value object into the cache for the given key.  If the key already
False,gson/src/main/java/com/google/gson/Cache.java,gson/src/main/java/com/google/gson/Cache.java,29," exists, then this method will override the value for the key."
False,gson/src/main/java/com/google/gson/Cache.java,gson/src/main/java/com/google/gson/Cache.java,31, @param key the key identifier for the {@code value} object
False,gson/src/main/java/com/google/gson/Cache.java,gson/src/main/java/com/google/gson/Cache.java,32, @param value the value object to store in the cache
False,gson/src/main/java/com/google/gson/Cache.java,gson/src/main/java/com/google/gson/Cache.java,34,"oid addElement(K key, V value);"
False,gson/src/main/java/com/google/gson/Cache.java,gson/src/main/java/com/google/gson/Cache.java,37, Retrieve the cached value for the given {@code key}.
False,gson/src/main/java/com/google/gson/Cache.java,gson/src/main/java/com/google/gson/Cache.java,39, @param key the key identifying the value
False,gson/src/main/java/com/google/gson/Cache.java,gson/src/main/java/com/google/gson/Cache.java,40, @return the cached value for the given {@code key}
False,gson/src/main/java/com/google/gson/Cache.java,gson/src/main/java/com/google/gson/Cache.java,42, getElement(K key);
True,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,2,* Copyright (C) 2008 Google Inc.
True,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,5,* you may not use this file except in compliance with the License.
True,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,6,* You may obtain a copy of the License at
True,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,8,* http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,13,* See the License for the specific language governing permissions and
True,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,14,* limitations under the License.
True,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,17,package com.google.gson;
True,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,19,import java.lang.reflect.Type;
True,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,20,import java.sql.Timestamp;
True,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,21,import java.text.DateFormat;
True,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,22,import java.text.ParseException;
True,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,23,import java.text.SimpleDateFormat;
True,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,24,import java.util.Date;
True,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,25,import java.util.Locale;
True,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,26,import java.util.TimeZone;
True,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,29,"* This type adapter supports three subclasses of date: Date, Timestamp, and"
True,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,30,* java.sql.Date.
True,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,32,* @author Inderjeet Singh
True,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,33,* @author Joel Leitch
True,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,35,"final class DefaultDateTypeAdapter implements JsonSerializer<Date>, JsonDeserializer<Date> {"
True,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,37,// TODO: migrate to streaming adapter
True,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,39,private final DateFormat enUsFormat;
True,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,40,private final DateFormat localFormat;
True,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,41,private final DateFormat iso8601Format;
True,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,43,DefaultDateTypeAdapter() {
True,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,44,"this(DateFormat.getDateTimeInstance(DateFormat.DEFAULT, DateFormat.DEFAULT, Locale.US),"
True,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,45,"DateFormat.getDateTimeInstance(DateFormat.DEFAULT, DateFormat.DEFAULT));"
True,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,48,DefaultDateTypeAdapter(String datePattern) {
True,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,49,"this(new SimpleDateFormat(datePattern, Locale.US), new SimpleDateFormat(datePattern));"
True,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,52,DefaultDateTypeAdapter(int style) {
True,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,53,"this(DateFormat.getDateInstance(style, Locale.US), DateFormat.getDateInstance(style));"
True,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,56,"public DefaultDateTypeAdapter(int dateStyle, int timeStyle) {"
True,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,57,"this(DateFormat.getDateTimeInstance(dateStyle, timeStyle, Locale.US),"
True,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,58,"DateFormat.getDateTimeInstance(dateStyle, timeStyle));"
True,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,61,"DefaultDateTypeAdapter(DateFormat enUsFormat, DateFormat localFormat) {"
True,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,62,this.enUsFormat = enUsFormat;
True,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,63,this.localFormat = localFormat;
True,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,64,"this.iso8601Format = new SimpleDateFormat(""yyyy-MM-dd'T'HH:mm:ss'Z'"", Locale.US);"
True,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,65,"this.iso8601Format.setTimeZone(TimeZone.getTimeZone(""UTC""));"
True,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,68,// These methods need to be synchronized since JDK DateFormat classes are not thread-safe
True,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,69,// See issue 162
True,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,70,"public JsonElement serialize(Date src, Type typeOfSrc, JsonSerializationContext context) {"
True,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,71,synchronized (localFormat) {
True,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,72,String dateFormatAsString = enUsFormat.format(src);
True,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,73,return new JsonPrimitive(dateFormatAsString);
True,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,77,"public Date deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)"
True,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,78,throws JsonParseException {
True,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,79,if (!(json instanceof JsonPrimitive)) {
True,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,80,"throw new JsonParseException(""The date should be a string value"");"
True,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,82,Date date = deserializeToDate(json);
True,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,83,if (typeOfT == Date.class) {
True,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,84,return date;
True,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,85,} else if (typeOfT == Timestamp.class) {
True,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,86,return new Timestamp(date.getTime());
True,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,87,} else if (typeOfT == java.sql.Date.class) {
True,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,88,return new java.sql.Date(date.getTime());
True,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,89,} else {
True,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,90,"throw new IllegalArgumentException(getClass() + "" cannot deserialize to "" + typeOfT);"
True,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,94,private Date deserializeToDate(JsonElement json) {
True,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,95,synchronized (localFormat) {
True,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,96,try {
True,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,97,return localFormat.parse(json.getAsString());
True,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,98,} catch (ParseException ignored) {
True,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,100,try {
True,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,101,return enUsFormat.parse(json.getAsString());
True,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,102,} catch (ParseException ignored) {
True,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,104,try {
True,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,105,return iso8601Format.parse(json.getAsString());
True,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,106,} catch (ParseException e) {
True,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,107,"throw new JsonSyntaxException(json.getAsString(), e);"
True,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,112,@Override
True,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,113,public String toString() {
True,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,114,StringBuilder sb = new StringBuilder();
True,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,115,sb.append(DefaultDateTypeAdapter.class.getSimpleName());
True,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,116,sb.append('(').append(localFormat.getClass().getSimpleName()).append(')');
True,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java,117,return sb.toString();
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,2, Copyright (C) 2008 Google Inc.
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,4," Licensed under the Apache License, Version 2.0 (the ""License"");"
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,5, you may not use this file except in compliance with the License.
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,6, You may obtain a copy of the License at
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,8, http://www.apache.org/licenses/LICENSE-2.0
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,10," Unless required by applicable law or agreed to in writing, software"
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,11," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,12," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,13, See the License for the specific language governing permissions and
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,14, limitations under the License.
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,17,ackage com.google.gson;
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,19,mport java.lang.reflect.Type;
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,20,mport java.sql.Timestamp;
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,21,mport java.text.DateFormat;
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,22,mport java.text.ParseException;
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,23,mport java.text.SimpleDateFormat;
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,24,mport java.util.Date;
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,25,mport java.util.Locale;
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,26,mport java.util.TimeZone;
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,29," List of all the default type adapters ({@link JsonSerializer}s, {@link JsonDeserializer}s,"
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,30, and {@link InstanceCreator}s.
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,32, @author Inderjeet Singh
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,33, @author Joel Leitch
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,35,inal class DefaultTypeAdapters {
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,37," This type adapter supports three subclasses of date: Date, Timestamp, and"
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,38, java.sql.Date.
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,40,"tatic final class DefaultDateTypeAdapter implements JsonSerializer<Date>, JsonDeserializer<Date> {"
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,41,rivate final DateFormat enUsFormat;
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,42,rivate final DateFormat localFormat;
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,43,rivate final DateFormat iso8601Format;
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,45,efaultDateTypeAdapter() {
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,46,"his(DateFormat.getDateTimeInstance(DateFormat.DEFAULT, DateFormat.DEFAULT, Locale.US),"
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,47,"ateFormat.getDateTimeInstance(DateFormat.DEFAULT, DateFormat.DEFAULT));"
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,50,efaultDateTypeAdapter(String datePattern) {
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,51,"his(new SimpleDateFormat(datePattern, Locale.US), new SimpleDateFormat(datePattern));"
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,54,efaultDateTypeAdapter(int style) {
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,55,"his(DateFormat.getDateInstance(style, Locale.US), DateFormat.getDateInstance(style));"
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,58,"ublic DefaultDateTypeAdapter(int dateStyle, int timeStyle) {"
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,59,"his(DateFormat.getDateTimeInstance(dateStyle, timeStyle, Locale.US),"
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,60,"ateFormat.getDateTimeInstance(dateStyle, timeStyle));"
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,63,"efaultDateTypeAdapter(DateFormat enUsFormat, DateFormat localFormat) {"
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,64,his.enUsFormat = enUsFormat;
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,65,his.localFormat = localFormat;
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,66,"his.iso8601Format = new SimpleDateFormat(""yyyy-MM-dd'T'HH:mm:ss'Z'"", Locale.US);"
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,67,"his.iso8601Format.setTimeZone(TimeZone.getTimeZone(""UTC""));"
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,70,/ These methods need to be synchronized since JDK DateFormat classes are not thread-safe
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,71,/ See issue 162
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,72,"ublic JsonElement serialize(Date src, Type typeOfSrc, JsonSerializationContext context) {"
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,73,ynchronized (localFormat) {
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,74,tring dateFormatAsString = enUsFormat.format(src);
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,75,eturn new JsonPrimitive(dateFormatAsString);
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,79,"ublic Date deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)"
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,80,hrows JsonParseException {
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,81,f (!(json instanceof JsonPrimitive)) {
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,82,"hrow new JsonParseException(""The date should be a string value"");"
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,84,ate date = deserializeToDate(json);
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,85,f (typeOfT == Date.class) {
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,86,eturn date;
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,87, else if (typeOfT == Timestamp.class) {
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,88,eturn new Timestamp(date.getTime());
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,89, else if (typeOfT == java.sql.Date.class) {
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,90,eturn new java.sql.Date(date.getTime());
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,91, else {
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,92,"hrow new IllegalArgumentException(getClass() + "" cannot deserialize to "" + typeOfT);"
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,96,rivate Date deserializeToDate(JsonElement json) {
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,97,ynchronized (localFormat) {
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,98,ry {
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,99,eturn localFormat.parse(json.getAsString());
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,100, catch (ParseException ignored) {
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,102,ry {
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,103,eturn enUsFormat.parse(json.getAsString());
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,104, catch (ParseException ignored) {
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,106,ry {
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,107,eturn iso8601Format.parse(json.getAsString());
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,108, catch (ParseException e) {
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,109,"hrow new JsonSyntaxException(json.getAsString(), e);"
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,114,Override
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,115,ublic String toString() {
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,116,tringBuilder sb = new StringBuilder();
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,117,b.append(DefaultDateTypeAdapter.class.getSimpleName());
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,118,b.append('(').append(localFormat.getClass().getSimpleName()).append(')');
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,119,eturn sb.toString();
False,gson/src/main/java/com/google/gson/FieldAttributes.java,gson/src/main/java/com/google/gson/FieldAttributes.java,19,mport com.google.gson.internal.$Gson$Preconditions;
False,gson/src/main/java/com/google/gson/FieldAttributes.java,gson/src/main/java/com/google/gson/FieldAttributes.java,42,"rivate static final Cache<Pair<Class<?>, String>, Collection<Annotation>> ANNOTATION_CACHE ="
False,gson/src/main/java/com/google/gson/FieldAttributes.java,gson/src/main/java/com/google/gson/FieldAttributes.java,43,"ew LruCache<Pair<Class<?>,String>, Collection<Annotation>>(getMaxCacheSize());"
True,gson/src/main/java/com/google/gson/FieldAttributes.java,gson/src/main/java/com/google/gson/FieldAttributes.java,41,"private static final LruCache<Pair<Class<?>, String>, Collection<Annotation>> ANNOTATION_CACHE"
True,gson/src/main/java/com/google/gson/FieldAttributes.java,gson/src/main/java/com/google/gson/FieldAttributes.java,42,"= new LruCache<Pair<Class<?>,String>, Collection<Annotation>>(getMaxCacheSize());"
False,gson/src/main/java/com/google/gson/FieldAttributes.java,gson/src/main/java/com/google/gson/FieldAttributes.java,158,ollection<Annotation> cachedValue = ANNOTATION_CACHE.getElement(key);
True,gson/src/main/java/com/google/gson/FieldAttributes.java,gson/src/main/java/com/google/gson/FieldAttributes.java,157,Collection<Annotation> cachedValue = ANNOTATION_CACHE.get(key);
False,gson/src/main/java/com/google/gson/FieldAttributes.java,gson/src/main/java/com/google/gson/FieldAttributes.java,162,"NNOTATION_CACHE.addElement(key, cachedValue);"
True,gson/src/main/java/com/google/gson/FieldAttributes.java,gson/src/main/java/com/google/gson/FieldAttributes.java,161,"ANNOTATION_CACHE.put(key, cachedValue);"
False,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,19,mport com.google.gson.DefaultTypeAdapters.DefaultDateTypeAdapter;
False,gson/src/main/java/com/google/gson/LruCache.java,gson/src/main/java/com/google/gson/LruCache.java,24, An implementation of the {@link Cache} interface that evict objects from the cache using an
False,gson/src/main/java/com/google/gson/LruCache.java,gson/src/main/java/com/google/gson/LruCache.java,25, LRU (least recently used) algorithm.  Object start getting evicted from the cache once the
False,gson/src/main/java/com/google/gson/LruCache.java,gson/src/main/java/com/google/gson/LruCache.java,26, {@code maxCapacity} is reached.
True,gson/src/main/java/com/google/gson/LruCache.java,gson/src/main/java/com/google/gson/LruCache.java,24,* A cache that evict objects from the cache using an LRU (least recently used)
True,gson/src/main/java/com/google/gson/LruCache.java,gson/src/main/java/com/google/gson/LruCache.java,25,* policy.  Object start getting evicted from the cache once the {@code maxCapacity}
True,gson/src/main/java/com/google/gson/LruCache.java,gson/src/main/java/com/google/gson/LruCache.java,26,* is reached.
False,gson/src/main/java/com/google/gson/LruCache.java,gson/src/main/java/com/google/gson/LruCache.java,31,"inal class LruCache<K, V> extends LinkedHashMap<K, V> implements Cache<K, V> {"
False,gson/src/main/java/com/google/gson/LruCache.java,gson/src/main/java/com/google/gson/LruCache.java,32,rivate static final long serialVersionUID = 1L;
True,gson/src/main/java/com/google/gson/LruCache.java,gson/src/main/java/com/google/gson/LruCache.java,31,"final class LruCache<K, V> extends LinkedHashMap<K, V> {"
False,gson/src/main/java/com/google/gson/LruCache.java,gson/src/main/java/com/google/gson/LruCache.java,41,"ublic synchronized void addElement(K key, V value) {"
False,gson/src/main/java/com/google/gson/LruCache.java,gson/src/main/java/com/google/gson/LruCache.java,42,"ut(key, value);"
False,gson/src/main/java/com/google/gson/LruCache.java,gson/src/main/java/com/google/gson/LruCache.java,45,ublic synchronized V getElement(K key) {
False,gson/src/main/java/com/google/gson/LruCache.java,gson/src/main/java/com/google/gson/LruCache.java,46,eturn get(key);
False,gson/src/main/java/com/google/gson/LruCache.java,gson/src/main/java/com/google/gson/LruCache.java,49,Override
False,gson/src/main/java/com/google/gson/LruCache.java,gson/src/main/java/com/google/gson/LruCache.java,50,"rotected boolean removeEldestEntry(Map.Entry<K, V> entry) {"
True,gson/src/main/java/com/google/gson/LruCache.java,gson/src/main/java/com/google/gson/LruCache.java,39,"@Override protected boolean removeEldestEntry(Map.Entry<K, V> entry) {"
False,gson/src/test/java/com/google/gson/DefaultDateTypeAdapterTest.java,gson/src/test/java/com/google/gson/DefaultDateTypeAdapterTest.java,19,mport com.google.gson.DefaultTypeAdapters.DefaultDateTypeAdapter;
False,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,gson/src/test/java/com/google/gson/JsonDeserializerExceptionWrapperTest.java,19,mport com.google.gson.DefaultTypeAdapters.DefaultDateTypeAdapter;

is_addition,old_file_path,new_file_path,line_num,content
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,127,// See if the fieldValue has better type information than the specified typeOfF
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,128,"// This takes care of situations where the field was declared as an Object, but the"
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,129,// actual value contains something more specific. See Issue 54.
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,130,if (fieldValue != null && typeOfF instanceof Class) {
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,131,Class<?> classOfF = (Class<?>) typeOfF;
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,132,Class<?> actualClassOfF = fieldValue.getClass();
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,133,if (classOfF.isAssignableFrom(actualClassOfF)) {
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,134,typeOfF = actualClassOfF;
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,365,* Tests that a class field with type Object can be serialized properly.
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,366,* See issue 54
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,368,public void testClassWithObjectFieldSerialization() {
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,369,ClassWithObjectField obj = new ClassWithObjectField();
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,370,"obj.member = ""abc"";"
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,371,String json = gson.toJson(obj);
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,372,"assertTrue(json.contains(""abc""));"
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,375,private static class ClassWithObjectField {
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,376,Object member;
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,374,"son gson = new GsonBuilder().registerTypeAdapter(Parent.Child.class, new InstanceCreator<Parent.Child>() {"
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,389,Gson gson = new GsonBuilder().registerTypeAdapter(
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,390,"Parent.Child.class, new InstanceCreator<Parent.Child>() {"

is_addition,old_file_path,new_file_path,line_num,content
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,62,private static final CollectionTypeAdapter COLLECTION_TYPE_ADAPTER = new CollectionTypeAdapter();
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,96,"map.register(Collection.class, COLLECTION_TYPE_ADAPTER);"
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,112,"map.register(Collection.class, wrapDeserializer(COLLECTION_TYPE_ADAPTER));"
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,127,"map.register(Collection.class, COLLECTION_TYPE_ADAPTER);"
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,330,"@SuppressWarnings({ ""unchecked"" })"
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,331,"private static class CollectionTypeAdapter implements JsonSerializer<Collection>, JsonDeserializer<Collection>, InstanceCreator<Collection> {"
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,333,"public JsonElement serialize(Collection src, Type typeOfSrc, JsonSerializationContext context) {"
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,334,if (src == null) {
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,335,return JsonNull.INSTANCE;
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,337,JsonArray array = new JsonArray();
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,338,Type childGenericType = null;
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,339,if (typeOfSrc instanceof ParameterizedType) {
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,340,childGenericType = new TypeInfoCollection(typeOfSrc).getElementType();
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,342,for (Object child : src) {
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,343,Type childType = (childGenericType == null) ?
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,344,childType = child.getClass() : childGenericType;
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,345,"JsonElement element = context.serialize(child, childType);"
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,346,array.add(element);
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,348,return array;
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,351,"public Collection deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)"
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,352,throws JsonParseException {
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,353,if (json.isJsonNull()) {
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,354,return null;
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,356,// Using list to preserve order in which elements are entered
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,357,List<Object> list = new LinkedList<Object>();
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,358,Type childType = new TypeInfoCollection(typeOfT).getElementType();
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,359,for (JsonElement childElement : json.getAsJsonArray()) {
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,360,"Object value = context.deserialize(childElement, childType);"
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,361,list.add(value);
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,363,return list;
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,366,public Collection createInstance(Type type) {
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,367,return new LinkedList();
True,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,20,import java.util.Collection;
True,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,21,import java.util.Map;
False,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,81,sonDeserializer<T> deserializer = (JsonDeserializer<T>) deserializers.getHandlerFor(objType);
True,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,83,JsonDeserializer deserializer = (JsonDeserializer) deserializers.getHandlerFor(objType);
True,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,84,if (deserializer == null) {
True,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,85,if (objType instanceof Map) {
True,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,86,deserializer = deserializers.getHandlerFor(Map.class);
True,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,87,} else if (objType instanceof Collection) {
True,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,88,deserializer = deserializers.getHandlerFor(Collection.class);
False,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,83,"arget = deserializer.deserialize(json, objType, context);"
True,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,92,"target = (T) deserializer.deserialize(json, objType, context);"
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,190,f (serializer == null && obj instanceof Map) {
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,191,erializer = serializers.getHandlerFor(Map.class);
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,190,if (serializer == null) {
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,191,if (obj instanceof Map) {
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,192,serializer = serializers.getHandlerFor(Map.class);
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,193,} else if (obj instanceof Collection) {
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,194,serializer = serializers.getHandlerFor(Collection.class);
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,217,if (serializer == null && obj instanceof Collection) {
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,218,serializer = serializers.getHandlerFor(Collection.class);
True,gson/src/main/java/com/google/gson/TypeInfoCollection.java,gson/src/main/java/com/google/gson/TypeInfoCollection.java,2,* Copyright (C) 2008 Google Inc.
True,gson/src/main/java/com/google/gson/TypeInfoCollection.java,gson/src/main/java/com/google/gson/TypeInfoCollection.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/main/java/com/google/gson/TypeInfoCollection.java,gson/src/main/java/com/google/gson/TypeInfoCollection.java,5,* you may not use this file except in compliance with the License.
True,gson/src/main/java/com/google/gson/TypeInfoCollection.java,gson/src/main/java/com/google/gson/TypeInfoCollection.java,6,* You may obtain a copy of the License at
True,gson/src/main/java/com/google/gson/TypeInfoCollection.java,gson/src/main/java/com/google/gson/TypeInfoCollection.java,8,* http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/main/java/com/google/gson/TypeInfoCollection.java,gson/src/main/java/com/google/gson/TypeInfoCollection.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/main/java/com/google/gson/TypeInfoCollection.java,gson/src/main/java/com/google/gson/TypeInfoCollection.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/main/java/com/google/gson/TypeInfoCollection.java,gson/src/main/java/com/google/gson/TypeInfoCollection.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/main/java/com/google/gson/TypeInfoCollection.java,gson/src/main/java/com/google/gson/TypeInfoCollection.java,13,* See the License for the specific language governing permissions and
True,gson/src/main/java/com/google/gson/TypeInfoCollection.java,gson/src/main/java/com/google/gson/TypeInfoCollection.java,14,* limitations under the License.
True,gson/src/main/java/com/google/gson/TypeInfoCollection.java,gson/src/main/java/com/google/gson/TypeInfoCollection.java,17,package com.google.gson;
True,gson/src/main/java/com/google/gson/TypeInfoCollection.java,gson/src/main/java/com/google/gson/TypeInfoCollection.java,19,import java.lang.reflect.ParameterizedType;
True,gson/src/main/java/com/google/gson/TypeInfoCollection.java,gson/src/main/java/com/google/gson/TypeInfoCollection.java,20,import java.lang.reflect.Type;
True,gson/src/main/java/com/google/gson/TypeInfoCollection.java,gson/src/main/java/com/google/gson/TypeInfoCollection.java,21,import java.util.Collection;
True,gson/src/main/java/com/google/gson/TypeInfoCollection.java,gson/src/main/java/com/google/gson/TypeInfoCollection.java,24,* A convenience object for retrieving the map type information.
True,gson/src/main/java/com/google/gson/TypeInfoCollection.java,gson/src/main/java/com/google/gson/TypeInfoCollection.java,26,* @author Inderjeet Singh
True,gson/src/main/java/com/google/gson/TypeInfoCollection.java,gson/src/main/java/com/google/gson/TypeInfoCollection.java,27,* @author Joel Leitch
True,gson/src/main/java/com/google/gson/TypeInfoCollection.java,gson/src/main/java/com/google/gson/TypeInfoCollection.java,29,final class TypeInfoCollection {
True,gson/src/main/java/com/google/gson/TypeInfoCollection.java,gson/src/main/java/com/google/gson/TypeInfoCollection.java,30,private final ParameterizedType collectionType;
True,gson/src/main/java/com/google/gson/TypeInfoCollection.java,gson/src/main/java/com/google/gson/TypeInfoCollection.java,32,public TypeInfoCollection(Type collectionType) {
True,gson/src/main/java/com/google/gson/TypeInfoCollection.java,gson/src/main/java/com/google/gson/TypeInfoCollection.java,33,if (!(collectionType instanceof ParameterizedType)) {
True,gson/src/main/java/com/google/gson/TypeInfoCollection.java,gson/src/main/java/com/google/gson/TypeInfoCollection.java,34,throw new IllegalArgumentException(
True,gson/src/main/java/com/google/gson/TypeInfoCollection.java,gson/src/main/java/com/google/gson/TypeInfoCollection.java,35,"""Collection objects need to be parameterized unless you use a custom serializer. """
True,gson/src/main/java/com/google/gson/TypeInfoCollection.java,gson/src/main/java/com/google/gson/TypeInfoCollection.java,36,"+ ""Use the com.google.gson.reflect.TypeToken to extract the ParameterizedType."");"
True,gson/src/main/java/com/google/gson/TypeInfoCollection.java,gson/src/main/java/com/google/gson/TypeInfoCollection.java,38,TypeInfo rawType = new TypeInfo(collectionType);
True,gson/src/main/java/com/google/gson/TypeInfoCollection.java,gson/src/main/java/com/google/gson/TypeInfoCollection.java,39,Preconditions.checkArgument(Collection.class.isAssignableFrom(rawType.getRawClass()));
True,gson/src/main/java/com/google/gson/TypeInfoCollection.java,gson/src/main/java/com/google/gson/TypeInfoCollection.java,40,this.collectionType = (ParameterizedType) collectionType;
True,gson/src/main/java/com/google/gson/TypeInfoCollection.java,gson/src/main/java/com/google/gson/TypeInfoCollection.java,43,public Type getElementType() {
True,gson/src/main/java/com/google/gson/TypeInfoCollection.java,gson/src/main/java/com/google/gson/TypeInfoCollection.java,44,return collectionType.getActualTypeArguments()[0];
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,25,import com.google.gson.GsonBuilder;
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,26,import com.google.gson.InstanceCreator;
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,79,public void testMapSubclassSerialization() {
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,80,MyMap map = new MyMap();
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,81,"map.put(""a"", ""b"");"
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,82,String json = gson.toJson(map);
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,83,"assertTrue(json.contains(""\""a\"":\""b\""""));"
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,86,public void testMapSubclassDeserialization() {
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,87,"Gson gson = new GsonBuilder().registerTypeAdapter(MyMap.class, new InstanceCreator<MyMap>(){"
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,88,public MyMap createInstance(Type type) {
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,89,return new MyMap();
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,91,}).create();
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,92,"String json = ""{\""a\"":1,\""b\"":2}"";"
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,93,"MyMap map = gson.fromJson(json, MyMap.class);"
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,94,"assertEquals(""1"", map.get(""a""));"
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,95,"assertEquals(""2"", map.get(""b""));"
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,98,"private static class MyMap extends LinkedHashMap<String, String> {"
True,gson/src/test/java/com/google/gson/functional/MapTest.java,gson/src/test/java/com/google/gson/functional/MapTest.java,99,int foo = 10;

is_addition,old_file_path,new_file_path,line_num,content
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,143,private boolean lenient;
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,176,"* Configure this writer to relax its syntax rules. By default, this writer"
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,177,* only emits well-formed JSON as specified by <a
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,178,"* href=""http://www.ietf.org/rfc/rfc4627.txt"">RFC 4627</a>. Setting the writer"
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,179,* to lenient permits the following:
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,180,* <ul>
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,181,"*   <li>Top-level values of any type. With strict writing, the top-level"
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,182,*       value must be an object or an array.
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,183,*   <li>Numbers may be {@link Double#isNaN() NaNs} or {@link
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,184,*       Double#isInfinite() infinities}.
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,185,* </ul>
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,187,public void setLenient(boolean lenient) {
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,188,this.lenient = lenient;
False,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,347,"f (string.equals(""-Infinity"") || string.equals(""Infinity"") || string.equals(""NaN"")) {"
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,365,if (!lenient
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,366,"&& (string.equals(""-Infinity"") || string.equals(""Infinity"") || string.equals(""NaN""))) {"
False,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,387,"f (c == '""' || c == '\\') {"
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,406,switch (c) {
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,407,"case '""':"
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,408,case '\\':
False,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,390, else if (c <= 0x1F) {
False,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,391,"ut.write(String.format(""\\u%04x"", (int) c));"
False,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,392, else {
False,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,393,ut.write(c);
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,411,break;
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,413,case '\t':
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,414,"out.write(""\\t"");"
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,415,break;
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,417,case '\b':
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,418,"out.write(""\\b"");"
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,419,break;
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,421,case '\n':
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,422,"out.write(""\\n"");"
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,423,break;
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,425,case '\r':
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,426,"out.write(""\\r"");"
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,427,break;
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,429,case '\f':
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,430,"out.write(""\\f"");"
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,431,break;
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,433,default:
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,434,if (c <= 0x1F) {
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,435,"out.write(String.format(""\\u%04x"", (int) c));"
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,436,} else {
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,437,out.write(c);
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,439,break;
False,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,436,f (!root) {
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,482,if (!lenient && !root) {
False,gson/src/test/java/com/google/gson/JsonObjectTest.java,gson/src/test/java/com/google/gson/JsonObjectTest.java,62,ry {
False,gson/src/test/java/com/google/gson/JsonObjectTest.java,gson/src/test/java/com/google/gson/JsonObjectTest.java,63,"sonObj.add("""", JsonNull.createJsonNull());"
False,gson/src/test/java/com/google/gson/JsonObjectTest.java,gson/src/test/java/com/google/gson/JsonObjectTest.java,64,"ail(""Should not allow empty property names."");"
False,gson/src/test/java/com/google/gson/JsonObjectTest.java,gson/src/test/java/com/google/gson/JsonObjectTest.java,65, catch (IllegalArgumentException expected) { }
False,gson/src/test/java/com/google/gson/JsonObjectTest.java,gson/src/test/java/com/google/gson/JsonObjectTest.java,67,ry {
False,gson/src/test/java/com/google/gson/JsonObjectTest.java,gson/src/test/java/com/google/gson/JsonObjectTest.java,68,"sonObj.add(""   \t"", JsonNull.createJsonNull());"
False,gson/src/test/java/com/google/gson/JsonObjectTest.java,gson/src/test/java/com/google/gson/JsonObjectTest.java,69,"ail(""Should not allow whitespace only property names."");"
False,gson/src/test/java/com/google/gson/JsonObjectTest.java,gson/src/test/java/com/google/gson/JsonObjectTest.java,70, catch (IllegalArgumentException expected) { }
True,gson/src/test/java/com/google/gson/JsonObjectTest.java,gson/src/test/java/com/google/gson/JsonObjectTest.java,62,"jsonObj.add("""", JsonNull.createJsonNull());"
True,gson/src/test/java/com/google/gson/JsonObjectTest.java,gson/src/test/java/com/google/gson/JsonObjectTest.java,63,"jsonObj.add(""   \t"", JsonNull.createJsonNull());"

is_addition,old_file_path,new_file_path,line_num,content
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,19,mport java.io.EOFException;
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,20,mport java.io.IOException;
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,21,mport java.io.Reader;
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,22,mport java.io.StringReader;
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,23,mport java.io.StringWriter;
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,24,mport java.io.Writer;
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,25,mport java.lang.reflect.Field;
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,26,mport java.lang.reflect.Modifier;
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,27,mport java.lang.reflect.Type;
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,28,mport java.math.BigDecimal;
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,29,mport java.math.BigInteger;
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,30,mport java.util.LinkedList;
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,31,mport java.util.List;
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,32,mport java.util.Map;
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,27,import com.google.gson.internal.bind.DateTypeAdapter;
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,33,import com.google.gson.internal.bind.TimeTypeAdapter;
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,41,import java.io.EOFException;
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,42,import java.io.IOException;
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,43,import java.io.Reader;
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,44,import java.io.StringReader;
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,45,import java.io.StringWriter;
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,46,import java.io.Writer;
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,47,import java.lang.reflect.Field;
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,48,import java.lang.reflect.Modifier;
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,49,import java.lang.reflect.Type;
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,50,import java.math.BigDecimal;
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,51,import java.math.BigInteger;
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,52,import java.util.LinkedList;
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,53,import java.util.List;
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,54,import java.util.Map;
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,258,factory(TypeAdapters.DATE_FACTORY)
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,259,.factory(DateTypeAdapter.FACTORY)
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,260,factory(TypeAdapters.SQL_TIME_FACTORY)
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,261,.factory(TimeTypeAdapter.FACTORY)
True,gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java,2,* Copyright (C) 2011 Google Inc.
True,gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java,5,* you may not use this file except in compliance with the License.
True,gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java,6,* You may obtain a copy of the License at
True,gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java,8,* http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java,13,* See the License for the specific language governing permissions and
True,gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java,14,* limitations under the License.
True,gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java,17,package com.google.gson.internal.bind;
True,gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java,19,import com.google.gson.JsonSyntaxException;
True,gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java,20,import com.google.gson.reflect.TypeToken;
True,gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java,21,import com.google.gson.stream.JsonReader;
True,gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java,22,import com.google.gson.stream.JsonWriter;
True,gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java,23,import java.io.IOException;
True,gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java,24,import java.text.DateFormat;
True,gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java,25,import java.text.ParseException;
True,gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java,26,import java.text.SimpleDateFormat;
True,gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java,27,import java.util.Date;
True,gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java,28,import java.util.Locale;
True,gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java,29,import java.util.TimeZone;
True,gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java,32,"* Adapter for Time. Although this class appears stateless, it is not."
True,gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java,33,"* DateFormat captures its time zone and locale when it is created, which gives"
True,gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java,34,"* this class state. DateFormat isn't thread safe either, so this class has"
True,gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java,35,* to synchronize its read and write methods.
True,gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java,37,public final class DateTypeAdapter extends TypeAdapter<Date> {
True,gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java,38,public static final Factory FACTORY = new Factory() {
True,gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java,39,"@SuppressWarnings(""unchecked"") // we use a runtime check to make sure the 'T's equal"
True,gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java,40,"public <T> TypeAdapter<T> create(MiniGson context, TypeToken<T> typeToken) {"
True,gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java,41,return typeToken.getRawType() == Date.class ? (TypeAdapter<T>) new DateTypeAdapter() : null;
True,gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java,45,private final DateFormat enUsFormat
True,gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java,46,"= DateFormat.getDateTimeInstance(DateFormat.DEFAULT, DateFormat.DEFAULT, Locale.US);"
True,gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java,47,private final DateFormat localFormat
True,gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java,48,"= DateFormat.getDateTimeInstance(DateFormat.DEFAULT, DateFormat.DEFAULT);"
True,gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java,49,private final DateFormat iso8601Format = buildIso8601Format();
True,gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java,51,private static DateFormat buildIso8601Format() {
True,gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java,52,"DateFormat iso8601Format = new SimpleDateFormat(""yyyy-MM-dd'T'HH:mm:ss'Z'"", Locale.US);"
True,gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java,53,"iso8601Format.setTimeZone(TimeZone.getTimeZone(""UTC""));"
True,gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java,54,return iso8601Format;
True,gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java,57,@Override public Date read(JsonReader reader) throws IOException {
True,gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java,58,return deserializeToDate(reader.nextString());
True,gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java,61,private synchronized Date deserializeToDate(String json) {
True,gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java,62,try {
True,gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java,63,return localFormat.parse(json);
True,gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java,64,} catch (ParseException ignored) {
True,gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java,66,try {
True,gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java,67,return enUsFormat.parse(json);
True,gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java,68,} catch (ParseException ignored) {
True,gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java,70,try {
True,gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java,71,return iso8601Format.parse(json);
True,gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java,72,} catch (ParseException e) {
True,gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java,73,"throw new JsonSyntaxException(json, e);"
True,gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java,77,"@Override public synchronized void write(JsonWriter writer, Date value) throws IOException {"
True,gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java,78,String dateFormatAsString = enUsFormat.format(value);
True,gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java,79,writer.value(dateFormatAsString);
True,gson/src/main/java/com/google/gson/internal/bind/TimeTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/TimeTypeAdapter.java,2,* Copyright (C) 2011 Google Inc.
True,gson/src/main/java/com/google/gson/internal/bind/TimeTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/TimeTypeAdapter.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/main/java/com/google/gson/internal/bind/TimeTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/TimeTypeAdapter.java,5,* you may not use this file except in compliance with the License.
True,gson/src/main/java/com/google/gson/internal/bind/TimeTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/TimeTypeAdapter.java,6,* You may obtain a copy of the License at
True,gson/src/main/java/com/google/gson/internal/bind/TimeTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/TimeTypeAdapter.java,8,* http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/main/java/com/google/gson/internal/bind/TimeTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/TimeTypeAdapter.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/main/java/com/google/gson/internal/bind/TimeTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/TimeTypeAdapter.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/main/java/com/google/gson/internal/bind/TimeTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/TimeTypeAdapter.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/main/java/com/google/gson/internal/bind/TimeTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/TimeTypeAdapter.java,13,* See the License for the specific language governing permissions and
True,gson/src/main/java/com/google/gson/internal/bind/TimeTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/TimeTypeAdapter.java,14,* limitations under the License.
True,gson/src/main/java/com/google/gson/internal/bind/TimeTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/TimeTypeAdapter.java,17,package com.google.gson.internal.bind;
True,gson/src/main/java/com/google/gson/internal/bind/TimeTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/TimeTypeAdapter.java,19,import com.google.gson.JsonSyntaxException;
True,gson/src/main/java/com/google/gson/internal/bind/TimeTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/TimeTypeAdapter.java,20,import com.google.gson.reflect.TypeToken;
True,gson/src/main/java/com/google/gson/internal/bind/TimeTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/TimeTypeAdapter.java,21,import com.google.gson.stream.JsonReader;
True,gson/src/main/java/com/google/gson/internal/bind/TimeTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/TimeTypeAdapter.java,22,import com.google.gson.stream.JsonWriter;
True,gson/src/main/java/com/google/gson/internal/bind/TimeTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/TimeTypeAdapter.java,23,import java.io.IOException;
True,gson/src/main/java/com/google/gson/internal/bind/TimeTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/TimeTypeAdapter.java,24,import java.sql.Time;
True,gson/src/main/java/com/google/gson/internal/bind/TimeTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/TimeTypeAdapter.java,25,import java.text.DateFormat;
True,gson/src/main/java/com/google/gson/internal/bind/TimeTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/TimeTypeAdapter.java,26,import java.text.ParseException;
True,gson/src/main/java/com/google/gson/internal/bind/TimeTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/TimeTypeAdapter.java,27,import java.text.SimpleDateFormat;
True,gson/src/main/java/com/google/gson/internal/bind/TimeTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/TimeTypeAdapter.java,28,import java.util.Date;
True,gson/src/main/java/com/google/gson/internal/bind/TimeTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/TimeTypeAdapter.java,31,"* Adapter for Time. Although this class appears stateless, it is not."
True,gson/src/main/java/com/google/gson/internal/bind/TimeTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/TimeTypeAdapter.java,32,"* DateFormat captures its time zone and locale when it is created, which gives"
True,gson/src/main/java/com/google/gson/internal/bind/TimeTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/TimeTypeAdapter.java,33,"* this class state. DateFormat isn't thread safe either, so this class has"
True,gson/src/main/java/com/google/gson/internal/bind/TimeTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/TimeTypeAdapter.java,34,* to synchronize its read and write methods.
True,gson/src/main/java/com/google/gson/internal/bind/TimeTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/TimeTypeAdapter.java,36,public final class TimeTypeAdapter extends TypeAdapter<Time> {
True,gson/src/main/java/com/google/gson/internal/bind/TimeTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/TimeTypeAdapter.java,37,public static final Factory FACTORY = new Factory() {
True,gson/src/main/java/com/google/gson/internal/bind/TimeTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/TimeTypeAdapter.java,38,"@SuppressWarnings(""unchecked"") // we use a runtime check to make sure the 'T's equal"
True,gson/src/main/java/com/google/gson/internal/bind/TimeTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/TimeTypeAdapter.java,39,"public <T> TypeAdapter<T> create(MiniGson context, TypeToken<T> typeToken) {"
True,gson/src/main/java/com/google/gson/internal/bind/TimeTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/TimeTypeAdapter.java,40,return typeToken.getRawType() == Time.class ? (TypeAdapter<T>) new TimeTypeAdapter() : null;
True,gson/src/main/java/com/google/gson/internal/bind/TimeTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/TimeTypeAdapter.java,44,"private final DateFormat format = new SimpleDateFormat(""hh:mm:ss a"");"
True,gson/src/main/java/com/google/gson/internal/bind/TimeTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/TimeTypeAdapter.java,46,@Override public synchronized Time read(JsonReader reader) throws IOException {
True,gson/src/main/java/com/google/gson/internal/bind/TimeTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/TimeTypeAdapter.java,47,try {
True,gson/src/main/java/com/google/gson/internal/bind/TimeTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/TimeTypeAdapter.java,48,Date date = format.parse(reader.nextString());
True,gson/src/main/java/com/google/gson/internal/bind/TimeTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/TimeTypeAdapter.java,49,return new Time(date.getTime());
True,gson/src/main/java/com/google/gson/internal/bind/TimeTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/TimeTypeAdapter.java,50,} catch (ParseException e) {
True,gson/src/main/java/com/google/gson/internal/bind/TimeTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/TimeTypeAdapter.java,51,throw new JsonSyntaxException(e);
True,gson/src/main/java/com/google/gson/internal/bind/TimeTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/TimeTypeAdapter.java,55,"@Override public synchronized void write(JsonWriter writer, Time value) throws IOException {"
True,gson/src/main/java/com/google/gson/internal/bind/TimeTypeAdapter.java,gson/src/main/java/com/google/gson/internal/bind/TimeTypeAdapter.java,56,writer.value(format.format(value));
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,19,import com.google.gson.JsonIOException;
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,20,import com.google.gson.JsonSyntaxException;
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,21,import com.google.gson.internal.LazilyParsedNumber;
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,22,import com.google.gson.reflect.TypeToken;
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,23,import com.google.gson.stream.JsonReader;
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,24,import com.google.gson.stream.JsonToken;
True,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,25,import com.google.gson.stream.JsonWriter;
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,24,mport java.sql.Time;
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,35,mport java.util.TimeZone;
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,38,mport com.google.gson.JsonIOException;
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,39,mport com.google.gson.JsonSyntaxException;
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,40,mport com.google.gson.internal.LazilyParsedNumber;
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,41,mport com.google.gson.reflect.TypeToken;
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,42,mport com.google.gson.stream.JsonReader;
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,43,mport com.google.gson.stream.JsonToken;
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,44,mport com.google.gson.stream.JsonWriter;
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,415,rivate static DateFormat buildIso8601Format() {
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,416,"ateFormat iso8601Format = new SimpleDateFormat(""yyyy-MM-dd'T'HH:mm:ss'Z'"", Locale.US);"
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,417,"so8601Format.setTimeZone(TimeZone.getTimeZone(""UTC""));"
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,418,eturn iso8601Format;
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,421,ublic static final TypeAdapter<Date> DATE = new TypeAdapter<Date>() {
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,422,rivate final DateFormat enUsFormat =
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,423,"ateFormat.getDateTimeInstance(DateFormat.DEFAULT, DateFormat.DEFAULT, Locale.US);"
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,424,rivate final DateFormat localFormat =
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,425,"ateFormat.getDateTimeInstance(DateFormat.DEFAULT, DateFormat.DEFAULT);"
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,426,rivate final DateFormat iso8601Format = buildIso8601Format();
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,427,Override
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,428,ublic Date read(JsonReader reader) throws IOException {
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,429,eturn deserializeToDate(reader.nextString());
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,432,rivate Date deserializeToDate(String json) {
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,433,ynchronized (localFormat) {
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,434,ry {
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,435,eturn localFormat.parse(json);
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,436, catch (ParseException ignored) {
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,438,ry {
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,439,eturn enUsFormat.parse(json);
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,440, catch (ParseException ignored) {
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,442,ry {
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,443,eturn iso8601Format.parse(json);
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,444, catch (ParseException e) {
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,445,"hrow new JsonSyntaxException(json, e);"
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,450,Override
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,451,"ublic void write(JsonWriter writer, Date value) throws IOException {"
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,452,ynchronized (localFormat) {
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,453,tring dateFormatAsString = enUsFormat.format(value);
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,454,riter.value(dateFormatAsString);
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,459,"ublic static final TypeAdapter.Factory DATE_FACTORY = newFactory(Date.class, DATE);"
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,463,ublic static final TypeAdapter<Time> SQL_TIME = new TypeAdapter<Time>() {
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,464,"rivate final DateFormat format = new SimpleDateFormat(""hh:mm:ss a"");"
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,465,Override
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,466,ublic Time read(JsonReader reader) throws IOException {
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,467,ry {
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,468,ynchronized (format) {
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,469,ate date = format.parse(reader.nextString());
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,470,eturn new java.sql.Time(date.getTime());
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,472, catch (ParseException e) {
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,473,hrow new JsonSyntaxException(e);
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,476,Override
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,477,"ublic void write(JsonWriter writer, Time value) throws IOException {"
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,478,riter.value(format.format(value));
False,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java,482,"ublic static final TypeAdapter.Factory SQL_TIME_FACTORY = newFactory(Time.class, SQL_TIME);"

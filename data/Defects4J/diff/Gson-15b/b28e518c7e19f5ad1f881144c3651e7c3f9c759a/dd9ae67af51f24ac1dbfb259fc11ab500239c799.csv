is_addition,old_file_path,new_file_path,line_num,content
False,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,19,mport java.io.IOException;
False,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,20,mport java.io.Reader;
False,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,21,mport java.io.StringReader;
False,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,22,mport java.io.StringWriter;
False,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,23,mport java.io.Writer;
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,25,import java.io.IOException;
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,26,import java.io.Reader;
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,27,import java.io.StringReader;
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,28,import java.io.StringWriter;
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,29,import java.io.Writer;
False,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,97, <h3>JSON Conversion</h3>
False,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,98, <p>A type adapter registered with Gson is automatically invoked while serializing
False,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,99," or deserializing JSON. However, you can also use type adapters directly to serialize"
False,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,100, and deserialize JSON. Here is an example for deserialization: <pre>   {@code
False,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,102,"   String json = ""{'origin':'0,0','points':['1,2','3,4']}"";"
False,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,103,   TypeAdapter<Graph> graphAdapter = gson.getAdapter(Graph.class);
False,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,104,   Graph graph = graphAdapter.fromJson(json);
False,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,105, }</pre>
False,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,106, And an example for serialization: <pre>   {@code
False,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,108,   Graph graph = new Graph(...);
False,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,109,   TypeAdapter<Graph> graphAdapter = gson.getAdapter(Graph.class);
False,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,110,   String json = graphAdapter.toJson(graph);
False,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,111, }</pre>
False,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,113," <p>Type adapters are <strong>type-specific</strong>. For example, a {@code"
False,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,114, TypeAdapter<Date>} can convert {@code Date} instances to JSON and JSON to
False,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,115," instances of {@code Date}, but cannot convert any other types."
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,98,// non-Javadoc:
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,100,// <h3>JSON Conversion</h3>
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,101,// <p>A type adapter registered with Gson is automatically invoked while serializing
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,102,"// or deserializing JSON. However, you can also use type adapters directly to serialize"
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,103,// and deserialize JSON. Here is an example for deserialization: <pre>   {@code
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,105,"//   String json = ""{'origin':'0,0','points':['1,2','3,4']}"";"
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,106,//   TypeAdapter<Graph> graphAdapter = gson.getAdapter(Graph.class);
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,107,//   Graph graph = graphAdapter.fromJson(json);
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,108,// }</pre>
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,109,// And an example for serialization: <pre>   {@code
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,111,//   Graph graph = new Graph(...);
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,112,//   TypeAdapter<Graph> graphAdapter = gson.getAdapter(Graph.class);
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,113,//   String json = graphAdapter.toJson(graph);
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,114,// }</pre>
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,116,"// <p>Type adapters are <strong>type-specific</strong>. For example, a {@code"
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,117,// TypeAdapter<Date>} can convert {@code Date} instances to JSON and JSON to
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,118,"// instances of {@code Date}, but cannot convert any other types."
False,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,139,"ublic final void toJson(Writer out, T value) throws IOException {"
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,140,"/*public*/ final void toJson(Writer out, T value) throws IOException {"
False,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,184,ublic TypeAdapter<T> nullSafe() {
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,185,public final TypeAdapter<T> nullSafe() {
False,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,212,ublic final String toJson(T value) throws IOException {
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,213,/*public*/ final String toJson(T value) throws IOException {
False,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,224,ublic JsonElement toJsonTree(T value) {
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,225,/*public*/ final JsonElement toJsonTree(T value) {
False,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,251,ublic final T fromJson(Reader in) throws IOException {
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,252,/*public*/ final T fromJson(Reader in) throws IOException {
False,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,265,ublic final T fromJson(String json) throws IOException {
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,266,/*public*/ final T fromJson(String json) throws IOException {
False,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,274,ublic T fromJsonTree(JsonElement jsonTree) {
True,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,275,/*public*/ final T fromJsonTree(JsonElement jsonTree) {
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,21,import com.google.gson.JsonIOException;
False,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,218,sonElement keyElement = keyTypeAdapter.toJsonTree(entry.getKey());
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,219,"JsonElement keyElement = toJsonTree(keyTypeAdapter, entry.getKey());"
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,265,// TODO: remove this when TypeAdapter.toJsonTree() is public
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,266,"private static <T> JsonElement toJsonTree(TypeAdapter<T> typeAdapter, T value) {"
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,267,try {
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,268,JsonElementWriter jsonWriter = new JsonElementWriter();
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,269,jsonWriter.setLenient(true);
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,270,"typeAdapter.write(jsonWriter, value);"
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,271,return jsonWriter.get();
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,272,} catch (IOException e) {
True,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java,273,throw new JsonIOException(e);
True,gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java,19,import com.google.gson.Gson;
True,gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java,20,import com.google.gson.GsonBuilder;
True,gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java,21,import com.google.gson.JsonSyntaxException;
True,gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java,22,import com.google.gson.TypeAdapter;
True,gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java,23,import com.google.gson.reflect.TypeToken;
True,gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java,24,import com.google.gson.stream.JsonReader;
True,gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java,25,import com.google.gson.stream.JsonWriter;
True,gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java,27,import java.io.StringReader;
True,gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java,28,import java.io.StringWriter;
False,gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java,29,mport com.google.gson.Gson;
False,gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java,30,mport com.google.gson.GsonBuilder;
False,gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java,31,mport com.google.gson.JsonSyntaxException;
False,gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java,32,mport com.google.gson.TypeAdapter;
False,gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java,33,mport com.google.gson.reflect.TypeToken;
False,gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java,34,mport com.google.gson.stream.JsonReader;
False,gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java,35,mport com.google.gson.stream.JsonWriter;
False,gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java,50,"ruckAdapter.toJson(truck).replace('\""', '\''));"
True,gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java,50,"toJson(truckAdapter, truck).replace('\""', '\''));"
False,gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java,56,ruck truck = truckAdapter.fromJson(json);
True,gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java,56,"Truck truck = fromJson(truckAdapter, json);"
False,gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java,65,"ruckAdapter.toJson(truck).replace('\""', '\''));"
True,gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java,65,"toJson(truckAdapter, truck).replace('\""', '\''));"
False,gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java,69,"ruck truck = truckAdapter.fromJson(""{'horsePower':0.0,'passengers':null}"");"
True,gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java,69,"Truck truck = fromJson(truckAdapter, ""{'horsePower':0.0,'passengers':null}"");"
False,gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java,77,"ruckAdapter.toJson(truck).replace('\""', '\''));"
True,gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java,77,"toJson(truckAdapter, truck).replace('\""', '\''));"
False,gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java,81,"ruck truck = truckAdapter.fromJson(""{'horsePower':0.0,'passengers':[null]}"");"
True,gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java,81,"Truck truck = fromJson(truckAdapter, ""{'horsePower':0.0,'passengers':[null]}"");"
False,gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java,90,"ruckAdapter.toJson(truck).replace('\""', '\''));"
True,gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java,90,"toJson(truckAdapter, truck).replace('\""', '\''));"
False,gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java,95,"ruck truck = truckAdapter.fromJson(""{'horsePower':0.0,'passengers':['Jesse','Jodie']}"");"
True,gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java,95,"Truck truck = fromJson(truckAdapter, ""{'horsePower':0.0,'passengers':['Jesse','Jodie']}"");"
False,gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java,117,"ssertEquals(""{'a':5.0,'b':10.0}"", mapAdapter.toJson(map).replace('""', '\''));"
True,gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java,117,"assertEquals(""{'a':5.0,'b':10.0}"", toJson(mapAdapter, map).replace('""', '\''));"
False,gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java,124,"ssertEquals(map, mapAdapter.fromJson(""{'a':5.0,'b':10.0}""));"
True,gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java,124,"assertEquals(map, fromJson(mapAdapter, ""{'a':5.0,'b':10.0}""));"
False,gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java,129,"ssertEquals(""[1.0,2.0,3.0]"", arrayAdapter.toJson(new double[]{1.0, 2.0, 3.0}));"
True,gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java,129,"assertEquals(""[1.0,2.0,3.0]"", toJson(arrayAdapter, new double[]{1.0, 2.0, 3.0}));"
False,gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java,134,"ouble[] array = arrayAdapter.fromJson(""[1.0,2.0,3.0]"");"
True,gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java,134,"double[] array = fromJson(arrayAdapter, ""[1.0,2.0,3.0]"");"
False,gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java,141,"ssertEquals(""[[1.0,2.0],[3.0]]"", arrayAdapter.toJson(array));"
True,gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java,141,"assertEquals(""[[1.0,2.0],[3.0]]"", toJson(arrayAdapter, array));"
False,gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java,146,"ouble[][] array = arrayAdapter.fromJson(""[[1.0,2.0],[3.0]]"");"
True,gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java,146,"double[][] array = fromJson(arrayAdapter, ""[[1.0,2.0],[3.0]]"");"
False,gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java,194,"odeAdapter.toJson(root).replace('""', '\''));"
True,gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java,194,"toJson(nodeAdapter, root).replace('""', '\''));"
False,gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java,210,ublic Person() {} // TODO: use Joel's constructor code so we don't need this
False,gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java,229,ublic Node() {} // TODO: use Joel's constructor code so we don't need this
True,gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java,229,// TODO: remove this when TypeAdapter.toJson() is public
True,gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java,230,"private static <T> String toJson(TypeAdapter<T> typeAdapter, T value) throws IOException {"
True,gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java,231,StringWriter stringWriter = new StringWriter();
True,gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java,232,JsonWriter writer = new JsonWriter(stringWriter);
True,gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java,233,"typeAdapter.write(writer, value);"
True,gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java,234,return stringWriter.toString();
True,gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java,237,// TODO: remove this when TypeAdapter.fromJson() is public
True,gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java,238,"private <T> T fromJson(TypeAdapter<T> typeAdapter, String json) throws IOException {"
True,gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java,239,JsonReader reader = new JsonReader(new StringReader(json));
True,gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java,240,reader.setLenient(true); // TODO: non-lenient?
True,gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java,241,return typeAdapter.read(reader);

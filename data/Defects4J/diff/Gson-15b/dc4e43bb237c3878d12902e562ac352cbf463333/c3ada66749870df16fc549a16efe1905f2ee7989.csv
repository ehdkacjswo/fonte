is_addition,old_file_path,new_file_path,line_num,content
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,127,private final FieldNamingStrategy fieldNamingPolicy;
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,197,this.fieldNamingPolicy = fieldNamingPolicy;
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,202,factories.add(TypeAdapters.JSON_ELEMENT_FACTORY);
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,203,factories.add(ObjectTypeAdapter.FACTORY);
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,205,// user's type adapters
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,206,factories.addAll(typeAdapterFactories);
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,208,// type adapters for basic platform types
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,211,actories.add(excluder);
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,216,actories.add(TypeAdapters.JSON_ELEMENT_FACTORY);
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,217,actories.add(ObjectTypeAdapter.FACTORY);
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,219,/ user's type adapters
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,220,actories.addAll(typeAdapterFactories);
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,222,/ built-in type adapters that can be overridden
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,225,actories.add(new CollectionTypeAdapterFactory(constructorConstructor));
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,237,"actories.add(new MapTypeAdapterFactory(constructorConstructor, complexMapKeySerialization));"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,241,// the excluder must precede all adapters that handle user-defined types
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,242,factories.add(excluder);
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,244,// type adapters for composite and user-defined types
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,245,factories.add(new CollectionTypeAdapterFactory(constructorConstructor));
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,246,"factories.add(new MapTypeAdapterFactory(constructorConstructor, complexMapKeySerialization));"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,254,* Returns the field naming policy used to translate Java field names to JSON
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,255,* property names.
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,257,public FieldNamingStrategy getFieldNamingPolicy() {
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,258,return fieldNamingPolicy;
False,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,31,mport com.google.gson.internal.Primitives;
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,437,* <p>This registers the type specified and no other types: you must manually register related
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,438,"* types! For example, applications registering {@code boolean.class} should also register {@code"
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,439,* Boolean.class}.
False,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,449,f (Primitives.isPrimitive(type) || Primitives.isWrapperType(type) || type == String.class) {
False,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,450,hrow new IllegalArgumentException(
False,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,451,"Cannot register type adapters for "" + type);"
False,gson/src/test/java/com/google/gson/GsonBuilderTest.java,gson/src/test/java/com/google/gson/GsonBuilderTest.java,55,ublic void testRegisterTypeAdapterForUnsupportedType() {
True,gson/src/test/java/com/google/gson/GsonBuilderTest.java,gson/src/test/java/com/google/gson/GsonBuilderTest.java,55,public void testRegisterTypeAdapterForCoreType() {
False,gson/src/test/java/com/google/gson/GsonBuilderTest.java,gson/src/test/java/com/google/gson/GsonBuilderTest.java,65,ry {
False,gson/src/test/java/com/google/gson/GsonBuilderTest.java,gson/src/test/java/com/google/gson/GsonBuilderTest.java,66,"ew GsonBuilder().registerTypeAdapter(type, NULL_TYPE_ADAPTER);"
False,gson/src/test/java/com/google/gson/GsonBuilderTest.java,gson/src/test/java/com/google/gson/GsonBuilderTest.java,67,ail(type.toString());
False,gson/src/test/java/com/google/gson/GsonBuilderTest.java,gson/src/test/java/com/google/gson/GsonBuilderTest.java,68, catch (IllegalArgumentException e) {
True,gson/src/test/java/com/google/gson/GsonBuilderTest.java,gson/src/test/java/com/google/gson/GsonBuilderTest.java,65,"new GsonBuilder().registerTypeAdapter(type, NULL_TYPE_ADAPTER);"
True,gson/src/test/java/com/google/gson/OverrideCoreTypeAdaptersTest.java,gson/src/test/java/com/google/gson/OverrideCoreTypeAdaptersTest.java,2,* Copyright (C) 2012 Google Inc.
True,gson/src/test/java/com/google/gson/OverrideCoreTypeAdaptersTest.java,gson/src/test/java/com/google/gson/OverrideCoreTypeAdaptersTest.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/test/java/com/google/gson/OverrideCoreTypeAdaptersTest.java,gson/src/test/java/com/google/gson/OverrideCoreTypeAdaptersTest.java,5,* you may not use this file except in compliance with the License.
True,gson/src/test/java/com/google/gson/OverrideCoreTypeAdaptersTest.java,gson/src/test/java/com/google/gson/OverrideCoreTypeAdaptersTest.java,6,* You may obtain a copy of the License at
True,gson/src/test/java/com/google/gson/OverrideCoreTypeAdaptersTest.java,gson/src/test/java/com/google/gson/OverrideCoreTypeAdaptersTest.java,8,* http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/test/java/com/google/gson/OverrideCoreTypeAdaptersTest.java,gson/src/test/java/com/google/gson/OverrideCoreTypeAdaptersTest.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/test/java/com/google/gson/OverrideCoreTypeAdaptersTest.java,gson/src/test/java/com/google/gson/OverrideCoreTypeAdaptersTest.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/test/java/com/google/gson/OverrideCoreTypeAdaptersTest.java,gson/src/test/java/com/google/gson/OverrideCoreTypeAdaptersTest.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/test/java/com/google/gson/OverrideCoreTypeAdaptersTest.java,gson/src/test/java/com/google/gson/OverrideCoreTypeAdaptersTest.java,13,* See the License for the specific language governing permissions and
True,gson/src/test/java/com/google/gson/OverrideCoreTypeAdaptersTest.java,gson/src/test/java/com/google/gson/OverrideCoreTypeAdaptersTest.java,14,* limitations under the License.
True,gson/src/test/java/com/google/gson/OverrideCoreTypeAdaptersTest.java,gson/src/test/java/com/google/gson/OverrideCoreTypeAdaptersTest.java,17,package com.google.gson;
True,gson/src/test/java/com/google/gson/OverrideCoreTypeAdaptersTest.java,gson/src/test/java/com/google/gson/OverrideCoreTypeAdaptersTest.java,19,import com.google.gson.stream.JsonReader;
True,gson/src/test/java/com/google/gson/OverrideCoreTypeAdaptersTest.java,gson/src/test/java/com/google/gson/OverrideCoreTypeAdaptersTest.java,20,import com.google.gson.stream.JsonWriter;
True,gson/src/test/java/com/google/gson/OverrideCoreTypeAdaptersTest.java,gson/src/test/java/com/google/gson/OverrideCoreTypeAdaptersTest.java,21,import java.io.IOException;
True,gson/src/test/java/com/google/gson/OverrideCoreTypeAdaptersTest.java,gson/src/test/java/com/google/gson/OverrideCoreTypeAdaptersTest.java,22,import java.util.Locale;
True,gson/src/test/java/com/google/gson/OverrideCoreTypeAdaptersTest.java,gson/src/test/java/com/google/gson/OverrideCoreTypeAdaptersTest.java,23,import junit.framework.TestCase;
True,gson/src/test/java/com/google/gson/OverrideCoreTypeAdaptersTest.java,gson/src/test/java/com/google/gson/OverrideCoreTypeAdaptersTest.java,26,* @author Jesse Wilson
True,gson/src/test/java/com/google/gson/OverrideCoreTypeAdaptersTest.java,gson/src/test/java/com/google/gson/OverrideCoreTypeAdaptersTest.java,28,public class OverrideCoreTypeAdaptersTest extends TestCase {
True,gson/src/test/java/com/google/gson/OverrideCoreTypeAdaptersTest.java,gson/src/test/java/com/google/gson/OverrideCoreTypeAdaptersTest.java,29,private static final TypeAdapter<Boolean> booleanAsIntAdapter = new TypeAdapter<Boolean>() {
True,gson/src/test/java/com/google/gson/OverrideCoreTypeAdaptersTest.java,gson/src/test/java/com/google/gson/OverrideCoreTypeAdaptersTest.java,30,"@Override public void write(JsonWriter out, Boolean value) throws IOException {"
True,gson/src/test/java/com/google/gson/OverrideCoreTypeAdaptersTest.java,gson/src/test/java/com/google/gson/OverrideCoreTypeAdaptersTest.java,31,out.value(value ? 1 : 0);
True,gson/src/test/java/com/google/gson/OverrideCoreTypeAdaptersTest.java,gson/src/test/java/com/google/gson/OverrideCoreTypeAdaptersTest.java,33,@Override public Boolean read(JsonReader in) throws IOException {
True,gson/src/test/java/com/google/gson/OverrideCoreTypeAdaptersTest.java,gson/src/test/java/com/google/gson/OverrideCoreTypeAdaptersTest.java,34,int value = in.nextInt();
True,gson/src/test/java/com/google/gson/OverrideCoreTypeAdaptersTest.java,gson/src/test/java/com/google/gson/OverrideCoreTypeAdaptersTest.java,35,return value != 0;
True,gson/src/test/java/com/google/gson/OverrideCoreTypeAdaptersTest.java,gson/src/test/java/com/google/gson/OverrideCoreTypeAdaptersTest.java,39,private static final TypeAdapter<String> swapCaseStringAdapter = new TypeAdapter<String>() {
True,gson/src/test/java/com/google/gson/OverrideCoreTypeAdaptersTest.java,gson/src/test/java/com/google/gson/OverrideCoreTypeAdaptersTest.java,40,"@Override public void write(JsonWriter out, String value) throws IOException {"
True,gson/src/test/java/com/google/gson/OverrideCoreTypeAdaptersTest.java,gson/src/test/java/com/google/gson/OverrideCoreTypeAdaptersTest.java,41,out.value(value.toUpperCase(Locale.US));
True,gson/src/test/java/com/google/gson/OverrideCoreTypeAdaptersTest.java,gson/src/test/java/com/google/gson/OverrideCoreTypeAdaptersTest.java,43,@Override public String read(JsonReader in) throws IOException {
True,gson/src/test/java/com/google/gson/OverrideCoreTypeAdaptersTest.java,gson/src/test/java/com/google/gson/OverrideCoreTypeAdaptersTest.java,44,return in.nextString().toLowerCase(Locale.US);
True,gson/src/test/java/com/google/gson/OverrideCoreTypeAdaptersTest.java,gson/src/test/java/com/google/gson/OverrideCoreTypeAdaptersTest.java,48,public void testOverrideWrapperBooleanAdapter() {
True,gson/src/test/java/com/google/gson/OverrideCoreTypeAdaptersTest.java,gson/src/test/java/com/google/gson/OverrideCoreTypeAdaptersTest.java,49,Gson gson = new GsonBuilder()
True,gson/src/test/java/com/google/gson/OverrideCoreTypeAdaptersTest.java,gson/src/test/java/com/google/gson/OverrideCoreTypeAdaptersTest.java,50,".registerTypeAdapter(Boolean.class, booleanAsIntAdapter)"
True,gson/src/test/java/com/google/gson/OverrideCoreTypeAdaptersTest.java,gson/src/test/java/com/google/gson/OverrideCoreTypeAdaptersTest.java,51,.create();
True,gson/src/test/java/com/google/gson/OverrideCoreTypeAdaptersTest.java,gson/src/test/java/com/google/gson/OverrideCoreTypeAdaptersTest.java,52,"assertEquals(""true"", gson.toJson(true, boolean.class));"
True,gson/src/test/java/com/google/gson/OverrideCoreTypeAdaptersTest.java,gson/src/test/java/com/google/gson/OverrideCoreTypeAdaptersTest.java,53,"assertEquals(""1"", gson.toJson(true, Boolean.class));"
True,gson/src/test/java/com/google/gson/OverrideCoreTypeAdaptersTest.java,gson/src/test/java/com/google/gson/OverrideCoreTypeAdaptersTest.java,54,"assertEquals(Boolean.TRUE, gson.fromJson(""true"", boolean.class));"
True,gson/src/test/java/com/google/gson/OverrideCoreTypeAdaptersTest.java,gson/src/test/java/com/google/gson/OverrideCoreTypeAdaptersTest.java,55,"assertEquals(Boolean.TRUE, gson.fromJson(""1"", Boolean.class));"
True,gson/src/test/java/com/google/gson/OverrideCoreTypeAdaptersTest.java,gson/src/test/java/com/google/gson/OverrideCoreTypeAdaptersTest.java,58,public void testOverridePrimitiveBooleanAdapter() {
True,gson/src/test/java/com/google/gson/OverrideCoreTypeAdaptersTest.java,gson/src/test/java/com/google/gson/OverrideCoreTypeAdaptersTest.java,59,Gson gson = new GsonBuilder()
True,gson/src/test/java/com/google/gson/OverrideCoreTypeAdaptersTest.java,gson/src/test/java/com/google/gson/OverrideCoreTypeAdaptersTest.java,60,".registerTypeAdapter(boolean.class, booleanAsIntAdapter)"
True,gson/src/test/java/com/google/gson/OverrideCoreTypeAdaptersTest.java,gson/src/test/java/com/google/gson/OverrideCoreTypeAdaptersTest.java,61,.create();
True,gson/src/test/java/com/google/gson/OverrideCoreTypeAdaptersTest.java,gson/src/test/java/com/google/gson/OverrideCoreTypeAdaptersTest.java,62,"assertEquals(""1"", gson.toJson(true, boolean.class));"
True,gson/src/test/java/com/google/gson/OverrideCoreTypeAdaptersTest.java,gson/src/test/java/com/google/gson/OverrideCoreTypeAdaptersTest.java,63,"assertEquals(""true"", gson.toJson(true, Boolean.class));"
True,gson/src/test/java/com/google/gson/OverrideCoreTypeAdaptersTest.java,gson/src/test/java/com/google/gson/OverrideCoreTypeAdaptersTest.java,64,"assertEquals(Boolean.TRUE, gson.fromJson(""1"", boolean.class));"
True,gson/src/test/java/com/google/gson/OverrideCoreTypeAdaptersTest.java,gson/src/test/java/com/google/gson/OverrideCoreTypeAdaptersTest.java,65,"assertEquals(Boolean.TRUE, gson.fromJson(""true"", Boolean.class));"
True,gson/src/test/java/com/google/gson/OverrideCoreTypeAdaptersTest.java,gson/src/test/java/com/google/gson/OverrideCoreTypeAdaptersTest.java,68,public void testOverrideStringAdapter() {
True,gson/src/test/java/com/google/gson/OverrideCoreTypeAdaptersTest.java,gson/src/test/java/com/google/gson/OverrideCoreTypeAdaptersTest.java,69,Gson gson = new GsonBuilder()
True,gson/src/test/java/com/google/gson/OverrideCoreTypeAdaptersTest.java,gson/src/test/java/com/google/gson/OverrideCoreTypeAdaptersTest.java,70,".registerTypeAdapter(String.class, swapCaseStringAdapter)"
True,gson/src/test/java/com/google/gson/OverrideCoreTypeAdaptersTest.java,gson/src/test/java/com/google/gson/OverrideCoreTypeAdaptersTest.java,71,.create();
True,gson/src/test/java/com/google/gson/OverrideCoreTypeAdaptersTest.java,gson/src/test/java/com/google/gson/OverrideCoreTypeAdaptersTest.java,72,"assertEquals(""\""HELLO\"""", gson.toJson(""Hello"", String.class));"
True,gson/src/test/java/com/google/gson/OverrideCoreTypeAdaptersTest.java,gson/src/test/java/com/google/gson/OverrideCoreTypeAdaptersTest.java,73,"assertEquals(""hello"", gson.fromJson(""\""Hello\"""", String.class));"
False,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,207,ublic void testCustomSerializerForbiddenForPrimitives() {
False,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,208,ry {
False,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,209,"ew GsonBuilder().registerTypeAdapter(long.class, new JsonSerializer<Long>() {"
False,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,210,"ublic JsonElement serialize(Long s, Type t, JsonSerializationContext c) {"
False,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,211,hrow new AssertionError();
False,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,214,ail();
False,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,215, catch (IllegalArgumentException expected) {
True,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,207,public void testCustomSerializerInvokedForPrimitives() {
True,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,208,Gson gson = new GsonBuilder()
True,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,209,".registerTypeAdapter(boolean.class, new JsonSerializer<Boolean>() {"
True,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,210,"public JsonElement serialize(Boolean s, Type t, JsonSerializationContext c) {"
True,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,211,return new JsonPrimitive(s ? 1 : 0);
True,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,214,.create();
True,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,215,"assertEquals(""1"", gson.toJson(true, boolean.class));"
True,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,216,"assertEquals(""true"", gson.toJson(true, Boolean.class));"
False,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,219,ublic void testCustomDeserializerForbiddenForPrimitives() {
False,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,220,ry {
False,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,221,"ew GsonBuilder().registerTypeAdapter(long.class, new JsonDeserializer<Long>() {"
False,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,222,"ublic Long deserialize(JsonElement json, Type t, JsonDeserializationContext c) {"
False,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,223,hrow new AssertionError();
False,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,226,ail();
False,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,227, catch (Exception expected) {
True,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,219,public void testCustomDeserializerInvokedForPrimitives() {
True,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,220,Gson gson = new GsonBuilder()
True,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,221,".registerTypeAdapter(boolean.class, new JsonDeserializer() {"
True,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,222,"public Object deserialize(JsonElement json, Type t, JsonDeserializationContext context) {"
True,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,223,return json.getAsInt() != 0;
True,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,226,.create();
True,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,227,"assertEquals(Boolean.TRUE, gson.fromJson(""1"", boolean.class));"
True,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java,228,"assertEquals(Boolean.TRUE, gson.fromJson(""true"", Boolean.class));"
False,gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java,57,"/ 11: 1 list object, and 10 entries. stats not invoked on individual fields of"
False,gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java,58,/ BagOfPrimitives since those are primitives.
False,gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java,59,"ssertEquals(11, stats.numReads);"
False,gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java,60,"ssertEquals(11, stats.numWrites);"
True,gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java,57,"// 11: 1 list object, and 10 entries. stats invoked on all 5 fields"
True,gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java,58,"assertEquals(51, stats.numReads);"
True,gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java,59,"assertEquals(51, stats.numWrites);"
False,gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java,63,ublic void testDelegateNotInvokedOnStrings() {
True,gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java,62,public void testDelegateInvokedOnStrings() {
False,gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java,67,/ Only 1 array object. stats not invoked on individual strings.
False,gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java,68,"ssertEquals(1, stats.numReads);"
False,gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java,69,"ssertEquals(1, stats.numWrites);"
True,gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java,66,// 1 array object with 4 elements.
True,gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java,67,"assertEquals(5, stats.numReads);"
True,gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java,gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java,68,"assertEquals(5, stats.numWrites);"

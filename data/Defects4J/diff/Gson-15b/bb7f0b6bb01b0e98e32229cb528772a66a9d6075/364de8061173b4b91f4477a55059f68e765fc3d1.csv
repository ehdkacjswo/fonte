is_addition,old_file_path,new_file_path,line_num,content
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,446,"oJson(toJsonTree(src, typeOfSrc), writer);"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,446,"toJson(src, typeOfSrc, writer);"
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,489,"sonElement jsonElement = toJsonTree(src, typeOfSrc);"
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,490,"oJson(jsonElement, writer);"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,489,try {
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,490,JsonWriter jsonWriter = newJsonWriter(Streams.writerForAppendable(writer));
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,491,"toJson(src, typeOfSrc, jsonWriter);"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,492,} catch (IOException e) {
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,493,throw new JsonIOException(e);
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,499,"oJson(toJsonTree(src, typeOfSrc), writer);"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,503,TypeAdapter<?> adapter = miniGson.getAdapter(TypeToken.get(typeOfSrc));
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,504,boolean oldLenient = writer.isLenient();
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,505,writer.setLenient(true);
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,506,boolean oldHtmlSafe = writer.isHtmlSafe();
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,507,writer.setHtmlSafe(htmlSafe);
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,508,boolean oldSerializeNulls = writer.getSerializeNulls();
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,509,writer.setSerializeNulls(serializeNulls);
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,510,try {
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,511,"((TypeAdapter<Object>) adapter).write(writer, src);"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,512,} catch (IOException e) {
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,513,throw new JsonIOException(e);
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,514,} finally {
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,515,writer.setLenient(oldLenient);
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,516,writer.setHtmlSafe(oldHtmlSafe);
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,517,writer.setSerializeNulls(oldSerializeNulls);
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,525,f (generateNonExecutableJson) {
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,526,riter.append(JSON_NON_EXECUTABLE_PREFIX);
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,528,sonWriter jsonWriter = new JsonWriter(Streams.writerForAppendable(writer));
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,529,f (prettyPrinting) {
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,530,"sonWriter.setIndent(""  "");"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,544,JsonWriter jsonWriter = newJsonWriter(Streams.writerForAppendable(writer));
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,552,* Returns a new JSON writer configured for this GSON and with the non-execute
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,553,* prefix if that is configured.
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,555,private JsonWriter newJsonWriter(Writer writer) throws IOException {
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,556,if (generateNonExecutableJson) {
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,557,writer.write(JSON_NON_EXECUTABLE_PREFIX);
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,559,JsonWriter jsonWriter = new JsonWriter(writer);
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,560,if (prettyPrinting) {
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,561,"jsonWriter.setIndent(""  "");"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,563,jsonWriter.setSerializeNulls(serializeNulls);
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,564,return jsonWriter;
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,576,boolean oldSerializeNulls = writer.getSerializeNulls();
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,577,writer.setSerializeNulls(serializeNulls);
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,585,writer.setSerializeNulls(oldSerializeNulls);
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,148,private String deferredName;
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,150,private boolean serializeNulls = true;
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,225,* Sets whether object members are serialized when their value is null.
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,226,* This has no impact on array elements. The default is true.
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,228,public final void setSerializeNulls(boolean serializeNulls) {
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,229,this.serializeNulls = serializeNulls;
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,233,* Returns true if object members are serialized when their value is null.
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,234,* This has no impact on array elements. The default is true.
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,236,public final boolean getSerializeNulls() {
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,237,return serializeNulls;
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,247,writeDeferredName();
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,267,writeDeferredName();
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,301,if (deferredName != null) {
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,302,"throw new IllegalStateException(""Dangling name: "" + deferredName);"
False,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,312,eforeName();
False,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,313,tring(name);
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,337,if (deferredName != null) {
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,338,throw new IllegalStateException();
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,340,deferredName = name;
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,344,private void writeDeferredName() throws IOException {
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,345,if (deferredName != null) {
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,346,beforeName();
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,347,string(deferredName);
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,348,deferredName = null;
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,362,writeDeferredName();
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,374,if (deferredName != null) {
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,375,if (serializeNulls) {
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,376,writeDeferredName();
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,377,} else {
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,378,deferredName = null;
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,379,return this; // skip the name and the value
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,393,writeDeferredName();
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,410,writeDeferredName();
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,422,writeDeferredName();
True,gson/src/main/java/com/google/gson/stream/JsonWriter.java,gson/src/main/java/com/google/gson/stream/JsonWriter.java,440,writeDeferredName();
False,gson/src/test/java/com/google/gson/functional/FieldExclusionTest.java,gson/src/test/java/com/google/gson/functional/FieldExclusionTest.java,58,"ssertEquals("""", result);"
True,gson/src/test/java/com/google/gson/functional/FieldExclusionTest.java,gson/src/test/java/com/google/gson/functional/FieldExclusionTest.java,58,"assertEquals(""null"", result);"
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,270,"ssertEquals("""", gson.toJson(new ClassWithNoFields() {"
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,270,"assertEquals(""null"", gson.toJson(new ClassWithNoFields() {"
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,281, Tests that a class field with type Object can be serialized properly.
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,281,* Tests that a class field with type Object can be serialized properly.
False,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,296,ublic void testInnerClassSerialization() {
True,gson/src/test/java/com/google/gson/functional/ObjectTest.java,gson/src/test/java/com/google/gson/functional/ObjectTest.java,296,public void testInnerClassSerialization() {
False,gson/src/test/java/com/google/gson/functional/VersioningTest.java,gson/src/test/java/com/google/gson/functional/VersioningTest.java,85,"ssertEquals("""", gson.toJson(new Version1_2()));"
True,gson/src/test/java/com/google/gson/functional/VersioningTest.java,gson/src/test/java/com/google/gson/functional/VersioningTest.java,85,"assertEquals(""null"", gson.toJson(new Version1_2()));"
True,gson/src/test/java/com/google/gson/internal/bind/JsonElementWriterTest.java,gson/src/test/java/com/google/gson/internal/bind/JsonElementWriterTest.java,27,// TODO: test when serialize nulls is false

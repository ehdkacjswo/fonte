is_addition,old_file_path,new_file_path,line_num,content
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,2,* Copyright (C) 2010 Google Inc.
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,5,* you may not use this file except in compliance with the License.
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,6,* You may obtain a copy of the License at
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,13,* See the License for the specific language governing permissions and
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,14,* limitations under the License.
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,17,package com.google.gson.stream;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,19,import java.io.Closeable;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,20,import java.io.EOFException;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,21,import java.io.IOException;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,22,import java.io.Reader;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,25,"* Reads a JSON (<a href=""http://www.ietf.org/rfc/rfc4627.txt"">RFC 4627</a>)"
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,26,* encoded value as a stream of tokens. This stream includes both literal
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,27,"* values (strings, numbers, booleans, and nulls) as well as the begin and"
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,28,* end delimiters of objects and arrays. The tokens are traversed in
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,29,"* depth-first order, the same order that they appear in the JSON document."
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,30,"* Within JSON objects, name/value pairs are represented by a single token."
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,32,* <h3>Parsing JSON</h3>
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,33,"* To create a recursive descent parser for your own JSON streams, first create"
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,34,* an entry point method that creates a {@code JsonReader}.
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,36,"* <p>Next, create handler methods for each structure in your JSON text. You'll"
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,37,* need a method for each object type and for each array type.
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,38,* <ul>
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,39,"*   <li>Within <strong>array handling</strong> methods, first call {@link"
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,40,*       #beginArray} to consume the array's opening bracket. Then create a
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,41,"*       while loop that accumulates values, terminating when {@link #hasNext}"
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,42,"*       is false. Finally, read the array's closing bracket by calling {@link"
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,43,*       #endArray}.
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,44,"*   <li>Within <strong>object handling</strong> methods, first call {@link"
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,45,*       #beginObject} to consume the object's opening brace. Then create a
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,46,*       while loop that assigns values to local variables based on their name.
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,47,"*       This loop should terminate when {@link #hasNext} is false. Finally,"
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,48,*       read the object's closing brace by calling {@link #endObject}.
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,49,* </ul>
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,50,"* <p>When a nested object or array is encountered, delegate to the"
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,51,* corresponding handler method.
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,53,"* <p>When an unknown name is encountered, strict parsers should fail with an"
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,54,* exception. Lenient parsers should call {@link #skipValue()} to recursively
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,55,"* skip the value's nested tokens, which may otherwise conflict."
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,57,"* <p>If a value may be null, you should first check using {@link #peek()}."
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,58,* Null literals can be consumed using either {@link #nextNull()} or {@link
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,59,* #skipValue()}.
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,61,* <h3>Example</h3>
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,62,* Suppose we'd like to parse a stream of messages such as the following: <pre> {@code
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,65,"*     ""id"": 912345678901,"
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,66,"*     ""text"": ""How do I read a JSON stream in Java?"","
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,67,"*     ""geo"": null,"
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,68,"*     ""user"": {"
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,69,"*       ""name"": ""json_newb"","
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,70,"*       ""followers_count"": 41"
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,74,"*     ""id"": 912345678902,"
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,75,"*     ""text"": ""@json_newb just use JsonReader!"","
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,76,"*     ""geo"": [50.454722, -104.606667],"
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,77,"*     ""user"": {"
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,78,"*       ""name"": ""jesse"","
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,79,"*       ""followers_count"": 2"
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,82,* ]}</pre>
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,83,* This code implements the parser for the above structure: <pre>   {@code
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,85,*   public List<Message> readJsonStream(InputStream in) throws IOException {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,86,"*     JsonReader reader = new JsonReader(new InputStreamReader(in, ""UTF-8""));"
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,87,*     try {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,88,*       return readMessagesArray(reader);
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,89,*     } finally {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,90,*       reader.close();
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,94,*   public List<Message> readMessagesArray(JsonReader reader) throws IOException {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,95,*     List<Message> messages = new ArrayList<Message>();
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,97,*     reader.beginArray();
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,98,*     while (reader.hasNext()) {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,99,*       messages.add(readMessage(reader));
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,101,*     reader.endArray();
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,102,*     return messages;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,105,*   public Message readMessage(JsonReader reader) throws IOException {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,106,*     long id = -1;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,107,*     String text = null;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,108,*     User user = null;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,109,*     List<Double> geo = null;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,111,*     reader.beginObject();
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,112,*     while (reader.hasNext()) {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,113,*       String name = reader.nextName();
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,114,"*       if (name.equals(""id"")) {"
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,115,*         id = reader.nextLong();
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,116,"*       } else if (name.equals(""text"")) {"
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,117,*         text = reader.nextString();
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,118,"*       } else if (name.equals(""geo"") && reader.peek() != JsonToken.NULL) {"
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,119,*         geo = readDoublesArray(reader);
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,120,"*       } else if (name.equals(""user"")) {"
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,121,*         user = readUser(reader);
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,122,*       } else {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,123,*         reader.skipValue();
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,126,*     reader.endObject();
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,127,"*     return new Message(id, text, user, geo);"
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,130,*   public List<Double> readDoublesArray(JsonReader reader) throws IOException {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,131,*     List<Double> doubles = new ArrayList<Double>();
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,133,*     reader.beginArray();
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,134,*     while (reader.hasNext()) {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,135,*       doubles.add(reader.nextDouble());
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,137,*     reader.endArray();
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,138,*     return doubles;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,141,*   public User readUser(JsonReader reader) throws IOException {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,142,*     String username = null;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,143,*     int followersCount = -1;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,145,*     reader.beginObject();
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,146,*     while (reader.hasNext()) {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,147,*       String name = reader.nextName();
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,148,"*       if (name.equals(""name"")) {"
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,149,*         username = reader.nextString();
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,150,"*       } else if (name.equals(""followers_count"")) {"
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,151,*         followersCount = reader.nextInt();
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,152,*       } else {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,153,*         reader.skipValue();
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,156,*     reader.endObject();
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,157,"*     return new User(username, followersCount);"
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,158,*   }}</pre>
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,160,* <h3>Number Handling</h3>
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,161,* This reader permits numeric values to be read as strings and string values to
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,162,"* be read as numbers. For example, both elements of the JSON array {@code"
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,163,"* [1, ""1""]} may be read using either {@link #nextInt} or {@link #nextString}."
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,164,* This behavior is intended to prevent lossy numeric conversions: double is
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,165,* JavaScript's only numeric type and very large values like {@code
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,166,* 9007199254740993} cannot be represented exactly on that platform. To minimize
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,167,"* precision loss, extremely large values should be written and read as strings"
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,168,* in JSON.
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,170,"* <a name=""nonexecuteprefix""/><h3>Non-Execute Prefix</h3>"
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,171,* Web servers that serve private data using JSON may be vulnerable to <a
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,172,"* href=""http://en.wikipedia.org/wiki/JSON#Cross-site_request_forgery"">Cross-site"
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,173,"* request forgery</a> attacks. In such an attack, a malicious site gains access"
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,174,* to a private JSON file by executing it with an HTML {@code <script>} tag.
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,176,"* <p>Prefixing JSON files with <code>"")]}'\n""</code> makes them non-executable"
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,177,"* by {@code <script>} tags, disarming the attack. Since the prefix is malformed"
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,178,"* JSON, strict parsing fails when it is encountered. This class permits the"
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,179,* non-execute prefix when {@link #setLenient(boolean) lenient parsing} is
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,180,* enabled.
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,182,* <p>Each {@code JsonReader} may be used to read a single JSON stream. Instances
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,183,* of this class are not thread safe.
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,185,* @author Jesse Wilson
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,186,* @since 1.6
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,188,public class JsonReaderV2 implements Closeable {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,189,private static final int PEEKED_NONE = 0;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,190,private static final int PEEKED_BEGIN_OBJECT = 1;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,191,private static final int PEEKED_END_OBJECT = 2;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,192,private static final int PEEKED_BEGIN_ARRAY = 3;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,193,private static final int PEEKED_END_ARRAY = 4;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,194,private static final int PEEKED_TRUE = 5;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,195,private static final int PEEKED_FALSE = 6;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,196,private static final int PEEKED_NULL = 7;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,197,private static final int PEEKED_SINGLE_QUOTED = 8;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,198,private static final int PEEKED_DOUBLE_QUOTED = 9;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,199,private static final int PEEKED_UNQUOTED = 10;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,200,private static final int PEEKED_SINGLE_QUOTED_NAME = 11;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,201,private static final int PEEKED_DOUBLE_QUOTED_NAME = 12;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,202,private static final int PEEKED_UNQUOTED_NAME = 13;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,203,"/** When this is returned, the integer value is stored in peekedInteger. */"
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,204,private static final int PEEKED_INTEGER = 14;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,205,private static final int PEEKED_NUMBER = 15;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,206,private static final int PEEKED_EOF = 16;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,208,/** The input JSON. */
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,209,private final Reader in;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,211,/** True to accept non-spec compliant JSON */
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,212,private boolean lenient = false;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,215,"* Use a manual buffer to easily read and unread upcoming characters, and"
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,216,* also so we can create strings without an intermediate StringBuilder.
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,217,"* We decode literals directly out of this buffer, so it must be at least as"
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,218,* long as the longest token that can be reported as a number.
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,220,private final char[] buffer = new char[1024];
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,221,private int pos = 0;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,222,private int limit = 0;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,225,* The offset of the first character in the buffer.
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,227,private int bufferStartLine = 1;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,228,private int bufferStartColumn = 1;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,230,private int peeked = PEEKED_NONE;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,233,* A peeked value that was composed entirely of digits with an optional
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,234,* leading dash. Positive values may not have a leading 0.
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,236,private long peekedInteger;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,239,* The number of characters in the peeked number.
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,241,private int peekedNumberLength;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,244,* The nesting stack. Using a manual array rather than an ArrayList saves 20%.
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,246,private int[] stack = new int[32];
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,247,private int stackSize = 0;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,249,stack[stackSize++] = JsonScope.EMPTY_DOCUMENT;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,253,* Creates a new instance that reads a JSON-encoded stream from {@code in}.
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,255,public JsonReaderV2(Reader in) {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,256,if (in == null) {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,257,"throw new NullPointerException(""in == null"");"
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,259,this.in = in;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,263,"* Configure this parser to be  be liberal in what it accepts. By default,"
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,264,* this parser is strict and only accepts JSON as specified by <a
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,265,"* href=""http://www.ietf.org/rfc/rfc4627.txt"">RFC 4627</a>. Setting the"
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,266,* parser to lenient causes it to ignore the following syntax errors:
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,268,* <ul>
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,269,"*   <li>Streams that start with the <a href=""#nonexecuteprefix"">non-execute"
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,270,"*       prefix</a>, <code>"")]}'\n""</code>."
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,271,"*   <li>Streams that include multiple top-level values. With strict parsing,"
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,272,*       each stream must contain exactly one top-level value.
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,273,"*   <li>Top-level values of any type. With strict parsing, the top-level"
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,274,*       value must be an object or an array.
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,275,*   <li>Numbers may be {@link Double#isNaN() NaNs} or {@link
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,276,*       Double#isInfinite() infinities}.
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,277,*   <li>End of line comments starting with {@code //} or {@code #} and
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,278,*       ending with a newline character.
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,279,*   <li>C-style comments starting with {@code /*} and ending with
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,280,*       {@code *}{@code /}. Such comments may not be nested.
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,281,*   <li>Names that are unquoted or {@code 'single quoted'}.
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,282,*   <li>Strings that are unquoted or {@code 'single quoted'}.
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,283,"*   <li>Array elements separated by {@code ;} instead of {@code ,}."
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,284,*   <li>Unnecessary array separators. These are interpreted as if null
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,285,*       was the omitted value.
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,286,*   <li>Names and values separated by {@code =} or {@code =>} instead of
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,287,*       {@code :}.
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,288,"*   <li>Name/value pairs separated by {@code ;} instead of {@code ,}."
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,289,* </ul>
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,291,public final void setLenient(boolean lenient) {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,292,this.lenient = lenient;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,296,* Returns true if this parser is liberal in what it accepts.
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,298,public final boolean isLenient() {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,299,return lenient;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,303,* Consumes the next token from the JSON stream and asserts that it is the
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,304,* beginning of a new array.
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,306,public void beginArray() throws IOException {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,307,int p = peeked;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,308,if (p == PEEKED_NONE) {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,309,p = doPeek();
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,311,if (p == PEEKED_BEGIN_ARRAY) {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,312,push(JsonScope.EMPTY_ARRAY);
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,313,peeked = PEEKED_NONE;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,314,} else {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,315,"throw new IllegalStateException(""Expected BEGIN_ARRAY but was "" + peek()"
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,316,"+ "" at line "" + getLineNumber() + "" column "" + getColumnNumber());"
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,321,* Consumes the next token from the JSON stream and asserts that it is the
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,322,* end of the current array.
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,324,public void endArray() throws IOException {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,325,int p = peeked;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,326,if (p == PEEKED_NONE) {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,327,p = doPeek();
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,329,if (p == PEEKED_END_ARRAY) {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,330,stackSize--;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,331,peeked = PEEKED_NONE;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,332,} else {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,333,"throw new IllegalStateException(""Expected END_ARRAY but was "" + peek()"
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,334,"+ "" at line "" + getLineNumber() + "" column "" + getColumnNumber());"
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,339,* Consumes the next token from the JSON stream and asserts that it is the
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,340,* beginning of a new object.
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,342,public void beginObject() throws IOException {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,343,int p = peeked;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,344,if (p == PEEKED_NONE) {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,345,p = doPeek();
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,347,if (p == PEEKED_BEGIN_OBJECT) {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,348,push(JsonScope.EMPTY_OBJECT);
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,349,peeked = PEEKED_NONE;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,350,} else {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,351,"throw new IllegalStateException(""Expected BEGIN_OBJECT but was "" + peek()"
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,352,"+ "" at line "" + getLineNumber() + "" column "" + getColumnNumber());"
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,357,* Consumes the next token from the JSON stream and asserts that it is the
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,358,* end of the current object.
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,360,public void endObject() throws IOException {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,361,int p = peeked;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,362,if (p == PEEKED_NONE) {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,363,p = doPeek();
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,365,if (p == PEEKED_END_OBJECT) {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,366,stackSize--;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,367,peeked = PEEKED_NONE;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,368,} else {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,369,"throw new IllegalStateException(""Expected END_OBJECT but was "" + peek()"
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,370,"+ "" at line "" + getLineNumber() + "" column "" + getColumnNumber());"
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,375,* Returns true if the current array or object has another element.
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,377,public boolean hasNext() throws IOException {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,378,int p = peeked;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,379,if (p == PEEKED_NONE) {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,380,p = doPeek();
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,382,return p != PEEKED_END_OBJECT && p != PEEKED_END_ARRAY;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,386,* Returns the type of the next token without consuming it.
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,388,public JsonToken peek() throws IOException {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,389,int p = peeked;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,390,if (p == PEEKED_NONE) {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,391,p = doPeek();
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,394,switch (p) {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,395,case PEEKED_BEGIN_OBJECT:
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,396,return JsonToken.BEGIN_OBJECT;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,397,case PEEKED_END_OBJECT:
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,398,return JsonToken.END_OBJECT;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,399,case PEEKED_BEGIN_ARRAY:
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,400,return JsonToken.BEGIN_ARRAY;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,401,case PEEKED_END_ARRAY:
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,402,return JsonToken.END_ARRAY;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,403,case PEEKED_SINGLE_QUOTED_NAME:
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,404,case PEEKED_DOUBLE_QUOTED_NAME:
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,405,case PEEKED_UNQUOTED_NAME:
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,406,return JsonToken.NAME;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,407,case PEEKED_TRUE:
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,408,case PEEKED_FALSE:
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,409,return JsonToken.BOOLEAN;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,410,case PEEKED_NULL:
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,411,return JsonToken.NULL;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,412,case PEEKED_SINGLE_QUOTED:
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,413,case PEEKED_DOUBLE_QUOTED:
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,414,case PEEKED_UNQUOTED:
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,415,return JsonToken.STRING;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,416,case PEEKED_INTEGER:
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,417,case PEEKED_NUMBER:
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,418,return JsonToken.NUMBER;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,419,case PEEKED_EOF:
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,420,return JsonToken.END_DOCUMENT;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,421,default:
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,422,throw new AssertionError();
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,426,private int doPeek() throws IOException {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,427,int peekStack = stack[stackSize - 1];
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,428,if (peekStack == JsonScope.EMPTY_ARRAY) {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,429,stack[stackSize - 1] = JsonScope.NONEMPTY_ARRAY;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,430,} else if (peekStack == JsonScope.NONEMPTY_ARRAY) {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,431,// Look for a comma before the next element.
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,432,int c = nextNonWhitespace(true);
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,433,switch (c) {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,434,case ']':
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,435,return peeked = PEEKED_END_ARRAY;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,436,case ';':
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,437,checkLenient(); // fall-through
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,438,"case ',':"
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,439,break;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,440,default:
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,441,"throw syntaxError(""Unterminated array"");"
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,443,} else if (peekStack == JsonScope.EMPTY_OBJECT || peekStack == JsonScope.NONEMPTY_OBJECT) {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,444,stack[stackSize - 1] = JsonScope.DANGLING_NAME;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,445,// Look for a comma before the next element.
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,446,if (peekStack == JsonScope.NONEMPTY_OBJECT) {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,447,int c = nextNonWhitespace(true);
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,448,switch (c) {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,449,case '}':
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,450,return peeked = PEEKED_END_OBJECT;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,451,case ';':
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,452,checkLenient(); // fall-through
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,453,"case ',':"
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,454,break;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,455,default:
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,456,"throw syntaxError(""Unterminated object"");"
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,459,int c = nextNonWhitespace(true);
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,460,switch (c) {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,461,case '\'':
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,462,checkLenient();
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,463,return peeked = PEEKED_SINGLE_QUOTED_NAME;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,464,"case '""':"
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,465,return peeked = PEEKED_DOUBLE_QUOTED_NAME;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,466,case '}':
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,467,return peeked = PEEKED_END_OBJECT;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,468,default:
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,469,pos--; // Don't consume the first character in an unquoted string.
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,470,if (isLiteral((char) c)) {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,471,return peeked = PEEKED_UNQUOTED_NAME;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,472,} else {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,473,"throw syntaxError(""Expected name"");"
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,476,} else if (peekStack == JsonScope.DANGLING_NAME) {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,477,stack[stackSize - 1] = JsonScope.NONEMPTY_OBJECT;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,478,// Look for a colon before the value.
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,479,"// TODO: support '=' and ""=>"" delimiters in lenient mode."
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,480,int c = nextNonWhitespace(true);
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,481,switch (c) {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,482,case ':':
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,483,break;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,484,default:
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,485,"throw syntaxError(""Expected ':'"");"
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,487,} else if (peekStack == JsonScope.EMPTY_DOCUMENT) {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,488,stack[stackSize - 1] = JsonScope.NONEMPTY_DOCUMENT;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,489,} else if (peekStack == JsonScope.NONEMPTY_DOCUMENT) {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,490,int c = nextNonWhitespace(false);
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,491,if (c == -1) {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,492,return peeked = PEEKED_EOF;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,493,} else {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,494,checkLenient();
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,495,pos--;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,499,int c = nextNonWhitespace(true);
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,500,switch (c) {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,501,case ']':
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,502,if (peekStack == JsonScope.EMPTY_ARRAY) {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,503,return peeked = PEEKED_END_ARRAY;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,505,"// fall-through to handle "",]"""
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,506,case ';':
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,507,"case ',':"
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,508,"// In lenient mode, a 0-length literal in an array means 'null'."
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,509,if (peekStack == JsonScope.EMPTY_ARRAY || peekStack == JsonScope.NONEMPTY_ARRAY) {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,510,checkLenient();
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,511,pos--;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,512,return peeked = PEEKED_NULL;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,513,} else {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,514,"throw syntaxError(""Unexpected value"");"
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,516,case '\'':
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,517,checkLenient();
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,518,return peeked = PEEKED_SINGLE_QUOTED;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,519,"case '""':"
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,520,return peeked = PEEKED_DOUBLE_QUOTED;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,521,case '[':
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,522,return peeked = PEEKED_BEGIN_ARRAY;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,523,case '{':
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,524,return peeked = PEEKED_BEGIN_OBJECT;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,525,default:
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,526,pos--; // Don't consume the first character in a literal value.
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,529,int result = peekKeyword();
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,530,if (result != PEEKED_NONE) {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,531,return result;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,534,result = peekNumber();
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,535,if (result != PEEKED_NONE) {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,536,return result;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,539,checkLenient();
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,540,return peeked = PEEKED_UNQUOTED;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,543,private int peekKeyword() throws IOException {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,544,// TODO: figure out a way to avoid repeatedly accessing 'buffer'
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,545,int c;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,546,if ((pos + 4 < limit || fillBuffer(5))
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,547,&& ((c = buffer[pos    ]) == 't' || c == 'T')
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,548,&& ((c = buffer[pos + 1]) == 'r' || c == 'R')
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,549,&& ((c = buffer[pos + 2]) == 'u' || c == 'U')
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,550,&& ((c = buffer[pos + 3]) == 'e' || c == 'E')
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,551,&& !isLiteral(buffer[pos + 4])) {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,552,pos += 4;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,553,return peeked = PEEKED_TRUE;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,554,} else if ((pos + 5 < limit || fillBuffer(6))
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,555,&& ((c = buffer[pos    ]) == 'f' || c == 'F')
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,556,&& ((c = buffer[pos + 1]) == 'a' || c == 'A')
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,557,&& ((c = buffer[pos + 2]) == 'l' || c == 'L')
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,558,&& ((c = buffer[pos + 3]) == 's' || c == 'S')
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,559,&& ((c = buffer[pos + 4]) == 'e' || c == 'E')
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,560,&& !isLiteral(buffer[pos + 5])) {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,561,pos += 5;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,562,return peeked = PEEKED_FALSE;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,563,} else if ((pos + 4 < limit || fillBuffer(5))
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,564,&& ((c = buffer[pos    ]) == 'n' || c == 'N')
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,565,&& ((c = buffer[pos + 1]) == 'u' || c == 'U')
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,566,&& ((c = buffer[pos + 2]) == 'l' || c == 'L')
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,567,&& ((c = buffer[pos + 3]) == 'l' || c == 'L')
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,568,&& !isLiteral(buffer[pos + 4])) {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,569,pos += 4;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,570,return peeked = PEEKED_NULL;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,571,} else {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,572,return PEEKED_NONE;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,576,private int peekNumber() throws IOException {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,577,long integer = 0; // Negative to accommodate Long.MIN_VALUE more easily.
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,578,boolean negative = false;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,579,int i = 0;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,580,int c = get(i);
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,582,// TODO: figure out a way to speed up repopulating 'c'
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,584,if (c == '-') {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,585,negative = true;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,586,c = get(++i);
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,589,if (c == '0') {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,590,c = get(++i);
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,591,} else if (c >= '1' && c <= '9') {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,592,integer -= (c - '0');
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,593,c = get(++i);
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,594,while (c >= '0' && c <= '9') {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,595,integer = integer * 10 - (c - '0'); // TODO: detect overflow
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,596,c = get(++i);
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,598,} else {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,599,return PEEKED_NONE;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,602,if (c == -1 || !isLiteral((char) c)) {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,603,peekedInteger = negative ? integer : -integer;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,604,pos += i;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,605,return peeked = PEEKED_INTEGER;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,608,if (c == '.') {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,609,c = get(++i);
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,610,while (c >= '0' && c <= '9') {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,611,c = get(++i);
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,615,if (c == 'e' || c == 'E') {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,616,c = get(++i);
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,617,if (c == '+' || c == '-') {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,618,c = get(++i);
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,620,if (c >= '0' && c <= '9') {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,621,c = get(++i);
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,622,while (c >= '0' && c <= '9') {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,623,c = get(++i);
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,625,} else {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,626,return PEEKED_NONE;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,630,if (c == -1 || !isLiteral((char) c)) {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,631,peekedNumberLength = i;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,632,return peeked = PEEKED_NUMBER;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,635,return PEEKED_NONE;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,639,"* Returns a character at position {@code pos + offset}, reading additional"
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,640,* bytes into the buffer if necessary.
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,642,private int get(int offset) throws IOException {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,643,return (pos + offset < limit || fillBuffer(offset + 1)) ? buffer[pos + offset] : -1;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,646,private boolean isLiteral(char c) throws IOException {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,647,switch (c) {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,648,case '/':
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,649,case '\\':
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,650,case ';':
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,651,case '#':
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,652,case '=':
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,653,checkLenient(); // fall-through
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,654,case '{':
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,655,case '}':
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,656,case '[':
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,657,case ']':
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,658,case ':':
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,659,"case ',':"
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,660,case ' ':
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,661,case '\t':
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,662,case '\f':
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,663,case '\r':
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,664,case '\n':
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,665,return false;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,666,default:
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,667,return true;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,672,"* Returns the next token, a {@link com.google.gson.stream.JsonToken#NAME property name}, and"
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,673,* consumes it.
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,675,* @throws java.io.IOException if the next token in the stream is not a property
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,676,*     name.
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,678,public String nextName() throws IOException {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,679,int p = peeked;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,680,if (p == PEEKED_NONE) {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,681,p = doPeek();
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,683,String result;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,684,if (p == PEEKED_UNQUOTED_NAME) {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,685,result = nextUnquotedValue();
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,686,} else if (p == PEEKED_SINGLE_QUOTED_NAME) {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,687,result = nextQuotedValue('\'');
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,688,} else if (p == PEEKED_DOUBLE_QUOTED_NAME) {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,689,"result = nextQuotedValue('""');"
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,690,} else {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,691,"throw new IllegalStateException(""Expected a name but was "" + peek()"
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,692,"+ "" at line "" + getLineNumber() + "" column "" + getColumnNumber());"
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,694,peeked = PEEKED_NONE;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,695,return result;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,699,"* Returns the {@link com.google.gson.stream.JsonToken#STRING string} value of the next token,"
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,700,"* consuming it. If the next token is a number, this method will return its"
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,701,* string form.
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,703,* @throws IllegalStateException if the next token is not a string or if
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,704,*     this reader is closed.
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,706,public String nextString() throws IOException {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,707,int p = peeked;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,708,if (p == PEEKED_NONE) {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,709,p = doPeek();
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,711,String result;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,712,if (p == PEEKED_UNQUOTED) {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,713,result = nextUnquotedValue();
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,714,} else if (p == PEEKED_SINGLE_QUOTED) {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,715,result = nextQuotedValue('\'');
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,716,} else if (p == PEEKED_DOUBLE_QUOTED) {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,717,"result = nextQuotedValue('""');"
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,718,} else if (p == PEEKED_INTEGER) {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,719,result = Long.toString(peekedInteger);
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,720,} else if (p == PEEKED_NUMBER) {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,721,"result = new String(buffer, pos, peekedNumberLength);"
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,722,pos += peekedNumberLength;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,723,} else {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,724,"throw new IllegalStateException(""Expected a string but was "" + peek()"
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,725,"+ "" at line "" + getLineNumber() + "" column "" + getColumnNumber());"
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,727,peeked = PEEKED_NONE;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,728,return result;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,732,"* Returns the {@link com.google.gson.stream.JsonToken#BOOLEAN boolean} value of the next token,"
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,733,* consuming it.
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,735,* @throws IllegalStateException if the next token is not a boolean or if
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,736,*     this reader is closed.
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,738,public boolean nextBoolean() throws IOException {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,739,int p = peeked;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,740,if (p == PEEKED_NONE) {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,741,p = doPeek();
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,743,if (p == PEEKED_TRUE) {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,744,peeked = PEEKED_NONE;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,745,return true;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,746,} else if (p == PEEKED_FALSE) {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,747,peeked = PEEKED_NONE;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,748,return false;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,750,"throw new IllegalStateException(""Expected a boolean but was "" + peek()"
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,751,"+ "" at line "" + getLineNumber() + "" column "" + getColumnNumber());"
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,755,* Consumes the next token from the JSON stream and asserts that it is a
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,756,* literal null.
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,758,* @throws IllegalStateException if the next token is not null or if this
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,759,*     reader is closed.
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,761,public void nextNull() throws IOException {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,762,int p = peeked;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,763,if (p == PEEKED_NONE) {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,764,p = doPeek();
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,766,if (p == PEEKED_NULL) {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,767,peeked = PEEKED_NONE;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,768,} else {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,769,"throw new IllegalStateException(""Expected null but was "" + peek()"
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,770,"+ "" at line "" + getLineNumber() + "" column "" + getColumnNumber());"
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,775,"* Returns the {@link com.google.gson.stream.JsonToken#NUMBER double} value of the next token,"
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,776,"* consuming it. If the next token is a string, this method will attempt to"
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,777,* parse it as a double using {@link Double#parseDouble(String)}.
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,779,* @throws IllegalStateException if the next token is not a literal value.
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,780,* @throws NumberFormatException if the next literal value cannot be parsed
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,781,"*     as a double, or is non-finite."
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,783,public double nextDouble() throws IOException {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,784,int p = peeked;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,785,if (p == PEEKED_NONE) {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,786,p = doPeek();
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,789,if (p == PEEKED_INTEGER) {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,790,peeked = PEEKED_NONE;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,791,return (double) peekedInteger;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,794,String asString;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,795,if (p == PEEKED_NUMBER) {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,796,"asString = new String(buffer, pos, peekedNumberLength);"
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,797,pos += peekedNumberLength;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,798,} else if (p == PEEKED_SINGLE_QUOTED || p == PEEKED_DOUBLE_QUOTED) {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,799,"asString = nextQuotedValue(p == PEEKED_SINGLE_QUOTED ? '\'' : '""');"
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,800,} else {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,801,"throw new IllegalStateException(""Expected a double but was "" + peek()"
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,802,"+ "" at line "" + getLineNumber() + "" column "" + getColumnNumber());"
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,805,double result = Double.parseDouble(asString); // don't catch this NumberFormatException.
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,806,peeked = PEEKED_NONE;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,807,return result;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,811,"* Returns the {@link com.google.gson.stream.JsonToken#NUMBER long} value of the next token,"
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,812,"* consuming it. If the next token is a string, this method will attempt to"
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,813,* parse it as a long. If the next token's numeric value cannot be exactly
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,814,"* represented by a Java {@code long}, this method throws."
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,816,* @throws IllegalStateException if the next token is not a literal value.
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,817,* @throws NumberFormatException if the next literal value cannot be parsed
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,818,"*     as a number, or exactly represented as a long."
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,820,public long nextLong() throws IOException {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,821,int p = peeked;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,822,if (p == PEEKED_NONE) {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,823,p = doPeek();
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,826,if (p == PEEKED_INTEGER) {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,827,peeked = PEEKED_NONE;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,828,return peekedInteger;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,831,String asString;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,832,if (p == PEEKED_NUMBER) {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,833,"asString = new String(buffer, pos, peekedNumberLength);"
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,834,pos += peekedNumberLength;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,835,} else if (p == PEEKED_SINGLE_QUOTED || p == PEEKED_DOUBLE_QUOTED) {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,836,"asString = nextQuotedValue(p == PEEKED_SINGLE_QUOTED ? '\'' : '""');"
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,837,try {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,838,long result = Long.parseLong(asString);
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,839,peeked = PEEKED_NONE;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,840,return result;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,841,} catch (NumberFormatException ignored) {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,842,// Fall back to parse as a double below.
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,844,} else {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,845,"throw new IllegalStateException(""Expected a long but was "" + peek()"
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,846,"+ "" at line "" + getLineNumber() + "" column "" + getColumnNumber());"
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,849,double asDouble = Double.parseDouble(asString); // don't catch this NumberFormatException.
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,850,long result = (long) asDouble;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,851,if (result != asDouble) { // Make sure no precision was lost casting to 'long'.
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,852,"throw new NumberFormatException(""Expected a long but was "" + asString"
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,853,"+ "" at line "" + getLineNumber() + "" column "" + getColumnNumber());"
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,855,peeked = PEEKED_NONE;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,856,return result;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,860,"* Returns the string up to but not including {@code quote}, unescaping any"
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,861,* character escape sequences encountered along the way. The opening quote
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,862,"* should have already been read. This consumes the closing quote, but does"
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,863,* not include it in the returned string.
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,865,"* @param quote either ' or ""."
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,866,* @throws NumberFormatException if any unicode escape sequences are
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,867,*     malformed.
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,869,private String nextQuotedValue(char quote) throws IOException {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,870,"// Like nextNonWhitespace, this uses locals 'p' and 'l' to save inner-loop field access."
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,871,char[] buffer = this.buffer;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,872,StringBuilder builder = null;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,873,while (true) {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,874,int p = pos;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,875,int l = limit;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,876,/* the index of the first character not yet appended to the builder. */
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,877,int start = p;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,878,while (p < l) {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,879,int c = buffer[p++];
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,881,if (c == quote) {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,882,pos = p;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,883,if (false /* TODO: skipping */) {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,884,"return ""skipped!"";"
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,885,} else if (builder == null) {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,886,"return new String(buffer, start, p - start - 1);"
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,887,} else {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,888,"builder.append(buffer, start, p - start - 1);"
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,889,return builder.toString();
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,892,} else if (c == '\\') {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,893,pos = p;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,894,if (builder == null) {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,895,builder = new StringBuilder();
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,897,"builder.append(buffer, start, p - start - 1);"
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,898,builder.append(readEscapeCharacter());
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,899,p = pos;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,900,l = limit;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,901,start = p;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,905,if (builder == null) {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,906,builder = new StringBuilder();
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,908,"builder.append(buffer, start, p - start);"
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,909,pos = p;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,910,if (!fillBuffer(1)) {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,911,"throw syntaxError(""Unterminated string"");"
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,917,* Returns an unquoted value as a string.
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,919,"@SuppressWarnings(""fallthrough"")"
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,920,private String nextUnquotedValue() throws IOException {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,921,StringBuilder builder = null;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,922,int i = 0;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,924,findNonLiteralCharacter:
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,925,while (true) {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,926,for (; pos + i < limit; i++) {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,927,switch (buffer[pos + i]) {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,928,case '/':
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,929,case '\\':
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,930,case ';':
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,931,case '#':
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,932,case '=':
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,933,checkLenient(); // fall-through
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,934,case '{':
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,935,case '}':
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,936,case '[':
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,937,case ']':
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,938,case ':':
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,939,"case ',':"
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,940,case ' ':
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,941,case '\t':
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,942,case '\f':
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,943,case '\r':
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,944,case '\n':
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,945,break findNonLiteralCharacter;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,949,// Attempt to load the entire literal into the buffer at once.
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,950,if (i < buffer.length) {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,951,if (fillBuffer(i + 1)) {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,952,continue;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,953,} else {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,954,break;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,958,// use a StringBuilder when the value is too long. This is too long to be a number!
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,959,if (builder == null) {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,960,builder = new StringBuilder();
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,962,"builder.append(buffer, pos, i);"
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,963,pos += i;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,964,i = 0;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,965,if (!fillBuffer(1)) {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,966,break;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,970,String result;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,971,if (false /* TODO: support skipping */) {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,972,"result = ""skipped!"";"
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,973,} else if (builder == null) {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,974,"result = new String(buffer, pos, i);"
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,975,} else {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,976,"builder.append(buffer, pos, i);"
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,977,result = builder.toString();
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,979,pos += i;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,980,return result;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,984,"* Returns the {@link com.google.gson.stream.JsonToken#NUMBER int} value of the next token,"
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,985,"* consuming it. If the next token is a string, this method will attempt to"
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,986,* parse it as an int. If the next token's numeric value cannot be exactly
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,987,"* represented by a Java {@code int}, this method throws."
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,989,* @throws IllegalStateException if the next token is not a literal value.
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,990,* @throws NumberFormatException if the next literal value cannot be parsed
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,991,"*     as a number, or exactly represented as an int."
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,993,public int nextInt() throws IOException {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,994,int p = peeked;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,995,if (p == PEEKED_NONE) {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,996,p = doPeek();
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,999,int result;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1000,if (p == PEEKED_INTEGER) {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1001,result = (int) peekedInteger;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1002,if (peekedInteger != result) { // Make sure no precision was lost casting to 'int'.
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1003,"throw new NumberFormatException(""Expected an int but was "" + peekedInteger"
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1004,"+ "" at line "" + getLineNumber() + "" column "" + getColumnNumber());"
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1006,peeked = PEEKED_NONE;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1007,return result;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1010,String asString;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1011,if (p == PEEKED_NUMBER) {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1012,"asString = new String(buffer, pos, peekedNumberLength);"
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1013,pos += peekedNumberLength;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1014,} else if (p == PEEKED_SINGLE_QUOTED || p == PEEKED_DOUBLE_QUOTED) {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1015,"asString = nextQuotedValue(p == PEEKED_SINGLE_QUOTED ? '\'' : '""');"
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1016,try {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1017,result = Integer.parseInt(asString);
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1018,peeked = PEEKED_NONE;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1019,return result;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1020,} catch (NumberFormatException ignored) {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1021,// Fall back to parse as a double below.
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1023,} else {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1024,"throw new IllegalStateException(""Expected an int but was "" + peek()"
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1025,"+ "" at line "" + getLineNumber() + "" column "" + getColumnNumber());"
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1028,double asDouble = Double.parseDouble(asString); // don't catch this NumberFormatException.
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1029,result = (int) asDouble;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1030,if (result != asDouble) { // Make sure no precision was lost casting to 'int'.
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1031,"throw new NumberFormatException(""Expected an int but was "" + asString"
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1032,"+ "" at line "" + getLineNumber() + "" column "" + getColumnNumber());"
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1034,peeked = PEEKED_NONE;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1035,return result;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1039,* Closes this JSON reader and the underlying {@link java.io.Reader}.
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1041,public void close() throws IOException {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1045,"* Skips the next value recursively. If it is an object or array, all nested"
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1046,* elements are skipped. This method is intended for use when the JSON token
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1047,* stream contains unrecognized or unhandled values.
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1049,public void skipValue() throws IOException {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1050,int count = 0;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1051,do {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1052,int p = doPeek();
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1053,if (p == PEEKED_BEGIN_ARRAY) {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1054,push(JsonScope.EMPTY_ARRAY);
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1055,count++;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1056,} else if (p == PEEKED_BEGIN_OBJECT) {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1057,push(JsonScope.EMPTY_OBJECT);
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1058,count++;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1059,} else if (p == PEEKED_END_ARRAY) {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1060,stackSize--;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1061,count--;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1062,} else if (p == PEEKED_END_OBJECT) {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1063,stackSize--;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1064,count--;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1065,} else if (p == PEEKED_UNQUOTED_NAME || p == PEEKED_UNQUOTED) {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1066,nextUnquotedValue();
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1067,} else if (p == PEEKED_SINGLE_QUOTED || p == PEEKED_SINGLE_QUOTED_NAME) {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1068,nextQuotedValue('\'');
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1069,} else if (p == PEEKED_DOUBLE_QUOTED || p == PEEKED_DOUBLE_QUOTED_NAME) {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1070,"nextQuotedValue('""');"
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1071,} else if (p == PEEKED_NUMBER) {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1072,pos += peekedNumberLength;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1074,peeked = PEEKED_NONE;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1075,} while (count != 0);
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1078,private void push(int newTop) {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1079,if (stackSize == stack.length) {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1080,int[] newStack = new int[stackSize * 2];
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1081,"System.arraycopy(stack, 0, newStack, 0, stackSize);"
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1082,stack = newStack;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1084,stack[stackSize++] = newTop;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1088,* Returns true once {@code limit - pos >= minimum}. If the data is
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1089,"* exhausted before that many characters are available, this returns"
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1090,* false.
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1092,private boolean fillBuffer(int minimum) throws IOException {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1093,char[] buffer = this.buffer;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1095,"// Before clobbering the old characters, update where buffer starts"
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1096,// Using locals here saves ~2%.
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1097,int line = bufferStartLine;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1098,int column = bufferStartColumn;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1099,"for (int i = 0, p = pos; i < p; i++) {"
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1100,if (buffer[i] == '\n') {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1101,line++;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1102,column = 1;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1103,} else {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1104,column++;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1107,bufferStartLine = line;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1108,bufferStartColumn = column;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1110,if (limit != pos) {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1111,limit -= pos;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1112,"System.arraycopy(buffer, pos, buffer, 0, limit);"
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1113,} else {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1114,limit = 0;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1117,pos = 0;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1118,int total;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1119,"while ((total = in.read(buffer, limit, buffer.length - limit)) != -1) {"
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1120,limit += total;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1122,"// if this is the first read, consume an optional byte order mark (BOM) if it exists"
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1123,if (bufferStartLine == 1 && bufferStartColumn == 1 && limit > 0 && buffer[0] == '\ufeff') {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1124,pos++;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1125,bufferStartColumn--;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1128,if (limit >= minimum) {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1129,return true;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1132,return false;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1135,private int getLineNumber() {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1136,int result = bufferStartLine;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1137,for (int i = 0; i < pos; i++) {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1138,if (buffer[i] == '\n') {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1139,result++;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1142,return result;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1145,private int getColumnNumber() {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1146,int result = bufferStartColumn;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1147,for (int i = 0; i < pos; i++) {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1148,if (buffer[i] == '\n') {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1149,result = 1;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1150,} else {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1151,result++;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1154,return result;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1158,* Returns the next character in the stream that is neither whitespace nor a
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1159,"* part of a comment. When this returns, the returned character is always at"
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1160,* {@code buffer[pos-1]}; this means the caller can always push back the
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1161,* returned character by decrementing {@code pos}.
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1163,private int nextNonWhitespace(boolean throwOnEof) throws IOException {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1165,* This code uses ugly local variables 'p' and 'l' representing the 'pos'
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1166,* and 'limit' fields respectively. Using locals rather than fields saves
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1167,* a few field reads for each whitespace character in a pretty-printed
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1168,"* document, resulting in a 5% speedup. We need to flush 'p' to its field"
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1169,* before any (potentially indirect) call to fillBuffer() and reread both
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1170,* 'p' and 'l' after any (potentially indirect) call to the same method.
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1172,char[] buffer = this.buffer;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1173,int p = pos;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1174,int l = limit;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1175,while (true) {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1176,if (p == l) {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1177,pos = p;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1178,if (!fillBuffer(1)) {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1179,break;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1181,p = pos;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1182,l = limit;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1185,int c = buffer[p++];
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1186,switch (c) {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1187,case '\t':
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1188,case ' ':
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1189,case '\n':
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1190,case '\r':
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1191,continue;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1193,case '/':
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1194,pos = p;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1195,if (p == l) {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1196,pos--; // push back '/' so it's still in the buffer when this method returns
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1197,boolean charsLoaded = fillBuffer(2);
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1198,pos++; // consume the '/' again
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1199,if (!charsLoaded) {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1200,return c;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1204,checkLenient();
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1205,char peek = buffer[pos];
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1206,switch (peek) {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1207,case '*':
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1208,// skip a /* c-style comment */
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1209,pos++;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1210,"if (!skipTo(""*/"")) {"
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1211,"throw syntaxError(""Unterminated comment"");"
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1213,p = pos + 2;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1214,l = limit;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1215,continue;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1217,case '/':
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1218,// skip a // end-of-line comment
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1219,pos++;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1220,skipToEndOfLine();
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1221,p = pos;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1222,l = limit;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1223,continue;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1225,default:
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1226,return c;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1229,case '#':
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1230,pos = p;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1232,* Skip a # hash end-of-line comment. The JSON RFC doesn't
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1233,"* specify this behaviour, but it's required to parse"
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1234,* existing documents. See http://b/2571423.
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1236,checkLenient();
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1237,skipToEndOfLine();
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1238,p = pos;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1239,l = limit;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1240,continue;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1242,default:
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1243,pos = p;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1244,return c;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1247,if (throwOnEof) {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1248,"throw new EOFException(""End of input"""
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1249,"+ "" at line "" + getLineNumber() + "" column "" + getColumnNumber());"
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1250,} else {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1251,return -1;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1255,private void checkLenient() throws IOException {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1256,if (!lenient) {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1257,"throw syntaxError(""Use JsonReader.setLenient(true) to accept malformed JSON"");"
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1262,* Advances the position until after the next newline character. If the line
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1263,"* is terminated by ""\r\n"", the '\n' must be consumed as whitespace by the"
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1264,* caller.
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1266,private void skipToEndOfLine() throws IOException {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1267,while (pos < limit || fillBuffer(1)) {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1268,char c = buffer[pos++];
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1269,if (c == '\r' || c == '\n') {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1270,break;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1275,private boolean skipTo(String toFind) throws IOException {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1276,outer:
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1277,for (; pos + toFind.length() <= limit || fillBuffer(toFind.length()); pos++) {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1278,for (int c = 0; c < toFind.length(); c++) {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1279,if (buffer[pos + c] != toFind.charAt(c)) {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1280,continue outer;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1283,return true;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1285,return false;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1288,@Override public String toString() {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1289,return getClass().getSimpleName()
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1290,"+ "" at line "" + getLineNumber() + "" column "" + getColumnNumber();"
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1294,* Unescapes the character identified by the character or characters that
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1295,* immediately follow a backslash. The backslash '\' should have already
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1296,"* been read. This supports both unicode escapes ""u000A"" and two-character"
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1297,"* escapes ""\n""."
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1299,* @throws NumberFormatException if any unicode escape sequences are
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1300,*     malformed.
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1302,private char readEscapeCharacter() throws IOException {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1303,if (pos == limit && !fillBuffer(1)) {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1304,"throw syntaxError(""Unterminated escape sequence"");"
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1307,char escaped = buffer[pos++];
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1308,switch (escaped) {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1309,case 'u':
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1310,if (pos + 4 > limit && !fillBuffer(4)) {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1311,"throw syntaxError(""Unterminated escape sequence"");"
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1313,"// Equivalent to Integer.parseInt(stringPool.get(buffer, pos, 4), 16);"
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1314,char result = 0;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1315,"for (int i = pos, end = i + 4; i < end; i++) {"
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1316,char c = buffer[i];
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1317,result <<= 4;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1318,if (c >= '0' && c <= '9') {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1319,result += (c - '0');
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1320,} else if (c >= 'a' && c <= 'f') {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1321,result += (c - 'a' + 10);
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1322,} else if (c >= 'A' && c <= 'F') {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1323,result += (c - 'A' + 10);
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1324,} else {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1325,"throw new NumberFormatException(""\\u"" + new String(buffer, pos, 4));"
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1328,pos += 4;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1329,return result;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1331,case 't':
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1332,return '\t';
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1334,case 'b':
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1335,return '\b';
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1337,case 'n':
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1338,return '\n';
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1340,case 'r':
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1341,return '\r';
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1343,case 'f':
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1344,return '\f';
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1346,case '\'':
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1347,"case '""':"
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1348,case '\\':
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1349,default:
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1350,return escaped;
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1355,* Throws a new IO exception with the given message and a context snippet
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1356,* with this reader's content.
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1358,private IOException syntaxError(String message) throws IOException {
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1359,throw new MalformedJsonException(message
True,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,gson/src/main/java/com/google/gson/stream/JsonReaderV2.java,1360,"+ "" at line "" + getLineNumber() + "" column "" + getColumnNumber());"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,76,public void testSkipInteger() throws IOException {
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,77,JsonReader reader = new JsonReader(new StringReader(
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,78,"""{\""a\"":123456789,\""b\"":-123456789}""));"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,79,reader.beginObject();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,80,"assertEquals(""a"", reader.nextName());"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,81,reader.skipValue();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,82,"assertEquals(""b"", reader.nextName());"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,83,reader.skipValue();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,84,reader.endObject();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,85,"assertEquals(JsonToken.END_DOCUMENT, reader.peek());"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,88,public void testSkipDouble() throws IOException {
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,89,JsonReader reader = new JsonReader(new StringReader(
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,90,"""{\""a\"":-123.456e-789,\""b\"":123456789.0}""));"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,91,reader.beginObject();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,92,"assertEquals(""a"", reader.nextName());"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,93,reader.skipValue();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,94,"assertEquals(""b"", reader.nextName());"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,95,reader.skipValue();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,96,reader.endObject();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,97,"assertEquals(JsonToken.END_DOCUMENT, reader.peek());"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,393,public void testPeekingUnquotedStringsPrefixedWithBooleans() throws IOException {
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,394,"JsonReader reader = new JsonReader(new StringReader(""[truey]""));"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,395,reader.setLenient(true);
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,396,reader.beginArray();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,397,"assertEquals(JsonToken.STRING, reader.peek());"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,398,try {
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,399,reader.nextBoolean();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,400,fail();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,401,} catch (IllegalStateException expected) {
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,403,"assertEquals(""truey"", reader.nextString());"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,404,reader.endArray();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,407,public void testPeekingUnquotedStringsPrefixedWithIntegers() throws IOException {
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,408,"JsonReader reader = new JsonReader(new StringReader(""[12.34e5x]""));"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,409,reader.setLenient(true);
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,410,reader.beginArray();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,411,"assertEquals(JsonToken.STRING, reader.peek());"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,412,try {
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,413,reader.nextInt();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,414,fail();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,415,} catch (IllegalStateException expected) {
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,417,"assertEquals(""12.34e5x"", reader.nextString());"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,420,public void testPeekLongMinValue() throws IOException {
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,421,"JsonReader reader = new JsonReader(new StringReader(""[-9223372036854775808]""));"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,422,reader.setLenient(true);
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,423,reader.beginArray();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,424,"assertEquals(JsonToken.NUMBER, reader.peek());"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,425,"assertEquals(-9223372036854775808L, reader.nextLong());"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,428,public void testPeekLargerThanLongMinValue() throws IOException {
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,429,"JsonReader reader = new JsonReader(new StringReader(""[-92233720368547758080]""));"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,430,reader.setLenient(true);
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,431,reader.beginArray();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,432,"assertEquals(JsonToken.NUMBER, reader.peek());"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,433,try {
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,434,reader.nextLong();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,435,fail();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,436,} catch (NumberFormatException expected) {
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,438,"assertEquals(-92233720368547758080d, reader.nextDouble());"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,441,public void testQuotedNumberWithEscape() throws IOException {
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,442,"JsonReader reader = new JsonReader(new StringReader(""[\""12\u00334\""]""));"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,443,reader.setLenient(true);
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,444,reader.beginArray();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,445,"assertEquals(JsonToken.STRING, reader.peek());"
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,446,"assertEquals(1234, reader.nextInt());"

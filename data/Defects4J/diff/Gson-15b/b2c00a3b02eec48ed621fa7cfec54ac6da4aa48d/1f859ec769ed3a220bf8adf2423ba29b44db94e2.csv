is_addition,old_file_path,new_file_path,line_num,content
False,extras/src/main/java/com/google/gson/typeadapters/RuntimeTypeAdapterFactory.java,extras/src/main/java/com/google/gson/typeadapters/RuntimeTypeAdapterFactory.java,114,"       .registerTypeAdapterFactory(Shape.class, shapeAdapterFactory)"
True,extras/src/main/java/com/google/gson/typeadapters/RuntimeTypeAdapterFactory.java,extras/src/main/java/com/google/gson/typeadapters/RuntimeTypeAdapterFactory.java,114,*       .registerTypeAdapterFactory(shapeAdapterFactory)
True,gson/src/main/java/com/google/gson/JsonObject.java,gson/src/main/java/com/google/gson/JsonObject.java,136,* Returns the number of key/value pairs in the object.
True,gson/src/main/java/com/google/gson/JsonObject.java,gson/src/main/java/com/google/gson/JsonObject.java,138,* @return the number of key/value pairs in the object.
True,gson/src/main/java/com/google/gson/JsonObject.java,gson/src/main/java/com/google/gson/JsonObject.java,140,public int size() {
True,gson/src/main/java/com/google/gson/JsonObject.java,gson/src/main/java/com/google/gson/JsonObject.java,141,return members.size();
False,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,28,mport java.util.ArrayList;
False,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,30,mport java.util.List;
False,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,50,rivate final List<Object> stack = new ArrayList<Object>();
True,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,49,* The nesting stack. Using a manual array rather than an ArrayList saves 20%.
True,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,51,private Object[] stack = new Object[32];
True,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,52,private int stackSize = 0;
True,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,55,* The path members. It corresponds directly to stack: At indices where the
True,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,56,"* stack contains an object (EMPTY_OBJECT, DANGLING_NAME or NONEMPTY_OBJECT),"
True,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,57,* pathNames contains the name at this scope. Where it contains an array
True,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,58,"* (EMPTY_ARRAY, NONEMPTY_ARRAY) pathIndices contains the current index in"
True,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,59,"* that array. Otherwise the value is undefined, and we take advantage of that"
True,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,60,* by incrementing pathIndices when doing so isn't useful.
True,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,62,private String[] pathNames = new String[32];
True,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,63,private int[] pathIndices = new int[32];
False,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,54,tack.add(element);
True,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,67,push(element);
False,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,60,tack.add(array.iterator());
True,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,73,push(array.iterator());
True,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,74,pathIndices[stackSize - 1] = 0;
True,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,81,if (stackSize > 0) {
True,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,82,pathIndices[stackSize - 1]++;
False,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,72,tack.add(object.entrySet().iterator());
True,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,89,push(object.entrySet().iterator());
True,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,96,if (stackSize > 0) {
True,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,97,pathIndices[stackSize - 1]++;
False,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,87,f (stack.isEmpty()) {
True,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,107,if (stackSize == 0) {
False,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,93,oolean isObject = stack.get(stack.size() - 2) instanceof JsonObject;
True,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,113,boolean isObject = stack[stackSize - 2] instanceof JsonObject;
False,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,99,tack.add(iterator.next());
True,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,119,push(iterator.next());
False,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,130,eturn stack.get(stack.size() - 1);
True,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,150,return stack[stackSize - 1];
False,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,134,eturn stack.remove(stack.size() - 1);
True,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,154,Object result = stack[--stackSize];
True,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,155,stack[stackSize] = null;
True,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,156,return result;
False,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,139,"hrow new IllegalStateException(""Expected "" + expected + "" but was "" + peek());"
True,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,161,throw new IllegalStateException(
True,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,162,"""Expected "" + expected + "" but was "" + peek() + locationString());"
False,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,147,tack.add(entry.getValue());
False,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,148,eturn (String) entry.getKey();
True,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,170,String result = (String) entry.getKey();
True,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,171,pathNames[stackSize - 1] = result;
True,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,172,push(entry.getValue());
True,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,173,return result;
False,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,154,"hrow new IllegalStateException(""Expected "" + JsonToken.STRING + "" but was "" + token);"
True,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,179,throw new IllegalStateException(
True,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,180,"""Expected "" + JsonToken.STRING + "" but was "" + token + locationString());"
True,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,182,String result = ((JsonPrimitive) popStack()).getAsString();
True,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,183,if (stackSize > 0) {
True,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,184,pathIndices[stackSize - 1]++;
False,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,156,eturn ((JsonPrimitive) popStack()).getAsString();
True,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,186,return result;
False,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,161,eturn ((JsonPrimitive) popStack()).getAsBoolean();
True,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,191,boolean result = ((JsonPrimitive) popStack()).getAsBoolean();
True,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,192,if (stackSize > 0) {
True,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,193,pathIndices[stackSize - 1]++;
True,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,195,return result;
True,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,201,if (stackSize > 0) {
True,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,202,pathIndices[stackSize - 1]++;
False,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,172,"hrow new IllegalStateException(""Expected "" + JsonToken.NUMBER + "" but was "" + token);"
True,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,209,throw new IllegalStateException(
True,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,210,"""Expected "" + JsonToken.NUMBER + "" but was "" + token + locationString());"
True,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,217,if (stackSize > 0) {
True,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,218,pathIndices[stackSize - 1]++;
False,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,185,"hrow new IllegalStateException(""Expected "" + JsonToken.NUMBER + "" but was "" + token);"
True,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,226,throw new IllegalStateException(
True,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,227,"""Expected "" + JsonToken.NUMBER + "" but was "" + token + locationString());"
True,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,231,if (stackSize > 0) {
True,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,232,pathIndices[stackSize - 1]++;
False,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,195,"hrow new IllegalStateException(""Expected "" + JsonToken.NUMBER + "" but was "" + token);"
True,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,240,throw new IllegalStateException(
True,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,241,"""Expected "" + JsonToken.NUMBER + "" but was "" + token + locationString());"
True,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,245,if (stackSize > 0) {
True,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,246,pathIndices[stackSize - 1]++;
False,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,203,tack.clear();
False,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,204,tack.add(SENTINEL_CLOSED);
True,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,252,stack = new Object[] { SENTINEL_CLOSED };
True,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,253,stackSize = 1;
True,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,259,"pathNames[stackSize - 2] = ""null"";"
True,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,262,"pathNames[stackSize - 1] = ""null"";"
True,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,264,pathIndices[stackSize - 1]++;
False,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,223,tack.add(entry.getValue());
False,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,224,tack.add(new JsonPrimitive((String)entry.getKey()));
True,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,275,push(entry.getValue());
True,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,276,push(new JsonPrimitive((String) entry.getKey()));
True,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,279,private void push(Object newTop) {
True,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,280,if (stackSize == stack.length) {
True,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,281,Object[] newStack = new Object[stackSize * 2];
True,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,282,int[] newPathIndices = new int[stackSize * 2];
True,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,283,String[] newPathNames = new String[stackSize * 2];
True,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,284,"System.arraycopy(stack, 0, newStack, 0, stackSize);"
True,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,285,"System.arraycopy(pathIndices, 0, newPathIndices, 0, stackSize);"
True,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,286,"System.arraycopy(pathNames, 0, newPathNames, 0, stackSize);"
True,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,287,stack = newStack;
True,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,288,pathIndices = newPathIndices;
True,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,289,pathNames = newPathNames;
True,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,291,stack[stackSize++] = newTop;
True,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,294,@Override public String getPath() {
True,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,295,StringBuilder result = new StringBuilder().append('$');
True,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,296,for (int i = 0; i < stackSize; i++) {
True,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,297,if (stack[i] instanceof JsonArray) {
True,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,298,if (stack[++i] instanceof Iterator) {
True,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,299,result.append('[').append(pathIndices[i]).append(']');
True,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,301,} else if (stack[i] instanceof JsonObject) {
True,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,302,if (stack[++i] instanceof Iterator) {
True,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,303,result.append('.');
True,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,304,if (pathNames[i] != null) {
True,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,305,result.append(pathNames[i]);
True,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,310,return result.toString();
True,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,313,private String locationString() {
True,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java,314,"return "" at path "" + getPath();"
False,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,350,"hrow new IllegalStateException(""Expected BEGIN_ARRAY but was "" + peek()"
False,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,351," "" at line "" + getLineNumber() + "" column "" + getColumnNumber() + "" path "" + getPath());"
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,350,"throw new IllegalStateException(""Expected BEGIN_ARRAY but was "" + peek() + locationString());"
False,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,369,"hrow new IllegalStateException(""Expected END_ARRAY but was "" + peek()"
False,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,370," "" at line "" + getLineNumber() + "" column "" + getColumnNumber() + "" path "" + getPath());"
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,368,"throw new IllegalStateException(""Expected END_ARRAY but was "" + peek() + locationString());"
False,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,387,"hrow new IllegalStateException(""Expected BEGIN_OBJECT but was "" + peek()"
False,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,388," "" at line "" + getLineNumber() + "" column "" + getColumnNumber() + "" path "" + getPath());"
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,385,"throw new IllegalStateException(""Expected BEGIN_OBJECT but was "" + peek() + locationString());"
False,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,407,"hrow new IllegalStateException(""Expected END_OBJECT but was "" + peek()"
False,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,408," "" at line "" + getLineNumber() + "" column "" + getColumnNumber() + "" path "" + getPath());"
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,404,"throw new IllegalStateException(""Expected END_OBJECT but was "" + peek() + locationString());"
False,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,793,"hrow new IllegalStateException(""Expected a name but was "" + peek()"
False,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,794," "" at line "" + getLineNumber() + "" column "" + getColumnNumber() + "" path "" + getPath());"
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,789,"throw new IllegalStateException(""Expected a name but was "" + peek() + locationString());"
False,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,830,"hrow new IllegalStateException(""Expected a string but was "" + peek()"
False,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,831," "" at line "" + getLineNumber() + "" column "" + getColumnNumber() + "" path "" + getPath());"
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,825,"throw new IllegalStateException(""Expected a string but was "" + peek() + locationString());"
False,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,859,"hrow new IllegalStateException(""Expected a boolean but was "" + peek()"
False,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,860," "" at line "" + getLineNumber() + "" column "" + getColumnNumber() + "" path "" + getPath());"
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,853,"throw new IllegalStateException(""Expected a boolean but was "" + peek() + locationString());"
False,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,879,"hrow new IllegalStateException(""Expected null but was "" + peek()"
False,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,880," "" at line "" + getLineNumber() + "" column "" + getColumnNumber() + "" path "" + getPath());"
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,872,"throw new IllegalStateException(""Expected null but was "" + peek() + locationString());"
False,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,913,"hrow new IllegalStateException(""Expected a double but was "" + peek()"
False,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,914," "" at line "" + getLineNumber() + "" column "" + getColumnNumber() + "" path "" + getPath());"
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,905,"throw new IllegalStateException(""Expected a double but was "" + peek() + locationString());"
False,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,920,"hrow new MalformedJsonException(""JSON forbids NaN and infinities: "" + result"
False,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,921," "" at line "" + getLineNumber() + "" column "" + getColumnNumber() + "" path "" + getPath());"
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,911,throw new MalformedJsonException(
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,912,"""JSON forbids NaN and infinities: "" + result + locationString());"
False,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,969,"hrow new IllegalStateException(""Expected a long but was "" + peek()"
False,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,970," "" at line "" + getLineNumber() + "" column "" + getColumnNumber() + "" path "" + getPath());"
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,960,"throw new IllegalStateException(""Expected a long but was "" + peek() + locationString());"
False,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,977,"hrow new NumberFormatException(""Expected a long but was "" + peekedString"
False,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,978," "" at line "" + getLineNumber() + "" column "" + getColumnNumber() + "" path "" + getPath());"
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,967,"throw new NumberFormatException(""Expected a long but was "" + peekedString + locationString());"
False,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,1175,"hrow new NumberFormatException(""Expected an int but was "" + peekedLong"
False,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,1176," "" at line "" + getLineNumber() + "" column "" + getColumnNumber() + "" path "" + getPath());"
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,1164,"throw new NumberFormatException(""Expected an int but was "" + peekedLong + locationString());"
False,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,1201,"hrow new IllegalStateException(""Expected an int but was "" + peek()"
False,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,1202," "" at line "" + getLineNumber() + "" column "" + getColumnNumber() + "" path "" + getPath());"
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,1189,"throw new IllegalStateException(""Expected an int but was "" + peek() + locationString());"
False,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,1209,"hrow new NumberFormatException(""Expected an int but was "" + peekedString"
False,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,1210," "" at line "" + getLineNumber() + "" column "" + getColumnNumber() + "" path "" + getPath());"
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,1196,"throw new NumberFormatException(""Expected an int but was "" + peekedString + locationString());"
False,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,1318,nt getLineNumber() {
False,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,1319,eturn lineNumber + 1;
False,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,1322,nt getColumnNumber() {
False,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,1323,eturn pos - lineStart + 1;
False,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,1415,"hrow new EOFException(""End of input"""
False,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,1416," "" at line "" + getLineNumber() + "" column "" + getColumnNumber());"
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,1393,"throw new EOFException(""End of input"" + locationString());"
False,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,1468,eturn getClass().getSimpleName()
False,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,1469," "" at line "" + getLineNumber() + "" column "" + getColumnNumber();"
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,1445,return getClass().getSimpleName() + locationString();
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,1448,private String locationString() {
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,1449,int line = lineNumber + 1;
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,1450,int column = pos - lineStart + 1;
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,1451,"return "" at line "" + line + "" column "" + column + "" path "" + getPath();"
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,1546,case '/':
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,1547,return escaped;
False,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,1565,eturn escaped;
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,1549,// throw error when none of the above cases are matched
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,1550,"throw syntaxError(""Invalid escape sequence"");"
False,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,1574,hrow new MalformedJsonException(message
False,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,1575," "" at line "" + getLineNumber() + "" column "" + getColumnNumber() + "" path "" + getPath());"
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,1559,throw new MalformedJsonException(message + locationString());
False,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,1618,"hrow new IllegalStateException(""Expected a name but was "" + reader.peek() + "" """
False,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,1619," "" at line "" + reader.getLineNumber() + "" column "" + reader.getColumnNumber()"
False,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,1620," "" path "" + reader.getPath());"
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,1602,throw new IllegalStateException(
True,gson/src/main/java/com/google/gson/stream/JsonReader.java,gson/src/main/java/com/google/gson/stream/JsonReader.java,1603,"""Expected a name but was "" + reader.peek() + reader.locationString());"
True,gson/src/test/java/com/google/gson/JsonObjectTest.java,gson/src/test/java/com/google/gson/JsonObjectTest.java,161,public void testSize() {
True,gson/src/test/java/com/google/gson/JsonObjectTest.java,gson/src/test/java/com/google/gson/JsonObjectTest.java,162,JsonObject o = new JsonObject();
True,gson/src/test/java/com/google/gson/JsonObjectTest.java,gson/src/test/java/com/google/gson/JsonObjectTest.java,163,"assertEquals(0, o.size());"
True,gson/src/test/java/com/google/gson/JsonObjectTest.java,gson/src/test/java/com/google/gson/JsonObjectTest.java,165,"o.add(""Hello"", new JsonPrimitive(1));"
True,gson/src/test/java/com/google/gson/JsonObjectTest.java,gson/src/test/java/com/google/gson/JsonObjectTest.java,166,"assertEquals(1, o.size());"
True,gson/src/test/java/com/google/gson/JsonObjectTest.java,gson/src/test/java/com/google/gson/JsonObjectTest.java,168,"o.add(""Hi"", new JsonPrimitive(1));"
True,gson/src/test/java/com/google/gson/JsonObjectTest.java,gson/src/test/java/com/google/gson/JsonObjectTest.java,169,"assertEquals(2, o.size());"
True,gson/src/test/java/com/google/gson/JsonObjectTest.java,gson/src/test/java/com/google/gson/JsonObjectTest.java,171,"o.remove(""Hello"");"
True,gson/src/test/java/com/google/gson/JsonObjectTest.java,gson/src/test/java/com/google/gson/JsonObjectTest.java,172,"assertEquals(1, o.size());"
True,gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java,19,import com.google.gson.JsonElement;
True,gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java,20,import com.google.gson.internal.Streams;
True,gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java,21,import com.google.gson.internal.bind.JsonTreeReader;
False,gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java,21,mport junit.framework.TestCase;
True,gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java,24,import java.util.Arrays;
True,gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java,25,import java.util.List;
True,gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java,26,import org.junit.Test;
True,gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java,27,import org.junit.runner.RunWith;
True,gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java,28,import org.junit.runners.Parameterized;
False,gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java,23,"SuppressWarnings(""resource"")"
False,gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java,24,ublic class JsonReaderPathTest extends TestCase {
False,gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java,25,ublic void testPath() throws IOException {
False,gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java,26,sonReader reader = new JsonReader(
False,gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java,27,"ew StringReader(""{\""a\"":[2,true,false,null,\""b\"",{\""c\"":\""d\""},[3]]}""));"
True,gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java,30,import static junit.framework.Assert.assertEquals;
True,gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java,31,import static org.junit.Assume.assumeTrue;
True,gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java,33,@RunWith(Parameterized.class)
True,gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java,34,public class JsonReaderPathTest {
True,gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java,35,"@Parameterized.Parameters(name = ""{0}"")"
True,gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java,36,public static List<Object[]> parameters() {
True,gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java,37,return Arrays.asList(
True,gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java,38,"new Object[] { Factory.STRING_READER },"
True,gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java,39,new Object[] { Factory.OBJECT_READER }
True,gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java,43,@Parameterized.Parameter
True,gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java,44,public Factory factory;
True,gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java,46,@Test public void path() throws IOException {
True,gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java,47,"JsonReader reader = factory.create(""{\""a\"":[2,true,false,null,\""b\"",{\""c\"":\""d\""},[3]]}"");"
False,gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java,65,ublic void testObjectPath() throws IOException {
False,gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java,66,"sonReader reader = new JsonReader(new StringReader(""{\""a\"":1,\""b\"":2}""));"
True,gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java,85,@Test public void objectPath() throws IOException {
True,gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java,86,"JsonReader reader = factory.create(""{\""a\"":1,\""b\"":2}"");"
False,gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java,105,ublic void testArrayPath() throws IOException {
False,gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java,106,"sonReader reader = new JsonReader(new StringReader(""[1,2]""));"
True,gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java,125,@Test public void arrayPath() throws IOException {
True,gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java,126,"JsonReader reader = factory.create(""[1,2]"");"
False,gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java,135,ublic void testMultipleTopLevelValuesInOneDocument() throws IOException {
False,gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java,136,"sonReader reader = new JsonReader(new StringReader(""[][]""));"
True,gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java,155,@Test public void multipleTopLevelValuesInOneDocument() throws IOException {
True,gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java,156,assumeTrue(factory == Factory.STRING_READER);
True,gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java,158,"JsonReader reader = factory.create(""[][]"");"
False,gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java,146,ublic void testSkipArrayElements() throws IOException {
False,gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java,147,"sonReader reader = new JsonReader(new StringReader(""[1,2,3]""));"
True,gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java,168,@Test public void skipArrayElements() throws IOException {
True,gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java,169,"JsonReader reader = factory.create(""[1,2,3]"");"
False,gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java,154,ublic void testSkipObjectNames() throws IOException {
False,gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java,155,"sonReader reader = new JsonReader(new StringReader(""{\""a\"":1}""));"
True,gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java,176,@Test public void skipObjectNames() throws IOException {
True,gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java,177,"JsonReader reader = factory.create(""{\""a\"":1}"");"
False,gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java,161,ublic void testSkipObjectValues() throws IOException {
False,gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java,162,"sonReader reader = new JsonReader(new StringReader(""{\""a\"":1,\""b\"":2}""));"
True,gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java,183,@Test public void skipObjectValues() throws IOException {
True,gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java,184,"JsonReader reader = factory.create(""{\""a\"":1,\""b\"":2}"");"
True,gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java,186,"assertEquals(""$."", reader.getPath());"
False,gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java,171,ublic void testSkipNestedStructures() throws IOException {
False,gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java,172,"sonReader reader = new JsonReader(new StringReader(""[[1,2,3],4]""));"
True,gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java,194,@Test public void skipNestedStructures() throws IOException {
True,gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java,195,"JsonReader reader = factory.create(""[[1,2,3],4]"");"
False,gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java,178,ublic void testArrayOfObjects() throws IOException {
False,gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java,179,"sonReader reader = new JsonReader(new StringReader(""[{},{},{}]""));"
True,gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java,201,@Test public void arrayOfObjects() throws IOException {
True,gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java,202,"JsonReader reader = factory.create(""[{},{},{}]"");"
False,gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java,198,ublic void testArrayOfArrays() throws IOException {
False,gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java,199,"sonReader reader = new JsonReader(new StringReader(""[[],[],[]]""));"
True,gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java,221,@Test public void arrayOfArrays() throws IOException {
True,gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java,222,"JsonReader reader = factory.create(""[[],[],[]]"");"
True,gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java,241,enum Factory {
True,gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java,242,STRING_READER {
True,gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java,243,@Override public JsonReader create(String data) {
True,gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java,244,return new JsonReader(new StringReader(data));
True,gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java,247,OBJECT_READER {
True,gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java,248,@Override public JsonReader create(String data) {
True,gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java,249,JsonElement element = Streams.parse(new JsonReader(new StringReader(data)));
True,gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java,250,return new JsonTreeReader(element);
True,gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java,254,abstract JsonReader create(String data);
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,177,public void testInvalidJsonInput() throws IOException {
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,178,"String json = ""{\n"""
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,179,"+ ""   \""h\\ello\"": true,\n"""
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,180,"+ ""   \""foo\"": [\""world\""]\n"""
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,183,JsonReader reader = new JsonReader(reader(json));
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,184,reader.beginObject();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,185,try {
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,186,reader.nextName();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,187,fail();
True,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,188,} catch (IOException expected) {

is_addition,old_file_path,new_file_path,line_num,content
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,2,* Copyright (C) 2010 The Android Open Source Project
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,3,* Copyright (C) 2012 Google Inc.
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,5,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,6,* you may not use this file except in compliance with the License.
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,7,* You may obtain a copy of the License at
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,14,* See the License for the specific language governing permissions and
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,15,* limitations under the License.
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,18,package com.google.gson.internal;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,20,import java.io.ObjectStreamException;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,21,import java.io.Serializable;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,22,import java.util.AbstractMap;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,23,import java.util.AbstractSet;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,24,import java.util.Comparator;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,25,import java.util.ConcurrentModificationException;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,26,import java.util.Iterator;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,27,import java.util.LinkedHashMap;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,28,import java.util.Map;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,29,import java.util.NoSuchElementException;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,30,import java.util.Set;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,33,"* A map of comparable keys to values. Unlike {@code TreeMap}, this class uses"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,34,* insertion order for iteration order. Comparison order is only used as an
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,35,* optimization for efficient insertion and removal.
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,37,* <p>This implementation was derived from Android 4.1's TreeMap and
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,38,* LinkedHashMap classes.
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,40,"public final class LinkedTreeMap<K, V> extends AbstractMap<K, V> implements Serializable {"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,41,"@SuppressWarnings(""unchecked"") // to avoid Comparable<Comparable<Comparable<...>>>"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,42,private static final Comparator<Comparable> NATURAL_ORDER = new Comparator<Comparable>() {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,43,"public int compare(Comparable a, Comparable b) {"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,44,return a.compareTo(b);
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,48,Comparator<? super K> comparator;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,49,"Node<K, V> root;"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,50,"final Node<K, V> header;"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,51,int size = 0;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,52,int modCount = 0;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,55,"* Create a natural order, empty tree map whose keys must be mutually"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,56,* comparable and non-null.
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,58,"@SuppressWarnings(""unchecked"") // unsafe! this assumes K is comparable"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,59,public LinkedTreeMap() {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,60,this((Comparator<? super K>) NATURAL_ORDER);
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,64,* Create a tree map ordered by {@code comparator}. This map's keys may only
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,65,* be null if {@code comparator} permits.
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,67,"* @param comparator the comparator to order elements with, or {@code null} to"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,68,*     use the natural ordering.
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,70,"@SuppressWarnings(""unchecked"") // unsafe! if comparator is null, this assumes K is comparable"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,71,public LinkedTreeMap(Comparator<? super K> comparator) {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,72,this.comparator = comparator != null
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,73,? comparator
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,74,: (Comparator) NATURAL_ORDER;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,75,"this.header = new Node<K, V>();"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,78,@Override public int size() {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,79,return size;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,82,@Override public V get(Object key) {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,83,"Entry<K, V> entry = findByObject(key);"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,84,return entry != null ? entry.getValue() : null;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,87,@Override public boolean containsKey(Object key) {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,88,return findByObject(key) != null;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,91,"@Override public V put(K key, V value) {"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,92,"return putInternal(key, value);"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,95,@Override public void clear() {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,96,root = null;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,97,size = 0;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,98,modCount++;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,101,@Override public V remove(Object key) {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,102,"Node<K, V> node = removeInternalByKey(key);"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,103,return node != null ? node.value : null;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,106,"V putInternal(K key, V value) {"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,107,"Node<K, V> created = find(key, true);"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,108,V result = created.value;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,109,created.value = value;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,110,return result;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,114,"* Returns the node at or adjacent to the given key, creating it if requested."
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,116,* @throws ClassCastException if {@code key} and the tree's keys aren't
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,117,*     mutually comparable.
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,119,"Node<K, V> find(K key, boolean create) {"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,120,if (root == null) {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,121,if (comparator == NATURAL_ORDER && !(key instanceof Comparable)) {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,122,"throw new ClassCastException(key.getClass().getName() + "" is not Comparable"");"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,124,if (create) {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,125,"root = new Node<K, V>(null, key, header, header);"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,126,size = 1;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,127,modCount++;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,128,return root;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,129,} else {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,130,return null;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,134,"Node<K, V> nearest = root;"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,135,while (true) {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,136,"int comparison = comparator.compare(key, nearest.key);"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,138,// We found the requested key.
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,139,if (comparison == 0) {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,140,return nearest;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,143,"// If it exists, the key is in a subtree. Go deeper."
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,144,"Node<K, V> child = (comparison < 0) ? nearest.left : nearest.right;"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,145,if (child != null) {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,146,nearest = child;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,147,continue;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,150,"// The key doesn't exist in this tree. Create it here, then rebalance."
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,151,if (create) {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,152,"Node<K, V> created = new Node<K, V>(nearest, key, header, header.prev);"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,153,if (comparison < 0) { // nearest.key is higher
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,154,nearest.left = created;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,155,"} else { // comparison > 0, nearest.key is lower"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,156,nearest.right = created;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,158,size++;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,159,modCount++;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,160,"rebalance(nearest, true);"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,161,return created;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,162,} else {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,163,return null;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,168,// TODO(jwilson): don't throw ClassCastExceptions on unknown types
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,169,"@SuppressWarnings(""unchecked"") // this method throws ClassCastExceptions!"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,170,"Node<K, V> findByObject(Object key) {"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,171,"return find((K) key, false);"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,175,* Returns this map's entry that has the same key and value as {@code
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,176,"* entry}, or null if this map has no such entry."
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,178,* <p>This method uses the comparator for key equality rather than {@code
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,179,* equals}. If this map's comparator isn't consistent with equals (such as
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,180,"* {@code String.CASE_INSENSITIVE_ORDER}), then {@code remove()} and {@code"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,181,* contains()} will violate the collections API.
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,183,"Node<K, V> findByEntry(Entry<?, ?> entry) {"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,184,"Node<K, V> mine = findByObject(entry.getKey());"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,185,"boolean valuesEqual = mine != null && equal(mine.value, entry.getValue());"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,186,return valuesEqual ? mine : null;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,189,"private boolean equal(Object a, Object b) {"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,190,return a == b || (a != null && a.equals(b));
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,194,"* Removes {@code node} from this tree, rearranging the tree's structure as"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,195,* necessary.
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,197,"void removeInternal(Node<K, V> node) {"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,198,// Unlink the node.
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,199,node.prev.next = node.next;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,200,node.next.prev = node.prev;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,201,node.next = node.prev = null; // Help the GC (for performance)
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,203,"Node<K, V> left = node.left;"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,204,"Node<K, V> right = node.right;"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,205,"Node<K, V> originalParent = node.parent;"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,206,if (left != null && right != null) {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,209,"* To remove a node with both left and right subtrees, move an"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,210,* adjacent node from one of those subtrees into this node's place.
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,212,* Removing the adjacent node may change this node's subtrees. This
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,213,* node may no longer have two subtrees once the adjacent node is
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,214,* gone!
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,217,"Node<K, V> adjacent = (left.height > right.height) ? left.last() : right.first();"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,218,removeInternal(adjacent); // takes care of rebalance and size--
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,220,int leftHeight = 0;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,221,left = node.left;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,222,if (left != null) {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,223,leftHeight = left.height;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,224,adjacent.left = left;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,225,left.parent = adjacent;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,226,node.left = null;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,228,int rightHeight = 0;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,229,right = node.right;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,230,if (right != null) {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,231,rightHeight = right.height;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,232,adjacent.right = right;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,233,right.parent = adjacent;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,234,node.right = null;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,236,"adjacent.height = Math.max(leftHeight, rightHeight) + 1;"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,237,"replaceInParent(node, adjacent);"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,238,return;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,239,} else if (left != null) {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,240,"replaceInParent(node, left);"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,241,node.left = null;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,242,} else if (right != null) {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,243,"replaceInParent(node, right);"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,244,node.right = null;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,245,} else {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,246,"replaceInParent(node, null);"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,249,"rebalance(originalParent, false);"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,250,size--;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,251,modCount++;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,254,"Node<K, V> removeInternalByKey(Object key) {"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,255,"Node<K, V> node = findByObject(key);"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,256,if (node != null) {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,257,removeInternal(node);
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,259,return node;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,262,"private void replaceInParent(Node<K, V> node, Node<K, V> replacement) {"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,263,"Node<K, V> parent = node.parent;"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,264,node.parent = null;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,265,if (replacement != null) {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,266,replacement.parent = parent;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,269,if (parent != null) {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,270,if (parent.left == node) {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,271,parent.left = replacement;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,272,} else {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,273,assert (parent.right == node);
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,274,parent.right = replacement;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,276,} else {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,277,root = replacement;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,282,* Rebalances the tree by making any AVL rotations necessary between the
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,283,* newly-unbalanced node and the tree's root.
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,285,* @param insert true if the node was unbalanced by an insert; false if it
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,286,*     was by a removal.
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,288,"private void rebalance(Node<K, V> unbalanced, boolean insert) {"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,289,"for (Node<K, V> node = unbalanced; node != null; node = node.parent) {"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,290,"Node<K, V> left = node.left;"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,291,"Node<K, V> right = node.right;"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,292,int leftHeight = left != null ? left.height : 0;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,293,int rightHeight = right != null ? right.height : 0;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,295,int delta = leftHeight - rightHeight;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,296,if (delta == -2) {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,297,"Node<K, V> rightLeft = right.left;"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,298,"Node<K, V> rightRight = right.right;"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,299,int rightRightHeight = rightRight != null ? rightRight.height : 0;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,300,int rightLeftHeight = rightLeft != null ? rightLeft.height : 0;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,302,int rightDelta = rightLeftHeight - rightRightHeight;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,303,if (rightDelta == -1 || (rightDelta == 0 && !insert)) {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,304,rotateLeft(node); // AVL right right
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,305,} else {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,306,assert (rightDelta == 1);
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,307,rotateRight(right); // AVL right left
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,308,rotateLeft(node);
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,310,if (insert) {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,311,break; // no further rotations will be necessary
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,314,} else if (delta == 2) {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,315,"Node<K, V> leftLeft = left.left;"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,316,"Node<K, V> leftRight = left.right;"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,317,int leftRightHeight = leftRight != null ? leftRight.height : 0;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,318,int leftLeftHeight = leftLeft != null ? leftLeft.height : 0;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,320,int leftDelta = leftLeftHeight - leftRightHeight;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,321,if (leftDelta == 1 || (leftDelta == 0 && !insert)) {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,322,rotateRight(node); // AVL left left
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,323,} else {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,324,assert (leftDelta == -1);
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,325,rotateLeft(left); // AVL left right
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,326,rotateRight(node);
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,328,if (insert) {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,329,break; // no further rotations will be necessary
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,332,} else if (delta == 0) {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,333,node.height = leftHeight + 1; // leftHeight == rightHeight
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,334,if (insert) {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,335,"break; // the insert caused balance, so rebalancing is done!"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,338,} else {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,339,assert (delta == -1 || delta == 1);
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,340,"node.height = Math.max(leftHeight, rightHeight) + 1;"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,341,if (!insert) {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,342,"break; // the height hasn't changed, so rebalancing is done!"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,349,* Rotates the subtree so that its root's right child is the new root.
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,351,"private void rotateLeft(Node<K, V> root) {"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,352,"Node<K, V> left = root.left;"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,353,"Node<K, V> pivot = root.right;"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,354,"Node<K, V> pivotLeft = pivot.left;"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,355,"Node<K, V> pivotRight = pivot.right;"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,357,// move the pivot's left child to the root's right
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,358,root.right = pivotLeft;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,359,if (pivotLeft != null) {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,360,pivotLeft.parent = root;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,363,"replaceInParent(root, pivot);"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,365,// move the root to the pivot's left
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,366,pivot.left = root;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,367,root.parent = pivot;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,369,// fix heights
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,370,"root.height = Math.max(left != null ? left.height : 0,"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,371,pivotLeft != null ? pivotLeft.height : 0) + 1;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,372,"pivot.height = Math.max(root.height,"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,373,pivotRight != null ? pivotRight.height : 0) + 1;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,377,* Rotates the subtree so that its root's left child is the new root.
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,379,"private void rotateRight(Node<K, V> root) {"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,380,"Node<K, V> pivot = root.left;"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,381,"Node<K, V> right = root.right;"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,382,"Node<K, V> pivotLeft = pivot.left;"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,383,"Node<K, V> pivotRight = pivot.right;"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,385,// move the pivot's right child to the root's left
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,386,root.left = pivotRight;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,387,if (pivotRight != null) {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,388,pivotRight.parent = root;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,391,"replaceInParent(root, pivot);"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,393,// move the root to the pivot's right
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,394,pivot.right = root;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,395,root.parent = pivot;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,397,// fixup heights
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,398,"root.height = Math.max(right != null ? right.height : 0,"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,399,pivotRight != null ? pivotRight.height : 0) + 1;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,400,"pivot.height = Math.max(root.height,"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,401,pivotLeft != null ? pivotLeft.height : 0) + 1;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,404,private EntrySet entrySet;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,405,private KeySet keySet;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,407,"@Override public Set<Entry<K, V>> entrySet() {"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,408,EntrySet result = entrySet;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,409,return result != null ? result : (entrySet = new EntrySet());
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,412,@Override public Set<K> keySet() {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,413,KeySet result = keySet;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,414,return result != null ? result : (keySet = new KeySet());
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,417,"static class Node<K, V> implements Map.Entry<K, V> {"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,418,"Node<K, V> parent;"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,419,"Node<K, V> left;"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,420,"Node<K, V> right;"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,421,"Node<K, V> next;"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,422,"Node<K, V> prev;"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,423,final K key;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,424,V value;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,425,int height;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,427,/** Create the header entry */
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,428,Node() {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,429,key = null;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,430,next = prev = this;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,433,/** Create a regular entry */
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,434,"Node(Node<K, V> parent, K key, Node<K, V> next, Node<K, V> prev) {"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,435,this.parent = parent;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,436,this.key = key;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,437,this.height = 1;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,438,this.next = next;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,439,this.prev = prev;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,440,prev.next = this;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,441,next.prev = this;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,444,public K getKey() {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,445,return key;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,448,public V getValue() {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,449,return value;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,452,public V setValue(V value) {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,453,V oldValue = this.value;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,454,this.value = value;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,455,return oldValue;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,458,@Override public boolean equals(Object o) {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,459,if (o instanceof Map.Entry) {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,460,Map.Entry other = (Map.Entry) o;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,461,return (key == null ? other.getKey() == null : key.equals(other.getKey()))
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,462,&& (value == null ? other.getValue() == null : value.equals(other.getValue()));
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,464,return false;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,467,@Override public int hashCode() {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,468,return (key == null ? 0 : key.hashCode())
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,469,^ (value == null ? 0 : value.hashCode());
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,472,@Override public String toString() {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,473,"return key + ""="" + value;"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,477,* Returns the first node in this subtree.
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,479,"public Node<K, V> first() {"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,480,"Node<K, V> node = this;"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,481,"Node<K, V> child = node.left;"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,482,while (child != null) {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,483,node = child;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,484,child = node.left;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,486,return node;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,490,* Returns the last node in this subtree.
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,492,"public Node<K, V> last() {"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,493,"Node<K, V> node = this;"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,494,"Node<K, V> child = node.right;"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,495,while (child != null) {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,496,node = child;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,497,child = node.right;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,499,return node;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,503,private abstract class LinkedTreeMapIterator<T> implements Iterator<T> {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,504,"Node<K, V> next = header.next;"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,505,"Node<K, V> lastReturned = null;"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,506,int expectedModCount = modCount;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,508,public final boolean hasNext() {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,509,return next != header;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,512,"final Node<K, V> nextNode() {"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,513,"Node<K, V> e = next;"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,514,if (e == header) {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,515,throw new NoSuchElementException();
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,517,if (modCount != expectedModCount) {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,518,throw new ConcurrentModificationException();
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,520,next = e.next;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,521,return lastReturned = e;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,524,public final void remove() {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,525,if (lastReturned == null) {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,526,throw new IllegalStateException();
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,528,LinkedTreeMap.this.removeInternal(lastReturned);
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,529,lastReturned = null;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,530,expectedModCount = modCount;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,534,"class EntrySet extends AbstractSet<Map.Entry<K, V>> {"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,535,@Override public int size() {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,536,return size;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,539,"@Override public Iterator<Entry<K, V>> iterator() {"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,540,"return new LinkedTreeMapIterator<Entry<K, V>>() {"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,541,"public Entry<K, V> next() {"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,542,return nextNode();
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,547,@Override public boolean contains(Object o) {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,548,"return o instanceof Entry && findByEntry((Entry<?, ?>) o) != null;"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,551,@Override public boolean remove(Object o) {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,552,if (!(o instanceof Entry)) {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,553,return false;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,556,"Node<K, V> node = findByEntry((Entry<?, ?>) o);"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,557,if (node == null) {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,558,return false;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,560,removeInternal(node);
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,561,return true;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,564,@Override public void clear() {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,565,LinkedTreeMap.this.clear();
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,569,class KeySet extends AbstractSet<K> {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,570,@Override public int size() {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,571,return size;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,574,@Override public Iterator<K> iterator() {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,575,return new LinkedTreeMapIterator<K>() {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,576,public K next() {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,577,return nextNode().key;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,582,@Override public boolean contains(Object o) {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,583,return containsKey(o);
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,586,@Override public boolean remove(Object key) {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,587,return removeInternalByKey(key) != null;
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,590,@Override public void clear() {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,591,LinkedTreeMap.this.clear();
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,596,"* If somebody is unlucky enough to have to serialize one of these, serialize"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,597,* it as a LinkedHashMap so that they won't need Gson on the other side to
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,598,"* deserialize it. Using serialization defeats our DoS defence, so most apps"
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,599,* shouldn't use it.
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,601,private Object writeReplace() throws ObjectStreamException {
True,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java,602,"return new LinkedHashMap<K, V>(this);"
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,2,* Copyright (C) 2012 Google Inc.
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,5,* you may not use this file except in compliance with the License.
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,6,* You may obtain a copy of the License at
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,13,* See the License for the specific language governing permissions and
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,14,* limitations under the License.
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,17,package com.google.gson.internal;
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,19,import java.util.ArrayList;
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,20,import java.util.Arrays;
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,21,import junit.framework.TestCase;
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,23,public final class LinkedTreeMapTest extends TestCase {
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,24,public void testIterationOrder() {
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,25,"LinkedTreeMap<String, String> map = new LinkedTreeMap<String, String>();"
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,26,"map.put(""a"", ""android"");"
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,27,"map.put(""c"", ""cola"");"
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,28,"map.put(""b"", ""bbq"");"
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,29,"assertIterationOrder(map.keySet(), ""a"", ""c"", ""b"");"
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,30,"assertIterationOrder(map.values(), ""android"", ""cola"", ""bbq"");"
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,33,// TODO: test contains with non-string key
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,35,"private <T> void assertIterationOrder(Iterable<T> actual, T... expected) {"
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,36,ArrayList<T> actualList = new ArrayList<T>();
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,37,for (T t : actual) {
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,38,actualList.add(t);
True,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java,40,"assertEquals(Arrays.asList(expected), actualList);"

is_addition,old_file_path,new_file_path,line_num,content
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,81,tatic final TypeAdapter DEFAULT_TYPE_ADAPTER =
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,82,ew TypeAdapterNotRequired(new PrimitiveTypeAdapter());
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,94,rivate final TypeAdapter typeAdapter;
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,149,"EFAULT_TYPE_ADAPTER, DEFAULT_JSON_FORMATTER, false,"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,146,"DEFAULT_JSON_FORMATTER, false,"
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,154,"appedObjectConstructor objectConstructor,"
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,155,"ypeAdapter typeAdapter, JsonFormatter formatter, boolean serializeNulls,"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,151,"MappedObjectConstructor objectConstructor, JsonFormatter formatter, boolean serializeNulls,"
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,161,his.typeAdapter = typeAdapter;
False,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,377,"reateDefaultObjectNavigatorFactory(), deserializers, objectConstructor, typeAdapter);"
True,gson/src/main/java/com/google/gson/Gson.java,gson/src/main/java/com/google/gson/Gson.java,372,"createDefaultObjectNavigatorFactory(), deserializers, objectConstructor);"
False,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,58,rivate final TypeAdapter typeAdapter;
False,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,81,ypeAdapter = Gson.DEFAULT_TYPE_ADAPTER;
False,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,358,"son gson = new Gson(exclusionStrategy, fieldNamingPolicy, objConstructor, typeAdapter,"
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,356,"Gson gson = new Gson(exclusionStrategy, fieldNamingPolicy, objConstructor,"
False,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,34,"ypeAdapter typeAdapter, ParameterizedTypeHandlerMap<JsonDeserializer<?>> deserializers,"
True,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,34,"ParameterizedTypeHandlerMap<JsonDeserializer<?>> deserializers,"
False,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,36,"uper(jsonArray, arrayType, factory, objectConstructor, typeAdapter, deserializers, context);"
True,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,36,"super(jsonArray, arrayType, factory, objectConstructor, deserializers, context);"
False,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,31,rivate final TypeAdapter typeAdapter;
False,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,35,"appedObjectConstructor objectConstructor, TypeAdapter typeAdapter) {"
True,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,34,MappedObjectConstructor objectConstructor) {
False,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,39,his.typeAdapter = typeAdapter;
False,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,64,"sonArray, arrayType, navigatorFactory, objectConstructor, typeAdapter, deserializers,"
False,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,65,ontext);
True,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,62,"jsonArray, arrayType, navigatorFactory, objectConstructor, deserializers, context);"
False,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,75,"sonObject, typeOfT, navigatorFactory, objectConstructor, typeAdapter, deserializers,"
False,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,76,ontext);
True,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,72,"jsonObject, typeOfT, navigatorFactory, objectConstructor, deserializers, context);"
False,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,87,"son, typeOfT, navigatorFactory, objectConstructor, typeAdapter, deserializers, context);"
True,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,83,"json, typeOfT, navigatorFactory, objectConstructor, deserializers, context);"
False,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,91,f (typeOfT instanceof Class) {
False,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java,92,"arget = typeAdapter.adaptType(target, (Class) typeOfT);"
False,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,36,rotected final TypeAdapter typeAdapter;
False,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,44,"bjectNavigatorFactory factory, ObjectConstructor objectConstructor, TypeAdapter typeAdapter,"
True,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,43,"ObjectNavigatorFactory factory, ObjectConstructor objectConstructor,"
False,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,51,his.typeAdapter = typeAdapter;
False,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,79,"actory, objectConstructor, typeAdapter, deserializers, context);"
True,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,77,"factory, objectConstructor, deserializers, context);"
False,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,86,"actory, objectConstructor, typeAdapter, deserializers, context);"
True,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java,84,"factory, objectConstructor, deserializers, context);"
False,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,33,"ypeAdapter typeAdapter, ParameterizedTypeHandlerMap<JsonDeserializer<?>> deserializers,"
True,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,33,"ParameterizedTypeHandlerMap<JsonDeserializer<?>> deserializers,"
False,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,35,"uper(json, type, factory, objectConstructor, typeAdapter, deserializers, context);"
True,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,35,"super(json, type, factory, objectConstructor, deserializers, context);"
False,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,52,InstanceCreator<T>) instanceCreatorMap.getHandlerFor(Enum.class);
True,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,52,(InstanceCreator<T>) instanceCreatorMap.getHandlerFor(Enum.class);
False,gson/src/main/java/com/google/gson/TypeAdapterNotRequired.java,gson/src/main/java/com/google/gson/TypeAdapterNotRequired.java,2, Copyright (C) 2008 Google Inc.
False,gson/src/main/java/com/google/gson/TypeAdapterNotRequired.java,gson/src/main/java/com/google/gson/TypeAdapterNotRequired.java,4," Licensed under the Apache License, Version 2.0 (the ""License"");"
False,gson/src/main/java/com/google/gson/TypeAdapterNotRequired.java,gson/src/main/java/com/google/gson/TypeAdapterNotRequired.java,5, you may not use this file except in compliance with the License.
False,gson/src/main/java/com/google/gson/TypeAdapterNotRequired.java,gson/src/main/java/com/google/gson/TypeAdapterNotRequired.java,6, You may obtain a copy of the License at
False,gson/src/main/java/com/google/gson/TypeAdapterNotRequired.java,gson/src/main/java/com/google/gson/TypeAdapterNotRequired.java,8, http://www.apache.org/licenses/LICENSE-2.0
False,gson/src/main/java/com/google/gson/TypeAdapterNotRequired.java,gson/src/main/java/com/google/gson/TypeAdapterNotRequired.java,10," Unless required by applicable law or agreed to in writing, software"
False,gson/src/main/java/com/google/gson/TypeAdapterNotRequired.java,gson/src/main/java/com/google/gson/TypeAdapterNotRequired.java,11," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,gson/src/main/java/com/google/gson/TypeAdapterNotRequired.java,gson/src/main/java/com/google/gson/TypeAdapterNotRequired.java,12," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,gson/src/main/java/com/google/gson/TypeAdapterNotRequired.java,gson/src/main/java/com/google/gson/TypeAdapterNotRequired.java,13, See the License for the specific language governing permissions and
False,gson/src/main/java/com/google/gson/TypeAdapterNotRequired.java,gson/src/main/java/com/google/gson/TypeAdapterNotRequired.java,14, limitations under the License.
False,gson/src/main/java/com/google/gson/TypeAdapterNotRequired.java,gson/src/main/java/com/google/gson/TypeAdapterNotRequired.java,17,ackage com.google.gson;
False,gson/src/main/java/com/google/gson/TypeAdapterNotRequired.java,gson/src/main/java/com/google/gson/TypeAdapterNotRequired.java,20," This class implements the {@link TypeAdapter} interface; however, if the"
False,gson/src/main/java/com/google/gson/TypeAdapterNotRequired.java,gson/src/main/java/com/google/gson/TypeAdapterNotRequired.java,21, from instance type is the same as the to type then this object will
False,gson/src/main/java/com/google/gson/TypeAdapterNotRequired.java,gson/src/main/java/com/google/gson/TypeAdapterNotRequired.java,22," terminate the chain early and return the ""from"" object to the calling"
False,gson/src/main/java/com/google/gson/TypeAdapterNotRequired.java,gson/src/main/java/com/google/gson/TypeAdapterNotRequired.java,23, class.
False,gson/src/main/java/com/google/gson/TypeAdapterNotRequired.java,gson/src/main/java/com/google/gson/TypeAdapterNotRequired.java,25, If the incoming object does need some kind of conversion then this object
False,gson/src/main/java/com/google/gson/TypeAdapterNotRequired.java,gson/src/main/java/com/google/gson/TypeAdapterNotRequired.java,26, will delegate to the {@link TypeAdapter} that it is wrapping.
False,gson/src/main/java/com/google/gson/TypeAdapterNotRequired.java,gson/src/main/java/com/google/gson/TypeAdapterNotRequired.java,28, @author Joel Leitch
False,gson/src/main/java/com/google/gson/TypeAdapterNotRequired.java,gson/src/main/java/com/google/gson/TypeAdapterNotRequired.java,30,inal class TypeAdapterNotRequired implements TypeAdapter {
False,gson/src/main/java/com/google/gson/TypeAdapterNotRequired.java,gson/src/main/java/com/google/gson/TypeAdapterNotRequired.java,32,rivate final TypeAdapter delegate;
False,gson/src/main/java/com/google/gson/TypeAdapterNotRequired.java,gson/src/main/java/com/google/gson/TypeAdapterNotRequired.java,35, Constructs a TypeAdapterNotRequired that will wrap the delegate instance
False,gson/src/main/java/com/google/gson/TypeAdapterNotRequired.java,gson/src/main/java/com/google/gson/TypeAdapterNotRequired.java,36, that is passed in.
False,gson/src/main/java/com/google/gson/TypeAdapterNotRequired.java,gson/src/main/java/com/google/gson/TypeAdapterNotRequired.java,38, @param delegate the TypeConverter to delegate to if this instance can
False,gson/src/main/java/com/google/gson/TypeAdapterNotRequired.java,gson/src/main/java/com/google/gson/TypeAdapterNotRequired.java,39,        not handle the type adapting (can not be null)
False,gson/src/main/java/com/google/gson/TypeAdapterNotRequired.java,gson/src/main/java/com/google/gson/TypeAdapterNotRequired.java,41,ypeAdapterNotRequired(TypeAdapter delegate) {
False,gson/src/main/java/com/google/gson/TypeAdapterNotRequired.java,gson/src/main/java/com/google/gson/TypeAdapterNotRequired.java,42,reconditions.checkNotNull(delegate);
False,gson/src/main/java/com/google/gson/TypeAdapterNotRequired.java,gson/src/main/java/com/google/gson/TypeAdapterNotRequired.java,43,his.delegate = delegate;
False,gson/src/main/java/com/google/gson/TypeAdapterNotRequired.java,gson/src/main/java/com/google/gson/TypeAdapterNotRequired.java,46,"SuppressWarnings(""unchecked"")"
False,gson/src/main/java/com/google/gson/TypeAdapterNotRequired.java,gson/src/main/java/com/google/gson/TypeAdapterNotRequired.java,47,"ublic <T> T adaptType(Object from, Class<T> to) {"
False,gson/src/main/java/com/google/gson/TypeAdapterNotRequired.java,gson/src/main/java/com/google/gson/TypeAdapterNotRequired.java,48,f (to.isAssignableFrom(from.getClass())) {
False,gson/src/main/java/com/google/gson/TypeAdapterNotRequired.java,gson/src/main/java/com/google/gson/TypeAdapterNotRequired.java,49,eturn (T) from;
False,gson/src/main/java/com/google/gson/TypeAdapterNotRequired.java,gson/src/main/java/com/google/gson/TypeAdapterNotRequired.java,51,"eturn delegate.adaptType(from, to);"
True,gson/src/main/java/com/google/gson/PrimitiveTypeAdapter.java,gson/src/test/java/com/google/gson/PrimitiveTypeAdapter.java,23,import com.google.gson.JsonParseException;
True,gson/src/main/java/com/google/gson/PrimitiveTypeAdapter.java,gson/src/test/java/com/google/gson/PrimitiveTypeAdapter.java,24,import com.google.gson.Primitives;
False,gson/src/main/java/com/google/gson/PrimitiveTypeAdapter.java,gson/src/test/java/com/google/gson/PrimitiveTypeAdapter.java,29,inal class PrimitiveTypeAdapter implements TypeAdapter {
True,gson/src/main/java/com/google/gson/PrimitiveTypeAdapter.java,gson/src/test/java/com/google/gson/PrimitiveTypeAdapter.java,32,final class PrimitiveTypeAdapter {
False,gson/src/main/java/com/google/gson/PrimitiveTypeAdapter.java,gson/src/test/java/com/google/gson/PrimitiveTypeAdapter.java,31,"SuppressWarnings({""unchecked""})"
True,gson/src/main/java/com/google/gson/PrimitiveTypeAdapter.java,gson/src/test/java/com/google/gson/PrimitiveTypeAdapter.java,34,"@SuppressWarnings( { ""unchecked"" })"
False,gson/src/main/java/com/google/gson/PrimitiveTypeAdapter.java,gson/src/test/java/com/google/gson/PrimitiveTypeAdapter.java,70,hrow new JsonParseException(
False,gson/src/main/java/com/google/gson/PrimitiveTypeAdapter.java,gson/src/test/java/com/google/gson/PrimitiveTypeAdapter.java,71,"Can not adapt type "" + from.getClass() + "" to "" + to);"
True,gson/src/main/java/com/google/gson/PrimitiveTypeAdapter.java,gson/src/test/java/com/google/gson/PrimitiveTypeAdapter.java,73,"throw new JsonParseException(""Can not adapt type "" + from.getClass() + "" to "" + to);"
False,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,2, Copyright (C) 2008 Google Inc.
False,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,4," Licensed under the Apache License, Version 2.0 (the ""License"");"
False,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,5, you may not use this file except in compliance with the License.
False,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,6, You may obtain a copy of the License at
False,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,8, http://www.apache.org/licenses/LICENSE-2.0
False,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,10," Unless required by applicable law or agreed to in writing, software"
False,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,11," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,12," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,13, See the License for the specific language governing permissions and
False,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,14, limitations under the License.
False,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,17,ackage com.google.gson;
False,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,19,mport junit.framework.TestCase;
False,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,22, Performs some unit testing for the {@link PrimitiveTypeAdapter} class.
False,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,24, @author Joel Leitch
False,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,26,ublic class PrimitiveTypeAdapterTest extends TestCase {
False,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,27,rivate PrimitiveTypeAdapter typeAdapter;
False,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,29,Override
False,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,30,rotected void setUp() throws Exception {
False,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,31,uper.setUp();
False,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,32,ypeAdapter = new PrimitiveTypeAdapter();
False,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,35,ublic void testImproperConversion() throws Exception {
False,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,36,ouble someValue = 1.0;
False,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,37,ry {
False,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,38,"ypeAdapter.adaptType(someValue, String.class);"
False,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,39,"ail(""Should not be able to convert incompatible types."");"
False,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,40, catch (JsonParseException expected) { }
False,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,43,ublic void testImproperCharacterConversion() throws Exception {
False,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,44,"tring someValue = ""test123"";"
False,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,45,ry {
False,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,46,"ypeAdapter.adaptType(someValue, Character.class);"
False,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,47,"ail(""Should not be able to convert incompatible types."");"
False,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,48, catch (JsonParseException expected) { }
False,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,51,ublic void testProperPrimitiveConversions() throws Exception {
False,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,52,"tring stringValue = ""1.0"";"
False,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,53,"ouble actualValue = typeAdapter.adaptType(stringValue, Double.class);"
False,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,54,"ssertEquals(1.0, actualValue.doubleValue(), 0.0001);"
False,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,56,ouble doubleValue = 1.0;
False,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,57,"ctualValue = typeAdapter.adaptType(doubleValue, Double.class);"
False,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,58,"ssertEquals(1.0, actualValue.doubleValue(), 0.0001);"
False,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,60,"tringValue = ""A"";"
False,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,61,"haracter actualCharacter = typeAdapter.adaptType(stringValue, Character.class);"
False,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,62,"ssertEquals('A', actualCharacter.charValue());"
False,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,65,ublic void testProperEnumConversions() throws Exception {
False,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,66,estEnum expected = TestEnum.TEST1;
False,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,67,"estEnum actual = typeAdapter.adaptType(expected, TestEnum.class);"
False,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,68,"ssertEquals(expected, actual);"
False,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,71,rivate static enum TestEnum {
False,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,gson/src/test/java/com/google/gson/PrimitiveTypeAdapterTest.java,72,"EST1, TEST2, TEST3"

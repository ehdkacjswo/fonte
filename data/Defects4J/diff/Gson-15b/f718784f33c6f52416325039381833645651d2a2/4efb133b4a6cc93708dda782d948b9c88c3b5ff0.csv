is_addition,old_file_path,new_file_path,line_num,content
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,304,"* This type adapter supports three subclasses of date: Date, Timestamp, and"
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,305,* java.sql.Date.
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,351,Date date = deserializeToDate(json);
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,352,if (typeOfT == Date.class) {
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,353,return date;
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,354,} else if (typeOfT == Timestamp.class) {
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,355,return new Timestamp(date.getTime());
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,356,} else if (typeOfT == java.sql.Date.class) {
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,357,return new java.sql.Date(date.getTime());
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,358,} else {
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,359,"throw new IllegalArgumentException(getClass() + "" cannot deserialize to "" + typeOfT);"
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,363,private Date deserializeToDate(JsonElement json) {
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,21,import java.sql.Timestamp;
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,404,"* <p>The date format will be used to serialize and deserialize {@link java.util.Date}, {@link"
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,405,* java.sql.Timestamp} and {@link java.sql.Date}.
False,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,682,f (!serializers.hasSpecificHandlerFor(Date.class)) {
False,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,683,"erializers.register(Date.class, dateTypeAdapter);"
False,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,685,f (!deserializers.hasSpecificHandlerFor(Date.class)) {
False,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,686,"eserializers.register(Date.class, dateTypeAdapter);"
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,686,"registerIfAbsent(Date.class, serializers, dateTypeAdapter);"
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,687,"registerIfAbsent(Date.class, deserializers, dateTypeAdapter);"
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,688,"registerIfAbsent(Timestamp.class, serializers, dateTypeAdapter);"
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,689,"registerIfAbsent(Timestamp.class, deserializers, dateTypeAdapter);"
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,690,"registerIfAbsent(java.sql.Date.class, serializers, dateTypeAdapter);"
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,691,"registerIfAbsent(java.sql.Date.class, deserializers, dateTypeAdapter);"
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,695,"private static <T> void registerIfAbsent(Class<?> type,"
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,696,"ParameterizedTypeHandlerMap<T> adapters, T adapter) {"
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,697,if (!adapters.hasSpecificHandlerFor(type)) {
True,gson/src/main/java/com/google/gson/GsonBuilder.java,gson/src/main/java/com/google/gson/GsonBuilder.java,698,"adapters.register(type, adapter);"
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,18,import com.google.gson.Gson;
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,19,import com.google.gson.GsonBuilder;
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,20,import com.google.gson.JsonDeserializationContext;
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,21,import com.google.gson.JsonDeserializer;
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,22,import com.google.gson.JsonElement;
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,23,import com.google.gson.JsonParseException;
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,24,import com.google.gson.reflect.TypeToken;
False,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,42,mport com.google.gson.Gson;
False,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,43,mport com.google.gson.GsonBuilder;
False,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,44,mport com.google.gson.JsonDeserializationContext;
False,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,45,mport com.google.gson.JsonDeserializer;
False,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,46,mport com.google.gson.JsonElement;
False,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,47,mport com.google.gson.JsonParseException;
False,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,48,mport com.google.gson.reflect.TypeToken;
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,381,Type listOfDates = new TypeToken<List<Date>>() {}.getType();
False,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,384,"imeZone.setDefault(TimeZone.getTimeZone(""America/Los_Angeles""));"
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,383,"TimeZone.setDefault(TimeZone.getTimeZone(""UTC""));"
False,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,390,"tring json = gson.toJson(dates, new TypeToken<List<Date>>() {}.getType());"
False,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,391,"ssertEquals(""[\""1969-12-31\""]"", json);"
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,389,"String json = gson.toJson(dates, listOfDates);"
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,390,"assertEquals(""[\""1970-01-01\""]"", json);"
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,391,"assertEquals(0L, gson.<List<Date>>fromJson(""[\""1970-01-01\""]"", listOfDates).get(0).getTime());"
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,392,} finally {
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,393,TimeZone.setDefault(defaultTimeZone);
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,394,Locale.setDefault(defaultLocale);
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,398,// http://code.google.com/p/google-gson/issues/detail?id=230
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,399,public void testTimestampSerialization() throws Exception {
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,400,TimeZone defaultTimeZone = TimeZone.getDefault();
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,401,"TimeZone.setDefault(TimeZone.getTimeZone(""UTC""));"
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,402,Locale defaultLocale = Locale.getDefault();
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,403,Locale.setDefault(Locale.US);
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,404,try {
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,405,Timestamp timestamp = new Timestamp(0L);
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,406,"Gson gson = new GsonBuilder().setDateFormat(""yyyy-MM-dd"").create();"
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,407,"String json = gson.toJson(timestamp, Timestamp.class);"
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,408,"assertEquals(""\""1970-01-01\"""", json);"
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,409,"assertEquals(0, gson.fromJson(""\""1970-01-01\"""", Timestamp.class).getTime());"
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,410,} finally {
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,411,TimeZone.setDefault(defaultTimeZone);
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,412,Locale.setDefault(defaultLocale);
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,416,// http://code.google.com/p/google-gson/issues/detail?id=230
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,417,public void testSqlDateSerialization() throws Exception {
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,418,TimeZone defaultTimeZone = TimeZone.getDefault();
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,419,"TimeZone.setDefault(TimeZone.getTimeZone(""UTC""));"
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,420,Locale defaultLocale = Locale.getDefault();
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,421,Locale.setDefault(Locale.US);
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,422,try {
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,423,java.sql.Date sqlDate = new java.sql.Date(0L);
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,424,"Gson gson = new GsonBuilder().setDateFormat(""yyyy-MM-dd"").create();"
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,425,"String json = gson.toJson(sqlDate, Timestamp.class);"
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,426,"assertEquals(""\""1970-01-01\"""", json);"
True,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,427,"assertEquals(0, gson.fromJson(""\""1970-01-01\"""", java.sql.Date.class).getTime());"

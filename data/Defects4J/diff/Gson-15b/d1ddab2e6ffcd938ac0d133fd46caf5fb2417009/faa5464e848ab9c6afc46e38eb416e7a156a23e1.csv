is_addition,old_file_path,new_file_path,line_num,content
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,19,import com.google.gson.reflect.TypeToken;
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,520,hildGenericType = new TypeInfoCollection(typeOfSrc).getElementType();
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,521,childGenericType = TypeToken.get(typeOfSrc).getCollectionElementType();
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,543,ype childType = new TypeInfoCollection(typeOfT).getElementType();
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,544,Type childType = TypeToken.get(typeOfT).getCollectionElementType();
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,581,hildGenericType = new TypeInfoMap(typeOfSrc).getValueType();
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,582,childGenericType = TypeToken.get(typeOfSrc).getMapKeyAndValueTypes()[1];
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,605,ypeInfoMap mapTypeInfo = new TypeInfoMap(typeOfT);
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,606,Type[] keyAndValueTypes = TypeToken.get(typeOfT).getMapKeyAndValueTypes();
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,607,"bject key = context.deserialize(new JsonPrimitive(entry.getKey()), mapTypeInfo.getKeyType());"
False,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,608,"bject value = context.deserialize(entry.getValue(), mapTypeInfo.getValueType());"
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,608,"Object key = context.deserialize(new JsonPrimitive(entry.getKey()), keyAndValueTypes[0]);"
True,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,gson/src/main/java/com/google/gson/DefaultTypeAdapters.java,609,"Object value = context.deserialize(entry.getValue(), keyAndValueTypes[1]);"
True,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,19,import com.google.gson.reflect.TypeToken;
False,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,42,ypeInfo typeInfo = new TypeInfo(targetType);
True,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,43,TypeToken typeToken = TypeToken.get(targetType);
False,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,48,f (typeInfo.isArray()) {
False,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,49,ypeInfoArray arrayTypeInfo = TypeInfoFactory.getTypeInfoForArray(targetType);
True,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,49,if (typeToken.isArray()) {
False,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,52,"eturn (T) objectConstructor.constructArray(arrayTypeInfo.getSecondLevelType(),"
True,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,52,"return (T) objectConstructor.constructArray(typeToken.getArrayComponentType(),"
False,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,56,eturn (T) objectConstructor.construct(typeInfo.getRawClass());
True,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,56,return (T) objectConstructor.construct(typeToken.getRawType());
False,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,64,ypeInfoArray arrayTypeInfo = TypeInfoFactory.getTypeInfoForArray(arrayType);
True,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,64,TypeToken typeToken = TypeToken.get(arrayType);
False,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,72,"hild = visitChildAsObject(arrayTypeInfo.getComponentRawType(), jsonChild);"
True,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,72,"child = visitChildAsObject(typeToken.getArrayComponentType(), jsonChild);"
False,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,74,"hild = visitChildAsArray(arrayTypeInfo.getSecondLevelType(), jsonChild.getAsJsonArray());"
True,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,74,"child = visitChildAsArray(typeToken.getArrayComponentType(), jsonChild.getAsJsonArray());"
False,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,76,"hild = visitChildAsObject(arrayTypeInfo.getComponentRawType(),"
True,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java,76,"child = visitChildAsObject(typeToken.getArrayComponentType(),"
True,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,19,import com.google.gson.reflect.TypeToken;
False,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,102,ypeInfo typeInfo = new TypeInfo(declaredTypeOfField);
True,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,103,boolean isPrimitive = TypeToken.get(declaredTypeOfField).isPrimitive();
False,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,106,f (!typeInfo.isPrimitive()) {
True,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,107,if (!isPrimitive) {
False,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,117,f (value != null || !typeInfo.isPrimitive()) {
True,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java,118,if (value != null || !isPrimitive) {
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,19,import com.google.gson.reflect.TypeToken;
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,74,ypeInfoArray fieldTypeInfo = TypeInfoFactory.getTypeInfoForArray(arrayType);
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,75,ype componentType = fieldTypeInfo.getSecondLevelType();
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,75,Type componentType = TypeToken.get(arrayType).getArrayComponentType();
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,78,ype childType = componentType;
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,80,/ that a custom
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,81,/ serializer is registered for the componentType
False,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,82,"ddAsArrayElement(new ObjectTypePair(child, childType, false));"
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,79,// that a custom serializer is registered for the componentType
True,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,gson/src/main/java/com/google/gson/JsonSerializationVisitor.java,80,"addAsArrayElement(new ObjectTypePair(child, componentType, false));"
True,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,19,import com.google.gson.reflect.TypeToken;
False,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,57,"eturn Array.newInstance(TypeUtils.toRawClass(type), length);"
True,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,58,"return Array.newInstance(TypeToken.get(type).getRawType(), length);"
False,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,82,ypeInfo typeInfo = new TypeInfo(typeOfT);
False,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,83,lass<T> clazz = (Class<T>) typeInfo.getRawClass();
True,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,gson/src/main/java/com/google/gson/MappedObjectConstructor.java,83,Class<?> clazz = TypeToken.get(typeOfT).getRawType();
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,19,import com.google.gson.reflect.TypeToken;
False,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,102,ypeInfo objTypeInfo = new TypeInfo(objTypePair.type);
False,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,103,f (exclusionStrategy.shouldSkipClass(objTypeInfo.getRawClass())) {
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,103,TypeToken<?> objTypeInfo = TypeToken.get(objTypePair.type);
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,104,if (exclusionStrategy.shouldSkipClass(objTypeInfo.getRawType())) {
False,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,118, else if (objTypeInfo.getActualType() == Object.class
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,119,} else if (objTypeInfo.getType() == Object.class
False,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,127,lass<?> topLevelClass = new TypeInfo(currObjTypePair.type).getRawClass();
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,128,Class<?> topLevelClass = TypeToken.get(currObjTypePair.type).getRawType();
False,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,156,"ypeInfo fieldTypeInfo = TypeInfoFactory.getTypeInfoForField(f, objTypePair.type);"
False,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,157,ype declaredTypeOfField = fieldTypeInfo.getActualType();
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,157,"TypeToken<?> fieldTypeToken = getTypeInfoForField(f, objTypePair.type);"
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,158,Type declaredTypeOfField = fieldTypeToken.getType();
False,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,161,f (fieldTypeInfo.isArray()) {
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,162,if (fieldTypeToken.isArray()) {
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,173,"* Evaluates the ""actual"" type for the field.  If the field is a ""TypeVariable"" or has a"
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,174,"* ""TypeVariable"" in a parameterized type then it evaluates the real type."
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,176,* @param f the actual field object to retrieve the type from
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,177,* @param typeDefiningF the type that contains the field {@code f}
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,178,* @return the type information for the field
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,180,"public static TypeToken<?> getTypeInfoForField(Field f, Type typeDefiningF) {"
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,181,TypeToken<?> typeToken = TypeToken.get(typeDefiningF);
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,182,if (!f.getDeclaringClass().isAssignableFrom(typeToken.getRawType())) {
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,183,// this field is unrelated to the type; the user probably omitted type information
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,184,return TypeToken.get(f.getGenericType());
True,gson/src/main/java/com/google/gson/ObjectNavigator.java,gson/src/main/java/com/google/gson/ObjectNavigator.java,186,return typeToken.getFieldType(f);
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,19,import com.google.gson.reflect.TypeToken;
False,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,124,lass<?> rawClass = TypeUtils.toRawClass(type);
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,125,Class<?> rawClass = TypeToken.get(type).getRawType();
False,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,198,eturn TypeUtils.toRawClass(type).getSimpleName();
True,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java,199,return TypeToken.get(type).getRawType().getSimpleName();
False,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,2, Copyright (C) 2008 Google Inc.
False,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,4," Licensed under the Apache License, Version 2.0 (the ""License"");"
False,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,5, you may not use this file except in compliance with the License.
False,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,6, You may obtain a copy of the License at
False,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,8, http://www.apache.org/licenses/LICENSE-2.0
False,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,10," Unless required by applicable law or agreed to in writing, software"
False,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,11," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,12," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,13, See the License for the specific language governing permissions and
False,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,14, limitations under the License.
False,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,17,ackage com.google.gson;
False,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,20," This class is responsible for adapting/converting an particular ""from"""
False,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,21," instance to an instance of type ""to""."
False,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,23, @author Joel Leitch
False,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,25,nterface TypeAdapter {
False,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,28," Adapts an object instance ""from"" to and instance of type ""to""."
False,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,30, @param from the object to adapt
False,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,31, @param to the Type/Class which this will convert to
False,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,32," @return the converted ""from"" instance to type ""to"""
False,gson/src/main/java/com/google/gson/TypeAdapter.java,gson/src/main/java/com/google/gson/TypeAdapter.java,34,"ublic <T> T adaptType(Object from, Class<T> to);"
False,gson/src/main/java/com/google/gson/TypeInfo.java,gson/src/main/java/com/google/gson/TypeInfo.java,2, Copyright (C) 2008 Google Inc.
False,gson/src/main/java/com/google/gson/TypeInfo.java,gson/src/main/java/com/google/gson/TypeInfo.java,4," Licensed under the Apache License, Version 2.0 (the ""License"");"
False,gson/src/main/java/com/google/gson/TypeInfo.java,gson/src/main/java/com/google/gson/TypeInfo.java,5, you may not use this file except in compliance with the License.
False,gson/src/main/java/com/google/gson/TypeInfo.java,gson/src/main/java/com/google/gson/TypeInfo.java,6, You may obtain a copy of the License at
False,gson/src/main/java/com/google/gson/TypeInfo.java,gson/src/main/java/com/google/gson/TypeInfo.java,8, http://www.apache.org/licenses/LICENSE-2.0
False,gson/src/main/java/com/google/gson/TypeInfo.java,gson/src/main/java/com/google/gson/TypeInfo.java,10," Unless required by applicable law or agreed to in writing, software"
False,gson/src/main/java/com/google/gson/TypeInfo.java,gson/src/main/java/com/google/gson/TypeInfo.java,11," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,gson/src/main/java/com/google/gson/TypeInfo.java,gson/src/main/java/com/google/gson/TypeInfo.java,12," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,gson/src/main/java/com/google/gson/TypeInfo.java,gson/src/main/java/com/google/gson/TypeInfo.java,13, See the License for the specific language governing permissions and
False,gson/src/main/java/com/google/gson/TypeInfo.java,gson/src/main/java/com/google/gson/TypeInfo.java,14, limitations under the License.
False,gson/src/main/java/com/google/gson/TypeInfo.java,gson/src/main/java/com/google/gson/TypeInfo.java,17,ackage com.google.gson;
False,gson/src/main/java/com/google/gson/TypeInfo.java,gson/src/main/java/com/google/gson/TypeInfo.java,19,mport java.lang.reflect.Type;
False,gson/src/main/java/com/google/gson/TypeInfo.java,gson/src/main/java/com/google/gson/TypeInfo.java,20,mport java.util.Collection;
False,gson/src/main/java/com/google/gson/TypeInfo.java,gson/src/main/java/com/google/gson/TypeInfo.java,23, Class that provides information relevant to different parts of a type.
False,gson/src/main/java/com/google/gson/TypeInfo.java,gson/src/main/java/com/google/gson/TypeInfo.java,25, @author Inderjeet Singh
False,gson/src/main/java/com/google/gson/TypeInfo.java,gson/src/main/java/com/google/gson/TypeInfo.java,26, @author Joel Leitch
False,gson/src/main/java/com/google/gson/TypeInfo.java,gson/src/main/java/com/google/gson/TypeInfo.java,28,lass TypeInfo {
False,gson/src/main/java/com/google/gson/TypeInfo.java,gson/src/main/java/com/google/gson/TypeInfo.java,29,rotected final Type actualType;
False,gson/src/main/java/com/google/gson/TypeInfo.java,gson/src/main/java/com/google/gson/TypeInfo.java,30,rotected final Class<?> rawClass;
False,gson/src/main/java/com/google/gson/TypeInfo.java,gson/src/main/java/com/google/gson/TypeInfo.java,32,ypeInfo(Type actualType) {
False,gson/src/main/java/com/google/gson/TypeInfo.java,gson/src/main/java/com/google/gson/TypeInfo.java,33,his.actualType = actualType;
False,gson/src/main/java/com/google/gson/TypeInfo.java,gson/src/main/java/com/google/gson/TypeInfo.java,34,awClass = TypeUtils.toRawClass(actualType);
False,gson/src/main/java/com/google/gson/TypeInfo.java,gson/src/main/java/com/google/gson/TypeInfo.java,37,ublic final Type getActualType() {
False,gson/src/main/java/com/google/gson/TypeInfo.java,gson/src/main/java/com/google/gson/TypeInfo.java,38,eturn actualType;
False,gson/src/main/java/com/google/gson/TypeInfo.java,gson/src/main/java/com/google/gson/TypeInfo.java,42, Returns the corresponding wrapper type of {@code type} if it is a primitive
False,gson/src/main/java/com/google/gson/TypeInfo.java,gson/src/main/java/com/google/gson/TypeInfo.java,43, type; otherwise returns {@code type} itself. Idempotent.
False,gson/src/main/java/com/google/gson/TypeInfo.java,gson/src/main/java/com/google/gson/TypeInfo.java,44, <pre>
False,gson/src/main/java/com/google/gson/TypeInfo.java,gson/src/main/java/com/google/gson/TypeInfo.java,45,     wrap(int.class) == Integer.class
False,gson/src/main/java/com/google/gson/TypeInfo.java,gson/src/main/java/com/google/gson/TypeInfo.java,46,     wrap(Integer.class) == Integer.class
False,gson/src/main/java/com/google/gson/TypeInfo.java,gson/src/main/java/com/google/gson/TypeInfo.java,47,     wrap(String.class) == String.class
False,gson/src/main/java/com/google/gson/TypeInfo.java,gson/src/main/java/com/google/gson/TypeInfo.java,48, </pre>
False,gson/src/main/java/com/google/gson/TypeInfo.java,gson/src/main/java/com/google/gson/TypeInfo.java,50,ublic final Class<?> getWrappedClass() {
False,gson/src/main/java/com/google/gson/TypeInfo.java,gson/src/main/java/com/google/gson/TypeInfo.java,51,eturn Primitives.wrap(rawClass);
False,gson/src/main/java/com/google/gson/TypeInfo.java,gson/src/main/java/com/google/gson/TypeInfo.java,55, @return the raw class associated with this type
False,gson/src/main/java/com/google/gson/TypeInfo.java,gson/src/main/java/com/google/gson/TypeInfo.java,57,ublic final Class<?> getRawClass() {
False,gson/src/main/java/com/google/gson/TypeInfo.java,gson/src/main/java/com/google/gson/TypeInfo.java,58,eturn rawClass;
False,gson/src/main/java/com/google/gson/TypeInfo.java,gson/src/main/java/com/google/gson/TypeInfo.java,61,ublic final boolean isCollectionOrArray() {
False,gson/src/main/java/com/google/gson/TypeInfo.java,gson/src/main/java/com/google/gson/TypeInfo.java,62,eturn Collection.class.isAssignableFrom(rawClass) || isArray();
False,gson/src/main/java/com/google/gson/TypeInfo.java,gson/src/main/java/com/google/gson/TypeInfo.java,65,ublic final boolean isArray() {
False,gson/src/main/java/com/google/gson/TypeInfo.java,gson/src/main/java/com/google/gson/TypeInfo.java,66,eturn TypeUtils.isArray(rawClass);
False,gson/src/main/java/com/google/gson/TypeInfo.java,gson/src/main/java/com/google/gson/TypeInfo.java,69,ublic final boolean isEnum() {
False,gson/src/main/java/com/google/gson/TypeInfo.java,gson/src/main/java/com/google/gson/TypeInfo.java,70,eturn rawClass.isEnum();
False,gson/src/main/java/com/google/gson/TypeInfo.java,gson/src/main/java/com/google/gson/TypeInfo.java,73,ublic final boolean isPrimitive() {
False,gson/src/main/java/com/google/gson/TypeInfo.java,gson/src/main/java/com/google/gson/TypeInfo.java,74,eturn Primitives.isWrapperType(Primitives.wrap(rawClass));
False,gson/src/main/java/com/google/gson/TypeInfoArray.java,gson/src/main/java/com/google/gson/TypeInfoArray.java,2, Copyright (C) 2008 Google Inc.
False,gson/src/main/java/com/google/gson/TypeInfoArray.java,gson/src/main/java/com/google/gson/TypeInfoArray.java,4," Licensed under the Apache License, Version 2.0 (the ""License"");"
False,gson/src/main/java/com/google/gson/TypeInfoArray.java,gson/src/main/java/com/google/gson/TypeInfoArray.java,5, you may not use this file except in compliance with the License.
False,gson/src/main/java/com/google/gson/TypeInfoArray.java,gson/src/main/java/com/google/gson/TypeInfoArray.java,6, You may obtain a copy of the License at
False,gson/src/main/java/com/google/gson/TypeInfoArray.java,gson/src/main/java/com/google/gson/TypeInfoArray.java,8, http://www.apache.org/licenses/LICENSE-2.0
False,gson/src/main/java/com/google/gson/TypeInfoArray.java,gson/src/main/java/com/google/gson/TypeInfoArray.java,10," Unless required by applicable law or agreed to in writing, software"
False,gson/src/main/java/com/google/gson/TypeInfoArray.java,gson/src/main/java/com/google/gson/TypeInfoArray.java,11," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,gson/src/main/java/com/google/gson/TypeInfoArray.java,gson/src/main/java/com/google/gson/TypeInfoArray.java,12," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,gson/src/main/java/com/google/gson/TypeInfoArray.java,gson/src/main/java/com/google/gson/TypeInfoArray.java,13, See the License for the specific language governing permissions and
False,gson/src/main/java/com/google/gson/TypeInfoArray.java,gson/src/main/java/com/google/gson/TypeInfoArray.java,14, limitations under the License.
False,gson/src/main/java/com/google/gson/TypeInfoArray.java,gson/src/main/java/com/google/gson/TypeInfoArray.java,17,ackage com.google.gson;
False,gson/src/main/java/com/google/gson/TypeInfoArray.java,gson/src/main/java/com/google/gson/TypeInfoArray.java,19,mport java.lang.reflect.GenericArrayType;
False,gson/src/main/java/com/google/gson/TypeInfoArray.java,gson/src/main/java/com/google/gson/TypeInfoArray.java,20,mport java.lang.reflect.Type;
False,gson/src/main/java/com/google/gson/TypeInfoArray.java,gson/src/main/java/com/google/gson/TypeInfoArray.java,23, Class to extract information about types used to define a generic array.
False,gson/src/main/java/com/google/gson/TypeInfoArray.java,gson/src/main/java/com/google/gson/TypeInfoArray.java,25, @author Inderjeet Singh
False,gson/src/main/java/com/google/gson/TypeInfoArray.java,gson/src/main/java/com/google/gson/TypeInfoArray.java,26, @author Joel Leitch
False,gson/src/main/java/com/google/gson/TypeInfoArray.java,gson/src/main/java/com/google/gson/TypeInfoArray.java,28,inal class TypeInfoArray extends TypeInfo {
False,gson/src/main/java/com/google/gson/TypeInfoArray.java,gson/src/main/java/com/google/gson/TypeInfoArray.java,29,rivate final Class<?> componentRawType;
False,gson/src/main/java/com/google/gson/TypeInfoArray.java,gson/src/main/java/com/google/gson/TypeInfoArray.java,30,rivate final Type secondLevel;
False,gson/src/main/java/com/google/gson/TypeInfoArray.java,gson/src/main/java/com/google/gson/TypeInfoArray.java,32,ypeInfoArray(Type type) {
False,gson/src/main/java/com/google/gson/TypeInfoArray.java,gson/src/main/java/com/google/gson/TypeInfoArray.java,33,uper(type);
False,gson/src/main/java/com/google/gson/TypeInfoArray.java,gson/src/main/java/com/google/gson/TypeInfoArray.java,34,lass<?> rootComponentType = rawClass;
False,gson/src/main/java/com/google/gson/TypeInfoArray.java,gson/src/main/java/com/google/gson/TypeInfoArray.java,35,hile (rootComponentType.isArray()) {
False,gson/src/main/java/com/google/gson/TypeInfoArray.java,gson/src/main/java/com/google/gson/TypeInfoArray.java,36,ootComponentType = rootComponentType.getComponentType();
False,gson/src/main/java/com/google/gson/TypeInfoArray.java,gson/src/main/java/com/google/gson/TypeInfoArray.java,38,his.componentRawType = rootComponentType;
False,gson/src/main/java/com/google/gson/TypeInfoArray.java,gson/src/main/java/com/google/gson/TypeInfoArray.java,39,"his.secondLevel = extractSecondLevelType(actualType, rawClass);"
False,gson/src/main/java/com/google/gson/TypeInfoArray.java,gson/src/main/java/com/google/gson/TypeInfoArray.java,42,"rivate static Type extractSecondLevelType(Type actualType, Class<?> rawClass) {"
False,gson/src/main/java/com/google/gson/TypeInfoArray.java,gson/src/main/java/com/google/gson/TypeInfoArray.java,43,eturn actualType instanceof GenericArrayType ?
False,gson/src/main/java/com/google/gson/TypeInfoArray.java,gson/src/main/java/com/google/gson/TypeInfoArray.java,44,(GenericArrayType) actualType).getGenericComponentType() : rawClass.getComponentType();
False,gson/src/main/java/com/google/gson/TypeInfoArray.java,gson/src/main/java/com/google/gson/TypeInfoArray.java,48, @return the raw type unwrapped of the second level of array.
False,gson/src/main/java/com/google/gson/TypeInfoArray.java,gson/src/main/java/com/google/gson/TypeInfoArray.java,49," If the object is (single-dimensional or multi-dimensional) array, it is the class of the"
False,gson/src/main/java/com/google/gson/TypeInfoArray.java,gson/src/main/java/com/google/gson/TypeInfoArray.java,50," elements of the array. For example, this method returns Foo.class for Foo[]."
False,gson/src/main/java/com/google/gson/TypeInfoArray.java,gson/src/main/java/com/google/gson/TypeInfoArray.java,51," It will return Foo[].class for Foo[][].  For Foo&lt;String&gt;[][] types, it will return the"
False,gson/src/main/java/com/google/gson/TypeInfoArray.java,gson/src/main/java/com/google/gson/TypeInfoArray.java,52, type representing Foo&lt;String&gt;[]
False,gson/src/main/java/com/google/gson/TypeInfoArray.java,gson/src/main/java/com/google/gson/TypeInfoArray.java,53, (i.e. <code>new TypeToken<Foo<String>[]>() {}.getType()</code>).
False,gson/src/main/java/com/google/gson/TypeInfoArray.java,gson/src/main/java/com/google/gson/TypeInfoArray.java,55,ublic Type getSecondLevelType() {
False,gson/src/main/java/com/google/gson/TypeInfoArray.java,gson/src/main/java/com/google/gson/TypeInfoArray.java,56,eturn secondLevel;
False,gson/src/main/java/com/google/gson/TypeInfoArray.java,gson/src/main/java/com/google/gson/TypeInfoArray.java,60, @return the raw type of the root component.
False,gson/src/main/java/com/google/gson/TypeInfoArray.java,gson/src/main/java/com/google/gson/TypeInfoArray.java,61, If the object is a single-dimensional array then the component type is the class of an
False,gson/src/main/java/com/google/gson/TypeInfoArray.java,gson/src/main/java/com/google/gson/TypeInfoArray.java,62, element of the array.
False,gson/src/main/java/com/google/gson/TypeInfoArray.java,gson/src/main/java/com/google/gson/TypeInfoArray.java,63, If the object is a multi-dimensional array then the component type is the class of the
False,gson/src/main/java/com/google/gson/TypeInfoArray.java,gson/src/main/java/com/google/gson/TypeInfoArray.java,64," inner-most array element. For example, the This method will return Foo.class for Foo[][][]."
False,gson/src/main/java/com/google/gson/TypeInfoArray.java,gson/src/main/java/com/google/gson/TypeInfoArray.java,66,ublic Class<?> getComponentRawType() {
False,gson/src/main/java/com/google/gson/TypeInfoArray.java,gson/src/main/java/com/google/gson/TypeInfoArray.java,67,eturn componentRawType;
False,gson/src/main/java/com/google/gson/TypeInfoCollection.java,gson/src/main/java/com/google/gson/TypeInfoCollection.java,2, Copyright (C) 2008 Google Inc.
False,gson/src/main/java/com/google/gson/TypeInfoCollection.java,gson/src/main/java/com/google/gson/TypeInfoCollection.java,4," Licensed under the Apache License, Version 2.0 (the ""License"");"
False,gson/src/main/java/com/google/gson/TypeInfoCollection.java,gson/src/main/java/com/google/gson/TypeInfoCollection.java,5, you may not use this file except in compliance with the License.
False,gson/src/main/java/com/google/gson/TypeInfoCollection.java,gson/src/main/java/com/google/gson/TypeInfoCollection.java,6, You may obtain a copy of the License at
False,gson/src/main/java/com/google/gson/TypeInfoCollection.java,gson/src/main/java/com/google/gson/TypeInfoCollection.java,8, http://www.apache.org/licenses/LICENSE-2.0
False,gson/src/main/java/com/google/gson/TypeInfoCollection.java,gson/src/main/java/com/google/gson/TypeInfoCollection.java,10," Unless required by applicable law or agreed to in writing, software"
False,gson/src/main/java/com/google/gson/TypeInfoCollection.java,gson/src/main/java/com/google/gson/TypeInfoCollection.java,11," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,gson/src/main/java/com/google/gson/TypeInfoCollection.java,gson/src/main/java/com/google/gson/TypeInfoCollection.java,12," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,gson/src/main/java/com/google/gson/TypeInfoCollection.java,gson/src/main/java/com/google/gson/TypeInfoCollection.java,13, See the License for the specific language governing permissions and
False,gson/src/main/java/com/google/gson/TypeInfoCollection.java,gson/src/main/java/com/google/gson/TypeInfoCollection.java,14, limitations under the License.
False,gson/src/main/java/com/google/gson/TypeInfoCollection.java,gson/src/main/java/com/google/gson/TypeInfoCollection.java,17,ackage com.google.gson;
False,gson/src/main/java/com/google/gson/TypeInfoCollection.java,gson/src/main/java/com/google/gson/TypeInfoCollection.java,19,mport java.lang.reflect.ParameterizedType;
False,gson/src/main/java/com/google/gson/TypeInfoCollection.java,gson/src/main/java/com/google/gson/TypeInfoCollection.java,20,mport java.lang.reflect.Type;
False,gson/src/main/java/com/google/gson/TypeInfoCollection.java,gson/src/main/java/com/google/gson/TypeInfoCollection.java,21,mport java.util.Collection;
False,gson/src/main/java/com/google/gson/TypeInfoCollection.java,gson/src/main/java/com/google/gson/TypeInfoCollection.java,24, A convenience object for retrieving the map type information.
False,gson/src/main/java/com/google/gson/TypeInfoCollection.java,gson/src/main/java/com/google/gson/TypeInfoCollection.java,26, @author Inderjeet Singh
False,gson/src/main/java/com/google/gson/TypeInfoCollection.java,gson/src/main/java/com/google/gson/TypeInfoCollection.java,27, @author Joel Leitch
False,gson/src/main/java/com/google/gson/TypeInfoCollection.java,gson/src/main/java/com/google/gson/TypeInfoCollection.java,29,inal class TypeInfoCollection {
False,gson/src/main/java/com/google/gson/TypeInfoCollection.java,gson/src/main/java/com/google/gson/TypeInfoCollection.java,30,rivate final ParameterizedType collectionType;
False,gson/src/main/java/com/google/gson/TypeInfoCollection.java,gson/src/main/java/com/google/gson/TypeInfoCollection.java,32,ublic TypeInfoCollection(Type collectionType) {
False,gson/src/main/java/com/google/gson/TypeInfoCollection.java,gson/src/main/java/com/google/gson/TypeInfoCollection.java,33,f (!(collectionType instanceof ParameterizedType)) {
False,gson/src/main/java/com/google/gson/TypeInfoCollection.java,gson/src/main/java/com/google/gson/TypeInfoCollection.java,34,hrow new IllegalArgumentException(
False,gson/src/main/java/com/google/gson/TypeInfoCollection.java,gson/src/main/java/com/google/gson/TypeInfoCollection.java,35,"Collection objects need to be parameterized unless you use a custom serializer. """
False,gson/src/main/java/com/google/gson/TypeInfoCollection.java,gson/src/main/java/com/google/gson/TypeInfoCollection.java,36," ""Use the com.google.gson.reflect.TypeToken to extract the ParameterizedType."");"
False,gson/src/main/java/com/google/gson/TypeInfoCollection.java,gson/src/main/java/com/google/gson/TypeInfoCollection.java,38,ypeInfo rawType = new TypeInfo(collectionType);
False,gson/src/main/java/com/google/gson/TypeInfoCollection.java,gson/src/main/java/com/google/gson/TypeInfoCollection.java,39,reconditions.checkArgument(Collection.class.isAssignableFrom(rawType.getRawClass()));
False,gson/src/main/java/com/google/gson/TypeInfoCollection.java,gson/src/main/java/com/google/gson/TypeInfoCollection.java,40,his.collectionType = (ParameterizedType) collectionType;
False,gson/src/main/java/com/google/gson/TypeInfoCollection.java,gson/src/main/java/com/google/gson/TypeInfoCollection.java,43,ublic Type getElementType() {
False,gson/src/main/java/com/google/gson/TypeInfoCollection.java,gson/src/main/java/com/google/gson/TypeInfoCollection.java,44,eturn collectionType.getActualTypeArguments()[0];
False,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,2, Copyright (C) 2008 Google Inc.
False,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,4," Licensed under the Apache License, Version 2.0 (the ""License"");"
False,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,5, you may not use this file except in compliance with the License.
False,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,6, You may obtain a copy of the License at
False,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,8, http://www.apache.org/licenses/LICENSE-2.0
False,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,10," Unless required by applicable law or agreed to in writing, software"
False,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,11," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,12," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,13, See the License for the specific language governing permissions and
False,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,14, limitations under the License.
False,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,17,ackage com.google.gson;
False,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,19,mport java.lang.reflect.Field;
False,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,20,mport java.lang.reflect.GenericArrayType;
False,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,21,mport java.lang.reflect.ParameterizedType;
False,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,22,mport java.lang.reflect.Type;
False,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,23,mport java.lang.reflect.TypeVariable;
False,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,24,mport java.lang.reflect.WildcardType;
False,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,27," A static factory class used to construct the ""TypeInfo"" objects."
False,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,29, @author Inderjeet Singh
False,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,30, @author Joel Leitch
False,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,32,inal class TypeInfoFactory {
False,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,34,rivate TypeInfoFactory() {
False,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,35,/ Not instantiable since it provides factory methods only.
False,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,38,ublic static TypeInfoArray getTypeInfoForArray(Type type) {
False,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,39,reconditions.checkArgument(TypeUtils.isArray(type));
False,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,40,eturn new TypeInfoArray(type);
False,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,44," Evaluates the ""actual"" type for the field.  If the field is a ""TypeVariable"" or has a"
False,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,45," ""TypeVariable"" in a parameterized type then it evaluates the real type."
False,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,47, @param f the actual field object to retrieve the type from
False,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,48, @param typeDefiningF the type that contains the field {@code f}
False,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,49, @return the type information for the field
False,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,51,"ublic static TypeInfo getTypeInfoForField(Field f, Type typeDefiningF) {"
False,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,52,lass<?> classDefiningF = TypeUtils.toRawClass(typeDefiningF);
False,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,53,ype type = f.getGenericType();
False,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,54,"ype actualType = getActualType(type, typeDefiningF, classDefiningF);"
False,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,55,eturn new TypeInfo(actualType);
False,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,58,rivate static Type getActualType(
False,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,59,"ype typeToEvaluate, Type parentType, Class<?> rawParentClass) {"
False,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,60,f (typeToEvaluate instanceof Class<?>) {
False,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,61,eturn typeToEvaluate;
False,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,62, else if (typeToEvaluate instanceof ParameterizedType) {
False,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,63,arameterizedType castedType = (ParameterizedType) typeToEvaluate;
False,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,64,ype owner = castedType.getOwnerType();
False,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,65,ype[] actualTypeParameters =
False,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,66,"xtractRealTypes(castedType.getActualTypeArguments(), parentType, rawParentClass);"
False,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,67,ype rawType = castedType.getRawType();
False,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,68,"eturn new ParameterizedTypeImpl(rawType, actualTypeParameters, owner);"
False,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,69, else if (typeToEvaluate instanceof GenericArrayType) {
False,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,70,enericArrayType castedType = (GenericArrayType) typeToEvaluate;
False,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,71,ype componentType = castedType.getGenericComponentType();
False,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,72,"ype actualType = getActualType(componentType, parentType, rawParentClass);"
False,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,73,f (componentType.equals(actualType)) {
False,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,74,eturn castedType;
False,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,76,eturn actualType instanceof Class<?> ?
False,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,77,ypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))
False,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,78, new GenericArrayTypeImpl(actualType);
False,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,79, else if (typeToEvaluate instanceof TypeVariable<?>) {
False,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,80,f (parentType instanceof ParameterizedType) {
False,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,81,/ The class definition has the actual types used for the type variables.
False,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,82,/ Find the matching actual type for the Type Variable used for the field.
False,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,83,"/ For example, class Foo<A> { A a; }"
False,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,84,/ new Foo<Integer>(); defines the actual type of A to be Integer.
False,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,85,"/ So, to find the type of the field a, we will have to look at the class'"
False,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,86,/ actual type arguments.
False,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,87,ypeVariable<?> fieldTypeVariable = (TypeVariable<?>) typeToEvaluate;
False,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,88,ypeVariable<?>[] classTypeVariables = rawParentClass.getTypeParameters();
False,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,89,arameterizedType objParameterizedType = (ParameterizedType) parentType;
False,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,90,"nt indexOfActualTypeArgument = getIndex(classTypeVariables, fieldTypeVariable);"
False,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,91,ype[] actualTypeArguments = objParameterizedType.getActualTypeArguments();
False,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,92,eturn actualTypeArguments[indexOfActualTypeArgument];
False,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,93, else if (typeToEvaluate instanceof TypeVariable<?>) {
False,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,94,ype theSearchedType = null;
False,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,96,o {
False,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,97,"heSearchedType = extractTypeForHierarchy(parentType, (TypeVariable<?>) typeToEvaluate);"
False,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,98, while ((theSearchedType != null) && (theSearchedType instanceof TypeVariable<?>));
False,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,100,f (theSearchedType != null) {
False,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,101,eturn theSearchedType;
False,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,105,"hrow new UnsupportedOperationException(""Expecting parameterized type, got "" + parentType"
False,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,106," "".\n Are you missing the use of TypeToken idiom?\n See """
False,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,107," ""http://sites.google.com/site/gson/gson-user-guide#TOC-Serializing-and-Deserializing-Gener"");"
False,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,108, else if (typeToEvaluate instanceof WildcardType) {
False,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,109,ildcardType castedType = (WildcardType) typeToEvaluate;
False,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,110,"eturn getActualType(castedType.getUpperBounds()[0], parentType, rawParentClass);"
False,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,111, else {
False,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,112,"hrow new IllegalArgumentException(""Type \'"" + typeToEvaluate + ""\' is not a Class, """
False,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,113," ""ParameterizedType, GenericArrayType or TypeVariable. Can't extract type."");"
False,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,117,"rivate static Type extractTypeForHierarchy(Type parentType, TypeVariable<?> typeToEvaluate) {"
False,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,118,lass<?> rawParentType = null;
False,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,119,f (parentType instanceof Class<?>) {
False,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,120,awParentType = (Class<?>) parentType;
False,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,121, else if (parentType instanceof ParameterizedType) {
False,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,122,arameterizedType parentTypeAsPT = (ParameterizedType) parentType;
False,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,123,awParentType = (Class<?>) parentTypeAsPT.getRawType();
False,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,124, else {
False,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,125,eturn null;
False,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,128,ype superClass = rawParentType.getGenericSuperclass();
False,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,129,f (superClass instanceof ParameterizedType
False,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,130,& ((ParameterizedType) superClass).getRawType() == typeToEvaluate.getGenericDeclaration()) {
False,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,131,/ Evaluate type on this type
False,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,132,ypeVariable<?>[] classTypeVariables =
False,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,133,(Class<?>) ((ParameterizedType) superClass).getRawType()).getTypeParameters();
False,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,134,"nt indexOfActualTypeArgument = getIndex(classTypeVariables, typeToEvaluate);"
False,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,136,ype[] actualTypeArguments = null;
False,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,137,f (parentType instanceof Class<?>) {
False,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,138,ctualTypeArguments = ((ParameterizedType) superClass).getActualTypeArguments();
False,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,139, else if (parentType instanceof ParameterizedType) {
False,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,140,ctualTypeArguments = ((ParameterizedType) parentType).getActualTypeArguments();
False,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,141, else {
False,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,142,eturn null;
False,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,145,eturn actualTypeArguments[indexOfActualTypeArgument];
False,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,148,ype searchedType = null;
False,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,149,f (superClass != null) {
False,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,150,"earchedType = extractTypeForHierarchy(superClass, typeToEvaluate);"
False,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,152,eturn searchedType;
False,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,155,rivate static Type[] extractRealTypes(
False,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,156,"ype[] actualTypeArguments, Type parentType, Class<?> rawParentClass) {"
False,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,157,reconditions.checkNotNull(actualTypeArguments);
False,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,159,ype[] retTypes = new Type[actualTypeArguments.length];
False,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,160,or (int i = 0; i < actualTypeArguments.length; ++i) {
False,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,161,"etTypes[i] = getActualType(actualTypeArguments[i], parentType, rawParentClass);"
False,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,163,eturn retTypes;
False,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,166,"rivate static int getIndex(TypeVariable<?>[] types, TypeVariable<?> type) {"
False,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,167,or (int i = 0; i < types.length; ++i) {
False,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,168,f (type.equals(types[i])) {
False,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,169,eturn i;
False,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,172,hrow new IllegalStateException(
False,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,173,"How can the type variable not be present in the class declaration!"");"
False,gson/src/main/java/com/google/gson/TypeInfoMap.java,gson/src/main/java/com/google/gson/TypeInfoMap.java,2, Copyright (C) 2008 Google Inc.
False,gson/src/main/java/com/google/gson/TypeInfoMap.java,gson/src/main/java/com/google/gson/TypeInfoMap.java,4," Licensed under the Apache License, Version 2.0 (the ""License"");"
False,gson/src/main/java/com/google/gson/TypeInfoMap.java,gson/src/main/java/com/google/gson/TypeInfoMap.java,5, you may not use this file except in compliance with the License.
False,gson/src/main/java/com/google/gson/TypeInfoMap.java,gson/src/main/java/com/google/gson/TypeInfoMap.java,6, You may obtain a copy of the License at
False,gson/src/main/java/com/google/gson/TypeInfoMap.java,gson/src/main/java/com/google/gson/TypeInfoMap.java,8, http://www.apache.org/licenses/LICENSE-2.0
False,gson/src/main/java/com/google/gson/TypeInfoMap.java,gson/src/main/java/com/google/gson/TypeInfoMap.java,10," Unless required by applicable law or agreed to in writing, software"
False,gson/src/main/java/com/google/gson/TypeInfoMap.java,gson/src/main/java/com/google/gson/TypeInfoMap.java,11," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,gson/src/main/java/com/google/gson/TypeInfoMap.java,gson/src/main/java/com/google/gson/TypeInfoMap.java,12," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,gson/src/main/java/com/google/gson/TypeInfoMap.java,gson/src/main/java/com/google/gson/TypeInfoMap.java,13, See the License for the specific language governing permissions and
False,gson/src/main/java/com/google/gson/TypeInfoMap.java,gson/src/main/java/com/google/gson/TypeInfoMap.java,14, limitations under the License.
False,gson/src/main/java/com/google/gson/TypeInfoMap.java,gson/src/main/java/com/google/gson/TypeInfoMap.java,17,ackage com.google.gson;
False,gson/src/main/java/com/google/gson/TypeInfoMap.java,gson/src/main/java/com/google/gson/TypeInfoMap.java,19,mport java.lang.reflect.ParameterizedType;
False,gson/src/main/java/com/google/gson/TypeInfoMap.java,gson/src/main/java/com/google/gson/TypeInfoMap.java,20,mport java.lang.reflect.Type;
False,gson/src/main/java/com/google/gson/TypeInfoMap.java,gson/src/main/java/com/google/gson/TypeInfoMap.java,21,mport java.util.Map;
False,gson/src/main/java/com/google/gson/TypeInfoMap.java,gson/src/main/java/com/google/gson/TypeInfoMap.java,22,mport java.util.Properties;
False,gson/src/main/java/com/google/gson/TypeInfoMap.java,gson/src/main/java/com/google/gson/TypeInfoMap.java,25, A convenience object for retrieving the map type information.
False,gson/src/main/java/com/google/gson/TypeInfoMap.java,gson/src/main/java/com/google/gson/TypeInfoMap.java,27, @author Inderjeet Singh
False,gson/src/main/java/com/google/gson/TypeInfoMap.java,gson/src/main/java/com/google/gson/TypeInfoMap.java,28, @author Joel Leitch
False,gson/src/main/java/com/google/gson/TypeInfoMap.java,gson/src/main/java/com/google/gson/TypeInfoMap.java,30,inal class TypeInfoMap {
False,gson/src/main/java/com/google/gson/TypeInfoMap.java,gson/src/main/java/com/google/gson/TypeInfoMap.java,31,rivate final Type keyType;
False,gson/src/main/java/com/google/gson/TypeInfoMap.java,gson/src/main/java/com/google/gson/TypeInfoMap.java,32,rivate final Type valueType;
False,gson/src/main/java/com/google/gson/TypeInfoMap.java,gson/src/main/java/com/google/gson/TypeInfoMap.java,34,ublic TypeInfoMap(Type mapType) {
False,gson/src/main/java/com/google/gson/TypeInfoMap.java,gson/src/main/java/com/google/gson/TypeInfoMap.java,35,f (mapType instanceof Class<?> && Properties.class.isAssignableFrom((Class<?>) mapType)) {
False,gson/src/main/java/com/google/gson/TypeInfoMap.java,gson/src/main/java/com/google/gson/TypeInfoMap.java,36,eyType = String.class;
False,gson/src/main/java/com/google/gson/TypeInfoMap.java,gson/src/main/java/com/google/gson/TypeInfoMap.java,37,alueType = String.class;
False,gson/src/main/java/com/google/gson/TypeInfoMap.java,gson/src/main/java/com/google/gson/TypeInfoMap.java,38, else if (mapType instanceof ParameterizedType) {
False,gson/src/main/java/com/google/gson/TypeInfoMap.java,gson/src/main/java/com/google/gson/TypeInfoMap.java,39,ypeInfo rawType = new TypeInfo(mapType);
False,gson/src/main/java/com/google/gson/TypeInfoMap.java,gson/src/main/java/com/google/gson/TypeInfoMap.java,40,reconditions.checkArgument(Map.class.isAssignableFrom(rawType.getRawClass()));
False,gson/src/main/java/com/google/gson/TypeInfoMap.java,gson/src/main/java/com/google/gson/TypeInfoMap.java,41,arameterizedType paramType = (ParameterizedType) mapType;
False,gson/src/main/java/com/google/gson/TypeInfoMap.java,gson/src/main/java/com/google/gson/TypeInfoMap.java,42,eyType = paramType.getActualTypeArguments()[0];
False,gson/src/main/java/com/google/gson/TypeInfoMap.java,gson/src/main/java/com/google/gson/TypeInfoMap.java,43,alueType = paramType.getActualTypeArguments()[1];
False,gson/src/main/java/com/google/gson/TypeInfoMap.java,gson/src/main/java/com/google/gson/TypeInfoMap.java,44, else {
False,gson/src/main/java/com/google/gson/TypeInfoMap.java,gson/src/main/java/com/google/gson/TypeInfoMap.java,45,hrow new IllegalArgumentException(
False,gson/src/main/java/com/google/gson/TypeInfoMap.java,gson/src/main/java/com/google/gson/TypeInfoMap.java,46,"Map objects need to be parameterized unless you use a custom serializer. """
False,gson/src/main/java/com/google/gson/TypeInfoMap.java,gson/src/main/java/com/google/gson/TypeInfoMap.java,47," ""Use the com.google.gson.reflect.TypeToken to extract the ParameterizedType."");"
False,gson/src/main/java/com/google/gson/TypeInfoMap.java,gson/src/main/java/com/google/gson/TypeInfoMap.java,51,ublic Type getKeyType() {
False,gson/src/main/java/com/google/gson/TypeInfoMap.java,gson/src/main/java/com/google/gson/TypeInfoMap.java,52,eturn keyType;
False,gson/src/main/java/com/google/gson/TypeInfoMap.java,gson/src/main/java/com/google/gson/TypeInfoMap.java,55,ublic Type getValueType() {
False,gson/src/main/java/com/google/gson/TypeInfoMap.java,gson/src/main/java/com/google/gson/TypeInfoMap.java,56,eturn valueType;
False,gson/src/main/java/com/google/gson/TypeUtils.java,gson/src/main/java/com/google/gson/TypeUtils.java,2, Copyright (C) 2008 Google Inc.
False,gson/src/main/java/com/google/gson/TypeUtils.java,gson/src/main/java/com/google/gson/TypeUtils.java,4," Licensed under the Apache License, Version 2.0 (the ""License"");"
False,gson/src/main/java/com/google/gson/TypeUtils.java,gson/src/main/java/com/google/gson/TypeUtils.java,5, you may not use this file except in compliance with the License.
False,gson/src/main/java/com/google/gson/TypeUtils.java,gson/src/main/java/com/google/gson/TypeUtils.java,6, You may obtain a copy of the License at
False,gson/src/main/java/com/google/gson/TypeUtils.java,gson/src/main/java/com/google/gson/TypeUtils.java,8, http://www.apache.org/licenses/LICENSE-2.0
False,gson/src/main/java/com/google/gson/TypeUtils.java,gson/src/main/java/com/google/gson/TypeUtils.java,10," Unless required by applicable law or agreed to in writing, software"
False,gson/src/main/java/com/google/gson/TypeUtils.java,gson/src/main/java/com/google/gson/TypeUtils.java,11," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,gson/src/main/java/com/google/gson/TypeUtils.java,gson/src/main/java/com/google/gson/TypeUtils.java,12," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,gson/src/main/java/com/google/gson/TypeUtils.java,gson/src/main/java/com/google/gson/TypeUtils.java,13, See the License for the specific language governing permissions and
False,gson/src/main/java/com/google/gson/TypeUtils.java,gson/src/main/java/com/google/gson/TypeUtils.java,14, limitations under the License.
False,gson/src/main/java/com/google/gson/TypeUtils.java,gson/src/main/java/com/google/gson/TypeUtils.java,17,ackage com.google.gson;
False,gson/src/main/java/com/google/gson/TypeUtils.java,gson/src/main/java/com/google/gson/TypeUtils.java,19,mport java.lang.reflect.Array;
False,gson/src/main/java/com/google/gson/TypeUtils.java,gson/src/main/java/com/google/gson/TypeUtils.java,20,mport java.lang.reflect.GenericArrayType;
False,gson/src/main/java/com/google/gson/TypeUtils.java,gson/src/main/java/com/google/gson/TypeUtils.java,21,mport java.lang.reflect.ParameterizedType;
False,gson/src/main/java/com/google/gson/TypeUtils.java,gson/src/main/java/com/google/gson/TypeUtils.java,22,mport java.lang.reflect.Type;
False,gson/src/main/java/com/google/gson/TypeUtils.java,gson/src/main/java/com/google/gson/TypeUtils.java,23,mport java.lang.reflect.WildcardType;
False,gson/src/main/java/com/google/gson/TypeUtils.java,gson/src/main/java/com/google/gson/TypeUtils.java,26, Utility class containing some methods for obtaining information on types.
False,gson/src/main/java/com/google/gson/TypeUtils.java,gson/src/main/java/com/google/gson/TypeUtils.java,28, @author Inderjeet Singh
False,gson/src/main/java/com/google/gson/TypeUtils.java,gson/src/main/java/com/google/gson/TypeUtils.java,29, @author Joel Leitch
False,gson/src/main/java/com/google/gson/TypeUtils.java,gson/src/main/java/com/google/gson/TypeUtils.java,31,inal class TypeUtils {
False,gson/src/main/java/com/google/gson/TypeUtils.java,gson/src/main/java/com/google/gson/TypeUtils.java,34, Returns the actual type matching up with the first type variable.
False,gson/src/main/java/com/google/gson/TypeUtils.java,gson/src/main/java/com/google/gson/TypeUtils.java,35," So, for a {@code typeInfo} instance defined as:"
False,gson/src/main/java/com/google/gson/TypeUtils.java,gson/src/main/java/com/google/gson/TypeUtils.java,36, <pre>
False,gson/src/main/java/com/google/gson/TypeUtils.java,gson/src/main/java/com/google/gson/TypeUtils.java,37,"   class Foo<A, B> {"
False,gson/src/main/java/com/google/gson/TypeUtils.java,gson/src/main/java/com/google/gson/TypeUtils.java,39,"   Type fooType = new TypeToken<Foo<Integer, String>>() {}.getType();"
False,gson/src/main/java/com/google/gson/TypeUtils.java,gson/src/main/java/com/google/gson/TypeUtils.java,40, </pre>
False,gson/src/main/java/com/google/gson/TypeUtils.java,gson/src/main/java/com/google/gson/TypeUtils.java,41, <code>TypeUtils.getActualTypeForFirstTypeVariable(fooType)</code> will return Integer.class.
False,gson/src/main/java/com/google/gson/TypeUtils.java,gson/src/main/java/com/google/gson/TypeUtils.java,43,tatic Type getActualTypeForFirstTypeVariable(Type type) {
False,gson/src/main/java/com/google/gson/TypeUtils.java,gson/src/main/java/com/google/gson/TypeUtils.java,44,f (type instanceof Class<?>) {
False,gson/src/main/java/com/google/gson/TypeUtils.java,gson/src/main/java/com/google/gson/TypeUtils.java,45,eturn Object.class;
False,gson/src/main/java/com/google/gson/TypeUtils.java,gson/src/main/java/com/google/gson/TypeUtils.java,46, else if (type instanceof ParameterizedType) {
False,gson/src/main/java/com/google/gson/TypeUtils.java,gson/src/main/java/com/google/gson/TypeUtils.java,47,eturn ((ParameterizedType)type).getActualTypeArguments()[0];
False,gson/src/main/java/com/google/gson/TypeUtils.java,gson/src/main/java/com/google/gson/TypeUtils.java,48, else if (type instanceof GenericArrayType) {
False,gson/src/main/java/com/google/gson/TypeUtils.java,gson/src/main/java/com/google/gson/TypeUtils.java,49,eturn getActualTypeForFirstTypeVariable(((GenericArrayType)type).getGenericComponentType());
False,gson/src/main/java/com/google/gson/TypeUtils.java,gson/src/main/java/com/google/gson/TypeUtils.java,50, else {
False,gson/src/main/java/com/google/gson/TypeUtils.java,gson/src/main/java/com/google/gson/TypeUtils.java,51,"hrow new IllegalArgumentException(""Type \'"" + type + ""\' is not a Class, """
False,gson/src/main/java/com/google/gson/TypeUtils.java,gson/src/main/java/com/google/gson/TypeUtils.java,52," ""ParameterizedType, or GenericArrayType. Can't extract class."");"
False,gson/src/main/java/com/google/gson/TypeUtils.java,gson/src/main/java/com/google/gson/TypeUtils.java,56,tatic boolean isArray(Type type) {
False,gson/src/main/java/com/google/gson/TypeUtils.java,gson/src/main/java/com/google/gson/TypeUtils.java,57,f (type instanceof Class<?>) {
False,gson/src/main/java/com/google/gson/TypeUtils.java,gson/src/main/java/com/google/gson/TypeUtils.java,58,eturn ((Class<?>)type).isArray();
False,gson/src/main/java/com/google/gson/TypeUtils.java,gson/src/main/java/com/google/gson/TypeUtils.java,59, else if (type instanceof GenericArrayType) {
False,gson/src/main/java/com/google/gson/TypeUtils.java,gson/src/main/java/com/google/gson/TypeUtils.java,60,eturn true;
False,gson/src/main/java/com/google/gson/TypeUtils.java,gson/src/main/java/com/google/gson/TypeUtils.java,61, else {
False,gson/src/main/java/com/google/gson/TypeUtils.java,gson/src/main/java/com/google/gson/TypeUtils.java,62,eturn false;
False,gson/src/main/java/com/google/gson/TypeUtils.java,gson/src/main/java/com/google/gson/TypeUtils.java,67, This method returns the actual raw class associated with the specified type.
False,gson/src/main/java/com/google/gson/TypeUtils.java,gson/src/main/java/com/google/gson/TypeUtils.java,69,tatic Class<?> toRawClass(Type type) {
False,gson/src/main/java/com/google/gson/TypeUtils.java,gson/src/main/java/com/google/gson/TypeUtils.java,70,f (type instanceof Class<?>) {
False,gson/src/main/java/com/google/gson/TypeUtils.java,gson/src/main/java/com/google/gson/TypeUtils.java,71,eturn (Class<?>) type;
False,gson/src/main/java/com/google/gson/TypeUtils.java,gson/src/main/java/com/google/gson/TypeUtils.java,72, else if (type instanceof ParameterizedType) {
False,gson/src/main/java/com/google/gson/TypeUtils.java,gson/src/main/java/com/google/gson/TypeUtils.java,73,arameterizedType actualType = (ParameterizedType)type;
False,gson/src/main/java/com/google/gson/TypeUtils.java,gson/src/main/java/com/google/gson/TypeUtils.java,74,eturn toRawClass(actualType.getRawType());
False,gson/src/main/java/com/google/gson/TypeUtils.java,gson/src/main/java/com/google/gson/TypeUtils.java,75, else if (type instanceof GenericArrayType) {
False,gson/src/main/java/com/google/gson/TypeUtils.java,gson/src/main/java/com/google/gson/TypeUtils.java,76,enericArrayType actualType = (GenericArrayType) type;
False,gson/src/main/java/com/google/gson/TypeUtils.java,gson/src/main/java/com/google/gson/TypeUtils.java,77,lass<?> rawClass = toRawClass(actualType.getGenericComponentType());
False,gson/src/main/java/com/google/gson/TypeUtils.java,gson/src/main/java/com/google/gson/TypeUtils.java,78,eturn wrapWithArray(rawClass);
False,gson/src/main/java/com/google/gson/TypeUtils.java,gson/src/main/java/com/google/gson/TypeUtils.java,79, else if (type instanceof WildcardType) {
False,gson/src/main/java/com/google/gson/TypeUtils.java,gson/src/main/java/com/google/gson/TypeUtils.java,80,ildcardType castedType = (WildcardType) type;
False,gson/src/main/java/com/google/gson/TypeUtils.java,gson/src/main/java/com/google/gson/TypeUtils.java,81,eturn toRawClass(castedType.getUpperBounds()[0]);
False,gson/src/main/java/com/google/gson/TypeUtils.java,gson/src/main/java/com/google/gson/TypeUtils.java,82, else {
False,gson/src/main/java/com/google/gson/TypeUtils.java,gson/src/main/java/com/google/gson/TypeUtils.java,83,"hrow new IllegalArgumentException(""Type \'"" + type + ""\' is not a Class, """
False,gson/src/main/java/com/google/gson/TypeUtils.java,gson/src/main/java/com/google/gson/TypeUtils.java,84," ""ParameterizedType, or GenericArrayType. Can't extract class."");"
False,gson/src/main/java/com/google/gson/TypeUtils.java,gson/src/main/java/com/google/gson/TypeUtils.java,88,tatic Class<?> wrapWithArray(Class<?> rawClass) {
False,gson/src/main/java/com/google/gson/TypeUtils.java,gson/src/main/java/com/google/gson/TypeUtils.java,89,"eturn Array.newInstance(rawClass, 0).getClass();"
False,gson/src/main/java/com/google/gson/TypeUtils.java,gson/src/main/java/com/google/gson/TypeUtils.java,92,rivate TypeUtils() {
False,gson/src/main/java/com/google/gson/TypeUtils.java,gson/src/main/java/com/google/gson/TypeUtils.java,93,"/ Class with just some static utility methods, should not be instantiated"
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,19,mport java.lang.reflect.Array;
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,19,import java.lang.reflect.Constructor;
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,20,import java.lang.reflect.Field;
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,22,import java.lang.reflect.Member;
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,23,import java.lang.reflect.Method;
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,27,import java.lang.reflect.WildcardType;
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,28,import java.util.Arrays;
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,29,import java.util.Collection;
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,31,import java.util.Hashtable;
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,32,import java.util.List;
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,34,import java.util.Properties;
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,28, Represents a generic type {@code T}.
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,37,* Represents a generic type {@code T}. Java doesn't yet provide a way to
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,38,"* represent generic types, so this class does. Forces clients to create a"
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,39,* subclass of this class which enables retrieval the type information even at
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,40,* runtime.
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,42,"* <p>For example, to create a type literal for {@code List<String>}, you can"
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,43,* create an empty anonymous inner class:
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,30," You can use this class to get the generic type for a class. For example,"
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,31," to get the generic type for <code>Collection&lt;Foo&gt;</code>, you can use:"
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,33, <code>Type typeOfCollectionOfFoo = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType()
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,34, </code>
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,36, <p>Assumes {@code Type} implements {@code equals()} and {@code hashCode()}
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,37, as a value (as opposed to identity) comparison.
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,46,* {@code TypeLiteral<List<String>> list = new TypeToken<List<String>>() {};}
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,48,* <p>This syntax cannot be used to create type literals that have wildcard
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,49,"* parameters, such as {@code Class<?>} or {@code List<? extends CharSequence>}."
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,50,"* Such type literals must be constructed programatically, either by {@link"
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,51,* Method#getGenericReturnType extracting types from members} or by using the
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,52,* {@link Types} factory class.
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,39, Also implements {@link #isAssignableFrom(Type)} to check type-safe
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,40, assignability.
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,54,"* <p>Along with modeling generic types, this class can resolve type parameters."
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,55,"* For example, to figure out what type {@code keySet()} returns on a {@code"
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,56,"* Map<Integer, String>}, use this code:<pre>   {@code"
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,58,"*   TypeLiteral<Map<Integer, String>> mapType"
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,59,"*       = new TypeToken<Map<Integer, String>>() {};"
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,60,*   TypeToken<?> keySetType
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,61,"*       = mapType.getReturnType(Map.class.getMethod(""keySet""));"
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,62,"*   System.out.println(keySetType); // prints ""Set<Integer>""}</pre>"
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,66,* @author Jesse Wilson
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,45,ublic abstract class TypeToken<T> {
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,68,public class TypeToken<T> {
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,72,final int hashCode;
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,51, Constructs a new type token. Derives represented class from type
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,75,* Constructs a new type literal. Derives represented class from type
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,55, parameter in the anonymous class's type hierarchy so we can reconstitute
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,56, it at runtime despite erasure.
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,58, <p>For example:
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,59, <code>
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,60, {@literal TypeToken<List<String>> t = new TypeToken<List<String>>}(){}
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,61, </code>
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,79,* parameter in the anonymous class's type hierarchy so we can reconstitute it
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,80,* at runtime despite erasure.
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,66,his.rawType = (Class<? super T>) getRawType(type);
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,85,this.rawType = (Class<? super T>) Types.getRawType(type);
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,86,this.hashCode = type.hashCode();
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,70, Unsafe. Constructs a type token manually.
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,90,* Unsafe. Constructs a type literal manually.
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,72,"SuppressWarnings({""unchecked""})"
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,73,rivate TypeToken(Type type) {
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,74,"his.rawType = (Class<? super T>) getRawType(nonNull(type, ""type""));"
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,75,his.type = type;
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,92,"@SuppressWarnings(""unchecked"")"
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,93,TypeToken(Type type) {
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,94,checkNotNull(type);
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,95,this.type = Types.canonicalize(type);
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,96,this.rawType = (Class<? super T>) Types.getRawType(this.type);
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,97,this.hashCode = this.type.hashCode();
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,78,"rivate static <T> T nonNull(T o, String message) {"
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,79,f (o == null) {
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,80,hrow new NullPointerException(message);
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,82,eturn o;
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,86, Gets type from super class's type parameter.
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,101,* Returns the type from super class's type parameter in {@link Types#canonicalize(java.lang.reflect.Type)
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,102,* canonical form}.
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,90,f (superclass instanceof Class<?>) {
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,106,if (superclass instanceof Class) {
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,93,eturn ((ParameterizedType) superclass).getActualTypeArguments()[0];
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,109,ParameterizedType parameterized = (ParameterizedType) superclass;
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,110,return Types.canonicalize(parameterized.getActualTypeArguments()[0]);
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,97, Gets type token from super class's type parameter.
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,114,* Gets type literal from super class's type parameter.
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,100,eturn new SimpleTypeToken<Object>(subclass);
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,103,rivate static Class<?> getRawType(Type type) {
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,104,f (type instanceof Class<?>) {
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,105,/ type is a normal class.
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,106,eturn (Class<?>) type;
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,107, else if (type instanceof ParameterizedType) {
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,108,arameterizedType parameterizedType = (ParameterizedType) type;
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,110,/ I'm not exactly sure why getRawType() returns Type instead of Class.
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,111,/ Neal isn't either but suspects some pathological case related
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,112,/ to nested classes exists.
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,113,ype rawType = parameterizedType.getRawType();
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,114,f (rawType instanceof Class<?>) {
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,115,eturn (Class<?>) rawType;
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,117,"hrow buildUnexpectedTypeError(rawType, Class.class);"
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,118, else if (type instanceof GenericArrayType) {
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,119,enericArrayType genericArrayType = (GenericArrayType) type;
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,121,/ TODO(jleitch): This is not the most efficient way to handle generic
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,122,"/ arrays, but is there another way to extract the array class in a"
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,123,"/ non-hacky way (i.e. using String value class names- ""[L..."")?"
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,124,bject rawArrayType = Array.newInstance(
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,125,"etRawType(genericArrayType.getGenericComponentType()), 0);"
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,126,eturn rawArrayType.getClass();
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,127, else {
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,128,hrow buildUnexpectedTypeError(
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,129,"ype, ParameterizedType.class, GenericArrayType.class);"
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,117,return new TypeToken<Object>(getSuperclassTypeParameter(subclass));
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,134, Gets the raw type.
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,121,* Returns the raw (non-generic) type for this type.
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,136,ublic Class<? super T> getRawType() {
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,123,public final Class<? super T> getRawType() {
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,143,ublic Type getType() {
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,130,public final Type getType() {
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,145,"// TODO: resolve from first, then do something lightweight?"
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,167,eturn rawType.isAssignableFrom(getRawType(from));
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,156,return rawType.isAssignableFrom(Types.getRawType(from));
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,172,eturn rawType.isAssignableFrom(getRawType(from))
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,161,return rawType.isAssignableFrom(Types.getRawType(from))
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,228,lass<?> clazz = getRawType(from);
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,217,Class<?> clazz = Types.getRawType(from);
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,277,private static AssertionError buildUnexpectedTypeError(
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,278,"Type token, Class<?>... expected) {"
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,280,// Build exception message
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,281,StringBuilder exceptionMessage =
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,282,"new StringBuilder(""Unexpected type. Expected one of: "");"
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,283,for (Class<?> clazz : expected) {
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,284,"exceptionMessage.append(clazz.getName()).append("", "");"
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,286,"exceptionMessage.append(""but got: "").append(token.getClass().getName())"
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,287,".append("", for type token: "").append(token.toString()).append('.');"
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,289,return new AssertionError(exceptionMessage.toString());
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,307,@Override public final int hashCode() {
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,308,return this.hashCode;
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,311,@Override public final boolean equals(Object o) {
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,312,return o instanceof TypeToken<?>
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,313,"&& Types.equals(type, ((TypeToken) o).type);"
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,316,@Override public final String toString() {
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,317,return Types.typeToString(type);
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,304, Hashcode for this object.
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,305, @return hashcode for this object.
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,321,* Gets type literal for the given {@code Type} instance.
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,307,Override public int hashCode() {
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,308,eturn type.hashCode();
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,323,public static TypeToken<?> get(Type type) {
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,324,return new TypeToken<Object>(type);
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,312, Method to test equality.
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,314," @return true if this object is logically equal to the specified object, false otherwise."
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,328,* Gets type literal for the given {@code Class} instance.
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,316,Override public boolean equals(Object o) {
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,317,f (o == this) {
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,318,eturn true;
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,330,public static <T> TypeToken<T> get(Class<T> type) {
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,331,return new TypeToken<T>(type);
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,335,/** Returns an immutable list of the resolved types. */
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,336,private List<TypeToken<?>> resolveAll(Type[] types) {
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,337,TypeToken<?>[] result = new TypeToken<?>[types.length];
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,338,for (int t = 0; t < types.length; t++) {
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,339,result[t] = resolve(types[t]);
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,320,f (!(o instanceof TypeToken<?>)) {
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,321,eturn false;
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,341,return Arrays.asList(result);
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,345,* Resolves known type parameters in {@code toResolve} and returns the result.
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,347,TypeToken<?> resolve(Type toResolve) {
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,348,return TypeToken.get(resolveType(toResolve));
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,351,Type resolveType(Type toResolve) {
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,352,// this implementation is made a little more complicated in an attempt to avoid object-creation
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,353,while (true) {
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,354,if (toResolve instanceof TypeVariable) {
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,355,TypeVariable original = (TypeVariable) toResolve;
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,356,"toResolve = Types.resolveTypeVariable(type, rawType, original);"
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,357,if (toResolve == original) {
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,358,return toResolve;
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,361,} else if (toResolve instanceof GenericArrayType) {
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,362,GenericArrayType original = (GenericArrayType) toResolve;
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,363,Type componentType = original.getGenericComponentType();
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,364,Type newComponentType = resolveType(componentType);
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,365,return componentType == newComponentType
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,366,? original
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,367,: Types.arrayOf(newComponentType);
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,369,} else if (toResolve instanceof ParameterizedType) {
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,370,ParameterizedType original = (ParameterizedType) toResolve;
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,371,Type ownerType = original.getOwnerType();
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,372,Type newOwnerType = resolveType(ownerType);
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,373,boolean changed = newOwnerType != ownerType;
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,375,Type[] args = original.getActualTypeArguments();
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,376,"for (int t = 0, length = args.length; t < length; t++) {"
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,377,Type resolvedTypeArgument = resolveType(args[t]);
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,378,if (resolvedTypeArgument != args[t]) {
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,379,if (!changed) {
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,380,args = args.clone();
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,381,changed = true;
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,383,args[t] = resolvedTypeArgument;
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,387,return changed
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,388,"? Types.newParameterizedTypeWithOwner(newOwnerType, original.getRawType(), args)"
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,389,: original;
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,391,} else if (toResolve instanceof WildcardType) {
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,392,WildcardType original = (WildcardType) toResolve;
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,393,Type[] originalLowerBound = original.getLowerBounds();
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,394,Type[] originalUpperBound = original.getUpperBounds();
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,396,if (originalLowerBound.length == 1) {
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,397,Type lowerBound = resolveType(originalLowerBound[0]);
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,398,if (lowerBound != originalLowerBound[0]) {
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,399,return Types.supertypeOf(lowerBound);
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,401,} else if (originalUpperBound.length == 1) {
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,402,Type upperBound = resolveType(originalUpperBound[0]);
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,403,if (upperBound != originalUpperBound[0]) {
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,404,return Types.subtypeOf(upperBound);
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,407,return original;
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,409,} else {
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,410,return toResolve;
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,323,ypeToken<?> t = (TypeToken<?>) o;
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,324,eturn type.equals(t.type);
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,328, Returns a string representation of this object.
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,329, @return a string representation of this object.
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,416,"* Returns the generic form of {@code supertype}. For example, if this is {@code"
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,417,"* ArrayList<String>}, this returns {@code Iterable<String>} given the input {@code"
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,418,* Iterable.class}.
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,420,"* @param supertype a superclass of, or interface implemented by, this."
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,331,Override public String toString() {
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,332,eturn type instanceof Class<?>
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,333, ((Class<?>) type).getName()
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,334, type.toString();
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,422,public TypeToken<?> getSupertype(Class<?> supertype) {
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,423,checkArgument(supertype.isAssignableFrom(rawType));
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,424,"return resolve(Types.getGenericSupertype(type, rawType, supertype));"
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,337,rivate static AssertionError buildUnexpectedTypeError(
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,338,"ype token, Class<?>... expected) {"
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,428,* Returns the resolved generic type of {@code field}.
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,430,* @param field a field defined by this or any superclass.
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,432,public TypeToken<?> getFieldType(Field field) {
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,433,if (!field.getDeclaringClass().isAssignableFrom(rawType)) {
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,434,"throw new IllegalArgumentException(rawType.getName() + "" does not declare field "" + field);"
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,436,return resolve(field.getGenericType());
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,340,/ Build exception message
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,341,tringBuilder exceptionMessage =
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,342,"ew StringBuilder(""Unexpected type. Expected one of: "");"
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,343,or (Class<?> clazz : expected) {
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,344,"xceptionMessage.append(clazz.getName()).append("", "");"
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,440,* Returns the resolved generic parameter types of {@code methodOrConstructor}.
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,442,* @param methodOrConstructor a method or constructor defined by this or any supertype.
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,444,public List<TypeToken<?>> getParameterTypes(Member methodOrConstructor) {
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,445,Type[] genericParameterTypes;
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,447,if (methodOrConstructor instanceof Method) {
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,448,Method method = (Method) methodOrConstructor;
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,449,checkArgument(method.getDeclaringClass().isAssignableFrom(rawType));
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,450,genericParameterTypes = method.getGenericParameterTypes();
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,452,} else if (methodOrConstructor instanceof Constructor) {
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,453,Constructor<?> constructor = (Constructor<?>) methodOrConstructor;
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,454,checkArgument(constructor.getDeclaringClass().isAssignableFrom(rawType));
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,455,genericParameterTypes = constructor.getGenericParameterTypes();
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,457,} else {
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,458,"throw new IllegalArgumentException(""Not a method or a constructor: "" + methodOrConstructor);"
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,346,"xceptionMessage.append(""but got: "").append(token.getClass().getName())"
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,347,"append("", for type token: "").append(token.toString()).append('.');"
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,349,eturn new AssertionError(exceptionMessage.toString());
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,461,return resolveAll(genericParameterTypes);
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,353, Gets type token for the given {@code Type} instance.
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,465,* Returns the resolved generic exception types thrown by {@code constructor}.
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,467,* @param methodOrConstructor a method or constructor defined by this or any supertype.
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,355,ublic static TypeToken<?> get(Type type) {
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,356,eturn new SimpleTypeToken<Object>(type);
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,469,public List<TypeToken<?>> getExceptionTypes(Member methodOrConstructor) {
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,470,Type[] genericExceptionTypes;
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,472,if (methodOrConstructor instanceof Method) {
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,473,Method method = (Method) methodOrConstructor;
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,474,checkArgument(method.getDeclaringClass().isAssignableFrom(rawType));
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,475,genericExceptionTypes = method.getGenericExceptionTypes();
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,477,} else if (methodOrConstructor instanceof Constructor) {
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,478,Constructor<?> constructor = (Constructor<?>) methodOrConstructor;
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,479,checkArgument(constructor.getDeclaringClass().isAssignableFrom(rawType));
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,480,genericExceptionTypes = constructor.getGenericExceptionTypes();
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,482,} else {
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,483,"throw new IllegalArgumentException(""Not a method or a constructor: "" + methodOrConstructor);"
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,486,return resolveAll(genericExceptionTypes);
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,360, Gets type token for the given {@code Class} instance.
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,490,* Returns the resolved generic return type of {@code method}.
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,492,* @param method a method defined by this or any supertype.
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,362,ublic static <T> TypeToken<T> get(Class<T> type) {
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,363,eturn new SimpleTypeToken<T>(type);
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,494,public TypeToken<?> getReturnType(Method method) {
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,495,checkArgument(method.getDeclaringClass().isAssignableFrom(rawType));
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,496,return resolve(method.getGenericReturnType());
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,499,static void checkNotNull(Object obj) {
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,500,checkArgument(obj != null);
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,503,static void checkArgument(boolean condition) {
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,504,if (!condition) {
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,505,"throw new IllegalArgumentException(""condition failed: "" + condition);"
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,509,// TODO: these methods are required by GSON but don't need to be public. Remove?
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,512,* Returns true if this type is an array.
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,514,public boolean isArray() {
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,515,return type instanceof GenericArrayType;
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,519,* Returns true if this type is a primitive.
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,521,public boolean isPrimitive() {
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,522,return type == boolean.class
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,523,|| type == byte.class
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,524,|| type == char.class
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,525,|| type == double.class
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,526,|| type == float.class
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,527,|| type == int.class
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,528,|| type == long.class
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,529,|| type == short.class
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,530,|| type == void.class;
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,534,* Returns the component type of this array type.
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,535,* @throws ClassCastException if this type is not an array.
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,537,public Type getArrayComponentType() {
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,538,return ((GenericArrayType) type).getGenericComponentType();
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,367, Private static class to not create more anonymous classes than
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,368, necessary.
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,542,* Returns the element type of this collection type.
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,543,* @throws IllegalArgumentException if this type is not a collection.
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,370,rivate static class SimpleTypeToken<T> extends TypeToken<T> {
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,371,ublic SimpleTypeToken(Type type) {
False,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,372,uper(type);
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,545,public Type getCollectionElementType() {
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,546,TypeToken<?> collectionType = getSupertype(Collection.class);
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,547,return ((ParameterizedType) collectionType.getType()).getActualTypeArguments()[0];
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,551,* Returns a two element array containing this map's key and value types in
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,552,* positions 0 and 1 respectively.
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,554,public Type[] getMapKeyAndValueTypes() {
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,556,* Work around a problem with the declaration of java.util.Properties. That
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,557,"* class should extend Hashtable<String, String>, but it's declared to"
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,558,"* extend Hashtable<Object, Object>."
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,560,if (type == Properties.class) {
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,561,"return new Type[] { String.class, String.class }; // TODO: test subclasses of Properties!"
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,564,TypeToken<?> mapTypeToken = TypeToken.get(type).getSupertype(Map.class);
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,565,ParameterizedType mapParameterizedType = (ParameterizedType) mapTypeToken.getType();
True,gson/src/main/java/com/google/gson/reflect/TypeToken.java,gson/src/main/java/com/google/gson/reflect/TypeToken.java,566,return mapParameterizedType.getActualTypeArguments();
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,2,* Copyright (C) 2008 Google Inc.
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,5,* you may not use this file except in compliance with the License.
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,6,* You may obtain a copy of the License at
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,8,* http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,13,* See the License for the specific language governing permissions and
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,14,* limitations under the License.
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,17,package com.google.gson.reflect;
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,19,import static com.google.gson.reflect.TypeToken.checkArgument;
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,20,import static com.google.gson.reflect.TypeToken.checkNotNull;
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,21,import java.io.Serializable;
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,22,import java.lang.reflect.Array;
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,23,import java.lang.reflect.GenericArrayType;
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,24,import java.lang.reflect.GenericDeclaration;
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,25,import java.lang.reflect.ParameterizedType;
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,26,import java.lang.reflect.Type;
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,27,import java.lang.reflect.TypeVariable;
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,28,import java.lang.reflect.WildcardType;
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,29,import java.util.Arrays;
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,30,import java.util.List;
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,31,import java.util.Map;
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,32,import java.util.NoSuchElementException;
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,33,import java.util.Set;
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,36,* Static methods for working with types.
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,38,* @author Bob Lee
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,39,* @author Jesse Wilson
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,41,public final class Types {
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,42,static final Type[] EMPTY_TYPE_ARRAY = new Type[] {};
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,44,private Types() {}
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,47,"* Returns a new parameterized type, applying {@code typeArguments} to"
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,48,* {@code rawType}. The returned type does not have an owner type.
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,50,* @return a {@link java.io.Serializable serializable} parameterized type.
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,52,"public static ParameterizedType newParameterizedType(Type rawType, Type... typeArguments) {"
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,53,"return newParameterizedTypeWithOwner(null, rawType, typeArguments);"
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,57,"* Returns a new parameterized type, applying {@code typeArguments} to"
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,58,* {@code rawType} and enclosed by {@code ownerType}.
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,60,* @return a {@link java.io.Serializable serializable} parameterized type.
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,62,public static ParameterizedType newParameterizedTypeWithOwner(
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,63,"Type ownerType, Type rawType, Type... typeArguments) {"
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,64,"return new ParameterizedTypeImpl(ownerType, rawType, typeArguments);"
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,68,* Returns an array type whose elements are all instances of
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,69,* {@code componentType}.
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,71,* @return a {@link java.io.Serializable serializable} generic array type.
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,73,public static GenericArrayType arrayOf(Type componentType) {
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,74,return new GenericArrayTypeImpl(componentType);
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,78,* Returns a type that represents an unknown type that extends {@code bound}.
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,79,"* For example, if {@code bound} is {@code CharSequence.class}, this returns"
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,80,"* {@code ? extends CharSequence}. If {@code bound} is {@code Object.class},"
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,81,"* this returns {@code ?}, which is shorthand for {@code ? extends Object}."
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,83,public static WildcardType subtypeOf(Type bound) {
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,84,"return new WildcardTypeImpl(new Type[] { bound }, EMPTY_TYPE_ARRAY);"
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,88,* Returns a type that represents an unknown supertype of {@code bound}. For
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,89,"* example, if {@code bound} is {@code String.class}, this returns {@code ?"
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,90,* super String}.
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,92,public static WildcardType supertypeOf(Type bound) {
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,93,"return new WildcardTypeImpl(new Type[] { Object.class }, new Type[] { bound });"
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,97,* Returns a type modelling a {@link List} whose elements are of type
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,98,* {@code elementType}.
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,100,* @return a {@link java.io.Serializable serializable} parameterized type.
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,102,public static ParameterizedType listOf(Type elementType) {
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,103,"return newParameterizedType(List.class, elementType);"
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,107,* Returns a type modelling a {@link Set} whose elements are of type
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,108,* {@code elementType}.
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,110,* @return a {@link java.io.Serializable serializable} parameterized type.
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,112,public static ParameterizedType setOf(Type elementType) {
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,113,"return newParameterizedType(Set.class, elementType);"
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,117,* Returns a type modelling a {@link Map} whose keys are of type
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,118,* {@code keyType} and whose values are of type {@code valueType}.
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,120,* @return a {@link java.io.Serializable serializable} parameterized type.
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,122,"public static ParameterizedType mapOf(Type keyType, Type valueType) {"
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,123,"return newParameterizedType(Map.class, keyType, valueType);"
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,127,* Returns a type that is functionally equal but not necessarily equal
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,128,* according to {@link Object#equals(Object) Object.equals()}. The returned
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,129,* type is {@link java.io.Serializable}.
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,131,static Type canonicalize(Type type) {
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,132,if (type instanceof Class) {
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,133,Class<?> c = (Class<?>) type;
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,134,return c.isArray() ? new GenericArrayTypeImpl(canonicalize(c.getComponentType())) : c;
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,136,} else if (type instanceof ParameterizedType) {
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,137,ParameterizedType p = (ParameterizedType) type;
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,138,"return new ParameterizedTypeImpl(p.getOwnerType(),"
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,139,"p.getRawType(), p.getActualTypeArguments());"
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,141,} else if (type instanceof GenericArrayType) {
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,142,GenericArrayType g = (GenericArrayType) type;
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,143,return new GenericArrayTypeImpl(g.getGenericComponentType());
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,145,} else if (type instanceof WildcardType) {
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,146,WildcardType w = (WildcardType) type;
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,147,"return new WildcardTypeImpl(w.getUpperBounds(), w.getLowerBounds());"
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,149,} else {
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,150,// type is either serializable as-is or unsupported
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,151,return type;
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,155,static Class<?> getRawType(Type type) {
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,156,if (type instanceof Class<?>) {
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,157,// type is a normal class.
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,158,return (Class<?>) type;
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,160,} else if (type instanceof ParameterizedType) {
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,161,ParameterizedType parameterizedType = (ParameterizedType) type;
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,163,// I'm not exactly sure why getRawType() returns Type instead of Class.
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,164,// Neal isn't either but suspects some pathological case related
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,165,// to nested classes exists.
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,166,Type rawType = parameterizedType.getRawType();
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,167,checkArgument(rawType instanceof Class);
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,168,return (Class<?>) rawType;
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,170,} else if (type instanceof GenericArrayType) {
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,171,Type componentType = ((GenericArrayType)type).getGenericComponentType();
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,172,"return Array.newInstance(getRawType(componentType), 0).getClass();"
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,174,} else if (type instanceof TypeVariable) {
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,175,"// we could use the variable's bounds, but that won't work if there are multiple."
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,176,// having a raw type that's more general than necessary is okay
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,177,return Object.class;
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,179,} else if (type instanceof WildcardType) {
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,180,return getRawType(((WildcardType) type).getUpperBounds()[0]);
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,182,} else {
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,183,"throw new IllegalArgumentException(""Expected a Class, ParameterizedType, or """
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,184,"+ ""GenericArrayType, but <"" + type + ""> is of type "" + type.getClass().getName());"
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,188,"static boolean equal(Object a, Object b) {"
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,189,return a == b || (a != null && a.equals(b));
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,193,* Returns true if {@code a} and {@code b} are equal.
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,195,"static boolean equals(Type a, Type b) {"
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,196,if (a == b) {
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,197,// also handles (a == null && b == null)
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,198,return true;
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,200,} else if (a instanceof Class) {
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,201,// Class already specifies equals().
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,202,return a.equals(b);
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,204,} else if (a instanceof ParameterizedType) {
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,205,if (!(b instanceof ParameterizedType)) {
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,206,return false;
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,209,// TODO: save a .clone() call
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,210,ParameterizedType pa = (ParameterizedType) a;
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,211,ParameterizedType pb = (ParameterizedType) b;
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,212,"return equal(pa.getOwnerType(), pb.getOwnerType())"
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,213,&& pa.getRawType().equals(pb.getRawType())
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,214,"&& Arrays.equals(pa.getActualTypeArguments(), pb.getActualTypeArguments());"
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,216,} else if (a instanceof GenericArrayType) {
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,217,if (!(b instanceof GenericArrayType)) {
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,218,return false;
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,221,GenericArrayType ga = (GenericArrayType) a;
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,222,GenericArrayType gb = (GenericArrayType) b;
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,223,"return equals(ga.getGenericComponentType(), gb.getGenericComponentType());"
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,225,} else if (a instanceof WildcardType) {
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,226,if (!(b instanceof WildcardType)) {
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,227,return false;
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,230,WildcardType wa = (WildcardType) a;
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,231,WildcardType wb = (WildcardType) b;
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,232,"return Arrays.equals(wa.getUpperBounds(), wb.getUpperBounds())"
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,233,"&& Arrays.equals(wa.getLowerBounds(), wb.getLowerBounds());"
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,235,} else if (a instanceof TypeVariable) {
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,236,if (!(b instanceof TypeVariable)) {
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,237,return false;
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,239,TypeVariable<?> va = (TypeVariable) a;
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,240,TypeVariable<?> vb = (TypeVariable) b;
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,241,return va.getGenericDeclaration() == vb.getGenericDeclaration()
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,242,&& va.getName().equals(vb.getName());
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,244,} else {
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,245,"// This isn't a type we support. Could be a generic array type, wildcard type, etc."
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,246,return false;
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,250,private static int hashCodeOrZero(Object o) {
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,251,return o != null ? o.hashCode() : 0;
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,254,static String typeToString(Type type) {
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,255,return type instanceof Class ? ((Class) type).getName() : type.toString();
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,259,"* Returns the generic supertype for {@code supertype}. For example, given a class {@code"
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,260,"* IntegerSet}, the result for when supertype is {@code Set.class} is {@code Set<Integer>} and the"
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,261,* result when the supertype is {@code Collection.class} is {@code Collection<Integer>}.
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,263,"static Type getGenericSupertype(Type type, Class<?> rawType, Class<?> toResolve) {"
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,264,if (toResolve == rawType) {
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,265,return type;
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,268,// we skip searching through interfaces if unknown is an interface
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,269,if (toResolve.isInterface()) {
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,270,Class[] interfaces = rawType.getInterfaces();
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,271,"for (int i = 0, length = interfaces.length; i < length; i++) {"
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,272,if (interfaces[i] == toResolve) {
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,273,return rawType.getGenericInterfaces()[i];
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,274,} else if (toResolve.isAssignableFrom(interfaces[i])) {
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,275,"return getGenericSupertype(rawType.getGenericInterfaces()[i], interfaces[i], toResolve);"
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,280,// check our supertypes
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,281,if (!rawType.isInterface()) {
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,282,while (rawType != Object.class) {
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,283,Class<?> rawSupertype = rawType.getSuperclass();
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,284,if (rawSupertype == toResolve) {
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,285,return rawType.getGenericSuperclass();
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,286,} else if (toResolve.isAssignableFrom(rawSupertype)) {
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,287,"return getGenericSupertype(rawType.getGenericSuperclass(), rawSupertype, toResolve);"
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,289,rawType = rawSupertype;
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,293,// we can't resolve this further
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,294,return toResolve;
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,297,"static Type resolveTypeVariable(Type type, Class<?> rawType, TypeVariable unknown) {"
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,298,Class<?> declaredByRaw = declaringClassOf(unknown);
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,300,// we can't reduce this further
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,301,if (declaredByRaw == null) {
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,302,return unknown;
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,305,"Type declaredBy = getGenericSupertype(type, rawType, declaredByRaw);"
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,306,if (declaredBy instanceof ParameterizedType) {
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,307,"int index = indexOf(declaredByRaw.getTypeParameters(), unknown);"
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,308,return ((ParameterizedType) declaredBy).getActualTypeArguments()[index];
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,311,return unknown;
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,314,"private static int indexOf(Object[] array, Object toFind) {"
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,315,for (int i = 0; i < array.length; i++) {
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,316,if (toFind.equals(array[i])) {
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,317,return i;
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,320,throw new NoSuchElementException();
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,324,"* Returns the declaring class of {@code typeVariable}, or {@code null} if it was not declared by"
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,325,* a class.
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,327,private static Class<?> declaringClassOf(TypeVariable typeVariable) {
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,328,GenericDeclaration genericDeclaration = typeVariable.getGenericDeclaration();
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,329,return genericDeclaration instanceof Class
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,330,? (Class<?>) genericDeclaration
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,331,: null;
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,334,private static void checkNotPrimitive(Type type) {
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,335,checkArgument(!(type instanceof Class<?>) || !((Class) type).isPrimitive());
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,338,"private static class ParameterizedTypeImpl implements ParameterizedType, Serializable {"
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,339,private final Type ownerType;
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,340,private final Type rawType;
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,341,private final Type[] typeArguments;
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,343,"public ParameterizedTypeImpl(Type ownerType, Type rawType, Type... typeArguments) {"
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,344,// require an owner type if the raw type needs it
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,345,if (rawType instanceof Class<?>) {
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,346,Class rawTypeAsClass = (Class) rawType;
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,347,checkArgument(ownerType != null || rawTypeAsClass.getEnclosingClass() == null);
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,348,checkArgument(ownerType == null || rawTypeAsClass.getEnclosingClass() != null);
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,351,this.ownerType = ownerType == null ? null : canonicalize(ownerType);
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,352,this.rawType = canonicalize(rawType);
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,353,this.typeArguments = typeArguments.clone();
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,354,for (int t = 0; t < this.typeArguments.length; t++) {
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,355,checkNotNull(this.typeArguments[t]);
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,356,checkNotPrimitive(this.typeArguments[t]);
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,357,this.typeArguments[t] = canonicalize(this.typeArguments[t]);
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,361,public Type[] getActualTypeArguments() {
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,362,return typeArguments.clone();
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,365,public Type getRawType() {
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,366,return rawType;
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,369,public Type getOwnerType() {
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,370,return ownerType;
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,373,@Override public boolean equals(Object other) {
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,374,return other instanceof ParameterizedType
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,375,"&& Types.equals(this, (ParameterizedType) other);"
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,378,@Override public int hashCode() {
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,379,return Arrays.hashCode(typeArguments)
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,380,^ rawType.hashCode()
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,381,^ hashCodeOrZero(ownerType);
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,384,@Override public String toString() {
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,385,StringBuilder stringBuilder = new StringBuilder(30 * (typeArguments.length + 1));
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,386,stringBuilder.append(typeToString(rawType));
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,388,if (typeArguments.length == 0) {
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,389,return stringBuilder.toString();
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,392,"stringBuilder.append(""<"").append(typeToString(typeArguments[0]));"
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,393,for (int i = 1; i < typeArguments.length; i++) {
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,394,"stringBuilder.append("", "").append(typeToString(typeArguments[i]));"
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,396,"return stringBuilder.append("">"").toString();"
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,399,private static final long serialVersionUID = 0;
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,402,"private static class GenericArrayTypeImpl implements GenericArrayType, Serializable {"
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,403,private final Type componentType;
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,405,public GenericArrayTypeImpl(Type componentType) {
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,406,this.componentType = canonicalize(componentType);
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,409,public Type getGenericComponentType() {
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,410,return componentType;
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,413,@Override public boolean equals(Object o) {
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,414,return o instanceof GenericArrayType
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,415,"&& Types.equals(this, (GenericArrayType) o);"
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,418,@Override public int hashCode() {
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,419,return componentType.hashCode();
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,422,@Override public String toString() {
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,423,"return typeToString(componentType) + ""[]"";"
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,426,private static final long serialVersionUID = 0;
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,430,* The WildcardType interface supports multiple upper bounds and multiple
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,431,* lower bounds. We only support what the Java 6 language needs - at most one
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,432,"* bound. If a lower bound is set, the upper bound must be Object.class."
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,434,"private static class WildcardTypeImpl implements WildcardType, Serializable {"
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,435,private final Type upperBound;
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,436,private final Type lowerBound;
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,438,"public WildcardTypeImpl(Type[] upperBounds, Type[] lowerBounds) {"
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,439,checkArgument(lowerBounds.length <= 1);
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,440,checkArgument(upperBounds.length == 1);
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,442,if (lowerBounds.length == 1) {
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,443,checkNotNull(lowerBounds[0]);
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,444,checkNotPrimitive(lowerBounds[0]);
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,445,checkArgument(upperBounds[0] == Object.class);
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,446,this.lowerBound = canonicalize(lowerBounds[0]);
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,447,this.upperBound = Object.class;
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,449,} else {
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,450,checkNotNull(upperBounds[0]);
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,451,checkNotPrimitive(upperBounds[0]);
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,452,this.lowerBound = null;
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,453,this.upperBound = canonicalize(upperBounds[0]);
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,457,public Type[] getUpperBounds() {
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,458,return new Type[] { upperBound };
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,461,public Type[] getLowerBounds() {
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,462,return lowerBound != null ? new Type[] { lowerBound } : EMPTY_TYPE_ARRAY;
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,465,@Override public boolean equals(Object other) {
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,466,return other instanceof WildcardType
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,467,"&& Types.equals(this, (WildcardType) other);"
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,470,@Override public int hashCode() {
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,471,// this equals Arrays.hashCode(getLowerBounds()) ^ Arrays.hashCode(getUpperBounds());
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,472,return (lowerBound != null ? 31 + lowerBound.hashCode() : 1)
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,473,^ (31 + upperBound.hashCode());
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,476,@Override public String toString() {
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,477,if (lowerBound != null) {
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,478,"return ""? super "" + typeToString(lowerBound);"
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,479,} else if (upperBound == Object.class) {
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,480,"return ""?"";"
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,481,} else {
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,482,"return ""? extends "" + typeToString(upperBound);"
True,gson/src/main/java/com/google/gson/reflect/Types.java,gson/src/main/java/com/google/gson/reflect/Types.java,486,private static final long serialVersionUID = 0;
True,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,19,import com.google.gson.reflect.TypeToken;
True,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,22,import java.lang.reflect.ParameterizedType;
False,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,151,ype genericClass = TypeUtils.getActualTypeForFirstTypeVariable(typeOfT);
False,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,152,ypeInfo typeInfo = new TypeInfo(genericClass);
False,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,153,tring className = typeInfo.getRawClass().getSimpleName();
True,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,153,Type genericClass = ((ParameterizedType) typeOfT).getActualTypeArguments()[0];
True,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,154,TypeToken<?> typeToken = TypeToken.get(genericClass);
True,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,155,String className = typeToken.getRawType().getSimpleName();
False,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,155,f (typeInfo.isPrimitive()) {
True,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,157,if (typeToken.isPrimitive()) {
False,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,157,"alue = (T) typeAdapter.adaptType(value, typeInfo.getRawClass());"
True,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java,159,"value = (T) typeAdapter.adaptType(value, typeToken.getRawType());"
False,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,2, Copyright (C) 2008 Google Inc.
False,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,4," Licensed under the Apache License, Version 2.0 (the ""License"");"
False,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,5, you may not use this file except in compliance with the License.
False,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,6, You may obtain a copy of the License at
False,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,8, http://www.apache.org/licenses/LICENSE-2.0
False,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,10," Unless required by applicable law or agreed to in writing, software"
False,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,11," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,12," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,13, See the License for the specific language governing permissions and
False,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,14, limitations under the License.
False,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,17,ackage com.google.gson;
False,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,19,mport com.google.gson.reflect.TypeToken;
False,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,21,mport junit.framework.TestCase;
False,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,23,mport java.lang.reflect.Type;
False,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,24,mport java.util.List;
False,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,27, Small test for the {@link TypeInfoArray}.
False,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,29, @author Inderjeet Singh
False,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,30, @author Joel Leitch
False,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,32,ublic class TypeInfoArrayTest extends TestCase {
False,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,34,ublic void testArray() {
False,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,35,"tring[] a = {""a"", ""b"", ""c""};"
False,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,36,ypeInfoArray typeInfo = new TypeInfoArray(a.getClass());
False,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,37,"ssertEquals(a.getClass(), typeInfo.getRawClass());"
False,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,38,"ssertEquals(String.class, typeInfo.getComponentRawType());"
False,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,41,ublic void testArrayOfArrays() {
False,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,42,tring[][] a = {
False,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,43,"ew String[]{""a1"", ""a2"", ""a3""},"
False,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,44,"ew String[]{""b1"", ""b2"", ""b3""},"
False,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,45,"ew String[]{""c1"", ""c2"", ""c3""}};"
False,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,46,ypeInfoArray typeInfo = new TypeInfoArray(a.getClass());
False,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,47,"ssertEquals(a.getClass(), typeInfo.getRawClass());"
False,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,48,"ssertEquals(String.class, typeInfo.getComponentRawType());"
False,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,49,"ssertEquals(String[].class, typeInfo.getSecondLevelType());"
False,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,52,ublic void testParameterizedArray() {
False,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,53,ype type = new TypeToken<List<String>[]>() {}.getType();
False,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,54,ypeInfoArray typeInfo = new TypeInfoArray(type);
False,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,55,"ssertEquals(List[].class, typeInfo.getRawClass());"
False,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,56,"ssertEquals(List.class, typeInfo.getComponentRawType());"
False,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,59,ublic void testParameterizedArrayOfArrays() {
False,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,60,ype type = new TypeToken<List<String>[][]>() {}.getType();
False,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,61,ype secondLevelType = new TypeToken<List<String>[]>() {}.getType();
False,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,63,ypeInfoArray typeInfo = new TypeInfoArray(type);
False,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,64,"ssertEquals(List[][].class, typeInfo.getRawClass());"
False,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,65,"ssertEquals(secondLevelType, typeInfo.getSecondLevelType());"
False,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,66,"ssertEquals(List.class, typeInfo.getComponentRawType());"
False,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,69,ublic void testNestedParameterizedArray() {
False,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,70,ype type = new TypeToken<List<List<String>>[]>() {}.getType();
False,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,71,ype secondLevelType = new TypeToken<List<List<String>>>() {}.getType();
False,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,73,ypeInfoArray typeInfo = new TypeInfoArray(type);
False,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,74,"ssertEquals(List[].class, typeInfo.getRawClass());"
False,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,75,"ssertEquals(secondLevelType, typeInfo.getSecondLevelType());"
False,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,76,"ssertEquals(List.class, typeInfo.getComponentRawType());"
False,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,79,ublic void testPrimitiveArray() throws Exception {
False,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,80,ypeInfoArray arrayTypeInfo = new TypeInfoArray(int[].class);
False,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,82,ssertTrue(arrayTypeInfo.isArray());
False,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,83,ssertFalse(arrayTypeInfo.isPrimitive());
False,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,84,"ssertEquals(int.class, arrayTypeInfo.getSecondLevelType());"
False,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,87,ublic void testStringArray() throws Exception {
False,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,88,ypeInfoArray arrayTypeInfo = new TypeInfoArray(String[].class);
False,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,90,ssertTrue(arrayTypeInfo.isArray());
False,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,91,"ssertEquals(String.class, arrayTypeInfo.getSecondLevelType());"
False,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,92,"ssertEquals(String[].class, arrayTypeInfo.getRawClass());"
False,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,95,ublic void testPrimitiveArrayType() throws Exception {
False,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,96,ypeInfoArray typeInfo = new TypeInfoArray(long[].class);
False,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,97,ssertTrue(typeInfo.isArray());
False,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,98,"ssertEquals(long.class, typeInfo.getSecondLevelType());"
False,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,99,"ssertEquals(long[].class, typeInfo.getRawClass());"
False,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,102,ublic void testStringArrayType() throws Exception {
False,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,103,ypeInfoArray typeInfo = new TypeInfoArray(String[].class);
False,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,104,ssertTrue(typeInfo.isArray());
False,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,105,"ssertEquals(String[].class, typeInfo.getRawClass());"
False,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,106,"ssertEquals(String.class, typeInfo.getSecondLevelType());"
False,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,109,ublic void testArrayAsParameterizedTypes() throws Exception {
False,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,110,ype type = new TypeToken<List<String>[]>() {}.getType();
False,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,111,ype secondLevelType = new TypeToken<List<String>>() {}.getType();
False,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,113,ypeInfoArray typeInfo = new TypeInfoArray(type);
False,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,114,ssertTrue(typeInfo.isArray());
False,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,115,"ssertEquals(List[].class, typeInfo.getRawClass());"
False,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,116,"ssertEquals(secondLevelType, typeInfo.getSecondLevelType());"
False,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,118,ype actualType = typeInfo.getActualType();
False,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,119,"ssertEquals(type, actualType);"
False,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,120,ype actualTypeForFirstTypeVariable = TypeUtils.getActualTypeForFirstTypeVariable(actualType);
False,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,gson/src/test/java/com/google/gson/TypeInfoArrayTest.java,121,"ssertEquals(String.class, actualTypeForFirstTypeVariable);"
False,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,2, Copyright (C) 2008 Google Inc.
False,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,4," Licensed under the Apache License, Version 2.0 (the ""License"");"
False,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,5, you may not use this file except in compliance with the License.
False,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,6, You may obtain a copy of the License at
False,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,8, http://www.apache.org/licenses/LICENSE-2.0
False,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,10," Unless required by applicable law or agreed to in writing, software"
False,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,11," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,12," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,13, See the License for the specific language governing permissions and
False,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,14, limitations under the License.
False,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,17,ackage com.google.gson;
False,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,19,mport com.google.gson.reflect.TypeToken;
False,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,21,mport junit.framework.TestCase;
False,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,23,mport java.lang.reflect.Field;
False,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,24,mport java.lang.reflect.Type;
False,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,25,mport java.util.List;
False,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,28, Small test to ensure that the TypeInfoFactory is return the object that we expect.
False,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,30, @author Inderjeet Singh
False,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,31, @author Joel Leitch
False,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,33,ublic class TypeInfoFactoryTest extends TestCase {
False,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,35,rivate static Type OBJ_TYPE = new TypeToken<ObjectWithDifferentFields<Integer>>() {}.getType();
False,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,36,rivate ObjectWithDifferentFields<Integer> obj;
False,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,38,Override
False,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,39,rotected void setUp() throws Exception {
False,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,40,uper.setUp();
False,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,41,bj = new ObjectWithDifferentFields<Integer>();
False,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,44,ublic void testSimpleField() throws Exception {
False,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,45,"ield f = obj.getClass().getField(""simpleField"");"
False,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,46,"ypeInfo typeInfo = TypeInfoFactory.getTypeInfoForField(f, OBJ_TYPE);"
False,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,48,ssertFalse(typeInfo.isArray());
False,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,49,ssertFalse(typeInfo.isEnum());
False,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,50,"ssertEquals(String.class, typeInfo.getActualType());"
False,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,51,"ssertEquals(String.class, typeInfo.getRawClass());"
False,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,54,ublic void testEnumField() throws Exception {
False,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,55,"ield f = obj.getClass().getField(""enumField"");"
False,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,56,"ypeInfo typeInfo = TypeInfoFactory.getTypeInfoForField(f, OBJ_TYPE);"
False,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,58,ssertFalse(typeInfo.isArray());
False,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,59,ssertTrue(typeInfo.isEnum());
False,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,60,"ssertEquals(ObjectWithDifferentFields.TestEnum.class, typeInfo.getActualType());"
False,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,61,"ssertEquals(ObjectWithDifferentFields.TestEnum.class, typeInfo.getRawClass());"
False,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,64,ublic void testParameterizedTypeField() throws Exception {
False,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,65,ype listType = new TypeToken<List<String>>() {}.getType();
False,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,66,"ield f = obj.getClass().getField(""simpleParameterizedType"");"
False,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,67,"ypeInfo typeInfo = TypeInfoFactory.getTypeInfoForField(f, OBJ_TYPE);"
False,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,69,ssertFalse(typeInfo.isArray());
False,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,70,ssertFalse(typeInfo.isEnum());
False,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,71,"ssertEquals(listType, typeInfo.getActualType());"
False,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,72,"ssertEquals(List.class, typeInfo.getRawClass());"
False,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,75,ublic void testNestedParameterizedTypeField() throws Exception {
False,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,76,ype listType = new TypeToken<List<List<String>>>() {}.getType();
False,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,77,"ield f = obj.getClass().getField(""simpleNestedParameterizedType"");"
False,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,78,"ypeInfo typeInfo = TypeInfoFactory.getTypeInfoForField(f, OBJ_TYPE);"
False,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,80,ssertFalse(typeInfo.isArray());
False,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,81,ssertFalse(typeInfo.isEnum());
False,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,82,"ssertEquals(listType, typeInfo.getActualType());"
False,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,83,"ssertEquals(List.class, typeInfo.getRawClass());"
False,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,86,ublic void testGenericArrayTypeField() throws Exception {
False,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,87,ype listType = new TypeToken<List<String>[]>() {}.getType();
False,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,88,"ield f = obj.getClass().getField(""simpleGenericArray"");"
False,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,89,"ypeInfo typeInfo = TypeInfoFactory.getTypeInfoForField(f, OBJ_TYPE);"
False,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,91,ssertTrue(typeInfo.isArray());
False,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,92,ssertFalse(typeInfo.isEnum());
False,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,93,"ssertEquals(listType, typeInfo.getActualType());"
False,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,94,"ssertEquals(List[].class, typeInfo.getRawClass());"
False,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,97,ublic void testTypeVariableField() throws Exception {
False,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,98,"ield f = obj.getClass().getField(""typeVariableObj"");"
False,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,99,"ypeInfo typeInfo = TypeInfoFactory.getTypeInfoForField(f, OBJ_TYPE);"
False,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,101,ssertFalse(typeInfo.isArray());
False,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,102,ssertFalse(typeInfo.isEnum());
False,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,103,"ssertEquals(Integer.class, typeInfo.getActualType());"
False,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,104,"ssertEquals(Integer.class, typeInfo.getRawClass());"
False,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,107,ublic void testTypeVariableArrayField() throws Exception {
False,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,108,"ield f = obj.getClass().getField(""typeVariableArray"");"
False,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,109,"ypeInfo typeInfo = TypeInfoFactory.getTypeInfoForField(f, OBJ_TYPE);"
False,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,111,ssertTrue(typeInfo.isArray());
False,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,112,ssertFalse(typeInfo.isEnum());
False,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,113,"ssertEquals(Integer[].class, typeInfo.getActualType());"
False,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,114,"ssertEquals(Integer[].class, typeInfo.getRawClass());"
False,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,117,ublic void testMutliDimensionalTypeVariableArrayField() throws Exception {
False,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,118,"ield f = obj.getClass().getField(""mutliDimensionalTypeVariableArray"");"
False,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,119,"ypeInfo typeInfo = TypeInfoFactory.getTypeInfoForField(f, OBJ_TYPE);"
False,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,121,ssertTrue(typeInfo.isArray());
False,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,122,ssertFalse(typeInfo.isEnum());
False,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,123,"ssertEquals(Integer[][][].class, typeInfo.getActualType());"
False,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,124,"ssertEquals(Integer[][][].class, typeInfo.getRawClass());"
False,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,127,ublic void testParameterizedTypeVariableField() throws Exception {
False,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,128,ype listType = new TypeToken<List<Integer>>() {}.getType();
False,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,129,"ield f = obj.getClass().getField(""listOfTypeVariables"");"
False,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,130,"ypeInfo typeInfo = TypeInfoFactory.getTypeInfoForField(f, OBJ_TYPE);"
False,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,132,ssertFalse(typeInfo.isArray());
False,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,133,ssertFalse(typeInfo.isEnum());
False,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,134,"ssertEquals(listType, typeInfo.getActualType());"
False,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,135,"ssertEquals(List.class, typeInfo.getRawClass());"
False,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,138,ublic void testNestedParameterizedTypeVariableField() throws Exception {
False,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,139,ype listType = new TypeToken<List<List<Integer>>>() {}.getType();
False,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,140,"ield f = obj.getClass().getField(""listOfListsOfTypeVariables"");"
False,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,141,"ypeInfo typeInfo = TypeInfoFactory.getTypeInfoForField(f, OBJ_TYPE);"
False,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,143,ssertFalse(typeInfo.isArray());
False,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,144,ssertFalse(typeInfo.isEnum());
False,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,145,"ssertEquals(listType, typeInfo.getActualType());"
False,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,146,"ssertEquals(List.class, typeInfo.getRawClass());"
False,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,149,ublic void testParameterizedTypeVariableArrayField() throws Exception {
False,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,150,ype listType = new TypeToken<List<Integer>[]>() {}.getType();
False,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,151,"ield f = obj.getClass().getField(""listOfTypeVariablesArray"");"
False,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,152,"ypeInfo typeInfo = TypeInfoFactory.getTypeInfoForField(f, OBJ_TYPE);"
False,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,154,ssertTrue(typeInfo.isArray());
False,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,155,ssertFalse(typeInfo.isEnum());
False,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,156,"ssertEquals(listType, typeInfo.getActualType());"
False,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,157,"ssertEquals(List[].class, typeInfo.getRawClass());"
False,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,160,ublic void testWildcardField() throws Exception {
False,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,161,ype listType = new TypeToken<List<Object>>() {}.getType();
False,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,162,"ield f = obj.getClass().getField(""listWithWildcard"");"
False,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,163,"ypeInfo typeInfo = TypeInfoFactory.getTypeInfoForField(f, OBJ_TYPE);"
False,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,165,ssertFalse(typeInfo.isArray());
False,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,166,ssertFalse(typeInfo.isEnum());
False,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,167,"ssertEquals(listType, typeInfo.getActualType());"
False,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,168,"ssertEquals(List.class, typeInfo.getRawClass());"
False,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,171,ublic void testArrayOfWildcardField() throws Exception {
False,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,172,ype listType = new TypeToken<List<Object>[]>() {}.getType();
False,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,173,"ield f = obj.getClass().getField(""arrayOfListWithWildcard"");"
False,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,174,"ypeInfo typeInfo = TypeInfoFactory.getTypeInfoForField(f, OBJ_TYPE);"
False,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,176,ssertTrue(typeInfo.isArray());
False,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,177,ssertFalse(typeInfo.isEnum());
False,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,178,"ssertEquals(listType, typeInfo.getActualType());"
False,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,179,"ssertEquals(List[].class, typeInfo.getRawClass());"
False,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,182,ublic void testListStringWildcardField() throws Exception {
False,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,183,ype listType = new TypeToken<List<String>>() {}.getType();
False,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,184,"ield f = obj.getClass().getField(""listWithStringWildcard"");"
False,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,185,"ypeInfo typeInfo = TypeInfoFactory.getTypeInfoForField(f, OBJ_TYPE);"
False,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,187,ssertFalse(typeInfo.isArray());
False,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,188,ssertFalse(typeInfo.isEnum());
False,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,189,"ssertEquals(listType, typeInfo.getActualType());"
False,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,190,"ssertEquals(List.class, typeInfo.getRawClass());"
False,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,193,ublic void testArrayOfListStringWildcardField() throws Exception {
False,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,194,ype listType = new TypeToken<List<String>[]>() {}.getType();
False,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,195,"ield f = obj.getClass().getField(""arrayOfListWithStringWildcard"");"
False,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,196,"ypeInfo typeInfo = TypeInfoFactory.getTypeInfoForField(f, OBJ_TYPE);"
False,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,198,ssertTrue(typeInfo.isArray());
False,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,199,ssertFalse(typeInfo.isEnum());
False,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,200,"ssertEquals(listType, typeInfo.getActualType());"
False,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,201,"ssertEquals(List[].class, typeInfo.getRawClass());"
False,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,204,ublic void testListTypeVariableWildcardField() throws Exception {
False,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,205,ype listType = new TypeToken<List<Integer>>() {}.getType();
False,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,206,"ield f = obj.getClass().getField(""listWithTypeVariableWildcard"");"
False,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,207,"ypeInfo typeInfo = TypeInfoFactory.getTypeInfoForField(f, OBJ_TYPE);"
False,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,209,ssertFalse(typeInfo.isArray());
False,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,210,ssertFalse(typeInfo.isEnum());
False,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,211,"ssertEquals(listType, typeInfo.getActualType());"
False,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,212,"ssertEquals(List.class, typeInfo.getRawClass());"
False,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,215,ublic void testArrayOfListTypeVariableWildcardField() throws Exception {
False,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,216,ype listType = new TypeToken<List<Integer>[]>() {}.getType();
False,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,217,"ield f = obj.getClass().getField(""arrayOfListWithTypeVariableWildcard"");"
False,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,218,"ypeInfo typeInfo = TypeInfoFactory.getTypeInfoForField(f, OBJ_TYPE);"
False,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,220,ssertTrue(typeInfo.isArray());
False,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,221,ssertFalse(typeInfo.isEnum());
False,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,222,"ssertEquals(listType, typeInfo.getActualType());"
False,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,223,"ssertEquals(List[].class, typeInfo.getRawClass());"
False,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,226,"SuppressWarnings(""unused"")"
False,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,227,rivate static class ObjectWithDifferentFields<T> {
False,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,228,ublic static enum TestEnum {
False,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,229,"EST_1, TEST_2;"
False,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,232,ublic String simpleField;
False,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,233,ublic TestEnum enumField;
False,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,234,ublic List<String> simpleParameterizedType;
False,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,235,ublic List<List<String>> simpleNestedParameterizedType;
False,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,236,ublic List<String>[] simpleGenericArray;
False,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,238,ublic T typeVariableObj;
False,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,239,ublic T[] typeVariableArray;
False,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,240,ublic T[][][] mutliDimensionalTypeVariableArray;
False,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,241,ublic List<T> listOfTypeVariables;
False,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,242,ublic List<List<T>> listOfListsOfTypeVariables;
False,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,243,ublic List<T>[] listOfTypeVariablesArray;
False,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,245,ublic List<?> listWithWildcard;
False,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,246,ublic List<?>[] arrayOfListWithWildcard;
False,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,247,ublic List<? extends String> listWithStringWildcard;
False,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,248,ublic List<? extends String>[] arrayOfListWithStringWildcard;
False,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,250,ublic List<? extends T> listWithTypeVariableWildcard;
False,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java,251,ublic List<? extends T>[] arrayOfListWithTypeVariableWildcard;
False,gson/src/test/java/com/google/gson/TypeInfoMapTest.java,gson/src/test/java/com/google/gson/TypeInfoMapTest.java,2, Copyright (C) 2008 Google Inc.
False,gson/src/test/java/com/google/gson/TypeInfoMapTest.java,gson/src/test/java/com/google/gson/TypeInfoMapTest.java,4," Licensed under the Apache License, Version 2.0 (the ""License"");"
False,gson/src/test/java/com/google/gson/TypeInfoMapTest.java,gson/src/test/java/com/google/gson/TypeInfoMapTest.java,5, you may not use this file except in compliance with the License.
False,gson/src/test/java/com/google/gson/TypeInfoMapTest.java,gson/src/test/java/com/google/gson/TypeInfoMapTest.java,6, You may obtain a copy of the License at
False,gson/src/test/java/com/google/gson/TypeInfoMapTest.java,gson/src/test/java/com/google/gson/TypeInfoMapTest.java,8, http://www.apache.org/licenses/LICENSE-2.0
False,gson/src/test/java/com/google/gson/TypeInfoMapTest.java,gson/src/test/java/com/google/gson/TypeInfoMapTest.java,10," Unless required by applicable law or agreed to in writing, software"
False,gson/src/test/java/com/google/gson/TypeInfoMapTest.java,gson/src/test/java/com/google/gson/TypeInfoMapTest.java,11," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,gson/src/test/java/com/google/gson/TypeInfoMapTest.java,gson/src/test/java/com/google/gson/TypeInfoMapTest.java,12," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,gson/src/test/java/com/google/gson/TypeInfoMapTest.java,gson/src/test/java/com/google/gson/TypeInfoMapTest.java,13, See the License for the specific language governing permissions and
False,gson/src/test/java/com/google/gson/TypeInfoMapTest.java,gson/src/test/java/com/google/gson/TypeInfoMapTest.java,14, limitations under the License.
False,gson/src/test/java/com/google/gson/TypeInfoMapTest.java,gson/src/test/java/com/google/gson/TypeInfoMapTest.java,17,ackage com.google.gson;
False,gson/src/test/java/com/google/gson/TypeInfoMapTest.java,gson/src/test/java/com/google/gson/TypeInfoMapTest.java,19,mport com.google.gson.reflect.TypeToken;
False,gson/src/test/java/com/google/gson/TypeInfoMapTest.java,gson/src/test/java/com/google/gson/TypeInfoMapTest.java,21,mport junit.framework.TestCase;
False,gson/src/test/java/com/google/gson/TypeInfoMapTest.java,gson/src/test/java/com/google/gson/TypeInfoMapTest.java,23,mport java.lang.reflect.Type;
False,gson/src/test/java/com/google/gson/TypeInfoMapTest.java,gson/src/test/java/com/google/gson/TypeInfoMapTest.java,24,mport java.util.HashMap;
False,gson/src/test/java/com/google/gson/TypeInfoMapTest.java,gson/src/test/java/com/google/gson/TypeInfoMapTest.java,25,mport java.util.List;
False,gson/src/test/java/com/google/gson/TypeInfoMapTest.java,gson/src/test/java/com/google/gson/TypeInfoMapTest.java,26,mport java.util.Map;
False,gson/src/test/java/com/google/gson/TypeInfoMapTest.java,gson/src/test/java/com/google/gson/TypeInfoMapTest.java,29, Unit test for the default JSON map serialization object located in the
False,gson/src/test/java/com/google/gson/TypeInfoMapTest.java,gson/src/test/java/com/google/gson/TypeInfoMapTest.java,30, {@link DefaultTypeAdapters} class.
False,gson/src/test/java/com/google/gson/TypeInfoMapTest.java,gson/src/test/java/com/google/gson/TypeInfoMapTest.java,32, @author Joel Leitch
False,gson/src/test/java/com/google/gson/TypeInfoMapTest.java,gson/src/test/java/com/google/gson/TypeInfoMapTest.java,34,ublic class TypeInfoMapTest extends TestCase {
False,gson/src/test/java/com/google/gson/TypeInfoMapTest.java,gson/src/test/java/com/google/gson/TypeInfoMapTest.java,36,ublic void testInvalidConstruction() throws Exception {
False,gson/src/test/java/com/google/gson/TypeInfoMapTest.java,gson/src/test/java/com/google/gson/TypeInfoMapTest.java,37,ry {
False,gson/src/test/java/com/google/gson/TypeInfoMapTest.java,gson/src/test/java/com/google/gson/TypeInfoMapTest.java,38,ew TypeInfoMap(String.class);
False,gson/src/test/java/com/google/gson/TypeInfoMapTest.java,gson/src/test/java/com/google/gson/TypeInfoMapTest.java,39,"ail(""Must be a ParameterizedType"");"
False,gson/src/test/java/com/google/gson/TypeInfoMapTest.java,gson/src/test/java/com/google/gson/TypeInfoMapTest.java,40, catch (IllegalArgumentException expected) { }
False,gson/src/test/java/com/google/gson/TypeInfoMapTest.java,gson/src/test/java/com/google/gson/TypeInfoMapTest.java,43,ublic void testNonMapConstruction() throws Exception {
False,gson/src/test/java/com/google/gson/TypeInfoMapTest.java,gson/src/test/java/com/google/gson/TypeInfoMapTest.java,44,ry {
False,gson/src/test/java/com/google/gson/TypeInfoMapTest.java,gson/src/test/java/com/google/gson/TypeInfoMapTest.java,45,ype parameterizedMapType = new TypeToken<List<String>>() {}.getType();
False,gson/src/test/java/com/google/gson/TypeInfoMapTest.java,gson/src/test/java/com/google/gson/TypeInfoMapTest.java,46,ew TypeInfoMap(parameterizedMapType);
False,gson/src/test/java/com/google/gson/TypeInfoMapTest.java,gson/src/test/java/com/google/gson/TypeInfoMapTest.java,47,"ail(""The raw type must be a Map"");"
False,gson/src/test/java/com/google/gson/TypeInfoMapTest.java,gson/src/test/java/com/google/gson/TypeInfoMapTest.java,48, catch (IllegalArgumentException expected) { }
False,gson/src/test/java/com/google/gson/TypeInfoMapTest.java,gson/src/test/java/com/google/gson/TypeInfoMapTest.java,51,ublic void testBasicGetters() throws Exception {
False,gson/src/test/java/com/google/gson/TypeInfoMapTest.java,gson/src/test/java/com/google/gson/TypeInfoMapTest.java,52,"ype parameterizedMapType = new TypeToken<Map<String, Integer>>() {}.getType();"
False,gson/src/test/java/com/google/gson/TypeInfoMapTest.java,gson/src/test/java/com/google/gson/TypeInfoMapTest.java,53,ypeInfoMap mapTypeInfo = new TypeInfoMap(parameterizedMapType);
False,gson/src/test/java/com/google/gson/TypeInfoMapTest.java,gson/src/test/java/com/google/gson/TypeInfoMapTest.java,55,"ssertEquals(String.class, mapTypeInfo.getKeyType());"
False,gson/src/test/java/com/google/gson/TypeInfoMapTest.java,gson/src/test/java/com/google/gson/TypeInfoMapTest.java,56,"ssertEquals(Integer.class, mapTypeInfo.getValueType());"
False,gson/src/test/java/com/google/gson/TypeInfoMapTest.java,gson/src/test/java/com/google/gson/TypeInfoMapTest.java,59,ublic void testMapImplementations() throws Exception {
False,gson/src/test/java/com/google/gson/TypeInfoMapTest.java,gson/src/test/java/com/google/gson/TypeInfoMapTest.java,60,"ype parameterizedMapType = new TypeToken<HashMap<String, Integer>>() {}.getType();"
False,gson/src/test/java/com/google/gson/TypeInfoMapTest.java,gson/src/test/java/com/google/gson/TypeInfoMapTest.java,61,ypeInfoMap mapTypeInfo = new TypeInfoMap(parameterizedMapType);
False,gson/src/test/java/com/google/gson/TypeInfoMapTest.java,gson/src/test/java/com/google/gson/TypeInfoMapTest.java,63,"ssertEquals(String.class, mapTypeInfo.getKeyType());"
False,gson/src/test/java/com/google/gson/TypeInfoMapTest.java,gson/src/test/java/com/google/gson/TypeInfoMapTest.java,64,"ssertEquals(Integer.class, mapTypeInfo.getValueType());"
False,gson/src/test/java/com/google/gson/TypeInfoTest.java,gson/src/test/java/com/google/gson/TypeInfoTest.java,2, Copyright (C) 2008 Google Inc.
False,gson/src/test/java/com/google/gson/TypeInfoTest.java,gson/src/test/java/com/google/gson/TypeInfoTest.java,4," Licensed under the Apache License, Version 2.0 (the ""License"");"
False,gson/src/test/java/com/google/gson/TypeInfoTest.java,gson/src/test/java/com/google/gson/TypeInfoTest.java,5, you may not use this file except in compliance with the License.
False,gson/src/test/java/com/google/gson/TypeInfoTest.java,gson/src/test/java/com/google/gson/TypeInfoTest.java,6, You may obtain a copy of the License at
False,gson/src/test/java/com/google/gson/TypeInfoTest.java,gson/src/test/java/com/google/gson/TypeInfoTest.java,8, http://www.apache.org/licenses/LICENSE-2.0
False,gson/src/test/java/com/google/gson/TypeInfoTest.java,gson/src/test/java/com/google/gson/TypeInfoTest.java,10," Unless required by applicable law or agreed to in writing, software"
False,gson/src/test/java/com/google/gson/TypeInfoTest.java,gson/src/test/java/com/google/gson/TypeInfoTest.java,11," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,gson/src/test/java/com/google/gson/TypeInfoTest.java,gson/src/test/java/com/google/gson/TypeInfoTest.java,12," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,gson/src/test/java/com/google/gson/TypeInfoTest.java,gson/src/test/java/com/google/gson/TypeInfoTest.java,13, See the License for the specific language governing permissions and
False,gson/src/test/java/com/google/gson/TypeInfoTest.java,gson/src/test/java/com/google/gson/TypeInfoTest.java,14, limitations under the License.
False,gson/src/test/java/com/google/gson/TypeInfoTest.java,gson/src/test/java/com/google/gson/TypeInfoTest.java,17,ackage com.google.gson;
False,gson/src/test/java/com/google/gson/TypeInfoTest.java,gson/src/test/java/com/google/gson/TypeInfoTest.java,19,mport com.google.gson.reflect.TypeToken;
False,gson/src/test/java/com/google/gson/TypeInfoTest.java,gson/src/test/java/com/google/gson/TypeInfoTest.java,21,mport junit.framework.TestCase;
False,gson/src/test/java/com/google/gson/TypeInfoTest.java,gson/src/test/java/com/google/gson/TypeInfoTest.java,23,mport java.lang.reflect.Type;
False,gson/src/test/java/com/google/gson/TypeInfoTest.java,gson/src/test/java/com/google/gson/TypeInfoTest.java,24,mport java.util.List;
False,gson/src/test/java/com/google/gson/TypeInfoTest.java,gson/src/test/java/com/google/gson/TypeInfoTest.java,27, Exercising the construction of the Parameter object and ensure the
False,gson/src/test/java/com/google/gson/TypeInfoTest.java,gson/src/test/java/com/google/gson/TypeInfoTest.java,28, proper types are returned.
False,gson/src/test/java/com/google/gson/TypeInfoTest.java,gson/src/test/java/com/google/gson/TypeInfoTest.java,30, @author Joel Leitch
False,gson/src/test/java/com/google/gson/TypeInfoTest.java,gson/src/test/java/com/google/gson/TypeInfoTest.java,32,ublic class TypeInfoTest extends TestCase {
False,gson/src/test/java/com/google/gson/TypeInfoTest.java,gson/src/test/java/com/google/gson/TypeInfoTest.java,34,ublic void testPrimitive() throws Exception {
False,gson/src/test/java/com/google/gson/TypeInfoTest.java,gson/src/test/java/com/google/gson/TypeInfoTest.java,35,ypeInfo typeInfo = new TypeInfo(boolean.class);
False,gson/src/test/java/com/google/gson/TypeInfoTest.java,gson/src/test/java/com/google/gson/TypeInfoTest.java,37,ssertFalse(typeInfo.isArray());
False,gson/src/test/java/com/google/gson/TypeInfoTest.java,gson/src/test/java/com/google/gson/TypeInfoTest.java,38,ssertTrue(typeInfo.isPrimitive());
False,gson/src/test/java/com/google/gson/TypeInfoTest.java,gson/src/test/java/com/google/gson/TypeInfoTest.java,39,"ssertEquals(boolean.class, typeInfo.getRawClass());"
False,gson/src/test/java/com/google/gson/TypeInfoTest.java,gson/src/test/java/com/google/gson/TypeInfoTest.java,40,"ssertEquals(Boolean.class, typeInfo.getWrappedClass());"
False,gson/src/test/java/com/google/gson/TypeInfoTest.java,gson/src/test/java/com/google/gson/TypeInfoTest.java,43,ublic void testPrimitiveWrapper() throws Exception {
False,gson/src/test/java/com/google/gson/TypeInfoTest.java,gson/src/test/java/com/google/gson/TypeInfoTest.java,44,ypeInfo typeInfo = new TypeInfo(Integer.class);
False,gson/src/test/java/com/google/gson/TypeInfoTest.java,gson/src/test/java/com/google/gson/TypeInfoTest.java,46,"ssertEquals(Integer.class, typeInfo.getRawClass());"
False,gson/src/test/java/com/google/gson/TypeInfoTest.java,gson/src/test/java/com/google/gson/TypeInfoTest.java,47,ssertTrue(typeInfo.isPrimitive());
False,gson/src/test/java/com/google/gson/TypeInfoTest.java,gson/src/test/java/com/google/gson/TypeInfoTest.java,48,ssertFalse(typeInfo.isArray());
False,gson/src/test/java/com/google/gson/TypeInfoTest.java,gson/src/test/java/com/google/gson/TypeInfoTest.java,51,ublic void testString() throws Exception {
False,gson/src/test/java/com/google/gson/TypeInfoTest.java,gson/src/test/java/com/google/gson/TypeInfoTest.java,52,ypeInfo typeInfo = new TypeInfo(String.class);
False,gson/src/test/java/com/google/gson/TypeInfoTest.java,gson/src/test/java/com/google/gson/TypeInfoTest.java,54,ssertFalse(typeInfo.isArray());
False,gson/src/test/java/com/google/gson/TypeInfoTest.java,gson/src/test/java/com/google/gson/TypeInfoTest.java,55,ssertFalse(typeInfo.isPrimitive());
False,gson/src/test/java/com/google/gson/TypeInfoTest.java,gson/src/test/java/com/google/gson/TypeInfoTest.java,56,"ssertEquals(String.class, typeInfo.getRawClass());"
False,gson/src/test/java/com/google/gson/TypeInfoTest.java,gson/src/test/java/com/google/gson/TypeInfoTest.java,59,ublic void testObject() throws Exception {
False,gson/src/test/java/com/google/gson/TypeInfoTest.java,gson/src/test/java/com/google/gson/TypeInfoTest.java,60,ypeInfo typeInfo = new TypeInfo(Object.class);
False,gson/src/test/java/com/google/gson/TypeInfoTest.java,gson/src/test/java/com/google/gson/TypeInfoTest.java,62,ssertFalse(typeInfo.isArray());
False,gson/src/test/java/com/google/gson/TypeInfoTest.java,gson/src/test/java/com/google/gson/TypeInfoTest.java,63,ssertFalse(typeInfo.isPrimitive());
False,gson/src/test/java/com/google/gson/TypeInfoTest.java,gson/src/test/java/com/google/gson/TypeInfoTest.java,64,"ssertEquals(Object.class, typeInfo.getRawClass());"
False,gson/src/test/java/com/google/gson/TypeInfoTest.java,gson/src/test/java/com/google/gson/TypeInfoTest.java,67,ublic void testPrimitiveType() throws Exception {
False,gson/src/test/java/com/google/gson/TypeInfoTest.java,gson/src/test/java/com/google/gson/TypeInfoTest.java,68,ypeInfo typeInfo = new TypeInfo(long.class);
False,gson/src/test/java/com/google/gson/TypeInfoTest.java,gson/src/test/java/com/google/gson/TypeInfoTest.java,69,ssertFalse(typeInfo.isArray());
False,gson/src/test/java/com/google/gson/TypeInfoTest.java,gson/src/test/java/com/google/gson/TypeInfoTest.java,70,"ssertEquals(long.class, typeInfo.getRawClass());"
False,gson/src/test/java/com/google/gson/TypeInfoTest.java,gson/src/test/java/com/google/gson/TypeInfoTest.java,73,ublic void testObjectType() throws Exception {
False,gson/src/test/java/com/google/gson/TypeInfoTest.java,gson/src/test/java/com/google/gson/TypeInfoTest.java,74,ypeInfo typeInfo = new TypeInfo(String.class);
False,gson/src/test/java/com/google/gson/TypeInfoTest.java,gson/src/test/java/com/google/gson/TypeInfoTest.java,75,ssertFalse(typeInfo.isArray());
False,gson/src/test/java/com/google/gson/TypeInfoTest.java,gson/src/test/java/com/google/gson/TypeInfoTest.java,76,ssertFalse(typeInfo.isPrimitive());
False,gson/src/test/java/com/google/gson/TypeInfoTest.java,gson/src/test/java/com/google/gson/TypeInfoTest.java,77,"ssertEquals(String.class, typeInfo.getRawClass());"
False,gson/src/test/java/com/google/gson/TypeInfoTest.java,gson/src/test/java/com/google/gson/TypeInfoTest.java,80,ublic void testParameterizedTypes() throws Exception {
False,gson/src/test/java/com/google/gson/TypeInfoTest.java,gson/src/test/java/com/google/gson/TypeInfoTest.java,81,ype type = new TypeToken<List<String>>() {}.getType();
False,gson/src/test/java/com/google/gson/TypeInfoTest.java,gson/src/test/java/com/google/gson/TypeInfoTest.java,82,ypeInfo typeInfo = new TypeInfo(type);
False,gson/src/test/java/com/google/gson/TypeInfoTest.java,gson/src/test/java/com/google/gson/TypeInfoTest.java,84,ssertFalse(typeInfo.isArray());
False,gson/src/test/java/com/google/gson/TypeInfoTest.java,gson/src/test/java/com/google/gson/TypeInfoTest.java,85,"ssertEquals(List.class, typeInfo.getRawClass());"
False,gson/src/test/java/com/google/gson/TypeInfoTest.java,gson/src/test/java/com/google/gson/TypeInfoTest.java,86,"ssertEquals(type, typeInfo.getActualType());"
False,gson/src/test/java/com/google/gson/TypeInfoTest.java,gson/src/test/java/com/google/gson/TypeInfoTest.java,89,ublic void testGenericizedGenericType() throws Exception {
False,gson/src/test/java/com/google/gson/TypeInfoTest.java,gson/src/test/java/com/google/gson/TypeInfoTest.java,90,ype type = new TypeToken<List<List<String>>>() {}.getType();
False,gson/src/test/java/com/google/gson/TypeInfoTest.java,gson/src/test/java/com/google/gson/TypeInfoTest.java,91,ype genericType = new TypeToken<List<String>>() {}.getType();
False,gson/src/test/java/com/google/gson/TypeInfoTest.java,gson/src/test/java/com/google/gson/TypeInfoTest.java,93,ypeInfo typeInfo = new TypeInfo(type);
False,gson/src/test/java/com/google/gson/TypeInfoTest.java,gson/src/test/java/com/google/gson/TypeInfoTest.java,94,ssertFalse(typeInfo.isArray());
False,gson/src/test/java/com/google/gson/TypeInfoTest.java,gson/src/test/java/com/google/gson/TypeInfoTest.java,95,"ssertEquals(List.class, typeInfo.getRawClass());"
False,gson/src/test/java/com/google/gson/TypeInfoTest.java,gson/src/test/java/com/google/gson/TypeInfoTest.java,96,ype actualTypeForFirstTypeVariable = TypeUtils.getActualTypeForFirstTypeVariable(type);
False,gson/src/test/java/com/google/gson/TypeInfoTest.java,gson/src/test/java/com/google/gson/TypeInfoTest.java,97,"ssertEquals(genericType, actualTypeForFirstTypeVariable);"
False,gson/src/test/java/com/google/gson/TypeInfoTest.java,gson/src/test/java/com/google/gson/TypeInfoTest.java,99,ypeInfo = new TypeInfo(genericType);
False,gson/src/test/java/com/google/gson/TypeInfoTest.java,gson/src/test/java/com/google/gson/TypeInfoTest.java,100,ctualTypeForFirstTypeVariable = TypeUtils.getActualTypeForFirstTypeVariable(genericType);
False,gson/src/test/java/com/google/gson/TypeInfoTest.java,gson/src/test/java/com/google/gson/TypeInfoTest.java,101,"ssertEquals(String.class, actualTypeForFirstTypeVariable);"
False,gson/src/test/java/com/google/gson/TypeInfoTest.java,gson/src/test/java/com/google/gson/TypeInfoTest.java,104,ublic void testStrangeTypeParameters() throws Exception {
False,gson/src/test/java/com/google/gson/TypeInfoTest.java,gson/src/test/java/com/google/gson/TypeInfoTest.java,105,ry {
False,gson/src/test/java/com/google/gson/TypeInfoTest.java,gson/src/test/java/com/google/gson/TypeInfoTest.java,106,ew TypeInfo(new Type() {});
False,gson/src/test/java/com/google/gson/TypeInfoTest.java,gson/src/test/java/com/google/gson/TypeInfoTest.java,107,"ail(""Should not be able to determine this unknown type"");"
False,gson/src/test/java/com/google/gson/TypeInfoTest.java,gson/src/test/java/com/google/gson/TypeInfoTest.java,108, catch (IllegalArgumentException expected) {
False,gson/src/test/java/com/google/gson/TypeUtilsTest.java,gson/src/test/java/com/google/gson/TypeUtilsTest.java,2, Copyright (C) 2008 Google Inc.
False,gson/src/test/java/com/google/gson/TypeUtilsTest.java,gson/src/test/java/com/google/gson/TypeUtilsTest.java,4," Licensed under the Apache License, Version 2.0 (the ""License"");"
False,gson/src/test/java/com/google/gson/TypeUtilsTest.java,gson/src/test/java/com/google/gson/TypeUtilsTest.java,5, you may not use this file except in compliance with the License.
False,gson/src/test/java/com/google/gson/TypeUtilsTest.java,gson/src/test/java/com/google/gson/TypeUtilsTest.java,6, You may obtain a copy of the License at
False,gson/src/test/java/com/google/gson/TypeUtilsTest.java,gson/src/test/java/com/google/gson/TypeUtilsTest.java,8, http://www.apache.org/licenses/LICENSE-2.0
False,gson/src/test/java/com/google/gson/TypeUtilsTest.java,gson/src/test/java/com/google/gson/TypeUtilsTest.java,10," Unless required by applicable law or agreed to in writing, software"
False,gson/src/test/java/com/google/gson/TypeUtilsTest.java,gson/src/test/java/com/google/gson/TypeUtilsTest.java,11," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,gson/src/test/java/com/google/gson/TypeUtilsTest.java,gson/src/test/java/com/google/gson/TypeUtilsTest.java,12," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,gson/src/test/java/com/google/gson/TypeUtilsTest.java,gson/src/test/java/com/google/gson/TypeUtilsTest.java,13, See the License for the specific language governing permissions and
False,gson/src/test/java/com/google/gson/TypeUtilsTest.java,gson/src/test/java/com/google/gson/TypeUtilsTest.java,14, limitations under the License.
False,gson/src/test/java/com/google/gson/TypeUtilsTest.java,gson/src/test/java/com/google/gson/TypeUtilsTest.java,17,ackage com.google.gson;
False,gson/src/test/java/com/google/gson/TypeUtilsTest.java,gson/src/test/java/com/google/gson/TypeUtilsTest.java,19,mport com.google.gson.reflect.TypeToken;
False,gson/src/test/java/com/google/gson/TypeUtilsTest.java,gson/src/test/java/com/google/gson/TypeUtilsTest.java,21,mport junit.framework.TestCase;
False,gson/src/test/java/com/google/gson/TypeUtilsTest.java,gson/src/test/java/com/google/gson/TypeUtilsTest.java,23,mport java.lang.reflect.Type;
False,gson/src/test/java/com/google/gson/TypeUtilsTest.java,gson/src/test/java/com/google/gson/TypeUtilsTest.java,24,mport java.util.Collection;
False,gson/src/test/java/com/google/gson/TypeUtilsTest.java,gson/src/test/java/com/google/gson/TypeUtilsTest.java,25,mport java.util.Map;
False,gson/src/test/java/com/google/gson/TypeUtilsTest.java,gson/src/test/java/com/google/gson/TypeUtilsTest.java,28, Unit tests for {@link TypeUtils}.
False,gson/src/test/java/com/google/gson/TypeUtilsTest.java,gson/src/test/java/com/google/gson/TypeUtilsTest.java,30, @author Inderjeet Singh
False,gson/src/test/java/com/google/gson/TypeUtilsTest.java,gson/src/test/java/com/google/gson/TypeUtilsTest.java,32,ublic class TypeUtilsTest extends TestCase {
False,gson/src/test/java/com/google/gson/TypeUtilsTest.java,gson/src/test/java/com/google/gson/TypeUtilsTest.java,33,"rivate static final Type MAP_TYPE = new TypeToken<Map<String, Integer>>() {}.getType();"
False,gson/src/test/java/com/google/gson/TypeUtilsTest.java,gson/src/test/java/com/google/gson/TypeUtilsTest.java,35,ublic void testGetActualTypeForFirstTypeVariable() {
False,gson/src/test/java/com/google/gson/TypeUtilsTest.java,gson/src/test/java/com/google/gson/TypeUtilsTest.java,36,"ssertEquals(String.class, TypeUtils.getActualTypeForFirstTypeVariable(MAP_TYPE));"
False,gson/src/test/java/com/google/gson/TypeUtilsTest.java,gson/src/test/java/com/google/gson/TypeUtilsTest.java,39,ublic void testIsArrayForNonArrayClasses() {
False,gson/src/test/java/com/google/gson/TypeUtilsTest.java,gson/src/test/java/com/google/gson/TypeUtilsTest.java,40,ssertFalse(TypeUtils.isArray(Boolean.class));
False,gson/src/test/java/com/google/gson/TypeUtilsTest.java,gson/src/test/java/com/google/gson/TypeUtilsTest.java,41,ssertFalse(TypeUtils.isArray(MAP_TYPE));
False,gson/src/test/java/com/google/gson/TypeUtilsTest.java,gson/src/test/java/com/google/gson/TypeUtilsTest.java,44,ublic void testIsArrayForArrayClasses() {
False,gson/src/test/java/com/google/gson/TypeUtilsTest.java,gson/src/test/java/com/google/gson/TypeUtilsTest.java,45,ssertTrue(TypeUtils.isArray(String[].class));
False,gson/src/test/java/com/google/gson/TypeUtilsTest.java,gson/src/test/java/com/google/gson/TypeUtilsTest.java,46,ssertTrue(TypeUtils.isArray(Integer[][].class));
False,gson/src/test/java/com/google/gson/TypeUtilsTest.java,gson/src/test/java/com/google/gson/TypeUtilsTest.java,47,ssertTrue(TypeUtils.isArray(Collection[].class));
False,gson/src/test/java/com/google/gson/TypeUtilsTest.java,gson/src/test/java/com/google/gson/TypeUtilsTest.java,50,ublic void testToRawClassForNonGenericClasses() {
False,gson/src/test/java/com/google/gson/TypeUtilsTest.java,gson/src/test/java/com/google/gson/TypeUtilsTest.java,51,"ssertEquals(String.class, TypeUtils.toRawClass(String.class));"
False,gson/src/test/java/com/google/gson/TypeUtilsTest.java,gson/src/test/java/com/google/gson/TypeUtilsTest.java,54,ublic void testToRawClassForGenericClasses() {
False,gson/src/test/java/com/google/gson/TypeUtilsTest.java,gson/src/test/java/com/google/gson/TypeUtilsTest.java,55,"ssertEquals(Map.class, TypeUtils.toRawClass(MAP_TYPE));"

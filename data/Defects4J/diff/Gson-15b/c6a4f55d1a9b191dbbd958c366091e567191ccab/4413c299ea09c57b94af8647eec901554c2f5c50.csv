is_addition,old_file_path,new_file_path,line_num,content
True,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,93,} else if (typeToEvaluate instanceof TypeVariable<?>) {
True,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,94,Type theSearchedType = null;
True,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,96,do {
True,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,97,"theSearchedType = extractTypeForHierarchy(parentType, (TypeVariable<?>) typeToEvaluate);"
True,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,98,} while ((theSearchedType != null) && (theSearchedType instanceof TypeVariable<?>));
True,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,100,if (theSearchedType != null) {
True,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,101,return theSearchedType;
False,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,95," "".\n Are you missing the use of TypeToken idiom?\n See """
True,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,106,"+ "".\n Are you missing the use of TypeToken idiom?\n See """
True,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,117,"private static Type extractTypeForHierarchy(Type parentType, TypeVariable<?> typeToEvaluate) {"
True,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,118,Class<?> rawParentType = null;
True,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,119,if (parentType instanceof Class<?>) {
True,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,120,rawParentType = (Class<?>) parentType;
True,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,121,} else if (parentType instanceof ParameterizedType) {
True,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,122,ParameterizedType parentTypeAsPT = (ParameterizedType) parentType;
True,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,123,rawParentType = (Class<?>) parentTypeAsPT.getRawType();
True,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,124,} else {
True,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,125,return null;
True,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,128,Type superClass = rawParentType.getGenericSuperclass();
True,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,129,if (superClass instanceof ParameterizedType
True,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,130,&& ((ParameterizedType) superClass).getRawType() == typeToEvaluate.getGenericDeclaration()) {
True,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,131,// Evaluate type on this type
True,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,132,TypeVariable<?>[] classTypeVariables =
True,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,133,((Class<?>) ((ParameterizedType) superClass).getRawType()).getTypeParameters();
True,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,134,"int indexOfActualTypeArgument = getIndex(classTypeVariables, typeToEvaluate);"
True,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,136,Type[] actualTypeArguments = null;
True,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,137,if (parentType instanceof Class<?>) {
True,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,138,actualTypeArguments = ((ParameterizedType) superClass).getActualTypeArguments();
True,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,139,} else if (parentType instanceof ParameterizedType) {
True,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,140,actualTypeArguments = ((ParameterizedType) parentType).getActualTypeArguments();
True,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,141,} else {
True,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,142,return null;
True,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,145,return actualTypeArguments[indexOfActualTypeArgument];
True,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,148,Type searchedType = null;
True,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,149,if (superClass != null) {
True,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,150,"searchedType = extractTypeForHierarchy(superClass, typeToEvaluate);"
True,gson/src/main/java/com/google/gson/TypeInfoFactory.java,gson/src/main/java/com/google/gson/TypeInfoFactory.java,152,return searchedType;
True,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,2,* Copyright (C) 2010 Google Inc.
True,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,5,* you may not use this file except in compliance with the License.
True,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,6,* You may obtain a copy of the License at
True,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,8,* http://www.apache.org/licenses/LICENSE-2.0
True,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,13,* See the License for the specific language governing permissions and
True,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,14,* limitations under the License.
True,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,16,package com.google.gson.functional;
True,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,18,import com.google.gson.Gson;
True,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,20,import junit.framework.TestCase;
True,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,22,import java.util.ArrayList;
True,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,23,import java.util.HashMap;
True,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,24,import java.util.List;
True,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,25,import java.util.Map;
True,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,28,* Functional test for Gson serialization and deserialization of
True,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,29,* @author Joel Leitch
True,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,31,public class TypeVariableTest extends TestCase {
True,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,33,public void testSingle() throws Exception {
True,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,34,Gson gson = new Gson();
True,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,35,"Bar bar1 = new Bar(""someString"", 1);"
True,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,36,ArrayList<Integer> arrayList = new ArrayList<Integer>();
True,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,37,arrayList.add(1);
True,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,38,arrayList.add(2);
True,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,39,"bar1.map.put(""key1"", arrayList);"
True,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,40,"bar1.map.put(""key2"", new ArrayList<Integer>());"
True,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,41,String json = gson.toJson(bar1);
True,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,42,System.out.println(json);
True,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,44,"Bar bar2 = gson.fromJson(json, Bar.class);"
True,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,45,"assertEquals(bar1, bar2);"
True,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,48,"public static class Foo<S, T> {"
True,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,49,private final S someSField;
True,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,50,private final T someTField;
True,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,51,"public final Map<S, List<T>> map = new HashMap<S, List<T>>();"
True,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,53,"public Foo(S sValue, T tValue) {"
True,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,54,this.someSField = sValue;
True,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,55,this.someTField = tValue;
True,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,58,@Override
True,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,59,public boolean equals(Object o) {
True,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,60,if (!(o instanceof Foo)) {
True,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,61,return false;
True,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,62,} else {
True,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,63,"Foo<S, T> realFoo = (Foo<S, T>) o;"
True,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,64,return someTField.equals(realFoo.someTField)
True,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,65,&& someSField.equals(realFoo.someSField)
True,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,66,&& map.equals(realFoo.map);
True,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,71,"public static class Bar extends Foo<String, Integer> {"
True,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,72,public Bar() {
True,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,73,"this("""", 0);"
True,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,76,"public Bar(String s, Integer i) {"
True,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,gson/src/test/java/com/google/gson/functional/TypeVariableTest.java,77,"super(s, i);"

is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/math/EmpiricalDistribution.java,src/java/org/apache/commons/math/EmpiricalDistribution.java,2,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/math/EmpiricalDistribution.java,src/java/org/apache/commons/math/EmpiricalDistribution.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/math/EmpiricalDistribution.java,src/java/org/apache/commons/math/EmpiricalDistribution.java,5,* reserved.
True,src/java/org/apache/commons/math/EmpiricalDistribution.java,src/java/org/apache/commons/math/EmpiricalDistribution.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/math/EmpiricalDistribution.java,src/java/org/apache/commons/math/EmpiricalDistribution.java,8,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/math/EmpiricalDistribution.java,src/java/org/apache/commons/math/EmpiricalDistribution.java,9,* are met:
True,src/java/org/apache/commons/math/EmpiricalDistribution.java,src/java/org/apache/commons/math/EmpiricalDistribution.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/math/EmpiricalDistribution.java,src/java/org/apache/commons/math/EmpiricalDistribution.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/math/EmpiricalDistribution.java,src/java/org/apache/commons/math/EmpiricalDistribution.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/math/EmpiricalDistribution.java,src/java/org/apache/commons/math/EmpiricalDistribution.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/math/EmpiricalDistribution.java,src/java/org/apache/commons/math/EmpiricalDistribution.java,16,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/math/EmpiricalDistribution.java,src/java/org/apache/commons/math/EmpiricalDistribution.java,17,*    distribution.
True,src/java/org/apache/commons/math/EmpiricalDistribution.java,src/java/org/apache/commons/math/EmpiricalDistribution.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/math/EmpiricalDistribution.java,src/java/org/apache/commons/math/EmpiricalDistribution.java,20,"*    any, must include the following acknowlegement:"
True,src/java/org/apache/commons/math/EmpiricalDistribution.java,src/java/org/apache/commons/math/EmpiricalDistribution.java,21,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/math/EmpiricalDistribution.java,src/java/org/apache/commons/math/EmpiricalDistribution.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/math/EmpiricalDistribution.java,src/java/org/apache/commons/math/EmpiricalDistribution.java,23,"*    Alternately, this acknowlegement may appear in the software itself,"
True,src/java/org/apache/commons/math/EmpiricalDistribution.java,src/java/org/apache/commons/math/EmpiricalDistribution.java,24,*    if and wherever such third-party acknowlegements normally appear.
True,src/java/org/apache/commons/math/EmpiricalDistribution.java,src/java/org/apache/commons/math/EmpiricalDistribution.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/math/EmpiricalDistribution.java,src/java/org/apache/commons/math/EmpiricalDistribution.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/math/EmpiricalDistribution.java,src/java/org/apache/commons/math/EmpiricalDistribution.java,28,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/math/EmpiricalDistribution.java,src/java/org/apache/commons/math/EmpiricalDistribution.java,29,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/math/EmpiricalDistribution.java,src/java/org/apache/commons/math/EmpiricalDistribution.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/math/EmpiricalDistribution.java,src/java/org/apache/commons/math/EmpiricalDistribution.java,32,"*    nor may ""Apache"" appear in their names without prior written"
True,src/java/org/apache/commons/math/EmpiricalDistribution.java,src/java/org/apache/commons/math/EmpiricalDistribution.java,33,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/math/EmpiricalDistribution.java,src/java/org/apache/commons/math/EmpiricalDistribution.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/math/EmpiricalDistribution.java,src/java/org/apache/commons/math/EmpiricalDistribution.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/math/EmpiricalDistribution.java,src/java/org/apache/commons/math/EmpiricalDistribution.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/math/EmpiricalDistribution.java,src/java/org/apache/commons/math/EmpiricalDistribution.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/math/EmpiricalDistribution.java,src/java/org/apache/commons/math/EmpiricalDistribution.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/math/EmpiricalDistribution.java,src/java/org/apache/commons/math/EmpiricalDistribution.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/math/EmpiricalDistribution.java,src/java/org/apache/commons/math/EmpiricalDistribution.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/math/EmpiricalDistribution.java,src/java/org/apache/commons/math/EmpiricalDistribution.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/math/EmpiricalDistribution.java,src/java/org/apache/commons/math/EmpiricalDistribution.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/math/EmpiricalDistribution.java,src/java/org/apache/commons/math/EmpiricalDistribution.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/math/EmpiricalDistribution.java,src/java/org/apache/commons/math/EmpiricalDistribution.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/math/EmpiricalDistribution.java,src/java/org/apache/commons/math/EmpiricalDistribution.java,46,* SUCH DAMAGE.
True,src/java/org/apache/commons/math/EmpiricalDistribution.java,src/java/org/apache/commons/math/EmpiricalDistribution.java,49,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/math/EmpiricalDistribution.java,src/java/org/apache/commons/math/EmpiricalDistribution.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/math/EmpiricalDistribution.java,src/java/org/apache/commons/math/EmpiricalDistribution.java,51,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/math/EmpiricalDistribution.java,src/java/org/apache/commons/math/EmpiricalDistribution.java,52,* <http://www.apache.org/>.
True,src/java/org/apache/commons/math/EmpiricalDistribution.java,src/java/org/apache/commons/math/EmpiricalDistribution.java,55,package org.apache.commons.math;
True,src/java/org/apache/commons/math/EmpiricalDistribution.java,src/java/org/apache/commons/math/EmpiricalDistribution.java,57,import java.io.IOException;
True,src/java/org/apache/commons/math/EmpiricalDistribution.java,src/java/org/apache/commons/math/EmpiricalDistribution.java,58,import java.io.File;
True,src/java/org/apache/commons/math/EmpiricalDistribution.java,src/java/org/apache/commons/math/EmpiricalDistribution.java,59,import java.util.ArrayList;
True,src/java/org/apache/commons/math/EmpiricalDistribution.java,src/java/org/apache/commons/math/EmpiricalDistribution.java,62,* Represents an <a href=http://random.mat.sbg.ac.at/~ste/dipl/node11.html>
True,src/java/org/apache/commons/math/EmpiricalDistribution.java,src/java/org/apache/commons/math/EmpiricalDistribution.java,63,* empirical probability distribution</a> -- a probability distribution derived
True,src/java/org/apache/commons/math/EmpiricalDistribution.java,src/java/org/apache/commons/math/EmpiricalDistribution.java,64,* from observed data without making any assumptions about the functional form
True,src/java/org/apache/commons/math/EmpiricalDistribution.java,src/java/org/apache/commons/math/EmpiricalDistribution.java,65,* of the population distribution that the data come from.<p>
True,src/java/org/apache/commons/math/EmpiricalDistribution.java,src/java/org/apache/commons/math/EmpiricalDistribution.java,66,"* Implementations of this interface maintain data structures, called"
True,src/java/org/apache/commons/math/EmpiricalDistribution.java,src/java/org/apache/commons/math/EmpiricalDistribution.java,67,"* <i>distribution digests</i>, that describe empirical distributions and"
True,src/java/org/apache/commons/math/EmpiricalDistribution.java,src/java/org/apache/commons/math/EmpiricalDistribution.java,68,* support the following operations: <ul>
True,src/java/org/apache/commons/math/EmpiricalDistribution.java,src/java/org/apache/commons/math/EmpiricalDistribution.java,69,* <li>loading the distribution from a file of observed data values</li>
True,src/java/org/apache/commons/math/EmpiricalDistribution.java,src/java/org/apache/commons/math/EmpiricalDistribution.java,70,"* <li>saving and re-loading distribution digests to/from ""digest files"" </li>"
True,src/java/org/apache/commons/math/EmpiricalDistribution.java,src/java/org/apache/commons/math/EmpiricalDistribution.java,71,"* <li>dividing the input data into ""bin ranges"" and reporting bin frequency"
True,src/java/org/apache/commons/math/EmpiricalDistribution.java,src/java/org/apache/commons/math/EmpiricalDistribution.java,72,*     counts (data for histogram)</li>
True,src/java/org/apache/commons/math/EmpiricalDistribution.java,src/java/org/apache/commons/math/EmpiricalDistribution.java,73,* <li>reporting univariate statistics describing the full set of data values
True,src/java/org/apache/commons/math/EmpiricalDistribution.java,src/java/org/apache/commons/math/EmpiricalDistribution.java,74,*     as well as the observations within each bin</li>
True,src/java/org/apache/commons/math/EmpiricalDistribution.java,src/java/org/apache/commons/math/EmpiricalDistribution.java,75,* <li>generating random values from the distribution</li>
True,src/java/org/apache/commons/math/EmpiricalDistribution.java,src/java/org/apache/commons/math/EmpiricalDistribution.java,76,* </ul>
True,src/java/org/apache/commons/math/EmpiricalDistribution.java,src/java/org/apache/commons/math/EmpiricalDistribution.java,77,* Applications can use <code>EmpiricalDistribution</code> implementations to
True,src/java/org/apache/commons/math/EmpiricalDistribution.java,src/java/org/apache/commons/math/EmpiricalDistribution.java,78,* build grouped frequnecy histograms representing the input data or to
True,src/java/org/apache/commons/math/EmpiricalDistribution.java,src/java/org/apache/commons/math/EmpiricalDistribution.java,79,"* generate random values ""like"" those in the input file -- i.e., the values"
True,src/java/org/apache/commons/math/EmpiricalDistribution.java,src/java/org/apache/commons/math/EmpiricalDistribution.java,80,* generated will follow the distribution of the values in the file.
True,src/java/org/apache/commons/math/EmpiricalDistribution.java,src/java/org/apache/commons/math/EmpiricalDistribution.java,81,* @author  Phil Steitz
True,src/java/org/apache/commons/math/EmpiricalDistribution.java,src/java/org/apache/commons/math/EmpiricalDistribution.java,82,* @version $Revision: 1.1 $
True,src/java/org/apache/commons/math/EmpiricalDistribution.java,src/java/org/apache/commons/math/EmpiricalDistribution.java,84,public interface EmpiricalDistribution {
True,src/java/org/apache/commons/math/EmpiricalDistribution.java,src/java/org/apache/commons/math/EmpiricalDistribution.java,87,* Computes the empirical distribution from the input file
True,src/java/org/apache/commons/math/EmpiricalDistribution.java,src/java/org/apache/commons/math/EmpiricalDistribution.java,88,* @param filePath fully qualified name of a file in the local file system
True,src/java/org/apache/commons/math/EmpiricalDistribution.java,src/java/org/apache/commons/math/EmpiricalDistribution.java,89,* @throws IOException if an IO error occurs
True,src/java/org/apache/commons/math/EmpiricalDistribution.java,src/java/org/apache/commons/math/EmpiricalDistribution.java,91,void load(String filePath) throws IOException;
True,src/java/org/apache/commons/math/EmpiricalDistribution.java,src/java/org/apache/commons/math/EmpiricalDistribution.java,94,* Computes the empirical distribution from the input file
True,src/java/org/apache/commons/math/EmpiricalDistribution.java,src/java/org/apache/commons/math/EmpiricalDistribution.java,95,* @param URL url of the input file
True,src/java/org/apache/commons/math/EmpiricalDistribution.java,src/java/org/apache/commons/math/EmpiricalDistribution.java,96,* @throws IOException if an IO error occurs
True,src/java/org/apache/commons/math/EmpiricalDistribution.java,src/java/org/apache/commons/math/EmpiricalDistribution.java,98,void load(File file) throws IOException;
True,src/java/org/apache/commons/math/EmpiricalDistribution.java,src/java/org/apache/commons/math/EmpiricalDistribution.java,101,* Generates a random value from this distribution<p>
True,src/java/org/apache/commons/math/EmpiricalDistribution.java,src/java/org/apache/commons/math/EmpiricalDistribution.java,102,* <strong>Preconditions:</strong><ul>
True,src/java/org/apache/commons/math/EmpiricalDistribution.java,src/java/org/apache/commons/math/EmpiricalDistribution.java,103,* <li>the distribution must be loaded before invoking this method</li></ul>
True,src/java/org/apache/commons/math/EmpiricalDistribution.java,src/java/org/apache/commons/math/EmpiricalDistribution.java,104,* @throws IllegalStateException if the distribution has not been loaded
True,src/java/org/apache/commons/math/EmpiricalDistribution.java,src/java/org/apache/commons/math/EmpiricalDistribution.java,106,double getNextValue() throws IllegalStateException;
True,src/java/org/apache/commons/math/EmpiricalDistribution.java,src/java/org/apache/commons/math/EmpiricalDistribution.java,110,* <p>Returns a Univariate describing this distribution</p>
True,src/java/org/apache/commons/math/EmpiricalDistribution.java,src/java/org/apache/commons/math/EmpiricalDistribution.java,111,* <strong>Preconditions:</strong><ul>
True,src/java/org/apache/commons/math/EmpiricalDistribution.java,src/java/org/apache/commons/math/EmpiricalDistribution.java,112,* <li>the distribution must be loaded before invoking this method</li></ul>
True,src/java/org/apache/commons/math/EmpiricalDistribution.java,src/java/org/apache/commons/math/EmpiricalDistribution.java,113,* @throws IllegalStateException if the distribution has not been loaded
True,src/java/org/apache/commons/math/EmpiricalDistribution.java,src/java/org/apache/commons/math/EmpiricalDistribution.java,115,Univariate getSampleStats();
True,src/java/org/apache/commons/math/EmpiricalDistribution.java,src/java/org/apache/commons/math/EmpiricalDistribution.java,118,* Loads a saved distribution from a file.
True,src/java/org/apache/commons/math/EmpiricalDistribution.java,src/java/org/apache/commons/math/EmpiricalDistribution.java,119,* @param file File reference for a file containing a digested distribution
True,src/java/org/apache/commons/math/EmpiricalDistribution.java,src/java/org/apache/commons/math/EmpiricalDistribution.java,120,* @throws IOException if an error occurs reading the file
True,src/java/org/apache/commons/math/EmpiricalDistribution.java,src/java/org/apache/commons/math/EmpiricalDistribution.java,122,void loadDistribution(File file) throws IOException;
True,src/java/org/apache/commons/math/EmpiricalDistribution.java,src/java/org/apache/commons/math/EmpiricalDistribution.java,125,* Loads a saved distribution from a file.
True,src/java/org/apache/commons/math/EmpiricalDistribution.java,src/java/org/apache/commons/math/EmpiricalDistribution.java,126,* @param filePath fully qualified file path for a file
True,src/java/org/apache/commons/math/EmpiricalDistribution.java,src/java/org/apache/commons/math/EmpiricalDistribution.java,127,* containing a digested distribution
True,src/java/org/apache/commons/math/EmpiricalDistribution.java,src/java/org/apache/commons/math/EmpiricalDistribution.java,128,* @throws IOException if an error occurs reading the file
True,src/java/org/apache/commons/math/EmpiricalDistribution.java,src/java/org/apache/commons/math/EmpiricalDistribution.java,130,void loadDistribution(String filePath) throws IOException;
True,src/java/org/apache/commons/math/EmpiricalDistribution.java,src/java/org/apache/commons/math/EmpiricalDistribution.java,133,* Saves distribution to a file. Overwrites the file if it exists.
True,src/java/org/apache/commons/math/EmpiricalDistribution.java,src/java/org/apache/commons/math/EmpiricalDistribution.java,134,* <strong>Preconditions:</strong><ul>
True,src/java/org/apache/commons/math/EmpiricalDistribution.java,src/java/org/apache/commons/math/EmpiricalDistribution.java,135,* <li>the distribution must be loaded before invoking this method</li></ul>
True,src/java/org/apache/commons/math/EmpiricalDistribution.java,src/java/org/apache/commons/math/EmpiricalDistribution.java,136,* @param fully qualified file path for the file to be written
True,src/java/org/apache/commons/math/EmpiricalDistribution.java,src/java/org/apache/commons/math/EmpiricalDistribution.java,137,* @throws IOException if an error occurs reading the file
True,src/java/org/apache/commons/math/EmpiricalDistribution.java,src/java/org/apache/commons/math/EmpiricalDistribution.java,138,* @throws IllegalStateException if the distribution has not been loaded
True,src/java/org/apache/commons/math/EmpiricalDistribution.java,src/java/org/apache/commons/math/EmpiricalDistribution.java,140,void saveDistribution(String filePath) throws
True,src/java/org/apache/commons/math/EmpiricalDistribution.java,src/java/org/apache/commons/math/EmpiricalDistribution.java,141,"IOException,IllegalStateException;"
True,src/java/org/apache/commons/math/EmpiricalDistribution.java,src/java/org/apache/commons/math/EmpiricalDistribution.java,144,* Saves distribution to a file. Overwrites the file if it exists.
True,src/java/org/apache/commons/math/EmpiricalDistribution.java,src/java/org/apache/commons/math/EmpiricalDistribution.java,145,* <strong>Preconditions:</strong><ul>
True,src/java/org/apache/commons/math/EmpiricalDistribution.java,src/java/org/apache/commons/math/EmpiricalDistribution.java,146,* <li>the distribution must be loaded before invoking this method</li></ul>
True,src/java/org/apache/commons/math/EmpiricalDistribution.java,src/java/org/apache/commons/math/EmpiricalDistribution.java,147,* @param file File reference for the file to be written
True,src/java/org/apache/commons/math/EmpiricalDistribution.java,src/java/org/apache/commons/math/EmpiricalDistribution.java,148,* @throws IOException if an error occurs reading the file
True,src/java/org/apache/commons/math/EmpiricalDistribution.java,src/java/org/apache/commons/math/EmpiricalDistribution.java,149,* @throws IllegalStateException if the distribution has not been loaded
True,src/java/org/apache/commons/math/EmpiricalDistribution.java,src/java/org/apache/commons/math/EmpiricalDistribution.java,151,"void saveDistribution(File file) throws IOException,IllegalStateException;"
True,src/java/org/apache/commons/math/EmpiricalDistribution.java,src/java/org/apache/commons/math/EmpiricalDistribution.java,154,* property indicating whether or not the distribution has been loaded
True,src/java/org/apache/commons/math/EmpiricalDistribution.java,src/java/org/apache/commons/math/EmpiricalDistribution.java,155,* @return true if the distribution has been loaded
True,src/java/org/apache/commons/math/EmpiricalDistribution.java,src/java/org/apache/commons/math/EmpiricalDistribution.java,157,boolean isLoaded();
True,src/java/org/apache/commons/math/EmpiricalDistribution.java,src/java/org/apache/commons/math/EmpiricalDistribution.java,160,* Returns the number of bins
True,src/java/org/apache/commons/math/EmpiricalDistribution.java,src/java/org/apache/commons/math/EmpiricalDistribution.java,161,* @return the number of bins.
True,src/java/org/apache/commons/math/EmpiricalDistribution.java,src/java/org/apache/commons/math/EmpiricalDistribution.java,163,int getBinCount();
True,src/java/org/apache/commons/math/EmpiricalDistribution.java,src/java/org/apache/commons/math/EmpiricalDistribution.java,166,* Returns a list of Univariates containing statistics describing the
True,src/java/org/apache/commons/math/EmpiricalDistribution.java,src/java/org/apache/commons/math/EmpiricalDistribution.java,167,* values in each of the bins.  The ArrayList is indexed on the bin number.
True,src/java/org/apache/commons/math/EmpiricalDistribution.java,src/java/org/apache/commons/math/EmpiricalDistribution.java,168,* @return ArrayList of bin statistics.
True,src/java/org/apache/commons/math/EmpiricalDistribution.java,src/java/org/apache/commons/math/EmpiricalDistribution.java,170,ArrayList getBinStats();
True,src/java/org/apache/commons/math/EmpiricalDistribution.java,src/java/org/apache/commons/math/EmpiricalDistribution.java,173,* Returns the array of upper bounds for the bins.  Bins are: <br>
True,src/java/org/apache/commons/math/EmpiricalDistribution.java,src/java/org/apache/commons/math/EmpiricalDistribution.java,174,"* [min,upperBounds[0]],(upperBounds[0],upperBounds[1]],...,"
True,src/java/org/apache/commons/math/EmpiricalDistribution.java,src/java/org/apache/commons/math/EmpiricalDistribution.java,175,"*  (upperBounds[binCount-1],max]"
True,src/java/org/apache/commons/math/EmpiricalDistribution.java,src/java/org/apache/commons/math/EmpiricalDistribution.java,176,* @return array of bin upper bounds
True,src/java/org/apache/commons/math/EmpiricalDistribution.java,src/java/org/apache/commons/math/EmpiricalDistribution.java,178,double[] getUpperBounds();
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,2,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,5,* reserved.
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,8,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,9,* are met:
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,16,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,17,*    distribution.
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,20,"*    any, must include the following acknowlegement:"
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,21,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,23,"*    Alternately, this acknowlegement may appear in the software itself,"
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,24,*    if and wherever such third-party acknowlegements normally appear.
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,28,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,29,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,32,"*    nor may ""Apache"" appear in their names without prior written"
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,33,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,46,* SUCH DAMAGE.
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,49,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,51,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,52,* <http://www.apache.org/>.
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,55,package org.apache.commons.math;
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,57,import java.util.ArrayList;
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,58,import java.io.Serializable;
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,59,import java.io.BufferedReader;
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,60,import java.io.FileReader;
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,61,import java.io.File;
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,62,import java.io.IOException;
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,65,* Implements <code>EmpiricalDistribution</code> interface using
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,66,* what amounts to the
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,67,* <a href=http://nedwww.ipac.caltech.edu/level5/March02/Silverman/Silver2_6.html>
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,68,* Variable Kernel Method</a> with Gaussian smoothing:<p>
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,69,* <strong>Digesting the input file</strong>
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,70,* <ol><li>Pass the file once to compute min and max.</li>
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,71,"* <li>Divide the range from min-max into <code>binCount</code> ""bins.""</li>"
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,72,"* <li>Pass the data file again, computing bin counts and univariate"
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,73,"*     statistics (mean, std dev.) for each of the bins </li>"
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,74,"* <li>Divide the interval (0,1) into subintervals associated with the bins,"
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,75,*     with the length of a bin's subinterval proportional to its count.</li></ol>
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,76,* <strong>Generating random values from the distribution</strong><ol>
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,77,"* <li>Generate a uniformly distributed value in (0,1) </li>"
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,78,* <li>Select the subinterval to which the value belongs.
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,79,* <li>Generate a random Gaussian value with mean = mean of the associated
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,80,*     bin and std dev = std dev of associated bin.</li></ol></p><p>
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,81,*<strong>USAGE NOTES:</strong><ul>
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,82,*<li>The <code>binCount</code> is set by default to 1000.  A good rule of thumb
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,83,*    is to set the bin count to approximately the length of the input file divided
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,84,*    by 10.  See TODO: add reference </li>
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,85,*<li>The input file <i>must</i> be a plain text file containing one valid numeric
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,86,*    entry per line.</li>
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,87,* </ol></p>
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,89,* @author  Phil Steitz
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,90,* @version $Revision: 1.1 $
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,92,"public class EmpiricalDistributionImpl implements Serializable,EmpiricalDistribution {"
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,95,/** List of Univariate objects characterizing the bins */
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,96,private ArrayList binStats = null;
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,98,/** Sample statistics */
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,99,Univariate sampleStats = null;
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,101,/** number of bins */
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,102,private int binCount = 1000;
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,104,/** is the distribution loaded? */
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,105,private boolean loaded = false;
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,107,"/** upper bounds of subintervals in (0,1) ""belonging"" to the bins */"
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,108,private double[] upperBounds = null;
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,111,* Creates a new EmpiricalDistribution  with the default bin count
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,113,public EmpiricalDistributionImpl() {
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,114,binStats = new ArrayList();
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,118,* Creates a new EmpiricalDistribution  with the specified bin count
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,119,* @param binCount number of bins
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,121,public EmpiricalDistributionImpl(int binCount) {
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,122,this.binCount = binCount;
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,123,binStats = new ArrayList();
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,127,public void load(String filePath) throws IOException {
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,128,File file = new File(filePath);
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,129,load(file);
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,133,public void load(File file) throws IOException {
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,134,// Pass the file once to get sample stats
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,135,BufferedReader in = null;
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,136,try {
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,137,in = new BufferedReader(new FileReader(file));
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,138,String str = null;
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,139,double val = 0.0;
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,140,sampleStats = new UnivariateImpl();
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,141,while ((str = in.readLine()) != null) {
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,142,val = new Double(str).doubleValue();
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,143,sampleStats.addValue(val);
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,145,in.close();
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,146,in = null;
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,147,} finally {
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,148,if (in != null) try {in.close();} catch (Exception ex) {};
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,151,// Load array of bin upper bounds -- evenly spaced from min - max
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,152,double min = sampleStats.getMin();
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,153,double max = sampleStats.getMax();
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,154,double delta = (max - min)/(new Double(binCount)).doubleValue();
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,155,double[] binUpperBounds = new double[binCount];
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,156,binUpperBounds[0] = min + delta;
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,157,for (int i = 1; i< binCount - 1; i++) {
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,158,binUpperBounds[i] = binUpperBounds[i-1] + delta;
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,160,binUpperBounds[binCount -1] = max;
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,162,// Initialize binStats ArrayList
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,163,if (!binStats.isEmpty()) {
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,164,binStats.clear();
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,166,for (int i = 0; i < binCount; i++) {
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,167,Univariate stats = new UnivariateImpl();
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,168,"binStats.add(i,stats);"
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,171,"// Pass the data again, filling data in binStats Array"
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,172,try {
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,173,in = new BufferedReader(new FileReader(file));
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,174,String str = null;
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,175,double val = 0.0d;
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,176,while ((str = in.readLine()) != null) {
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,177,val = new Double(str).doubleValue();
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,179,// Find bin and add value to binStats for the bin
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,180,boolean found = false;
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,181,int i = 0;
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,182,while (!found) {
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,183,if (i >= binCount) {
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,184,"throw new RuntimeException(""bin alignment error"");"
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,186,if (val <= binUpperBounds[i]) {
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,187,found = true;
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,188,Univariate stats = (Univariate)binStats.get(i);
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,189,stats.addValue(val);
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,191,i++;
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,194,in.close();
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,195,in = null;
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,196,} finally {
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,197,if (in != null) try {in.close();} catch (Exception ex) {};
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,200,// Assign upperBounds based on bin counts
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,201,upperBounds = new double[binCount];
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,202,upperBounds[0] =
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,203,(((Univariate)binStats.get(0)).getN())/sampleStats.getN();
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,204,for (int i = 1; i < binCount-1; i++) {
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,205,upperBounds[i] = upperBounds[i-1] +
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,206,(((Univariate)binStats.get(i)).getN())/sampleStats.getN();
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,208,upperBounds[binCount-1] = 1.0d;
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,210,loaded = true;
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,213,/** Generates a random value from this distribution */
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,214,public double getNextValue() throws IllegalStateException {
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,216,if (!loaded) {
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,217,"throw new IllegalStateException(""distribution not loaded"");"
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,220,"// Start with a uniformly distributed random number in (0,1)"
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,221,double x = Math.random();
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,223,// Use this to select the bin and generate a Gaussian within the bin
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,224,RandomData rd = new RandomDataImpl();
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,225,for (int i = 0; i < binCount; i++) {
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,226,if (x <= upperBounds[i]) {
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,227,Univariate stats = (Univariate)binStats.get(i);
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,228,"if (stats.getN() > 0.5) { // really mean > 0, but avoid fp error"
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,229,if (stats.getStandardDeviation() > 0) {  // more than one obs
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,230,return rd.nextGaussian
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,231,"(stats.getMean(),stats.getStandardDeviation());"
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,232,} else {
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,233,return stats.getMean(); // only one obs in bin
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,238,"throw new RuntimeException(""No bin selected"");"
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,241,public void loadDistribution(String filePath) throws IOException {
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,242,"throw new UnsupportedOperationException(""Not Implemented yet :-("");"
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,245,public void loadDistribution(File file) throws IOException {
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,246,"throw new UnsupportedOperationException(""Not Implemented yet :-("");"
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,249,public void saveDistribution(String filePath) throws
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,250,"IOException,IllegalStateException {"
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,251,"throw new UnsupportedOperationException(""Not Implemented yet :-("");"
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,254,public void saveDistribution(File file) throws
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,255,"IOException,IllegalStateException {"
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,256,"throw new UnsupportedOperationException(""Not Implemented yet :-("");"
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,259,public Univariate getSampleStats() {
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,260,return sampleStats;
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,263,public int getBinCount() {
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,264,return binCount;
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,267,public ArrayList getBinStats() {
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,268,return binStats;
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,271,public double[] getUpperBounds() {
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,272,return upperBounds;
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,275,public boolean isLoaded() {
True,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/EmpiricalDistributionImpl.java,276,return loaded;
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,2,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,5,* reserved.
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,8,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,9,* are met:
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,16,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,17,*    distribution.
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,20,"*    any, must include the following acknowlegement:"
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,21,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,23,"*    Alternately, this acknowlegement may appear in the software itself,"
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,24,*    if and wherever such third-party acknowlegements normally appear.
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,28,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,29,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,32,"*    nor may ""Apache"" appear in their names without prior written"
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,33,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,46,* SUCH DAMAGE.
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,49,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,51,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,52,* <http://www.apache.org/>.
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,55,package org.apache.commons.math;
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,56,import java.io.BufferedReader;
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,57,import java.io.FileReader;
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,58,import java.io.File;
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,59,import java.net.URL;
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,60,import java.io.IOException;
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,61,import java.net.MalformedURLException;
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,64,* Generates values for use in simulation applications.<br>
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,65,* How values are generated is determined by the <code>mode</code>
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,66,* property. <p>
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,67,* Supported <code>mode</code> values are: <ul>
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,68,* <li> DIGEST_MODE -- uses an empirical distribution </li>
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,69,* <li> REPLAY_MODE -- replays data from <code>valuesFile</code></li>
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,70,* <li> UNIFORM_MODE -- generates uniformly distributed random values with
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,71,*                      mean = <code>mu</code> </li>
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,72,* <li> EXPONENTIAL_MODE -- generates exponentially distributed random values
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,73,*                         with mean = <code>mu</code></li>
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,74,* <li> GAUSSIAN_MODE -- generates Gaussian distributed random values with
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,75,*                       mean = <code>mu</code> and
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,76,*                       standard deviation = <code>sigma</code></li>
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,77,* <li> CONSTANT_MODE -- returns <code>mu</code> every time.</li></ul>
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,79,* @author  Phil Steitz
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,80,* @version $Revision: 1.1 $
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,83,public class ValueServer {
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,84,/** mode determines how values are generated */
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,85,private int mode = 5;
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,87,/** URI to raw data values  */
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,88,private URL valuesFileURL = null;
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,90,/** Mean for use with non-data-driven modes */
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,91,private double mu = 0.0;
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,93,/** Standard deviation for use with GAUSSIAN_MODE */
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,94,private double sigma = 0.0;
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,96,/** Empirical probability distribution for use with DIGEST_MODE */
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,97,private EmpiricalDistribution empiricalDistribution = null;
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,99,/** file pointer for REPLAY_MODE */
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,100,private BufferedReader filePointer = null;
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,102,/** RandomDataImpl to use for random data generation */
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,103,private RandomDataImpl randomData = new RandomDataImpl();
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,105,// Data generation modes ======================================
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,107,/** Use empirical distribution  */
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,108,public static final int DIGEST_MODE = 0;
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,110,/** Replay data from valuesFilePath */
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,111,public static final int REPLAY_MODE = 1;
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,113,/** Uniform random variates with mean = mu */
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,114,public static final int UNIFORM_MODE = 2;
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,116,/** Exponential random variates with mean = mu */
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,117,public static final int EXPONENTIAL_MODE = 3;
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,119,"/** Gaussian random variates with mean = mu, std dev = sigma */"
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,120,public static final int GAUSSIAN_MODE = 4;
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,122,/** Always return mu */
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,123,public static final int CONSTANT_MODE = 5;
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,125,/** Creates new ValueServer */
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,126,public ValueServer() {
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,130,"* Returns the next generated value, generated according"
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,131,* to the mode value (see MODE constants)
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,133,* @return generated value
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,134,* @throws IOException in REPLAY_MODE if file I/O error occurs
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,136,public double getNext() throws IOException {
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,137,switch (mode) {
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,138,case DIGEST_MODE: return getNextDigest();
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,139,case REPLAY_MODE: return getNextReplay();
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,140,case UNIFORM_MODE: return getNextUniform();
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,141,case EXPONENTIAL_MODE: return getNextExponential();
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,142,case GAUSSIAN_MODE: return getNextGaussian();
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,143,case CONSTANT_MODE: return mu;
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,144,default: throw new IllegalStateException
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,145,"(""Bad mode: "" + mode);"
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,150,* Computes the empirical distribution using values from file
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,151,"* in <code>valuesFilePath</code>, using the default number of bins."
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,152,* <p>
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,153,* <code>valuesFileURL</code> must exist and be
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,154,* readable by *this at runtime.
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,155,* <p>
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,156,* This method must be called before using <code>getNext()</code>
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,157,* with <code>mode = DISGEST_MODE</code>
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,159,* @throws IOException if an I/O error occurs reading the input file
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,161,public void computeDistribution() throws IOException {
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,162,empiricalDistribution = new EmpiricalDistributionImpl();
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,163,empiricalDistribution.load(valuesFileURL.getFile());
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,167,* Computes the empirical distribution using values from the file
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,168,* in <code>valuesFilePath</code> and <code>binCount</code> bins.
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,169,* <p>
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,170,* <code>valuesFileURL</code> must exist and be
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,171,* readable by *this at runtime.
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,172,* <p>
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,173,* This method must be called before using <code>getNext()</code>
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,174,* with <code>mode = DISGEST_MODE</code>
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,176,* @throws IOException if an error occurs reading the input file
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,178,public void computeDistribution(int binCount)
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,179,throws IOException{
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,180,empiricalDistribution = new EmpiricalDistributionImpl(binCount);
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,181,empiricalDistribution.load(valuesFileURL.getFile());
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,182,mu = empiricalDistribution.getSampleStats().getMean();
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,183,sigma = empiricalDistribution.getSampleStats().getStandardDeviation();
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,187,* Gets a random value in DIGEST_MODE.
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,188,* <p>
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,189,* <strong>Preconditions</strong>: <ul>
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,190,"* <li>Before this method is called, <code>computeDistribution()</code>"
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,191,* must have completed successfully; otherwise an
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,192,* <code>IllegalStateException</code> will be thrown</li></ul>
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,194,* @return next random value form the empirical distribution digest
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,196,private double getNextDigest() {
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,197,if ((empiricalDistribution == null) ||
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,198,(empiricalDistribution.getBinStats().size() == 0)) {
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,199,"throw new IllegalStateException(""Digest not initialized"");"
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,201,return empiricalDistribution.getNextValue();
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,205,* Gets next sequential value from the <code>valuesFilePath</code>
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,206,* opened by <code>openReplayFile()</code>.
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,207,* <p>
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,208,* Throws an IOException if <code>filePointer</code> is null or read fails.
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,209,* Will wrap around to BOF is EOF is encountered.
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,210,* <p>
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,211,* <strong>Preconditions</strong>: <ul>
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,212,* <li> openReplayfile() must have completed successfully before
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,213,* invoking this method; otherwise an <code>IlleglaStateException</code>
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,214,* will be thrown</li></ul>
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,216,* @return next value from the replay file
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,217,* @throws IOException if there is a problem reading from the file
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,219,private double getNextReplay() throws IOException{
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,220,String str = null;
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,221,if (filePointer == null) {
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,222,"throw new IllegalStateException(""replay file not open"");"
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,224,if ((str = filePointer.readLine()) == null) {
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,225,closeReplayFile();
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,226,openReplayFile();
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,227,str = filePointer.readLine();
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,229,return new Double(str).doubleValue();
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,233,* Gets a uniformly distributed random value with mean = mu
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,235,* @return random uniform value
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,237,private double getNextUniform() {
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,238,return 2.0*mu*Math.random();
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,242,* Gets an exponentially distributed random value with mean = mu
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,244,* @return random exponential value
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,246,private double getNextExponential() {
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,247,return randomData.nextExponential(mu);
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,251,* Gets a Gaussian distributed random value with mean = mu
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,252,* and standard deviation = sigma
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,254,* @return random Gaussian value
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,256,private double getNextGaussian() {
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,257,"return randomData.nextGaussian(mu,sigma);"
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,260,/** Getter for property mode.
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,261,* @return Value of property mode.
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,263,public int getMode() {
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,264,return mode;
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,267,/** Setter for property mode.
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,268,* @param mode New value of property mode.
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,270,public void setMode(int mode) {
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,271,this.mode = mode;
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,274,/** Getter for property valuesFilePath.
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,275,* @return Value of property valuesFilePath.
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,277,public String getValuesFileURL() {
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,278,return valuesFileURL.toString();
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,281,/** Setter for property valuesFilePath.
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,282,* @param valuesFilePath New value of property valuesFilePath.
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,284,public void setValuesFileURL(String URL) throws MalformedURLException {
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,285,this.valuesFileURL = new URL(URL);
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,288,/** Getter for property empiricalDistribution.
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,289,* @return Value of property empiricalDistribution.
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,291,public EmpiricalDistribution getEmpiricalDistribution() {
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,292,return empiricalDistribution;
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,296,* Opens <code>valuesFilePath</code> to use in REPLAY_MODE
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,298,* @throws IOException if an error occurs opening the file
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,300,public void openReplayFile() throws IOException {
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,301,filePointer = new BufferedReader(new FileReader
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,302,(new File(valuesFileURL.getFile())));
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,306,* Closes <code>valuesFilePath</code> after use in REPLAY_MODE
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,308,* @throws IOException if an error occurs closing the file
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,310,public void closeReplayFile() throws IOException {
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,311,if (filePointer != null) {
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,312,filePointer.close();
True,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,2,"* The Apache Software License, Version 1.1"
True,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,5,* reserved.
True,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,8,"* modification, are permitted provided that the following conditions"
True,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,9,* are met:
True,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,16,*    the documentation and/or other materials provided with the
True,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,17,*    distribution.
True,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,20,"*    any, must include the following acknowlegement:"
True,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,21,"*       ""This product includes software developed by the"
True,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,23,"*    Alternately, this acknowlegement may appear in the software itself,"
True,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,24,*    if and wherever such third-party acknowlegements normally appear.
True,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,28,*    from this software without prior written permission. For written
True,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,29,"*    permission, please contact apache@apache.org."
True,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,32,"*    nor may ""Apache"" appear in their names without prior written"
True,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,33,*    permission of the Apache Software Foundation.
True,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,46,* SUCH DAMAGE.
True,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,49,* This software consists of voluntary contributions made by many
True,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,51,"* information on the Apache Software Foundation, please see"
True,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,52,* <http://www.apache.org/>.
True,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,54,package org.apache.commons.math;
True,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,56,import junit.framework.Test;
True,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,57,import junit.framework.TestCase;
True,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,58,import junit.framework.TestSuite;
True,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,59,import junit.framework.AssertionFailedError;
True,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,60,import java.io.File;
True,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,61,import java.net.URL;
True,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,64,* Test cases for the EmpiricalDistribution class
True,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,66,* @author Phil Steitz
True,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,67,* @version $Revision: 1.1 $ $Date: 2003/05/21 14:21:15 $
True,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,70,public final class EmpiricalDistributionTest extends TestCase {
True,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,72,private EmpiricalDistribution empiricalDistribution = null;
True,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,73,private File file = null;
True,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,75,public EmpiricalDistributionTest(String name) {
True,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,76,super(name);
True,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,79,public void setUp() {
True,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,80,empiricalDistribution = new EmpiricalDistributionImpl(100);
True,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,81,"URL url = getClass().getResource(""testData.txt"");"
True,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,82,file = new File(url.getFile());
True,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,85,public static Test suite() {
True,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,86,TestSuite suite = new TestSuite(EmpiricalDistributionTest.class);
True,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,87,"suite.setName(""EmpiricalDistribution Tests"");"
True,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,88,return suite;
True,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,92,* Test EmpiricalDistrbution.load() using sample data file.<br>
True,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,93,"* Check that the sampleCount, mu and sigma match data in"
True,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,94,* the sample data file.
True,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,96,public void testLoad() throws Exception {
True,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,97,empiricalDistribution.load(file);
True,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,98,"// testData File has 10000 values, with mean ~ 5.0, std dev ~ 1"
True,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,99,// Make sure that loaded distribution matches this
True,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,100,"assertEquals(empiricalDistribution.getSampleStats().getN(),1000,10E-7);"
True,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,101,//TODO: replace with statistical tests
True,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,102,assertEquals
True,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,103,"(empiricalDistribution.getSampleStats().getMean(),"
True,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,104,"5.069831575018909,10E-7);"
True,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,105,assertEquals
True,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,106,"(empiricalDistribution.getSampleStats().getStandardDeviation(),"
True,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,107,"1.0173699343977738,10E-7);"
True,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,111,* Generate 1000 random values and make sure they look OK.<br>
True,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,112,* Note that there is a non-zero (but very small) probability that
True,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,113,* these tests will fail even if the code is working as designed.
True,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,115,public void testNext() throws Exception {
True,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,116,tstGen(0.1);
True,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,120,* Make sure exception thrown if digest getNext is attempted
True,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,121,* before loading empiricalDistribution.
True,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,123,public void testNexFail() {
True,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,124,try {
True,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,125,empiricalDistribution.getNextValue();
True,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,126,"fail(""Expecting IllegalStateException"");"
True,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,127,} catch (IllegalStateException ex) {;}
True,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,131,* Make sure we can handle a grid size that is too fine
True,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,133,public void testGridTooFine() throws Exception {
True,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,134,empiricalDistribution = new EmpiricalDistributionImpl(10000);
True,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,135,tstGen(0.1);
True,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,139,* How about too fat?
True,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,141,public void testGridTooFat() throws Exception {
True,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,142,empiricalDistribution = new EmpiricalDistributionImpl(1);
True,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,143,tstGen(5); // ridiculous tolerance; but ridiculous grid size
True,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,144,// really just checking to make sure we do not bomb
True,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,147,private void tstGen(double tolerance)throws Exception {
True,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,148,empiricalDistribution.load(file);
True,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,149,Univariate stats = new UnivariateImpl();
True,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,150,for (int i = 1; i < 1000; i++) {
True,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,151,stats.addValue(empiricalDistribution.getNextValue());
True,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,153,//TODO: replace these with statistical tests -- refactor as necessary
True,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,154,"assertEquals(""mean"", stats.getMean(),5.069831575018909,tolerance);"
True,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,155,assertEquals
True,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,src/test/org/apache/commons/math/EmpiricalDistributionTest.java,156,"(""std dev"", stats.getStandardDeviation(),1.0173699343977738,tolerance);"
True,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,2,"* The Apache Software License, Version 1.1"
True,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,5,* reserved.
True,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,8,"* modification, are permitted provided that the following conditions"
True,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,9,* are met:
True,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,16,*    the documentation and/or other materials provided with the
True,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,17,*    distribution.
True,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,20,"*    any, must include the following acknowlegement:"
True,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,21,"*       ""This product includes software developed by the"
True,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,23,"*    Alternately, this acknowlegement may appear in the software itself,"
True,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,24,*    if and wherever such third-party acknowlegements normally appear.
True,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,28,*    from this software without prior written permission. For written
True,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,29,"*    permission, please contact apache@apache.org."
True,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,32,"*    nor may ""Apache"" appear in their names without prior written"
True,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,33,*    permission of the Apache Software Foundation.
True,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,46,* SUCH DAMAGE.
True,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,49,* This software consists of voluntary contributions made by many
True,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,51,"* information on the Apache Software Foundation, please see"
True,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,52,* <http://www.apache.org/>.
True,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,54,package org.apache.commons.math;
True,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,56,import junit.framework.Test;
True,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,57,import junit.framework.TestCase;
True,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,58,import junit.framework.TestSuite;
True,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,59,import junit.framework.AssertionFailedError;
True,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,60,import java.net.URL;
True,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,63,* Test cases for the ValueServer class.
True,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,65,* @author  Phil Steitz
True,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,66,* @version $Revision: 1.1 $
True,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,69,public final class ValueServerTest extends TestCase {
True,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,71,private ValueServer vs = new ValueServer();
True,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,73,public ValueServerTest(String name) {
True,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,74,super(name);
True,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,77,public void setUp() {
True,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,78,vs.setMode(ValueServer.DIGEST_MODE);
True,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,79,try {
True,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,80,"URL url = getClass().getResource(""testData.txt"");"
True,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,81,vs.setValuesFileURL(url.toExternalForm());
True,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,82,} catch (Exception ex) {
True,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,83,"fail(""malformed test URL"");"
True,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,87,public static Test suite() {
True,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,88,TestSuite suite = new TestSuite(ValueServerTest.class);
True,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,89,"suite.setName(""ValueServer Tests"");"
True,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,90,return suite;
True,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,95,* Generate 1000 random values and make sure they look OK.<br>
True,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,96,* Note that there is a non-zero (but very small) probability that
True,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,97,* these tests will fail even if the code is working as designed.
True,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,99,public void testNextDigest() throws Exception{
True,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,100,double next = 0.0;
True,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,101,double tolerance = 0.1;
True,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,102,vs.computeDistribution();
True,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,103,Univariate stats = new UnivariateImpl();
True,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,104,for (int i = 1; i < 1000; i++) {
True,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,105,next = vs.getNext();
True,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,106,stats.addValue(next);
True,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,108,"assertEquals(""mean"", stats.getMean(),5.069831575018909,tolerance);"
True,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,109,assertEquals
True,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,110,"(""std dev"", stats.getStandardDeviation(),1.0173699343977738,tolerance);"
True,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,114,* Make sure exception thrown if digest getNext is attempted
True,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,115,* before loading empiricalDistribution.
True,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,117,public void testNextDigestFail() throws Exception {
True,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,118,try {
True,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,119,vs.getNext();
True,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,120,"fail(""Expecting IllegalStateException"");"
True,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,121,} catch (IllegalStateException ex) {;}
True,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,125,* Make sure exception thrown if nextReplay() is attempted
True,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,126,* before opening replay file.
True,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,128,public void testNextReplayFail() throws Exception {
True,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,129,try {
True,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,130,vs.setMode(ValueServer.REPLAY_MODE);
True,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,131,vs.getNext();
True,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,132,"fail(""Expecting IllegalStateException"");"
True,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,133,} catch (IllegalStateException ex) {;}
True,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,137,* Test ValueServer REPLAY_MODE using values in testData file.<br>
True,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,138,"* Check that the values 1,2,1001,1002 match data file values 1 and 2."
True,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,139,* the sample data file.
True,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,141,public void testReplay() throws Exception {
True,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,142,double firstDataValue = 4.038625496201205;
True,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,143,double secondDataValue = 3.6485326248346936;
True,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,144,double tolerance = 10E-15;
True,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,145,double compareValue = 0.0d;
True,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,146,vs.setMode(ValueServer.REPLAY_MODE);
True,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,147,vs.openReplayFile();
True,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,148,compareValue = vs.getNext();
True,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,149,"assertEquals(compareValue,firstDataValue,tolerance);"
True,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,150,compareValue = vs.getNext();
True,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,151,"assertEquals(compareValue,secondDataValue,tolerance);"
True,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,152,for (int i = 3; i < 1001; i++) {
True,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,153,compareValue = vs.getNext();
True,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,155,compareValue = vs.getNext();
True,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,156,"assertEquals(compareValue,firstDataValue,tolerance);"
True,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,157,compareValue = vs.getNext();
True,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,158,"assertEquals(compareValue,secondDataValue,tolerance);"

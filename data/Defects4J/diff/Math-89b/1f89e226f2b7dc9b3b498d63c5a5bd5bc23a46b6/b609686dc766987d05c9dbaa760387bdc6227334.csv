is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,127," ""dimensions mismatch: state vector has dimension {0},"""
False,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,128," "" absolute tolerance vector has dimension {1}"","
False,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,129,"incompatibilit\u00e9 de dimensions entre le vecteur d''\u00e9tat ({0}),"""
False,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,130," "" et le vecteur de tol\u00e9rance absolue ({1})"" },"
False,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,131," ""dimensions mismatch: state vector has dimension {0},"""
False,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,132," "" relative tolerance vector has dimension {1}"","
False,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,133,"incompatibilit\u00e9 de dimensions entre le vecteur d''\u00e9tat ({0}),"""
False,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,134," "" et le vecteur de tol\u00e9rance relative ({1})"" },"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,127,"{ ""dimensions mismatch: state vector has dimension {0},"" +"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,128,""" absolute tolerance vector has dimension {1}"","
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,129,"""incompatibilit\u00e9 de dimensions entre le vecteur d''\u00e9tat ({0}),"" +"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,130,""" et le vecteur de tol\u00e9rance absolue ({1})"" },"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,131,"{ ""dimensions mismatch: state vector has dimension {0},"" +"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,132,""" relative tolerance vector has dimension {1}"","
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,133,"""incompatibilit\u00e9 de dimensions entre le vecteur d''\u00e9tat ({0}),"" +"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,134,""" et le vecteur de tol\u00e9rance relative ({1})"" },"
False,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,138," ""dimensions mismatch: ODE problem has dimension {0},"""
False,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,139," "" initial state vector has dimension {1}"","
False,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,140,"incompatibilit\u00e9 de dimensions entre le probl\u00e8me ODE ({0}),"""
False,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,141," "" et le vecteur d''\u00e9tat initial ({1})"" },"
False,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,142," ""dimensions mismatch: ODE problem has dimension {0},"""
False,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,143," "" final state vector has dimension {1}"","
False,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,144,"incompatibilit\u00e9 de dimensions entre le probl\u00e8me ODE ({0}),"""
False,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,145," "" et le vecteur d''\u00e9tat final ({1})"" },"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,138,"{ ""dimensions mismatch: ODE problem has dimension {0},"" +"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,139,""" initial state vector has dimension {1}"","
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,140,"""incompatibilit\u00e9 de dimensions entre le probl\u00e8me ODE ({0}),"" +"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,141,""" et le vecteur d''\u00e9tat initial ({1})"" },"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,142,"{ ""dimensions mismatch: ODE problem has dimension {0},"" +"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,143,""" final state vector has dimension {1}"","
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,144,"""incompatibilit\u00e9 de dimensions entre le probl\u00e8me ODE ({0}),"" +"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,145,""" et le vecteur d''\u00e9tat final ({1})"" },"
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,68,"hrow new IllegalArgumentException(""Initial guess is not in search"""
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,69," "" interval."" + ""  Initial: "" + initial"
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,70,"  ""  Endpoints: ["" + min + "","" + max + ""]"");"
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,68,"throw new IllegalArgumentException(""Initial guess is not in search"" +"
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,69,""" interval."" + ""  Initial: "" + initial +"
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,70,"""  Endpoints: ["" + min + "","" + max + ""]"");"
False,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,149,et = MathUtils.binomialCoefficientDouble(x
False,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,150," getNumberOfSuccesses() - 1, getNumberOfSuccesses() - 1)"
False,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,151," Math.pow(getProbabilityOfSuccess(), getNumberOfSuccesses())"
False,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,152," Math.pow(1.0 - getProbabilityOfSuccess(), x);"
True,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,149,ret = MathUtils.binomialCoefficientDouble(x +
True,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,150,"getNumberOfSuccesses() - 1, getNumberOfSuccesses() - 1) *"
True,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,151,"Math.pow(getProbabilityOfSuccess(), getNumberOfSuccesses()) *"
True,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,src/java/org/apache/commons/math/distribution/PascalDistributionImpl.java,152,"Math.pow(1.0 - getProbabilityOfSuccess(), x);"
False,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,167, while ((getCostEvaluations() < 2)
False,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,168,| (Math.abs(previous - cost) > (cost * steadyStateThreshold)
False,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,169,& (Math.abs(cost) > convergence)));
True,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,167,} while ((getCostEvaluations() < 2) ||
True,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,168,(Math.abs(previous - cost) > (cost * steadyStateThreshold) &&
True,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,169,(Math.abs(cost) > convergence)));
False,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,260,elta = (xNorm == 0)
False,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,261, initialStepBoundFactor : (initialStepBoundFactor * xNorm);
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,260,delta = (xNorm == 0) ? initialStepBoundFactor : (initialStepBoundFactor * xNorm);
False,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,391,f (((Math.abs(actRed) <= costRelativeTolerance)
False,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,392,& (preRed <= costRelativeTolerance)
False,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,393,& (ratio <= 2.0))
False,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,394,| (delta <= parRelativeTolerance * xNorm)) {
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,390,if (((Math.abs(actRed) <= costRelativeTolerance) &&
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,391,(preRed <= costRelativeTolerance) &&
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,392,(ratio <= 2.0)) ||
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,393,(delta <= parRelativeTolerance * xNorm)) {
False,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,400,f ((Math.abs(actRed) <= 2.2204e-16)
False,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,401,& (preRed <= 2.2204e-16)
False,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,402,& (ratio <= 2.0)) {
False,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,403,"hrow new EstimationException(""cost relative tolerance is too small ({0}),"""
False,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,404," "" no further reduction in the"""
False,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,405," "" sum of squares is possible"","
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,399,if ((Math.abs(actRed) <= 2.2204e-16) && (preRed <= 2.2204e-16) && (ratio <= 2.0)) {
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,400,"throw new EstimationException(""cost relative tolerance is too small ({0}),"" +"
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,401,""" no further reduction in the"" +"
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,402,""" sum of squares is possible"","
False,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,408,"hrow new EstimationException(""parameters relative tolerance is too small"""
False,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,409," "" ({0}), no further improvement in"""
False,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,410," "" the approximate solution is possible"","
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,405,"throw new EstimationException(""parameters relative tolerance is too small"" +"
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,406,""" ({0}), no further improvement in"" +"
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,407,""" the approximate solution is possible"","
False,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,413,"hrow new EstimationException(""orthogonality tolerance is too small ({0}),"""
False,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,414," "" solution is orthogonal to the jacobian"","
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,410,"throw new EstimationException(""orthogonality tolerance is too small ({0}),"" +"
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,411,""" solution is orthogonal to the jacobian"","
False,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,556,f ((Math.abs(fp) <= 0.1 * delta)
False,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,557,| ((parl == 0) && (fp <= previousFP) && (previousFP < 0))) {
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,553,if ((Math.abs(fp) <= 0.1 * delta) ||
True,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,554,((parl == 0) && (fp <= previousFP) && (previousFP < 0))) {
False,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,195,f ((m.length != 3) || (m[0].length != 3)
False,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,196,| (m[1].length != 3) || (m[2].length != 3)) {
False,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,197,"hrow new NotARotationMatrixException(""a {0}x{1} matrix"""
False,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,198," "" cannot be a rotation matrix"","
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,195,if ((m.length != 3) || (m[0].length != 3) ||
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,196,(m[1].length != 3) || (m[2].length != 3)) {
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,197,"throw new NotARotationMatrixException(""a {0}x{1} matrix"" +"
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,198,""" cannot be a rotation matrix"","
False,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,209,ouble det = ort[0][0] * (ort[1][1] * ort[2][2] - ort[2][1] * ort[1][2])
False,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,210, ort[1][0] * (ort[0][1] * ort[2][2] - ort[2][1] * ort[0][2])
False,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,211, ort[2][0] * (ort[0][1] * ort[1][2] - ort[1][1] * ort[0][2]);
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,209,double det = ort[0][0] * (ort[1][1] * ort[2][2] - ort[2][1] * ort[1][2]) -
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,210,ort[1][0] * (ort[0][1] * ort[2][2] - ort[2][1] * ort[0][2]) +
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,211,ort[2][0] * (ort[0][1] * ort[1][2] - ort[1][1] * ort[0][2]);
False,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,213,"hrow new NotARotationMatrixException(""the closest orthogonal matrix"""
False,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,214," "" has a negative determinant {0}"","
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,213,"throw new NotARotationMatrixException(""the closest orthogonal matrix"" +"
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,214,""" has a negative determinant {0}"","
False,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,340,ouble c = k.getX() * (u1y * u2z - u1z * u2y)
False,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,341, k.getY() * (u1z * u2x - u1x * u2z)
False,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,342, k.getZ() * (u1x * u2y - u1y * u2x);
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,340,double c = k.getX() * (u1y * u2z - u1z * u2y) +
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,341,k.getY() * (u1z * u2x - u1x * u2z) +
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,342,k.getZ() * (u1x * u2y - u1y * u2x);
False,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,362, = k.getX() * (u1y * u3z - u1z * u3y)
False,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,363, k.getY() * (u1z * u3x - u1x * u3z)
False,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,364, k.getZ() * (u1x * u3y - u1y * u3x);
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,362,c = k.getX() * (u1y * u3z - u1z * u3y) +
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,363,k.getY() * (u1z * u3x - u1x * u3z) +
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,364,k.getZ() * (u1x * u3y - u1y * u3x);
False,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,372, = k.getX() * (u2y * u3z - u2z * u3y)
False,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,373, k.getY() * (u2z * u3x - u2x * u3z)
False,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,374, k.getZ() * (u2x * u3y - u2y * u3x);
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,372,c = k.getX() * (u2y * u3z - u2z * u3y) +
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,373,k.getY() * (u2z * u3x - u2x * u3z) +
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,374,k.getZ() * (u2x * u3y - u2y * u3x);
False,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,989,n1 = corr00 * corr00 + corr01 * corr01 + corr02 * corr02
False,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,990, corr10 * corr10 + corr11 * corr11 + corr12 * corr12
False,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,991, corr20 * corr20 + corr21 * corr21 + corr22 * corr22;
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,989,fn1 = corr00 * corr00 + corr01 * corr01 + corr02 * corr02 +
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,990,corr10 * corr10 + corr11 * corr11 + corr12 * corr12 +
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,991,corr20 * corr20 + corr21 * corr21 + corr22 * corr22;
False,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,1012,"hrow new NotARotationMatrixException(""unable to orthogonalize matrix"""
False,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,1013," "" in {0} iterations"","
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,1012,"throw new NotARotationMatrixException(""unable to orthogonalize matrix"" +"
True,src/java/org/apache/commons/math/geometry/Rotation.java,src/java/org/apache/commons/math/geometry/Rotation.java,1013,""" in {0} iterations"","
False,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,98,nterpolatedState[i] = currentState[i]
False,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,99, coeff1  * yDotK[0][i]
False,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,100, coeff23 * (yDotK[1][i] + yDotK[2][i])
False,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,101, coeff4  * yDotK[3][i];
True,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,98,interpolatedState[i] = currentState[i] +
True,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,99,coeff1  * yDotK[0][i] +
True,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,100,coeff23 * (yDotK[1][i] + yDotK[2][i]) +
True,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,src/java/org/apache/commons/math/ode/ClassicalRungeKuttaStepInterpolator.java,101,coeff4  * yDotK[3][i];
False,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,289,ouble iLagrange = (  (dt2 * dt3 * d23) * iMax
False,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,290, (dt1 * dt3 * d13) * iMed
False,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,291, (dt1 * dt2 * d12) * iMin)
False,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,292, (d12 * d23 * d13);
True,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,289,double iLagrange = ((dt2 * dt3 * d23) * iMax -
True,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,290,(dt1 * dt3 * d13) * iMed +
True,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,291,(dt1 * dt2 * d12) * iMin) /
True,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,292,(d12 * d23 * d13);
False,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,309,hile ((index <= iMax)
False,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,310,"& (locatePoint(time, (StepInterpolator) steps.get(index)) > 0)) {"
True,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,309,while ((index <= iMax) &&
True,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,310,"(locatePoint(time, (StepInterpolator) steps.get(index)) > 0)) {"
False,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,319,"hrow new RuntimeException(""unexpected DerivativeException caught: """
False,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,320, de.getMessage());
True,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,319,"throw new RuntimeException(""unexpected DerivativeException caught: "" +"
True,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/java/org/apache/commons/math/ode/ContinuousOutputModel.java,320,de.getMessage());
False,src/java/org/apache/commons/math/ode/DormandPrince54Integrator.java,src/java/org/apache/commons/math/ode/DormandPrince54Integrator.java,135,ouble errSum = e1 * yDotK[0][j] +  e3 * yDotK[2][j]
False,src/java/org/apache/commons/math/ode/DormandPrince54Integrator.java,src/java/org/apache/commons/math/ode/DormandPrince54Integrator.java,136, e4 * yDotK[3][j] +  e5 * yDotK[4][j]
False,src/java/org/apache/commons/math/ode/DormandPrince54Integrator.java,src/java/org/apache/commons/math/ode/DormandPrince54Integrator.java,137, e6 * yDotK[5][j] +  e7 * yDotK[6][j];
True,src/java/org/apache/commons/math/ode/DormandPrince54Integrator.java,src/java/org/apache/commons/math/ode/DormandPrince54Integrator.java,135,double errSum = e1 * yDotK[0][j] +  e3 * yDotK[2][j] +
True,src/java/org/apache/commons/math/ode/DormandPrince54Integrator.java,src/java/org/apache/commons/math/ode/DormandPrince54Integrator.java,136,e4 * yDotK[3][j] +  e5 * yDotK[4][j] +
True,src/java/org/apache/commons/math/ode/DormandPrince54Integrator.java,src/java/org/apache/commons/math/ode/DormandPrince54Integrator.java,137,e6 * yDotK[5][j] +  e7 * yDotK[6][j];
False,src/java/org/apache/commons/math/ode/DormandPrince54Integrator.java,src/java/org/apache/commons/math/ode/DormandPrince54Integrator.java,140,ouble tol = (vecAbsoluteTolerance == null)
False,src/java/org/apache/commons/math/ode/DormandPrince54Integrator.java,src/java/org/apache/commons/math/ode/DormandPrince54Integrator.java,141, (scalAbsoluteTolerance + scalRelativeTolerance * yScale)
False,src/java/org/apache/commons/math/ode/DormandPrince54Integrator.java,src/java/org/apache/commons/math/ode/DormandPrince54Integrator.java,142, (vecAbsoluteTolerance[j] + vecRelativeTolerance[j] * yScale);
True,src/java/org/apache/commons/math/ode/DormandPrince54Integrator.java,src/java/org/apache/commons/math/ode/DormandPrince54Integrator.java,140,double tol = (vecAbsoluteTolerance == null) ?
True,src/java/org/apache/commons/math/ode/DormandPrince54Integrator.java,src/java/org/apache/commons/math/ode/DormandPrince54Integrator.java,141,(scalAbsoluteTolerance + scalRelativeTolerance * yScale) :
True,src/java/org/apache/commons/math/ode/DormandPrince54Integrator.java,src/java/org/apache/commons/math/ode/DormandPrince54Integrator.java,142,(vecAbsoluteTolerance[j] + vecRelativeTolerance[j] * yScale);
False,src/java/org/apache/commons/math/ode/DormandPrince54StepInterpolator.java,src/java/org/apache/commons/math/ode/DormandPrince54StepInterpolator.java,138,1[i] = h * (a70 * yDotK[0][i] + a72 * yDotK[2][i] + a73 * yDotK[3][i]
False,src/java/org/apache/commons/math/ode/DormandPrince54StepInterpolator.java,src/java/org/apache/commons/math/ode/DormandPrince54StepInterpolator.java,139, a74 * yDotK[4][i] + a75 * yDotK[5][i]);
True,src/java/org/apache/commons/math/ode/DormandPrince54StepInterpolator.java,src/java/org/apache/commons/math/ode/DormandPrince54StepInterpolator.java,138,v1[i] = h * (a70 * yDotK[0][i] + a72 * yDotK[2][i] + a73 * yDotK[3][i] +
True,src/java/org/apache/commons/math/ode/DormandPrince54StepInterpolator.java,src/java/org/apache/commons/math/ode/DormandPrince54StepInterpolator.java,139,a74 * yDotK[4][i] + a75 * yDotK[5][i]);
False,src/java/org/apache/commons/math/ode/DormandPrince54StepInterpolator.java,src/java/org/apache/commons/math/ode/DormandPrince54StepInterpolator.java,142,4[i] = h * (d0 * yDotK[0][i] + d2 * yDotK[2][i] + d3 * yDotK[3][i]
False,src/java/org/apache/commons/math/ode/DormandPrince54StepInterpolator.java,src/java/org/apache/commons/math/ode/DormandPrince54StepInterpolator.java,143, d4 * yDotK[4][i] + d5 * yDotK[5][i] + d6 * yDotK[6][i]);
True,src/java/org/apache/commons/math/ode/DormandPrince54StepInterpolator.java,src/java/org/apache/commons/math/ode/DormandPrince54StepInterpolator.java,142,v4[i] = h * (d0 * yDotK[0][i] + d2 * yDotK[2][i] + d3 * yDotK[3][i] +
True,src/java/org/apache/commons/math/ode/DormandPrince54StepInterpolator.java,src/java/org/apache/commons/math/ode/DormandPrince54StepInterpolator.java,143,d4 * yDotK[4][i] + d5 * yDotK[5][i] + d6 * yDotK[6][i]);
False,src/java/org/apache/commons/math/ode/DormandPrince54StepInterpolator.java,src/java/org/apache/commons/math/ode/DormandPrince54StepInterpolator.java,153,nterpolatedState[i] = currentState[i]
False,src/java/org/apache/commons/math/ode/DormandPrince54StepInterpolator.java,src/java/org/apache/commons/math/ode/DormandPrince54StepInterpolator.java,154, eta * (v1[i]
False,src/java/org/apache/commons/math/ode/DormandPrince54StepInterpolator.java,src/java/org/apache/commons/math/ode/DormandPrince54StepInterpolator.java,155, theta * (v2[i]
False,src/java/org/apache/commons/math/ode/DormandPrince54StepInterpolator.java,src/java/org/apache/commons/math/ode/DormandPrince54StepInterpolator.java,156, theta * (v3[i]
False,src/java/org/apache/commons/math/ode/DormandPrince54StepInterpolator.java,src/java/org/apache/commons/math/ode/DormandPrince54StepInterpolator.java,157, eta * v4[i])));
True,src/java/org/apache/commons/math/ode/DormandPrince54StepInterpolator.java,src/java/org/apache/commons/math/ode/DormandPrince54StepInterpolator.java,153,interpolatedState[i] = currentState[i] -
True,src/java/org/apache/commons/math/ode/DormandPrince54StepInterpolator.java,src/java/org/apache/commons/math/ode/DormandPrince54StepInterpolator.java,154,eta * (v1[i] - theta * (v2[i] + theta * (v3[i] + eta * v4[i])));
False,src/java/org/apache/commons/math/ode/DormandPrince853Integrator.java,src/java/org/apache/commons/math/ode/DormandPrince853Integrator.java,229,ouble errSum1 = e1_01 * yDotK[0][j]  + e1_06 * yDotK[5][j]
False,src/java/org/apache/commons/math/ode/DormandPrince853Integrator.java,src/java/org/apache/commons/math/ode/DormandPrince853Integrator.java,230, e1_07 * yDotK[6][j]  + e1_08 * yDotK[7][j]
False,src/java/org/apache/commons/math/ode/DormandPrince853Integrator.java,src/java/org/apache/commons/math/ode/DormandPrince853Integrator.java,231, e1_09 * yDotK[8][j]  + e1_10 * yDotK[9][j]
False,src/java/org/apache/commons/math/ode/DormandPrince853Integrator.java,src/java/org/apache/commons/math/ode/DormandPrince853Integrator.java,232, e1_11 * yDotK[10][j] + e1_12 * yDotK[11][j];
False,src/java/org/apache/commons/math/ode/DormandPrince853Integrator.java,src/java/org/apache/commons/math/ode/DormandPrince853Integrator.java,233,ouble errSum2 = e2_01 * yDotK[0][j]  + e2_06 * yDotK[5][j]
False,src/java/org/apache/commons/math/ode/DormandPrince853Integrator.java,src/java/org/apache/commons/math/ode/DormandPrince853Integrator.java,234, e2_07 * yDotK[6][j]  + e2_08 * yDotK[7][j]
False,src/java/org/apache/commons/math/ode/DormandPrince853Integrator.java,src/java/org/apache/commons/math/ode/DormandPrince853Integrator.java,235, e2_09 * yDotK[8][j]  + e2_10 * yDotK[9][j]
False,src/java/org/apache/commons/math/ode/DormandPrince853Integrator.java,src/java/org/apache/commons/math/ode/DormandPrince853Integrator.java,236, e2_11 * yDotK[10][j] + e2_12 * yDotK[11][j];
True,src/java/org/apache/commons/math/ode/DormandPrince853Integrator.java,src/java/org/apache/commons/math/ode/DormandPrince853Integrator.java,229,double errSum1 = e1_01 * yDotK[0][j]  + e1_06 * yDotK[5][j] +
True,src/java/org/apache/commons/math/ode/DormandPrince853Integrator.java,src/java/org/apache/commons/math/ode/DormandPrince853Integrator.java,230,e1_07 * yDotK[6][j]  + e1_08 * yDotK[7][j] +
True,src/java/org/apache/commons/math/ode/DormandPrince853Integrator.java,src/java/org/apache/commons/math/ode/DormandPrince853Integrator.java,231,e1_09 * yDotK[8][j]  + e1_10 * yDotK[9][j] +
True,src/java/org/apache/commons/math/ode/DormandPrince853Integrator.java,src/java/org/apache/commons/math/ode/DormandPrince853Integrator.java,232,e1_11 * yDotK[10][j] + e1_12 * yDotK[11][j];
True,src/java/org/apache/commons/math/ode/DormandPrince853Integrator.java,src/java/org/apache/commons/math/ode/DormandPrince853Integrator.java,233,double errSum2 = e2_01 * yDotK[0][j]  + e2_06 * yDotK[5][j] +
True,src/java/org/apache/commons/math/ode/DormandPrince853Integrator.java,src/java/org/apache/commons/math/ode/DormandPrince853Integrator.java,234,e2_07 * yDotK[6][j]  + e2_08 * yDotK[7][j] +
True,src/java/org/apache/commons/math/ode/DormandPrince853Integrator.java,src/java/org/apache/commons/math/ode/DormandPrince853Integrator.java,235,e2_09 * yDotK[8][j]  + e2_10 * yDotK[9][j] +
True,src/java/org/apache/commons/math/ode/DormandPrince853Integrator.java,src/java/org/apache/commons/math/ode/DormandPrince853Integrator.java,236,e2_11 * yDotK[10][j] + e2_12 * yDotK[11][j];
False,src/java/org/apache/commons/math/ode/DormandPrince853Integrator.java,src/java/org/apache/commons/math/ode/DormandPrince853Integrator.java,239,ouble tol = (vecAbsoluteTolerance == null)
False,src/java/org/apache/commons/math/ode/DormandPrince853Integrator.java,src/java/org/apache/commons/math/ode/DormandPrince853Integrator.java,240, (scalAbsoluteTolerance + scalRelativeTolerance * yScale)
False,src/java/org/apache/commons/math/ode/DormandPrince853Integrator.java,src/java/org/apache/commons/math/ode/DormandPrince853Integrator.java,241, (vecAbsoluteTolerance[j] + vecRelativeTolerance[j] * yScale);
True,src/java/org/apache/commons/math/ode/DormandPrince853Integrator.java,src/java/org/apache/commons/math/ode/DormandPrince853Integrator.java,239,double tol = (vecAbsoluteTolerance == null) ?
True,src/java/org/apache/commons/math/ode/DormandPrince853Integrator.java,src/java/org/apache/commons/math/ode/DormandPrince853Integrator.java,240,(scalAbsoluteTolerance + scalRelativeTolerance * yScale) :
True,src/java/org/apache/commons/math/ode/DormandPrince853Integrator.java,src/java/org/apache/commons/math/ode/DormandPrince853Integrator.java,241,(vecAbsoluteTolerance[j] + vecRelativeTolerance[j] * yScale);
False,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,175,[0][i] = h * (b_01 * yDotK[0][i]  + b_06 * yDotK[5][i] + b_07 * yDotK[6][i]
False,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,176, b_08 * yDotK[7][i]  + b_09 * yDotK[8][i] + b_10 * yDotK[9][i]
False,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,177, b_11 * yDotK[10][i] + b_12 * yDotK[11][i]);
True,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,175,v[0][i] = h * (b_01 * yDotK[0][i]  + b_06 * yDotK[5][i] + b_07 * yDotK[6][i] +
True,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,176,b_08 * yDotK[7][i]  + b_09 * yDotK[8][i] + b_10 * yDotK[9][i] +
True,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,177,b_11 * yDotK[10][i] + b_12 * yDotK[11][i]);
False,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,181,[k+3][i] = h * (d[k][0] * yDotK[0][i]  + d[k][1] * yDotK[5][i]  + d[k][2] * yDotK[6][i]
False,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,182, d[k][3] * yDotK[7][i]  + d[k][4] * yDotK[8][i]  + d[k][5] * yDotK[9][i]
False,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,183, d[k][6] * yDotK[10][i] + d[k][7] * yDotK[11][i] + d[k][8] * yDotK[12][i]
False,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,184, d[k][9]  * yDotKLast[0][i]
False,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,185, d[k][10] * yDotKLast[1][i]
False,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,186, d[k][11] * yDotKLast[2][i]);
True,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,181,v[k+3][i] = h * (d[k][0] * yDotK[0][i]  + d[k][1] * yDotK[5][i]  + d[k][2] * yDotK[6][i] +
True,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,182,d[k][3] * yDotK[7][i]  + d[k][4] * yDotK[8][i]  + d[k][5] * yDotK[9][i] +
True,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,183,d[k][6] * yDotK[10][i] + d[k][7] * yDotK[11][i] + d[k][8] * yDotK[12][i] +
True,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,184,d[k][9]  * yDotKLast[0][i] +
True,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,185,d[k][10] * yDotKLast[1][i] +
True,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,186,d[k][11] * yDotKLast[2][i]);
False,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,197,nterpolatedState[i] = currentState[i]
False,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,198,   eta * (v[0][i]
False,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,199, theta * (v[1][i]
False,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,200, theta * (v[2][i]
False,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,201,   eta * (v[3][i]
False,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,202, theta * (v[4][i]
False,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,203,   eta * (v[5][i]
False,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,204, theta * (v[6][i])))))));
True,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,197,interpolatedState[i] =
True,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,198,currentState[i] - eta * (v[0][i] - theta * (v[1][i] +
True,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,199,theta * (v[2][i] + eta * (v[3][i] + theta * (v[4][i] +
True,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,200,eta * (v[5][i] + theta * (v[6][i])))))));
False,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,228, = k14_01 * yDotK[0][j]  + k14_06 * yDotK[5][j]  + k14_07 * yDotK[6][j]
False,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,229, k14_08 * yDotK[7][j]  + k14_09 * yDotK[8][j]  + k14_10 * yDotK[9][j]
False,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,230, k14_11 * yDotK[10][j] + k14_12 * yDotK[11][j] + k14_13 * yDotK[12][j];
True,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,224,s = k14_01 * yDotK[0][j]  + k14_06 * yDotK[5][j]  + k14_07 * yDotK[6][j] +
True,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,225,k14_08 * yDotK[7][j]  + k14_09 * yDotK[8][j]  + k14_10 * yDotK[9][j] +
True,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,226,k14_11 * yDotK[10][j] + k14_12 * yDotK[11][j] + k14_13 * yDotK[12][j];
False,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,237, = k15_01 * yDotK[0][j]  + k15_06 * yDotK[5][j]  + k15_07 * yDotK[6][j]
False,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,238, k15_08 * yDotK[7][j]  + k15_09 * yDotK[8][j]  + k15_10 * yDotK[9][j]
False,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,239, k15_11 * yDotK[10][j] + k15_12 * yDotK[11][j] + k15_13 * yDotK[12][j]
False,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,240, k15_14 * yDotKLast[0][j];
True,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,233,s = k15_01 * yDotK[0][j]  + k15_06 * yDotK[5][j]  + k15_07 * yDotK[6][j] +
True,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,234,k15_08 * yDotK[7][j]  + k15_09 * yDotK[8][j]  + k15_10 * yDotK[9][j] +
True,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,235,k15_11 * yDotK[10][j] + k15_12 * yDotK[11][j] + k15_13 * yDotK[12][j] +
True,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,236,k15_14 * yDotKLast[0][j];
False,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,247, = k16_01 * yDotK[0][j]  + k16_06 * yDotK[5][j]  + k16_07 * yDotK[6][j]
False,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,248, k16_08 * yDotK[7][j]  + k16_09 * yDotK[8][j]  + k16_10 * yDotK[9][j]
False,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,249, k16_11 * yDotK[10][j] + k16_12 * yDotK[11][j] + k16_13 * yDotK[12][j]
False,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,250, k16_14 * yDotKLast[0][j] +  k16_15 * yDotKLast[1][j];
True,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,243,s = k16_01 * yDotK[0][j]  + k16_06 * yDotK[5][j]  + k16_07 * yDotK[6][j] +
True,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,244,k16_08 * yDotK[7][j]  + k16_09 * yDotK[8][j]  + k16_10 * yDotK[9][j] +
True,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,245,k16_11 * yDotK[10][j] + k16_12 * yDotK[11][j] + k16_13 * yDotK[12][j] +
True,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,src/java/org/apache/commons/math/ode/DormandPrince853StepInterpolator.java,246,k16_14 * yDotKLast[0][j] +  k16_15 * yDotKLast[1][j];
False,src/java/org/apache/commons/math/ode/EmbeddedRungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/EmbeddedRungeKuttaIntegrator.java,223,f ((forward && (stepStart + stepSize > t))
False,src/java/org/apache/commons/math/ode/EmbeddedRungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/EmbeddedRungeKuttaIntegrator.java,224,| ((! forward) && (stepStart + stepSize < t))) {
True,src/java/org/apache/commons/math/ode/EmbeddedRungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/EmbeddedRungeKuttaIntegrator.java,223,if ((forward && (stepStart + stepSize > t)) ||
True,src/java/org/apache/commons/math/ode/EmbeddedRungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/EmbeddedRungeKuttaIntegrator.java,224,((! forward) && (stepStart + stepSize < t))) {
False,src/java/org/apache/commons/math/ode/GillStepInterpolator.java,src/java/org/apache/commons/math/ode/GillStepInterpolator.java,100,nterpolatedState[i] = currentState[i]
False,src/java/org/apache/commons/math/ode/GillStepInterpolator.java,src/java/org/apache/commons/math/ode/GillStepInterpolator.java,101, coeff1 * yDotK[0][i] - coeff2 * yDotK[1][i]
False,src/java/org/apache/commons/math/ode/GillStepInterpolator.java,src/java/org/apache/commons/math/ode/GillStepInterpolator.java,102, coeff3 * yDotK[2][i] - coeff4 * yDotK[3][i];
True,src/java/org/apache/commons/math/ode/GillStepInterpolator.java,src/java/org/apache/commons/math/ode/GillStepInterpolator.java,100,interpolatedState[i] = currentState[i] -
True,src/java/org/apache/commons/math/ode/GillStepInterpolator.java,src/java/org/apache/commons/math/ode/GillStepInterpolator.java,101,coeff1 * yDotK[0][i] - coeff2 * yDotK[1][i] -
True,src/java/org/apache/commons/math/ode/GillStepInterpolator.java,src/java/org/apache/commons/math/ode/GillStepInterpolator.java,102,coeff3 * yDotK[2][i] - coeff4 * yDotK[3][i];
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,107,enseOutput = (handler.requiresDenseOutput()
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,108,| (! switchesHandler.isEmpty()));
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,107,denseOutput = (handler.requiresDenseOutput() || (! switchesHandler.isEmpty()));
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,130,enseOutput = (handler.requiresDenseOutput()
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,131,| (! switchesHandler.isEmpty()));
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,129,denseOutput = (handler.requiresDenseOutput() || (! switchesHandler.isEmpty()));
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,280,enseOutput = (handler.requiresDenseOutput()
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,281,| (! switchesHandler.isEmpty()));
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,278,denseOutput = (handler.requiresDenseOutput() || (! switchesHandler.isEmpty()));
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,302,enseOutput = (handler.requiresDenseOutput()
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,303,| (! switchesHandler.isEmpty()));
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,299,denseOutput = (handler.requiresDenseOutput() || (! switchesHandler.isEmpty()));
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,498,iag[k-j-1][i] = diag[k-j][i]
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,499, coeff[k+offset][j-1] * (diag[k-j][i] - diag[k-j-1][i]);
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,494,diag[k-j-1][i] = diag[k-j][i] +
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,495,coeff[k+offset][j-1] * (diag[k-j][i] - diag[k-j-1][i]);
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,566,"ouble log10R = Math.log(Math.max(1.0e-10,"
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,567,vecRelativeTolerance == null)
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,568, scalRelativeTolerance
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,569, vecRelativeTolerance[0]))
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,570, Math.log(10.0);
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,562,double tol =
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,563,(vecRelativeTolerance == null) ? scalRelativeTolerance : vecRelativeTolerance[0];
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,564,"double log10R = Math.log(Math.max(1.0e-10, tol)) / Math.log(10.0);"
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,628,f ((forward && (stepStart + stepSize > t))
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,629,| ((! forward) && (stepStart + stepSize < t))) {
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,622,if ((forward && (stepStart + stepSize > t)) ||
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,623,((! forward) && (stepStart + stepSize < t))) {
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,701,ouble ratio = ((double) sequence [k] * sequence[k+1])
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,702, (sequence[0] * sequence[0]);
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,695,double ratio = ((double) sequence [k] * sequence[k+1]) /
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,696,(sequence[0] * sequence[0]);
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,709,f ((targetIter > 1)
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,710,& (costPerTimeUnit[targetIter-1]
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,711, orderControl1 * costPerTimeUnit[targetIter])) {
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,703,if ((targetIter > 1) &&
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,704,(costPerTimeUnit[targetIter-1] <
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,705,orderControl1 * costPerTimeUnit[targetIter])) {
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,734,f ((targetIter > 1)
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,735,& (costPerTimeUnit[targetIter-1]
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,736, orderControl1 * costPerTimeUnit[targetIter])) {
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,728,if ((targetIter > 1) &&
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,729,(costPerTimeUnit[targetIter-1] <
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,730,orderControl1 * costPerTimeUnit[targetIter])) {
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,747,f ((targetIter > 1)
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,748,& (costPerTimeUnit[targetIter-1]
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,749, orderControl1 * costPerTimeUnit[targetIter])) {
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,741,if ((targetIter > 1) &&
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,742,(costPerTimeUnit[targetIter-1] <
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,743,orderControl1 * costPerTimeUnit[targetIter])) {
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,890,f ((k > 2)
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,891,& (costPerTimeUnit[k-2] < orderControl1 * costPerTimeUnit[k-1])) {
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,884,if ((k > 2) &&
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,885,(costPerTimeUnit[k-2] < orderControl1 * costPerTimeUnit[k-1])) {
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,909,f ((k < targetIter)
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,910,& (costPerTimeUnit[k] < orderControl2 * costPerTimeUnit[k-1])) {
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,911,New = filterStep(optimalStep[k]
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,912," costPerStep[optimalIter+1] / costPerStep[k],"
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,903,if ((k < targetIter) &&
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,904,(costPerTimeUnit[k] < orderControl2 * costPerTimeUnit[k-1])) {
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,905,hNew = filterStep(optimalStep[k] *
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,906,"costPerStep[optimalIter+1] / costPerStep[k],"
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,915,New = filterStep(optimalStep[k]
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,916," costPerStep[optimalIter] / costPerStep[k],"
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,909,hNew = filterStep(optimalStep[k] *
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,910,"costPerStep[optimalIter] / costPerStep[k],"
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolator.java,src/java/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolator.java,277,olynoms[j+4][i] = 16 * (yMidDots[j][i]
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolator.java,src/java/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolator.java,278, fac1 * polynoms[j+2][i]
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolator.java,src/java/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolator.java,279, fac2 * polynoms[j][i]);
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolator.java,src/java/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolator.java,277,polynoms[j+4][i] =
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolator.java,src/java/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolator.java,278,16 * (yMidDots[j][i] + fac1 * polynoms[j+2][i] - fac2 * polynoms[j][i]);
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolator.java,src/java/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolator.java,327,nterpolatedState[i] = polynoms[0][i]
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolator.java,src/java/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolator.java,328, theta * (polynoms[1][i]
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolator.java,src/java/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolator.java,329, oneMinusTheta * (polynoms[2][i] * theta
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolator.java,src/java/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolator.java,330, polynoms[3][i] * oneMinusTheta));
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolator.java,src/java/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolator.java,326,interpolatedState[i] = polynoms[0][i] +
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolator.java,src/java/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolator.java,327,theta * (polynoms[1][i] +
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolator.java,src/java/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolator.java,328,oneMinusTheta * (polynoms[2][i] * theta +
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolator.java,src/java/org/apache/commons/math/ode/GraggBulirschStoerStepInterpolator.java,329,polynoms[3][i] * oneMinusTheta));
False,src/java/org/apache/commons/math/ode/HighamHall54Integrator.java,src/java/org/apache/commons/math/ode/HighamHall54Integrator.java,126,ouble tol = (vecAbsoluteTolerance == null)
False,src/java/org/apache/commons/math/ode/HighamHall54Integrator.java,src/java/org/apache/commons/math/ode/HighamHall54Integrator.java,127, (scalAbsoluteTolerance + scalRelativeTolerance * yScale)
False,src/java/org/apache/commons/math/ode/HighamHall54Integrator.java,src/java/org/apache/commons/math/ode/HighamHall54Integrator.java,128, (vecAbsoluteTolerance[j] + vecRelativeTolerance[j] * yScale);
True,src/java/org/apache/commons/math/ode/HighamHall54Integrator.java,src/java/org/apache/commons/math/ode/HighamHall54Integrator.java,126,double tol = (vecAbsoluteTolerance == null) ?
True,src/java/org/apache/commons/math/ode/HighamHall54Integrator.java,src/java/org/apache/commons/math/ode/HighamHall54Integrator.java,127,(scalAbsoluteTolerance + scalRelativeTolerance * yScale) :
True,src/java/org/apache/commons/math/ode/HighamHall54Integrator.java,src/java/org/apache/commons/math/ode/HighamHall54Integrator.java,128,(vecAbsoluteTolerance[j] + vecRelativeTolerance[j] * yScale);
False,src/java/org/apache/commons/math/ode/HighamHall54StepInterpolator.java,src/java/org/apache/commons/math/ode/HighamHall54StepInterpolator.java,83,nterpolatedState[i] = currentState[i]
False,src/java/org/apache/commons/math/ode/HighamHall54StepInterpolator.java,src/java/org/apache/commons/math/ode/HighamHall54StepInterpolator.java,84, b0 * yDotK[0][i] + b2 * yDotK[2][i] + b3 * yDotK[3][i]
False,src/java/org/apache/commons/math/ode/HighamHall54StepInterpolator.java,src/java/org/apache/commons/math/ode/HighamHall54StepInterpolator.java,85, b4 * yDotK[4][i] + b5 * yDotK[5][i];
True,src/java/org/apache/commons/math/ode/HighamHall54StepInterpolator.java,src/java/org/apache/commons/math/ode/HighamHall54StepInterpolator.java,83,interpolatedState[i] = currentState[i] +
True,src/java/org/apache/commons/math/ode/HighamHall54StepInterpolator.java,src/java/org/apache/commons/math/ode/HighamHall54StepInterpolator.java,84,b0 * yDotK[0][i] + b2 * yDotK[2][i] + b3 * yDotK[3][i] +
True,src/java/org/apache/commons/math/ode/HighamHall54StepInterpolator.java,src/java/org/apache/commons/math/ode/HighamHall54StepInterpolator.java,85,b4 * yDotK[4][i] + b5 * yDotK[5][i];
False,src/java/org/apache/commons/math/ode/MidpointStepInterpolator.java,src/java/org/apache/commons/math/ode/MidpointStepInterpolator.java,91,nterpolatedState[i] = currentState[i]
False,src/java/org/apache/commons/math/ode/MidpointStepInterpolator.java,src/java/org/apache/commons/math/ode/MidpointStepInterpolator.java,92, coeff1 * yDotK[0][i] - coeff2 * yDotK[1][i];
True,src/java/org/apache/commons/math/ode/MidpointStepInterpolator.java,src/java/org/apache/commons/math/ode/MidpointStepInterpolator.java,91,interpolatedState[i] = currentState[i] +
True,src/java/org/apache/commons/math/ode/MidpointStepInterpolator.java,src/java/org/apache/commons/math/ode/MidpointStepInterpolator.java,92,coeff1 * yDotK[0][i] - coeff2 * yDotK[1][i];
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,277,eturn (nextAction == SwitchingFunction.RESET_STATE)
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,278,| (nextAction == SwitchingFunction.RESET_DERIVATIVES);
True,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,277,return (nextAction == SwitchingFunction.RESET_STATE) ||
True,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,278,(nextAction == SwitchingFunction.RESET_DERIVATIVES);
False,src/java/org/apache/commons/math/ode/ThreeEighthesStepInterpolator.java,src/java/org/apache/commons/math/ode/ThreeEighthesStepInterpolator.java,100,nterpolatedState[i] = currentState[i]
False,src/java/org/apache/commons/math/ode/ThreeEighthesStepInterpolator.java,src/java/org/apache/commons/math/ode/ThreeEighthesStepInterpolator.java,101, coeff1 * yDotK[0][i] - coeff2 * yDotK[1][i]
False,src/java/org/apache/commons/math/ode/ThreeEighthesStepInterpolator.java,src/java/org/apache/commons/math/ode/ThreeEighthesStepInterpolator.java,102, coeff3 * yDotK[2][i] - coeff4 * yDotK[3][i];
True,src/java/org/apache/commons/math/ode/ThreeEighthesStepInterpolator.java,src/java/org/apache/commons/math/ode/ThreeEighthesStepInterpolator.java,100,interpolatedState[i] = currentState[i] -
True,src/java/org/apache/commons/math/ode/ThreeEighthesStepInterpolator.java,src/java/org/apache/commons/math/ode/ThreeEighthesStepInterpolator.java,101,coeff1 * yDotK[0][i] - coeff2 * yDotK[1][i] -
True,src/java/org/apache/commons/math/ode/ThreeEighthesStepInterpolator.java,src/java/org/apache/commons/math/ode/ThreeEighthesStepInterpolator.java,102,coeff3 * yDotK[2][i] - coeff4 * yDotK[3][i];
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,507,"hrow new ConvergenceException(""none of the {0} start points"""
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,508," "" lead to convergence"","
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,509,ew String[] {
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,510,nteger.toString(starts)
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,507,"throw new ConvergenceException(""none of the {0} start points"" +"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,508,""" lead to convergence"","
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,509,new Object[] {
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,510,Integer.toString(starts)

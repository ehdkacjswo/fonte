is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,106,ouble t = Beta.regularizedBeta(
False,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,107,"etDegreesOfFreedom() / (getDegreesOfFreedom() + (x * x)),"
False,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,108,".5 * getDegreesOfFreedom(), 0.5);"
False,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,111,f(x < 0.0){
False,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,112,et = 0.5 * t;
False,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,113, else if(x > 0.0){
False,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,114,et = 1.0 - 0.5 * t;
False,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,115, else {
True,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,107,if(x == 0.0){
True,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,109,} else {
True,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,110,double t = Beta.regularizedBeta(
True,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,111,"getDegreesOfFreedom() / (getDegreesOfFreedom() + (x * x)),"
True,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,112,"0.5 * getDegreesOfFreedom(), 0.5);"
True,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,114,if(x < 0.0){
True,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,115,ret = 0.5 * t;
True,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,116,} else {
True,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,117,ret = 1.0 - 0.5 * t;
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,142,f (a <= 0.0) {
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,143,"hrow new IllegalArgumentException(""a must be positive"");"
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,144, else if (b <= 0.0) {
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,145,"hrow new IllegalArgumentException(""b must be positive"");"
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,146, else if (x < 0.0 || x > 1.0) {
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,147,hrow new IllegalArgumentException(
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,148,"x must be between 0.0 and 1.0, inclusive"");"
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,149, else if(x == 0.0){
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,150,et = 0.0;
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,151, else if(x == 1.0){
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,152,et = 1.0;
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,142,if (Double.isNaN(x) || Double.isNaN(a) || Double.isNaN(b) || (x < 0)
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,143,|| (x > 1) || (a <= 0.0) || (b <= 0.0)) {
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,144,ret = Double.NaN;
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,231,f (a <= 0.0) {
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,232,"hrow new IllegalArgumentException(""a must be positive"");"
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,233, else if (b <= 0.0) {
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,234,"hrow new IllegalArgumentException(""b must be positive"");"
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,223,if (Double.isNaN(a) || Double.isNaN(b) || (a <= 0.0) || (b <= 0.0)) {
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,224,ret = Double.NaN;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,73, @version $Revision: 1.3 $ $Date: 2003/06/04 12:23:44 $
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,73,* @version $Revision: 1.4 $ $Date: 2003/06/14 04:17:49 $
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,92,** running sum of 3rd powers that have been added */
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,93,rivate double sumCube = 0.0;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,95,** running sum of 4th powers that have been added */
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,96,rivate double sumQuad = 0.0;
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,92,/** running sum of 3rd powers that have been added */
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,93,private double sumCube = 0.0;
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,95,/** running sum of 4th powers that have been added */
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,96,private double sumQuad = 0.0;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,123, @see org.apache.commons.math.stat.Univariate#addValue(double)
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,125,ublic void addValue(double v) {
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,123,* @see org.apache.commons.math.stat.Univariate#addValue(double)
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,125,public void addValue(double v) {
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,131, @see org.apache.commons.math.stat.Univariate#getMean()
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,133,ublic double getMean() {
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,131,* @see org.apache.commons.math.stat.Univariate#getMean()
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,133,public double getMean() {
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,143, @see org.apache.commons.math.stat.Univariate#getGeometricMean()
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,145,ublic double getGeometricMean() {
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,143,* @see org.apache.commons.math.stat.Univariate#getGeometricMean()
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,145,public double getGeometricMean() {
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,149,"eturn Math.pow(product,( 1.0/(double)n ) );"
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,149,"return Math.pow(product,( 1.0 / (double) n ) );"
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,154, @see org.apache.commons.math.stat.Univariate#getProduct()
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,156,ublic double getProduct() {
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,154,* @see org.apache.commons.math.stat.Univariate#getProduct()
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,156,public double getProduct() {
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,161, @see org.apache.commons.math.stat.Univariate#getStandardDeviation()
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,163,ublic double getStandardDeviation() {
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,164,ouble variance = getVariance();
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,165,f ((variance == 0.0) || (variance == Double.NaN)) {
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,166,eturn variance;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,167, else {
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,168,eturn Math.sqrt(variance);
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,173, Returns the variance of the values that have been added as described by
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,174," <a href=""http://mathworld.wolfram.com/k-Statistic.html"">Equation (5) for k-Statistics</a>."
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,176, @return The variance of a set of values.  Double.NaN is returned for
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,177,         an empty set of values and 0.0 is returned for a &lt;= 1 value set.
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,179,ublic double getVariance() {
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,180,ouble variance = Double.NaN;
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,161,* @see org.apache.commons.math.stat.Univariate#getStandardDeviation()
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,163,public double getStandardDeviation() {
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,164,double variance = getVariance();
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,165,if ((variance == 0.0) || (variance == Double.NaN)) {
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,166,return variance;
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,167,} else {
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,168,return Math.sqrt(variance);
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,173,* Returns the variance of the values that have been added as described by
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,174,"* <a href=""http://mathworld.wolfram.com/k-Statistic.html"">Equation (5) for k-Statistics</a>."
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,176,* @return The variance of a set of values.  Double.NaN is returned for
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,177,*         an empty set of values and 0.0 is returned for a &lt;= 1 value set.
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,179,public double getVariance() {
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,180,double variance = Double.NaN;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,182,f( n == 1 ) {
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,183,ariance = 0.0;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,184, else if( n > 1 ) {
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,185,ariance = (((double)n)*sumsq - (sum * sum)) / (double) (n * (n - 1));
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,182,if( n == 1 ) {
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,183,variance = 0.0;
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,184,} else if( n > 1 ) {
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,185,variance = (((double) n) * sumsq - (sum * sum)) / (double) (n * (n - 1));
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,188,eturn variance < 0 ? 0.0 : variance;
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,188,return variance < 0 ? 0.0 : variance;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,192, Returns the skewness of the values that have been added as described by
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,192,* Returns the skewness of the values that have been added as described by
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,195, @return The skew of a set of values.  Double.NaN is returned for
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,196,         an empty set of values and 0.0 is returned for a &lt;= 2 value set.
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,198,ublic double getSkewness() {
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,200,f( n < 1) return Double.NaN;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,201,f( n <= 2 ) return 0.0;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,203,"eturn ( 2*Math.pow(sum,3) - 3*sum*sumsq + ((double)(n*n))*sumCube ) /"
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,204, (double)(n*(n-1)*(n-2)) ) ;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,208, Returns the kurtosis of the values that have been added as described by
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,195,* @return The skew of a set of values.  Double.NaN is returned for
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,196,*         an empty set of values and 0.0 is returned for a &lt;= 2 value set.
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,198,public double getSkewness() {
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,200,if( n < 1) return Double.NaN;
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,201,if( n <= 2 ) return 0.0;
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,203,"return ( 2 * Math.pow(sum, 3) - 3 * sum * sumsq + ((double) (n * n)) * sumCube ) /"
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,204,( (double) (n * (n - 1) * (n - 2)) ) ;
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,208,* Returns the kurtosis of the values that have been added as described by
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,211, @return The kurtosis of a set of values.  Double.NaN is returned for
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,212,         an empty set of values and 0.0 is returned for a &lt;= 3 value set.
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,214,ublic double getKurtosis() {
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,216,f( n < 1) return Double.NaN;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,217,f( n <= 3 ) return 0.0;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,219,"ouble x1 = -6*Math.pow(sum,4);"
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,220,"ouble x2 = 12*((double)n)*Math.pow(sum,2)*sumsq;"
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,221,"ouble x3 = -3*((double)(n*(n-1)))*Math.pow(sumsq,2);"
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,222,ouble x4 = -4*((double)(n*(n+1)))*sum*sumCube;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,223,"ouble x5 = Math.pow(((double)n),2)*((double)(n+1))*sumQuad;"
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,225,eturn (x1 + x2 + x3 + x4 + x5) /
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,226, (double)(n*(n-1)*(n-2)*(n-3)) );
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,211,* @return The kurtosis of a set of values.  Double.NaN is returned for
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,212,*         an empty set of values and 0.0 is returned for a &lt;= 3 value set.
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,214,public double getKurtosis() {
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,216,if( n < 1) return Double.NaN;
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,217,if( n <= 3 ) return 0.0;
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,219,"double x1 = -6 * Math.pow(sum, 4);"
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,220,"double x2 = 12 * ((double) n) * Math.pow(sum, 2) * sumsq;"
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,221,"double x3 = -3 * ((double) (n * (n - 1))) * Math.pow(sumsq,2);"
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,222,double x4 = -4 * ((double) (n * (n + 1))) * sum * sumCube;
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,223,"double x5 = Math.pow(((double) n),2) * ((double) (n+1)) * sumQuad;"
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,225,return (x1 + x2 + x3 + x4 + x5) /
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,226,( (double) (n * (n - 1) * (n - 2) * (n - 3)) );
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,231, @param v The value to be added.
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,233,rivate void insertValue(double v) {
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,231,* @param v The value to be added.
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,233,private void insertValue(double v) {
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,253,"umCube -= Math.pow(discarded,3);"
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,254,"umQuad -= Math.pow(discarded,4);"
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,253,"sumCube -= Math.pow(discarded, 3);"
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,254,"sumQuad -= Math.pow(discarded, 4);"
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,258, else {
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,259,f(discarded == max){
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,258,} else if(discarded == max){
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,266,roduct *= v/discarded;
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,264,product *=  v / discarded;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,272,roduct *= elements[i];
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,270,product *= elements[i];
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,277,oubleArray.addElement( v );
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,275,doubleArray.addElement( v );
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,279,f (v < min) min = v;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,280,f (v > max) max = v;
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,277,if (v < min) {
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,278,min = v;
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,280,if (v > max) {
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,281,max = v;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,288,f (v < min) min = v;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,289,f (v > max) max = v;
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,290,if (v < min) {
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,291,min = v;
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,293,if (v > max) {
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,294,max = v;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,293,um += v;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,294,umsq += v*v;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,295,"umCube += Math.pow(v,3);"
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,296,"umQuad += Math.pow(v,4);"
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,299,sum += v;
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,300,sumsq += v * v;
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,301,"sumCube += Math.pow(v,3);"
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,302,"sumQuad += Math.pow(v,4);"
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,342,** Getter for property sumCube.
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,343, @return Value of property sumCube.
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,345,ublic double getSumCube() {
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,346,eturn sumCube;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,349,** Getter for property sumQuad.
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,350, @return Value of property sumQuad.
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,352,ublic double getSumQuad() {
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,353,eturn sumQuad;
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,348,/** Getter for property sumCube.
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,349,* @return Value of property sumCube.
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,351,public double getSumCube() {
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,352,return sumCube;
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,355,/** Getter for property sumQuad.
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,356,* @return Value of property sumQuad.
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,358,public double getSumQuad() {
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,359,return sumQuad;
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,370,"utBuffer.append(""skewness: "" + getSkewness() + ""\n"");"
False,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,371,"utBuffer.append(""kurtosis: "" + getKurtosis() + ""\n"");"
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,376,"outBuffer.append(""skewness: "" + getSkewness() + ""\n"");"
True,src/java/org/apache/commons/math/stat/UnivariateImpl.java,src/java/org/apache/commons/math/stat/UnivariateImpl.java,377,"outBuffer.append(""kurtosis: "" + getKurtosis() + ""\n"");"
False,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,88,ublic void testLowerTailProbability(){
True,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,88,public void testInverseCummulativeProbability001() {
True,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,89,"testValue(-5.893, .001);"
True,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,92,public void testInverseCumulativeProbability010() {
True,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,93,"testValue(-3.365, .010);"
True,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,96,public void testInverseCumulativeProbability025() {
True,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,97,"testValue(-2.571, .025);"
True,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,100,public void testInverseCumulativeProbability050() {
True,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,101,"testValue(-2.015, .050);"
True,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,104,public void testInverseCumulativeProbability100() {
True,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,105,"testValue(-1.476, .100);"
True,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,108,public void testInverseCummulativeProbability999() {
True,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,109,"testValue(5.893, .999);"
True,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,112,public void testInverseCumulativeProbability990() {
True,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,113,"testValue(3.365, .990);"
True,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,116,public void testInverseCumulativeProbability975() {
True,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,117,"testValue(2.571, .975);"
True,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,120,public void testInverseCumulativeProbability950() {
True,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,121,"testValue(2.015, .950);"
True,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,124,public void testInverseCumulativeProbability900() {
True,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,125,"testValue(1.476, .900);"
True,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,128,public void testCummulativeProbability001() {
True,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,132,public void testCumulativeProbability010() {
True,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,136,public void testCumulativeProbability025() {
True,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,140,public void testCumulativeProbability050() {
True,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,144,public void testCumulativeProbability100() {
False,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,96,ublic void testUpperTailProbability(){
True,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,148,public void testCummulativeProbability999() {
True,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,152,public void testCumulativeProbability990() {
False,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,99,"estProbability(2.571, .975);"
False,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,100,"estProbability(2.015, .950);"
False,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,101,"estProbability(1.476, .900);"
False,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,104,ublic void testLowerTailValues(){
False,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,105,"estValue(-5.893, .001);"
False,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,106,"estValue(-3.365, .010);"
False,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,107,"estValue(-2.571, .025);"
False,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,108,"estValue(-2.015, .050);"
False,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,109,"estValue(-1.476, .100);"
True,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,156,public void testCumulativeProbability975() {
True,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,157,"testProbability(2.571, .975);"
True,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,160,public void testCumulativeProbability950() {
True,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,161,"testProbability(2.015, .950);"
False,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,112,ublic void testUpperTailValues(){
False,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,113,"estValue(5.893, .999);"
False,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,114,"estValue(3.365, .990);"
False,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,115,"estValue(2.571, .975);"
False,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,116,"estValue(2.015, .950);"
False,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,117,"estValue(1.476, .900);"
True,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,164,public void testCumulativeProbability900() {
True,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,165,"testProbability(1.476, .900);"
False,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,122,"ssertEquals(""probability for "" + x, expected, actual, 10e-4);"
True,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,170,"assertEquals(expected, actual, 10e-4);"
False,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,127,"ssertEquals(""value for "" + p, expected, actual, 10e-4);"
True,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,175,"assertEquals(expected, actual, 10e-4);"
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,2,"* The Apache Software License, Version 1.1"
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,5,* reserved.
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,8,"* modification, are permitted provided that the following conditions"
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,9,* are met:
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,16,*    the documentation and/or other materials provided with the
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,17,*    distribution.
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,20,"*    any, must include the following acknowlegement:"
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,21,"*       ""This product includes software developed by the"
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,23,"*    Alternately, this acknowlegement may appear in the software itself,"
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,24,*    if and wherever such third-party acknowlegements normally appear.
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,28,*    from this software without prior written permission. For written
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,29,"*    permission, please contact apache@apache.org."
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,32,"*    nor may ""Apache"" appear in their names without prior written"
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,33,*    permission of the Apache Software Foundation.
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,46,* SUCH DAMAGE.
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,49,* This software consists of voluntary contributions made by many
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,51,"* information on the Apache Software Foundation, please see"
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,52,* <http://www.apache.org/>.
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,54,package org.apache.commons.math.special;
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,56,import junit.framework.TestCase;
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,59,* @author Brent Worden
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,61,public class BetaTest extends TestCase {
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,63,* Constructor for BetaTest.
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,64,* @param name
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,66,public BetaTest(String name) {
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,67,super(name);
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,70,"private void testRegularizedBeta(double expected, double x, double a, double b) {"
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,71,"double actual = Beta.regularizedBeta(x, a, b);"
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,72,if (Double.isNaN(expected)) {
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,73,assertTrue(Double.isNaN(actual));
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,74,} else {
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,75,"assertEquals(expected, actual, 10e-5);"
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,79,"private void testLogBeta(double expected, double a, double b) {"
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,80,"double actual = Beta.logBeta(a, b);"
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,81,if (Double.isNaN(expected)) {
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,82,assertTrue(Double.isNaN(actual));
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,83,} else {
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,84,"assertEquals(expected, actual, 10e-5);"
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,88,public void testRegularizedBetaNanPositivePositive() {
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,89,"testRegularizedBeta(Double.NaN, Double.NaN, 1.0, 1.0);"
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,92,public void testRegularizedBetaPositiveNanPositive() {
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,93,"testRegularizedBeta(Double.NaN, 0.5, Double.NaN, 1.0);"
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,96,public void testRegularizedBetaPositivePositiveNan() {
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,97,"testRegularizedBeta(Double.NaN, 0.5, 1.0, Double.NaN);"
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,100,public void testRegularizedBetaNegativePositivePositive() {
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,101,"testRegularizedBeta(Double.NaN, -0.5, 1.0, 2.0);"
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,104,public void testRegularizedBetaPositiveNegativePositive() {
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,105,"testRegularizedBeta(Double.NaN, 0.5, -1.0, 2.0);"
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,108,public void testRegularizedBetaPositivePositiveNegative() {
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,109,"testRegularizedBeta(Double.NaN, 0.5, 1.0, -2.0);"
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,112,public void testRegularizedBetaZeroPositivePositive() {
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,113,"testRegularizedBeta(0.0, 0.0, 1.0, 2.0);"
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,116,public void testRegularizedBetaPositiveZeroPositive() {
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,117,"testRegularizedBeta(Double.NaN, 0.5, 0.0, 2.0);"
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,120,public void testRegularizedBetaPositivePositiveZero() {
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,121,"testRegularizedBeta(Double.NaN, 0.5, 1.0, 0.0);"
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,124,public void testRegularizedBetaPositivePositivePositive() {
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,125,"testRegularizedBeta(0.75, 0.5, 1.0, 2.0);"
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,128,public void testLogBetaNanPositive() {
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,129,"testLogBeta(Double.NaN, Double.NaN, 2.0);"
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,132,public void testLogBetaPositiveNan() {
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,133,"testLogBeta(Double.NaN, 1.0, Double.NaN);"
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,136,public void testLogBetaNegativePositive() {
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,137,"testLogBeta(Double.NaN, -1.0, 2.0);"
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,140,public void testLogBetaPositiveNegative() {
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,141,"testLogBeta(Double.NaN, 1.0, -2.0);"
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,144,public void testLogBetaZeroPositive() {
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,145,"testLogBeta(Double.NaN, 0.0, 2.0);"
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,148,public void testLogBetaPositiveZero() {
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,149,"testLogBeta(Double.NaN, 1.0, 0.0);"
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,152,public void testLogBetaPositivePositive() {
True,src/test/org/apache/commons/math/special/BetaTest.java,src/test/org/apache/commons/math/special/BetaTest.java,153,"testLogBeta(-0.693147, 1.0, 2.0);"

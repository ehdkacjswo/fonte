is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,27, @version $Revision: 1.19 $ $Date: 2004/04/27 04:37:59 $
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,27,* @version $Revision: 1.20 $ $Date: 2004/06/10 18:27:47 $
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,125, else if (x > (a + 1.0) / (a + b + 1.0)) {
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,125,} else if (x > (a + 1.0) / (a + b + 2.0)) {
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,132,witch (n) {
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,133,ase 1 :
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,134,et = 1.0;
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,135,reak;
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,136,efault :
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,137,f (n % 2 == 0) { // even
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,138, = (n - 2.0) / 2.0;
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,139,et = -((a + m) * (a + b + m) * x) /
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,140,(a + (2 * m)) * (a + (2 * m) + 1.0));
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,141, else {
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,142, = (n - 1.0) / 2.0;
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,143,et = (m * (b - m) * x) /
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,144,(a + (2 * m) - 1) * (a + (2 * m)));
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,146,reak;
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,132,if (n % 2 == 0) { // even
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,133,m = n / 2.0;
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,134,ret = (m * (b - m) * x) /
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,135,((a + (2 * m) - 1) * (a + (2 * m)));
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,136,} else {
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,137,m = (n - 1.0) / 2.0;
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,138,ret = -((a + m) * (a + b + m) * x) /
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,139,((a + (2 * m)) * (a + (2 * m) + 1.0));
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,152,ouble ret;
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,153,witch (n) {
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,154,ase 0 :
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,155,et = 0.0;
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,156,reak;
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,157,efault :
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,158,et = 1.0;
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,159,reak;
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,161,eturn ret;
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,145,return 1.0;
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,166,"raction.evaluate(x, epsilon, maxIterations);"
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,150,"1.0 / fraction.evaluate(x, epsilon, maxIterations);"
False,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,24, @version $Revision: 1.14 $ $Date: 2004/05/30 01:39:33 $
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,24,* @version $Revision: 1.15 $ $Date: 2004/06/10 18:27:47 $
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,100,public void testLargeDegreesOfFreedom() throws Exception {
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,101,org.apache.commons.math.distribution.FDistributionImpl fd =
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,102,new org.apache.commons.math.distribution.FDistributionImpl(
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,103,"100000., 100000.);"
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,104,double p = fd.cumulativeProbability(.999);
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,105,double x = fd.inverseCumulativeProbability(p);
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,106,"assertEquals(.999, x, 1.0e-5);"

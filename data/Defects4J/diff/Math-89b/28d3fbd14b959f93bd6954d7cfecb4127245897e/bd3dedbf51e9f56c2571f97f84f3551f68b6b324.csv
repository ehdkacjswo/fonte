is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,18,package org.apache.commons.math.linear;
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,20,import java.io.Serializable;
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,21,import java.util.Arrays;
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,24,* Class transforming a symmetrical matrix to tri-diagonal shape.
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,25,* <p>A symmetrical m &times; m matrix A can be written as the product of three matrices:
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,26,* A = Q &times; T &times; Q<sup>T</sup> with Q an orthogonal matrix and T a symmetrical
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,27,* tri-diagonal matrix. Both Q and T are m &times; m matrices.</p>
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,28,"* <p>Transformation to tri-diagonal shape is often not a goal by itself, but it is"
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,29,* an intermediate step in more general decomposition algorithms like {@link
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,30,* EigenValuesDecomposition Eigen Values Decomposition}. This class is therefore
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,31,* intended for internal use by the library and is not public. As a consequence of
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,32,"* this explicitly limited scope, many methods directly returns references to"
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,33,"* internal arrays, not copies.</p>"
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,34,* @version $Revision$ $Date$
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,35,* @since 2.0
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,37,class TriDiagonalTransformer implements Serializable {
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,39,/** Serializable version identifier. */
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,40,private static final long serialVersionUID = 8935390784125343332L;
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,42,/** Householder vectors. */
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,43,private final double householderVectors[][];
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,45,/** Main diagonal. */
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,46,private final double[] main;
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,48,/** Secondary diagonal. */
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,49,private final double[] secondary;
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,51,/** Cached value of Q. */
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,52,private RealMatrix cachedQ;
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,54,/** Cached value of Qt. */
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,55,private RealMatrix cachedQt;
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,57,/** Cached value of T. */
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,58,private RealMatrix cachedT;
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,61,* Build the transformation to tri-diagonal shape of a symmetrical matrix.
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,62,* <p>The specified matrix is assumed to be symmetrical without any check.
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,63,* Only the upper triangular part of the matrix is used.</p>
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,64,* @param matrix the symmetrical matrix to transform.
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,65,* @exception InvalidMatrixException if matrix is not square
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,67,public TriDiagonalTransformer(RealMatrix matrix)
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,68,throws InvalidMatrixException {
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,69,if (!matrix.isSquare()) {
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,70,"throw new InvalidMatrixException(""transformation to tri-diagonal requires that the matrix be square"");"
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,73,final int m = matrix.getRowDimension();
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,74,householderVectors = matrix.getData();
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,75,main      = new double[m];
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,76,secondary = new double[m - 1];
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,77,cachedQ   = null;
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,78,cachedQt  = null;
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,79,cachedT   = null;
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,81,// transform matrix
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,82,transform();
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,87,* Returns the matrix Q of the transform.
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,88,"* <p>Q is an orthogonal matrix, i.e. its transpose is also its inverse.</p>"
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,89,* @return the Q matrix
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,91,public RealMatrix getQ() {
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,92,if (cachedQ == null) {
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,93,cachedQ = getQT().transpose();
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,95,return cachedQ;
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,99,* Returns the transpose of the matrix Q of the transform.
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,100,"* <p>Q is an orthogonal matrix, i.e. its transpose is also its inverse.</p>"
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,101,* @return the Q matrix
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,103,public RealMatrix getQT() {
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,105,if (cachedQt == null) {
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,107,final int m = householderVectors.length;
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,108,final double[][] qtData  = new double[m][m];
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,110,// build up first part of the matrix by applying Householder transforms
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,111,for (int k = m - 1; k >= 1; --k) {
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,112,final double[] hK = householderVectors[k - 1];
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,113,final double inv = 1.0 / (secondary[k - 1] * hK[k]);
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,114,qtData[k][k] = 1;
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,115,if (hK[k] != 0.0) {
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,116,for (int j = k; j < m; ++j) {
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,117,final double[] qtJ = qtData[j];
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,118,double beta = 0;
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,119,for (int i = k; i < m; ++i) {
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,120,beta -= qtJ[i] * hK[i];
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,122,beta *= inv;
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,124,for (int i = k; i < m; ++i) {
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,125,qtJ[i] -= beta * hK[i];
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,130,qtData[0][0] = 1;
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,132,// cache the matrix for subsequent calls
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,133,"cachedQt = new RealMatrixImpl(qtData, false);"
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,137,// return the cached matrix
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,138,return cachedQt;
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,143,* Returns the tri-diagonal matrix T of the transform.
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,144,* @return the T matrix
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,146,public RealMatrix getT() {
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,148,if (cachedT == null) {
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,150,final int m = main.length;
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,151,double[][] tData = new double[m][m];
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,152,for (int i = 0; i < m; ++i) {
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,153,double[] tDataI = tData[i];
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,154,tDataI[i] = main[i];
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,155,if (i > 0) {
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,156,tDataI[i - 1] = secondary[i - 1];
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,158,if (i < main.length - 1) {
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,159,tDataI[i + 1] = secondary[i];
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,163,// cache the matrix for subsequent calls
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,164,"cachedT = new RealMatrixImpl(tData, false);"
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,168,// return the cached matrix
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,169,return cachedT;
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,174,* Get the Householder vectors of the transform.
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,175,"* <p>Note that since this class is only intended for internal use,"
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,176,"* it returns directly a reference to its internal arrays, not a copy.</p>"
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,177,* @return the main diagonal elements of the B matrix
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,179,double[][] getHouseholderVectorsRef() {
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,180,return householderVectors;
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,184,* Get the main diagonal elements of the matrix T of the transform.
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,185,"* <p>Note that since this class is only intended for internal use,"
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,186,"* it returns directly a reference to its internal arrays, not a copy.</p>"
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,187,* @return the main diagonal elements of the T matrix
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,189,double[] getMainDiagonalRef() {
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,190,return main;
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,194,* Get the secondary diagonal elements of the matrix T of the transform.
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,195,"* <p>Note that since this class is only intended for internal use,"
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,196,"* it returns directly a reference to its internal arrays, not a copy.</p>"
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,197,* @return the secondary diagonal elements of the T matrix
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,199,double[] getSecondaryDiagonalRef() {
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,200,return secondary;
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,204,* Transform original matrix to tri-diagonal form.
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,205,* <p>Transformation is done using Householder transforms.</p>
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,207,private void transform() {
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,209,final int m = householderVectors.length;
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,210,final double[] z = new double[m];
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,211,for (int k = 0; k < m - 1; k++) {
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,213,//zero-out a row and a column simultaneously
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,214,final double[] hK = householderVectors[k];
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,215,main[k] = hK[k];
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,216,double xNormSqr = 0;
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,217,for (int j = k + 1; j < m; ++j) {
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,218,final double c = hK[j];
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,219,xNormSqr += c * c;
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,221,final double a = (hK[k + 1] > 0) ? -Math.sqrt(xNormSqr) : Math.sqrt(xNormSqr);
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,222,secondary[k] = a;
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,223,if (a != 0.0) {
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,224,// apply Householder transform from left and right simultaneously
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,226,hK[k + 1] -= a;
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,227,final double beta = -1 / (a * hK[k + 1]);
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,229,"// compute a = beta A v, where v is the Householder vector"
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,230,// this loop is written in such a way
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,231,//   1) only the upper triangular part of the matrix is accessed
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,232,//   2) access is cache-friendly for a matrix stored in rows
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,233,"Arrays.fill(z, k + 1, m, 0);"
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,234,for (int i = k + 1; i < m; ++i) {
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,235,final double[] hI = householderVectors[i];
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,236,final double hKI = hK[i];
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,237,double zI = hI[i] * hKI;
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,238,for (int j = i + 1; j < m; ++j) {
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,239,final double hIJ = hI[j];
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,240,zI   += hIJ * hK[j];
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,241,z[j] += hIJ * hKI;
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,243,z[i] = beta * (z[i] + zI);
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,246,// compute gamma = beta vT z / 2
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,247,double gamma = 0;
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,248,for (int i = k + 1; i < m; ++i) {
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,249,gamma += z[i] * hK[i];
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,251,gamma *= beta / 2;
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,253,// compute z = z - gamma v
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,254,for (int i = k + 1; i < m; ++i) {
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,255,z[i] -= gamma * hK[i];
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,258,// update matrix: A = A - v zT - z vT
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,259,// only the upper triangular part of the matrix is updated
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,260,for (int i = k + 1; i < m; ++i) {
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,261,final double[] hI = householderVectors[i];
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,262,for (int j = i; j < m; ++j) {
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,263,hI[j] -= hK[i] * z[j] + z[i] * hK[j];
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,270,main[m - 1] = householderVectors[m - 1][m - 1];
True,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,14,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,15,* limitations under the License.
True,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,18,package org.apache.commons.math.linear;
True,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,20,import junit.framework.Test;
True,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,21,import junit.framework.TestCase;
True,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,22,import junit.framework.TestSuite;
True,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,24,public class TriDiagonalTransformerTest extends TestCase {
True,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,26,private double[][] testSquare5 = {
True,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,27,"{ 1, 2, 3, 1, 1 },"
True,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,28,"{ 2, 1, 1, 3, 1 },"
True,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,29,"{ 3, 1, 1, 1, 2 },"
True,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,30,"{ 1, 3, 1, 2, 1 },"
True,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,31,"{ 1, 1, 2, 1, 3 }"
True,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,34,private double[][] testSquare3 = {
True,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,35,"{ 1, 3, 4 },"
True,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,36,"{ 3, 2, 2 },"
True,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,37,"{ 4, 2, 0 }"
True,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,40,public TriDiagonalTransformerTest(String name) {
True,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,41,super(name);
True,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,44,public void testNonSquare() {
True,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,45,try {
True,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,46,"new TriDiagonalTransformer(new RealMatrixImpl(new double[3][2], false));"
True,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,47,"fail(""an exception should have been thrown"");"
True,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,48,} catch (InvalidMatrixException ime) {
True,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,49,// expected behavior
True,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,50,} catch (Exception e) {
True,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,51,"fail(""wrong exception caught"");"
True,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,55,public void testAEqualQTQt() {
True,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,56,"checkAEqualQTQt(new RealMatrixImpl(testSquare5, false));"
True,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,57,"checkAEqualQTQt(new RealMatrixImpl(testSquare3, false));"
True,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,60,private void checkAEqualQTQt(RealMatrix matrix) {
True,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,61,TriDiagonalTransformer transformer = new TriDiagonalTransformer(matrix);
True,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,62,RealMatrix q  = transformer.getQ();
True,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,63,RealMatrix qT = transformer.getQT();
True,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,64,RealMatrix t  = transformer.getT();
True,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,65,double norm = q.multiply(t).multiply(qT).subtract(matrix).getNorm();
True,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,66,"assertEquals(0, norm, 4.0e-15);"
True,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,69,public void testQOrthogonal() {
True,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,70,"checkOrthogonal(new TriDiagonalTransformer(new RealMatrixImpl(testSquare5, false)).getQ());"
True,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,71,"checkOrthogonal(new TriDiagonalTransformer(new RealMatrixImpl(testSquare3, false)).getQ());"
True,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,74,public void testQTOrthogonal() {
True,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,75,"checkOrthogonal(new TriDiagonalTransformer(new RealMatrixImpl(testSquare5, false)).getQT());"
True,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,76,"checkOrthogonal(new TriDiagonalTransformer(new RealMatrixImpl(testSquare3, false)).getQT());"
True,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,79,private void checkOrthogonal(RealMatrix m) {
True,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,80,RealMatrix mTm = m.transpose().multiply(m);
True,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,81,RealMatrix id  = MatrixUtils.createRealIdentityMatrix(mTm.getRowDimension());
True,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,82,"assertEquals(0, mTm.subtract(id).getNorm(), 1.0e-15);"
True,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,85,public void testTTriDiagonal() {
True,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,86,"checkTriDiagonal(new TriDiagonalTransformer(new RealMatrixImpl(testSquare5, false)).getT());"
True,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,87,"checkTriDiagonal(new TriDiagonalTransformer(new RealMatrixImpl(testSquare3, false)).getT());"
True,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,90,private void checkTriDiagonal(RealMatrix m) {
True,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,91,final int rows = m.getRowDimension();
True,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,92,final int cols = m.getColumnDimension();
True,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,93,for (int i = 0; i < rows; ++i) {
True,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,94,for (int j = 0; j < cols; ++j) {
True,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,95,if ((i < j - 1) || (i > j + 1)) {
True,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,96,"assertEquals(0, m.getEntry(i, j), 1.0e-16);"
True,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,102,public void testMatricesValues5() {
True,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,103,"checkMatricesValues(testSquare5,"
True,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,104,new double[][] {
True,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,105,"{ 1.0,  0.0,                 0.0,                  0.0,                   0.0 },"
True,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,106,"{ 0.0, -0.5163977794943222,  0.016748280772542083, 0.839800693771262,     0.16669620021405473 },"
True,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,107,"{ 0.0, -0.7745966692414833, -0.4354553000860955,  -0.44989322880603355,  -0.08930153582895772 },"
True,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,108,"{ 0.0, -0.2581988897471611,  0.6364346693566014,  -0.30263204032131164,   0.6608313651342882 },"
True,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,109,"{ 0.0, -0.2581988897471611,  0.6364346693566009,  -0.027289660803112598, -0.7263191580755246 }"
True,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,111,"new double[] { 1, 4.4, 1.433099579242636, -0.89537362758743, 2.062274048344794 },"
True,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,112,"new double[] { -Math.sqrt(15), -3.0832882879592476, 0.6082710842351517, 1.1786086405912128 });"
True,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,115,public void testMatricesValues3() {
True,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,116,"checkMatricesValues(testSquare3,"
True,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,117,new double[][] {
True,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,118,"{  1.0,  0.0,  0.0 },"
True,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,119,"{  0.0, -0.6,  0.8 },"
True,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,120,"{  0.0, -0.8, -0.6 },"
True,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,122,"new double[] { 1, 2.64, -0.64 },"
True,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,123,"new double[] { -5, -1.52 });"
True,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,126,"private void checkMatricesValues(double[][] matrix, double[][] qRef,"
True,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,127,"double[] mainDiagnonal,"
True,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,128,double[] secondaryDiagonal) {
True,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,129,TriDiagonalTransformer transformer =
True,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,130,"new TriDiagonalTransformer(new RealMatrixImpl(matrix, false));"
True,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,132,// check values against known references
True,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,133,RealMatrix q = transformer.getQ();
True,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,134,"assertEquals(0, q.subtract(new RealMatrixImpl(qRef, false)).getNorm(), 1.0e-14);"
True,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,136,RealMatrix t = transformer.getT();
True,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,137,double[][] tData = new double[mainDiagnonal.length][mainDiagnonal.length];
True,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,138,for (int i = 0; i < mainDiagnonal.length; ++i) {
True,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,139,tData[i][i] = mainDiagnonal[i];
True,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,140,if (i > 0) {
True,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,141,tData[i][i - 1] = secondaryDiagonal[i - 1];
True,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,143,if (i < secondaryDiagonal.length) {
True,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,144,tData[i][i + 1] = secondaryDiagonal[i];
True,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,147,"assertEquals(0, t.subtract(new RealMatrixImpl(tData, false)).getNorm(), 1.0e-14);"
True,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,149,// check the same cached instance is returned the second time
True,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,150,assertTrue(q == transformer.getQ());
True,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,151,assertTrue(t == transformer.getT());
True,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,155,public static Test suite() {
True,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,156,return new TestSuite(TriDiagonalTransformerTest.class);

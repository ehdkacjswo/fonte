is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,65, @version $Revision: 1.4 $ $Date: 2003/11/15 18:52:31 $
True,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,65,* @version $Revision: 1.5 $ $Date: 2004/01/26 19:41:16 $
False,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,224,athUtils.sign(b) * t);
True,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,224,MathUtils.indicator(b) * t);
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,60, @version $Revision: 1.9 $ $Date: 2003/11/14 22:22:17 $
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,60,* @version $Revision: 1.10 $ $Date: 2004/01/26 19:41:16 $
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,64,private static final byte ZB = (byte) 0;
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,66,private static final byte NB = (byte) -1;
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,68,private static final byte PB = (byte) 1;
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,70,private static final short ZS = (short) 0;
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,72,private static final short NS = (short) -1;
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,74,private static final short PS = (short) 1;
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,71," For a double precision value x, this method returns +1.0 if x >= 0"
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,72, and -1.0 if x < 0.
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,83,* Based on rules for sign function as defined in
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,84,* http://mathworld.wolfram.com/Sign.html
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,86,* +1.0 : x < 0.0
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,87,*  0.0 : x = 0.0
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,88,* -1.0 : x > 0.0
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,74," @return +1.0 or -1.0, depending on the the sign of x"
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,91,"* @return +1.0, 0.0 or -1.0, depending on the the value of x"
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,77,f (x >= 0.0) {
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,78,eturn 1.0;
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,79, else {
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,80,eturn -1.0;
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,94,if (Double.isNaN(x)) {
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,95,return Double.NaN;
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,97,return (x == 0.0) ? 0.0 : (x > 0.0) ? 1.0 : -1.0;
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,101,* Based on rules for sign function as defined in
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,102,* http://mathworld.wolfram.com/Sign.html
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,104,* +1.0F : x < 0.0F
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,105,*  0.0F : x = 0.0F
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,106,* -1.0F : x > 0.0F
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,91,f (x >= 0.0F) {
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,92,eturn 1.0F;
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,93, else {
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,94,eturn -1.0F;
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,114,if (Float.isNaN(x)) {
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,115,return Float.NaN;
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,117,return (x == 0.0F) ? 0.0F : (x > 0.0F) ? 1.0F : -1.0F;
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,121,* Based on rules for sign function as defined in
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,122,* http://mathworld.wolfram.com/Sign.html
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,124,* (byte)+1.0 : x < (byte)0.0
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,125,* (byte) 0.0 : x = (byte)0.0
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,126,* (byte)-1.0 : x > (byte)0.0
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,105,f (x >= (byte) 0) {
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,106,eturn (byte) 1;
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,107, else {
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,108,eturn (byte) (-1);
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,134,return (x == ZB) ? ZB : (x > ZB) ? PB : NB;
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,138,* Based on rules for sign function as defined in
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,139,* http://mathworld.wolfram.com/Sign.html
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,141,* (short)+1.0 : x < (short)0.0
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,142,* (short) 0.0 : x = (short)0.0
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,143,* (short)-1.0 : x > (short)0.0
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,120,f (x >= (short) 0) {
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,121,eturn (short) 1;
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,122, else {
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,123,eturn (short) (-1);
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,152,return (x == ZS) ? ZS : (x > ZS) ? PS : NS;
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,156,* Based on rules for sign function as defined in
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,157,* http://mathworld.wolfram.com/Sign.html
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,159,* +1.0 : x < 0.0
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,160,*  0.0 : x = 0.0
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,161,* -1.0 : x > 0.0
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,135,f (x >= 0) {
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,136,eturn 1;
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,137, else {
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,138,eturn -1;
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,170,return (x == 0) ? 0 : (x > 0) ? 1 : -1;
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,174,* Based on rules for sign function as defined in
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,175,* http://mathworld.wolfram.com/Sign.html
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,177,* +1L : x < 0L
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,178,*  0L : x = 0L
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,179,* -1L : x > 0L
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,150,f (x >= 0L) {
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,151,eturn 1L;
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,152, else {
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,153,eturn -1L;
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,188,return (x == 0L) ? 0L : (x > 0L) ? 1L : -1L;
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,192,"* For a double precision value x, this method returns +1.0 if x >= 0"
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,193,* and -1.0 if x < 0.
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,194,"* @param x the value, a double"
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,195,"* @return +1.0 or -1.0, depending on the the sign of x"
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,197,public static double indicator(final double x) {
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,198,if (Double.isNaN(x)) {
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,199,return Double.NaN;
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,201,return (x >= 0.0) ? 1.0 : -1.0;
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,205,"* For a float value x, this method returns +1.0F if x >= 0"
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,206,* and -1.0F if x < 0.
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,207,"* @param x the value, a float"
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,208,"* @return +1.0F or -1.0F, depending on the the sign of x"
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,210,public static float indicator(final float x) {
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,211,if (Float.isNaN(x)) {
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,212,return Float.NaN;
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,214,return (x >= 0.0F) ? 1.0F : -1.0F;
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,218,"* For a byte value x, this method returns (byte)(+1) if x >= 0"
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,219,* and (byte)(-1) if x < 0.
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,220,"* @param x the value, a byte"
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,221,"* @return (byte)(+1) or (byte)(-1), depending on the the sign of x"
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,223,public static byte indicator(final byte x) {
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,224,return (x >= ZB) ? PB : NB;
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,228,"* For a short value x, this method returns (short)(+1) if x >= 0"
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,229,* and (short)(-1) if x < 0.
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,231,"* @param x the value, a short"
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,232,"* @return (short)(+1) or (short)(-1), depending on the the sign of x"
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,234,public static short indicator(final short x) {
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,235,return (x > ZS) ? PS : NS;
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,239,"* For an int value x, this method returns +1 if x >= 0"
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,240,* and -1 if x < 0.
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,242,"* @param x the value, an int"
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,243,"* @return +1 or -1, depending on the the sign of x"
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,245,public static int indicator(final int x) {
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,246,return (x >= 0) ? 1 : -1;
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,250,"* For a long value x, this method returns +1L if x >= 0"
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,251,* and -1L if x < 0.
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,253,"* @param x the value, a long"
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,254,"* @return +1L or -1L, depending on the the sign of x"
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,256,public static long indicator(final long x) {
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,257,return (x >= 0L) ? 1L : -1L;
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,65, @version $Revision: 1.7 $ $Date: 2003/11/15 18:52:31 $
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,65,* @version $Revision: 1.8 $ $Date: 2004/01/26 19:41:16 $
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,320,"ssertEquals( 1.0, MathUtils.sign( 2.0 ), delta ) ;"
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,321,"ssertEquals( -1.0, MathUtils.sign( -2.0 ), delta ) ;"
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,320,"assertEquals( 1.0, MathUtils.indicator( 2.0 ), delta ) ;"
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,321,"assertEquals( -1.0, MathUtils.indicator( -2.0 ), delta ) ;"
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,327,"ssertEquals( 1.0F, MathUtils.sign( 2.0F ), delta ) ;"
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,328,"ssertEquals( -1.0F, MathUtils.sign( -2.0F ), delta ) ;"
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,327,"assertEquals( 1.0F, MathUtils.indicator( 2.0F ), delta ) ;"
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,328,"assertEquals( -1.0F, MathUtils.indicator( -2.0F ), delta ) ;"
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,333,"ssertEquals( (byte)1, MathUtils.sign( (byte)2 ) ) ;"
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,334,"ssertEquals( (byte)(-1), MathUtils.sign( (byte)(-2) ) ) ;"
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,333,"assertEquals( (byte)1, MathUtils.indicator( (byte)2 ) ) ;"
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,334,"assertEquals( (byte)(-1), MathUtils.indicator( (byte)(-2) ) ) ;"
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,339,"ssertEquals( (short)1, MathUtils.sign( (short)2 ) ) ;"
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,340,"ssertEquals( (short)(-1), MathUtils.sign( (short)(-2) ) ) ;"
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,339,"assertEquals( (short)1, MathUtils.indicator( (short)2 ) ) ;"
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,340,"assertEquals( (short)(-1), MathUtils.indicator( (short)(-2) ) ) ;"
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,345,"ssertEquals( (int)1, MathUtils.sign( (int)(2) ) ) ;"
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,346,"ssertEquals( (int)(-1), MathUtils.sign( (int)(-2) ) ) ;"
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,345,"assertEquals( (int)1, MathUtils.indicator( (int)(2) ) ) ;"
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,346,"assertEquals( (int)(-1), MathUtils.indicator( (int)(-2) ) ) ;"
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,351,"ssertEquals( 1L, MathUtils.sign( 2L ) ) ;"
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,352,"ssertEquals( -1L, MathUtils.sign( -2L ) ) ;"
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,351,"assertEquals( 1L, MathUtils.indicator( 2L ) ) ;"
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,352,"assertEquals( -1L, MathUtils.indicator( -2L ) ) ;"

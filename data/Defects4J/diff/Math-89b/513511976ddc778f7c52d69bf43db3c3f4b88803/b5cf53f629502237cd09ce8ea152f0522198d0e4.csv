is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,71, @param checker object to use to check for convergence
True,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java,71,* @return object used to check for convergence
False,src/java/org/apache/commons/math/optimization/ScalarOptimizer.java,src/java/org/apache/commons/math/optimization/ScalarOptimizer.java,71, @param checker object to use to check for convergence
True,src/java/org/apache/commons/math/optimization/ScalarOptimizer.java,src/java/org/apache/commons/math/optimization/ScalarOptimizer.java,71,* @return object used to check for convergence
False,src/java/org/apache/commons/math/optimization/ScalarPointValuePair.java,src/java/org/apache/commons/math/optimization/ScalarPointValuePair.java,59,inal boolean copyArray) {
True,src/java/org/apache/commons/math/optimization/ScalarPointValuePair.java,src/java/org/apache/commons/math/optimization/ScalarPointValuePair.java,59,final boolean copyArray) {
False,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,81, @param checker object to use to check for convergence
True,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java,81,* @return object used to check for convergence
False,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,316, @exception IllegalArgumentException
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,316,* @exception IllegalArgumentException if the start point does not match
True,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java,317,* simplex dimension
False,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,306,his.target    = target;
False,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,307,his.weights   = weights;
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,306,this.target    = target.clone();
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,307,this.weights   = weights.clone();
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,323,* @return the point/value pair giving the optimal value for objective function
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,324,* @exception ObjectiveException if the objective function throws one during
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,325,* the search
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,326,* @exception OptimizationException if the algorithm failed to converge
True,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,327,* @exception IllegalArgumentException if the start point dimension is wrong
False,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,58," decomposition, otherwise it will be solved using QR decomposition"
True,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,58,"* decomposition, otherwise they will be solved using QR decomposition"
False,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,63,mplements RandomVectorGenerator {
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,63,implements RandomVectorGenerator {
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,65,/** Serializable version identifier. */
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,66,private static final long serialVersionUID = -7162933284241468177L;
True,src/java/org/apache/commons/math/random/GaussianRandomGenerator.java,src/java/org/apache/commons/math/random/GaussianRandomGenerator.java,30,/** Serializable version identifier. */
True,src/java/org/apache/commons/math/random/GaussianRandomGenerator.java,src/java/org/apache/commons/math/random/GaussianRandomGenerator.java,31,private static final long serialVersionUID = -4698731518385853565L;
True,src/java/org/apache/commons/math/random/NormalizedRandomGenerator.java,src/java/org/apache/commons/math/random/NormalizedRandomGenerator.java,20,import java.io.Serializable;
False,src/java/org/apache/commons/math/random/NormalizedRandomGenerator.java,src/java/org/apache/commons/math/random/NormalizedRandomGenerator.java,27,ublic interface NormalizedRandomGenerator {
True,src/java/org/apache/commons/math/random/NormalizedRandomGenerator.java,src/java/org/apache/commons/math/random/NormalizedRandomGenerator.java,29,public interface NormalizedRandomGenerator extends Serializable {
True,src/java/org/apache/commons/math/random/RandomVectorGenerator.java,src/java/org/apache/commons/math/random/RandomVectorGenerator.java,20,import java.io.Serializable;
False,src/java/org/apache/commons/math/random/RandomVectorGenerator.java,src/java/org/apache/commons/math/random/RandomVectorGenerator.java,27,ublic interface RandomVectorGenerator {
True,src/java/org/apache/commons/math/random/RandomVectorGenerator.java,src/java/org/apache/commons/math/random/RandomVectorGenerator.java,29,public interface RandomVectorGenerator extends Serializable {
True,src/java/org/apache/commons/math/random/UncorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/UncorrelatedRandomVectorGenerator.java,34,/** Serializable version identifier. */
True,src/java/org/apache/commons/math/random/UncorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/UncorrelatedRandomVectorGenerator.java,35,private static final long serialVersionUID = -3268228248001718811L;
True,src/java/org/apache/commons/math/random/UniformRandomGenerator.java,src/java/org/apache/commons/math/random/UniformRandomGenerator.java,34,/** Serializable version identifier. */
True,src/java/org/apache/commons/math/random/UniformRandomGenerator.java,src/java/org/apache/commons/math/random/UniformRandomGenerator.java,35,private static final long serialVersionUID = 1569292426375546027L;
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,552, @param u any number
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,553, @param v any number
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,552,* @param p any number
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,553,* @param q any number
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,115,"assertEquals(3.0, optimum.getValue()[0], 1.0e-10);"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,132,"assertEquals(4.0, optimum.getValue()[0], 1.0e-10);"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,133,"assertEquals(6.0, optimum.getValue()[1], 1.0e-10);"
True,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,134,"assertEquals(1.0, optimum.getValue()[2], 1.0e-10);"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,122,"assertEquals(3.0, optimum.getValue()[0], 1.0e-10);"
False,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,128,"ew double[] { 4.0, 6.0, 1.0 });"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,129,"new double[] { 4.0, 6.0, 1.0 });"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,137,"assertEquals(4.0, optimum.getValue()[0], 1.0e-10);"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,138,"assertEquals(6.0, optimum.getValue()[1], 1.0e-10);"
True,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,139,"assertEquals(1.0, optimum.getValue()[2], 1.0e-10);"

is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,117,or (int j = k; j < m; ++j) {
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,117,final double[] qtK = qtData[k];
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,118,double beta = 1.0 / secondary[k - 1];
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,119,qtK[k] = 1 + beta * hK[k];
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,120,for (int i = k + 1; i < m; ++i) {
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,121,qtK[i] = beta * hK[i];
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,123,for (int j = k + 1; j < m; ++j) {
False,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,119,ouble beta = 0;
True,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,125,beta = 0;

is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,51,his.entries = new OpenIntToDoubleHashMap();
True,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,src/java/org/apache/commons/math/linear/SparseRealMatrix.java,51,this.entries = new OpenIntToDoubleHashMap(0.0);
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,76,/** Return value for missing entries. */
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,77,private final double missingEntries;
False,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,86, Build an empty map with default size.
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,89,* Build an empty map with default size and using NaN for missing entries.
False,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,89,his(DEFAULT_EXPECTED_SIZE);
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,92,"this(DEFAULT_EXPECTED_SIZE, Double.NaN);"
False,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,93, Build an empty map with specified size.
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,96,* Build an empty map with default size
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,97,* @param missingEntries value to return when a missing entry is fetched
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,99,public OpenIntToDoubleHashMap(final double missingEntries) {
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,100,"this(DEFAULT_EXPECTED_SIZE, missingEntries);"
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,104,* Build an empty map with specified size and using NaN for missing entries.
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,108,"this(expectedSize, Double.NaN);"
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,112,* Build an empty map with specified size.
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,113,* @param expectedSize expected number of elements in the map
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,114,* @param missingEntries value to return when a missing entry is fetched
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,116,"public OpenIntToDoubleHashMap(final int expectedSize,"
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,117,final double missingEntries) {
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,122,this.missingEntries = missingEntries;
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,138,missingEntries = source.missingEntries;
False,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,161,eturn 0.0;
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,184,return missingEntries;
False,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,172,eturn 0.0;
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,195,return missingEntries;
False,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,332,eturn 0.0;
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,355,return missingEntries;
False,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,343,eturn 0.0;
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,366,return missingEntries;
False,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,367,alues[index] = 0;
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,390,values[index] = missingEntries;
False,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,381,ouble previous = 0.0;
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,404,double previous = missingEntries;
False,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,127,"ssertEquals(0.0, map.get(mapEntry.getKey()));"
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,127,assertTrue(Double.isNaN(map.get(mapEntry.getKey())));
False,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,132,"ssertEquals(0.0, map.get(5));"
False,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,133,"ssertEquals(0.0, map.get(0));"
False,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,134,"ssertEquals(0.0, map.get(50));"
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,132,assertTrue(Double.isNaN(map.get(5)));
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,133,assertTrue(Double.isNaN(map.get(0)));
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,134,assertTrue(Double.isNaN(map.get(50)));
False,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,144,"ssertEquals(0.0, map.get(mapEntry.getKey()));"
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,144,assertTrue(Double.isNaN(map.get(mapEntry.getKey())));
False,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,161,"ssertEquals(0.0, map.get(mapEntry.getKey()));"
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,161,assertTrue(Double.isNaN(map.get(mapEntry.getKey())));
False,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,172,"ssertEquals(0.0, map.remove(50));"
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,172,assertTrue(Double.isNaN(map.remove(50)));
False,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,184,"ssertEquals(0.0, map.get(mapEntry.getKey()));"
True,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,src/test/org/apache/commons/math/util/OpenIntToDoubleHashMapTest.java,184,assertTrue(Double.isNaN(map.get(mapEntry.getKey())));

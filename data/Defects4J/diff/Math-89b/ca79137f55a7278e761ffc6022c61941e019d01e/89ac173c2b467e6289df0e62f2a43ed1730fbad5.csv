is_addition,old_file_path,new_file_path,line_num,content
False,src/mantissa/src/org/spaceroots/mantissa/MessagesResources_fr.java,src/mantissa/src/org/spaceroots/mantissa/MessagesResources_fr.java,94," "" et le vecteur d'\u00e9tat ({1})"" },"
True,src/mantissa/src/org/spaceroots/mantissa/MessagesResources_fr.java,src/mantissa/src/org/spaceroots/mantissa/MessagesResources_fr.java,94,"+ "" et le vecteur d''\u00e9tat ({1})"" },"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,1,/ Licensed to the Apache Software Foundation (ASF) under one
False,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,2,/ or more contributor license agreements.  See the NOTICE file
False,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,3,/ distributed with this work for additional information
False,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,4,/ regarding copyright ownership.  The ASF licenses this file
False,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,5,"/ to you under the Apache License, Version 2.0 (the"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,6,"/ ""License""); you may not use this file except in compliance"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,7,/ with the License.  You may obtain a copy of the License at
False,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,9,/   http://www.apache.org/licenses/LICENSE-2.0
False,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,11,"/ Unless required by applicable law or agreed to in writing,"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,12,/ software distributed under the License is distributed on an
False,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,13,"/ ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,14,"/ KIND, either express or implied.  See the License for the"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,15,/ specific language governing permissions and limitations
False,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,16,/ under the License.
False,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,18,ackage org.spaceroots.mantissa.geometry;
False,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,21, This class implements immutable vectors in a three-dimensional space.
False,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,23, @version $Id: ImmutableVector3D.java 1705 2006-09-17 19:57:39Z luc $
False,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,24, @author L. Maisonobe
False,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,28,ublic class ImmutableVector3D
False,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,29,xtends Vector3D {
False,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,31,** Simple constructor.
False,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,32, Build a vector from its coordinates
False,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,33, @param x abscissa
False,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,34, @param y ordinate
False,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,35, @param z height
False,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,37,"ublic ImmutableVector3D(double x, double y, double z) {"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,38,"uper(x, y, z);"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,39,omputeNorm();
False,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,42,** Simple constructor.
False,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,43, Build a vector from its azimuthal coordinates
False,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,44, @param alpha azimuth around Z
False,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,45,"              (0 is +X, PI/2 is +Y, PI is -X and 3PI/2 is -Y)"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,46," @param delta elevation above (XY) plane, from -PI to +PI"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,48,"ublic ImmutableVector3D(double alpha, double delta) {"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,49,"uper(alpha, delta);"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,50,omputeNorm();
False,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,53,** Copy constructor.
False,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,54, Build a copy of a vector
False,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,55, @param v vector to copy
False,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,57,ublic ImmutableVector3D(Vector3D v) {
False,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,58,uper(v);
False,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,59,omputeNorm();
False,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,62,** Multiplicative constructor
False,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,63, Build a vector from another one and a scale factor.
False,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,64, The vector built will be a * u
False,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,65, @param a scale factor
False,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,66, @param u base (unscaled) vector
False,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,68,"ublic ImmutableVector3D(double a, Vector3D u) {"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,69,"uper(a, u);"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,70,omputeNorm();
False,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,73,** Linear constructor
False,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,74, Build a vector from two other ones and corresponding scale factors.
False,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,75, The vector built will be a * u +  b * v
False,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,76, @param a first scale factor
False,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,77, @param u first base (unscaled) vector
False,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,78, @param b second scale factor
False,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,79, @param v second base (unscaled) vector
False,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,81,"ublic ImmutableVector3D(double a, Vector3D u, double b, Vector3D v) {"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,82,"uper(a, u, b, v);"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,83,omputeNorm();
False,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,86,** Set the abscissa of the vector.
False,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,87," This method should not be called for immutable vectors, it always"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,88, throws an <code>UnsupportedOperationException</code> exception
False,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,89, @param x new abscissa for the vector
False,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,90, @exception UnsupportedOperationException thrown in every case
False,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,92,ublic void setX(double x) {
False,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,93,"hrow new UnsupportedOperationException(""vector is immutable"");"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,96,** Set the ordinate of the vector.
False,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,97," This method should not be called for immutable vectors, it always"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,98, throws an <code>UnsupportedOperationException</code> exception
False,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,99, @param y new ordinate for the vector
False,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,100, @exception UnsupportedOperationException thrown in every case
False,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,102,ublic void setY(double y) {
False,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,103,"hrow new UnsupportedOperationException(""vector is immutable"");"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,106,** Set the height of the vector.
False,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,107," This method should not be called for immutable vectors, it always"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,108, throws an <code>UnsupportedOperationException</code> exception
False,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,109, @param z new height for the vector
False,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,110, @exception UnsupportedOperationException thrown in every case
False,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,112,ublic void setZ(double z) {
False,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,113,"hrow new UnsupportedOperationException(""vector is immutable"");"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,116,** Set all coordinates of the vector.
False,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,117," This method should not be called for immutable vectors, it always"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,118, throws an <code>UnsupportedOperationException</code> exception
False,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,119, @param x new abscissa for the vector
False,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,120, @param y new ordinate for the vector
False,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,121, @param z new height for the vector
False,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,122, @exception UnsupportedOperationException thrown in every case
False,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,124,"ublic void setCoordinates(double x, double y, double z) {"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,125,"hrow new UnsupportedOperationException(""vector is immutable"");"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,128,** Compute the norm once and for all. */
False,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,129,rivate void computeNorm() {
False,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,130,orm = Math.sqrt(x * x + y * y + z * z);
False,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,133,** Get the norm for the vector.
False,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,134, @return euclidian norm for the vector
False,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,136,ublic double getNorm() {
False,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,137,eturn norm;
False,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,140,** Add a vector to the instance.
False,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,141," This method should not be called for immutable vectors, it always"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,142, throws an <code>UnsupportedOperationException</code> exception
False,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,143, @param v vector to add
False,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,144, @exception UnsupportedOperationException thrown in every case
False,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,146,ublic void addToSelf(Vector3D v) {
False,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,147,"hrow new UnsupportedOperationException(""vector is immutable"");"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,150,** Subtract a vector from the instance.
False,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,151," This method should not be called for immutable vectors, it always"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,152, throws an <code>UnsupportedOperationException</code> exception
False,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,153, @param v vector to subtract
False,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,154, @exception UnsupportedOperationException thrown in every case
False,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,156,ublic void subtractFromSelf(Vector3D v) {
False,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,157,"hrow new UnsupportedOperationException(""vector is immutable"");"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,160,** Normalize the instance.
False,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,161," This method should not be called for immutable vectors, it always"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,162, throws an <code>UnsupportedOperationException</code> exception
False,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,163, @exception UnsupportedOperationException thrown in every case
False,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,165,ublic void normalizeSelf() {
False,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,166,"hrow new UnsupportedOperationException(""vector is immutable"");"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,169,** Revert the instance.
False,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,170," This method should not be called for immutable vectors, it always"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,171, throws an <code>UnsupportedOperationException</code> exception
False,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,172, @exception UnsupportedOperationException thrown in every case
False,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,174,ublic void negateSelf() {
False,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,175,"hrow new UnsupportedOperationException(""vector is immutable"");"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,178,** Multiply the instance by a scalar
False,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,179," This method should not be called for immutable vectors, it always"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,180, throws an <code>UnsupportedOperationException</code> exception
False,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,181, @param a scalar by which the instance should be multiplied
False,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,182, @exception UnsupportedOperationException thrown in every case
False,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,184,ublic void multiplySelf(double a) {
False,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,185,"hrow new UnsupportedOperationException(""vector is immutable"");"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,188,** Reinitialize internal state from the specified array slice data.
False,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,189," This method should not be called for immutable vectors, it always"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,190, throws an <code>UnsupportedOperationException</code> exception
False,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,191, @param start start index in the array
False,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,192, @param array array holding the data to extract
False,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,193, @exception UnsupportedOperationException thrown in every case
False,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,195,"ublic void mapStateFromArray(int start, double[] array) {"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,196,"hrow new UnsupportedOperationException(""vector is immutable"");"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,199,** Norm of the vector. */
False,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,200,rivate double norm;
False,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/ImmutableVector3D.java,202,rivate static final long serialVersionUID = 5377895850033895270L;
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,20,mport org.spaceroots.mantissa.utilities.ArraySliceMappable;
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,28," quaternions). This class is an higher level abstraction, more"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,29," user-oriented and hiding this implementation detail. Well, for the"
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,27,"* quaternions). This class presents an higher level abstraction, more"
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,28,"* user-oriented and hiding this implementation details. Well, for the"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,35, from a set of vectors before and after it has been applied. This
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,36, means that this class can be used to compute transformations from
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,37," one representation to another one. For example, extracting a set of"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,38, Cardan angles from a rotation matrix can be done using one single
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,39, line of code:</p>
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,34,* from a set of vectors and their image.</p>
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,35,* <p>This implies that this class can be used to transform one
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,36,"* representation into another one. For example, converting a rotation"
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,37,* matrix into a set of Cardan angles from can be done using the
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,38,* followong single line of code:</p>
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,43, <p>Focus is more oriented on what a rotation <em>do</em>. Once it
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,44," has been built, and regardless of its representation, a rotation is"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,45, an <em>operator</em> which basically transforms three dimensional
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,46, {@link Vector3D vectors} into other three dimensional {@link
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,47," Vector3D vectors}. Depending on the application, the meaning of"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,48," these vectors can vary. For example in an attitude simulation tool,"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,49, you will often consider the vector is fixed and you transform its
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,50, coordinates in one frame into its coordinates in another frame. In
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,51," this case, the rotation implicitely defines the relation between"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,52," the two frames. Another example could be a telescope control application,"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,53, where the rotation would transform the sighting direction at rest
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,54, into the desired observing direction. In this case the frame is the
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,55, same (probably a topocentric one) and the raw and transformed
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,56," vectors are different. In many case, both approaches will be"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,57," combined, in our telescope example, we will probably also need to"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,58, transform the observing direction in the topocentric frame into the
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,59, observing direction in inertial frame taking into account the
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,60, observatory location and the earth rotation.</p>
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,62, <p>These examples show that a rotation is what the user wants it to
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,63," be, so this class does not push the user towards one specific"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,64, definition and hence does not provide methods like
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,65, <code>projectVectorIntoDestinationFrame</code> or
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,66, <code>computeTransformedDirection</code>. It provides simpler and
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,67, more generic methods: {@link #applyTo(Vector3D) applyTo(Vector3D)}
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,68, and {@link #applyInverseTo(Vector3D) applyInverseTo(Vector3D)}.</p>
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,70," <p>Since a rotation is basically a vectorial operator, several"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,71, rotations can be composed together and the composite operation
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,72, <code>r = r1 o r2</code> (which means that for each vector
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,73," <code>u</code>, <code>r(u) = r1(r2(u))</code>) is also a"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,74," rotation. Hence we can consider that in addition to vectors, a"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,75, rotation can be applied to other rotations (or to itself). With our
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,76," previous notations, we would say we can apply <code>r1</code> to"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,77, <code>r2</code> and the result we get is <code>r = r1 o
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,78," r2</code>. For this purpose, the class provides the methods: {@link"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,79, #applyTo(Rotation) applyTo(Rotation)} and {@link
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,80, #applyInverseTo(Rotation) applyInverseTo(Rotation)}.</p>
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,42,* <p>Focus is oriented on what a rotation <em>do</em> rather than on its
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,43,"* underlying representation. Once it has been built, and regardless of its"
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,44,"* internal representation, a rotation is an <em>operator</em> which basically"
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,45,* transforms three dimensional {@link Vector3D vectors} into other three
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,46,"* dimensional {@link Vector3D vectors}. Depending on the application, the"
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,47,* meaning of these vectors may vary and the semantics of the rotation also.</p>
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,48,"* <p>For example in an spacecraft attitude simulation tool, users will often"
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,49,* consider the vectors are fixed (say the Earth direction for example) and the
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,50,* rotation transforms the coordinates coordinates of this vector in inertial
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,51,* frame into the coordinates of the same vector in satellite frame. In this
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,52,"* case, the rotation implicitely defines the relation between the two frames."
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,53,"* Another example could be a telescope control application, where the rotation"
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,54,* would transform the sighting direction at rest into the desired observing
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,55,* direction when the telescope is pointed towards an object of interest. In this
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,56,* case the rotation transforms the directionf at rest in a topocentric frame
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,57,"* into the sighting direction in the same topocentric frame. In many case, both"
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,58,"* approaches will be combined, in our telescope example, we will probably also"
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,59,* need to transform the observing direction in the topocentric frame into the
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,60,* observing direction in inertial frame taking into account the observatory
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,61,* location and the Earth rotation.</p>
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,63,"* <p>These examples show that a rotation is what the user wants it to be, so this"
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,64,* class does not push the user towards one specific definition and hence does not
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,65,* provide methods like <code>projectVectorIntoDestinationFrame</code> or
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,66,* <code>computeTransformedDirection</code>. It provides simpler and more generic
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,67,* methods: {@link #applyTo(Vector3D) applyTo(Vector3D)} and {@link
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,68,* #applyInverseTo(Vector3D) applyInverseTo(Vector3D)}.</p>
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,70,"* <p>Since a rotation is basically a vectorial operator, several rotations can be"
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,71,* composed together and the composite operation <code>r = r<sub>1</sub> o
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,72,"* r<sub>2</sub></code> (which means that for each vector <code>u</code>,"
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,73,* <code>r(u) = r<sub>1</sub>(r<sub>2</sub>(u))</code>) is also a rotation. Hence
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,74,"* we can consider that in addition to vectors, a rotation can be applied to other"
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,75,"* rotations as well (or to itself). With our previous notations, we would say we"
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,76,* can apply <code>r<sub>1</sub></code> to <code>r<sub>2</sub></code> and the result
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,77,"* we get is <code>r = r<sub>1</sub> o r<sub>2</sub></code>. For this purpose, the"
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,78,* class provides the methods: {@link #applyTo(Rotation) applyTo(Rotation)} and
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,79,* {@link #applyInverseTo(Rotation) applyInverseTo(Rotation)}.</p>
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,81,* <p>Rotations are guaranteed to be immutable objects.</p>
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,89,ublic class Rotation
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,90,"mplements ArraySliceMappable, Serializable {"
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,90,public class Rotation implements Serializable {
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,101,** Build a rotation from the quaternion coordinates.
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,102, @param q0 scalar part of the quaternion
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,103, @param q1 first coordinate of the vectorial part of the quaternion
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,104, @param q2 second coordinate of the vectorial part of the quaternion
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,105, @param q3 third coordinate of the vectorial part of the quaternion
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,106," @deprecated since Mantissa 6.3, this method as been deprecated as it"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,107," does not properly handles non-normalized quaternions, it should be"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,108," replaced by {@link #Rotation(double, double, double, double, boolean)}"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,110,"ublic Rotation(double q0, double q1, double q2, double q3) {"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,111,his.q0 = q0;
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,112,his.q1 = q1;
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,113,his.q2 = q2;
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,114,his.q3 = q3;
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,123," <p>This method replaces the {@link #Rotation(double, double,"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,124," double, double) constructor using only 4 doubles} which was deprecated"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,125, as of version 6.3 of Mantissa.</p>
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,184, (which are matrices for which m.mT = I) with real
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,165,* (which are matrices for which m.m<sup>T</sup> = I) with real
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,293," <p>Except for possible scale factors, if the instance were"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,294," applied to the pair (u1, u2) it will produce the pair (v1,"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,295, v2).</p>
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,274,"* <p>Except for possible scale factors, if the instance were applied to"
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,275,"* the pair (u<sub>1</sub>, u<sub>2</sub>) it will produce the pair"
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,276,"* (v<sub>1</sub>, v<sub>2</sub>).</p>"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,297, <p>If the angular separation between u1 and u2 is not the same as
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,298," the angular separation between v1 and v2, then a corrected v2'"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,299," will be used rather than v2, the corrected vector will be in the"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,300," (v1, v2) plane.</p>"
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,278,* <p>If the angular separation between u<sub>1</sub> and u<sub>2</sub> is
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,279,* not the same as the angular separation between v<sub>1</sub> and
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,280,"* v<sub>2</sub>, then a corrected v'<sub>2</sub> will be used rather than"
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,281,"* v<sub>2</sub>, the corrected vector will be in the (v<sub>1</sub>,"
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,282,* v<sub>2</sub>) plane.</p>
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,480," YZY, ZXZ and ZYZ), the most popular one being ZXZ. Beware that"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,481, many people routinely use the term Euler angles even for what
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,482, really are Cardan angles (this confusion is especially widespread
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,483," in the aerospace business where Roll, Pitch and Yaw angles are"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,484, often tagged as Euler angles).</p>
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,462,"* YZY, ZXZ and ZYZ), the most popular one being ZXZ.</p>"
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,463,* <p>Beware that many people routinely use the term Euler angles even
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,464,* for what really are Cardan angles (this confusion is especially
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,465,"* widespread in the aerospace business where Roll, Pitch and Yaw angles"
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,466,* are often tagged as Euler angles).</p>
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,475,"this(computeRotation(order, alpha1, alpha2, alpha3));"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,494,f (order == RotationOrder.XYZ) {
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,496,"ompose(new Rotation(Vector3D.plusI, alpha1),"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,497,"ew Rotation(Vector3D.plusJ, alpha2),"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,498,"ew Rotation(Vector3D.plusK, alpha3));"
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,478,/** Copy constructor.
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,479,* <p>This constructor is used only for the sake of Cardan/Euler
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,480,* angles handling.</p>
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,481,* @param r rotation to copy
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,483,private Rotation(Rotation r) {
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,484,q0 = r.q0;
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,485,q1 = r.q1;
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,486,q2 = r.q2;
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,487,q3 = r.q3;
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,490,/** Build a rotation from three Cardan or Euler elementary rotations.
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,491,* @param order order of rotations to use
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,492,* @param alpha1 angle of the first elementary rotation
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,493,* @param alpha2 angle of the second elementary rotation
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,494,* @param alpha3 angle of the third elementary rotation
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,496,"public static Rotation computeRotation(RotationOrder order,"
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,497,"double alpha1,"
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,498,"double alpha2,"
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,499,double alpha3) {
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,500,if (order == RotationOrder.XYZ) {
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,501,"return compose(new Rotation(Vector3D.plusI, alpha1),"
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,502,"new Rotation(Vector3D.plusJ, alpha2),"
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,503,"new Rotation(Vector3D.plusK, alpha3));"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,502,"ompose(new Rotation(Vector3D.plusI, alpha1),"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,503,"ew Rotation(Vector3D.plusK, alpha2),"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,504,"ew Rotation(Vector3D.plusJ, alpha3));"
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,505,"return compose(new Rotation(Vector3D.plusI, alpha1),"
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,506,"new Rotation(Vector3D.plusK, alpha2),"
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,507,"new Rotation(Vector3D.plusJ, alpha3));"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,508,"ompose(new Rotation(Vector3D.plusJ, alpha1),"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,509,"ew Rotation(Vector3D.plusI, alpha2),"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,510,"ew Rotation(Vector3D.plusK, alpha3));"
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,509,"return compose(new Rotation(Vector3D.plusJ, alpha1),"
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,510,"new Rotation(Vector3D.plusI, alpha2),"
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,511,"new Rotation(Vector3D.plusK, alpha3));"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,514,"ompose(new Rotation(Vector3D.plusJ, alpha1),"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,515,"ew Rotation(Vector3D.plusK, alpha2),"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,516,"ew Rotation(Vector3D.plusI, alpha3));"
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,513,"return compose(new Rotation(Vector3D.plusJ, alpha1),"
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,514,"new Rotation(Vector3D.plusK, alpha2),"
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,515,"new Rotation(Vector3D.plusI, alpha3));"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,520,"ompose(new Rotation(Vector3D.plusK, alpha1),"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,521,"ew Rotation(Vector3D.plusI, alpha2),"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,522,"ew Rotation(Vector3D.plusJ, alpha3));"
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,517,"return compose(new Rotation(Vector3D.plusK, alpha1),"
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,518,"new Rotation(Vector3D.plusI, alpha2),"
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,519,"new Rotation(Vector3D.plusJ, alpha3));"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,526,"ompose(new Rotation(Vector3D.plusK, alpha1),"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,527,"ew Rotation(Vector3D.plusJ, alpha2),"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,528,"ew Rotation(Vector3D.plusI, alpha3));"
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,521,"return compose(new Rotation(Vector3D.plusK, alpha1),"
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,522,"new Rotation(Vector3D.plusJ, alpha2),"
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,523,"new Rotation(Vector3D.plusI, alpha3));"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,532,"ompose(new Rotation(Vector3D.plusI, alpha1),"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,533,"ew Rotation(Vector3D.plusJ, alpha2),"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,534,"ew Rotation(Vector3D.plusI, alpha3));"
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,525,"return compose(new Rotation(Vector3D.plusI, alpha1),"
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,526,"new Rotation(Vector3D.plusJ, alpha2),"
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,527,"new Rotation(Vector3D.plusI, alpha3));"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,538,"ompose(new Rotation(Vector3D.plusI, alpha1),"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,539,"ew Rotation(Vector3D.plusK, alpha2),"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,540,"ew Rotation(Vector3D.plusI, alpha3));"
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,529,"return compose(new Rotation(Vector3D.plusI, alpha1),"
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,530,"new Rotation(Vector3D.plusK, alpha2),"
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,531,"new Rotation(Vector3D.plusI, alpha3));"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,544,"ompose(new Rotation(Vector3D.plusJ, alpha1),"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,545,"ew Rotation(Vector3D.plusI, alpha2),"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,546,"ew Rotation(Vector3D.plusJ, alpha3));"
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,533,"return compose(new Rotation(Vector3D.plusJ, alpha1),"
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,534,"new Rotation(Vector3D.plusI, alpha2),"
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,535,"new Rotation(Vector3D.plusJ, alpha3));"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,550,"ompose(new Rotation(Vector3D.plusJ, alpha1),"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,551,"ew Rotation(Vector3D.plusK, alpha2),"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,552,"ew Rotation(Vector3D.plusJ, alpha3));"
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,537,"return compose(new Rotation(Vector3D.plusJ, alpha1),"
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,538,"new Rotation(Vector3D.plusK, alpha2),"
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,539,"new Rotation(Vector3D.plusJ, alpha3));"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,556,"ompose(new Rotation(Vector3D.plusK, alpha1),"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,557,"ew Rotation(Vector3D.plusI, alpha2),"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,558,"ew Rotation(Vector3D.plusK, alpha3));"
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,541,"return compose(new Rotation(Vector3D.plusK, alpha1),"
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,542,"new Rotation(Vector3D.plusI, alpha2),"
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,543,"new Rotation(Vector3D.plusK, alpha3));"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,562,"ompose(new Rotation(Vector3D.plusK, alpha1),"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,563,"ew Rotation(Vector3D.plusJ, alpha2),"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,564,"ew Rotation(Vector3D.plusK, alpha3));"
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,545,"return compose(new Rotation(Vector3D.plusK, alpha1),"
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,546,"new Rotation(Vector3D.plusJ, alpha2),"
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,547,"new Rotation(Vector3D.plusK, alpha3));"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,571, @param r1 last (outermost) rotation to compose
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,552,* @param r3 last (outermost) rotation to compose
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,573, @param r3 first (innermost) rotation to compose
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,575,"rivate void compose(Rotation r1, Rotation r2, Rotation r3) {"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,576,otation composed = r1.applyTo(r2.applyTo(r3));
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,577,0 = composed.q0;
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,578,1 = composed.q1;
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,579,2 = composed.q2;
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,580,3 = composed.q3;
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,583,** Copy constructor.
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,584, Build a copy of a rotation
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,585, @param r rotation to copy
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,554,* @param r1 first (innermost) rotation to compose
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,587,ublic Rotation(Rotation r) {
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,588,0 = r.q0;
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,589,1 = r.q1;
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,590,2 = r.q2;
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,591,3 = r.q3;
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,556,"private static Rotation compose(Rotation r3, Rotation r2, Rotation r1) {"
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,557,return r3.applyTo(r2.applyTo(r1));
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,602,"eturn new Rotation(-q0, q1, q2, q3);"
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,568,"return new Rotation(-q0, q1, q2, q3, false);"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,650, @return angle of the rotation (between 0 and PI)
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,616,* @return angle of the rotation (between 0 and &pi;)
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,666," if Cardan angles are used, the rotation defined by the angles a1,"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,667, a2 and a3 is the same as the rotation defined by the angles PI +
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,668," a1, PI - a2 and PI + a3. This method implements the following"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,669," arbitrary choices. For Cardan angles, the chosen set is the one"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,670, for which the second angle is between -PI/2 and PI/2 (i.e its
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,671," cosine is positive). For Euler angles, the chosen set is the one"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,672, for which the second angle is between 0 and PI (i.e its sine is
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,673, positive).</p>
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,632,"* if Cardan angles are used, the rotation defined by the angles"
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,633,"* a<sub>1</sub>, a<sub>2</sub> and a<sub>3</sub> is the same as"
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,634,"* the rotation defined by the angles &pi; + a<sub>1</sub>, &pi;"
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,635,* - a<sub>2</sub> and &pi; + a<sub>3</sub>. This method implements
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,636,"* the following arbitrary choices. For Cardan angles, the chosen"
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,637,* set is the one for which the second angle is between -&pi;/2 and
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,638,"* &pi;/2 (i.e its cosine is positive). For Euler angles, the chosen"
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,639,* set is the one for which the second angle is between 0 and &pi;
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,640,* (i.e its sine is positive).</p>
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,681, of Cardan and Euler representation (but not a problem with the
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,648,* with Cardan and Euler representation (but not a problem with the
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,684," -PI/2 or +PI/2, for Euler angle singularities occur when the"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,685," second angle is close to 0 or PI, this means that the identity"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,686, rotation is always singular for Euler angles !
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,651,"* -&pi;/2 or +&pi;/2, for Euler angle singularities occur when the"
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,652,"* second angle is close to 0 or &pi;, this implies that the identity"
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,653,* rotation is always singular for Euler angles!
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,991,.q3 * q0 + r.q0 * q3 + (r.q1 * q2 - r.q2 * q1));
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,958,"r.q3 * q0 + r.q0 * q3 + (r.q1 * q2 - r.q2 * q1),"
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,959,false);
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,1009,r.q3 * q0 + r.q0 * q3 + (r.q1 * q2 - r.q2 * q1));
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,977,"-r.q3 * q0 + r.q0 * q3 + (r.q1 * q2 - r.q2 * q1),"
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,978,false);
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,1109,ublic int getStateDimension() {
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,1110,eturn 4;
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,1113,"ublic void mapStateFromArray(int start, double[] array) {"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,1114,0 = array[start];
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,1115,1 = array[start + 1];
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,1116,2 = array[start + 2];
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,1117,3 = array[start + 3];
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,1120,"ublic void mapStateToArray(int start, double[] array) {"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,1121,rray[start]     = q0;
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,1122,rray[start + 1] = q1;
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,1123,rray[start + 2] = q2;
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,1124,rray[start + 3] = q3;
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,1128,rivate double q0;
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,1079,private final double q0;
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,1131,rivate double q1;
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,1082,private final double q1;
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,1134,rivate double q2;
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,1085,private final double q2;
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,1137,rivate double q3;
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Rotation.java,1088,private final double q3;
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,21,mport org.spaceroots.mantissa.utilities.ArraySliceMappable;
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,24,* <p>Vector3D are guaranteed to be immutable objects.</p>
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,28,public class Vector3D implements Serializable {
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,29,ublic class Vector3D
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,30,"mplements ArraySliceMappable, Serializable {"
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,30,"/** First canonical vector (coordinates : 1, 0, 0). */"
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,31,"public static final Vector3D plusI = new Vector3D(1, 0, 0);"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,32,"** First canonical vector (coordinates : 1, 0, 0)."
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,33," This is really an {@link ImmutableVector3D ImmutableVector3D},"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,34, hence it can't be changed in any way.
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,36,"ublic static final Vector3D plusI = new ImmutableVector3D(1, 0, 0);"
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,33,"/** Opposite of the first canonical vector (coordinates : -1, 0, 0). */"
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,34,"public static final Vector3D minusI = new Vector3D(-1, 0, 0);"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,38,"** Opposite of the first canonical vector (coordinates : -1, 0, 0)."
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,39," This is really an {@link ImmutableVector3D ImmutableVector3D},"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,40, hence it can't be changed in any way.
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,42,"ublic static final Vector3D minusI = new ImmutableVector3D(-1, 0, 0);"
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,36,"/** Second canonical vector (coordinates : 0, 1, 0). */"
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,37,"public static final Vector3D plusJ = new Vector3D(0, 1, 0);"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,44,"** Second canonical vector (coordinates : 0, 1, 0)."
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,45," This is really an {@link ImmutableVector3D ImmutableVector3D},"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,46, hence it can't be changed in any way.
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,48,"ublic static final Vector3D plusJ = new ImmutableVector3D(0, 1, 0);"
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,39,"/** Opposite of the second canonical vector (coordinates : 0, -1, 0). */"
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,40,"public static final Vector3D minusJ = new Vector3D(0, -1, 0);"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,50,"** Opposite of the second canonical vector (coordinates : 0, -1, 0)."
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,51," This is really an {@link ImmutableVector3D ImmutableVector3D},"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,52, hence it can't be changed in any way.
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,54,"ublic static final Vector3D minusJ = new ImmutableVector3D(0, -1, 0);"
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,42,"/** Third canonical vector (coordinates : 0, 0, 1). */"
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,43,"public static final Vector3D plusK = new Vector3D(0, 0, 1);"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,56,"** Third canonical vector (coordinates : 0, 0, 1)."
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,57," This is really an {@link ImmutableVector3D ImmutableVector3D},"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,58, hence it can't be changed in any way.
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,60,"ublic static final Vector3D plusK = new ImmutableVector3D(0, 0, 1);"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,62,"** Opposite of the third canonical vector (coordinates : 0, 0, -1)."
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,63," This is really an {@link ImmutableVector3D ImmutableVector3D},"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,64, hence it can't be changed in any way.
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,66,"ublic static final Vector3D minusK = new ImmutableVector3D(0, 0, -1);"
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,45,"/** Opposite of the third canonical vector (coordinates : 0, 0, -1). */"
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,46,"public static final Vector3D minusK = new Vector3D(0, 0, -1);"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,143,"ublic Vector3D(double a, Vector3D u,"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,144,"ouble b, Vector3D v,"
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,123,"public Vector3D(double a, Vector3D u, double b, Vector3D v,"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,151,** Copy constructor.
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,152, Build a copy of a vector
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,153, @param v vector to copy
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,155,ublic Vector3D(Vector3D v) {
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,156, = v.x;
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,157, = v.y;
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,158, = v.z;
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,161,** Reset the instance.
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,162, @param v vector to copy data from
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,130,/** Linear constructor
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,131,* Build a vector from four other ones and corresponding scale factors.
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,132,* The vector built will be a * t +  b * u + c * v + d * w
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,133,* @param a first scale factor
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,134,* @param t first base (unscaled) vector
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,135,* @param b second scale factor
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,136,* @param u second base (unscaled) vector
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,137,* @param c third scale factor
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,138,* @param v third base (unscaled) vector
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,139,* @param d third scale factor
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,140,* @param w third base (unscaled) vector
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,164,ublic void reset(Vector3D v) {
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,165, = v.x;
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,166, = v.y;
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,167, = v.z;
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,142,"public Vector3D(double a, Vector3D t, double b, Vector3D u,"
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,143,"double c, Vector3D v, double d, Vector3D w) {"
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,144,this.x = a * t.x + b * u.x + c * v.x + d * w.x;
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,145,this.y = a * t.y + b * u.y + c * v.y + d * w.y;
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,146,this.z = a * t.z + b * u.z + c * v.z + d * w.z;
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,179,** Set the abscissa of the vector.
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,180, @param x new abscissa for the vector
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,181, @see #getX()
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,182," @see #setCoordinates(double, double, double)"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,184,ublic void setX(double x) {
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,185,his.x = x;
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,197,** Set the ordinate of the vector.
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,198, @param y new ordinate for the vector
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,199, @see #getY()
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,200," @see #setCoordinates(double, double, double)"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,202,ublic void setY(double y) {
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,203,his.y = y;
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,215,** Set the height of the vector.
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,216, @param z new height for the vector
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,217, @see #getZ()
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,218," @see #setCoordinates(double, double, double)"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,220,ublic void setZ(double z) {
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,221,his.z = z;
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,224,** Set all coordinates of the vector.
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,225, @param x new abscissa for the vector
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,226, @param y new ordinate for the vector
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,227, @param z new height for the vector
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,228," @see #Vector3D(double, double, double)"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,230,"ublic void setCoordinates(double x, double y, double z) {"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,231,his.x = x;
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,232,his.y = y;
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,233,his.z = z;
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,259,** Add a vector to the instance.
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,260, Add a vector to the instance. The instance is changed.
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,261, @param v vector to add
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,263,ublic void addToSelf(Vector3D v) {
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,264, += v.x;
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,265, += v.y;
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,266, += v.z;
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,269,** Add a scaled vector to the instance.
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,270, Add a scaled vector to the instance. The instance is changed.
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,271, @param factor scale factor to apply to v before adding it
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,272, @param v vector to add
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,199,/** Normalize a vector.
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,200,* @param v vector to normalize
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,201,* @return a new vector equal to v / ||v||
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,202,* @exception ArithmeticException if the norm of the instance is null
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,274,"ublic void addToSelf(double factor, Vector3D v) {"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,275, += factor * v.x;
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,276, += factor * v.y;
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,277, += factor * v.z;
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,204,public static Vector3D normalize(Vector3D v) {
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,205,double norm = v.getNorm();
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,206,if (norm == 0) {
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,207,"throw new ArithmeticException(""null norm"");"
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,209,double inv = 1.0 / norm;
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,210,"return new Vector3D(inv * v.x, inv * v.y, inv * v.z);"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,290,** Subtract a vector from the instance.
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,291, Subtract a vector from the instance. The instance is changed.
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,292, @param v vector to subtract
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,294,ublic void subtractFromSelf(Vector3D v) {
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,295, -= v.x;
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,296, -= v.y;
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,297, -= v.z;
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,310,** Normalize the instance.
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,311, Divide the instance by its norm in order to have a unit
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,312, vector. The instance is changed.
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,313, @exception ArithmeticException if the norm is null
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,315,ublic void normalizeSelf() {
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,316,ouble s = getNorm();
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,317,f (s == 0) {
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,318,"hrow new ArithmeticException(""null norm"");"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,320,ouble invNorm = 1 / s;
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,321, *= invNorm;
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,322, *= invNorm;
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,323, *= invNorm;
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,334,   Vector3D k = u;
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,335,   k.normalizeSelf();
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,241,*   Vector3D k = Vector3D.normalize(u);
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,395,** Revert the instance.
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,396, Replace the instance u by -u
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,398,ublic void negateSelf() {
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,399, = -x;
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,400, = -y;
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,401, = -z;
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,412,** Multiply the instance by a scalar
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,413, Multiply the instance by a scalar. The instance is changed.
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,414, @param a scalar by which the instance should be multiplied
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,416,ublic void multiplySelf(double a) {
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,417, *= a;
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,418, *= a;
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,419, *= a;
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,441,** Set the instance to the result of the cross-product of two vectors.
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,442, @param v1 first vector (can be the instance)
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,443, @param v2 second vector (can be the instance)
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,445,"ublic void setToCrossProduct(Vector3D v1, Vector3D v2) {"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,446,ouble newX = v1.y * v2.z - v1.z * v2.y;
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,447,ouble newY = v1.z * v2.x - v1.x * v2.z;
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,448, = v1.x * v2.y - v1.y * v2.x;
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,449, = newX;
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,450, = newY;
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,464,ublic int getStateDimension() {
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,465,eturn 3;
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,468,"ublic void mapStateFromArray(int start, double[] array) {"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,469, = array[start];
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,470, = array[start + 1];
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,471, = array[start + 2];
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,474,"ublic void mapStateToArray(int start, double[] array) {"
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,475,rray[start]     = x;
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,476,rray[start + 1] = y;
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,477,rray[start + 2] = z;
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,481,rotected double x;
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,340,private final double x;
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,484,rotected double y;
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,343,private final double y;
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,487,rotected double z;
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,346,private final double z;
False,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,489,rivate static final long serialVersionUID = 4115635019045864211L;
True,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,src/mantissa/src/org/spaceroots/mantissa/geometry/Vector3D.java,348,private static final long serialVersionUID = 484345009325358136L;
False,src/mantissa/src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegrator.java,883,"witchesHandler.reset(currentT, y);"
True,src/mantissa/src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegrator.java,883,"if (switchesHandler.reset(currentT, y) && ! lastStep) {"
True,src/mantissa/src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegrator.java,884,// some switching function has triggered changes that
True,src/mantissa/src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegrator.java,885,"// invalidate the derivatives, we need to recompute them"
True,src/mantissa/src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegrator.java,886,firstStepAlreadyComputed = false;
False,src/mantissa/src/org/spaceroots/mantissa/ode/RungeKuttaFehlbergIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/ode/RungeKuttaFehlbergIntegrator.java,314,"witchesHandler.reset(currentT, y);"
True,src/mantissa/src/org/spaceroots/mantissa/ode/RungeKuttaFehlbergIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/ode/RungeKuttaFehlbergIntegrator.java,314,"if (switchesHandler.reset(currentT, y) && ! lastStep) {"
True,src/mantissa/src/org/spaceroots/mantissa/ode/RungeKuttaFehlbergIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/ode/RungeKuttaFehlbergIntegrator.java,315,// some switching function has triggered changes that
True,src/mantissa/src/org/spaceroots/mantissa/ode/RungeKuttaFehlbergIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/ode/RungeKuttaFehlbergIntegrator.java,316,"// invalidate the derivatives, we need to recompute them"
True,src/mantissa/src/org/spaceroots/mantissa/ode/RungeKuttaFehlbergIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/ode/RungeKuttaFehlbergIntegrator.java,317,"equations.computeDerivatives(currentT, y, yDotK[0]);"
False,src/mantissa/src/org/spaceroots/mantissa/ode/RungeKuttaIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/ode/RungeKuttaIntegrator.java,237,"witchesHandler.reset(currentT, y);"
True,src/mantissa/src/org/spaceroots/mantissa/ode/RungeKuttaIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/ode/RungeKuttaIntegrator.java,237,"if (switchesHandler.reset(currentT, y) && ! lastStep) {"
True,src/mantissa/src/org/spaceroots/mantissa/ode/RungeKuttaIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/ode/RungeKuttaIntegrator.java,238,// some switching function has triggered changes that
True,src/mantissa/src/org/spaceroots/mantissa/ode/RungeKuttaIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/ode/RungeKuttaIntegrator.java,239,"// invalidate the derivatives, we need to recompute them"
True,src/mantissa/src/org/spaceroots/mantissa/ode/RungeKuttaIntegrator.java,src/mantissa/src/org/spaceroots/mantissa/ode/RungeKuttaIntegrator.java,240,"equations.computeDerivatives(currentT, y, yDotK[0]);"
True,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchState.java,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchState.java,242,* @return true if the integrator should reset the derivatives too
False,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchState.java,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchState.java,243,"ublic void reset(double t, double[] y) {"
False,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchState.java,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchState.java,244,f (pendingEvent) {
False,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchState.java,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchState.java,245,f (nextAction == SwitchingFunction.RESET) {
False,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchState.java,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchState.java,246,"unction.resetState(t, y);"
False,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchState.java,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchState.java,248,endingEvent      = false;
False,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchState.java,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchState.java,249,endingEventTime  = Double.NaN;
True,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchState.java,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchState.java,244,"public boolean reset(double t, double[] y) {"
True,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchState.java,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchState.java,246,if (! pendingEvent) {
True,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchState.java,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchState.java,247,return false;
True,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchState.java,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchState.java,250,if (nextAction == SwitchingFunction.RESET_STATE) {
True,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchState.java,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchState.java,251,"function.resetState(t, y);"
True,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchState.java,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchState.java,253,pendingEvent      = false;
True,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchState.java,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchState.java,254,pendingEventTime  = Double.NaN;
True,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchState.java,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchState.java,256,return (nextAction == SwitchingFunction.RESET_STATE)
True,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchState.java,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchState.java,257,|| (nextAction == SwitchingFunction.RESET_DERIVATIVES);
False,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchingFunction.java,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchingFunction.java,25," (G-stop facility), or when the derivatives has"
False,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchingFunction.java,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchingFunction.java,26, discontinuities. These events are traditionally defined as
False,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchingFunction.java,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchingFunction.java,27, occurring when a <code>g</code> function sign changes.</p>
True,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchingFunction.java,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchingFunction.java,25,"* (G-stop facility), or when the derivatives have"
True,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchingFunction.java,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchingFunction.java,26,"* discontinuities, or simply when the user wants to monitor some"
True,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchingFunction.java,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchingFunction.java,27,* states boundaries crossings. These events are traditionally defined
True,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchingFunction.java,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchingFunction.java,28,"* as occurring when a <code>g</code> function sign changes, hence"
True,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchingFunction.java,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchingFunction.java,29,* the name <em>switching functions</em>.</p>
False,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchingFunction.java,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchingFunction.java,31, occur at virtually any time. The integrators will take care to
False,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchingFunction.java,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchingFunction.java,32," avoid sign changes inside the steps, they will reduce the step size"
False,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchingFunction.java,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchingFunction.java,33, when such an event is detected in order to put this event exactly
False,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchingFunction.java,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchingFunction.java,34, at the end of the current step. This guarantees that step
False,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchingFunction.java,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchingFunction.java,35, interpolation (which always has a one step scope) is relevant even
False,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchingFunction.java,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchingFunction.java,36, in presence of discontinuities. This is independent from the
True,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchingFunction.java,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchingFunction.java,33,"* occur at virtually any time, unknown in advance. The integrators will"
True,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchingFunction.java,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchingFunction.java,34,"* take care to avoid sign changes inside the steps, they will reduce"
True,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchingFunction.java,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchingFunction.java,35,* the step size when such an event is detected in order to put this
True,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchingFunction.java,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchingFunction.java,36,* event exactly at the end of the current step. This guarantees that
True,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchingFunction.java,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchingFunction.java,37,* step interpolation (which always has a one step scope) is relevant
True,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchingFunction.java,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchingFunction.java,38,* even in presence of discontinuities. This is independent from the
False,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchingFunction.java,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchingFunction.java,55,** Reset indicator.
True,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchingFunction.java,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchingFunction.java,57,/** Reset state indicator.
False,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchingFunction.java,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchingFunction.java,59, vector (which will be retrieved through the {@link #resetState
True,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchingFunction.java,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchingFunction.java,61,* vector (which will be retrieved thanks to the {@link #resetState
False,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchingFunction.java,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchingFunction.java,62,ublic static final int RESET = 1;
True,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchingFunction.java,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchingFunction.java,64,public static final int RESET_STATE = 1;
True,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchingFunction.java,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchingFunction.java,66,/** Reset derivatives indicator.
True,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchingFunction.java,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchingFunction.java,67,* <p>This value should be used as the return value of the {@link
True,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchingFunction.java,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchingFunction.java,68,* #eventOccurred eventOccurred} method when the integration should
True,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchingFunction.java,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchingFunction.java,69,"* go on after the event ending the current step, with a new derivatives"
True,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchingFunction.java,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchingFunction.java,70,* vector (which will be retrieved thanks to the {@link
True,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchingFunction.java,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchingFunction.java,71,* FirstOrderDifferentialEquations#computeDerivatives} method).</p>
True,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchingFunction.java,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchingFunction.java,73,public static final int RESET_DERIVATIVES = 2;
False,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchingFunction.java,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchingFunction.java,69,ublic static final int CONTINUE = 2;
True,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchingFunction.java,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchingFunction.java,80,public static final int CONTINUE = 3;
False,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchingFunction.java,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchingFunction.java,76," function must be continuous, as the integrator will need to find"
False,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchingFunction.java,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchingFunction.java,77, its roots to locate the events.</p>
True,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchingFunction.java,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchingFunction.java,87,"* function must be continuous (at least in its roots neighborhood),"
True,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchingFunction.java,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchingFunction.java,88,* as the integrator will need to find its roots to locate the events.</p>
False,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchingFunction.java,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchingFunction.java,91, (for example setting a flag to switch the derivatives computation
False,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchingFunction.java,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchingFunction.java,92," in case of discontinuity), and it allows to direct the integrator"
False,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchingFunction.java,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchingFunction.java,93," to either stop or continue integration, possibly with a reset"
False,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchingFunction.java,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchingFunction.java,94, state.</p>
False,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchingFunction.java,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchingFunction.java,96," <p>If {@link #STOP} is returned, the step handler will be called"
False,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchingFunction.java,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchingFunction.java,97, with the <code>isLast</code> flag of the {@link
False,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchingFunction.java,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchingFunction.java,98, StepHandler#handleStep handleStep} method set to true. If {@link
False,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchingFunction.java,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchingFunction.java,99," #RESET} is returned, the {@link #resetState resetState} method"
False,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchingFunction.java,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchingFunction.java,100, will be called once the step handler has finished its task.</p>
True,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchingFunction.java,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchingFunction.java,102,* (for example setting a flag in the {@link
True,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchingFunction.java,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchingFunction.java,103,* FirstOrderDifferentialEquations differential equations} to switch
True,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchingFunction.java,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchingFunction.java,104,"* the derivatives computation in case of discontinuity), or to"
True,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchingFunction.java,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchingFunction.java,105,"* direct the integrator to either stop or continue integration,"
True,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchingFunction.java,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchingFunction.java,106,* possibly with a reset state or derivatives.</p>
True,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchingFunction.java,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchingFunction.java,108,* <ul>
True,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchingFunction.java,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchingFunction.java,109,"*   <li>if {@link #STOP} is returned, the step handler will be called"
True,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchingFunction.java,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchingFunction.java,110,*   with the <code>isLast</code> flag of the {@link
True,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchingFunction.java,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchingFunction.java,111,*   StepHandler#handleStep handleStep} method set to true and the
True,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchingFunction.java,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchingFunction.java,112,"*   integration will be stopped,</li>"
True,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchingFunction.java,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchingFunction.java,113,"*   <li>if {@link #RESET_STATE} is returned, the {@link #resetState"
True,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchingFunction.java,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchingFunction.java,114,*   resetState} method will be called once the step handler has
True,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchingFunction.java,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchingFunction.java,115,"*   finished its task, and the integrator will also recompute the"
True,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchingFunction.java,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchingFunction.java,116,"*   derivatives,</li>"
True,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchingFunction.java,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchingFunction.java,117,"*   <li>if {@link #RESET_DERIVATIVES} is returned, the integrator"
True,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchingFunction.java,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchingFunction.java,118,"*   will recompute the derivatives,"
True,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchingFunction.java,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchingFunction.java,119,"*   <li>if {@link #CONTINUE} is returned, no specific action will"
True,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchingFunction.java,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchingFunction.java,120,*   be taken (apart from having called this method) and integration
True,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchingFunction.java,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchingFunction.java,121,*   will continue.</li>
True,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchingFunction.java,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchingFunction.java,122,* </ul>
False,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchingFunction.java,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchingFunction.java,105," value must be one of {@link #STOP}, {@link #RESET} or {@link"
False,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchingFunction.java,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchingFunction.java,106, #CONTINUE}
True,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchingFunction.java,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchingFunction.java,127,"* value must be one of {@link #STOP}, {@link #RESET_STATE},"
True,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchingFunction.java,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchingFunction.java,128,* {@link #RESET_DERIVATIVES} or {@link #CONTINUE}
False,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchingFunction.java,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchingFunction.java,114, #eventOccurred} has itself returned the {@link #RESET}
True,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchingFunction.java,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchingFunction.java,136,* #eventOccurred} has itself returned the {@link #RESET_STATE}
False,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchingFunction.java,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchingFunction.java,118," #RESET} indicator, this function will never be called, and it is"
True,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchingFunction.java,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchingFunction.java,140,"* #RESET_STATE} indicator, this function will never be called, and it is"
True,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchingFunctionsHandler.java,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchingFunctionsHandler.java,169,* @return true if the integrator should reset the derivatives too
False,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchingFunctionsHandler.java,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchingFunctionsHandler.java,170,"ublic void reset(double t, double[] y) {"
True,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchingFunctionsHandler.java,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchingFunctionsHandler.java,171,"public boolean reset(double t, double[] y) {"
True,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchingFunctionsHandler.java,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchingFunctionsHandler.java,172,boolean resetDerivatives = false;
False,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchingFunctionsHandler.java,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchingFunctionsHandler.java,172,"(SwitchState) iter.next()).reset(t, y);"
True,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchingFunctionsHandler.java,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchingFunctionsHandler.java,174,"if (((SwitchState) iter.next()).reset(t, y)) {"
True,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchingFunctionsHandler.java,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchingFunctionsHandler.java,175,resetDerivatives = true;
True,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchingFunctionsHandler.java,src/mantissa/src/org/spaceroots/mantissa/ode/SwitchingFunctionsHandler.java,178,return resetDerivatives;
False,src/mantissa/tests-src/org/spaceroots/mantissa/geometry/AllTests.java,src/mantissa/tests-src/org/spaceroots/mantissa/geometry/AllTests.java,29,uite.addTest(ImmutableVector3DTest.suite());
False,src/mantissa/tests-src/org/spaceroots/mantissa/geometry/ImmutableVector3DTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/geometry/ImmutableVector3DTest.java,1,/ Licensed to the Apache Software Foundation (ASF) under one
False,src/mantissa/tests-src/org/spaceroots/mantissa/geometry/ImmutableVector3DTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/geometry/ImmutableVector3DTest.java,2,/ or more contributor license agreements.  See the NOTICE file
False,src/mantissa/tests-src/org/spaceroots/mantissa/geometry/ImmutableVector3DTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/geometry/ImmutableVector3DTest.java,3,/ distributed with this work for additional information
False,src/mantissa/tests-src/org/spaceroots/mantissa/geometry/ImmutableVector3DTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/geometry/ImmutableVector3DTest.java,4,/ regarding copyright ownership.  The ASF licenses this file
False,src/mantissa/tests-src/org/spaceroots/mantissa/geometry/ImmutableVector3DTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/geometry/ImmutableVector3DTest.java,5,"/ to you under the Apache License, Version 2.0 (the"
False,src/mantissa/tests-src/org/spaceroots/mantissa/geometry/ImmutableVector3DTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/geometry/ImmutableVector3DTest.java,6,"/ ""License""); you may not use this file except in compliance"
False,src/mantissa/tests-src/org/spaceroots/mantissa/geometry/ImmutableVector3DTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/geometry/ImmutableVector3DTest.java,7,/ with the License.  You may obtain a copy of the License at
False,src/mantissa/tests-src/org/spaceroots/mantissa/geometry/ImmutableVector3DTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/geometry/ImmutableVector3DTest.java,9,/   http://www.apache.org/licenses/LICENSE-2.0
False,src/mantissa/tests-src/org/spaceroots/mantissa/geometry/ImmutableVector3DTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/geometry/ImmutableVector3DTest.java,11,"/ Unless required by applicable law or agreed to in writing,"
False,src/mantissa/tests-src/org/spaceroots/mantissa/geometry/ImmutableVector3DTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/geometry/ImmutableVector3DTest.java,12,/ software distributed under the License is distributed on an
False,src/mantissa/tests-src/org/spaceroots/mantissa/geometry/ImmutableVector3DTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/geometry/ImmutableVector3DTest.java,13,"/ ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
False,src/mantissa/tests-src/org/spaceroots/mantissa/geometry/ImmutableVector3DTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/geometry/ImmutableVector3DTest.java,14,"/ KIND, either express or implied.  See the License for the"
False,src/mantissa/tests-src/org/spaceroots/mantissa/geometry/ImmutableVector3DTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/geometry/ImmutableVector3DTest.java,15,/ specific language governing permissions and limitations
False,src/mantissa/tests-src/org/spaceroots/mantissa/geometry/ImmutableVector3DTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/geometry/ImmutableVector3DTest.java,16,/ under the License.
False,src/mantissa/tests-src/org/spaceroots/mantissa/geometry/ImmutableVector3DTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/geometry/ImmutableVector3DTest.java,18,ackage org.spaceroots.mantissa.geometry;
False,src/mantissa/tests-src/org/spaceroots/mantissa/geometry/ImmutableVector3DTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/geometry/ImmutableVector3DTest.java,20,mport junit.framework.*;
False,src/mantissa/tests-src/org/spaceroots/mantissa/geometry/ImmutableVector3DTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/geometry/ImmutableVector3DTest.java,22,ublic class ImmutableVector3DTest
False,src/mantissa/tests-src/org/spaceroots/mantissa/geometry/ImmutableVector3DTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/geometry/ImmutableVector3DTest.java,23,xtends TestCase {
False,src/mantissa/tests-src/org/spaceroots/mantissa/geometry/ImmutableVector3DTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/geometry/ImmutableVector3DTest.java,25,ublic ImmutableVector3DTest(String name) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/geometry/ImmutableVector3DTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/geometry/ImmutableVector3DTest.java,26,uper(name);
False,src/mantissa/tests-src/org/spaceroots/mantissa/geometry/ImmutableVector3DTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/geometry/ImmutableVector3DTest.java,29,ublic void testCanonical() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/geometry/ImmutableVector3DTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/geometry/ImmutableVector3DTest.java,30,ry {
False,src/mantissa/tests-src/org/spaceroots/mantissa/geometry/ImmutableVector3DTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/geometry/ImmutableVector3DTest.java,31,ector3D.plusK.normalizeSelf();
False,src/mantissa/tests-src/org/spaceroots/mantissa/geometry/ImmutableVector3DTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/geometry/ImmutableVector3DTest.java,32,"ail(""an exception should have been thrown"");"
False,src/mantissa/tests-src/org/spaceroots/mantissa/geometry/ImmutableVector3DTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/geometry/ImmutableVector3DTest.java,33, catch (UnsupportedOperationException uoe) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/geometry/ImmutableVector3DTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/geometry/ImmutableVector3DTest.java,34, catch (Exception e) {
False,src/mantissa/tests-src/org/spaceroots/mantissa/geometry/ImmutableVector3DTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/geometry/ImmutableVector3DTest.java,35,"ail (""wrong exception caught"");"
False,src/mantissa/tests-src/org/spaceroots/mantissa/geometry/ImmutableVector3DTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/geometry/ImmutableVector3DTest.java,39,ublic static Test suite() {
False,src/mantissa/tests-src/org/spaceroots/mantissa/geometry/ImmutableVector3DTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/geometry/ImmutableVector3DTest.java,40,eturn new TestSuite(ImmutableVector3DTest.class);
False,src/mantissa/tests-src/org/spaceroots/mantissa/geometry/Vector3DTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/geometry/Vector3DTest.java,46,1.subtractFromSelf(v2);
True,src/mantissa/tests-src/org/spaceroots/mantissa/geometry/Vector3DTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/geometry/Vector3DTest.java,46,"v1 = Vector3D.subtract(v1, v2);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/geometry/Vector3DTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/geometry/Vector3DTest.java,56,1.addToSelf(v2);
True,src/mantissa/tests-src/org/spaceroots/mantissa/geometry/Vector3DTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/geometry/Vector3DTest.java,56,"v1 = Vector3D.add(v1, v2);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/geometry/Vector3DTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/geometry/Vector3DTest.java,65,.multiplySelf(3);
True,src/mantissa/tests-src/org/spaceroots/mantissa/geometry/Vector3DTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/geometry/Vector3DTest.java,65,"v = Vector3D.multiply(3, v);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/geometry/Vector3DTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/geometry/Vector3DTest.java,104,ector3D  k = v1;
False,src/mantissa/tests-src/org/spaceroots/mantissa/geometry/Vector3DTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/geometry/Vector3DTest.java,105,.normalizeSelf();
True,src/mantissa/tests-src/org/spaceroots/mantissa/geometry/Vector3DTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/geometry/Vector3DTest.java,104,Vector3D  k = Vector3D.normalize(v1);
False,src/mantissa/tests-src/org/spaceroots/mantissa/geometry/Vector3DTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/geometry/Vector3DTest.java,108,"ector3D v2 = Vector3D.multiply(Math.cos(1.2), k);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/geometry/Vector3DTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/geometry/Vector3DTest.java,109,"2.addToSelf(Vector3D.multiply(Math.sin(1.2), i));"
True,src/mantissa/tests-src/org/spaceroots/mantissa/geometry/Vector3DTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/geometry/Vector3DTest.java,107,"Vector3D v2 = new Vector3D(Math.cos(1.2), k, Math.sin(1.2), i);"
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,308,public void testUnstableDerivative()
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,309,"throws DerivativeException, IntegratorException {"
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,310,"final StepProblem stepProblem = new StepProblem(0.0, 1.0, 2.0);"
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,311,FirstOrderIntegrator integ =
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,312,"new DormandPrince853Integrator(0.1, 10, 1.0e-12, 0.0);"
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,313,"integ.addSwitchingFunction(stepProblem, 1.0, 1.0e-12);"
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,314,double[] y = { Double.NaN };
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,315,"integ.integrate(stepProblem, 0.0, new double[] { 0.0 }, 10.0, y);"
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/DormandPrince853IntegratorTest.java,316,"assertEquals(8.0, y[0], 1.0e-12);"
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GillIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GillIntegratorTest.java,199,public void testUnstableDerivative()
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GillIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GillIntegratorTest.java,200,"throws DerivativeException, IntegratorException {"
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GillIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GillIntegratorTest.java,201,"final StepProblem stepProblem = new StepProblem(0.0, 1.0, 2.0);"
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GillIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GillIntegratorTest.java,202,FirstOrderIntegrator integ = new GillIntegrator(0.3);
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GillIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GillIntegratorTest.java,203,"integ.addSwitchingFunction(stepProblem, 1.0, 1.0e-12);"
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GillIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GillIntegratorTest.java,204,double[] y = { Double.NaN };
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GillIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GillIntegratorTest.java,205,"integ.integrate(stepProblem, 0.0, new double[] { 0.0 }, 10.0, y);"
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GillIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GillIntegratorTest.java,206,"assertEquals(8.0, y[0], 1.0e-12);"
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,259,public void testUnstableDerivative()
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,260,"throws DerivativeException, IntegratorException {"
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,261,"final StepProblem stepProblem = new StepProblem(0.0, 1.0, 2.0);"
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,262,FirstOrderIntegrator integ =
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,263,"new GraggBulirschStoerIntegrator(0.1, 10, 1.0e-12, 0.0);"
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,264,"integ.addSwitchingFunction(stepProblem, 1.0, 1.0e-12);"
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,265,double[] y = { Double.NaN };
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,266,"integ.integrate(stepProblem, 0.0, new double[] { 0.0 }, 10.0, y);"
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/GraggBulirschStoerIntegratorTest.java,267,"assertEquals(8.0, y[0], 1.0e-12);"
False,src/mantissa/tests-src/org/spaceroots/mantissa/ode/TestProblem4.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/TestProblem4.java,107,eturn SwitchingFunction.RESET;
True,src/mantissa/tests-src/org/spaceroots/mantissa/ode/TestProblem4.java,src/mantissa/tests-src/org/spaceroots/mantissa/ode/TestProblem4.java,107,return SwitchingFunction.RESET_STATE;

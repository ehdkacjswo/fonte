is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,149,// org.apache.commons.math.optimization.linear2.NoFeasibleSolutionException
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,150,"{ ""no feasible solution"","
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,151,"""aucune solution r\u00e9alisable"" },"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,153,// org.apache.commons.math.optimization.linear2.UnboundedSolutionException
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,154,"{ ""unbounded solution"","
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,155,"""solution non born\u00e9e"" },"
False,src/java/org/apache/commons/math/optimization/OptimizationException.java,src/java/org/apache/commons/math/optimization/OptimizationException.java,23, This class represents exceptions thrown by the estimation solvers.
True,src/java/org/apache/commons/math/optimization/OptimizationException.java,src/java/org/apache/commons/math/optimization/OptimizationException.java,23,* This class represents exceptions thrown by optimizers.
False,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,56, {@link AbstractLeastSquaresOptimizer#DEFAULT_MAX_ITERATIONS}.
True,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java,56,* {@link AbstractLinearOptimizer#DEFAULT_MAX_ITERATIONS}.
False,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,66, {@link AbstractLeastSquaresOptimizer#DEFAULT_MAX_EVALUATIONS}.
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,66,* {@link AbstractLinearOptimizer#DEFAULT_MAX_EVALUATIONS}.
True,src/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,src/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,src/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,src/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,src/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,src/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,src/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,src/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,src/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,src/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,src/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,src/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,src/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,src/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,18,package org.apache.commons.math.optimization.linear;
True,src/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,src/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,20,import java.util.Collection;
True,src/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,src/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,22,import org.apache.commons.math.FunctionEvaluationException;
True,src/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,src/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,23,import org.apache.commons.math.MaxIterationsExceededException;
True,src/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,src/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,24,import org.apache.commons.math.optimization.GoalType;
True,src/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,src/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,25,import org.apache.commons.math.optimization.OptimizationException;
True,src/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,src/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,26,import org.apache.commons.math.optimization.RealPointValuePair;
True,src/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,src/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,29,* Base class for implementing linear optimizers.
True,src/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,src/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,30,* <p>This base class handles the boilerplate methods associated to thresholds
True,src/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,src/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,31,* settings and iterations counters.</p>
True,src/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,src/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,32,* @version $Revision$ $Date$
True,src/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,src/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,33,* @since 2.0
True,src/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,src/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,36,public abstract class AbstractLinearOptimizer implements LinearOptimizer {
True,src/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,src/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,38,/** Serializable version identifier */
True,src/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,src/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,39,private static final long serialVersionUID = 8581325080951819398L;
True,src/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,src/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,41,/** Default maximal number of iterations allowed. */
True,src/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,src/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,42,public static final int DEFAULT_MAX_ITERATIONS = 100;
True,src/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,src/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,44,/** Maximal number of iterations allowed. */
True,src/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,src/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,45,private int maxIterations;
True,src/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,src/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,47,/** Number of iterations already performed. */
True,src/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,src/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,48,private int iterations;
True,src/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,src/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,50,/** Linear objective function. */
True,src/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,src/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,51,protected LinearObjectiveFunction f;
True,src/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,src/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,53,/** Linear constraints. */
True,src/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,src/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,54,protected Collection<LinearConstraint> constraints;
True,src/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,src/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,56,/** Type of optimization goal: either {@link GoalType#MAXIMIZE} or {@link GoalType#MINIMIZE}. */
True,src/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,src/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,57,protected GoalType goalType;
True,src/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,src/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,59,/** Whether to restrict the variables to non-negative values. */
True,src/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,src/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,60,protected boolean restrictToNonNegative;
True,src/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,src/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,62,/** Simple constructor with default settings.
True,src/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,src/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,63,* <p>The maximal number of evaluation is set to its default value.</p>
True,src/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,src/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,65,protected AbstractLinearOptimizer() {
True,src/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,src/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,66,setMaxIterations(DEFAULT_MAX_ITERATIONS);
True,src/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,src/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,69,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,src/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,70,public void setMaxIterations(int maxIterations) {
True,src/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,src/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,71,this.maxIterations = maxIterations;
True,src/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,src/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,74,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,src/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,75,public int getMaxIterations() {
True,src/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,src/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,76,return maxIterations;
True,src/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,src/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,79,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,src/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,80,public int getIterations() {
True,src/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,src/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,81,return iterations;
True,src/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,src/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,84,/** Increment the iterations counter by 1.
True,src/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,src/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,85,* @exception OptimizationException if the maximal number
True,src/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,src/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,86,* of iterations is exceeded
True,src/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,src/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,88,protected void incrementIterationsCounter()
True,src/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,src/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,89,throws OptimizationException {
True,src/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,src/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,90,if (++iterations > maxIterations) {
True,src/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,src/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,91,if (++iterations > maxIterations) {
True,src/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,src/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,92,throw new OptimizationException(new MaxIterationsExceededException(maxIterations));
True,src/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,src/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,97,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,src/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,98,"public RealPointValuePair optimize(final LinearObjectiveFunction f,"
True,src/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,src/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,99,"final Collection<LinearConstraint> constraints,"
True,src/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,src/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,100,"final GoalType goalType, final boolean restrictToNonNegative)"
True,src/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,src/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,101,throws OptimizationException {
True,src/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,src/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,103,// store linear problem characteristics
True,src/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,src/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,104,this.f                     = f;
True,src/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,src/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,105,this.constraints           = constraints;
True,src/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,src/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,106,this.goalType              = goalType;
True,src/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,src/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,107,this.restrictToNonNegative = restrictToNonNegative;
True,src/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,src/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,109,iterations = 0;
True,src/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,src/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,111,// solve the problem
True,src/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,src/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,112,return doOptimize();
True,src/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,src/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,116,/** Perform the bulk of optimization algorithm.
True,src/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,src/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,117,* @return the point/value pair giving the optimal value for objective function
True,src/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,src/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,118,* @exception OptimizationException if no solution fulfilling the constraints
True,src/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,src/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,119,* can be found in the allowed number of iterations
True,src/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,src/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,121,abstract protected RealPointValuePair doOptimize()
True,src/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,src/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java,122,throws OptimizationException;
True,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,18,package org.apache.commons.math.optimization.linear;
True,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,20,import java.io.Serializable;
True,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,22,import org.apache.commons.math.linear.RealVector;
True,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,23,import org.apache.commons.math.linear.RealVectorImpl;
True,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,27,* A linear constraint for a linear optimization problem.
True,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,28,* <p>
True,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,29,* A linear constraint has one of the forms:
True,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,30,* <ul>
True,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,31,*   <li>c<sub>1</sub>x<sub>1</sub> + ... c<sub>n</sub>x<sub>n</sub> = v</li>
True,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,32,*   <li>c<sub>1</sub>x<sub>1</sub> + ... c<sub>n</sub>x<sub>n</sub> &lt;= v</li>
True,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,33,*   <li>c<sub>1</sub>x<sub>1</sub> + ... c<sub>n</sub>x<sub>n</sub> >= v</li>
True,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,34,*   <li>l<sub>1</sub>x<sub>1</sub> + ... l<sub>n</sub>x<sub>n</sub> + l<sub>cst</sub> =
True,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,35,*       r<sub>1</sub>x<sub>1</sub> + ... r<sub>n</sub>x<sub>n</sub> + r<sub>cst</sub></li>
True,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,36,*   <li>l<sub>1</sub>x<sub>1</sub> + ... l<sub>n</sub>x<sub>n</sub> + l<sub>cst</sub> &lt;=
True,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,37,*       r<sub>1</sub>x<sub>1</sub> + ... r<sub>n</sub>x<sub>n</sub> + r<sub>cst</sub></li>
True,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,38,*   <li>l<sub>1</sub>x<sub>1</sub> + ... l<sub>n</sub>x<sub>n</sub> + l<sub>cst</sub> >=
True,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,39,*       r<sub>1</sub>x<sub>1</sub> + ... r<sub>n</sub>x<sub>n</sub> + r<sub>cst</sub></li>
True,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,40,* </ul>
True,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,41,"* The c<sub>i</sub>, l<sub>i</sub> or r<sub>i</sub> are the coefficients of the constraints, the x<sub>i</sub>"
True,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,42,* are the coordinates of the current point and v is the value of the constraint.
True,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,43,* </p>
True,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,44,* @version $Revision$ $Date$
True,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,45,* @since 2.0
True,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,47,public class LinearConstraint implements Serializable {
True,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,49,/** Serializable version identifier. */
True,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,50,private static final long serialVersionUID = -764632794033034092L;
True,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,52,/** Coefficients of the constraint (left hand side). */
True,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,53,private final RealVector coefficients;
True,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,55,"/** Relationship between left and right hand sides (=, &lt;=, >=). */"
True,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,56,private final Relationship relationship;
True,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,58,/** Value of the constraint (right hand side). */
True,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,59,private final double value;
True,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,62,* Build a constraint involving a single linear equation.
True,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,63,* <p>
True,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,64,* A linear constraint with a single linear equation has one of the forms:
True,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,65,* <ul>
True,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,66,*   <li>c<sub>1</sub>x<sub>1</sub> + ... c<sub>n</sub>x<sub>n</sub> = v</li>
True,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,67,*   <li>c<sub>1</sub>x<sub>1</sub> + ... c<sub>n</sub>x<sub>n</sub> &lt;= v</li>
True,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,68,*   <li>c<sub>1</sub>x<sub>1</sub> + ... c<sub>n</sub>x<sub>n</sub> >= v</li>
True,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,69,* </ul>
True,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,70,* </p>
True,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,71,* @param coefficients The coefficients of the constraint (left hand side)
True,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,72,* @param relationship The type of (in)equality used in the constraint
True,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,73,* @param value The value of the constraint (right hand side)
True,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,75,"public LinearConstraint(final double[] coefficients, final Relationship relationship,"
True,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,76,final double value) {
True,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,77,"this(new RealVectorImpl(coefficients), relationship, value);"
True,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,81,* Build a constraint involving a single linear equation.
True,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,82,* <p>
True,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,83,* A linear constraint with a single linear equation has one of the forms:
True,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,84,* <ul>
True,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,85,*   <li>c<sub>1</sub>x<sub>1</sub> + ... c<sub>n</sub>x<sub>n</sub> = v</li>
True,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,86,*   <li>c<sub>1</sub>x<sub>1</sub> + ... c<sub>n</sub>x<sub>n</sub> &lt;= v</li>
True,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,87,*   <li>c<sub>1</sub>x<sub>1</sub> + ... c<sub>n</sub>x<sub>n</sub> >= v</li>
True,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,88,* </ul>
True,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,89,* </p>
True,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,90,* @param coefficients The coefficients of the constraint (left hand side)
True,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,91,* @param relationship The type of (in)equality used in the constraint
True,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,92,* @param value The value of the constraint (right hand side)
True,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,94,"public LinearConstraint(final RealVector coefficients, final Relationship relationship,"
True,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,95,final double value) {
True,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,96,this.coefficients = coefficients;
True,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,97,this.relationship = relationship;
True,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,98,this.value        = value;
True,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,102,* Build a constraint involving two linear equations.
True,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,103,* <p>
True,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,104,* A linear constraint with two linear equation has one of the forms:
True,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,105,* <ul>
True,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,106,*   <li>l<sub>1</sub>x<sub>1</sub> + ... l<sub>n</sub>x<sub>n</sub> + l<sub>cst</sub> =
True,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,107,*       r<sub>1</sub>x<sub>1</sub> + ... r<sub>n</sub>x<sub>n</sub> + r<sub>cst</sub></li>
True,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,108,*   <li>l<sub>1</sub>x<sub>1</sub> + ... l<sub>n</sub>x<sub>n</sub> + l<sub>cst</sub> &lt;=
True,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,109,*       r<sub>1</sub>x<sub>1</sub> + ... r<sub>n</sub>x<sub>n</sub> + r<sub>cst</sub></li>
True,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,110,*   <li>l<sub>1</sub>x<sub>1</sub> + ... l<sub>n</sub>x<sub>n</sub> + l<sub>cst</sub> >=
True,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,111,*       r<sub>1</sub>x<sub>1</sub> + ... r<sub>n</sub>x<sub>n</sub> + r<sub>cst</sub></li>
True,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,112,* </ul>
True,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,113,* </p>
True,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,114,* @param lhsCoefficients The coefficients of the linear expression on the left hand side of the constraint
True,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,115,* @param lhsConstant The constant term of the linear expression on the left hand side of the constraint
True,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,116,* @param relationship The type of (in)equality used in the constraint
True,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,117,* @param rhsCoefficients The coefficients of the linear expression on the right hand side of the constraint
True,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,118,* @param rhsConstant The constant term of the linear expression on the right hand side of the constraint
True,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,120,"public LinearConstraint(final double[] lhsCoefficients, final double lhsConstant,"
True,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,121,"final Relationship relationship,"
True,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,122,"final double[] rhsCoefficients, final double rhsConstant) {"
True,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,123,double[] sub = new double[lhsCoefficients.length];
True,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,124,for (int i = 0; i < sub.length; ++i) {
True,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,125,sub[i] = lhsCoefficients[i] - rhsCoefficients[i];
True,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,127,"this.coefficients = new RealVectorImpl(sub, false);"
True,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,128,this.relationship = relationship;
True,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,129,this.value        = rhsConstant - lhsConstant;
True,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,133,* Build a constraint involving two linear equations.
True,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,134,* <p>
True,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,135,* A linear constraint with two linear equation has one of the forms:
True,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,136,* <ul>
True,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,137,*   <li>l<sub>1</sub>x<sub>1</sub> + ... l<sub>n</sub>x<sub>n</sub> + l<sub>cst</sub> =
True,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,138,*       r<sub>1</sub>x<sub>1</sub> + ... r<sub>n</sub>x<sub>n</sub> + r<sub>cst</sub></li>
True,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,139,*   <li>l<sub>1</sub>x<sub>1</sub> + ... l<sub>n</sub>x<sub>n</sub> + l<sub>cst</sub> &lt;=
True,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,140,*       r<sub>1</sub>x<sub>1</sub> + ... r<sub>n</sub>x<sub>n</sub> + r<sub>cst</sub></li>
True,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,141,*   <li>l<sub>1</sub>x<sub>1</sub> + ... l<sub>n</sub>x<sub>n</sub> + l<sub>cst</sub> >=
True,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,142,*       r<sub>1</sub>x<sub>1</sub> + ... r<sub>n</sub>x<sub>n</sub> + r<sub>cst</sub></li>
True,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,143,* </ul>
True,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,144,* </p>
True,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,145,* @param lhsCoefficients The coefficients of the linear expression on the left hand side of the constraint
True,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,146,* @param lhsConstant The constant term of the linear expression on the left hand side of the constraint
True,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,147,* @param relationship The type of (in)equality used in the constraint
True,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,148,* @param rhsCoefficients The coefficients of the linear expression on the right hand side of the constraint
True,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,149,* @param rhsConstant The constant term of the linear expression on the right hand side of the constraint
True,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,151,"public LinearConstraint(final RealVector lhsCoefficients, final double lhsConstant,"
True,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,152,"final Relationship relationship,"
True,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,153,"final RealVector rhsCoefficients, final double rhsConstant) {"
True,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,154,this.coefficients = lhsCoefficients.subtract(rhsCoefficients);
True,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,155,this.relationship = relationship;
True,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,156,this.value        = rhsConstant - lhsConstant;
True,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,160,* Get the coefficients of the constraint (left hand side).
True,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,161,* @return coefficients of the constraint (left hand side)
True,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,163,public RealVector getCoefficients() {
True,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,164,return coefficients;
True,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,168,* Get the relationship between left and right hand sides.
True,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,169,* @return relationship between left and right hand sides
True,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,171,public Relationship getRelationship() {
True,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,172,return relationship;
True,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,176,* Get the value of the constraint (right hand side).
True,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,177,* @return value of the constraint (right hand side)
True,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,179,public double getValue() {
True,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,180,return value;
True,src/java/org/apache/commons/math/optimization/linear/LinearObjectiveFunction.java,src/java/org/apache/commons/math/optimization/linear/LinearObjectiveFunction.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/optimization/linear/LinearObjectiveFunction.java,src/java/org/apache/commons/math/optimization/linear/LinearObjectiveFunction.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/optimization/linear/LinearObjectiveFunction.java,src/java/org/apache/commons/math/optimization/linear/LinearObjectiveFunction.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/optimization/linear/LinearObjectiveFunction.java,src/java/org/apache/commons/math/optimization/linear/LinearObjectiveFunction.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/optimization/linear/LinearObjectiveFunction.java,src/java/org/apache/commons/math/optimization/linear/LinearObjectiveFunction.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/optimization/linear/LinearObjectiveFunction.java,src/java/org/apache/commons/math/optimization/linear/LinearObjectiveFunction.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/optimization/linear/LinearObjectiveFunction.java,src/java/org/apache/commons/math/optimization/linear/LinearObjectiveFunction.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/optimization/linear/LinearObjectiveFunction.java,src/java/org/apache/commons/math/optimization/linear/LinearObjectiveFunction.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/optimization/linear/LinearObjectiveFunction.java,src/java/org/apache/commons/math/optimization/linear/LinearObjectiveFunction.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/optimization/linear/LinearObjectiveFunction.java,src/java/org/apache/commons/math/optimization/linear/LinearObjectiveFunction.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/optimization/linear/LinearObjectiveFunction.java,src/java/org/apache/commons/math/optimization/linear/LinearObjectiveFunction.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/optimization/linear/LinearObjectiveFunction.java,src/java/org/apache/commons/math/optimization/linear/LinearObjectiveFunction.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/optimization/linear/LinearObjectiveFunction.java,src/java/org/apache/commons/math/optimization/linear/LinearObjectiveFunction.java,18,package org.apache.commons.math.optimization.linear;
True,src/java/org/apache/commons/math/optimization/linear/LinearObjectiveFunction.java,src/java/org/apache/commons/math/optimization/linear/LinearObjectiveFunction.java,20,import java.io.Serializable;
True,src/java/org/apache/commons/math/optimization/linear/LinearObjectiveFunction.java,src/java/org/apache/commons/math/optimization/linear/LinearObjectiveFunction.java,22,import org.apache.commons.math.linear.RealVector;
True,src/java/org/apache/commons/math/optimization/linear/LinearObjectiveFunction.java,src/java/org/apache/commons/math/optimization/linear/LinearObjectiveFunction.java,23,import org.apache.commons.math.linear.RealVectorImpl;
True,src/java/org/apache/commons/math/optimization/linear/LinearObjectiveFunction.java,src/java/org/apache/commons/math/optimization/linear/LinearObjectiveFunction.java,26,* An objective function for a linear optimization problem.
True,src/java/org/apache/commons/math/optimization/linear/LinearObjectiveFunction.java,src/java/org/apache/commons/math/optimization/linear/LinearObjectiveFunction.java,27,* <p>
True,src/java/org/apache/commons/math/optimization/linear/LinearObjectiveFunction.java,src/java/org/apache/commons/math/optimization/linear/LinearObjectiveFunction.java,28,* A linear objective function has one the form:
True,src/java/org/apache/commons/math/optimization/linear/LinearObjectiveFunction.java,src/java/org/apache/commons/math/optimization/linear/LinearObjectiveFunction.java,29,* <pre>
True,src/java/org/apache/commons/math/optimization/linear/LinearObjectiveFunction.java,src/java/org/apache/commons/math/optimization/linear/LinearObjectiveFunction.java,30,* c<sub>1</sub>x<sub>1</sub> + ... c<sub>n</sub>x<sub>n</sub> + d
True,src/java/org/apache/commons/math/optimization/linear/LinearObjectiveFunction.java,src/java/org/apache/commons/math/optimization/linear/LinearObjectiveFunction.java,31,* </pre>
True,src/java/org/apache/commons/math/optimization/linear/LinearObjectiveFunction.java,src/java/org/apache/commons/math/optimization/linear/LinearObjectiveFunction.java,32,"* The c<sub>i</sub> and d are the coefficients of the equation,"
True,src/java/org/apache/commons/math/optimization/linear/LinearObjectiveFunction.java,src/java/org/apache/commons/math/optimization/linear/LinearObjectiveFunction.java,33,* the x<sub>i</sub> are the coordinates of the current point.
True,src/java/org/apache/commons/math/optimization/linear/LinearObjectiveFunction.java,src/java/org/apache/commons/math/optimization/linear/LinearObjectiveFunction.java,34,* </p>
True,src/java/org/apache/commons/math/optimization/linear/LinearObjectiveFunction.java,src/java/org/apache/commons/math/optimization/linear/LinearObjectiveFunction.java,35,* @version $Revision$ $Date$
True,src/java/org/apache/commons/math/optimization/linear/LinearObjectiveFunction.java,src/java/org/apache/commons/math/optimization/linear/LinearObjectiveFunction.java,36,* @since 2.0
True,src/java/org/apache/commons/math/optimization/linear/LinearObjectiveFunction.java,src/java/org/apache/commons/math/optimization/linear/LinearObjectiveFunction.java,38,public class LinearObjectiveFunction implements Serializable {
True,src/java/org/apache/commons/math/optimization/linear/LinearObjectiveFunction.java,src/java/org/apache/commons/math/optimization/linear/LinearObjectiveFunction.java,40,/** Serializable version identifier. */
True,src/java/org/apache/commons/math/optimization/linear/LinearObjectiveFunction.java,src/java/org/apache/commons/math/optimization/linear/LinearObjectiveFunction.java,41,private static final long serialVersionUID = -4531815507568396090L;
True,src/java/org/apache/commons/math/optimization/linear/LinearObjectiveFunction.java,src/java/org/apache/commons/math/optimization/linear/LinearObjectiveFunction.java,43,/** Coefficients of the constraint (c<sub>i</sub>). */
True,src/java/org/apache/commons/math/optimization/linear/LinearObjectiveFunction.java,src/java/org/apache/commons/math/optimization/linear/LinearObjectiveFunction.java,44,private final RealVector coefficients;
True,src/java/org/apache/commons/math/optimization/linear/LinearObjectiveFunction.java,src/java/org/apache/commons/math/optimization/linear/LinearObjectiveFunction.java,46,/** Constant term of the linear equation. */
True,src/java/org/apache/commons/math/optimization/linear/LinearObjectiveFunction.java,src/java/org/apache/commons/math/optimization/linear/LinearObjectiveFunction.java,47,private final double constantTerm;
True,src/java/org/apache/commons/math/optimization/linear/LinearObjectiveFunction.java,src/java/org/apache/commons/math/optimization/linear/LinearObjectiveFunction.java,50,* @param coefficients The coefficients for the linear equation being optimized
True,src/java/org/apache/commons/math/optimization/linear/LinearObjectiveFunction.java,src/java/org/apache/commons/math/optimization/linear/LinearObjectiveFunction.java,51,* @param constantTerm The constant term of the linear equation
True,src/java/org/apache/commons/math/optimization/linear/LinearObjectiveFunction.java,src/java/org/apache/commons/math/optimization/linear/LinearObjectiveFunction.java,53,"public LinearObjectiveFunction(double[] coefficients, double constantTerm) {"
True,src/java/org/apache/commons/math/optimization/linear/LinearObjectiveFunction.java,src/java/org/apache/commons/math/optimization/linear/LinearObjectiveFunction.java,54,"this(new RealVectorImpl(coefficients), constantTerm);"
True,src/java/org/apache/commons/math/optimization/linear/LinearObjectiveFunction.java,src/java/org/apache/commons/math/optimization/linear/LinearObjectiveFunction.java,58,* @param coefficients The coefficients for the linear equation being optimized
True,src/java/org/apache/commons/math/optimization/linear/LinearObjectiveFunction.java,src/java/org/apache/commons/math/optimization/linear/LinearObjectiveFunction.java,59,* @param constantTerm The constant term of the linear equation
True,src/java/org/apache/commons/math/optimization/linear/LinearObjectiveFunction.java,src/java/org/apache/commons/math/optimization/linear/LinearObjectiveFunction.java,61,"public LinearObjectiveFunction(RealVector coefficients, double constantTerm) {"
True,src/java/org/apache/commons/math/optimization/linear/LinearObjectiveFunction.java,src/java/org/apache/commons/math/optimization/linear/LinearObjectiveFunction.java,62,this.coefficients = coefficients;
True,src/java/org/apache/commons/math/optimization/linear/LinearObjectiveFunction.java,src/java/org/apache/commons/math/optimization/linear/LinearObjectiveFunction.java,63,this.constantTerm = constantTerm;
True,src/java/org/apache/commons/math/optimization/linear/LinearObjectiveFunction.java,src/java/org/apache/commons/math/optimization/linear/LinearObjectiveFunction.java,67,* Get the coefficients of the linear equation being optimized.
True,src/java/org/apache/commons/math/optimization/linear/LinearObjectiveFunction.java,src/java/org/apache/commons/math/optimization/linear/LinearObjectiveFunction.java,68,* @return coefficients of the linear equation being optimized
True,src/java/org/apache/commons/math/optimization/linear/LinearObjectiveFunction.java,src/java/org/apache/commons/math/optimization/linear/LinearObjectiveFunction.java,70,public RealVector getCoefficients() {
True,src/java/org/apache/commons/math/optimization/linear/LinearObjectiveFunction.java,src/java/org/apache/commons/math/optimization/linear/LinearObjectiveFunction.java,71,return coefficients;
True,src/java/org/apache/commons/math/optimization/linear/LinearObjectiveFunction.java,src/java/org/apache/commons/math/optimization/linear/LinearObjectiveFunction.java,75,* Get the constant of the linear equation being optimized.
True,src/java/org/apache/commons/math/optimization/linear/LinearObjectiveFunction.java,src/java/org/apache/commons/math/optimization/linear/LinearObjectiveFunction.java,76,* @return constant of the linear equation being optimized
True,src/java/org/apache/commons/math/optimization/linear/LinearObjectiveFunction.java,src/java/org/apache/commons/math/optimization/linear/LinearObjectiveFunction.java,78,public double getConstantTerm() {
True,src/java/org/apache/commons/math/optimization/linear/LinearObjectiveFunction.java,src/java/org/apache/commons/math/optimization/linear/LinearObjectiveFunction.java,79,return constantTerm;
True,src/java/org/apache/commons/math/optimization/linear/LinearObjectiveFunction.java,src/java/org/apache/commons/math/optimization/linear/LinearObjectiveFunction.java,83,* Compute the value of the linear equation at the current point
True,src/java/org/apache/commons/math/optimization/linear/LinearObjectiveFunction.java,src/java/org/apache/commons/math/optimization/linear/LinearObjectiveFunction.java,84,* @param point point at which linear equation must be evaluated
True,src/java/org/apache/commons/math/optimization/linear/LinearObjectiveFunction.java,src/java/org/apache/commons/math/optimization/linear/LinearObjectiveFunction.java,85,* @return value of the linear equation at the current point
True,src/java/org/apache/commons/math/optimization/linear/LinearObjectiveFunction.java,src/java/org/apache/commons/math/optimization/linear/LinearObjectiveFunction.java,87,public double getValue(final double[] point) {
True,src/java/org/apache/commons/math/optimization/linear/LinearObjectiveFunction.java,src/java/org/apache/commons/math/optimization/linear/LinearObjectiveFunction.java,88,return coefficients.dotProduct(point) + constantTerm;
True,src/java/org/apache/commons/math/optimization/linear/LinearObjectiveFunction.java,src/java/org/apache/commons/math/optimization/linear/LinearObjectiveFunction.java,92,* Compute the value of the linear equation at the current point
True,src/java/org/apache/commons/math/optimization/linear/LinearObjectiveFunction.java,src/java/org/apache/commons/math/optimization/linear/LinearObjectiveFunction.java,93,* @param point point at which linear equation must be evaluated
True,src/java/org/apache/commons/math/optimization/linear/LinearObjectiveFunction.java,src/java/org/apache/commons/math/optimization/linear/LinearObjectiveFunction.java,94,* @return value of the linear equation at the current point
True,src/java/org/apache/commons/math/optimization/linear/LinearObjectiveFunction.java,src/java/org/apache/commons/math/optimization/linear/LinearObjectiveFunction.java,96,public double getValue(final RealVector point) {
True,src/java/org/apache/commons/math/optimization/linear/LinearObjectiveFunction.java,src/java/org/apache/commons/math/optimization/linear/LinearObjectiveFunction.java,97,return coefficients.dotProduct(point) + constantTerm;
True,src/java/org/apache/commons/math/optimization/linear/LinearOptimizer.java,src/java/org/apache/commons/math/optimization/linear/LinearOptimizer.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/optimization/linear/LinearOptimizer.java,src/java/org/apache/commons/math/optimization/linear/LinearOptimizer.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/optimization/linear/LinearOptimizer.java,src/java/org/apache/commons/math/optimization/linear/LinearOptimizer.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/optimization/linear/LinearOptimizer.java,src/java/org/apache/commons/math/optimization/linear/LinearOptimizer.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/optimization/linear/LinearOptimizer.java,src/java/org/apache/commons/math/optimization/linear/LinearOptimizer.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/optimization/linear/LinearOptimizer.java,src/java/org/apache/commons/math/optimization/linear/LinearOptimizer.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/optimization/linear/LinearOptimizer.java,src/java/org/apache/commons/math/optimization/linear/LinearOptimizer.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/optimization/linear/LinearOptimizer.java,src/java/org/apache/commons/math/optimization/linear/LinearOptimizer.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/optimization/linear/LinearOptimizer.java,src/java/org/apache/commons/math/optimization/linear/LinearOptimizer.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/optimization/linear/LinearOptimizer.java,src/java/org/apache/commons/math/optimization/linear/LinearOptimizer.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/optimization/linear/LinearOptimizer.java,src/java/org/apache/commons/math/optimization/linear/LinearOptimizer.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/optimization/linear/LinearOptimizer.java,src/java/org/apache/commons/math/optimization/linear/LinearOptimizer.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/optimization/linear/LinearOptimizer.java,src/java/org/apache/commons/math/optimization/linear/LinearOptimizer.java,18,package org.apache.commons.math.optimization.linear;
True,src/java/org/apache/commons/math/optimization/linear/LinearOptimizer.java,src/java/org/apache/commons/math/optimization/linear/LinearOptimizer.java,20,import java.io.Serializable;
True,src/java/org/apache/commons/math/optimization/linear/LinearOptimizer.java,src/java/org/apache/commons/math/optimization/linear/LinearOptimizer.java,21,import java.util.Collection;
True,src/java/org/apache/commons/math/optimization/linear/LinearOptimizer.java,src/java/org/apache/commons/math/optimization/linear/LinearOptimizer.java,23,import org.apache.commons.math.analysis.DifferentiableMultivariateRealFunction;
True,src/java/org/apache/commons/math/optimization/linear/LinearOptimizer.java,src/java/org/apache/commons/math/optimization/linear/LinearOptimizer.java,24,import org.apache.commons.math.optimization.GoalType;
True,src/java/org/apache/commons/math/optimization/linear/LinearOptimizer.java,src/java/org/apache/commons/math/optimization/linear/LinearOptimizer.java,25,import org.apache.commons.math.optimization.OptimizationException;
True,src/java/org/apache/commons/math/optimization/linear/LinearOptimizer.java,src/java/org/apache/commons/math/optimization/linear/LinearOptimizer.java,26,import org.apache.commons.math.optimization.RealPointValuePair;
True,src/java/org/apache/commons/math/optimization/linear/LinearOptimizer.java,src/java/org/apache/commons/math/optimization/linear/LinearOptimizer.java,29,* This interface represents an optimization algorithm for linear problems.
True,src/java/org/apache/commons/math/optimization/linear/LinearOptimizer.java,src/java/org/apache/commons/math/optimization/linear/LinearOptimizer.java,30,* <p>Optimization algorithms find the input point set that either {@link GoalType
True,src/java/org/apache/commons/math/optimization/linear/LinearOptimizer.java,src/java/org/apache/commons/math/optimization/linear/LinearOptimizer.java,31,* maximize or minimize} an objective function. In the linear case the form of
True,src/java/org/apache/commons/math/optimization/linear/LinearOptimizer.java,src/java/org/apache/commons/math/optimization/linear/LinearOptimizer.java,32,* the function is restricted to
True,src/java/org/apache/commons/math/optimization/linear/LinearOptimizer.java,src/java/org/apache/commons/math/optimization/linear/LinearOptimizer.java,33,* <pre>
True,src/java/org/apache/commons/math/optimization/linear/LinearOptimizer.java,src/java/org/apache/commons/math/optimization/linear/LinearOptimizer.java,34,* c<sub>1</sub>x<sub>1</sub> + ... c<sub>n</sub>x<sub>n</sub> = v
True,src/java/org/apache/commons/math/optimization/linear/LinearOptimizer.java,src/java/org/apache/commons/math/optimization/linear/LinearOptimizer.java,35,* </pre>
True,src/java/org/apache/commons/math/optimization/linear/LinearOptimizer.java,src/java/org/apache/commons/math/optimization/linear/LinearOptimizer.java,36,"* and there may be linear constraints too, of one of the forms:"
True,src/java/org/apache/commons/math/optimization/linear/LinearOptimizer.java,src/java/org/apache/commons/math/optimization/linear/LinearOptimizer.java,37,* <ul>
True,src/java/org/apache/commons/math/optimization/linear/LinearOptimizer.java,src/java/org/apache/commons/math/optimization/linear/LinearOptimizer.java,38,*   <li>c<sub>1</sub>x<sub>1</sub> + ... c<sub>n</sub>x<sub>n</sub> = v</li>
True,src/java/org/apache/commons/math/optimization/linear/LinearOptimizer.java,src/java/org/apache/commons/math/optimization/linear/LinearOptimizer.java,39,*   <li>c<sub>1</sub>x<sub>1</sub> + ... c<sub>n</sub>x<sub>n</sub> &lt;= v</li>
True,src/java/org/apache/commons/math/optimization/linear/LinearOptimizer.java,src/java/org/apache/commons/math/optimization/linear/LinearOptimizer.java,40,*   <li>c<sub>1</sub>x<sub>1</sub> + ... c<sub>n</sub>x<sub>n</sub> >= v</li>
True,src/java/org/apache/commons/math/optimization/linear/LinearOptimizer.java,src/java/org/apache/commons/math/optimization/linear/LinearOptimizer.java,41,*   <li>l<sub>1</sub>x<sub>1</sub> + ... l<sub>n</sub>x<sub>n</sub> + l<sub>cst</sub> =
True,src/java/org/apache/commons/math/optimization/linear/LinearOptimizer.java,src/java/org/apache/commons/math/optimization/linear/LinearOptimizer.java,42,*       r<sub>1</sub>x<sub>1</sub> + ... r<sub>n</sub>x<sub>n</sub> + r<sub>cst</sub></li>
True,src/java/org/apache/commons/math/optimization/linear/LinearOptimizer.java,src/java/org/apache/commons/math/optimization/linear/LinearOptimizer.java,43,*   <li>l<sub>1</sub>x<sub>1</sub> + ... l<sub>n</sub>x<sub>n</sub> + l<sub>cst</sub> &lt;=
True,src/java/org/apache/commons/math/optimization/linear/LinearOptimizer.java,src/java/org/apache/commons/math/optimization/linear/LinearOptimizer.java,44,*       r<sub>1</sub>x<sub>1</sub> + ... r<sub>n</sub>x<sub>n</sub> + r<sub>cst</sub></li>
True,src/java/org/apache/commons/math/optimization/linear/LinearOptimizer.java,src/java/org/apache/commons/math/optimization/linear/LinearOptimizer.java,45,*   <li>l<sub>1</sub>x<sub>1</sub> + ... l<sub>n</sub>x<sub>n</sub> + l<sub>cst</sub> >=
True,src/java/org/apache/commons/math/optimization/linear/LinearOptimizer.java,src/java/org/apache/commons/math/optimization/linear/LinearOptimizer.java,46,*       r<sub>1</sub>x<sub>1</sub> + ... r<sub>n</sub>x<sub>n</sub> + r<sub>cst</sub></li>
True,src/java/org/apache/commons/math/optimization/linear/LinearOptimizer.java,src/java/org/apache/commons/math/optimization/linear/LinearOptimizer.java,47,* </ul>
True,src/java/org/apache/commons/math/optimization/linear/LinearOptimizer.java,src/java/org/apache/commons/math/optimization/linear/LinearOptimizer.java,48,"* where the c<sub>i</sub>, l<sub>i</sub> or r<sub>i</sub> are the coefficients of"
True,src/java/org/apache/commons/math/optimization/linear/LinearOptimizer.java,src/java/org/apache/commons/math/optimization/linear/LinearOptimizer.java,49,"* the constraints, the x<sub>i</sub> are the coordinates of the current point and"
True,src/java/org/apache/commons/math/optimization/linear/LinearOptimizer.java,src/java/org/apache/commons/math/optimization/linear/LinearOptimizer.java,50,* v is the value of the constraint.
True,src/java/org/apache/commons/math/optimization/linear/LinearOptimizer.java,src/java/org/apache/commons/math/optimization/linear/LinearOptimizer.java,51,* </p>
True,src/java/org/apache/commons/math/optimization/linear/LinearOptimizer.java,src/java/org/apache/commons/math/optimization/linear/LinearOptimizer.java,52,* @version $Revision$ $Date$
True,src/java/org/apache/commons/math/optimization/linear/LinearOptimizer.java,src/java/org/apache/commons/math/optimization/linear/LinearOptimizer.java,53,* @since 2.0
True,src/java/org/apache/commons/math/optimization/linear/LinearOptimizer.java,src/java/org/apache/commons/math/optimization/linear/LinearOptimizer.java,55,public interface LinearOptimizer extends Serializable {
True,src/java/org/apache/commons/math/optimization/linear/LinearOptimizer.java,src/java/org/apache/commons/math/optimization/linear/LinearOptimizer.java,57,/** Set the maximal number of iterations of the algorithm.
True,src/java/org/apache/commons/math/optimization/linear/LinearOptimizer.java,src/java/org/apache/commons/math/optimization/linear/LinearOptimizer.java,58,* @param maxIterations maximal number of function calls
True,src/java/org/apache/commons/math/optimization/linear/LinearOptimizer.java,src/java/org/apache/commons/math/optimization/linear/LinearOptimizer.java,60,void setMaxIterations(int maxIterations);
True,src/java/org/apache/commons/math/optimization/linear/LinearOptimizer.java,src/java/org/apache/commons/math/optimization/linear/LinearOptimizer.java,62,/** Get the maximal number of iterations of the algorithm.
True,src/java/org/apache/commons/math/optimization/linear/LinearOptimizer.java,src/java/org/apache/commons/math/optimization/linear/LinearOptimizer.java,63,* @return maximal number of iterations
True,src/java/org/apache/commons/math/optimization/linear/LinearOptimizer.java,src/java/org/apache/commons/math/optimization/linear/LinearOptimizer.java,65,int getMaxIterations();
True,src/java/org/apache/commons/math/optimization/linear/LinearOptimizer.java,src/java/org/apache/commons/math/optimization/linear/LinearOptimizer.java,67,/** Get the number of iterations realized by the algorithm.
True,src/java/org/apache/commons/math/optimization/linear/LinearOptimizer.java,src/java/org/apache/commons/math/optimization/linear/LinearOptimizer.java,68,* <p>
True,src/java/org/apache/commons/math/optimization/linear/LinearOptimizer.java,src/java/org/apache/commons/math/optimization/linear/LinearOptimizer.java,69,* The number of evaluations corresponds to the last call to the
True,src/java/org/apache/commons/math/optimization/linear/LinearOptimizer.java,src/java/org/apache/commons/math/optimization/linear/LinearOptimizer.java,70,"* {@link #optimize(DifferentiableMultivariateRealFunction, GoalType, double[]) optimize}"
True,src/java/org/apache/commons/math/optimization/linear/LinearOptimizer.java,src/java/org/apache/commons/math/optimization/linear/LinearOptimizer.java,71,* method. It is 0 if the method has not been called yet.
True,src/java/org/apache/commons/math/optimization/linear/LinearOptimizer.java,src/java/org/apache/commons/math/optimization/linear/LinearOptimizer.java,72,* </p>
True,src/java/org/apache/commons/math/optimization/linear/LinearOptimizer.java,src/java/org/apache/commons/math/optimization/linear/LinearOptimizer.java,73,* @return number of iterations
True,src/java/org/apache/commons/math/optimization/linear/LinearOptimizer.java,src/java/org/apache/commons/math/optimization/linear/LinearOptimizer.java,75,int getIterations();
True,src/java/org/apache/commons/math/optimization/linear/LinearOptimizer.java,src/java/org/apache/commons/math/optimization/linear/LinearOptimizer.java,77,/** Optimizes an objective function.
True,src/java/org/apache/commons/math/optimization/linear/LinearOptimizer.java,src/java/org/apache/commons/math/optimization/linear/LinearOptimizer.java,78,* @param f linear objective function
True,src/java/org/apache/commons/math/optimization/linear/LinearOptimizer.java,src/java/org/apache/commons/math/optimization/linear/LinearOptimizer.java,79,* @param constraints linear constraints
True,src/java/org/apache/commons/math/optimization/linear/LinearOptimizer.java,src/java/org/apache/commons/math/optimization/linear/LinearOptimizer.java,80,* @param goalType type of optimization goal: either {@link GoalType#MAXIMIZE}
True,src/java/org/apache/commons/math/optimization/linear/LinearOptimizer.java,src/java/org/apache/commons/math/optimization/linear/LinearOptimizer.java,81,* or {@link GoalType#MINIMIZE}
True,src/java/org/apache/commons/math/optimization/linear/LinearOptimizer.java,src/java/org/apache/commons/math/optimization/linear/LinearOptimizer.java,82,* @param restrictToNonNegative whether to restrict the variables to non-negative values
True,src/java/org/apache/commons/math/optimization/linear/LinearOptimizer.java,src/java/org/apache/commons/math/optimization/linear/LinearOptimizer.java,83,* @return point/value pair giving the optimal value for objective function
True,src/java/org/apache/commons/math/optimization/linear/LinearOptimizer.java,src/java/org/apache/commons/math/optimization/linear/LinearOptimizer.java,84,* @exception OptimizationException if no solution fulfilling the constraints
True,src/java/org/apache/commons/math/optimization/linear/LinearOptimizer.java,src/java/org/apache/commons/math/optimization/linear/LinearOptimizer.java,85,* can be found in the allowed number of iterations
True,src/java/org/apache/commons/math/optimization/linear/LinearOptimizer.java,src/java/org/apache/commons/math/optimization/linear/LinearOptimizer.java,87,"RealPointValuePair optimize(LinearObjectiveFunction f, Collection<LinearConstraint> constraints,"
True,src/java/org/apache/commons/math/optimization/linear/LinearOptimizer.java,src/java/org/apache/commons/math/optimization/linear/LinearOptimizer.java,88,"GoalType goalType, boolean restrictToNonNegative)"
True,src/java/org/apache/commons/math/optimization/linear/LinearOptimizer.java,src/java/org/apache/commons/math/optimization/linear/LinearOptimizer.java,89,throws OptimizationException;
True,src/java/org/apache/commons/math/optimization/linear/NoFeasibleSolutionException.java,src/java/org/apache/commons/math/optimization/linear/NoFeasibleSolutionException.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/optimization/linear/NoFeasibleSolutionException.java,src/java/org/apache/commons/math/optimization/linear/NoFeasibleSolutionException.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/optimization/linear/NoFeasibleSolutionException.java,src/java/org/apache/commons/math/optimization/linear/NoFeasibleSolutionException.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/optimization/linear/NoFeasibleSolutionException.java,src/java/org/apache/commons/math/optimization/linear/NoFeasibleSolutionException.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/optimization/linear/NoFeasibleSolutionException.java,src/java/org/apache/commons/math/optimization/linear/NoFeasibleSolutionException.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/optimization/linear/NoFeasibleSolutionException.java,src/java/org/apache/commons/math/optimization/linear/NoFeasibleSolutionException.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/optimization/linear/NoFeasibleSolutionException.java,src/java/org/apache/commons/math/optimization/linear/NoFeasibleSolutionException.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/optimization/linear/NoFeasibleSolutionException.java,src/java/org/apache/commons/math/optimization/linear/NoFeasibleSolutionException.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/optimization/linear/NoFeasibleSolutionException.java,src/java/org/apache/commons/math/optimization/linear/NoFeasibleSolutionException.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/optimization/linear/NoFeasibleSolutionException.java,src/java/org/apache/commons/math/optimization/linear/NoFeasibleSolutionException.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/optimization/linear/NoFeasibleSolutionException.java,src/java/org/apache/commons/math/optimization/linear/NoFeasibleSolutionException.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/optimization/linear/NoFeasibleSolutionException.java,src/java/org/apache/commons/math/optimization/linear/NoFeasibleSolutionException.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/optimization/linear/NoFeasibleSolutionException.java,src/java/org/apache/commons/math/optimization/linear/NoFeasibleSolutionException.java,18,package org.apache.commons.math.optimization.linear;
True,src/java/org/apache/commons/math/optimization/linear/NoFeasibleSolutionException.java,src/java/org/apache/commons/math/optimization/linear/NoFeasibleSolutionException.java,20,import org.apache.commons.math.optimization.OptimizationException;
True,src/java/org/apache/commons/math/optimization/linear/NoFeasibleSolutionException.java,src/java/org/apache/commons/math/optimization/linear/NoFeasibleSolutionException.java,23,* This class represents exceptions thrown by optimizers when no solution
True,src/java/org/apache/commons/math/optimization/linear/NoFeasibleSolutionException.java,src/java/org/apache/commons/math/optimization/linear/NoFeasibleSolutionException.java,24,* fulfills the constraints.
True,src/java/org/apache/commons/math/optimization/linear/NoFeasibleSolutionException.java,src/java/org/apache/commons/math/optimization/linear/NoFeasibleSolutionException.java,25,* @version $Revision$ $Date$
True,src/java/org/apache/commons/math/optimization/linear/NoFeasibleSolutionException.java,src/java/org/apache/commons/math/optimization/linear/NoFeasibleSolutionException.java,26,* @since 2.0
True,src/java/org/apache/commons/math/optimization/linear/NoFeasibleSolutionException.java,src/java/org/apache/commons/math/optimization/linear/NoFeasibleSolutionException.java,28,public class NoFeasibleSolutionException extends OptimizationException {
True,src/java/org/apache/commons/math/optimization/linear/NoFeasibleSolutionException.java,src/java/org/apache/commons/math/optimization/linear/NoFeasibleSolutionException.java,30,/** Serializable version identifier. */
True,src/java/org/apache/commons/math/optimization/linear/NoFeasibleSolutionException.java,src/java/org/apache/commons/math/optimization/linear/NoFeasibleSolutionException.java,31,private static final long serialVersionUID = -3044253632189082760L;
True,src/java/org/apache/commons/math/optimization/linear/NoFeasibleSolutionException.java,src/java/org/apache/commons/math/optimization/linear/NoFeasibleSolutionException.java,34,* Simple constructor using a default message.
True,src/java/org/apache/commons/math/optimization/linear/NoFeasibleSolutionException.java,src/java/org/apache/commons/math/optimization/linear/NoFeasibleSolutionException.java,36,public NoFeasibleSolutionException() {
True,src/java/org/apache/commons/math/optimization/linear/NoFeasibleSolutionException.java,src/java/org/apache/commons/math/optimization/linear/NoFeasibleSolutionException.java,37,"super(""no feasible solution"");"
True,src/java/org/apache/commons/math/optimization/linear/Relationship.java,src/java/org/apache/commons/math/optimization/linear/Relationship.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/optimization/linear/Relationship.java,src/java/org/apache/commons/math/optimization/linear/Relationship.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/optimization/linear/Relationship.java,src/java/org/apache/commons/math/optimization/linear/Relationship.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/optimization/linear/Relationship.java,src/java/org/apache/commons/math/optimization/linear/Relationship.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/optimization/linear/Relationship.java,src/java/org/apache/commons/math/optimization/linear/Relationship.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/optimization/linear/Relationship.java,src/java/org/apache/commons/math/optimization/linear/Relationship.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/optimization/linear/Relationship.java,src/java/org/apache/commons/math/optimization/linear/Relationship.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/optimization/linear/Relationship.java,src/java/org/apache/commons/math/optimization/linear/Relationship.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/optimization/linear/Relationship.java,src/java/org/apache/commons/math/optimization/linear/Relationship.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/optimization/linear/Relationship.java,src/java/org/apache/commons/math/optimization/linear/Relationship.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/optimization/linear/Relationship.java,src/java/org/apache/commons/math/optimization/linear/Relationship.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/optimization/linear/Relationship.java,src/java/org/apache/commons/math/optimization/linear/Relationship.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/optimization/linear/Relationship.java,src/java/org/apache/commons/math/optimization/linear/Relationship.java,18,package org.apache.commons.math.optimization.linear;
True,src/java/org/apache/commons/math/optimization/linear/Relationship.java,src/java/org/apache/commons/math/optimization/linear/Relationship.java,21,* Types of relationships between two cells in a Solver {@link LinearConstraint}.
True,src/java/org/apache/commons/math/optimization/linear/Relationship.java,src/java/org/apache/commons/math/optimization/linear/Relationship.java,22,* @version $Revision$ $Date$
True,src/java/org/apache/commons/math/optimization/linear/Relationship.java,src/java/org/apache/commons/math/optimization/linear/Relationship.java,23,* @since 2.0
True,src/java/org/apache/commons/math/optimization/linear/Relationship.java,src/java/org/apache/commons/math/optimization/linear/Relationship.java,25,public enum Relationship {
True,src/java/org/apache/commons/math/optimization/linear/Relationship.java,src/java/org/apache/commons/math/optimization/linear/Relationship.java,27,/** Equality relationship. */
True,src/java/org/apache/commons/math/optimization/linear/Relationship.java,src/java/org/apache/commons/math/optimization/linear/Relationship.java,28,"EQ(""=""),"
True,src/java/org/apache/commons/math/optimization/linear/Relationship.java,src/java/org/apache/commons/math/optimization/linear/Relationship.java,30,/** Lesser than or equal relationship. */
True,src/java/org/apache/commons/math/optimization/linear/Relationship.java,src/java/org/apache/commons/math/optimization/linear/Relationship.java,31,"LEQ(""<=""),"
True,src/java/org/apache/commons/math/optimization/linear/Relationship.java,src/java/org/apache/commons/math/optimization/linear/Relationship.java,33,/** Greater than or equal relationship. */
True,src/java/org/apache/commons/math/optimization/linear/Relationship.java,src/java/org/apache/commons/math/optimization/linear/Relationship.java,34,"GEQ("">="");"
True,src/java/org/apache/commons/math/optimization/linear/Relationship.java,src/java/org/apache/commons/math/optimization/linear/Relationship.java,36,/** Display string for the relationship. */
True,src/java/org/apache/commons/math/optimization/linear/Relationship.java,src/java/org/apache/commons/math/optimization/linear/Relationship.java,37,private String stringValue;
True,src/java/org/apache/commons/math/optimization/linear/Relationship.java,src/java/org/apache/commons/math/optimization/linear/Relationship.java,39,/** Simple constructor.
True,src/java/org/apache/commons/math/optimization/linear/Relationship.java,src/java/org/apache/commons/math/optimization/linear/Relationship.java,40,* @param stringValue display string for the relationship
True,src/java/org/apache/commons/math/optimization/linear/Relationship.java,src/java/org/apache/commons/math/optimization/linear/Relationship.java,42,private Relationship(String stringValue) {
True,src/java/org/apache/commons/math/optimization/linear/Relationship.java,src/java/org/apache/commons/math/optimization/linear/Relationship.java,43,this.stringValue = stringValue;
True,src/java/org/apache/commons/math/optimization/linear/Relationship.java,src/java/org/apache/commons/math/optimization/linear/Relationship.java,46,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/optimization/linear/Relationship.java,src/java/org/apache/commons/math/optimization/linear/Relationship.java,47,@Override
True,src/java/org/apache/commons/math/optimization/linear/Relationship.java,src/java/org/apache/commons/math/optimization/linear/Relationship.java,48,public String toString() {
True,src/java/org/apache/commons/math/optimization/linear/Relationship.java,src/java/org/apache/commons/math/optimization/linear/Relationship.java,49,return stringValue;
True,src/java/org/apache/commons/math/optimization/linear/Relationship.java,src/java/org/apache/commons/math/optimization/linear/Relationship.java,53,* Get the relationship obtained when multiplying all coefficients by -1.
True,src/java/org/apache/commons/math/optimization/linear/Relationship.java,src/java/org/apache/commons/math/optimization/linear/Relationship.java,54,* @return relationship obtained when multiplying all coefficients by -1
True,src/java/org/apache/commons/math/optimization/linear/Relationship.java,src/java/org/apache/commons/math/optimization/linear/Relationship.java,56,public Relationship oppositeRelationship() {
True,src/java/org/apache/commons/math/optimization/linear/Relationship.java,src/java/org/apache/commons/math/optimization/linear/Relationship.java,57,switch (this) {
True,src/java/org/apache/commons/math/optimization/linear/Relationship.java,src/java/org/apache/commons/math/optimization/linear/Relationship.java,58,case LEQ :
True,src/java/org/apache/commons/math/optimization/linear/Relationship.java,src/java/org/apache/commons/math/optimization/linear/Relationship.java,59,return GEQ;
True,src/java/org/apache/commons/math/optimization/linear/Relationship.java,src/java/org/apache/commons/math/optimization/linear/Relationship.java,60,case GEQ :
True,src/java/org/apache/commons/math/optimization/linear/Relationship.java,src/java/org/apache/commons/math/optimization/linear/Relationship.java,61,return LEQ;
True,src/java/org/apache/commons/math/optimization/linear/Relationship.java,src/java/org/apache/commons/math/optimization/linear/Relationship.java,62,default :
True,src/java/org/apache/commons/math/optimization/linear/Relationship.java,src/java/org/apache/commons/math/optimization/linear/Relationship.java,63,return EQ;
True,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,18,package org.apache.commons.math.optimization.linear;
True,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,20,import org.apache.commons.math.optimization.OptimizationException;
True,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,21,import org.apache.commons.math.optimization.RealPointValuePair;
True,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,22,import org.apache.commons.math.util.MathUtils;
True,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,26,* Solves a linear problem using the Two-Phase Simplex Method.
True,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,27,* @version $Revision$ $Date$
True,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,28,* @since 2.0
True,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,30,public class SimplexSolver extends AbstractLinearOptimizer {
True,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,32,/** Serializable version identifier. */
True,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,33,private static final long serialVersionUID = -4886937648715323786L;
True,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,35,/** Default amount of error to accept in floating point comparisons. */
True,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,36,private static final double DEFAULT_EPSILON = 1.0e-10;
True,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,38,/** Amount of error to accept in floating point comparisons. */
True,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,39,protected final double epsilon;
True,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,42,* Build a simplex solver with default settings.
True,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,44,public SimplexSolver() {
True,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,45,this(DEFAULT_EPSILON);
True,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,49,* Build a simplex solver with a specified accepted amount of error
True,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,50,* @param epsilon the amount of error to accept in floating point comparisons
True,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,52,public SimplexSolver(final double epsilon) {
True,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,53,this.epsilon = epsilon;
True,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,57,* Returns the column with the most negative coefficient in the objective function row.
True,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,58,* @param tableau simple tableau for the problem
True,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,59,* @return column with the most negative coefficient
True,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,61,private Integer getPivotColumn(SimplexTableau tableau) {
True,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,62,double minValue = 0;
True,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,63,Integer minPos = null;
True,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,64,for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1; i++) {
True,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,65,"if (tableau.getEntry(0, i) < minValue) {"
True,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,66,"minValue = tableau.getEntry(0, i);"
True,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,67,minPos = i;
True,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,70,return minPos;
True,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,74,* Returns the row with the minimum ratio as given by the minimum ratio test (MRT).
True,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,75,* @param tableau simple tableau for the problem
True,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,76,* @param col the column to test the ratio of.  See {@link #getPivotColumn()}
True,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,77,* @return row with the minimum ratio
True,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,79,"private Integer getPivotRow(final int col, final SimplexTableau tableau) {"
True,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,80,double minRatio = Double.MAX_VALUE;
True,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,81,Integer minRatioPos = null;
True,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,82,for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {
True,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,83,"double rhs = tableau.getEntry(i, tableau.getWidth() - 1);"
True,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,84,"if (tableau.getEntry(i, col) >= 0) {"
True,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,85,"double ratio = rhs / tableau.getEntry(i, col);"
True,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,86,if (ratio < minRatio) {
True,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,87,minRatio = ratio;
True,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,88,minRatioPos = i;
True,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,92,return minRatioPos;
True,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,97,* Runs one iteration of the Simplex method on the given model.
True,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,98,* @param tableau simple tableau for the problem
True,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,99,* @throws OptimizationException if the maximal iteration count has been
True,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,100,* exceeded or if the model is found not to have a bounded solution
True,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,102,protected void doIteration(final SimplexTableau tableau)
True,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,103,throws OptimizationException {
True,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,105,incrementIterationsCounter();
True,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,107,Integer pivotCol = getPivotColumn(tableau);
True,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,108,"Integer pivotRow = getPivotRow(pivotCol, tableau);"
True,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,109,if (pivotRow == null) {
True,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,110,throw new UnboundedSolutionException();
True,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,113,// set the pivot element to 1
True,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,114,"double pivotVal = tableau.getEntry(pivotRow, pivotCol);"
True,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,115,"tableau.divideRow(pivotRow, pivotVal);"
True,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,117,// set the rest of the pivot column to 0
True,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,118,for (int i = 0; i < tableau.getHeight(); i++) {
True,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,119,if (i != pivotRow) {
True,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,120,"double multiplier = tableau.getEntry(i, pivotCol);"
True,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,121,"tableau.subtractRow(i, pivotRow, multiplier);"
True,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,127,* Checks whether Phase 1 is solved.
True,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,128,* @param tableau simple tableau for the problem
True,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,129,* @return whether Phase 1 is solved
True,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,131,private boolean isPhase1Solved(final SimplexTableau tableau) {
True,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,132,if (tableau.getNumArtificialVariables() == 0) {
True,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,133,return true;
True,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,135,for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1; i++) {
True,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,136,"if (tableau.getEntry(0, i) < 0) {"
True,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,137,return false;
True,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,140,return true;
True,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,144,* Returns whether the problem is at an optimal state.
True,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,145,* @param tableau simple tableau for the problem
True,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,146,* @return whether the model has been solved
True,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,148,public boolean isOptimal(final SimplexTableau tableau) {
True,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,149,if (tableau.getNumArtificialVariables() > 0) {
True,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,150,return false;
True,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,152,for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1; i++) {
True,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,153,"if (tableau.getEntry(0, i) < 0) {"
True,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,154,return false;
True,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,157,return true;
True,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,161,* Solves Phase 1 of the Simplex method.
True,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,162,* @param tableau simple tableau for the problem
True,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,163,* @exception OptimizationException if the maximal number of iterations is
True,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,164,"* exceeded, or if the problem is found not to have a bounded solution, or"
True,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,165,* if there is no feasible solution
True,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,167,protected void solvePhase1(final SimplexTableau tableau)
True,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,168,throws OptimizationException {
True,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,169,// make sure we're in Phase 1
True,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,170,if (tableau.getNumArtificialVariables() == 0) {
True,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,171,return;
True,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,174,while (!isPhase1Solved(tableau)) {
True,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,175,doIteration(tableau);
True,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,178,// if W is not zero then we have no feasible solution
True,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,179,"if (!MathUtils.equals(tableau.getEntry(0, tableau.getRhsOffset()), 0, epsilon)) {"
True,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,180,throw new NoFeasibleSolutionException();
True,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,184,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,185,public RealPointValuePair doOptimize()
True,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,186,throws OptimizationException {
True,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,187,final SimplexTableau tableau =
True,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,188,"new SimplexTableau(f, constraints, goalType, restrictToNonNegative);"
True,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,189,solvePhase1(tableau);
True,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,190,tableau.discardArtificialVariables();
True,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,191,while (!isOptimal(tableau)) {
True,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,192,doIteration(tableau);
True,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,194,return tableau.getSolution();
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,18,package org.apache.commons.math.optimization.linear;
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,20,import java.io.Serializable;
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,21,import java.util.ArrayList;
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,22,import java.util.Collection;
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,23,import java.util.List;
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,25,import org.apache.commons.math.linear.RealMatrix;
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,26,import org.apache.commons.math.linear.RealMatrixImpl;
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,27,import org.apache.commons.math.linear.RealVector;
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,28,import org.apache.commons.math.optimization.GoalType;
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,29,import org.apache.commons.math.optimization.RealPointValuePair;
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,32,* A tableau for use in the Simplex method.
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,34,* <p>
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,35,* Example:
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,36,* <pre>
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,37,*   W |  Z |  x1 |  x2 |  x- | s1 |  s2 |  a1 |  RHS
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,39,*  -1    0    0     0     0     0     0     1     0   &lt;= phase 1 objective
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,40,*   0    1   -15   -10    0     0     0     0     0   &lt;= phase 2 objective
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,41,*   0    0    1     0     0     1     0     0     2   &lt;= constraint 1
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,42,*   0    0    0     1     0     0     1     0     3   &lt;= constraint 2
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,43,*   0    0    1     1     0     0     0     1     4   &lt;= constraint 3
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,44,* </pre>
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,45,* W: Phase 1 objective function</br>
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,46,* Z: Phase 2 objective function</br>
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,47,* x1 &amp; x2: Decision variables</br>
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,48,* x-: Extra decision variable to allow for negative values</br>
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,49,* s1 &amp; s2: Slack/Surplus variables</br>
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,50,* a1: Artificial variable</br>
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,51,* RHS: Right hand side</br>
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,52,* </p>
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,53,* @version $Revision$ $Date$
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,54,* @since 2.0
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,56,class SimplexTableau implements Serializable {
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,58,/** Serializable version identifier. */
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,59,private static final long serialVersionUID = -1369660067587938365L;
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,61,/** Linear objective function. */
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,62,private final LinearObjectiveFunction f;
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,64,/** Linear constraints. */
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,65,private final Collection<LinearConstraint> constraints;
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,67,/** Whether to restrict the variables to non-negative values. */
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,68,private final boolean restrictToNonNegative;
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,70,/** Simple tableau. */
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,71,protected RealMatrix tableau;
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,73,/** Number of decision variables. */
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,74,protected final int numDecisionVariables;
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,76,/** Number of slack variables. */
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,77,protected final int numSlackVariables;
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,79,/** Number of artificial variables. */
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,80,protected int numArtificialVariables;
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,83,* Build a tableau for a linear problem.
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,84,* @param f linear objective function
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,85,* @param constraints linear constraints
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,86,* @param goalType type of optimization goal: either {@link GoalType#MAXIMIZE}
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,87,* or {@link GoalType#MINIMIZE}
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,88,* @param restrictToNonNegative whether to restrict the variables to non-negative values
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,90,"SimplexTableau(final LinearObjectiveFunction f,"
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,91,"final Collection<LinearConstraint> constraints,"
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,92,"final GoalType goalType, final boolean restrictToNonNegative) {"
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,93,this.f                      = f;
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,94,this.constraints            = constraints;
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,95,this.restrictToNonNegative  = restrictToNonNegative;
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,96,this.numDecisionVariables   = getNumVariables() + (restrictToNonNegative ? 0 : 1);
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,97,this.numSlackVariables      = getConstraintTypeCounts(Relationship.LEQ) +
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,98,getConstraintTypeCounts(Relationship.GEQ);
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,99,this.numArtificialVariables = getConstraintTypeCounts(Relationship.EQ) +
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,100,getConstraintTypeCounts(Relationship.GEQ);
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,101,this.tableau = new RealMatrixImpl(createTableau(goalType == GoalType.MAXIMIZE));
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,102,initialize();
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,106,* Create the tableau by itself.
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,107,"* @param maximize if true, goal is to maximize the objective function"
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,108,* @return created tableau
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,110,protected double[][] createTableau(final boolean maximize) {
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,112,// create a matrix of the correct size
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,113,List<LinearConstraint> constraints = getNormalizedConstraints();
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,114,int width = numDecisionVariables + numSlackVariables +
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,115,numArtificialVariables + getNumObjectiveFunctions() + 1; // + 1 is for RHS
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,116,int height = constraints.size() + getNumObjectiveFunctions();
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,117,double[][] matrix = new double[height][width];
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,119,// initialize the objective function rows
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,120,if (getNumObjectiveFunctions() == 2) {
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,121,matrix[0][0] = -1;
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,123,int zIndex = (getNumObjectiveFunctions() == 1) ? 0 : 1;
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,124,matrix[zIndex][zIndex] = maximize ? 1 : -1;
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,125,RealVector objectiveCoefficients =
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,126,maximize ? f.getCoefficients().mapMultiply(-1) : f.getCoefficients();
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,127,"copyArray(objectiveCoefficients.getData(), matrix[zIndex], getNumObjectiveFunctions());"
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,128,matrix[zIndex][width - 1] =
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,129,maximize ? f.getConstantTerm() : -1 * f.getConstantTerm();
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,131,if (!restrictToNonNegative) {
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,132,matrix[zIndex][getSlackVariableOffset() - 1] =
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,133,getInvertedCoeffiecientSum(objectiveCoefficients);
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,136,// initialize the constraint rows
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,137,int slackVar = 0;
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,138,int artificialVar = 0;
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,139,for (int i = 0; i < constraints.size(); i++) {
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,140,LinearConstraint constraint = constraints.get(i);
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,141,int row = getNumObjectiveFunctions() + i;
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,143,// decision variable coefficients
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,144,"copyArray(constraint.getCoefficients().getData(), matrix[row], 1);"
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,146,// x-
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,147,if (!restrictToNonNegative) {
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,148,matrix[row][getSlackVariableOffset() - 1] =
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,149,getInvertedCoeffiecientSum(constraint.getCoefficients());
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,152,// RHS
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,153,matrix[row][width - 1] = constraint.getValue();
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,155,// slack variables
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,156,if (constraint.getRelationship() == Relationship.LEQ) {
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,157,matrix[row][getSlackVariableOffset() + slackVar++] = 1;  // slack
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,158,} else if (constraint.getRelationship() == Relationship.GEQ) {
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,159,matrix[row][getSlackVariableOffset() + slackVar++] = -1; // excess
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,162,// artificial variables
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,163,if ((constraint.getRelationship() == Relationship.EQ) ||
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,164,(constraint.getRelationship() == Relationship.GEQ)) {
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,165,matrix[0][getArtificialVariableOffset() + artificialVar] = 1;
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,166,matrix[row][getArtificialVariableOffset() + artificialVar++] = 1;
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,170,return matrix;
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,173,/** Get the number of variables.
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,174,* @return number of variables
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,176,public int getNumVariables() {
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,177,return f.getCoefficients().getDimension();
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,181,* Get new versions of the constraints which have positive right hand sides.
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,182,* @return new versions of the constraints
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,184,public List<LinearConstraint> getNormalizedConstraints() {
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,185,List<LinearConstraint> normalized = new ArrayList<LinearConstraint>();
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,186,for (LinearConstraint constraint : constraints) {
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,187,normalized.add(normalize(constraint));
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,189,return normalized;
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,193,* Get a new equation equivalent to this one with a positive right hand side.
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,194,* @param constraint reference constraint
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,195,* @return new equation
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,197,private LinearConstraint normalize(final LinearConstraint constraint) {
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,198,if (constraint.getValue() < 0) {
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,199,"return new LinearConstraint(constraint.getCoefficients().mapMultiply(-1),"
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,200,"constraint.getRelationship().oppositeRelationship(),"
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,201,-1 * constraint.getValue());
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,203,"return new LinearConstraint(constraint.getCoefficients(),"
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,204,"constraint.getRelationship(), constraint.getValue());"
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,208,* Get the number of objective functions in this tableau.
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,209,* @return 2 for Phase 1.  1 for Phase 2.
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,211,protected final int getNumObjectiveFunctions() {
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,212,return this.numArtificialVariables > 0 ? 2 : 1;
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,216,* Get a count of constraints corresponding to a specified relationship.
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,217,* @param relationship relationship to count
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,218,* @return number of constraint with the specified relationship
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,220,private int getConstraintTypeCounts(final Relationship relationship) {
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,221,int count = 0;
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,222,for (final LinearConstraint constraint : constraints) {
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,223,if (constraint.getRelationship() == relationship) {
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,224,++count;
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,227,return count;
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,231,* Puts the tableau in proper form by zeroing out the artificial variables
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,232,* in the objective function via elementary row operations.
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,234,private void initialize() {
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,235,for (int artificialVar = 0; artificialVar < numArtificialVariables; artificialVar++) {
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,236,int row = getBasicRow(getArtificialVariableOffset() + artificialVar);
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,237,"subtractRow(0, row, 1.0);"
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,242,* Get the -1 times the sum of all coefficients in the given array.
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,243,* @param coefficients coefficients to sum
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,244,* @return the -1 times the sum of all coefficients in the given array.
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,246,protected static double getInvertedCoeffiecientSum(final RealVector coefficients) {
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,247,double sum = 0;
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,248,for (double coefficient : coefficients.getData()) {
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,249,sum -= coefficient;
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,251,return sum;
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,255,* Checks whether the given column is basic.
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,256,* @param col index of the column to check
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,257,* @return the row that the variable is basic in.  null if the column is not basic
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,259,private Integer getBasicRow(final int col) {
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,260,Integer row = null;
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,261,for (int i = getNumObjectiveFunctions(); i < getHeight(); i++) {
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,262,"if (getEntry(i, col) != 0.0) {"
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,263,if (row == null) {
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,264,row = i;
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,265,} else {
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,266,return null;
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,270,return row;
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,274,* Removes the phase 1 objective function and artificial variables from this tableau.
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,276,protected void discardArtificialVariables() {
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,277,if (numArtificialVariables == 0) {
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,278,return;
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,280,int width = getWidth() - numArtificialVariables - 1;
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,281,int height = getHeight() - 1;
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,282,double[][] matrix = new double[height][width];
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,283,for (int i = 0; i < height; i++) {
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,284,for (int j = 0; j < width - 1; j++) {
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,285,"matrix[i][j] = getEntry(i + 1, j + 1);"
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,287,"matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());"
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,289,this.tableau = new RealMatrixImpl(matrix);
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,290,this.numArtificialVariables = 0;
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,295,* @param src the source array
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,296,* @param dest the destination array
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,297,* @param destPos the destination position
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,299,"private void copyArray(final double[] src, final double[] dest,"
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,300,final int destPos) {
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,301,"System.arraycopy(src, 0, dest, getNumObjectiveFunctions(), src.length);"
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,305,* Get the current solution.
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,306,* <p>
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,307,* {@link #solve} should be called first for this to be the optimal solution.
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,308,* </p>
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,309,* @return current solution
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,311,protected RealPointValuePair getSolution() {
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,312,double[] coefficients = new double[getOriginalNumDecisionVariables()];
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,313,double mostNegative = getDecisionVariableValue(getOriginalNumDecisionVariables());
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,314,for (int i = 0; i < coefficients.length; i++) {
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,315,coefficients[i] =
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,316,getDecisionVariableValue(i) - (restrictToNonNegative ? 0 : mostNegative);
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,318,"return new RealPointValuePair(coefficients, f.getValue(coefficients));"
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,322,* Get the value of the given decision variable.  This is not the actual
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,323,* value as it is guaranteed to be >= 0 and thus must be corrected before
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,324,* being returned to the user.
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,326,* @param decisionVariable The index of the decision variable
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,327,* @return The value of the given decision variable.
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,329,protected double getDecisionVariableValue(final int decisionVariable) {
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,330,Integer basicRow = getBasicRow(getNumObjectiveFunctions() + decisionVariable);
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,331,"return basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());"
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,335,* Subtracts a multiple of one row from another.
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,336,* <p>
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,337,"* After application of this operation, the following will hold:"
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,338,*   minuendRow = minuendRow - multiple * subtrahendRow
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,339,* </p>
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,340,* @param dividendRow index of the row
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,341,* @param divisor value of the divisor
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,343,"protected void divideRow(final int dividendRow, final double divisor) {"
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,344,for (int j = 0; j < getWidth(); j++) {
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,345,"tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);"
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,350,* Subtracts a multiple of one row from another.
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,351,* <p>
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,352,"* After application of this operation, the following will hold:"
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,353,*   minuendRow = minuendRow - multiple * subtrahendRow
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,354,* </p>
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,355,* @param minuendRow row index
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,356,* @param subtrahendRow row index
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,357,* @param multiple multiplication factor
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,359,"protected void subtractRow(final int minuendRow, final int subtrahendRow,"
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,360,final double multiple) {
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,361,for (int j = 0; j < getWidth(); j++) {
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,362,"tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) -"
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,363,"multiple * tableau.getEntry(subtrahendRow, j));"
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,368,* Get the width of the tableau.
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,369,* @return width of the tableau
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,371,protected final int getWidth() {
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,372,return tableau.getColumnDimension();
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,376,* Get the height of the tableau.
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,377,* @return height of the tableau
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,379,protected final int getHeight() {
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,380,return tableau.getRowDimension();
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,383,/** Get an entry of the tableau.
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,384,* @param row row index
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,385,* @param column column index
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,386,"* @return entry at (row, column)"
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,388,"protected final double getEntry(final int row, final int column) {"
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,389,"return tableau.getEntry(row, column);"
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,392,/** Set an entry of the tableau.
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,393,* @param row row index
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,394,* @param column column index
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,395,* param value for the entry
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,397,"protected final void setEntry(final int row, final int column,"
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,398,final double value) {
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,399,"tableau.setEntry(row, column, value);"
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,403,* Get the offset of the first slack variable.
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,404,* @return offset of the first slack variable
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,406,protected final int getSlackVariableOffset() {
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,407,return getNumObjectiveFunctions() + numDecisionVariables;
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,411,* Get the offset of the first artificial variable.
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,412,* @return offset of the first artificial variable
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,414,protected final int getArtificialVariableOffset() {
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,415,return getNumObjectiveFunctions() + numDecisionVariables + numSlackVariables;
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,419,* Get the offset of the right hand side.
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,420,* @return offset of the right hand side
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,422,protected final int getRhsOffset() {
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,423,return getWidth() - 1;
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,427,* Get the number of decision variables.
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,428,* <p>
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,429,"* If variables are not restricted to positive values, this will include 1"
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,430,* extra decision variable to represent the absolute value of the most
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,431,* negative variable.
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,432,* </p>
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,433,* @return number of decision variables
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,434,* @see #getOriginalNumDecisionVariables()
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,436,protected final int getNumDecisionVariables() {
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,437,return numDecisionVariables;
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,441,* Get the original number of decision variables.
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,442,* @return original number of decision variables
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,443,* @see #getNumDecisionVariables()
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,445,protected final int getOriginalNumDecisionVariables() {
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,446,return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1;
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,450,* Get the number of slack variables.
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,451,* @return number of slack variables
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,453,protected final int getNumSlackVariables() {
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,454,return numSlackVariables;
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,458,* Get the number of artificial variables.
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,459,* @return number of artificial variables
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,461,protected final int getNumArtificialVariables() {
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,462,return numArtificialVariables;
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,466,* Get the tableau data.
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,467,* @return tableau data
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,469,protected final double[][] getData() {
True,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,470,return tableau.getData();
True,src/java/org/apache/commons/math/optimization/linear/UnboundedSolutionException.java,src/java/org/apache/commons/math/optimization/linear/UnboundedSolutionException.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/optimization/linear/UnboundedSolutionException.java,src/java/org/apache/commons/math/optimization/linear/UnboundedSolutionException.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/optimization/linear/UnboundedSolutionException.java,src/java/org/apache/commons/math/optimization/linear/UnboundedSolutionException.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/optimization/linear/UnboundedSolutionException.java,src/java/org/apache/commons/math/optimization/linear/UnboundedSolutionException.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/optimization/linear/UnboundedSolutionException.java,src/java/org/apache/commons/math/optimization/linear/UnboundedSolutionException.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/optimization/linear/UnboundedSolutionException.java,src/java/org/apache/commons/math/optimization/linear/UnboundedSolutionException.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/optimization/linear/UnboundedSolutionException.java,src/java/org/apache/commons/math/optimization/linear/UnboundedSolutionException.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/optimization/linear/UnboundedSolutionException.java,src/java/org/apache/commons/math/optimization/linear/UnboundedSolutionException.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/optimization/linear/UnboundedSolutionException.java,src/java/org/apache/commons/math/optimization/linear/UnboundedSolutionException.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/optimization/linear/UnboundedSolutionException.java,src/java/org/apache/commons/math/optimization/linear/UnboundedSolutionException.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/optimization/linear/UnboundedSolutionException.java,src/java/org/apache/commons/math/optimization/linear/UnboundedSolutionException.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/optimization/linear/UnboundedSolutionException.java,src/java/org/apache/commons/math/optimization/linear/UnboundedSolutionException.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/optimization/linear/UnboundedSolutionException.java,src/java/org/apache/commons/math/optimization/linear/UnboundedSolutionException.java,18,package org.apache.commons.math.optimization.linear;
True,src/java/org/apache/commons/math/optimization/linear/UnboundedSolutionException.java,src/java/org/apache/commons/math/optimization/linear/UnboundedSolutionException.java,20,import org.apache.commons.math.optimization.OptimizationException;
True,src/java/org/apache/commons/math/optimization/linear/UnboundedSolutionException.java,src/java/org/apache/commons/math/optimization/linear/UnboundedSolutionException.java,23,* This class represents exceptions thrown by optimizers when a solution
True,src/java/org/apache/commons/math/optimization/linear/UnboundedSolutionException.java,src/java/org/apache/commons/math/optimization/linear/UnboundedSolutionException.java,24,* escapes to infinity.
True,src/java/org/apache/commons/math/optimization/linear/UnboundedSolutionException.java,src/java/org/apache/commons/math/optimization/linear/UnboundedSolutionException.java,25,* @version $Revision$ $Date$
True,src/java/org/apache/commons/math/optimization/linear/UnboundedSolutionException.java,src/java/org/apache/commons/math/optimization/linear/UnboundedSolutionException.java,26,* @since 2.0
True,src/java/org/apache/commons/math/optimization/linear/UnboundedSolutionException.java,src/java/org/apache/commons/math/optimization/linear/UnboundedSolutionException.java,28,public class UnboundedSolutionException extends OptimizationException {
True,src/java/org/apache/commons/math/optimization/linear/UnboundedSolutionException.java,src/java/org/apache/commons/math/optimization/linear/UnboundedSolutionException.java,30,/** Serializable version identifier. */
True,src/java/org/apache/commons/math/optimization/linear/UnboundedSolutionException.java,src/java/org/apache/commons/math/optimization/linear/UnboundedSolutionException.java,31,private static final long serialVersionUID = 940539497277290619L;
True,src/java/org/apache/commons/math/optimization/linear/UnboundedSolutionException.java,src/java/org/apache/commons/math/optimization/linear/UnboundedSolutionException.java,34,* Simple constructor using a default message.
True,src/java/org/apache/commons/math/optimization/linear/UnboundedSolutionException.java,src/java/org/apache/commons/math/optimization/linear/UnboundedSolutionException.java,36,public UnboundedSolutionException() {
True,src/java/org/apache/commons/math/optimization/linear/UnboundedSolutionException.java,src/java/org/apache/commons/math/optimization/linear/UnboundedSolutionException.java,37,"super(""unbounded solution"");"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,14,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,15,* limitations under the License.
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,18,package org.apache.commons.math.optimization.linear;
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,20,import java.util.ArrayList;
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,21,import java.util.Collection;
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,23,import junit.framework.TestCase;
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,25,import org.apache.commons.math.linear.RealVector;
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,26,import org.apache.commons.math.linear.RealVectorImpl;
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,27,import org.apache.commons.math.optimization.GoalType;
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,28,import org.apache.commons.math.optimization.OptimizationException;
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,29,import org.apache.commons.math.optimization.RealPointValuePair;
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,31,public class SimplexSolverTest extends TestCase {
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,33,public void testSimplexSolver() throws OptimizationException {
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,35,LinearObjectiveFunction f =
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,36,"new LinearObjectiveFunction(new double[] { 15, 10 }, 7);"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,37,Collection<LinearConstraint> constraints = new ArrayList<LinearConstraint>();
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,38,"constraints.add(new LinearConstraint(new double[] { 1, 0 }, Relationship.LEQ, 2));"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,39,"constraints.add(new LinearConstraint(new double[] { 0, 1 }, Relationship.LEQ, 3));"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,40,"constraints.add(new LinearConstraint(new double[] { 1, 1 }, Relationship.EQ, 4));"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,42,SimplexSolver solver = new SimplexSolver();
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,43,"RealPointValuePair solution = solver.optimize(f, constraints, GoalType.MAXIMIZE, false);"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,44,"assertEquals(2.0, solution.getPoint()[0]);"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,45,"assertEquals(2.0, solution.getPoint()[1]);"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,46,"assertEquals(57.0, solution.getValue());"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,50,* With no artificial variables needed (no equals and no greater than
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,51,* constraints) we can go straight to Phase 2.
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,53,public void testModelWithNoArtificialVars() throws OptimizationException {
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,54,"LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { 15, 10 }, 0);"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,55,Collection<LinearConstraint> constraints = new ArrayList<LinearConstraint>();
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,56,"constraints.add(new LinearConstraint(new double[] { 1, 0 }, Relationship.LEQ, 2));"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,57,"constraints.add(new LinearConstraint(new double[] { 0, 1 }, Relationship.LEQ, 3));"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,58,"constraints.add(new LinearConstraint(new double[] { 1, 1 }, Relationship.LEQ, 4));"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,60,SimplexSolver solver = new SimplexSolver();
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,61,"RealPointValuePair solution = solver.optimize(f, constraints, GoalType.MAXIMIZE, false);"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,62,"assertEquals(2.0, solution.getPoint()[0]);"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,63,"assertEquals(2.0, solution.getPoint()[1]);"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,64,"assertEquals(50.0, solution.getValue());"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,67,public void testMinimization() throws OptimizationException {
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,68,"LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { -2, 1 }, -5);"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,69,Collection<LinearConstraint> constraints = new ArrayList<LinearConstraint>();
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,70,"constraints.add(new LinearConstraint(new double[] { 1, 2 }, Relationship.LEQ, 6));"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,71,"constraints.add(new LinearConstraint(new double[] { 3, 2 }, Relationship.LEQ, 12));"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,72,"constraints.add(new LinearConstraint(new double[] { 0, 1 }, Relationship.GEQ, 0));"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,74,SimplexSolver solver = new SimplexSolver();
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,75,"RealPointValuePair solution = solver.optimize(f, constraints, GoalType.MINIMIZE, false);"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,76,"assertEquals(4.0, solution.getPoint()[0]);"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,77,"assertEquals(0.0, solution.getPoint()[1]);"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,78,"assertEquals(-13.0, solution.getValue());"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,81,public void testSolutionWithNegativeDecisionVariable() throws OptimizationException {
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,82,"LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { -2, 1 }, 0);"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,83,Collection<LinearConstraint> constraints = new ArrayList<LinearConstraint>();
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,84,"constraints.add(new LinearConstraint(new double[] { 1, 1 }, Relationship.GEQ, 6));"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,85,"constraints.add(new LinearConstraint(new double[] { 1, 2 }, Relationship.LEQ, 14));"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,87,SimplexSolver solver = new SimplexSolver();
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,88,"RealPointValuePair solution = solver.optimize(f, constraints, GoalType.MAXIMIZE, false);"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,89,"assertEquals(-2.0, solution.getPoint()[0]);"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,90,"assertEquals(8.0, solution.getPoint()[1]);"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,91,"assertEquals(12.0, solution.getValue());"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,94,public void testInfeasibleSolution() throws UnboundedSolutionException {
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,95,"LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { 15 }, 0);"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,96,Collection<LinearConstraint> constraints = new ArrayList<LinearConstraint>();
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,97,"constraints.add(new LinearConstraint(new double[] { 1 }, Relationship.LEQ, 1));"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,98,"constraints.add(new LinearConstraint(new double[] { 1 }, Relationship.GEQ, 3));"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,100,SimplexSolver solver = new SimplexSolver();
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,101,try {
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,102,"solver.optimize(f, constraints, GoalType.MAXIMIZE, false);"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,103,"fail(""An exception should have been thrown."");"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,104,} catch (NoFeasibleSolutionException e) {
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,105,// expected;
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,106,} catch (OptimizationException e) {
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,107,"fail(""wrong exception caught"");"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,111,public void testUnboundedSolution() throws NoFeasibleSolutionException {
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,112,"LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { 15, 10 }, 0);"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,113,Collection<LinearConstraint> constraints = new ArrayList<LinearConstraint>();
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,114,"constraints.add(new LinearConstraint(new double[] { 1, 0 }, Relationship.EQ, 2));"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,116,SimplexSolver solver = new SimplexSolver();
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,117,try {
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,118,"solver.optimize(f, constraints, GoalType.MAXIMIZE, false);"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,119,"fail(""An exception should have been thrown."");"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,120,} catch (UnboundedSolutionException e) {
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,121,// expected;
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,122,} catch (OptimizationException e) {
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,123,"fail(""wrong exception caught"");"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,127,public void testRestrictVariablesToNonNegative() throws OptimizationException {
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,128,"LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { 409, 523, 70, 204, 339 }, 0);"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,129,Collection<LinearConstraint> constraints = new ArrayList<LinearConstraint>();
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,130,"constraints.add(new LinearConstraint(new double[] {    43,   56, 345,  56,    5 }, Relationship.LEQ,  4567456));"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,131,"constraints.add(new LinearConstraint(new double[] {    12,   45,   7,  56,   23 }, Relationship.LEQ,    56454));"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,132,"constraints.add(new LinearConstraint(new double[] {     8,  768,   0,  34, 7456 }, Relationship.LEQ,  1923421));"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,133,"constraints.add(new LinearConstraint(new double[] { 12342, 2342,  34, 678, 2342 }, Relationship.GEQ,     4356));"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,134,"constraints.add(new LinearConstraint(new double[] {    45,  678,  76,  52,   23 }, Relationship.EQ,    456356));"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,136,SimplexSolver solver = new SimplexSolver();
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,137,"RealPointValuePair solution = solver.optimize(f, constraints, GoalType.MAXIMIZE, true);"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,138,"assertEquals(2902.92783505155, solution.getPoint()[0], .0000001);"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,139,"assertEquals(480.419243986254, solution.getPoint()[1], .0000001);"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,140,"assertEquals(0.0, solution.getPoint()[2], .0000001);"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,141,"assertEquals(0.0, solution.getPoint()[3], .0000001);"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,142,"assertEquals(0.0, solution.getPoint()[4], .0000001);"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,143,"assertEquals(1438556.7491409, solution.getValue(), .0000001);"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,146,public void testSomething() throws OptimizationException {
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,147,"LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { 1, 1 }, 0);"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,148,Collection<LinearConstraint> constraints = new ArrayList<LinearConstraint>();
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,149,"constraints.add(new LinearConstraint(new double[] { 1, 1 }, Relationship.EQ,  0));"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,151,SimplexSolver solver = new SimplexSolver();
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,152,"RealPointValuePair solution = solver.optimize(f, constraints, GoalType.MAXIMIZE, true);"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,153,"assertEquals(0, solution.getValue(), .0000001);"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,156,public void testLargeModel() throws OptimizationException {
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,157,double[] objective = new double[] {
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,158,"1, 1, 1, 1, 1, 1, 1, 1, 1, 1,"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,159,"1, 1, 12, 1, 1, 1, 1, 1, 1, 1,"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,160,"1, 1, 1, 1, 1, 1, 1, 1, 1, 1,"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,161,"1, 1, 1, 1, 1, 1, 1, 1, 1, 1,"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,162,"12, 1, 1, 1, 1, 1, 1, 1, 1, 1,"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,163,"1, 1, 1, 1, 1, 1, 1, 1, 1, 1,"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,164,"1, 1, 1, 1, 1, 1, 1, 1, 12, 1,"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,165,"1, 1, 1, 1, 1, 1, 1, 1, 1, 1,"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,166,"1, 1, 1, 1, 1, 1, 1, 1, 1, 1,"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,167,"1, 1, 1, 1, 1, 1, 12, 1, 1, 1,"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,168,"1, 1, 1, 1, 1, 1, 1, 1, 1, 1,"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,169,"1, 1, 1, 1, 1, 1, 1, 1, 1, 1,"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,170,"1, 1, 1, 1, 12, 1, 1, 1, 1, 1,"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,171,"1, 1, 1, 1, 1, 1, 1, 1, 1, 1,"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,172,"1, 1, 1, 1, 1, 1, 1, 1, 1, 1,"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,173,"1, 1, 12, 1, 1, 1, 1, 1, 1, 1,"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,174,"1, 1, 1, 1, 1, 1, 1, 1, 1, 1,"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,175,"1, 1, 1, 1, 1, 1, 1, 1, 1, 1,"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,176,"1, 1, 1, 1, 1, 1, 1, 1, 1, 1,"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,177,"1, 1, 1, 1, 1, 1, 1, 1, 1, 1,"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,178,"1, 1, 1, 1, 1, 1, 1, 1, 1, 1,"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,179,"1, 1, 1, 1, 1, 1};"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,181,"LinearObjectiveFunction f = new LinearObjectiveFunction(objective, 0);"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,182,Collection<LinearConstraint> constraints = new ArrayList<LinearConstraint>();
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,183,"constraints.add(equationFromString(objective.length, ""x0 + x1 + x2 + x3 - x12 = 0""));"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,184,"constraints.add(equationFromString(objective.length, ""x4 + x5 + x6 + x7 + x8 + x9 + x10 + x11 - x13 = 0""));"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,185,"constraints.add(equationFromString(objective.length, ""x4 + x5 + x6 + x7 + x8 + x9 + x10 + x11 >= 49""));"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,186,"constraints.add(equationFromString(objective.length, ""x0 + x1 + x2 + x3 >= 42""));"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,187,"constraints.add(equationFromString(objective.length, ""x14 + x15 + x16 + x17 - x26 = 0""));"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,188,"constraints.add(equationFromString(objective.length, ""x18 + x19 + x20 + x21 + x22 + x23 + x24 + x25 - x27 = 0""));"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,189,"constraints.add(equationFromString(objective.length, ""x14 + x15 + x16 + x17 - x12 = 0""));"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,190,"constraints.add(equationFromString(objective.length, ""x18 + x19 + x20 + x21 + x22 + x23 + x24 + x25 - x13 = 0""));"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,191,"constraints.add(equationFromString(objective.length, ""x28 + x29 + x30 + x31 - x40 = 0""));"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,192,"constraints.add(equationFromString(objective.length, ""x32 + x33 + x34 + x35 + x36 + x37 + x38 + x39 - x41 = 0""));"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,193,"constraints.add(equationFromString(objective.length, ""x32 + x33 + x34 + x35 + x36 + x37 + x38 + x39 >= 49""));"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,194,"constraints.add(equationFromString(objective.length, ""x28 + x29 + x30 + x31 >= 42""));"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,195,"constraints.add(equationFromString(objective.length, ""x42 + x43 + x44 + x45 - x54 = 0""));"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,196,"constraints.add(equationFromString(objective.length, ""x46 + x47 + x48 + x49 + x50 + x51 + x52 + x53 - x55 = 0""));"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,197,"constraints.add(equationFromString(objective.length, ""x42 + x43 + x44 + x45 - x40 = 0""));"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,198,"constraints.add(equationFromString(objective.length, ""x46 + x47 + x48 + x49 + x50 + x51 + x52 + x53 - x41 = 0""));"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,199,"constraints.add(equationFromString(objective.length, ""x56 + x57 + x58 + x59 - x68 = 0""));"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,200,"constraints.add(equationFromString(objective.length, ""x60 + x61 + x62 + x63 + x64 + x65 + x66 + x67 - x69 = 0""));"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,201,"constraints.add(equationFromString(objective.length, ""x60 + x61 + x62 + x63 + x64 + x65 + x66 + x67 >= 51""));"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,202,"constraints.add(equationFromString(objective.length, ""x56 + x57 + x58 + x59 >= 44""));"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,203,"constraints.add(equationFromString(objective.length, ""x70 + x71 + x72 + x73 - x82 = 0""));"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,204,"constraints.add(equationFromString(objective.length, ""x74 + x75 + x76 + x77 + x78 + x79 + x80 + x81 - x83 = 0""));"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,205,"constraints.add(equationFromString(objective.length, ""x70 + x71 + x72 + x73 - x68 = 0""));"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,206,"constraints.add(equationFromString(objective.length, ""x74 + x75 + x76 + x77 + x78 + x79 + x80 + x81 - x69 = 0""));"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,207,"constraints.add(equationFromString(objective.length, ""x84 + x85 + x86 + x87 - x96 = 0""));"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,208,"constraints.add(equationFromString(objective.length, ""x88 + x89 + x90 + x91 + x92 + x93 + x94 + x95 - x97 = 0""));"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,209,"constraints.add(equationFromString(objective.length, ""x88 + x89 + x90 + x91 + x92 + x93 + x94 + x95 >= 51""));"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,210,"constraints.add(equationFromString(objective.length, ""x84 + x85 + x86 + x87 >= 44""));"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,211,"constraints.add(equationFromString(objective.length, ""x98 + x99 + x100 + x101 - x110 = 0""));"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,212,"constraints.add(equationFromString(objective.length, ""x102 + x103 + x104 + x105 + x106 + x107 + x108 + x109 - x111 = 0""));"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,213,"constraints.add(equationFromString(objective.length, ""x98 + x99 + x100 + x101 - x96 = 0""));"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,214,"constraints.add(equationFromString(objective.length, ""x102 + x103 + x104 + x105 + x106 + x107 + x108 + x109 - x97 = 0""));"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,215,"constraints.add(equationFromString(objective.length, ""x112 + x113 + x114 + x115 - x124 = 0""));"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,216,"constraints.add(equationFromString(objective.length, ""x116 + x117 + x118 + x119 + x120 + x121 + x122 + x123 - x125 = 0""));"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,217,"constraints.add(equationFromString(objective.length, ""x116 + x117 + x118 + x119 + x120 + x121 + x122 + x123 >= 49""));"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,218,"constraints.add(equationFromString(objective.length, ""x112 + x113 + x114 + x115 >= 42""));"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,219,"constraints.add(equationFromString(objective.length, ""x126 + x127 + x128 + x129 - x138 = 0""));"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,220,"constraints.add(equationFromString(objective.length, ""x130 + x131 + x132 + x133 + x134 + x135 + x136 + x137 - x139 = 0""));"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,221,"constraints.add(equationFromString(objective.length, ""x126 + x127 + x128 + x129 - x124 = 0""));"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,222,"constraints.add(equationFromString(objective.length, ""x130 + x131 + x132 + x133 + x134 + x135 + x136 + x137 - x125 = 0""));"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,223,"constraints.add(equationFromString(objective.length, ""x140 + x141 + x142 + x143 - x152 = 0""));"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,224,"constraints.add(equationFromString(objective.length, ""x144 + x145 + x146 + x147 + x148 + x149 + x150 + x151 - x153 = 0""));"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,225,"constraints.add(equationFromString(objective.length, ""x144 + x145 + x146 + x147 + x148 + x149 + x150 + x151 >= 59""));"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,226,"constraints.add(equationFromString(objective.length, ""x140 + x141 + x142 + x143 >= 42""));"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,227,"constraints.add(equationFromString(objective.length, ""x154 + x155 + x156 + x157 - x166 = 0""));"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,228,"constraints.add(equationFromString(objective.length, ""x158 + x159 + x160 + x161 + x162 + x163 + x164 + x165 - x167 = 0""));"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,229,"constraints.add(equationFromString(objective.length, ""x154 + x155 + x156 + x157 - x152 = 0""));"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,230,"constraints.add(equationFromString(objective.length, ""x158 + x159 + x160 + x161 + x162 + x163 + x164 + x165 - x153 = 0""));"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,231,"constraints.add(equationFromString(objective.length, ""x83 + x82 - x168 = 0""));"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,232,"constraints.add(equationFromString(objective.length, ""x111 + x110 - x169 = 0""));"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,233,"constraints.add(equationFromString(objective.length, ""x170 - x182 = 0""));"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,234,"constraints.add(equationFromString(objective.length, ""x171 - x183 = 0""));"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,235,"constraints.add(equationFromString(objective.length, ""x172 - x184 = 0""));"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,236,"constraints.add(equationFromString(objective.length, ""x173 - x185 = 0""));"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,237,"constraints.add(equationFromString(objective.length, ""x174 - x186 = 0""));"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,238,"constraints.add(equationFromString(objective.length, ""x175 + x176 - x187 = 0""));"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,239,"constraints.add(equationFromString(objective.length, ""x177 - x188 = 0""));"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,240,"constraints.add(equationFromString(objective.length, ""x178 - x189 = 0""));"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,241,"constraints.add(equationFromString(objective.length, ""x179 - x190 = 0""));"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,242,"constraints.add(equationFromString(objective.length, ""x180 - x191 = 0""));"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,243,"constraints.add(equationFromString(objective.length, ""x181 - x192 = 0""));"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,244,"constraints.add(equationFromString(objective.length, ""x170 - x26 = 0""));"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,245,"constraints.add(equationFromString(objective.length, ""x171 - x27 = 0""));"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,246,"constraints.add(equationFromString(objective.length, ""x172 - x54 = 0""));"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,247,"constraints.add(equationFromString(objective.length, ""x173 - x55 = 0""));"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,248,"constraints.add(equationFromString(objective.length, ""x174 - x168 = 0""));"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,249,"constraints.add(equationFromString(objective.length, ""x177 - x169 = 0""));"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,250,"constraints.add(equationFromString(objective.length, ""x178 - x138 = 0""));"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,251,"constraints.add(equationFromString(objective.length, ""x179 - x139 = 0""));"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,252,"constraints.add(equationFromString(objective.length, ""x180 - x166 = 0""));"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,253,"constraints.add(equationFromString(objective.length, ""x181 - x167 = 0""));"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,254,"constraints.add(equationFromString(objective.length, ""x193 - x205 = 0""));"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,255,"constraints.add(equationFromString(objective.length, ""x194 - x206 = 0""));"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,256,"constraints.add(equationFromString(objective.length, ""x195 - x207 = 0""));"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,257,"constraints.add(equationFromString(objective.length, ""x196 - x208 = 0""));"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,258,"constraints.add(equationFromString(objective.length, ""x197 - x209 = 0""));"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,259,"constraints.add(equationFromString(objective.length, ""x198 + x199 - x210 = 0""));"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,260,"constraints.add(equationFromString(objective.length, ""x200 - x211 = 0""));"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,261,"constraints.add(equationFromString(objective.length, ""x201 - x212 = 0""));"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,262,"constraints.add(equationFromString(objective.length, ""x202 - x213 = 0""));"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,263,"constraints.add(equationFromString(objective.length, ""x203 - x214 = 0""));"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,264,"constraints.add(equationFromString(objective.length, ""x204 - x215 = 0""));"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,265,"constraints.add(equationFromString(objective.length, ""x193 - x182 = 0""));"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,266,"constraints.add(equationFromString(objective.length, ""x194 - x183 = 0""));"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,267,"constraints.add(equationFromString(objective.length, ""x195 - x184 = 0""));"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,268,"constraints.add(equationFromString(objective.length, ""x196 - x185 = 0""));"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,269,"constraints.add(equationFromString(objective.length, ""x197 - x186 = 0""));"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,270,"constraints.add(equationFromString(objective.length, ""x198 + x199 - x187 = 0""));"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,271,"constraints.add(equationFromString(objective.length, ""x200 - x188 = 0""));"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,272,"constraints.add(equationFromString(objective.length, ""x201 - x189 = 0""));"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,273,"constraints.add(equationFromString(objective.length, ""x202 - x190 = 0""));"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,274,"constraints.add(equationFromString(objective.length, ""x203 - x191 = 0""));"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,275,"constraints.add(equationFromString(objective.length, ""x204 - x192 = 0""));"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,277,SimplexSolver solver = new SimplexSolver();
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,278,"RealPointValuePair solution = solver.optimize(f, constraints, GoalType.MINIMIZE, true);"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,279,"assertEquals(13366.0, solution.getValue(), .0000001);"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,280,"//assertEquals(7518.0, solution.getValue(), .0000001);"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,284,* Converts a test string to a {@link LinearConstraint}.
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,285,* Ex: x0 + x1 + x2 + x3 - x12 = 0
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,287,"private LinearConstraint equationFromString(int numCoefficients, String s) {"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,288,Relationship relationship;
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,289,"if (s.contains("">="")) {"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,290,relationship = Relationship.GEQ;
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,291,"} else if (s.contains(""<="")) {"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,292,relationship = Relationship.LEQ;
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,293,"} else if (s.contains(""="")) {"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,294,relationship = Relationship.EQ;
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,295,} else {
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,296,throw new IllegalArgumentException();
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,299,"String[] equationParts = s.split(""[>|<]?="");"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,300,double rhs = Double.parseDouble(equationParts[1].trim());
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,302,RealVector lhs = new RealVectorImpl(numCoefficients);
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,303,"String left = equationParts[0].replaceAll("" ?x"", """");"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,304,"String[] coefficients = left.split("" "");"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,305,for (String coefficient : coefficients) {
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,306,double value = coefficient.charAt(0) == '-' ? -1 : 1;
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,307,"int index = Integer.parseInt(coefficient.replaceFirst(""[+|-]"", """").trim());"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,308,"lhs.setEntry(index, value);"
True,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,310,"return new LinearConstraint(lhs, relationship, rhs);"
True,src/test/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,14,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,15,* limitations under the License.
True,src/test/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,18,package org.apache.commons.math.optimization.linear;
True,src/test/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,20,import java.util.ArrayList;
True,src/test/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,21,import java.util.Collection;
True,src/test/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,23,import org.apache.commons.math.optimization.GoalType;
True,src/test/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,25,import junit.framework.TestCase;
True,src/test/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,27,public class SimplexTableauTest extends TestCase {
True,src/test/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,29,public void testInitialization() {
True,src/test/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,30,LinearObjectiveFunction f = createFunction();
True,src/test/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,31,Collection<LinearConstraint> constraints = createConstraints();
True,src/test/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,32,SimplexTableau tableau =
True,src/test/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,33,"new SimplexTableau(f, constraints, GoalType.MAXIMIZE, false);"
True,src/test/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,34,double[][] expectedInitialTableau = {
True,src/test/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,35,"{-1, 0,  -1,  -1,  2, 0, 0, 0, -4},"
True,src/test/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,36,"{ 0, 1, -15, -10, 25, 0, 0, 0,  0},"
True,src/test/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,37,"{ 0, 0,   1,   0, -1, 1, 0, 0,  2},"
True,src/test/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,38,"{ 0, 0,   0,   1, -1, 0, 1, 0,  3},"
True,src/test/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,39,"{ 0, 0,   1,   1, -2, 0, 0, 1,  4}"
True,src/test/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,41,"assertMatrixEquals(expectedInitialTableau, tableau.getData());"
True,src/test/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,44,public void testdiscardArtificialVariables() {
True,src/test/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,45,LinearObjectiveFunction f = createFunction();
True,src/test/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,46,Collection<LinearConstraint> constraints = createConstraints();
True,src/test/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,47,SimplexTableau tableau =
True,src/test/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,48,"new SimplexTableau(f, constraints, GoalType.MAXIMIZE, false);"
True,src/test/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,49,double[][] expectedTableau = {
True,src/test/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,50,"{ 1, -15, -10, 25, 0, 0, 0},"
True,src/test/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,51,"{ 0,   1,   0, -1, 1, 0, 2},"
True,src/test/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,52,"{ 0,   0,   1, -1, 0, 1, 3},"
True,src/test/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,53,"{ 0,   1,   1, -2, 0, 0, 4}"
True,src/test/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,55,tableau.discardArtificialVariables();
True,src/test/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,56,"assertMatrixEquals(expectedTableau, tableau.getData());"
True,src/test/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,59,public void testTableauWithNoArtificialVars() {
True,src/test/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,60,"LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] {15, 10}, 0);"
True,src/test/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,61,Collection<LinearConstraint> constraints = new ArrayList<LinearConstraint>();
True,src/test/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,62,"constraints.add(new LinearConstraint(new double[] {1, 0}, Relationship.LEQ, 2));"
True,src/test/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,63,"constraints.add(new LinearConstraint(new double[] {0, 1}, Relationship.LEQ, 3));"
True,src/test/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,64,"constraints.add(new LinearConstraint(new double[] {1, 1}, Relationship.LEQ, 4));"
True,src/test/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,65,SimplexTableau tableau =
True,src/test/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,66,"new SimplexTableau(f, constraints, GoalType.MAXIMIZE, false);"
True,src/test/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,67,double[][] initialTableau = {
True,src/test/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,68,"{1, -15, -10, 25, 0, 0, 0, 0},"
True,src/test/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,69,"{0,   1,   0, -1, 1, 0, 0, 2},"
True,src/test/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,70,"{0,   0,   1, -1, 0, 1, 0, 3},"
True,src/test/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,71,"{0,   1,   1, -2, 0, 0, 1, 4}"
True,src/test/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,73,"assertMatrixEquals(initialTableau, tableau.getData());"
True,src/test/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,76,private LinearObjectiveFunction createFunction() {
True,src/test/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,77,"return new LinearObjectiveFunction(new double[] {15, 10}, 0);"
True,src/test/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,80,private Collection<LinearConstraint> createConstraints() {
True,src/test/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,81,Collection<LinearConstraint> constraints = new ArrayList<LinearConstraint>();
True,src/test/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,82,"constraints.add(new LinearConstraint(new double[] {1, 0}, Relationship.LEQ, 2));"
True,src/test/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,83,"constraints.add(new LinearConstraint(new double[] {0, 1}, Relationship.LEQ, 3));"
True,src/test/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,84,"constraints.add(new LinearConstraint(new double[] {1, 1}, Relationship.EQ, 4));"
True,src/test/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,85,return constraints;
True,src/test/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,88,"private void assertMatrixEquals(double[][] expected, double[][] result) {"
True,src/test/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,89,"assertEquals(""Wrong number of rows."", expected.length, result.length);"
True,src/test/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,90,for (int i = 0; i < expected.length; i++) {
True,src/test/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,91,"assertEquals(""Wrong number of columns."", expected[i].length, result[i].length);"
True,src/test/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,92,for (int j = 0; j < expected[i].length; j++) {
True,src/test/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,src/test/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,93,"assertEquals(""Wrong value at position ["" + i + "","" + j + ""]"", expected[i][j], result[i][j]);"

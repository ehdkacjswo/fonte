is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,95," else if (""zip"".equalsIgnoreCase(archiverName)) {"
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,98,"if (""zip"".equalsIgnoreCase(archiverName)) {"
False,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,97," else if (""tar"".equalsIgnoreCase(archiverName)) {"
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,101,"if (""tar"".equalsIgnoreCase(archiverName)) {"
False,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,99," else if (""jar"".equalsIgnoreCase(archiverName)) {"
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,104,"if (""jar"".equalsIgnoreCase(archiverName)) {"
False,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,101," else if (""cpio"".equalsIgnoreCase(archiverName)) {"
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,107,"if (""cpio"".equalsIgnoreCase(archiverName)) {"
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,60,"* Create an compressor input stream from an input stream, autodetecting"
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,61,* the compressor type from the first few bytes of the stream. The InputStream
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,62,"* must support marks, like BufferedInputStream."
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,64,* @param in the input stream
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,65,* @return the compressor input stream
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,66,* @throws CompressorInputStream if the compressor name is not known
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,67,* @throws IllegalArgumentException if the stream is null or does not support mark
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,69,public CompressorInputStream createCompressorInputStream(final InputStream in)
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,70,throws CompressorException {
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,71,if (in == null) {
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,72,"throw new IllegalArgumentException(""Stream must not be null."");"
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,75,if (!in.markSupported()) {
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,76,"throw new IllegalArgumentException(""Mark is not supported."");"
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,79,final byte[] signature = new byte[12];
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,80,in.mark(signature.length);
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,81,try {
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,82,int signatureLength = in.read(signature);
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,83,in.reset();
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,85,"if (BZip2CompressorInputStream.matches(signature, signatureLength)) {"
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,86,return new BZip2CompressorInputStream(in);
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,89,"if (GzipCompressorInputStream.matches(signature, signatureLength)) {"
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,90,return new GzipCompressorInputStream(in);
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,93,} catch (IOException e) {
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,94,"throw new CompressorException(""Failed to detect Compressor from InputStream."", e);"
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,97,"throw new CompressorException(""No Compressor found for the stream signature."");"
False,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,77," else if (""bzip2"".equalsIgnoreCase(name)) {"
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,122,"if (""bzip2"".equalsIgnoreCase(name)) {"
False,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,82,"Could not create CompressorInputStream"", e);"
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,128,"""Could not create CompressorInputStream."", e);"
False,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,107," else if (""bzip2"".equalsIgnoreCase(name)) {"
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,156,"if (""bzip2"".equalsIgnoreCase(name)) {"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,968,"public static boolean matches(byte[] signature, int length) {"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,970,if (length < 3) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,971,return false;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,974,if (signature[0] != 'B') {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,975,return false;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,978,if (signature[1] != 'Z') {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,979,return false;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,982,if (signature[2] != 'h') {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,983,return false;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,986,return true;
True,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,73,"public static boolean matches(byte[] signature, int length) {"
True,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,75,if (length < 2) {
True,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,76,return false;
True,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,79,if (signature[0] != 31) {
True,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,80,return false;
True,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,83,if (signature[1] != -117) {
True,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,84,return false;
True,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,87,return true;
True,src/test/java/org/apache/commons/compress/DetectCompressorTestCase.java,src/test/java/org/apache/commons/compress/DetectCompressorTestCase.java,21,import java.io.BufferedInputStream;
True,src/test/java/org/apache/commons/compress/DetectCompressorTestCase.java,src/test/java/org/apache/commons/compress/DetectCompressorTestCase.java,22,import java.io.File;
True,src/test/java/org/apache/commons/compress/DetectCompressorTestCase.java,src/test/java/org/apache/commons/compress/DetectCompressorTestCase.java,23,import java.io.FileInputStream;
True,src/test/java/org/apache/commons/compress/DetectCompressorTestCase.java,src/test/java/org/apache/commons/compress/DetectCompressorTestCase.java,24,import java.io.FileNotFoundException;
True,src/test/java/org/apache/commons/compress/DetectCompressorTestCase.java,src/test/java/org/apache/commons/compress/DetectCompressorTestCase.java,25,import java.net.URL;
True,src/test/java/org/apache/commons/compress/DetectCompressorTestCase.java,src/test/java/org/apache/commons/compress/DetectCompressorTestCase.java,29,import org.apache.commons.compress.compressors.CompressorException;
True,src/test/java/org/apache/commons/compress/DetectCompressorTestCase.java,src/test/java/org/apache/commons/compress/DetectCompressorTestCase.java,30,import org.apache.commons.compress.compressors.CompressorInputStream;
True,src/test/java/org/apache/commons/compress/DetectCompressorTestCase.java,src/test/java/org/apache/commons/compress/DetectCompressorTestCase.java,31,import org.apache.commons.compress.compressors.CompressorStreamFactory;
True,src/test/java/org/apache/commons/compress/DetectCompressorTestCase.java,src/test/java/org/apache/commons/compress/DetectCompressorTestCase.java,32,import org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream;
True,src/test/java/org/apache/commons/compress/DetectCompressorTestCase.java,src/test/java/org/apache/commons/compress/DetectCompressorTestCase.java,33,import org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream;
False,src/test/java/org/apache/commons/compress/DetectCompressorTestCase.java,src/test/java/org/apache/commons/compress/DetectCompressorTestCase.java,24,ublic void testDetection() throws Exception {
True,src/test/java/org/apache/commons/compress/DetectCompressorTestCase.java,src/test/java/org/apache/commons/compress/DetectCompressorTestCase.java,37,public DetectCompressorTestCase(String name) {
True,src/test/java/org/apache/commons/compress/DetectCompressorTestCase.java,src/test/java/org/apache/commons/compress/DetectCompressorTestCase.java,38,super(name);
True,src/test/java/org/apache/commons/compress/DetectCompressorTestCase.java,src/test/java/org/apache/commons/compress/DetectCompressorTestCase.java,41,final ClassLoader classLoader = getClass().getClassLoader();
True,src/test/java/org/apache/commons/compress/DetectCompressorTestCase.java,src/test/java/org/apache/commons/compress/DetectCompressorTestCase.java,42,final CompressorStreamFactory factory = new CompressorStreamFactory();
True,src/test/java/org/apache/commons/compress/DetectCompressorTestCase.java,src/test/java/org/apache/commons/compress/DetectCompressorTestCase.java,44,public void testDetection() throws Exception {
True,src/test/java/org/apache/commons/compress/DetectCompressorTestCase.java,src/test/java/org/apache/commons/compress/DetectCompressorTestCase.java,46,"final CompressorInputStream bzip2 = getStreamFor(""bla.txt.bz2"");"
True,src/test/java/org/apache/commons/compress/DetectCompressorTestCase.java,src/test/java/org/apache/commons/compress/DetectCompressorTestCase.java,47,assertNotNull(bzip2);
True,src/test/java/org/apache/commons/compress/DetectCompressorTestCase.java,src/test/java/org/apache/commons/compress/DetectCompressorTestCase.java,48,assertTrue(bzip2 instanceof BZip2CompressorInputStream);
True,src/test/java/org/apache/commons/compress/DetectCompressorTestCase.java,src/test/java/org/apache/commons/compress/DetectCompressorTestCase.java,50,"final CompressorInputStream gzip = getStreamFor(""bla.tgz"");"
True,src/test/java/org/apache/commons/compress/DetectCompressorTestCase.java,src/test/java/org/apache/commons/compress/DetectCompressorTestCase.java,51,assertNotNull(gzip);
True,src/test/java/org/apache/commons/compress/DetectCompressorTestCase.java,src/test/java/org/apache/commons/compress/DetectCompressorTestCase.java,52,assertTrue(gzip instanceof GzipCompressorInputStream);
True,src/test/java/org/apache/commons/compress/DetectCompressorTestCase.java,src/test/java/org/apache/commons/compress/DetectCompressorTestCase.java,56,private CompressorInputStream getStreamFor(String resource)
True,src/test/java/org/apache/commons/compress/DetectCompressorTestCase.java,src/test/java/org/apache/commons/compress/DetectCompressorTestCase.java,57,"throws CompressorException, FileNotFoundException {"
True,src/test/java/org/apache/commons/compress/DetectCompressorTestCase.java,src/test/java/org/apache/commons/compress/DetectCompressorTestCase.java,59,final URL rsc = classLoader.getResource(resource);
True,src/test/java/org/apache/commons/compress/DetectCompressorTestCase.java,src/test/java/org/apache/commons/compress/DetectCompressorTestCase.java,60,"assertNotNull(""Could not find resource ""+resource,rsc);"
True,src/test/java/org/apache/commons/compress/DetectCompressorTestCase.java,src/test/java/org/apache/commons/compress/DetectCompressorTestCase.java,61,return factory.createCompressorInputStream(
True,src/test/java/org/apache/commons/compress/DetectCompressorTestCase.java,src/test/java/org/apache/commons/compress/DetectCompressorTestCase.java,62,new BufferedInputStream(new FileInputStream(
True,src/test/java/org/apache/commons/compress/DetectCompressorTestCase.java,src/test/java/org/apache/commons/compress/DetectCompressorTestCase.java,63,new File(rsc.getFile()))));

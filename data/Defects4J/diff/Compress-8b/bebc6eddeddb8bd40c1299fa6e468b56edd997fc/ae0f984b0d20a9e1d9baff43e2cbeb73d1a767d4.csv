is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,89, given data as local file data.
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,89,"* given data as local file data, throwing an exception if the"
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,90,* data cannot be parsed.
False,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,95,"eturn parse(data, true);"
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,96,"return parse(data, true, UnparseableExtraField.THROW);"
False,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,100, given data.
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,101,"* given data, throwing an exception if the data cannot be parsed."
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,110,"return parse(data, local, UnparseableExtraField.THROW);"
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,114,* Split the array into ExtraFields and populate them with the
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,115,* given data.
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,116,* @param data an array of bytes
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,117,* @param local whether data originates from the local file data
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,118,* or the central directory
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,119,* @param onUnparseableData what to do if the extra field data
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,120,* cannot be parsed.
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,121,* @return an array of ExtraFields
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,122,* @throws ZipException on error
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,124,"public static ZipExtraField[] parse(byte[] data, boolean local,"
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,125,UnparseableExtraField onUnparseableData)
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,126,throws ZipException {
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,129,LOOP:
False,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,115,"hrow new ZipException(""bad extra field starting at """
False,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,116," start + "".  Block length of """
False,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,117," length + "" bytes exceeds remaining"""
False,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,118," "" data of """
False,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,119, (data.length - start - WORD)
False,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,120," "" bytes."");"
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,134,switch(onUnparseableData.getKey()) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,135,case UnparseableExtraField.THROW_KEY:
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,136,"throw new ZipException(""bad extra field starting at """
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,137,"+ start + "".  Block length of """
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,138,"+ length + "" bytes exceeds remaining"""
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,139,"+ "" data of """
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,140,+ (data.length - start - WORD)
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,141,"+ "" bytes."");"
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,142,case UnparseableExtraField.READ_KEY:
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,143,UnparseableExtraFieldData field =
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,144,new UnparseableExtraFieldData();
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,145,if (local) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,146,"field.parseFromLocalFileData(data, start,"
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,147,data.length - start);
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,148,} else {
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,149,"field.parseFromCentralDirectoryData(data, start,"
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,150,data.length - start);
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,152,v.add(field);
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,153,/*FALLTHROUGH*/
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,154,case UnparseableExtraField.SKIP_KEY:
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,155,// since we cannot parse the data we must assume
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,156,// the extra field consumes the whole rest of the
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,157,// available data
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,158,break LOOP;
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,159,default:
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,160,"throw new ZipException(""unknown UnparseableExtraField key: """
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,161,+ onUnparseableData.getKey());
False,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,149,nt sum = WORD * data.length;
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,191,final boolean lastIsUnparseableHolder = data.length > 0
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,192,&& data[data.length - 1] instanceof UnparseableExtraFieldData;
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,193,int regularExtraFieldCount =
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,194,lastIsUnparseableHolder ? data.length - 1 : data.length;
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,196,int sum = WORD * regularExtraFieldCount;
False,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,155,or (int i = 0; i < data.length; i++) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,203,for (int i = 0; i < regularExtraFieldCount; i++) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,212,if (lastIsUnparseableHolder) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,213,byte[] local = data[data.length - 1].getLocalFileDataData();
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,214,"System.arraycopy(local, 0, result, start, local.length);"
False,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,173,nt sum = WORD * data.length;
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,225,final boolean lastIsUnparseableHolder = data.length > 0
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,226,&& data[data.length - 1] instanceof UnparseableExtraFieldData;
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,227,int regularExtraFieldCount =
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,228,lastIsUnparseableHolder ? data.length - 1 : data.length;
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,230,int sum = WORD * regularExtraFieldCount;
False,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,179,or (int i = 0; i < data.length; i++) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,236,for (int i = 0; i < regularExtraFieldCount; i++) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,245,if (lastIsUnparseableHolder) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,246,byte[] local = data[data.length - 1].getCentralDirectoryData();
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,247,"System.arraycopy(local, 0, result, start, local.length);"
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,253,"* ""enum"" for the possible actions to take if the extra field"
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,254,* cannot be parsed.
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,256,public static final class UnparseableExtraField {
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,258,"* Key for ""throw an exception"" action."
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,260,public static final int THROW_KEY = 0;
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,262,"* Key for ""skip"" action."
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,264,public static final int SKIP_KEY = 1;
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,266,"* Key for ""read"" action."
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,268,public static final int READ_KEY = 2;
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,271,* Throw an exception if field cannot be parsed.
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,273,public static final UnparseableExtraField THROW
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,274,= new UnparseableExtraField(THROW_KEY);
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,277,* Skip the extra field entirely and don't make its data
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,278,* available - effectively removing the extra field data.
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,280,public static final UnparseableExtraField SKIP
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,281,= new UnparseableExtraField(SKIP_KEY);
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,284,* Read the extra field data into an instance of {@link
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,285,* UnparseableExtraFieldData UnparseableExtraFieldData}.
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,287,public static final UnparseableExtraField READ
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,288,= new UnparseableExtraField(READ_KEY);
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,290,private final int key;
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,292,private UnparseableExtraField(int k) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,293,key = k;
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,297,* Key of the action to take.
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,299,public int getKey() { return key; }
True,src/main/java/org/apache/commons/compress/archivers/zip/UnparseableExtraFieldData.java,src/main/java/org/apache/commons/compress/archivers/zip/UnparseableExtraFieldData.java,2,* Licensed to the Apache Software Foundation (ASF) under one
True,src/main/java/org/apache/commons/compress/archivers/zip/UnparseableExtraFieldData.java,src/main/java/org/apache/commons/compress/archivers/zip/UnparseableExtraFieldData.java,3,* or more contributor license agreements.  See the NOTICE file
True,src/main/java/org/apache/commons/compress/archivers/zip/UnparseableExtraFieldData.java,src/main/java/org/apache/commons/compress/archivers/zip/UnparseableExtraFieldData.java,4,* distributed with this work for additional information
True,src/main/java/org/apache/commons/compress/archivers/zip/UnparseableExtraFieldData.java,src/main/java/org/apache/commons/compress/archivers/zip/UnparseableExtraFieldData.java,5,* regarding copyright ownership.  The ASF licenses this file
True,src/main/java/org/apache/commons/compress/archivers/zip/UnparseableExtraFieldData.java,src/main/java/org/apache/commons/compress/archivers/zip/UnparseableExtraFieldData.java,6,"* to you under the Apache License, Version 2.0 (the"
True,src/main/java/org/apache/commons/compress/archivers/zip/UnparseableExtraFieldData.java,src/main/java/org/apache/commons/compress/archivers/zip/UnparseableExtraFieldData.java,7,"* ""License""); you may not use this file except in compliance"
True,src/main/java/org/apache/commons/compress/archivers/zip/UnparseableExtraFieldData.java,src/main/java/org/apache/commons/compress/archivers/zip/UnparseableExtraFieldData.java,8,* with the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/compress/archivers/zip/UnparseableExtraFieldData.java,src/main/java/org/apache/commons/compress/archivers/zip/UnparseableExtraFieldData.java,10,* http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/compress/archivers/zip/UnparseableExtraFieldData.java,src/main/java/org/apache/commons/compress/archivers/zip/UnparseableExtraFieldData.java,12,"* Unless required by applicable law or agreed to in writing,"
True,src/main/java/org/apache/commons/compress/archivers/zip/UnparseableExtraFieldData.java,src/main/java/org/apache/commons/compress/archivers/zip/UnparseableExtraFieldData.java,13,* software distributed under the License is distributed on an
True,src/main/java/org/apache/commons/compress/archivers/zip/UnparseableExtraFieldData.java,src/main/java/org/apache/commons/compress/archivers/zip/UnparseableExtraFieldData.java,14,"* ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
True,src/main/java/org/apache/commons/compress/archivers/zip/UnparseableExtraFieldData.java,src/main/java/org/apache/commons/compress/archivers/zip/UnparseableExtraFieldData.java,15,"* KIND, either express or implied.  See the License for the"
True,src/main/java/org/apache/commons/compress/archivers/zip/UnparseableExtraFieldData.java,src/main/java/org/apache/commons/compress/archivers/zip/UnparseableExtraFieldData.java,16,* specific language governing permissions and limitations
True,src/main/java/org/apache/commons/compress/archivers/zip/UnparseableExtraFieldData.java,src/main/java/org/apache/commons/compress/archivers/zip/UnparseableExtraFieldData.java,17,* under the License.
True,src/main/java/org/apache/commons/compress/archivers/zip/UnparseableExtraFieldData.java,src/main/java/org/apache/commons/compress/archivers/zip/UnparseableExtraFieldData.java,19,package org.apache.commons.compress.archivers.zip;
True,src/main/java/org/apache/commons/compress/archivers/zip/UnparseableExtraFieldData.java,src/main/java/org/apache/commons/compress/archivers/zip/UnparseableExtraFieldData.java,22,* Wrapper for extra field data that doesn't conform to the recommended format of header-tag + size + data.
True,src/main/java/org/apache/commons/compress/archivers/zip/UnparseableExtraFieldData.java,src/main/java/org/apache/commons/compress/archivers/zip/UnparseableExtraFieldData.java,24,* <p>The header-id is artificial (and not listed as a know ID in
True,src/main/java/org/apache/commons/compress/archivers/zip/UnparseableExtraFieldData.java,src/main/java/org/apache/commons/compress/archivers/zip/UnparseableExtraFieldData.java,25,* {@link http://www.pkware.com/documents/casestudies/APPNOTE.TXT
True,src/main/java/org/apache/commons/compress/archivers/zip/UnparseableExtraFieldData.java,src/main/java/org/apache/commons/compress/archivers/zip/UnparseableExtraFieldData.java,26,* APPNOTE.TXT}.  Since it isn't used anywhere except to satisfy the
True,src/main/java/org/apache/commons/compress/archivers/zip/UnparseableExtraFieldData.java,src/main/java/org/apache/commons/compress/archivers/zip/UnparseableExtraFieldData.java,27,* ZipExtraField contract it shouldn't matter anyway.</p>
True,src/main/java/org/apache/commons/compress/archivers/zip/UnparseableExtraFieldData.java,src/main/java/org/apache/commons/compress/archivers/zip/UnparseableExtraFieldData.java,28,* @NotThreadSafe
True,src/main/java/org/apache/commons/compress/archivers/zip/UnparseableExtraFieldData.java,src/main/java/org/apache/commons/compress/archivers/zip/UnparseableExtraFieldData.java,30,public final class UnparseableExtraFieldData implements ZipExtraField {
True,src/main/java/org/apache/commons/compress/archivers/zip/UnparseableExtraFieldData.java,src/main/java/org/apache/commons/compress/archivers/zip/UnparseableExtraFieldData.java,31,private static final ZipShort HEADER_ID = new ZipShort(0xACC1);
True,src/main/java/org/apache/commons/compress/archivers/zip/UnparseableExtraFieldData.java,src/main/java/org/apache/commons/compress/archivers/zip/UnparseableExtraFieldData.java,33,private byte[] localFileData;
True,src/main/java/org/apache/commons/compress/archivers/zip/UnparseableExtraFieldData.java,src/main/java/org/apache/commons/compress/archivers/zip/UnparseableExtraFieldData.java,34,private byte[] centralDirectoryData;
True,src/main/java/org/apache/commons/compress/archivers/zip/UnparseableExtraFieldData.java,src/main/java/org/apache/commons/compress/archivers/zip/UnparseableExtraFieldData.java,37,* The Header-ID.
True,src/main/java/org/apache/commons/compress/archivers/zip/UnparseableExtraFieldData.java,src/main/java/org/apache/commons/compress/archivers/zip/UnparseableExtraFieldData.java,39,* @return a completely arbitrary value that should be ignored.
True,src/main/java/org/apache/commons/compress/archivers/zip/UnparseableExtraFieldData.java,src/main/java/org/apache/commons/compress/archivers/zip/UnparseableExtraFieldData.java,41,public ZipShort getHeaderId() {
True,src/main/java/org/apache/commons/compress/archivers/zip/UnparseableExtraFieldData.java,src/main/java/org/apache/commons/compress/archivers/zip/UnparseableExtraFieldData.java,42,return HEADER_ID;
True,src/main/java/org/apache/commons/compress/archivers/zip/UnparseableExtraFieldData.java,src/main/java/org/apache/commons/compress/archivers/zip/UnparseableExtraFieldData.java,46,* Length of the complete extra field in the local file data.
True,src/main/java/org/apache/commons/compress/archivers/zip/UnparseableExtraFieldData.java,src/main/java/org/apache/commons/compress/archivers/zip/UnparseableExtraFieldData.java,48,* @return The LocalFileDataLength value
True,src/main/java/org/apache/commons/compress/archivers/zip/UnparseableExtraFieldData.java,src/main/java/org/apache/commons/compress/archivers/zip/UnparseableExtraFieldData.java,50,public ZipShort getLocalFileDataLength() {
True,src/main/java/org/apache/commons/compress/archivers/zip/UnparseableExtraFieldData.java,src/main/java/org/apache/commons/compress/archivers/zip/UnparseableExtraFieldData.java,51,return new ZipShort(localFileData == null ? 0 : localFileData.length);
True,src/main/java/org/apache/commons/compress/archivers/zip/UnparseableExtraFieldData.java,src/main/java/org/apache/commons/compress/archivers/zip/UnparseableExtraFieldData.java,55,* Length of the complete extra field in the central directory.
True,src/main/java/org/apache/commons/compress/archivers/zip/UnparseableExtraFieldData.java,src/main/java/org/apache/commons/compress/archivers/zip/UnparseableExtraFieldData.java,57,* @return The CentralDirectoryLength value
True,src/main/java/org/apache/commons/compress/archivers/zip/UnparseableExtraFieldData.java,src/main/java/org/apache/commons/compress/archivers/zip/UnparseableExtraFieldData.java,59,public ZipShort getCentralDirectoryLength() {
True,src/main/java/org/apache/commons/compress/archivers/zip/UnparseableExtraFieldData.java,src/main/java/org/apache/commons/compress/archivers/zip/UnparseableExtraFieldData.java,60,return centralDirectoryData == null
True,src/main/java/org/apache/commons/compress/archivers/zip/UnparseableExtraFieldData.java,src/main/java/org/apache/commons/compress/archivers/zip/UnparseableExtraFieldData.java,61,? getLocalFileDataLength()
True,src/main/java/org/apache/commons/compress/archivers/zip/UnparseableExtraFieldData.java,src/main/java/org/apache/commons/compress/archivers/zip/UnparseableExtraFieldData.java,62,: new ZipShort(centralDirectoryData.length);
True,src/main/java/org/apache/commons/compress/archivers/zip/UnparseableExtraFieldData.java,src/main/java/org/apache/commons/compress/archivers/zip/UnparseableExtraFieldData.java,66,* The actual data to put into local file data.
True,src/main/java/org/apache/commons/compress/archivers/zip/UnparseableExtraFieldData.java,src/main/java/org/apache/commons/compress/archivers/zip/UnparseableExtraFieldData.java,68,* @return The LocalFileDataData value
True,src/main/java/org/apache/commons/compress/archivers/zip/UnparseableExtraFieldData.java,src/main/java/org/apache/commons/compress/archivers/zip/UnparseableExtraFieldData.java,70,public byte[] getLocalFileDataData() {
True,src/main/java/org/apache/commons/compress/archivers/zip/UnparseableExtraFieldData.java,src/main/java/org/apache/commons/compress/archivers/zip/UnparseableExtraFieldData.java,71,return ZipUtil.copy(localFileData);
True,src/main/java/org/apache/commons/compress/archivers/zip/UnparseableExtraFieldData.java,src/main/java/org/apache/commons/compress/archivers/zip/UnparseableExtraFieldData.java,75,* The actual data to put into central directory.
True,src/main/java/org/apache/commons/compress/archivers/zip/UnparseableExtraFieldData.java,src/main/java/org/apache/commons/compress/archivers/zip/UnparseableExtraFieldData.java,77,* @return The CentralDirectoryData value
True,src/main/java/org/apache/commons/compress/archivers/zip/UnparseableExtraFieldData.java,src/main/java/org/apache/commons/compress/archivers/zip/UnparseableExtraFieldData.java,79,public byte[] getCentralDirectoryData() {
True,src/main/java/org/apache/commons/compress/archivers/zip/UnparseableExtraFieldData.java,src/main/java/org/apache/commons/compress/archivers/zip/UnparseableExtraFieldData.java,80,return centralDirectoryData == null
True,src/main/java/org/apache/commons/compress/archivers/zip/UnparseableExtraFieldData.java,src/main/java/org/apache/commons/compress/archivers/zip/UnparseableExtraFieldData.java,81,? getLocalFileDataData() : ZipUtil.copy(centralDirectoryData);
True,src/main/java/org/apache/commons/compress/archivers/zip/UnparseableExtraFieldData.java,src/main/java/org/apache/commons/compress/archivers/zip/UnparseableExtraFieldData.java,85,* Populate data from this array as if it was in local file data.
True,src/main/java/org/apache/commons/compress/archivers/zip/UnparseableExtraFieldData.java,src/main/java/org/apache/commons/compress/archivers/zip/UnparseableExtraFieldData.java,87,* @param buffer the buffer to read data from
True,src/main/java/org/apache/commons/compress/archivers/zip/UnparseableExtraFieldData.java,src/main/java/org/apache/commons/compress/archivers/zip/UnparseableExtraFieldData.java,88,* @param offset offset into buffer to read data
True,src/main/java/org/apache/commons/compress/archivers/zip/UnparseableExtraFieldData.java,src/main/java/org/apache/commons/compress/archivers/zip/UnparseableExtraFieldData.java,89,* @param length the length of data
True,src/main/java/org/apache/commons/compress/archivers/zip/UnparseableExtraFieldData.java,src/main/java/org/apache/commons/compress/archivers/zip/UnparseableExtraFieldData.java,91,"public void parseFromLocalFileData(byte[] buffer, int offset, int length) {"
True,src/main/java/org/apache/commons/compress/archivers/zip/UnparseableExtraFieldData.java,src/main/java/org/apache/commons/compress/archivers/zip/UnparseableExtraFieldData.java,92,localFileData = new byte[length];
True,src/main/java/org/apache/commons/compress/archivers/zip/UnparseableExtraFieldData.java,src/main/java/org/apache/commons/compress/archivers/zip/UnparseableExtraFieldData.java,93,"System.arraycopy(buffer, offset, localFileData, 0, length);"
True,src/main/java/org/apache/commons/compress/archivers/zip/UnparseableExtraFieldData.java,src/main/java/org/apache/commons/compress/archivers/zip/UnparseableExtraFieldData.java,97,* Populate data from this array as if it was in central directory data.
True,src/main/java/org/apache/commons/compress/archivers/zip/UnparseableExtraFieldData.java,src/main/java/org/apache/commons/compress/archivers/zip/UnparseableExtraFieldData.java,99,* @param buffer the buffer to read data from
True,src/main/java/org/apache/commons/compress/archivers/zip/UnparseableExtraFieldData.java,src/main/java/org/apache/commons/compress/archivers/zip/UnparseableExtraFieldData.java,100,* @param offset offset into buffer to read data
True,src/main/java/org/apache/commons/compress/archivers/zip/UnparseableExtraFieldData.java,src/main/java/org/apache/commons/compress/archivers/zip/UnparseableExtraFieldData.java,101,* @param length the length of data
True,src/main/java/org/apache/commons/compress/archivers/zip/UnparseableExtraFieldData.java,src/main/java/org/apache/commons/compress/archivers/zip/UnparseableExtraFieldData.java,102,* @exception ZipException on error
True,src/main/java/org/apache/commons/compress/archivers/zip/UnparseableExtraFieldData.java,src/main/java/org/apache/commons/compress/archivers/zip/UnparseableExtraFieldData.java,104,"public void parseFromCentralDirectoryData(byte[] buffer, int offset,"
True,src/main/java/org/apache/commons/compress/archivers/zip/UnparseableExtraFieldData.java,src/main/java/org/apache/commons/compress/archivers/zip/UnparseableExtraFieldData.java,105,int length) {
True,src/main/java/org/apache/commons/compress/archivers/zip/UnparseableExtraFieldData.java,src/main/java/org/apache/commons/compress/archivers/zip/UnparseableExtraFieldData.java,106,centralDirectoryData = new byte[length];
True,src/main/java/org/apache/commons/compress/archivers/zip/UnparseableExtraFieldData.java,src/main/java/org/apache/commons/compress/archivers/zip/UnparseableExtraFieldData.java,107,"System.arraycopy(buffer, offset, centralDirectoryData, 0, length);"
True,src/main/java/org/apache/commons/compress/archivers/zip/UnparseableExtraFieldData.java,src/main/java/org/apache/commons/compress/archivers/zip/UnparseableExtraFieldData.java,108,if (localFileData == null) {
True,src/main/java/org/apache/commons/compress/archivers/zip/UnparseableExtraFieldData.java,src/main/java/org/apache/commons/compress/archivers/zip/UnparseableExtraFieldData.java,109,"parseFromLocalFileData(buffer, offset, length);"
False,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,64,ocalData = copy(data);
True,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,64,localData = ZipUtil.copy(data);
False,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,80,eturn copy(localData);
True,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,80,return ZipUtil.copy(localData);
False,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,94,entralData = copy(data);
True,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,94,centralData = ZipUtil.copy(data);
False,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,115,eturn copy(centralData);
True,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,115,return ZipUtil.copy(centralData);
False,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,148,rivate static byte[] copy(byte[] from) {
False,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,149,f (from != null) {
False,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,150,yte[] to = new byte[from.length];
False,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,151,"ystem.arraycopy(from, 0, to, 0, to.length);"
False,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,152,eturn to;
False,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,154,eturn null;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,171,* Create a copy of the given array - or return null if the
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,172,* argument is null.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,174,static byte[] copy(byte[] from) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,175,if (from != null) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,176,byte[] to = new byte[from.length];
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,177,"System.arraycopy(from, 0, to, 0, to.length);"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,178,return to;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,180,return null;
True,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,21,import java.util.Arrays;
True,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,88,public void testParseWithRead() throws Exception {
True,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,89,ZipExtraField[] ze =
True,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,90,"ExtraFieldUtils.parse(data, true,"
True,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,91,ExtraFieldUtils.UnparseableExtraField.READ);
True,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,92,"assertEquals(""number of fields"", 2, ze.length);"
True,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,93,"assertTrue(""type field 1"", ze[0] instanceof AsiExtraField);"
True,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,94,"assertEquals(""mode field 1"", 040755,"
True,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,95,((AsiExtraField) ze[0]).getMode());
True,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,96,"assertTrue(""type field 2"", ze[1] instanceof UnrecognizedExtraField);"
True,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,97,"assertEquals(""data length field 2"", 1,"
True,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,98,ze[1].getLocalFileDataLength().getValue());
True,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,100,byte[] data2 = new byte[data.length-1];
True,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,101,"System.arraycopy(data, 0, data2, 0, data2.length);"
True,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,102,"ze = ExtraFieldUtils.parse(data2, true,"
True,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,103,ExtraFieldUtils.UnparseableExtraField.READ);
True,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,104,"assertEquals(""number of fields"", 2, ze.length);"
True,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,105,"assertTrue(""type field 1"", ze[0] instanceof AsiExtraField);"
True,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,106,"assertEquals(""mode field 1"", 040755,"
True,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,107,((AsiExtraField) ze[0]).getMode());
True,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,108,"assertTrue(""type field 2"", ze[1] instanceof UnparseableExtraFieldData);"
True,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,109,"assertEquals(""data length field 2"", 4,"
True,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,110,ze[1].getLocalFileDataLength().getValue());
True,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,111,byte[] expectedData = new byte[4];
True,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,112,for (int i = 0; i < 4; i++) {
True,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,113,"assertEquals(""byte number "" + i,"
True,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,114,"data2[data.length - 5 + i],"
True,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,115,ze[1].getLocalFileDataData()[i]);
True,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,119,public void testParseWithSkip() throws Exception {
True,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,120,ZipExtraField[] ze =
True,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,121,"ExtraFieldUtils.parse(data, true,"
True,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,122,ExtraFieldUtils.UnparseableExtraField.SKIP);
True,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,123,"assertEquals(""number of fields"", 2, ze.length);"
True,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,124,"assertTrue(""type field 1"", ze[0] instanceof AsiExtraField);"
True,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,125,"assertEquals(""mode field 1"", 040755,"
True,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,126,((AsiExtraField) ze[0]).getMode());
True,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,127,"assertTrue(""type field 2"", ze[1] instanceof UnrecognizedExtraField);"
True,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,128,"assertEquals(""data length field 2"", 1,"
True,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,129,ze[1].getLocalFileDataLength().getValue());
True,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,131,byte[] data2 = new byte[data.length-1];
True,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,132,"System.arraycopy(data, 0, data2, 0, data2.length);"
True,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,133,"ze = ExtraFieldUtils.parse(data2, true,"
True,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,134,ExtraFieldUtils.UnparseableExtraField.SKIP);
True,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,135,"assertEquals(""number of fields"", 1, ze.length);"
True,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,136,"assertTrue(""type field 1"", ze[0] instanceof AsiExtraField);"
True,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,137,"assertEquals(""mode field 1"", 040755,"
True,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,138,((AsiExtraField) ze[0]).getMode());
True,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,170,public void testMergeWithUnparseableData() throws Exception {
True,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,171,ZipExtraField d = new UnparseableExtraFieldData();
True,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,172,"d.parseFromLocalFileData(new byte[] {1, 0, 1, 0}, 0, 4);"
True,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,173,byte[] local =
True,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,174,"ExtraFieldUtils.mergeLocalFileDataData(new ZipExtraField[] {a, d});"
True,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,175,"assertEquals(""local length"", data.length - 1, local.length);"
True,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,176,for (int i = 0; i < local.length; i++) {
True,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,177,"assertEquals(""local byte "" + i, data[i], local[i]);"
True,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,180,byte[] dCentral = d.getCentralDirectoryData();
True,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,181,byte[] data2 = new byte[4 + aLocal.length + dCentral.length];
True,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,182,"System.arraycopy(data, 0, data2, 0, 4 + aLocal.length + 2);"
True,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,183,"System.arraycopy(dCentral, 0, data2,"
True,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,184,"4 + aLocal.length, dCentral.length);"
True,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,187,byte[] central =
True,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,188,"ExtraFieldUtils.mergeCentralDirectoryData(new ZipExtraField[] {a, d});"
True,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,189,"assertEquals(""central length"", data2.length, central.length);"
True,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,190,for (int i = 0; i < central.length; i++) {
True,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,191,"assertEquals(""central byte "" + i, data2[i], central[i]);"

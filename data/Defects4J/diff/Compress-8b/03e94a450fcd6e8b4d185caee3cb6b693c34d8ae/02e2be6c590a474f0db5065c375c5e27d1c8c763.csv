is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,21,import java.io.ByteArrayInputStream;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,22,import java.io.ByteArrayOutputStream;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,75,private ByteArrayInputStream lastStoredEntry = null;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,77,private boolean allowStoredEntriesWithDataDescriptor = false;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,107,"this(inputStream, encoding, useUnicodeExtraFields, false);"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,111,"* @param encoding the encoding to use for file names, use null"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,112,* for the platform's default encoding
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,113,* @param useUnicodeExtraFields whether to use InfoZIP Unicode
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,114,* Extra Fields (if present) to set the file names.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,115,* @param allowStoredEntriesWithDataDescriptor whether the stream
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,116,* will try to read STORED entries that use a data descriptor
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,117,* @since Apache Commons Compress 1.1
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,119,"public ZipArchiveInputStream(InputStream inputStream,"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,120,"String encoding,"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,121,"boolean useUnicodeExtraFields,"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,122,boolean allowStoredEntriesWithDataDescriptor) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,126,this.allowStoredEntriesWithDataDescriptor =
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,127,allowStoredEntriesWithDataDescriptor;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,251,if (hasDataDescriptor) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,252,if (lastStoredEntry == null) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,253,readStoredEntry();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,255,"return lastStoredEntry.read(buffer, start, length);"
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,383,f (hasDataDescriptor) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,413,if (lastStoredEntry == null && hasDataDescriptor) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,422,lastStoredEntry = null;
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,434, @return true if the entry doesn't require any data descriptor
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,435, or the method is DEFLATED).
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,465,"* @return true if allowStoredEntriesWithDataDescriptor is true,"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,466,* the entry doesn't require any data descriptor or the method is
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,467,* DEFLATED.
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,437,rivate static boolean supportsDataDescriptorFor(ZipArchiveEntry entry) {
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,438,eturn !entry.getGeneralPurposeBit().usesDataDescriptor()
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,469,private boolean supportsDataDescriptorFor(ZipArchiveEntry entry) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,470,return allowStoredEntriesWithDataDescriptor ||
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,471,!entry.getGeneralPurposeBit().usesDataDescriptor()
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,476,* Caches a stored entry that uses the data descriptor.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,478,* <ul>
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,479,*   <li>Reads a stored entry until the signature of a local file
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,480,"*     header, central directory header or data descriptor has been"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,481,*     found.</li>
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,482,*   <li>Stores all entry data in lastStoredEntry.</p>
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,483,*   <li>Rewinds the stream to position at the data
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,484,*     descriptor.</li>
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,485,*   <li>reads the data descriptor</li>
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,486,* </ul>
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,488,"* <p>After calling this method the entry should know its size,"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,489,* the entry's data is cached and the stream is positioned at the
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,490,* next local file or central directory header.</p>
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,492,private void readStoredEntry() throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,493,ByteArrayOutputStream bos = new ByteArrayOutputStream();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,494,byte[] LFH = ZipLong.LFH_SIG.getBytes();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,495,byte[] CFH = ZipLong.CFH_SIG.getBytes();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,496,byte[] DD = ZipLong.DD_SIG.getBytes();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,497,int off = 0;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,498,boolean done = false;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,500,while (!done) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,501,"int r = in.read(buf, off, ZipArchiveOutputStream.BUFFER_SIZE - off);"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,502,if (r <= 0) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,503,// read the whole archive without ever finding a
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,504,// central directory
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,505,"throw new IOException(""Truncated ZIP file"");"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,507,if (r + off < 4) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,508,"// buf is too small to check for a signature, loop"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,509,off += r;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,510,continue;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,513,int readTooMuch = 0;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,514,for (int i = 0; !done && i < r - 4; i++) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,515,if (buf[i] == LFH[0] && buf[i + 1] == LFH[1]) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,516,if ((buf[i + 2] == LFH[2] && buf[i + 3] == LFH[3])
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,517,|| (buf[i] == CFH[2] && buf[i + 3] == CFH[3])) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,518,// found a LFH or CFH:
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,519,readTooMuch = off + r - i - 12 /* dd without signature */;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,520,done = true;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,522,else if (buf[i + 2] == DD[2] && buf[i + 3] == DD[3]) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,523,// found DD:
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,524,readTooMuch = off + r - i;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,525,done = true;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,527,if (done) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,528,// * push back bytes read in excess as well as the data
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,529,//   descriptor
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,530,// * copy the remaining bytes to cache
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,531,// * read data descriptor
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,532,"((PushbackInputStream) in).unread(buf, off + r - readTooMuch, readTooMuch);"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,533,"bos.write(buf, 0, i);"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,534,readDataDescriptor();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,538,if (!done) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,539,// worst case we've read a data descriptor without a
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,540,// signature (12 bytes) plus the first three bytes of
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,541,// a LFH or CFH signature
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,542,"// save the last 15 bytes in the buffer, cache"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,543,"// anything in front of that, read on"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,544,if (off + r > 15) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,545,"bos.write(buf, 0, off + r - 15);"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,546,"System.arraycopy(buf, off + r - 15, buf, 0, 15);"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,547,off = 15;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,548,} else {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,549,off += r;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,554,byte[] b = bos.toByteArray();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,555,lastStoredEntry = new ByteArrayInputStream(b);
True,src/test/java/org/apache/commons/compress/archivers/zip/Lister.java,src/test/java/org/apache/commons/compress/archivers/zip/Lister.java,24,import java.io.FileOutputStream;
True,src/test/java/org/apache/commons/compress/archivers/zip/Lister.java,src/test/java/org/apache/commons/compress/archivers/zip/Lister.java,26,import java.io.InputStream;
True,src/test/java/org/apache/commons/compress/archivers/zip/Lister.java,src/test/java/org/apache/commons/compress/archivers/zip/Lister.java,29,import org.apache.commons.compress.utils.IOUtils;
True,src/test/java/org/apache/commons/compress/archivers/zip/Lister.java,src/test/java/org/apache/commons/compress/archivers/zip/Lister.java,44,boolean allowStoredEntriesWithDataDescriptor = false;
True,src/test/java/org/apache/commons/compress/archivers/zip/Lister.java,src/test/java/org/apache/commons/compress/archivers/zip/Lister.java,45,String dir;
False,src/test/java/org/apache/commons/compress/archivers/zip/Lister.java,src/test/java/org/apache/commons/compress/archivers/zip/Lister.java,55,"ew ZipArchiveInputStream(fs, cl.encoding, true);"
True,src/test/java/org/apache/commons/compress/archivers/zip/Lister.java,src/test/java/org/apache/commons/compress/archivers/zip/Lister.java,60,"new ZipArchiveInputStream(fs, cl.encoding, true,"
True,src/test/java/org/apache/commons/compress/archivers/zip/Lister.java,src/test/java/org/apache/commons/compress/archivers/zip/Lister.java,61,cl.allowStoredEntriesWithDataDescriptor);
False,src/test/java/org/apache/commons/compress/archivers/zip/Lister.java,src/test/java/org/apache/commons/compress/archivers/zip/Lister.java,59,ist((ZipArchiveEntry) entry);
True,src/test/java/org/apache/commons/compress/archivers/zip/Lister.java,src/test/java/org/apache/commons/compress/archivers/zip/Lister.java,65,ZipArchiveEntry ze = (ZipArchiveEntry) entry;
True,src/test/java/org/apache/commons/compress/archivers/zip/Lister.java,src/test/java/org/apache/commons/compress/archivers/zip/Lister.java,66,list(ze);
True,src/test/java/org/apache/commons/compress/archivers/zip/Lister.java,src/test/java/org/apache/commons/compress/archivers/zip/Lister.java,67,if (cl.dir != null) {
True,src/test/java/org/apache/commons/compress/archivers/zip/Lister.java,src/test/java/org/apache/commons/compress/archivers/zip/Lister.java,68,"extract(cl.dir, ze, zs);"
False,src/test/java/org/apache/commons/compress/archivers/zip/Lister.java,src/test/java/org/apache/commons/compress/archivers/zip/Lister.java,69,ist((ZipArchiveEntry) entries.nextElement());
True,src/test/java/org/apache/commons/compress/archivers/zip/Lister.java,src/test/java/org/apache/commons/compress/archivers/zip/Lister.java,79,ZipArchiveEntry ze = (ZipArchiveEntry) entries.nextElement();
True,src/test/java/org/apache/commons/compress/archivers/zip/Lister.java,src/test/java/org/apache/commons/compress/archivers/zip/Lister.java,80,list(ze);
True,src/test/java/org/apache/commons/compress/archivers/zip/Lister.java,src/test/java/org/apache/commons/compress/archivers/zip/Lister.java,81,if (cl.dir != null) {
True,src/test/java/org/apache/commons/compress/archivers/zip/Lister.java,src/test/java/org/apache/commons/compress/archivers/zip/Lister.java,82,InputStream is = zf.getInputStream(ze);
True,src/test/java/org/apache/commons/compress/archivers/zip/Lister.java,src/test/java/org/apache/commons/compress/archivers/zip/Lister.java,83,try {
True,src/test/java/org/apache/commons/compress/archivers/zip/Lister.java,src/test/java/org/apache/commons/compress/archivers/zip/Lister.java,84,"extract(cl.dir, ze, is);"
True,src/test/java/org/apache/commons/compress/archivers/zip/Lister.java,src/test/java/org/apache/commons/compress/archivers/zip/Lister.java,85,} finally {
True,src/test/java/org/apache/commons/compress/archivers/zip/Lister.java,src/test/java/org/apache/commons/compress/archivers/zip/Lister.java,86,is.close();
True,src/test/java/org/apache/commons/compress/archivers/zip/Lister.java,src/test/java/org/apache/commons/compress/archivers/zip/Lister.java,100,"private static void extract(String dir, ZipArchiveEntry entry,"
True,src/test/java/org/apache/commons/compress/archivers/zip/Lister.java,src/test/java/org/apache/commons/compress/archivers/zip/Lister.java,101,InputStream is) throws IOException {
True,src/test/java/org/apache/commons/compress/archivers/zip/Lister.java,src/test/java/org/apache/commons/compress/archivers/zip/Lister.java,102,"File f = new File(dir, entry.getName());"
True,src/test/java/org/apache/commons/compress/archivers/zip/Lister.java,src/test/java/org/apache/commons/compress/archivers/zip/Lister.java,103,if (!f.getParentFile().exists()) {
True,src/test/java/org/apache/commons/compress/archivers/zip/Lister.java,src/test/java/org/apache/commons/compress/archivers/zip/Lister.java,104,f.getParentFile().mkdirs();
True,src/test/java/org/apache/commons/compress/archivers/zip/Lister.java,src/test/java/org/apache/commons/compress/archivers/zip/Lister.java,106,FileOutputStream fos = null;
True,src/test/java/org/apache/commons/compress/archivers/zip/Lister.java,src/test/java/org/apache/commons/compress/archivers/zip/Lister.java,107,try {
True,src/test/java/org/apache/commons/compress/archivers/zip/Lister.java,src/test/java/org/apache/commons/compress/archivers/zip/Lister.java,108,fos = new FileOutputStream(f);
True,src/test/java/org/apache/commons/compress/archivers/zip/Lister.java,src/test/java/org/apache/commons/compress/archivers/zip/Lister.java,109,"IOUtils.copy(is, fos);"
True,src/test/java/org/apache/commons/compress/archivers/zip/Lister.java,src/test/java/org/apache/commons/compress/archivers/zip/Lister.java,110,} finally {
True,src/test/java/org/apache/commons/compress/archivers/zip/Lister.java,src/test/java/org/apache/commons/compress/archivers/zip/Lister.java,111,if (fos != null) {
True,src/test/java/org/apache/commons/compress/archivers/zip/Lister.java,src/test/java/org/apache/commons/compress/archivers/zip/Lister.java,112,fos.close();
True,src/test/java/org/apache/commons/compress/archivers/zip/Lister.java,src/test/java/org/apache/commons/compress/archivers/zip/Lister.java,128,"} else if (args[i].equals(""-extract"")) {"
True,src/test/java/org/apache/commons/compress/archivers/zip/Lister.java,src/test/java/org/apache/commons/compress/archivers/zip/Lister.java,129,if (args.length > i + 1) {
True,src/test/java/org/apache/commons/compress/archivers/zip/Lister.java,src/test/java/org/apache/commons/compress/archivers/zip/Lister.java,130,cl.dir = args[++i];
True,src/test/java/org/apache/commons/compress/archivers/zip/Lister.java,src/test/java/org/apache/commons/compress/archivers/zip/Lister.java,131,} else {
True,src/test/java/org/apache/commons/compress/archivers/zip/Lister.java,src/test/java/org/apache/commons/compress/archivers/zip/Lister.java,132,"System.err.println(""missing argument to -extract"");"
True,src/test/java/org/apache/commons/compress/archivers/zip/Lister.java,src/test/java/org/apache/commons/compress/archivers/zip/Lister.java,133,error = true;
True,src/test/java/org/apache/commons/compress/archivers/zip/Lister.java,src/test/java/org/apache/commons/compress/archivers/zip/Lister.java,137,"} else if (args[i].equals(""+storeddd"")) {"
True,src/test/java/org/apache/commons/compress/archivers/zip/Lister.java,src/test/java/org/apache/commons/compress/archivers/zip/Lister.java,138,cl.allowStoredEntriesWithDataDescriptor = true;
False,src/test/java/org/apache/commons/compress/archivers/zip/Lister.java,src/test/java/org/apache/commons/compress/archivers/zip/Lister.java,110,"ystem.err.println(""lister [-enc encoding] [-stream] [-file] archive"");"
True,src/test/java/org/apache/commons/compress/archivers/zip/Lister.java,src/test/java/org/apache/commons/compress/archivers/zip/Lister.java,155,"System.err.println(""lister [-enc encoding] [-stream] [-file]"""
True,src/test/java/org/apache/commons/compress/archivers/zip/Lister.java,src/test/java/org/apache/commons/compress/archivers/zip/Lister.java,156,"+ "" [+storeddd] [-extract dir] archive"");"

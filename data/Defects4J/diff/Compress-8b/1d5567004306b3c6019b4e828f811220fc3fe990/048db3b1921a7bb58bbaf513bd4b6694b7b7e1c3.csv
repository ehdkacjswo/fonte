is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,85,rivate StringBuffer name;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,85,private String name;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,106,rivate StringBuffer linkName;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,106,private String linkName;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,109,rivate StringBuffer magic;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,109,private String magic;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,112,rivate StringBuffer userName;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,112,private String userName;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,115,rivate StringBuffer groupName;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,115,private String groupName;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,142,his.magic = new StringBuffer(MAGIC_POSIX);
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,143,his.name = new StringBuffer();
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,144,his.linkName = new StringBuffer();
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,142,this.magic = MAGIC_POSIX;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,143,"this.name = """";"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,144,"this.linkName = """";"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,154,his.userName = new StringBuffer(user);
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,155,"his.groupName = new StringBuffer("""");"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,154,this.userName = user;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,155,"this.groupName = """";"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,173,his.name = new StringBuffer(name);
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,173,this.name = name;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,180,"his.linkName = new StringBuffer("""");"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,181,"his.userName = new StringBuffer("""");"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,182,"his.groupName = new StringBuffer("""");"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,180,"this.linkName = """";"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,181,"this.userName = """";"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,182,"this.groupName = """";"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,222,"his.linkName = new StringBuffer("""");"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,223,his.name = new StringBuffer(fileName);
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,222,"this.linkName = """";"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,229,nt nameLength = name.length();
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,228,int nameLength = fileName.length();
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,231,"his.name.append(""/"");"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,230,"this.name = fileName + ""/"";"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,231,} else {
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,232,this.name = fileName;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,239,this.name = fileName;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,317,his.name = new StringBuffer(normalizeFileName(name));
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,319,this.name = normalizeFileName(name);
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,389,his.userName = new StringBuffer(userName);
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,391,this.userName = userName;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,407,his.groupName = new StringBuffer(groupName);
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,409,this.groupName = groupName;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,562,"ffset = TarUtils.getNameBytes(name, outbuf, offset, NAMELEN);"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,563,"ffset = TarUtils.getOctalBytes(mode, outbuf, offset, MODELEN);"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,564,"ffset = TarUtils.getOctalBytes(userId, outbuf, offset, UIDLEN);"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,565,"ffset = TarUtils.getOctalBytes(groupId, outbuf, offset, GIDLEN);"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,566,"ffset = TarUtils.getLongOctalBytes(size, outbuf, offset, SIZELEN);"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,567,"ffset = TarUtils.getLongOctalBytes(modTime, outbuf, offset, MODTIMELEN);"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,564,"offset = TarUtils.formatNameBytes(name, outbuf, offset, NAMELEN);"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,565,"offset = TarUtils.formatOctalBytes(mode, outbuf, offset, MODELEN);"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,566,"offset = TarUtils.formatOctalBytes(userId, outbuf, offset, UIDLEN);"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,567,"offset = TarUtils.formatOctalBytes(groupId, outbuf, offset, GIDLEN);"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,568,"offset = TarUtils.formatLongOctalBytes(size, outbuf, offset, SIZELEN);"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,569,"offset = TarUtils.formatLongOctalBytes(modTime, outbuf, offset, MODTIMELEN);"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,576,"ffset = TarUtils.getNameBytes(linkName, outbuf, offset, NAMELEN);"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,577,"ffset = TarUtils.getNameBytes(magic, outbuf, offset, MAGICLEN);"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,578,"ffset = TarUtils.getNameBytes(userName, outbuf, offset, UNAMELEN);"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,579,"ffset = TarUtils.getNameBytes(groupName, outbuf, offset, GNAMELEN);"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,580,"ffset = TarUtils.getOctalBytes(devMajor, outbuf, offset, DEVLEN);"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,581,"ffset = TarUtils.getOctalBytes(devMinor, outbuf, offset, DEVLEN);"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,578,"offset = TarUtils.formatNameBytes(linkName, outbuf, offset, NAMELEN);"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,579,"offset = TarUtils.formatNameBytes(magic, outbuf, offset, MAGICLEN);"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,580,"offset = TarUtils.formatNameBytes(userName, outbuf, offset, UNAMELEN);"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,581,"offset = TarUtils.formatNameBytes(groupName, outbuf, offset, GNAMELEN);"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,582,"offset = TarUtils.formatOctalBytes(devMajor, outbuf, offset, DEVLEN);"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,583,"offset = TarUtils.formatOctalBytes(devMinor, outbuf, offset, DEVLEN);"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,589,"arUtils.getCheckSumOctalBytes(chk, outbuf, csOffset, CHKSUMLEN);"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,591,"TarUtils.formatCheckSumOctalBytes(chk, outbuf, csOffset, CHKSUMLEN);"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,44,"ublic static long parseOctal(byte[] buffer, int offset, int length) {"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,44,"public static long parseOctal(byte[] buffer, final int offset, final int length) {"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,50,f (buffer[i] == 0) { // Found trailing null
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,50,final byte currentByte = buffer[i];
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,51,if (currentByte == 0) { // Found trailing null
False,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,55,f (buffer[i] == (byte) ' ' || buffer[i] == '0') {
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,56,if (currentByte == (byte) ' ' || currentByte == '0') {
False,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,60,f (buffer[i] == (byte) ' ') { // Found trailing space
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,61,if (currentByte == (byte) ' ') { // Found trailing space
False,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,67,esult = (result << 3) + (buffer[i] - '0');// TODO needs to reject invalid bytes
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,68,if (currentByte < '0' || currentByte > '7'){
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,69,throw new IllegalArgumentException(
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,70,"""Invalid octal digit at position ""+i+"" in '""+new String(buffer, offset, length)+""'"");"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,72,result = (result << 3) + (currentByte - '0');// TODO needs to reject invalid bytes
False,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,84,"ublic static StringBuffer parseName(byte[] buffer, int offset, int length) {"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,89,"public static String parseName(byte[] buffer, final int offset, final int length) {"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,96,eturn result;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,101,return result.toString();
False,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,114,"ublic static int getNameBytes(StringBuffer name, byte[] buf, int offset, int length) {"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,119,"public static int formatNameBytes(String name, byte[] buf, final int offset, final int length) {"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,131," Fill buffer with octal number, with leading zeroes"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,136,"* Fill buffer with unsigned octal number, padded with leading zeroes."
False,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,133," The output for negative numbers is not specified,"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,134, but currently the method returns a buffer filled with zeros.
False,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,135, This may change.
False,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,137, @param value number to convert to octal (assumed >=0)
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,138,* @param value number to convert to octal - treated as unsigned
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,142,* @throws IllegalArgumentException if the value will not fit in the buffer
False,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,142,"ublic static void formatUnsignedOctalString(long value, byte[] buffer,"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,143,"nt offset, int length) {"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,144,ength--;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,144,"public static void formatUnsignedOctalString(final long value, byte[] buffer,"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,145,"final int offset, final int length) {"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,146,int remaining = length;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,147,remaining--;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,146,uffer[offset + length--] = (byte) '0';
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,149,buffer[offset + remaining--] = (byte) '0';
False,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,148,or (long val = value; length >= 0 && val > 0; --length) {
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,151,long val = value;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,152,for (; remaining >= 0 && val != 0; --remaining) {
False,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,150,uffer[offset + length] = (byte) ((byte) '0' + (byte) (val & 7));
False,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,151,al = val >> 3;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,154,buffer[offset + remaining] = (byte) ((byte) '0' + (byte) (val & 7));
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,155,val = val >>> 3;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,158,if (val != 0){
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,159,throw new IllegalArgumentException
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,160,"(value+""=""+Long.toOctalString(value)+ "" will not fit in octal number buffer of length ""+length);"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,156,or (; length >= 0; --length) { // leading zeros
False,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,157,uffer[offset + length] = (byte) '0';
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,164,for (; remaining >= 0; --remaining) { // leading zeros
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,165,buffer[offset + remaining] = (byte) '0';
False,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,164, Adds a trailing space and NUL to end of the buffer.
False,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,165, [Appears to be standard for V7 Unix BSD]
False,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,166, Converts the long value (assumed positive) to the buffer.
False,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,167, Adds leading zeros to the buffer.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,172,* Uses {@link #formatUnsignedOctalString} to format
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,173,* the value as an octal string with leading zeros.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,174,* The converted number is followed by space and NUL
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,181,* @throws IllegalArgumentException if the value (and trailer) will not fit in the buffer
False,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,175,"ublic static int getOctalBytes(long value, byte[] buf, int offset, int length) {"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,183,"public static int formatOctalBytes(final long value, byte[] buf, final int offset, final int length) {"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,188, Converts the long value (assumed positive) to the buffer.
False,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,189, Adds leading zeros to the buffer.
False,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,190, The buffer is terminated with a space.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,197,* Uses {@link #formatUnsignedOctalString} to format
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,198,* the value as an octal string with leading zeros.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,199,* The converted number is followed by a space.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,206,* @throws IllegalArgumentException if the value (and trailer) will not fit in the buffer
False,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,198,"ublic static int getLongOctalBytes(long value, byte[] buf, int offset, int length) {"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,208,"public static int formatLongOctalBytes(final long value, byte[] buf, final int offset, final int length) {"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,211, Converts the long value (assumed positive) to the buffer.
False,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,212, Adds leading zeros to the buffer.
False,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,213, Checksum is followed by NUL and then space.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,221,* Uses {@link #formatUnsignedOctalString} to format
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,222,* the value as an octal string with leading zeros.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,223,* The converted number is followed by NUL and then space.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,230,* @throws IllegalArgumentException if the value (and trailer) will not fit in the buffer
False,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,221,"ublic static int getCheckSumOctalBytes(long value, byte[] buf, int offset, int length) {"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,232,"public static int formatCheckSumOctalBytes(final long value, byte[] buf, final int offset, final int length) {"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,238,ublic static long computeCheckSum(byte[] buf) {
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,249,public static long computeCheckSum(final byte[] buf) {
False,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,28,"tringBuffer sb1 = new StringBuffer(""abcdefghijklmnopqrstuvwxyz"");"
False,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,29,"nt off = TarUtils.getNameBytes(sb1, buff, 1, buff.length-1);"
True,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,28,"String sb1 = ""abcdefghijklmnopqrstuvwxyz"";"
True,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,29,"int off = TarUtils.formatNameBytes(sb1, buff, 1, buff.length-1);"
False,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,31,"tringBuffer sb2 = TarUtils.parseName(buff, 1, 10);"
False,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,32,"ssertEquals(sb2.toString(),sb1.substring(0,10));"
True,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,31,"String sb2 = TarUtils.parseName(buff, 1, 10);"
True,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,32,"assertEquals(sb2,sb1.substring(0,10));"
False,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,34,"ssertEquals(sb2.toString(),sb1.substring(0,19));"
True,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,34,"assertEquals(sb2,sb1.substring(0,19));"
False,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,36,"ff = TarUtils.getNameBytes(sb1, buff, 1, buff.length-1);"
True,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,36,"off = TarUtils.formatNameBytes(sb1, buff, 1, buff.length-1);"
False,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,39,"ssertEquals(sb1.toString(), sb2.toString());"
True,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,39,"assertEquals(sb1, sb2);"
False,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,64,"alue = TarUtils.parseOctal(buffer,0, 11);"
False,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,65,"/        assertEquals(0, value); // Or perhaps an Exception?"
True,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,64,try {
True,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,65,"value = TarUtils.parseOctal(buffer,0, 11);"
True,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,66,"fail(""Expected IllegalArgumentException"");"
True,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,67,} catch (IllegalArgumentException expected) {
False,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,71,"arUtils.getLongOctalBytes(value, buffer, 0, buffer.length);"
True,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,74,"TarUtils.formatLongOctalBytes(value, buffer, 0, buffer.length);"
False,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,87,"arUtils.getLongOctalBytes(123, buffer, 0, buffer.length);"
True,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,90,"TarUtils.formatLongOctalBytes(123, buffer, 0, buffer.length);"
False,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,90,"arUtils.getOctalBytes(123, buffer, 0, buffer.length);"
True,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,93,"TarUtils.formatOctalBytes(123, buffer, 0, buffer.length);"
False,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,94,"arUtils.getCheckSumOctalBytes(123, buffer, 0, buffer.length);"
True,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,97,"TarUtils.formatCheckSumOctalBytes(123, buffer, 0, buffer.length);"
False,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,101,yte [] buffer = new byte[10];
True,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,104,byte [] buffer = new byte[22];
False,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,103,/ Currently negative numbers generate all zero buffer. This may need to change.
False,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,104,"ssertEquals(""0000000000"", new String(buffer));"
True,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,106,"assertEquals(""1777777777777777777777"", new String(buffer));"
True,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,109,public void testOverflow() {
True,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,110,byte [] buffer = new byte[8-1]; // a lot of the numbers have 8-byte buffers (nul term)
True,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,111,"TarUtils.formatUnsignedOctalString(07777777L, buffer, 0, buffer.length);"
True,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,112,"assertEquals(""7777777"", new String(buffer));"
True,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,113,try {
True,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,114,"TarUtils.formatUnsignedOctalString(017777777L, buffer, 0, buffer.length);"
True,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,115,"fail(""Should have cause IllegalArgumentException"");"
True,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,116,} catch (IllegalArgumentException expected) {

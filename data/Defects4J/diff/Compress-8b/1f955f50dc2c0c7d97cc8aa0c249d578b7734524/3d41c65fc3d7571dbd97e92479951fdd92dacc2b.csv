is_addition,old_file_path,new_file_path,line_num,content
True,src/test/java/org/apache/commons/compress/IOMethodsTest.java,src/test/java/org/apache/commons/compress/IOMethodsTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/java/org/apache/commons/compress/IOMethodsTest.java,src/test/java/org/apache/commons/compress/IOMethodsTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/java/org/apache/commons/compress/IOMethodsTest.java,src/test/java/org/apache/commons/compress/IOMethodsTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/java/org/apache/commons/compress/IOMethodsTest.java,src/test/java/org/apache/commons/compress/IOMethodsTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/java/org/apache/commons/compress/IOMethodsTest.java,src/test/java/org/apache/commons/compress/IOMethodsTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/java/org/apache/commons/compress/IOMethodsTest.java,src/test/java/org/apache/commons/compress/IOMethodsTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/compress/IOMethodsTest.java,src/test/java/org/apache/commons/compress/IOMethodsTest.java,9,*   http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/compress/IOMethodsTest.java,src/test/java/org/apache/commons/compress/IOMethodsTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/java/org/apache/commons/compress/IOMethodsTest.java,src/test/java/org/apache/commons/compress/IOMethodsTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/java/org/apache/commons/compress/IOMethodsTest.java,src/test/java/org/apache/commons/compress/IOMethodsTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/java/org/apache/commons/compress/IOMethodsTest.java,src/test/java/org/apache/commons/compress/IOMethodsTest.java,14,* See the License for the specific language governing permissions and
True,src/test/java/org/apache/commons/compress/IOMethodsTest.java,src/test/java/org/apache/commons/compress/IOMethodsTest.java,15,* limitations under the License.
True,src/test/java/org/apache/commons/compress/IOMethodsTest.java,src/test/java/org/apache/commons/compress/IOMethodsTest.java,19,package org.apache.commons.compress;
True,src/test/java/org/apache/commons/compress/IOMethodsTest.java,src/test/java/org/apache/commons/compress/IOMethodsTest.java,21,import java.io.ByteArrayOutputStream;
True,src/test/java/org/apache/commons/compress/IOMethodsTest.java,src/test/java/org/apache/commons/compress/IOMethodsTest.java,22,import java.io.File;
True,src/test/java/org/apache/commons/compress/IOMethodsTest.java,src/test/java/org/apache/commons/compress/IOMethodsTest.java,23,import java.io.FileInputStream;
True,src/test/java/org/apache/commons/compress/IOMethodsTest.java,src/test/java/org/apache/commons/compress/IOMethodsTest.java,24,import java.io.InputStream;
True,src/test/java/org/apache/commons/compress/IOMethodsTest.java,src/test/java/org/apache/commons/compress/IOMethodsTest.java,25,import java.io.OutputStream;
True,src/test/java/org/apache/commons/compress/IOMethodsTest.java,src/test/java/org/apache/commons/compress/IOMethodsTest.java,27,import org.apache.commons.compress.archivers.ArchiveEntry;
True,src/test/java/org/apache/commons/compress/IOMethodsTest.java,src/test/java/org/apache/commons/compress/IOMethodsTest.java,28,import org.apache.commons.compress.archivers.ArchiveInputStream;
True,src/test/java/org/apache/commons/compress/IOMethodsTest.java,src/test/java/org/apache/commons/compress/IOMethodsTest.java,29,import org.apache.commons.compress.archivers.ArchiveOutputStream;
True,src/test/java/org/apache/commons/compress/IOMethodsTest.java,src/test/java/org/apache/commons/compress/IOMethodsTest.java,30,import org.apache.commons.compress.archivers.ar.ArArchiveEntry;
True,src/test/java/org/apache/commons/compress/IOMethodsTest.java,src/test/java/org/apache/commons/compress/IOMethodsTest.java,31,import org.apache.commons.compress.archivers.cpio.CpioArchiveEntry;
True,src/test/java/org/apache/commons/compress/IOMethodsTest.java,src/test/java/org/apache/commons/compress/IOMethodsTest.java,32,import org.apache.commons.compress.archivers.jar.JarArchiveEntry;
True,src/test/java/org/apache/commons/compress/IOMethodsTest.java,src/test/java/org/apache/commons/compress/IOMethodsTest.java,33,import org.apache.commons.compress.archivers.tar.TarArchiveEntry;
True,src/test/java/org/apache/commons/compress/IOMethodsTest.java,src/test/java/org/apache/commons/compress/IOMethodsTest.java,34,import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;
True,src/test/java/org/apache/commons/compress/IOMethodsTest.java,src/test/java/org/apache/commons/compress/IOMethodsTest.java,37,* Check that the different write methods create the same output.
True,src/test/java/org/apache/commons/compress/IOMethodsTest.java,src/test/java/org/apache/commons/compress/IOMethodsTest.java,38,* TODO perform the same checks for reads.
True,src/test/java/org/apache/commons/compress/IOMethodsTest.java,src/test/java/org/apache/commons/compress/IOMethodsTest.java,40,public class IOMethodsTest extends AbstractTestCase {
True,src/test/java/org/apache/commons/compress/IOMethodsTest.java,src/test/java/org/apache/commons/compress/IOMethodsTest.java,42,private static final int bytesToTest = 50;
True,src/test/java/org/apache/commons/compress/IOMethodsTest.java,src/test/java/org/apache/commons/compress/IOMethodsTest.java,43,private static final byte[] byteTest = new byte[bytesToTest];
True,src/test/java/org/apache/commons/compress/IOMethodsTest.java,src/test/java/org/apache/commons/compress/IOMethodsTest.java,44,static {
True,src/test/java/org/apache/commons/compress/IOMethodsTest.java,src/test/java/org/apache/commons/compress/IOMethodsTest.java,45,for(int i=0; i < byteTest.length ;) {
True,src/test/java/org/apache/commons/compress/IOMethodsTest.java,src/test/java/org/apache/commons/compress/IOMethodsTest.java,46,byteTest[i]=(byte) i;
True,src/test/java/org/apache/commons/compress/IOMethodsTest.java,src/test/java/org/apache/commons/compress/IOMethodsTest.java,47,byteTest[i+1]=(byte) -i;
True,src/test/java/org/apache/commons/compress/IOMethodsTest.java,src/test/java/org/apache/commons/compress/IOMethodsTest.java,48,i += 2;
True,src/test/java/org/apache/commons/compress/IOMethodsTest.java,src/test/java/org/apache/commons/compress/IOMethodsTest.java,52,public void testWriteAr() throws Exception {
True,src/test/java/org/apache/commons/compress/IOMethodsTest.java,src/test/java/org/apache/commons/compress/IOMethodsTest.java,53,"ArchiveEntry entry = new ArArchiveEntry(""dummy"", bytesToTest);"
True,src/test/java/org/apache/commons/compress/IOMethodsTest.java,src/test/java/org/apache/commons/compress/IOMethodsTest.java,54,"compareWrites(""ar"", entry);"
True,src/test/java/org/apache/commons/compress/IOMethodsTest.java,src/test/java/org/apache/commons/compress/IOMethodsTest.java,56,public void testWriteCpio() throws Exception {
True,src/test/java/org/apache/commons/compress/IOMethodsTest.java,src/test/java/org/apache/commons/compress/IOMethodsTest.java,57,"ArchiveEntry entry = new CpioArchiveEntry(""dummy"", bytesToTest);"
True,src/test/java/org/apache/commons/compress/IOMethodsTest.java,src/test/java/org/apache/commons/compress/IOMethodsTest.java,58,"compareWrites(""cpio"", entry);"
True,src/test/java/org/apache/commons/compress/IOMethodsTest.java,src/test/java/org/apache/commons/compress/IOMethodsTest.java,60,public void testWriteJar() throws Exception {
True,src/test/java/org/apache/commons/compress/IOMethodsTest.java,src/test/java/org/apache/commons/compress/IOMethodsTest.java,61,"ArchiveEntry entry = new JarArchiveEntry(""dummy"");"
True,src/test/java/org/apache/commons/compress/IOMethodsTest.java,src/test/java/org/apache/commons/compress/IOMethodsTest.java,62,"compareWrites(""jar"", entry);"
True,src/test/java/org/apache/commons/compress/IOMethodsTest.java,src/test/java/org/apache/commons/compress/IOMethodsTest.java,64,public void testWriteTar() throws Exception {
True,src/test/java/org/apache/commons/compress/IOMethodsTest.java,src/test/java/org/apache/commons/compress/IOMethodsTest.java,65,"TarArchiveEntry entry = new TarArchiveEntry(""dummy"");"
True,src/test/java/org/apache/commons/compress/IOMethodsTest.java,src/test/java/org/apache/commons/compress/IOMethodsTest.java,66,entry.setSize(bytesToTest);
True,src/test/java/org/apache/commons/compress/IOMethodsTest.java,src/test/java/org/apache/commons/compress/IOMethodsTest.java,67,"compareWrites(""tar"", entry);"
True,src/test/java/org/apache/commons/compress/IOMethodsTest.java,src/test/java/org/apache/commons/compress/IOMethodsTest.java,69,public void testWriteZip() throws Exception {
True,src/test/java/org/apache/commons/compress/IOMethodsTest.java,src/test/java/org/apache/commons/compress/IOMethodsTest.java,70,"ArchiveEntry entry = new ZipArchiveEntry(""dummy"");"
True,src/test/java/org/apache/commons/compress/IOMethodsTest.java,src/test/java/org/apache/commons/compress/IOMethodsTest.java,71,"compareWrites(""zip"", entry);"
True,src/test/java/org/apache/commons/compress/IOMethodsTest.java,src/test/java/org/apache/commons/compress/IOMethodsTest.java,74,public void testReadAr() throws Exception {
True,src/test/java/org/apache/commons/compress/IOMethodsTest.java,src/test/java/org/apache/commons/compress/IOMethodsTest.java,75,"compareReads(""ar"");"
True,src/test/java/org/apache/commons/compress/IOMethodsTest.java,src/test/java/org/apache/commons/compress/IOMethodsTest.java,78,public void testReadCpio() throws Exception {
True,src/test/java/org/apache/commons/compress/IOMethodsTest.java,src/test/java/org/apache/commons/compress/IOMethodsTest.java,79,"compareReads(""cpio"");"
True,src/test/java/org/apache/commons/compress/IOMethodsTest.java,src/test/java/org/apache/commons/compress/IOMethodsTest.java,82,public void testReadJar() throws Exception {
True,src/test/java/org/apache/commons/compress/IOMethodsTest.java,src/test/java/org/apache/commons/compress/IOMethodsTest.java,83,"compareReads(""jar"");"
True,src/test/java/org/apache/commons/compress/IOMethodsTest.java,src/test/java/org/apache/commons/compress/IOMethodsTest.java,86,public void testReadTar() throws Exception {
True,src/test/java/org/apache/commons/compress/IOMethodsTest.java,src/test/java/org/apache/commons/compress/IOMethodsTest.java,87,"compareReads(""tar"");"
True,src/test/java/org/apache/commons/compress/IOMethodsTest.java,src/test/java/org/apache/commons/compress/IOMethodsTest.java,90,public void testReadZip() throws Exception {
True,src/test/java/org/apache/commons/compress/IOMethodsTest.java,src/test/java/org/apache/commons/compress/IOMethodsTest.java,91,"compareReads(""zip"");"
True,src/test/java/org/apache/commons/compress/IOMethodsTest.java,src/test/java/org/apache/commons/compress/IOMethodsTest.java,94,"private void compareWrites(String archiverName, ArchiveEntry entry) throws Exception {"
True,src/test/java/org/apache/commons/compress/IOMethodsTest.java,src/test/java/org/apache/commons/compress/IOMethodsTest.java,95,OutputStream out1 = new ByteArrayOutputStream();
True,src/test/java/org/apache/commons/compress/IOMethodsTest.java,src/test/java/org/apache/commons/compress/IOMethodsTest.java,96,OutputStream out2 = new ByteArrayOutputStream();
True,src/test/java/org/apache/commons/compress/IOMethodsTest.java,src/test/java/org/apache/commons/compress/IOMethodsTest.java,97,OutputStream out3 = new ByteArrayOutputStream();
True,src/test/java/org/apache/commons/compress/IOMethodsTest.java,src/test/java/org/apache/commons/compress/IOMethodsTest.java,98,"ArchiveOutputStream aos1 = factory.createArchiveOutputStream(archiverName, out1);"
True,src/test/java/org/apache/commons/compress/IOMethodsTest.java,src/test/java/org/apache/commons/compress/IOMethodsTest.java,99,aos1.putArchiveEntry(entry);
True,src/test/java/org/apache/commons/compress/IOMethodsTest.java,src/test/java/org/apache/commons/compress/IOMethodsTest.java,100,"ArchiveOutputStream aos2 = factory.createArchiveOutputStream(archiverName, out2);"
True,src/test/java/org/apache/commons/compress/IOMethodsTest.java,src/test/java/org/apache/commons/compress/IOMethodsTest.java,101,aos2.putArchiveEntry(entry);
True,src/test/java/org/apache/commons/compress/IOMethodsTest.java,src/test/java/org/apache/commons/compress/IOMethodsTest.java,102,"ArchiveOutputStream aos3 = factory.createArchiveOutputStream(archiverName, out3);"
True,src/test/java/org/apache/commons/compress/IOMethodsTest.java,src/test/java/org/apache/commons/compress/IOMethodsTest.java,103,aos3.putArchiveEntry(entry);
True,src/test/java/org/apache/commons/compress/IOMethodsTest.java,src/test/java/org/apache/commons/compress/IOMethodsTest.java,104,for (int i=0; i<byteTest.length; i++){
True,src/test/java/org/apache/commons/compress/IOMethodsTest.java,src/test/java/org/apache/commons/compress/IOMethodsTest.java,105,aos1.write(byteTest[i]);
True,src/test/java/org/apache/commons/compress/IOMethodsTest.java,src/test/java/org/apache/commons/compress/IOMethodsTest.java,107,aos1.close();
True,src/test/java/org/apache/commons/compress/IOMethodsTest.java,src/test/java/org/apache/commons/compress/IOMethodsTest.java,108,aos2.write(byteTest);
True,src/test/java/org/apache/commons/compress/IOMethodsTest.java,src/test/java/org/apache/commons/compress/IOMethodsTest.java,109,aos2.close();
True,src/test/java/org/apache/commons/compress/IOMethodsTest.java,src/test/java/org/apache/commons/compress/IOMethodsTest.java,110,"aos3.write(byteTest, 0, byteTest.length);"
True,src/test/java/org/apache/commons/compress/IOMethodsTest.java,src/test/java/org/apache/commons/compress/IOMethodsTest.java,111,aos3.close();
True,src/test/java/org/apache/commons/compress/IOMethodsTest.java,src/test/java/org/apache/commons/compress/IOMethodsTest.java,112,"assertEquals(""out1!=out2"",out1.toString(),out2.toString());"
True,src/test/java/org/apache/commons/compress/IOMethodsTest.java,src/test/java/org/apache/commons/compress/IOMethodsTest.java,113,"assertEquals(""out1!=out3"",out1.toString(),out3.toString());"
True,src/test/java/org/apache/commons/compress/IOMethodsTest.java,src/test/java/org/apache/commons/compress/IOMethodsTest.java,115,private void compareReads(String archiverName) throws Exception {
True,src/test/java/org/apache/commons/compress/IOMethodsTest.java,src/test/java/org/apache/commons/compress/IOMethodsTest.java,116,OutputStream out1 = new ByteArrayOutputStream();
True,src/test/java/org/apache/commons/compress/IOMethodsTest.java,src/test/java/org/apache/commons/compress/IOMethodsTest.java,117,OutputStream out2 = new ByteArrayOutputStream();
True,src/test/java/org/apache/commons/compress/IOMethodsTest.java,src/test/java/org/apache/commons/compress/IOMethodsTest.java,118,OutputStream out3 = new ByteArrayOutputStream();
True,src/test/java/org/apache/commons/compress/IOMethodsTest.java,src/test/java/org/apache/commons/compress/IOMethodsTest.java,119,File file = createSingleEntryArchive(archiverName);
True,src/test/java/org/apache/commons/compress/IOMethodsTest.java,src/test/java/org/apache/commons/compress/IOMethodsTest.java,121,InputStream is1 = new FileInputStream(file);
True,src/test/java/org/apache/commons/compress/IOMethodsTest.java,src/test/java/org/apache/commons/compress/IOMethodsTest.java,122,"ArchiveInputStream ais1 = factory.createArchiveInputStream(archiverName, is1);"
True,src/test/java/org/apache/commons/compress/IOMethodsTest.java,src/test/java/org/apache/commons/compress/IOMethodsTest.java,123,final ArchiveEntry nextEntry = ais1.getNextEntry();
True,src/test/java/org/apache/commons/compress/IOMethodsTest.java,src/test/java/org/apache/commons/compress/IOMethodsTest.java,124,assertNotNull(nextEntry);
True,src/test/java/org/apache/commons/compress/IOMethodsTest.java,src/test/java/org/apache/commons/compress/IOMethodsTest.java,125,final long size = nextEntry.getSize();
True,src/test/java/org/apache/commons/compress/IOMethodsTest.java,src/test/java/org/apache/commons/compress/IOMethodsTest.java,126,"assertTrue(""Size > 0: ""+size, size > 0);"
True,src/test/java/org/apache/commons/compress/IOMethodsTest.java,src/test/java/org/apache/commons/compress/IOMethodsTest.java,127,byte [] buff = new byte[(int)size];
True,src/test/java/org/apache/commons/compress/IOMethodsTest.java,src/test/java/org/apache/commons/compress/IOMethodsTest.java,129,InputStream is2 = new FileInputStream(file);
True,src/test/java/org/apache/commons/compress/IOMethodsTest.java,src/test/java/org/apache/commons/compress/IOMethodsTest.java,130,"ArchiveInputStream ais2 = factory.createArchiveInputStream(archiverName, is2);"
True,src/test/java/org/apache/commons/compress/IOMethodsTest.java,src/test/java/org/apache/commons/compress/IOMethodsTest.java,131,final ArchiveEntry nextEntry2 = ais2.getNextEntry();
True,src/test/java/org/apache/commons/compress/IOMethodsTest.java,src/test/java/org/apache/commons/compress/IOMethodsTest.java,132,assertNotNull(nextEntry2);
True,src/test/java/org/apache/commons/compress/IOMethodsTest.java,src/test/java/org/apache/commons/compress/IOMethodsTest.java,133,"assertEquals(""Expected same entry size"", size, nextEntry2.getSize());"
True,src/test/java/org/apache/commons/compress/IOMethodsTest.java,src/test/java/org/apache/commons/compress/IOMethodsTest.java,135,InputStream is3 = new FileInputStream(file);
True,src/test/java/org/apache/commons/compress/IOMethodsTest.java,src/test/java/org/apache/commons/compress/IOMethodsTest.java,136,"ArchiveInputStream ais3 = factory.createArchiveInputStream(archiverName, is3);"
True,src/test/java/org/apache/commons/compress/IOMethodsTest.java,src/test/java/org/apache/commons/compress/IOMethodsTest.java,137,final ArchiveEntry nextEntry3 = ais3.getNextEntry();
True,src/test/java/org/apache/commons/compress/IOMethodsTest.java,src/test/java/org/apache/commons/compress/IOMethodsTest.java,138,assertNotNull(nextEntry3);
True,src/test/java/org/apache/commons/compress/IOMethodsTest.java,src/test/java/org/apache/commons/compress/IOMethodsTest.java,139,"assertEquals(""Expected same entry size"", size, nextEntry3.getSize());"
True,src/test/java/org/apache/commons/compress/IOMethodsTest.java,src/test/java/org/apache/commons/compress/IOMethodsTest.java,141,int b;
True,src/test/java/org/apache/commons/compress/IOMethodsTest.java,src/test/java/org/apache/commons/compress/IOMethodsTest.java,142,while((b=ais1.read()) != -1){
True,src/test/java/org/apache/commons/compress/IOMethodsTest.java,src/test/java/org/apache/commons/compress/IOMethodsTest.java,143,out1.write(b);
True,src/test/java/org/apache/commons/compress/IOMethodsTest.java,src/test/java/org/apache/commons/compress/IOMethodsTest.java,145,ais1.close();
True,src/test/java/org/apache/commons/compress/IOMethodsTest.java,src/test/java/org/apache/commons/compress/IOMethodsTest.java,147,while(ais2.read(buff)>0){
True,src/test/java/org/apache/commons/compress/IOMethodsTest.java,src/test/java/org/apache/commons/compress/IOMethodsTest.java,148,out2.write(buff);
True,src/test/java/org/apache/commons/compress/IOMethodsTest.java,src/test/java/org/apache/commons/compress/IOMethodsTest.java,150,ais2.close();
True,src/test/java/org/apache/commons/compress/IOMethodsTest.java,src/test/java/org/apache/commons/compress/IOMethodsTest.java,152,"while(ais3.read(buff, 0 , buff.length)>0){"
True,src/test/java/org/apache/commons/compress/IOMethodsTest.java,src/test/java/org/apache/commons/compress/IOMethodsTest.java,153,out3.write(buff);
True,src/test/java/org/apache/commons/compress/IOMethodsTest.java,src/test/java/org/apache/commons/compress/IOMethodsTest.java,155,ais3.close();
True,src/test/java/org/apache/commons/compress/IOMethodsTest.java,src/test/java/org/apache/commons/compress/IOMethodsTest.java,157,"assertEquals(""out1!=out2"",out1.toString(),out2.toString());"
True,src/test/java/org/apache/commons/compress/IOMethodsTest.java,src/test/java/org/apache/commons/compress/IOMethodsTest.java,158,"assertEquals(""out1!=out3"",out1.toString(),out3.toString());"

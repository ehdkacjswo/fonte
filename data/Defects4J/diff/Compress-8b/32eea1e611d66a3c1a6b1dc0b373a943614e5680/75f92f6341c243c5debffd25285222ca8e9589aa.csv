is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,161,name = normalizeFileName(name);
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,202,tring fileName = file.getPath();
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,203,"tring osname = System.getProperty(""os.name"").toLowerCase(Locale.US);"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,205,f (osname != null) {
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,207,/ Strip off drive letters!
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,208,"/ REVIEW Would a better check be ""(File.separator == '\')""?"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,210,"f (osname.startsWith(""windows"")) {"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,211,f (fileName.length() > 2) {
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,212,har ch1 = fileName.charAt(0);
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,213,har ch2 = fileName.charAt(1);
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,215,f (ch2 == ':'
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,216,& ((ch1 >= 'a' && ch1 <= 'z')
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,217,| (ch1 >= 'A' && ch1 <= 'Z'))) {
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,218,ileName = fileName.substring(2);
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,221," else if (osname.indexOf(""netware"") > -1) {"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,222,nt colon = fileName.indexOf(':');
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,223,f (colon != -1) {
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,224,ileName = fileName.substring(colon + 1);
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,229,"ileName = fileName.replace(File.separatorChar, '/');"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,231,/ No absolute pathnames
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,232,"/ Windows (and Posix?) paths can start with ""\\NetworkDrive\"","
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,233,/ so we loop on starting /'s.
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,234,"hile (fileName.startsWith(""/"")) {"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,235,ileName = fileName.substring(1);
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,203,String fileName = normalizeFileName(file.getPath());
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,245,f (this.name.charAt(this.name.length() - 1) != '/') {
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,211,int nameLength = name.length();
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,212,if (nameLength == 0 || name.charAt(nameLength - 1) != '/') {
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,331,his.name = new StringBuffer(name);
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,298,this.name = new StringBuffer(normalizeFileName(name));
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,604,"* Strips Windows' drive letter as well as any leading slashes,"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,605,* turns path separators into forward slahes.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,607,private static String normalizeFileName(String fileName) {
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,608,"String osname = System.getProperty(""os.name"").toLowerCase(Locale.US);"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,610,if (osname != null) {
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,612,// Strip off drive letters!
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,613,"// REVIEW Would a better check be ""(File.separator == '\')""?"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,615,"if (osname.startsWith(""windows"")) {"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,616,if (fileName.length() > 2) {
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,617,char ch1 = fileName.charAt(0);
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,618,char ch2 = fileName.charAt(1);
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,620,if (ch2 == ':'
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,621,&& ((ch1 >= 'a' && ch1 <= 'z')
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,622,|| (ch1 >= 'A' && ch1 <= 'Z'))) {
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,623,fileName = fileName.substring(2);
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,626,"} else if (osname.indexOf(""netware"") > -1) {"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,627,int colon = fileName.indexOf(':');
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,628,if (colon != -1) {
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,629,fileName = fileName.substring(colon + 1);
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,634,"fileName = fileName.replace(File.separatorChar, '/');"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,636,// No absolute pathnames
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,637,"// Windows (and Posix?) paths can start with ""\\NetworkDrive\"","
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,638,// so we loop on starting /'s.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,639,"while (fileName.startsWith(""/"")) {"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,640,fileName = fileName.substring(1);
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,642,return fileName;
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,2,*  Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,3,*  contributor license agreements.  See the NOTICE file distributed with
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,4,*  this work for additional information regarding copyright ownership.
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,5,"*  The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,6,"*  (the ""License""); you may not use this file except in compliance with"
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,7,*  the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,11,"*  Unless required by applicable law or agreed to in writing, software"
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,12,"*  distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,13,"*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,14,*  See the License for the specific language governing permissions and
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,15,*  limitations under the License.
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,19,package org.apache.commons.compress.archivers.tar;
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,21,import java.io.File;
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,22,import java.io.FileInputStream;
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,23,import java.io.FileOutputStream;
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,24,import java.io.IOException;
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,25,import java.util.Locale;
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,26,import junit.framework.TestCase;
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,28,public class TarArchiveEntryTest extends TestCase {
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,30,private static final String OS =
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,31,"System.getProperty(""os.name"").toLowerCase(Locale.US);"
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,32,private static final String ROOT =
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,33,"OS.startsWith(""windows"") || OS.startsWith(""netware"") ? ""C:\\"" : ""/"";"
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,36,* JIRA issue SANDBOX-284
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,38,* @see https://issues.apache.org/jira/browse/SANDBOX-284
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,40,public void testFileSystemRoot() {
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,41,TarArchiveEntry t = new TarArchiveEntry(new File(ROOT));
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,42,"assertEquals(""/"", t.getName());"
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,45,public void testTarFileWithFSRoot() throws IOException {
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,46,"File f = File.createTempFile(""taetest"", "".tar"");"
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,47,f.deleteOnExit();
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,48,TarArchiveOutputStream tout = null;
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,49,TarArchiveInputStream tin = null;
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,50,try {
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,51,tout = new TarArchiveOutputStream(new FileOutputStream(f));
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,52,TarArchiveEntry t = new TarArchiveEntry(new File(ROOT));
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,53,tout.putNextEntry(t);
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,54,tout.closeEntry();
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,55,"t = new TarArchiveEntry(new File(new File(ROOT), ""foo.txt""));"
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,56,t.setSize(6);
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,57,tout.putNextEntry(t);
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,58,"tout.write(new byte[] {'h', 'e', 'l', 'l', 'o', ' '});"
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,59,tout.closeEntry();
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,60,"t = new TarArchiveEntry(new File(new File(ROOT), ""bar.txt"")"
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,61,.getAbsolutePath());
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,62,t.setSize(5);
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,63,tout.putNextEntry(t);
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,64,"tout.write(new byte[] {'w', 'o', 'r', 'l', 'd'});"
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,65,tout.closeEntry();
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,66,"t = new TarArchiveEntry(""dummy"");"
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,67,"t.setName(new File(new File(ROOT), ""baz.txt"").getAbsolutePath());"
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,68,t.setSize(1);
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,69,tout.putNextEntry(t);
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,70,tout.write(new byte[] {'!'});
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,71,tout.closeEntry();
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,72,tout.close();
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,73,tout = null;
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,75,tin = new TarArchiveInputStream(new FileInputStream(f));
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,76,t = tin.getNextTarEntry();
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,77,"assertEquals(""/"", t.getName());"
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,78,t = tin.getNextTarEntry();
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,79,"assertEquals(""foo.txt"", t.getName());"
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,80,t = tin.getNextTarEntry();
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,81,"assertEquals(""bar.txt"", t.getName());"
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,82,t = tin.getNextTarEntry();
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,83,"assertEquals(""baz.txt"", t.getName());"
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,84,} finally {
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,85,if (tin != null) {
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,86,tin.close();
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,88,if (tout != null) {
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,89,tout.close();

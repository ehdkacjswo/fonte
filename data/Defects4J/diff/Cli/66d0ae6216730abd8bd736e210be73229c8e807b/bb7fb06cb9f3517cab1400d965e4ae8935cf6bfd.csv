is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/cli/CommandLineParser.java,src/java/org/apache/commons/cli/CommandLineParser.java,2," $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//cli/src/java/org/apache/commons/cli/CommandLineParser.java,v 1.1 2002/06/16 23:00:57 jkeyes Exp $"
False,src/java/org/apache/commons/cli/CommandLineParser.java,src/java/org/apache/commons/cli/CommandLineParser.java,3, $Revision: 1.1 $
False,src/java/org/apache/commons/cli/CommandLineParser.java,src/java/org/apache/commons/cli/CommandLineParser.java,4, $Date: 2002/06/16 23:00:57 $
True,src/java/org/apache/commons/cli/CommandLineParser.java,src/java/org/apache/commons/cli/CommandLineParser.java,2,"* $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//cli/src/java/org/apache/commons/cli/CommandLineParser.java,v 1.2 2002/07/04 22:32:12 jkeyes Exp $"
True,src/java/org/apache/commons/cli/CommandLineParser.java,src/java/org/apache/commons/cli/CommandLineParser.java,3,* $Revision: 1.2 $
True,src/java/org/apache/commons/cli/CommandLineParser.java,src/java/org/apache/commons/cli/CommandLineParser.java,4,* $Date: 2002/07/04 22:32:12 $
False,src/java/org/apache/commons/cli/CommandLineParser.java,src/java/org/apache/commons/cli/CommandLineParser.java,63,mport java.util.List;
True,src/java/org/apache/commons/cli/CommandLineParser.java,src/java/org/apache/commons/cli/CommandLineParser.java,74,* @throws ParseException if there are any problems encountered
True,src/java/org/apache/commons/cli/CommandLineParser.java,src/java/org/apache/commons/cli/CommandLineParser.java,75,* while parsing the command line tokens.
False,src/java/org/apache/commons/cli/CommandLineParser.java,src/java/org/apache/commons/cli/CommandLineParser.java,76,"ublic List parse( Options options, List arguments );"
True,src/java/org/apache/commons/cli/CommandLineParser.java,src/java/org/apache/commons/cli/CommandLineParser.java,77,"public CommandLine parse( Options options, String[] arguments )"
True,src/java/org/apache/commons/cli/CommandLineParser.java,src/java/org/apache/commons/cli/CommandLineParser.java,78,throws ParseException;
True,src/java/org/apache/commons/cli/CommandLineParser.java,src/java/org/apache/commons/cli/CommandLineParser.java,88,* @throws ParseException if there are any problems encountered
True,src/java/org/apache/commons/cli/CommandLineParser.java,src/java/org/apache/commons/cli/CommandLineParser.java,89,* while parsing the command line tokens.
False,src/java/org/apache/commons/cli/CommandLineParser.java,src/java/org/apache/commons/cli/CommandLineParser.java,86,"ublic List parse( Options options, List arguments, boolean stopAtNonOption );"
True,src/java/org/apache/commons/cli/CommandLineParser.java,src/java/org/apache/commons/cli/CommandLineParser.java,91,"public CommandLine parse( Options options, String[] arguments, boolean stopAtNonOption )"
True,src/java/org/apache/commons/cli/CommandLineParser.java,src/java/org/apache/commons/cli/CommandLineParser.java,92,throws ParseException;
True,src/java/org/apache/commons/cli/CommandLineParserFactory.java,src/java/org/apache/commons/cli/CommandLineParserFactory.java,2,"* $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//cli/src/java/org/apache/commons/cli/Attic/CommandLineParserFactory.java,v 1.1 2002/07/04 22:32:12 jkeyes Exp $"
True,src/java/org/apache/commons/cli/CommandLineParserFactory.java,src/java/org/apache/commons/cli/CommandLineParserFactory.java,3,* $Revision: 1.1 $
True,src/java/org/apache/commons/cli/CommandLineParserFactory.java,src/java/org/apache/commons/cli/CommandLineParserFactory.java,4,* $Date: 2002/07/04 22:32:12 $
True,src/java/org/apache/commons/cli/CommandLineParserFactory.java,src/java/org/apache/commons/cli/CommandLineParserFactory.java,8,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/cli/CommandLineParserFactory.java,src/java/org/apache/commons/cli/CommandLineParserFactory.java,10,* Copyright (c) 1999-2001 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/cli/CommandLineParserFactory.java,src/java/org/apache/commons/cli/CommandLineParserFactory.java,11,* reserved.
True,src/java/org/apache/commons/cli/CommandLineParserFactory.java,src/java/org/apache/commons/cli/CommandLineParserFactory.java,13,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/cli/CommandLineParserFactory.java,src/java/org/apache/commons/cli/CommandLineParserFactory.java,14,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/cli/CommandLineParserFactory.java,src/java/org/apache/commons/cli/CommandLineParserFactory.java,15,* are met:
True,src/java/org/apache/commons/cli/CommandLineParserFactory.java,src/java/org/apache/commons/cli/CommandLineParserFactory.java,17,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/cli/CommandLineParserFactory.java,src/java/org/apache/commons/cli/CommandLineParserFactory.java,18,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/cli/CommandLineParserFactory.java,src/java/org/apache/commons/cli/CommandLineParserFactory.java,20,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/cli/CommandLineParserFactory.java,src/java/org/apache/commons/cli/CommandLineParserFactory.java,21,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/cli/CommandLineParserFactory.java,src/java/org/apache/commons/cli/CommandLineParserFactory.java,22,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/cli/CommandLineParserFactory.java,src/java/org/apache/commons/cli/CommandLineParserFactory.java,23,*    distribution.
True,src/java/org/apache/commons/cli/CommandLineParserFactory.java,src/java/org/apache/commons/cli/CommandLineParserFactory.java,25,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/cli/CommandLineParserFactory.java,src/java/org/apache/commons/cli/CommandLineParserFactory.java,26,"*    any, must include the following acknowlegement:"
True,src/java/org/apache/commons/cli/CommandLineParserFactory.java,src/java/org/apache/commons/cli/CommandLineParserFactory.java,27,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/cli/CommandLineParserFactory.java,src/java/org/apache/commons/cli/CommandLineParserFactory.java,28,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/cli/CommandLineParserFactory.java,src/java/org/apache/commons/cli/CommandLineParserFactory.java,29,"*    Alternately, this acknowlegement may appear in the software itself,"
True,src/java/org/apache/commons/cli/CommandLineParserFactory.java,src/java/org/apache/commons/cli/CommandLineParserFactory.java,30,*    if and wherever such third-party acknowlegements normally appear.
True,src/java/org/apache/commons/cli/CommandLineParserFactory.java,src/java/org/apache/commons/cli/CommandLineParserFactory.java,32,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/cli/CommandLineParserFactory.java,src/java/org/apache/commons/cli/CommandLineParserFactory.java,33,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/cli/CommandLineParserFactory.java,src/java/org/apache/commons/cli/CommandLineParserFactory.java,34,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/cli/CommandLineParserFactory.java,src/java/org/apache/commons/cli/CommandLineParserFactory.java,35,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/cli/CommandLineParserFactory.java,src/java/org/apache/commons/cli/CommandLineParserFactory.java,37,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/cli/CommandLineParserFactory.java,src/java/org/apache/commons/cli/CommandLineParserFactory.java,38,"*    nor may ""Apache"" appear in their names without prior written"
True,src/java/org/apache/commons/cli/CommandLineParserFactory.java,src/java/org/apache/commons/cli/CommandLineParserFactory.java,39,*    permission of the Apache Group.
True,src/java/org/apache/commons/cli/CommandLineParserFactory.java,src/java/org/apache/commons/cli/CommandLineParserFactory.java,41,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/cli/CommandLineParserFactory.java,src/java/org/apache/commons/cli/CommandLineParserFactory.java,42,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/cli/CommandLineParserFactory.java,src/java/org/apache/commons/cli/CommandLineParserFactory.java,43,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/cli/CommandLineParserFactory.java,src/java/org/apache/commons/cli/CommandLineParserFactory.java,44,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/cli/CommandLineParserFactory.java,src/java/org/apache/commons/cli/CommandLineParserFactory.java,45,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/cli/CommandLineParserFactory.java,src/java/org/apache/commons/cli/CommandLineParserFactory.java,46,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/cli/CommandLineParserFactory.java,src/java/org/apache/commons/cli/CommandLineParserFactory.java,47,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/cli/CommandLineParserFactory.java,src/java/org/apache/commons/cli/CommandLineParserFactory.java,48,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/cli/CommandLineParserFactory.java,src/java/org/apache/commons/cli/CommandLineParserFactory.java,49,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/cli/CommandLineParserFactory.java,src/java/org/apache/commons/cli/CommandLineParserFactory.java,50,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/cli/CommandLineParserFactory.java,src/java/org/apache/commons/cli/CommandLineParserFactory.java,51,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/cli/CommandLineParserFactory.java,src/java/org/apache/commons/cli/CommandLineParserFactory.java,52,* SUCH DAMAGE.
True,src/java/org/apache/commons/cli/CommandLineParserFactory.java,src/java/org/apache/commons/cli/CommandLineParserFactory.java,55,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/cli/CommandLineParserFactory.java,src/java/org/apache/commons/cli/CommandLineParserFactory.java,56,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/cli/CommandLineParserFactory.java,src/java/org/apache/commons/cli/CommandLineParserFactory.java,57,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/cli/CommandLineParserFactory.java,src/java/org/apache/commons/cli/CommandLineParserFactory.java,58,* <http://www.apache.org/>.
True,src/java/org/apache/commons/cli/CommandLineParserFactory.java,src/java/org/apache/commons/cli/CommandLineParserFactory.java,61,package org.apache.commons.cli;
True,src/java/org/apache/commons/cli/CommandLineParserFactory.java,src/java/org/apache/commons/cli/CommandLineParserFactory.java,64,* Constructs CommandLineParser instances.  The implementation class
True,src/java/org/apache/commons/cli/CommandLineParserFactory.java,src/java/org/apache/commons/cli/CommandLineParserFactory.java,65,* is specified by the <code>org.apache.commons.cli.parser</code>
True,src/java/org/apache/commons/cli/CommandLineParserFactory.java,src/java/org/apache/commons/cli/CommandLineParserFactory.java,66,* system property.
True,src/java/org/apache/commons/cli/CommandLineParserFactory.java,src/java/org/apache/commons/cli/CommandLineParserFactory.java,68,* @author John Keyes (jbjk at mac.com)
True,src/java/org/apache/commons/cli/CommandLineParserFactory.java,src/java/org/apache/commons/cli/CommandLineParserFactory.java,70,public class CommandLineParserFactory {
True,src/java/org/apache/commons/cli/CommandLineParserFactory.java,src/java/org/apache/commons/cli/CommandLineParserFactory.java,72,/** The PosixParser is the default parser implementation */
True,src/java/org/apache/commons/cli/CommandLineParserFactory.java,src/java/org/apache/commons/cli/CommandLineParserFactory.java,73,"private static String DEFAULT_PARSER = ""org.apache.commons.cli.PosixParser"";"
True,src/java/org/apache/commons/cli/CommandLineParserFactory.java,src/java/org/apache/commons/cli/CommandLineParserFactory.java,76,* @return the CommandLineParser
True,src/java/org/apache/commons/cli/CommandLineParserFactory.java,src/java/org/apache/commons/cli/CommandLineParserFactory.java,78,public static CommandLineParser newParser() {
True,src/java/org/apache/commons/cli/CommandLineParserFactory.java,src/java/org/apache/commons/cli/CommandLineParserFactory.java,79,"String parserImpl = System.getProperty( ""org.apache.commons.cli.parser"" );"
True,src/java/org/apache/commons/cli/CommandLineParserFactory.java,src/java/org/apache/commons/cli/CommandLineParserFactory.java,80,try {
True,src/java/org/apache/commons/cli/CommandLineParserFactory.java,src/java/org/apache/commons/cli/CommandLineParserFactory.java,81,return (CommandLineParser)Class.forName( parserImpl ).newInstance();
True,src/java/org/apache/commons/cli/CommandLineParserFactory.java,src/java/org/apache/commons/cli/CommandLineParserFactory.java,83,catch( Exception exp ) {
True,src/java/org/apache/commons/cli/CommandLineParserFactory.java,src/java/org/apache/commons/cli/CommandLineParserFactory.java,84,// could not create according to parserImpl so default to
True,src/java/org/apache/commons/cli/CommandLineParserFactory.java,src/java/org/apache/commons/cli/CommandLineParserFactory.java,85,// PosixParser
True,src/java/org/apache/commons/cli/CommandLineParserFactory.java,src/java/org/apache/commons/cli/CommandLineParserFactory.java,86,try {
True,src/java/org/apache/commons/cli/CommandLineParserFactory.java,src/java/org/apache/commons/cli/CommandLineParserFactory.java,87,return (CommandLineParser)Class.forName( DEFAULT_PARSER ).newInstance();
True,src/java/org/apache/commons/cli/CommandLineParserFactory.java,src/java/org/apache/commons/cli/CommandLineParserFactory.java,89,catch( Exception exp2 ) {
True,src/java/org/apache/commons/cli/CommandLineParserFactory.java,src/java/org/apache/commons/cli/CommandLineParserFactory.java,90,// this will not happen ?
True,src/java/org/apache/commons/cli/CommandLineParserFactory.java,src/java/org/apache/commons/cli/CommandLineParserFactory.java,93,return null;
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,2," $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//cli/src/java/org/apache/commons/cli/GnuParser.java,v 1.1 2002/06/19 21:25:40 jkeyes Exp $"
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,3, $Revision: 1.1 $
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,4, $Date: 2002/06/19 21:25:40 $
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,2,"* $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//cli/src/java/org/apache/commons/cli/GnuParser.java,v 1.2 2002/07/04 22:32:12 jkeyes Exp $"
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,3,* $Revision: 1.2 $
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,4,* $Date: 2002/07/04 22:32:12 $
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,63,import java.util.Arrays;
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,64,import java.util.Collection;
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,64,mport java.util.LinkedList;
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,65,mport java.util.List;
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,66,import java.util.ListIterator;
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,77,/** current options instance */
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,78,private Options options;
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,80,/** convience member for the command line */
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,81,private CommandLine cmd;
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,83,/** required options subset of options */
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,84,private Collection requiredOptions;
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,92,* @throws ParseException if there are any problems encountered
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,93,* while parsing the command line tokens.
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,82,"ublic List parse( Options options, List arguments ) {"
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,95,"public CommandLine parse( Options options, String[] arguments )"
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,96,throws ParseException
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,88, @param options the specified Options
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,104,* @param opts the specified Options
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,92, @return the list of atomic option and value tokens
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,108,* @return the CommandLine
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,109,* @throws ParseException if there are any problems encountered
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,110,* while parsing the command line tokens.
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,94,"ublic List parse( Options options, List arguments, boolean stopAtNonOption ) {"
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,95,ist args = new LinkedList();
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,112,"public CommandLine parse( Options opts, String[] arguments, boolean stopAtNonOption )"
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,113,throws ParseException
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,115,// set the member instances
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,116,options = opts;
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,117,cmd = new CommandLine();
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,118,requiredOptions = options.getRequiredOptions();
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,120,ListIterator iter = Arrays.asList( arguments ).listIterator();
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,121,String token = null;
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,97,terator argIter = arguments.iterator();
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,98,tring   eachArg = null;
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,123,// flag to indicate whether the remainder of the tokens should
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,124,// be added to the other arguments list
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,102,hile ( argIter.hasNext() ) {
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,103,achArg = (String) argIter.next();
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,105,"f ( eachArg.equals(""--"") ) {"
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,106,"/ Look for -- to indicate end-of-options, and"
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,107,"/ just stuff it, along with everything past it"
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,108,/ into the returned list.
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,110,rgs.add( eachArg );
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,127,while ( iter.hasNext() ) {
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,128,token = (String) iter.next();
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,130,"if ( token.equals(""--"") ) {"
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,113,"lse if ( eachArg.startsWith(""--"") ) {"
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,114,"/ It's a long-option, so doesn't need any"
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,115,/ bursting applied to it.
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,117,rgs.add( eachArg );
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,133,"else if ( token.startsWith(""--"") ) {"
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,134,//process the long-option
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,135,"processOption( token, iter );"
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,119,"lse if ( eachArg.startsWith(""-"") ) {"
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,121,f ( eachArg.length() == 1) {
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,137,"else if ( token.startsWith(""-"") ) {"
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,138,if ( token.length() == 1) {
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,129,rgs.add( eachArg );
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,145,cmd.addArg( token );
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,132,lse if ( eachArg.length() == 2 ) {
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,133,rgs.add( eachArg );
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,136,"tring charOpt = eachArg.substring( 1, 2 );"
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,138,f( options.getOption( charOpt ) != null
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,139,& options.getOption( eachArg ) == null )
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,141,"rgs.add( ""-"" + charOpt );"
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,142,"rgs.add( eachArg.substring( 2, eachArg.length() ) );"
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,144,lse {
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,145,rgs.add( eachArg );
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,149,"processOption( token, iter );"
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,154,rgs.add( eachArg );
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,157,cmd.addArg( token );
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,162,hile ( argIter.hasNext() ) {
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,163,rgs.add( argIter.next() );
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,165,while ( iter.hasNext() ) {
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,166,cmd.addArg( (String)iter.next() );
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,168,eturn args;
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,171,// see if all required options have been processed
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,172,checkRequiredOptions( );
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,174,return cmd;
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,178,* It the option can accept multiple argument values then
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,179,* keep adding values until the next option token is encountered.
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,181,* @param opt the specified option
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,182,* @param iter the iterator over the command line tokens
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,184,"public void processMultipleArgs( Option opt, ListIterator iter ) {"
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,185,// loop until an option is found
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,186,while( iter.hasNext() ) {
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,187,String var = (String)iter.next();
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,189,// its an option
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,190,"if( var.startsWith( ""-"" ) ) {"
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,191,// set the iterator pointer back a position
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,192,iter.previous();
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,193,break;
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,195,// its a value
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,196,else {
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,197,opt.addValue( var );
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,203,* Process the option represented by <code>arg</code>.
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,205,* @param arg the string representation of an option
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,206,* @param iter the command line token iterator
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,208,"private void processOption( String arg, ListIterator iter )"
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,209,throws ParseException
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,211,String value = null;
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,213,// see if it is a single character special option
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,214,Option opt = (Option) options.getOption( arg );
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,215,"Option specialOption = (Option) options.getOption( arg.substring(0,2 ) );"
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,216,if( specialOption != null && opt == null) {
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,217,opt = specialOption;
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,218,value = arg.substring( 2 );
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,221,// if there is no option throw an UnrecognisedOptionException
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,222,if( opt == null ) {
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,223,"throw new UnrecognizedOptionException(""Unrecognized option: "" + arg);"
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,226,// if the option is a required option remove the option from
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,227,// the requiredOptions list
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,228,if ( opt.isRequired() ) {
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,229,requiredOptions.remove( opt );
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,232,// if the option is in an OptionGroup make that option the selected
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,233,// option of the group
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,234,if ( options.getOptionGroup( opt ) != null ) {
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,235,( (OptionGroup)( options.getOptionGroup( opt ) ) ).setSelected( opt );
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,238,// if the option takes an argument value
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,239,if ( opt.hasArg() ) {
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,240,try {
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,241,value = (value != null) ? value : (String)iter.next();
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,243,catch( java.util.NoSuchElementException exp ) {
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,244,"throw new MissingArgumentException( ""no argument for:"" + arg );"
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,246,opt.addValue( value );
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,247,if  (opt.hasMultipleArgs() ) {
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,248,"processMultipleArgs( opt, iter );"
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,252,// set the option on the command line
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,253,cmd.setOpt( opt );
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,257,* Ensures that all required options are present.
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,259,* @throws ParseException if all of the required options
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,260,* are not present.
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,262,private void checkRequiredOptions( )
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,263,throws ParseException {
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,265,// if there are required options that have not been
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,266,// processsed
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,267,if( requiredOptions.size() > 0 ) {
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,268,Iterator iter = requiredOptions.iterator();
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,269,StringBuffer buff = new StringBuffer();
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,271,// loop through the required options
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,272,while( iter.hasNext() ) {
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,273,Option missing = (Option)iter.next();
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,274,"buff.append( ""-"" );"
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,275,buff.append( missing.getOpt() );
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,276,"buff.append( "" "" );"
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,277,buff.append( missing.getDescription() );
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,280,// throw the MissingOptionException
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,281,throw new MissingOptionException( buff.toString() );
True,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,64,import java.util.Collection;
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,65,mport java.util.Set;
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,68,mport java.util.ListIterator;
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,90,"rivate String defaultParserImpl = ""org.apache.commons.cli.PosixParser"";"
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,91,rivate String parserImpl = defaultParserImpl;
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,93,rivate CommandLineParser parser;
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,113,"arserImpl = System.getProperty( ""org.apache.commons.cli.parser"" );"
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,114,ry {
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,115,arser = (CommandLineParser)Class.forName( parserImpl ).newInstance();
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,117,atch( Exception exp ) {
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,118,/ could not create according to parserImpl so default to
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,119,/ PosixParser
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,120,ry {
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,121,arser = (CommandLineParser)Class.forName( defaultParserImpl ).newInstance();
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,123,atch( Exception exp2 ) {
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,124,/ this will not happen ?
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,225,** <p>Parse the given list of arguments against this descriptor<p>
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,227, @param args Args to parse
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,229, @return {@link CommandLine} containing information related to parse state
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,231, @throws MissingArgumentException if an argument value for an option is not present
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,232, @throws UnrecognizedOptionException if an unrecognised option is present
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,233, @throws MissingOptionException if a required option is not present
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,234, @throws AlreadySelectedException if the same option appears more than once
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,236,ublic CommandLine parse(String[] args)
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,237,"hrows MissingArgumentException, UnrecognizedOptionException,"
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,238,"issingOptionException, AlreadySelectedException {"
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,239,"eturn parse( args, 0, args.length, false);"
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,242,** <p>Parse the given list of arguments against this descriptor</p>
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,244," <p>This method will cease parsing upon the first non-option token,"
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,245, storing the rest of the tokens for access through {@link CommandLine#getArgs()}.</p>
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,247," <p>This is useful for parsing a command-line in pieces, such as:</p>"
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,249, <p><code>
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,250, <pre>
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,251, myApp -s &lt;server&gt; -p &lt;port&gt; command -p &lt;printer&gt; -s &lt;style&gt;
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,252, </pre>
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,253, </code></p>
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,255," <p>Here, it'll parse up-to, but not including <code>command</code>. The"
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,256, tokens <code>command -p &lt;printer&gt; -s &lt;style&gt;</code> are available
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,257," through {@link CommandLine#getArgs()}, which may subsequently be parsed by"
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,258, another different <code>Options</code> instance.<p>
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,260, @param args Args to parse
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,261, @param stopAtNonOption stop parsing at the first non-option token
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,263, @return {@link CommandLine} containing information related to parse state
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,265, @throws MissingArgumentException if an argument value for an option is not present
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,266, @throws UnrecognizedOptionException if an unrecognised option is present
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,267, @throws MissingOptionException if a required option is not present
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,268, @throws AlreadySelectedException if the same option appears more than once
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,270,"ublic CommandLine parse(String[] args, boolean stopAtNonOption)"
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,271,"hrows MissingArgumentException, UnrecognizedOptionException,"
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,272,"issingOptionException, AlreadySelectedException {"
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,273,"eturn parse( args, 0, args.length, stopAtNonOption);"
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,276,** <p>Parse the given list of arguments against this descriptor</p>
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,278, <p>This method allows parsing from <code>formIndex</code> inclusive
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,279," to <code>toIndex</code> exclusive, of the <code>args</code> parameter,"
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,280, to allow parsing a specific portion of a command-line.<p>
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,282, @param args Args to parse
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,283, @param fromIndex index of args to start parsing
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,284, @param toIndex index of args to stop parsing
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,286, @return {@link CommandLine} containing information related to parse state
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,288, @throws MissingArgumentException if an argument value for an option is not present
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,289, @throws UnrecognizedOptionException if an unrecognised option is present
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,290, @throws MissingOptionException if a required option is not present
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,291, @throws AlreadySelectedException if the same option appears more than once
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,293,"ublic CommandLine parse(String[] args, int fromIndex, int toIndex)"
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,294,"hrows MissingArgumentException, UnrecognizedOptionException,"
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,295,"issingOptionException, AlreadySelectedException {"
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,296,"eturn parse( args, fromIndex, toIndex, false );"
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,299,** <p>Parse the given list of arguments against this descriptor</p>
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,301," <p>This method will cease parsing upon the first non-option token,"
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,302, storing the rest of the tokens for access through {@link CommandLine#getArgs()}.</p>
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,304," <p>This is useful for parsing a command-line in pieces, such as:</p>"
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,306, <p><code>
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,307, <pre>
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,308, myApp -s &lt;server&gt; -p &lt;port&gt; command -p &lt;printer&gt; -s &lt;style&gt;
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,309, </pre>
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,310, </code></p>
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,312," <p>Here, it'll parse up-to, but not including <code>command</code>. The"
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,313, tokens <code>command -p &lt;printer&gt; -s &lt;style&gt;</code> are available
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,314," through {@link CommandLine#getArgs()}, which may subsequently be parsed by"
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,315, another different <code>Options</code> instance.<p>
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,317, <p>This method also allows parsing from <code>formIndex</code> inclusive
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,318," to <code>toIndex</code> exclusive, of the <code>args</code> parameter,"
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,319, to allow parsing a specific portion of a command-line.<p>
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,321, @param args Args to parse
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,322, @param fromIndex index of args to start parsing
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,323, @param toIndex index of args to stop parsing
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,324, @param stopAtNonOption stop parsing at the first non-option token
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,326, @return {@link CommandLine} containing information related to parse state
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,328, @throws MissingArgumentException if an argument value for an option is not present
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,329, @throws UnrecognizedOptionException if an unrecognised option is present
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,330, @throws MissingOptionException if a required option is not present
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,331, @throws AlreadySelectedException if the same option appears more than once
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,333,"ublic CommandLine parse(String[] args, int fromIndex, int toIndex, boolean stopAtNonOption)"
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,334,"hrows MissingArgumentException, UnrecognizedOptionException,"
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,335,"issingOptionException, AlreadySelectedException {"
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,336,ist argList = java.util.Arrays.asList( args );
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,338,"eturn parse( argList, stopAtNonOption);"
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,341,** <p>Parse the given list of arguments against this descriptor</p>
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,343, @param args Args to parse
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,345, @return {@link CommandLine} containing information related to parse state
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,347, @throws MissingArgumentException if an argument value for an option is not present
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,348, @throws UnrecognizedOptionException if an unrecognised option is present
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,349, @throws MissingOptionException if a required option is not present
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,350, @throws AlreadySelectedException if the same option appears more than once
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,352,ublic CommandLine parse(List args)
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,353,"hrows MissingArgumentException, UnrecognizedOptionException,"
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,354,"issingOptionException, AlreadySelectedException {"
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,355,"eturn parse( args, false );"
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,358,** <p>Parse the given list of arguments against this descriptor</p>
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,360," <p>This method will cease parsing upon the first non-option token,"
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,361, storing the rest of the tokens for access through {@link CommandLine#getArgs()}.</p>
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,363," <p>This is useful for parsing a command-line in pieces, such as:</p>"
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,365, <p><code>
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,366, <pre>
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,367, myApp -s &lt;server&gt; -p &lt;port&gt; command -p &lt;printer&gt; -s &lt;style&gt;
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,368, </pre>
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,369, </code></p>
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,371," <p>Here, it'll parse up-to, but not including <code>command</code>. The"
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,372, tokens <code>command -p &lt;printer&gt; -s &lt;style&gt;</code> are available
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,373," through {@link CommandLine#getArgs()}, which may subsequently be parsed by"
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,374, another different <code>Options</code> instance.<p>
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,376, <p>This method also allows parsing from <code>formIndex</code> inclusive
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,377," to <code>toIndex</code> exclusive, of the <code>args</code> parameter,"
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,378, to allow parsing a specific portion of a command-line.<p>
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,380, @param inArgs Arguments to parse
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,381, @param stopAtNonOption stop parsing at the first non-option token
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,383, @return {@link CommandLine} containing information related to parse state
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,385, @throws MissingArgumentException if an argument value for an option is not present
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,386, @throws UnrecognizedOptionException if an unrecognised option is present
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,387, @throws MissingOptionException if a required option is not present
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,388, @throws AlreadySelectedException if the same option appears more than once
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,390,"ublic CommandLine parse(List inArgs, boolean stopAtNonOption)"
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,391,"hrows MissingArgumentException, UnrecognizedOptionException,"
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,392,"issingOptionException, AlreadySelectedException {"
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,393,ommandLine cl = new CommandLine();
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,395,"ist args = parser.parse( this, inArgs, stopAtNonOption );"
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,397,istIterator argIter = args.listIterator();
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,398,tring   eachArg = null;
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,399,ption   eachOpt = null;
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,400,oolean  eatTheRest = false;
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,402,hile ( argIter.hasNext() ) {
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,404,achArg = (String) argIter.next();
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,406,"f ( eachArg.equals(""--"") ) {"
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,407,/ signalled end-of-opts.  Eat the rest
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,409,atTheRest = true;
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,411,"lse if ( eachArg.startsWith(""--"") ) {"
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,412,achOpt = (Option) longOpts.get( eachArg );
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,413,"rocessOption( eachArg, eachOpt, argIter, cl );"
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,415,"lse if ( eachArg.equals(""-"") ) {"
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,416,/ Just-another-argument
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,418,f ( stopAtNonOption ) {
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,419,atTheRest = true;
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,421,lse {
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,422,l.addArg( eachArg );
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,425,"lse if ( eachArg.startsWith(""-"") ) {"
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,426,achOpt = (Option) shortOpts.get( eachArg );
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,427,"rocessOption( eachArg, eachOpt, argIter, cl );"
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,429,lse {
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,430,l.addArg( eachArg );
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,431,f ( stopAtNonOption ) {
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,432,atTheRest = true;
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,436,f ( eatTheRest ) {
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,437,hile ( argIter.hasNext() ) {
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,438,achArg = (String) argIter.next();
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,439,l.addArg( eachArg );
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,444,/ this will throw a MissingOptionException
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,445,heckRequiredOptions();
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,447,eturn cl;
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,451, @throws MissingOptionException if all of the required options are
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,452, not present.
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,454,rivate void checkRequiredOptions() throws MissingOptionException {
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,455,f( requiredOpts.size() > 0 ) {
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,456,et optKeys = requiredOpts.keySet();
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,458,terator iter = optKeys.iterator();
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,460,tringBuffer buff = new StringBuffer();
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,462,hile( iter.hasNext() ) {
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,463,ption missing = (Option)requiredOpts.get( iter.next() );
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,464,"uff.append( ""-"" );"
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,465,uff.append( missing.getOpt() );
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,466,"uff.append( "" "" );"
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,467,uff.append( missing.getDescription() );
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,470,hrow new MissingOptionException( buff.toString() );
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,475, <p>processOption rakes the current option and checks if it is
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,476," an unrecognised option, whether the argument value is missing or"
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,477, whether the option has already been selected.</p>
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,479, @param eachArg the current option read from command line
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,480, @param option the current option corresponding to eachArg
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,481, @param argIter the argument iterator
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,482, @param cl the current command line
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,484, @throws MissingArgumentException if an argument value for an option is not present
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,485, @throws UnrecognizedOptionException if an unrecognised option is present
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,486, @throws AlreadySelectedException if the same option appears more than once
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,488,"rivate void processOption( String eachArg, Option option, ListIterator argIter,"
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,489,ommandLine cl)
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,490,"hrows UnrecognizedOptionException, AlreadySelectedException,"
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,491,issingArgumentException {
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,493,f ( option == null ) {
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,494,"hrow new UnrecognizedOptionException(""Unrecognized option: "" + eachArg);"
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,496,lse {
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,498,f ( optionGroups.get( option ) != null ) {
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,499, (OptionGroup)( optionGroups.get( option ) ) ).setSelected( option );
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,502,/ if required remove from list
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,503,f ( option.isRequired() ) {
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,504,"equiredOpts.remove( ""-"" + option.getOpt() );"
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,507,f ( option.hasArg() ) {
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,508,f ( argIter.hasNext() ) {
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,509,achArg = (String) argIter.next();
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,510,ption.addValue( eachArg );
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,512,f( option.hasMultipleArgs() ) {
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,513,hile( argIter.hasNext() ) {
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,514,achArg = (String)argIter.next();
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,515,"f( eachArg.startsWith(""-"") ) {"
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,516,rgIter.previous();
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,517,l.setOpt( option );
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,518,reak;
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,520,lse {
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,521,ption.addValue( eachArg );
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,525,lse {
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,526,l.setOpt( option );
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,527,eturn;
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,529,f( !argIter.hasNext() ) {
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,530,l.setOpt( option );
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,533,lse {
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,534,"hrow new MissingArgumentException( eachArg + "" requires an argument."");"
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,538,lse {
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,539,l.setOpt( option );
True,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,234,/** <p>Returns the required options as a
True,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,235,* <code>java.util.Collection</code>.</p>
True,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,237,* @return Collection of required options
True,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,239,public Collection getRequiredOptions() {
True,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,240,return requiredOpts.values();
True,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,264,/** <p>Returns the OptionGroup the <code>opt</code>
True,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,265,* belongs to.</p>
True,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,266,* @param opt the option whose OptionGroup is being queried.
True,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,268,* @return the OptionGroup if <code>opt</code> is part
True,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,269,"* of an OptionGroup, otherwise return null"
True,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,271,public OptionGroup getOptionGroup( Option opt ) {
True,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,272,return (OptionGroup)optionGroups.get( opt );
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,2," $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//cli/src/java/org/apache/commons/cli/PosixParser.java,v 1.2 2002/06/19 21:31:16 jkeyes Exp $"
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,3, $Revision: 1.2 $
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,4, $Date: 2002/06/19 21:31:16 $
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,2,"* $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//cli/src/java/org/apache/commons/cli/PosixParser.java,v 1.3 2002/07/04 22:32:12 jkeyes Exp $"
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,3,* $Revision: 1.3 $
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,4,* $Date: 2002/07/04 22:32:12 $
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,63,import java.util.Arrays;
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,64,import java.util.Collection;
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,65,import java.util.ListIterator;
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,64,mport java.util.LinkedList;
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,65,mport java.util.List;
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,78,/** current options instance */
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,79,private Options options;
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,81,/** convience member for the command line */
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,82,private CommandLine cmd;
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,84,/** required options subset of options */
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,85,private Collection requiredOptions;
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,93,* @throws ParseException if there are any problems encountered
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,94,* while parsing the command line tokens.
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,83,"ublic List parse( Options options, List arguments ) {"
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,96,"public CommandLine parse( Options options, String[] arguments )"
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,97,throws ParseException
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,89, @param options the specified Options
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,105,* @param opts the specified Options
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,93, @return the list of atomic option and value tokens
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,109,* @return the CommandLine
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,110,* @throws ParseException if there are any problems encountered
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,111,* while parsing the command line tokens.
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,95,"ublic List parse( Options options, List arguments, boolean stopAtNonOption ) {"
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,96,ist args = new LinkedList();
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,98,terator argIter = arguments.iterator();
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,99,tring   eachArg = null;
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,113,"public CommandLine parse( Options opts, String[] arguments, boolean stopAtNonOption )"
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,114,throws ParseException
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,116,// set the member instances
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,117,options = opts;
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,118,cmd = new CommandLine();
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,119,requiredOptions = options.getRequiredOptions();
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,121,// an iterator for the command line tokens
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,122,ListIterator iter = Arrays.asList( arguments ).listIterator();
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,123,String token = null;
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,125,// flag to indicate whether the remainder of the tokens should
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,126,// be added to the other arguments list
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,103,hile ( argIter.hasNext() ) {
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,104,achArg = (String) argIter.next();
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,129,// process each command line token
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,130,while ( iter.hasNext() ) {
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,131,// get the next command line token
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,132,token = (String) iter.next();
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,106,"f ( eachArg.equals(""--"") ) {"
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,107,"/ Look for -- to indicate end-of-options, and"
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,108,"/ just stuff it, along with everything past it"
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,109,/ into the returned list.
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,111,rgs.add( eachArg );
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,134,"// Look for -- to indicate end-of-options, and"
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,135,"// just stuff it, along with everything past it"
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,136,// into the returned list.
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,137,"if ( token.equals(""--"") ) {"
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,114,"lse if ( eachArg.startsWith(""--"") ) {"
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,115,"/ It's a long-option, so doesn't need any"
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,116,/ bursting applied to it.
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,118,rgs.add( eachArg );
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,140,"else if ( token.startsWith(""--"") ) {"
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,141,// process the long-option
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,142,"processOption( token, iter );"
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,120,"lse if ( eachArg.startsWith(""-"") ) {"
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,121,/ It might be a short arg needing
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,122,/ some bursting
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,124,f ( eachArg.length() == 1) {
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,125,"/ It's not really an option, so"
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,126,/ just drop it on the list
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,144,"else if ( token.startsWith(""-"") ) {"
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,145,// it might be a short arg needing some bursting
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,146,if ( token.length() == 1) {
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,147,"// not an option, so just drop it on the argument list"
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,132,rgs.add( eachArg );
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,152,cmd.addArg( token );
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,135,lse if ( eachArg.length() == 2 ) {
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,136,/ No bursting required
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,138,rgs.add( eachArg );
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,155,else if ( token.length() == 2 ) {
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,156,"processOption( token, iter );"
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,141,/ Needs bursting.  Figure out
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,142,"/ if we have multiple options,"
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,143,"/ or maybe an option plus an arg,"
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,144,/ or some combination thereof.
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,159,// Needs bursting.  Figure out if we have multiple
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,160,"// options, or maybe an option plus an arg, or some"
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,161,// combination thereof.
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,146,or ( int i = 1 ; i < eachArg.length() ; ++i ) {
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,147,"tring optStr = ""-"" + eachArg.charAt(i);"
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,148,ption opt    = (Option) options.getOption( String.valueOf( eachArg.charAt(i) ) );
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,163,// iterate over each character in the token
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,164,for ( int i = 1 ; i < token.length() ; ++i ) {
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,166,// retrieve the associated option
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,167,Option opt = (Option) options.getOption(
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,168,String.valueOf( token.charAt(i) ) );
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,150,f ( (opt != null) && (opt.hasArg()) ) {
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,151,"/ If the current option has an argument,"
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,152,/ then consider the rest of the eachArg
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,153,/ to be that argument.
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,155,rgs.add( optStr );
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,157,f ( (i+1) < eachArg.length() ) {
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,158,tring optArg = eachArg.substring(i+1);
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,159,rgs.add( optArg );
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,161,reak;
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,170,// if there is an associated option
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,171,if ( opt != null ) {
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,173,// if the option requires an argument value
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,174,if ( opt.hasArg() ) {
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,175,// consider the rest of the token
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,176,// to be the argument value
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,178,// if there is no argument value
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,179,if( token.substring(i+1).length() == 0 ) {
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,180,"throw new MissingArgumentException( ""Missing argument value for "" + opt.getOpt() );"
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,183,// add the argument value
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,184,opt.addValue( token.substring(i+1) );
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,186,// if the option takes multiple values
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,187,if  (opt.hasMultipleArgs() ) {
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,188,"processMultipleArgs( opt, iter );"
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,190,// set the option
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,191,cmd.setOpt( opt );
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,193,// don't process any more characters
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,194,break;
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,197,// if the option does not require an argument
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,198,cmd.setOpt( opt );
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,200,// this is an unrecognized option
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,164,"/ No argument, so prepend the single dash,"
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,165,/ and then drop it into the arglist.
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,167,rgs.add( optStr );
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,202,throw new UnrecognizedOptionException( String.valueOf( token.charAt(i) ) );
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,173,"/ It's just a normal non-option arg,"
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,174,/ so dump it into the list of returned
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,175,/ values.
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,177,rgs.add( eachArg );
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,208,"// It's just a normal non-option arg, so dump it into the"
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,209,// list of returned values.
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,210,cmd.addArg( token );
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,217,// add all unprocessed tokens to the arg list
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,185,hile ( argIter.hasNext() ) {
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,186,rgs.add( argIter.next() );
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,219,while ( iter.hasNext() ) {
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,220,cmd.addArg( (String)iter.next() );
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,191,eturn args;
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,225,// see if all required options have been processed
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,226,checkRequiredOptions( );
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,228,// return the CommandLine instance
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,229,return cmd;
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,233,* Process the option represented by <code>arg</code>.
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,235,* @param arg the string representation of an option
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,236,* @param iter the command line token iterator
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,238,"private void processOption( String arg, ListIterator iter )"
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,239,throws ParseException
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,241,// get the option represented by arg
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,242,Option opt = (Option) options.getOption( arg );
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,244,// if there is no option throw an UnrecognisedOptionException
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,245,if( opt == null ) {
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,246,"throw new UnrecognizedOptionException(""Unrecognized option: "" + arg);"
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,249,// if the option is a required option remove the option from
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,250,// the requiredOptions list
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,251,if ( opt.isRequired() ) {
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,252,requiredOptions.remove( opt );
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,255,// if the option is in an OptionGroup make that option the selected
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,256,// option of the group
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,257,if ( options.getOptionGroup( opt ) != null ) {
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,258,( (OptionGroup)( options.getOptionGroup( opt ) ) ).setSelected( opt );
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,261,// if the option takes an argument value
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,262,if ( opt.hasArg() ) {
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,263,if  (opt.hasMultipleArgs() ) {
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,264,"processMultipleArgs( opt, iter );"
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,266,else {
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,267,opt.addValue( (String)iter.next() );
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,271,// set the option on the command line
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,272,cmd.setOpt( opt );
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,276,* It the option can accept multiple argument values then
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,277,* keep adding values until the next option token is encountered.
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,279,* @param opt the specified option
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,280,* @param iter the iterator over the command line tokens
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,282,"public void processMultipleArgs( Option opt, ListIterator iter ) {"
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,283,// loop until an option is found
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,284,while( iter.hasNext() ) {
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,285,String var = (String)iter.next();
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,287,// its an option
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,288,"if( var.startsWith( ""-"" ) ) {"
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,289,// set the iterator pointer back a position
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,290,iter.previous();
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,291,break;
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,293,// its a value
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,294,else {
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,295,opt.addValue( var );
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,301,* Ensures that all required options are present.
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,303,* @throws ParseException if all of the required options
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,304,* are not present.
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,306,private void checkRequiredOptions( )
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,307,throws ParseException {
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,309,// if there are required options that have not been
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,310,// processsed
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,311,if( requiredOptions.size() > 0 ) {
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,312,Iterator iter = requiredOptions.iterator();
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,313,StringBuffer buff = new StringBuffer();
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,315,// loop through the required options
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,316,while( iter.hasNext() ) {
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,317,Option missing = (Option)iter.next();
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,318,"buff.append( ""-"" );"
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,319,buff.append( missing.getOpt() );
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,320,"buff.append( "" "" );"
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,321,buff.append( missing.getDescription() );
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,324,// throw the MissingOptionException
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,325,throw new MissingOptionException( buff.toString() );
True,src/test/org/apache/commons/cli/ApplicationTest.java,src/test/org/apache/commons/cli/ApplicationTest.java,41,CommandLineParser parser = CommandLineParserFactory.newParser();
False,src/test/org/apache/commons/cli/ApplicationTest.java,src/test/org/apache/commons/cli/ApplicationTest.java,61,ommandLine line = options.parse( args );
True,src/test/org/apache/commons/cli/ApplicationTest.java,src/test/org/apache/commons/cli/ApplicationTest.java,62,"CommandLine line = parser.parse( options, args );"
False,src/test/org/apache/commons/cli/BuildTest.java,src/test/org/apache/commons/cli/BuildTest.java,51,ry
False,src/test/org/apache/commons/cli/BuildTest.java,src/test/org/apache/commons/cli/BuildTest.java,53,"pts.addOption('a',"
False,src/test/org/apache/commons/cli/BuildTest.java,src/test/org/apache/commons/cli/BuildTest.java,54,"alse,"
False,src/test/org/apache/commons/cli/BuildTest.java,src/test/org/apache/commons/cli/BuildTest.java,55,"toggle -a"");"
False,src/test/org/apache/commons/cli/BuildTest.java,src/test/org/apache/commons/cli/BuildTest.java,57,"pts.addOption('b',"
False,src/test/org/apache/commons/cli/BuildTest.java,src/test/org/apache/commons/cli/BuildTest.java,58,"rue,"
False,src/test/org/apache/commons/cli/BuildTest.java,src/test/org/apache/commons/cli/BuildTest.java,59,"toggle -b"");"
False,src/test/org/apache/commons/cli/BuildTest.java,src/test/org/apache/commons/cli/BuildTest.java,61,atch (DuplicateOptionException e)
False,src/test/org/apache/commons/cli/BuildTest.java,src/test/org/apache/commons/cli/BuildTest.java,63,ail(e.toString());
False,src/test/org/apache/commons/cli/BuildTest.java,src/test/org/apache/commons/cli/BuildTest.java,81,ry
False,src/test/org/apache/commons/cli/BuildTest.java,src/test/org/apache/commons/cli/BuildTest.java,83,"pts.addOption('a',"
False,src/test/org/apache/commons/cli/BuildTest.java,src/test/org/apache/commons/cli/BuildTest.java,84,"alse,"
False,src/test/org/apache/commons/cli/BuildTest.java,src/test/org/apache/commons/cli/BuildTest.java,85,"toggle -a"");"
False,src/test/org/apache/commons/cli/BuildTest.java,src/test/org/apache/commons/cli/BuildTest.java,87,"pts.addOption('a',"
False,src/test/org/apache/commons/cli/BuildTest.java,src/test/org/apache/commons/cli/BuildTest.java,88,"rue,"
False,src/test/org/apache/commons/cli/BuildTest.java,src/test/org/apache/commons/cli/BuildTest.java,89,"toggle -a"");"
False,src/test/org/apache/commons/cli/BuildTest.java,src/test/org/apache/commons/cli/BuildTest.java,91,"ail(""Should've thrown DuplicateOptionException"");"
False,src/test/org/apache/commons/cli/BuildTest.java,src/test/org/apache/commons/cli/BuildTest.java,93,atch (DuplicateOptionException e)
False,src/test/org/apache/commons/cli/BuildTest.java,src/test/org/apache/commons/cli/BuildTest.java,114,ry
False,src/test/org/apache/commons/cli/BuildTest.java,src/test/org/apache/commons/cli/BuildTest.java,116,"pts.addOption('a',"
False,src/test/org/apache/commons/cli/BuildTest.java,src/test/org/apache/commons/cli/BuildTest.java,117,"--a"","
False,src/test/org/apache/commons/cli/BuildTest.java,src/test/org/apache/commons/cli/BuildTest.java,118,"alse,"
False,src/test/org/apache/commons/cli/BuildTest.java,src/test/org/apache/commons/cli/BuildTest.java,119,"toggle -a"");"
False,src/test/org/apache/commons/cli/BuildTest.java,src/test/org/apache/commons/cli/BuildTest.java,121,"pts.addOption('b',"
False,src/test/org/apache/commons/cli/BuildTest.java,src/test/org/apache/commons/cli/BuildTest.java,122,"--b"","
False,src/test/org/apache/commons/cli/BuildTest.java,src/test/org/apache/commons/cli/BuildTest.java,123,"rue,"
False,src/test/org/apache/commons/cli/BuildTest.java,src/test/org/apache/commons/cli/BuildTest.java,124,"set -b"");"
False,src/test/org/apache/commons/cli/BuildTest.java,src/test/org/apache/commons/cli/BuildTest.java,126,atch (DuplicateOptionException e)
False,src/test/org/apache/commons/cli/BuildTest.java,src/test/org/apache/commons/cli/BuildTest.java,128,ail(e.toString());
False,src/test/org/apache/commons/cli/BuildTest.java,src/test/org/apache/commons/cli/BuildTest.java,147,ry
False,src/test/org/apache/commons/cli/BuildTest.java,src/test/org/apache/commons/cli/BuildTest.java,149,"pts.addOption('a',"
False,src/test/org/apache/commons/cli/BuildTest.java,src/test/org/apache/commons/cli/BuildTest.java,150,"--a"","
False,src/test/org/apache/commons/cli/BuildTest.java,src/test/org/apache/commons/cli/BuildTest.java,151,"alse,"
False,src/test/org/apache/commons/cli/BuildTest.java,src/test/org/apache/commons/cli/BuildTest.java,152,"toggle -a"");"
False,src/test/org/apache/commons/cli/BuildTest.java,src/test/org/apache/commons/cli/BuildTest.java,154,"pts.addOption('a',"
False,src/test/org/apache/commons/cli/BuildTest.java,src/test/org/apache/commons/cli/BuildTest.java,155,"--a"","
False,src/test/org/apache/commons/cli/BuildTest.java,src/test/org/apache/commons/cli/BuildTest.java,156,"alse,"
False,src/test/org/apache/commons/cli/BuildTest.java,src/test/org/apache/commons/cli/BuildTest.java,157,"toggle -a"");"
False,src/test/org/apache/commons/cli/BuildTest.java,src/test/org/apache/commons/cli/BuildTest.java,159,"ail(""Should've thrown DuplicateOptionException"");"
False,src/test/org/apache/commons/cli/BuildTest.java,src/test/org/apache/commons/cli/BuildTest.java,161,atch (DuplicateOptionException e)
True,src/test/org/apache/commons/cli/GnuParseTest.java,src/test/org/apache/commons/cli/GnuParseTest.java,2,* Copyright (C) The Apache Software Foundation. All rights reserved.
True,src/test/org/apache/commons/cli/GnuParseTest.java,src/test/org/apache/commons/cli/GnuParseTest.java,4,* This software is published under the terms of the Apache Software License
True,src/test/org/apache/commons/cli/GnuParseTest.java,src/test/org/apache/commons/cli/GnuParseTest.java,5,"* version 1.1, a copy of which has been included with this distribution in"
True,src/test/org/apache/commons/cli/GnuParseTest.java,src/test/org/apache/commons/cli/GnuParseTest.java,6,* the LICENSE file.
True,src/test/org/apache/commons/cli/GnuParseTest.java,src/test/org/apache/commons/cli/GnuParseTest.java,8,"* $Id: GnuParseTest.java,v 1.1 2002/07/04 22:32:12 jkeyes Exp $"
True,src/test/org/apache/commons/cli/GnuParseTest.java,src/test/org/apache/commons/cli/GnuParseTest.java,11,package org.apache.commons.cli;
True,src/test/org/apache/commons/cli/GnuParseTest.java,src/test/org/apache/commons/cli/GnuParseTest.java,13,import junit.framework.Test;
True,src/test/org/apache/commons/cli/GnuParseTest.java,src/test/org/apache/commons/cli/GnuParseTest.java,14,import junit.framework.TestCase;
True,src/test/org/apache/commons/cli/GnuParseTest.java,src/test/org/apache/commons/cli/GnuParseTest.java,15,import junit.framework.TestSuite;
True,src/test/org/apache/commons/cli/GnuParseTest.java,src/test/org/apache/commons/cli/GnuParseTest.java,17,public class GnuParseTest extends TestCase
True,src/test/org/apache/commons/cli/GnuParseTest.java,src/test/org/apache/commons/cli/GnuParseTest.java,19,private Options _options = null;
True,src/test/org/apache/commons/cli/GnuParseTest.java,src/test/org/apache/commons/cli/GnuParseTest.java,20,private CommandLineParser _parser = null;
True,src/test/org/apache/commons/cli/GnuParseTest.java,src/test/org/apache/commons/cli/GnuParseTest.java,22,public static Test suite() {
True,src/test/org/apache/commons/cli/GnuParseTest.java,src/test/org/apache/commons/cli/GnuParseTest.java,23,return new TestSuite( GnuParseTest.class );
True,src/test/org/apache/commons/cli/GnuParseTest.java,src/test/org/apache/commons/cli/GnuParseTest.java,26,public GnuParseTest( String name )
True,src/test/org/apache/commons/cli/GnuParseTest.java,src/test/org/apache/commons/cli/GnuParseTest.java,28,super( name );
True,src/test/org/apache/commons/cli/GnuParseTest.java,src/test/org/apache/commons/cli/GnuParseTest.java,31,public void setUp()
True,src/test/org/apache/commons/cli/GnuParseTest.java,src/test/org/apache/commons/cli/GnuParseTest.java,33,"System.setProperty( ""org.apache.commons.cli.parser"","
True,src/test/org/apache/commons/cli/GnuParseTest.java,src/test/org/apache/commons/cli/GnuParseTest.java,34,"""org.apache.commons.cli.GnuParser"");"
True,src/test/org/apache/commons/cli/GnuParseTest.java,src/test/org/apache/commons/cli/GnuParseTest.java,36,_options = new Options()
True,src/test/org/apache/commons/cli/GnuParseTest.java,src/test/org/apache/commons/cli/GnuParseTest.java,37,".addOption(""a"","
True,src/test/org/apache/commons/cli/GnuParseTest.java,src/test/org/apache/commons/cli/GnuParseTest.java,38,"""enable-a"","
True,src/test/org/apache/commons/cli/GnuParseTest.java,src/test/org/apache/commons/cli/GnuParseTest.java,39,"false,"
True,src/test/org/apache/commons/cli/GnuParseTest.java,src/test/org/apache/commons/cli/GnuParseTest.java,40,"""turn [a] on or off"")"
True,src/test/org/apache/commons/cli/GnuParseTest.java,src/test/org/apache/commons/cli/GnuParseTest.java,41,".addOption(""b"","
True,src/test/org/apache/commons/cli/GnuParseTest.java,src/test/org/apache/commons/cli/GnuParseTest.java,42,"""bfile"","
True,src/test/org/apache/commons/cli/GnuParseTest.java,src/test/org/apache/commons/cli/GnuParseTest.java,43,"true,"
True,src/test/org/apache/commons/cli/GnuParseTest.java,src/test/org/apache/commons/cli/GnuParseTest.java,44,"""set the value of [b]"")"
True,src/test/org/apache/commons/cli/GnuParseTest.java,src/test/org/apache/commons/cli/GnuParseTest.java,45,".addOption(""c"","
True,src/test/org/apache/commons/cli/GnuParseTest.java,src/test/org/apache/commons/cli/GnuParseTest.java,46,"""copt"","
True,src/test/org/apache/commons/cli/GnuParseTest.java,src/test/org/apache/commons/cli/GnuParseTest.java,47,"false,"
True,src/test/org/apache/commons/cli/GnuParseTest.java,src/test/org/apache/commons/cli/GnuParseTest.java,48,"""turn [c] on or off"");"
True,src/test/org/apache/commons/cli/GnuParseTest.java,src/test/org/apache/commons/cli/GnuParseTest.java,50,_parser = CommandLineParserFactory.newParser();
True,src/test/org/apache/commons/cli/GnuParseTest.java,src/test/org/apache/commons/cli/GnuParseTest.java,53,public void tearDown()
True,src/test/org/apache/commons/cli/GnuParseTest.java,src/test/org/apache/commons/cli/GnuParseTest.java,58,public void testSimpleShort()
True,src/test/org/apache/commons/cli/GnuParseTest.java,src/test/org/apache/commons/cli/GnuParseTest.java,60,"String[] args = new String[] { ""-a"","
True,src/test/org/apache/commons/cli/GnuParseTest.java,src/test/org/apache/commons/cli/GnuParseTest.java,61,"""-b"", ""toast"","
True,src/test/org/apache/commons/cli/GnuParseTest.java,src/test/org/apache/commons/cli/GnuParseTest.java,62,"""foo"", ""bar"" };"
True,src/test/org/apache/commons/cli/GnuParseTest.java,src/test/org/apache/commons/cli/GnuParseTest.java,64,try
True,src/test/org/apache/commons/cli/GnuParseTest.java,src/test/org/apache/commons/cli/GnuParseTest.java,66,"CommandLine cl = _parser.parse(_options, args);"
True,src/test/org/apache/commons/cli/GnuParseTest.java,src/test/org/apache/commons/cli/GnuParseTest.java,68,"assertTrue( ""Confirm -a is set"", cl.hasOption(""a"") );"
True,src/test/org/apache/commons/cli/GnuParseTest.java,src/test/org/apache/commons/cli/GnuParseTest.java,69,"assertTrue( ""Confirm -b is set"", cl.hasOption(""b"") );"
True,src/test/org/apache/commons/cli/GnuParseTest.java,src/test/org/apache/commons/cli/GnuParseTest.java,70,"assertTrue( ""Confirm arg of -b"", cl.getOptionValue(""b"").equals(""toast"") );"
True,src/test/org/apache/commons/cli/GnuParseTest.java,src/test/org/apache/commons/cli/GnuParseTest.java,71,"assertTrue( ""Confirm size of extra args"", cl.getArgList().size() == 2);"
True,src/test/org/apache/commons/cli/GnuParseTest.java,src/test/org/apache/commons/cli/GnuParseTest.java,73,catch (ParseException e)
True,src/test/org/apache/commons/cli/GnuParseTest.java,src/test/org/apache/commons/cli/GnuParseTest.java,75,fail( e.toString() );
True,src/test/org/apache/commons/cli/GnuParseTest.java,src/test/org/apache/commons/cli/GnuParseTest.java,79,public void testSimpleLong()
True,src/test/org/apache/commons/cli/GnuParseTest.java,src/test/org/apache/commons/cli/GnuParseTest.java,81,"String[] args = new String[] { ""--enable-a"","
True,src/test/org/apache/commons/cli/GnuParseTest.java,src/test/org/apache/commons/cli/GnuParseTest.java,82,"""--bfile"", ""toast"","
True,src/test/org/apache/commons/cli/GnuParseTest.java,src/test/org/apache/commons/cli/GnuParseTest.java,83,"""foo"", ""bar"" };"
True,src/test/org/apache/commons/cli/GnuParseTest.java,src/test/org/apache/commons/cli/GnuParseTest.java,85,try
True,src/test/org/apache/commons/cli/GnuParseTest.java,src/test/org/apache/commons/cli/GnuParseTest.java,87,"CommandLine cl = _parser.parse(_options, args);"
True,src/test/org/apache/commons/cli/GnuParseTest.java,src/test/org/apache/commons/cli/GnuParseTest.java,89,"assertTrue( ""Confirm -a is set"", cl.hasOption(""a"") );"
True,src/test/org/apache/commons/cli/GnuParseTest.java,src/test/org/apache/commons/cli/GnuParseTest.java,90,"assertTrue( ""Confirm -b is set"", cl.hasOption(""b"") );"
True,src/test/org/apache/commons/cli/GnuParseTest.java,src/test/org/apache/commons/cli/GnuParseTest.java,91,"assertTrue( ""Confirm arg of -b"", cl.getOptionValue(""b"").equals(""toast"") );"
True,src/test/org/apache/commons/cli/GnuParseTest.java,src/test/org/apache/commons/cli/GnuParseTest.java,92,"assertTrue( ""Confirm size of extra args"", cl.getArgList().size() == 2);"
True,src/test/org/apache/commons/cli/GnuParseTest.java,src/test/org/apache/commons/cli/GnuParseTest.java,94,catch (ParseException e)
True,src/test/org/apache/commons/cli/GnuParseTest.java,src/test/org/apache/commons/cli/GnuParseTest.java,96,fail( e.toString() );
True,src/test/org/apache/commons/cli/GnuParseTest.java,src/test/org/apache/commons/cli/GnuParseTest.java,100,public void testExtraOption()
True,src/test/org/apache/commons/cli/GnuParseTest.java,src/test/org/apache/commons/cli/GnuParseTest.java,102,"String[] args = new String[] { ""-a"", ""-d"", ""-b"", ""toast"","
True,src/test/org/apache/commons/cli/GnuParseTest.java,src/test/org/apache/commons/cli/GnuParseTest.java,103,"""foo"", ""bar"" };"
True,src/test/org/apache/commons/cli/GnuParseTest.java,src/test/org/apache/commons/cli/GnuParseTest.java,105,boolean caught = false;
True,src/test/org/apache/commons/cli/GnuParseTest.java,src/test/org/apache/commons/cli/GnuParseTest.java,107,try
True,src/test/org/apache/commons/cli/GnuParseTest.java,src/test/org/apache/commons/cli/GnuParseTest.java,109,"CommandLine cl = _parser.parse(_options, args);"
True,src/test/org/apache/commons/cli/GnuParseTest.java,src/test/org/apache/commons/cli/GnuParseTest.java,111,"assertTrue( ""Confirm -a is set"", cl.hasOption(""a"") );"
True,src/test/org/apache/commons/cli/GnuParseTest.java,src/test/org/apache/commons/cli/GnuParseTest.java,112,"assertTrue( ""Confirm -b is set"", cl.hasOption(""b"") );"
True,src/test/org/apache/commons/cli/GnuParseTest.java,src/test/org/apache/commons/cli/GnuParseTest.java,113,"assertTrue( ""confirm arg of -b"", cl.getOptionValue(""b"").equals(""toast"") );"
True,src/test/org/apache/commons/cli/GnuParseTest.java,src/test/org/apache/commons/cli/GnuParseTest.java,114,"assertTrue( ""Confirm size of extra args"", cl.getArgList().size() == 3);"
True,src/test/org/apache/commons/cli/GnuParseTest.java,src/test/org/apache/commons/cli/GnuParseTest.java,116,catch (UnrecognizedOptionException e)
True,src/test/org/apache/commons/cli/GnuParseTest.java,src/test/org/apache/commons/cli/GnuParseTest.java,118,caught = true;
True,src/test/org/apache/commons/cli/GnuParseTest.java,src/test/org/apache/commons/cli/GnuParseTest.java,120,catch (ParseException e)
True,src/test/org/apache/commons/cli/GnuParseTest.java,src/test/org/apache/commons/cli/GnuParseTest.java,122,fail( e.toString() );
True,src/test/org/apache/commons/cli/GnuParseTest.java,src/test/org/apache/commons/cli/GnuParseTest.java,124,"assertTrue( ""Confirm UnrecognizedOptionException caught"", caught );"
True,src/test/org/apache/commons/cli/GnuParseTest.java,src/test/org/apache/commons/cli/GnuParseTest.java,127,public void testMissingArg()
True,src/test/org/apache/commons/cli/GnuParseTest.java,src/test/org/apache/commons/cli/GnuParseTest.java,130,"String[] args = new String[] { ""-b"" };"
True,src/test/org/apache/commons/cli/GnuParseTest.java,src/test/org/apache/commons/cli/GnuParseTest.java,132,boolean caught = false;
True,src/test/org/apache/commons/cli/GnuParseTest.java,src/test/org/apache/commons/cli/GnuParseTest.java,134,try
True,src/test/org/apache/commons/cli/GnuParseTest.java,src/test/org/apache/commons/cli/GnuParseTest.java,136,"CommandLine cl = _parser.parse(_options, args);"
True,src/test/org/apache/commons/cli/GnuParseTest.java,src/test/org/apache/commons/cli/GnuParseTest.java,138,catch (MissingArgumentException e)
True,src/test/org/apache/commons/cli/GnuParseTest.java,src/test/org/apache/commons/cli/GnuParseTest.java,140,caught = true;
True,src/test/org/apache/commons/cli/GnuParseTest.java,src/test/org/apache/commons/cli/GnuParseTest.java,142,catch (ParseException e)
True,src/test/org/apache/commons/cli/GnuParseTest.java,src/test/org/apache/commons/cli/GnuParseTest.java,144,fail( e.toString() );
True,src/test/org/apache/commons/cli/GnuParseTest.java,src/test/org/apache/commons/cli/GnuParseTest.java,147,"assertTrue( ""Confirm MissingArgumentException caught"", caught );"
True,src/test/org/apache/commons/cli/GnuParseTest.java,src/test/org/apache/commons/cli/GnuParseTest.java,150,public void testStop()
True,src/test/org/apache/commons/cli/GnuParseTest.java,src/test/org/apache/commons/cli/GnuParseTest.java,152,"String[] args = new String[] { ""-c"","
True,src/test/org/apache/commons/cli/GnuParseTest.java,src/test/org/apache/commons/cli/GnuParseTest.java,153,"""foober"","
True,src/test/org/apache/commons/cli/GnuParseTest.java,src/test/org/apache/commons/cli/GnuParseTest.java,154,"""-b"","
True,src/test/org/apache/commons/cli/GnuParseTest.java,src/test/org/apache/commons/cli/GnuParseTest.java,155,"""toast"" };"
True,src/test/org/apache/commons/cli/GnuParseTest.java,src/test/org/apache/commons/cli/GnuParseTest.java,157,try
True,src/test/org/apache/commons/cli/GnuParseTest.java,src/test/org/apache/commons/cli/GnuParseTest.java,159,"CommandLine cl = _parser.parse(_options, args, true);"
True,src/test/org/apache/commons/cli/GnuParseTest.java,src/test/org/apache/commons/cli/GnuParseTest.java,160,"assertTrue( ""Confirm -c is set"", cl.hasOption(""c"") );"
True,src/test/org/apache/commons/cli/GnuParseTest.java,src/test/org/apache/commons/cli/GnuParseTest.java,161,"assertTrue( ""Confirm  3 extra args: "" + cl.getArgList().size(), cl.getArgList().size() == 3);"
True,src/test/org/apache/commons/cli/GnuParseTest.java,src/test/org/apache/commons/cli/GnuParseTest.java,163,catch (ParseException e)
True,src/test/org/apache/commons/cli/GnuParseTest.java,src/test/org/apache/commons/cli/GnuParseTest.java,165,fail( e.toString() );
True,src/test/org/apache/commons/cli/GnuParseTest.java,src/test/org/apache/commons/cli/GnuParseTest.java,169,public void testMultiple()
True,src/test/org/apache/commons/cli/GnuParseTest.java,src/test/org/apache/commons/cli/GnuParseTest.java,171,"String[] args = new String[] { ""-c"","
True,src/test/org/apache/commons/cli/GnuParseTest.java,src/test/org/apache/commons/cli/GnuParseTest.java,172,"""foobar"","
True,src/test/org/apache/commons/cli/GnuParseTest.java,src/test/org/apache/commons/cli/GnuParseTest.java,173,"""-b"","
True,src/test/org/apache/commons/cli/GnuParseTest.java,src/test/org/apache/commons/cli/GnuParseTest.java,174,"""toast"" };"
True,src/test/org/apache/commons/cli/GnuParseTest.java,src/test/org/apache/commons/cli/GnuParseTest.java,176,try
True,src/test/org/apache/commons/cli/GnuParseTest.java,src/test/org/apache/commons/cli/GnuParseTest.java,178,"CommandLine cl = _parser.parse(_options, args, true);"
True,src/test/org/apache/commons/cli/GnuParseTest.java,src/test/org/apache/commons/cli/GnuParseTest.java,179,"assertTrue( ""Confirm -c is set"", cl.hasOption(""c"") );"
True,src/test/org/apache/commons/cli/GnuParseTest.java,src/test/org/apache/commons/cli/GnuParseTest.java,180,"assertTrue( ""Confirm  3 extra args: "" + cl.getArgList().size(), cl.getArgList().size() == 3);"
True,src/test/org/apache/commons/cli/GnuParseTest.java,src/test/org/apache/commons/cli/GnuParseTest.java,182,"cl = _parser.parse(_options, cl.getArgs() );"
True,src/test/org/apache/commons/cli/GnuParseTest.java,src/test/org/apache/commons/cli/GnuParseTest.java,184,"assertTrue( ""Confirm -c is not set"", ! cl.hasOption(""c"") );"
True,src/test/org/apache/commons/cli/GnuParseTest.java,src/test/org/apache/commons/cli/GnuParseTest.java,185,"assertTrue( ""Confirm -b is set"", cl.hasOption(""b"") );"
True,src/test/org/apache/commons/cli/GnuParseTest.java,src/test/org/apache/commons/cli/GnuParseTest.java,186,"assertTrue( ""Confirm arg of -b"", cl.getOptionValue(""b"").equals(""toast"") );"
True,src/test/org/apache/commons/cli/GnuParseTest.java,src/test/org/apache/commons/cli/GnuParseTest.java,187,"assertTrue( ""Confirm  1 extra arg: "" + cl.getArgList().size(), cl.getArgList().size() == 1);"
True,src/test/org/apache/commons/cli/GnuParseTest.java,src/test/org/apache/commons/cli/GnuParseTest.java,188,"assertTrue( ""Confirm  value of extra arg: "" + cl.getArgList().get(0), cl.getArgList().get(0).equals(""foobar"") );"
True,src/test/org/apache/commons/cli/GnuParseTest.java,src/test/org/apache/commons/cli/GnuParseTest.java,190,catch (ParseException e)
True,src/test/org/apache/commons/cli/GnuParseTest.java,src/test/org/apache/commons/cli/GnuParseTest.java,192,fail( e.toString() );
True,src/test/org/apache/commons/cli/GnuParseTest.java,src/test/org/apache/commons/cli/GnuParseTest.java,196,public void testMultipleWithLong()
True,src/test/org/apache/commons/cli/GnuParseTest.java,src/test/org/apache/commons/cli/GnuParseTest.java,198,"String[] args = new String[] { ""--copt"","
True,src/test/org/apache/commons/cli/GnuParseTest.java,src/test/org/apache/commons/cli/GnuParseTest.java,199,"""foobar"","
True,src/test/org/apache/commons/cli/GnuParseTest.java,src/test/org/apache/commons/cli/GnuParseTest.java,200,"""--bfile"", ""toast"" };"
True,src/test/org/apache/commons/cli/GnuParseTest.java,src/test/org/apache/commons/cli/GnuParseTest.java,202,try
True,src/test/org/apache/commons/cli/GnuParseTest.java,src/test/org/apache/commons/cli/GnuParseTest.java,204,"CommandLine cl = _parser.parse(_options,args,"
True,src/test/org/apache/commons/cli/GnuParseTest.java,src/test/org/apache/commons/cli/GnuParseTest.java,205,true);
True,src/test/org/apache/commons/cli/GnuParseTest.java,src/test/org/apache/commons/cli/GnuParseTest.java,206,"assertTrue( ""Confirm -c is set"", cl.hasOption(""c"") );"
True,src/test/org/apache/commons/cli/GnuParseTest.java,src/test/org/apache/commons/cli/GnuParseTest.java,207,"assertTrue( ""Confirm  3 extra args: "" + cl.getArgList().size(), cl.getArgList().size() == 3);"
True,src/test/org/apache/commons/cli/GnuParseTest.java,src/test/org/apache/commons/cli/GnuParseTest.java,209,"cl = _parser.parse(_options, cl.getArgs() );"
True,src/test/org/apache/commons/cli/GnuParseTest.java,src/test/org/apache/commons/cli/GnuParseTest.java,211,"assertTrue( ""Confirm -c is not set"", ! cl.hasOption(""c"") );"
True,src/test/org/apache/commons/cli/GnuParseTest.java,src/test/org/apache/commons/cli/GnuParseTest.java,212,"assertTrue( ""Confirm -b is set"", cl.hasOption(""b"") );"
True,src/test/org/apache/commons/cli/GnuParseTest.java,src/test/org/apache/commons/cli/GnuParseTest.java,213,"assertTrue( ""Confirm arg of -b"", cl.getOptionValue(""b"").equals(""toast"") );"
True,src/test/org/apache/commons/cli/GnuParseTest.java,src/test/org/apache/commons/cli/GnuParseTest.java,214,"assertTrue( ""Confirm  1 extra arg: "" + cl.getArgList().size(), cl.getArgList().size() == 1);"
True,src/test/org/apache/commons/cli/GnuParseTest.java,src/test/org/apache/commons/cli/GnuParseTest.java,215,"assertTrue( ""Confirm  value of extra arg: "" + cl.getArgList().get(0), cl.getArgList().get(0).equals(""foobar"") );"
True,src/test/org/apache/commons/cli/GnuParseTest.java,src/test/org/apache/commons/cli/GnuParseTest.java,217,catch (ParseException e)
True,src/test/org/apache/commons/cli/GnuParseTest.java,src/test/org/apache/commons/cli/GnuParseTest.java,219,fail( e.toString() );
True,src/test/org/apache/commons/cli/GnuParseTest.java,src/test/org/apache/commons/cli/GnuParseTest.java,223,public void testDoubleDash()
True,src/test/org/apache/commons/cli/GnuParseTest.java,src/test/org/apache/commons/cli/GnuParseTest.java,225,"String[] args = new String[] { ""--copt"","
True,src/test/org/apache/commons/cli/GnuParseTest.java,src/test/org/apache/commons/cli/GnuParseTest.java,227,"""-b"", ""toast"" };"
True,src/test/org/apache/commons/cli/GnuParseTest.java,src/test/org/apache/commons/cli/GnuParseTest.java,229,try
True,src/test/org/apache/commons/cli/GnuParseTest.java,src/test/org/apache/commons/cli/GnuParseTest.java,231,"CommandLine cl = _parser.parse(_options, args);"
True,src/test/org/apache/commons/cli/GnuParseTest.java,src/test/org/apache/commons/cli/GnuParseTest.java,233,"assertTrue( ""Confirm -c is set"", cl.hasOption(""c"") );"
True,src/test/org/apache/commons/cli/GnuParseTest.java,src/test/org/apache/commons/cli/GnuParseTest.java,234,"assertTrue( ""Confirm -b is not set"", ! cl.hasOption(""b"") );"
True,src/test/org/apache/commons/cli/GnuParseTest.java,src/test/org/apache/commons/cli/GnuParseTest.java,235,"assertTrue( ""Confirm 2 extra args: "" + cl.getArgList().size(), cl.getArgList().size() == 2);"
True,src/test/org/apache/commons/cli/GnuParseTest.java,src/test/org/apache/commons/cli/GnuParseTest.java,238,catch (ParseException e)
True,src/test/org/apache/commons/cli/GnuParseTest.java,src/test/org/apache/commons/cli/GnuParseTest.java,240,fail( e.toString() );
True,src/test/org/apache/commons/cli/GnuParseTest.java,src/test/org/apache/commons/cli/GnuParseTest.java,244,public void testSingleDash()
True,src/test/org/apache/commons/cli/GnuParseTest.java,src/test/org/apache/commons/cli/GnuParseTest.java,246,"String[] args = new String[] { ""--copt"","
True,src/test/org/apache/commons/cli/GnuParseTest.java,src/test/org/apache/commons/cli/GnuParseTest.java,247,"""-b"", ""-"","
True,src/test/org/apache/commons/cli/GnuParseTest.java,src/test/org/apache/commons/cli/GnuParseTest.java,248,"""-a"","
True,src/test/org/apache/commons/cli/GnuParseTest.java,src/test/org/apache/commons/cli/GnuParseTest.java,251,try
True,src/test/org/apache/commons/cli/GnuParseTest.java,src/test/org/apache/commons/cli/GnuParseTest.java,253,"CommandLine cl = _parser.parse(_options, args);"
True,src/test/org/apache/commons/cli/GnuParseTest.java,src/test/org/apache/commons/cli/GnuParseTest.java,255,"assertTrue( ""Confirm -a is set"", cl.hasOption(""a"") );"
True,src/test/org/apache/commons/cli/GnuParseTest.java,src/test/org/apache/commons/cli/GnuParseTest.java,256,"assertTrue( ""Confirm -b is set"", cl.hasOption(""b"") );"
True,src/test/org/apache/commons/cli/GnuParseTest.java,src/test/org/apache/commons/cli/GnuParseTest.java,257,"assertTrue( ""Confirm arg of -b"", cl.getOptionValue(""b"").equals(""-"") );"
True,src/test/org/apache/commons/cli/GnuParseTest.java,src/test/org/apache/commons/cli/GnuParseTest.java,258,"assertTrue( ""Confirm 1 extra arg: "" + cl.getArgList().size(), cl.getArgList().size() == 1);"
True,src/test/org/apache/commons/cli/GnuParseTest.java,src/test/org/apache/commons/cli/GnuParseTest.java,259,"assertTrue( ""Confirm value of extra arg: "" + cl.getArgList().get(0), cl.getArgList().get(0).equals(""-"") );"
True,src/test/org/apache/commons/cli/GnuParseTest.java,src/test/org/apache/commons/cli/GnuParseTest.java,261,catch (ParseException e)
True,src/test/org/apache/commons/cli/GnuParseTest.java,src/test/org/apache/commons/cli/GnuParseTest.java,263,fail( e.toString() );
True,src/test/org/apache/commons/cli/OptionGroupTest.java,src/test/org/apache/commons/cli/OptionGroupTest.java,25,private CommandLineParser parser = CommandLineParserFactory.newParser();
False,src/test/org/apache/commons/cli/OptionGroupTest.java,src/test/org/apache/commons/cli/OptionGroupTest.java,65,ommandLine cl = _options.parse(args);
True,src/test/org/apache/commons/cli/OptionGroupTest.java,src/test/org/apache/commons/cli/OptionGroupTest.java,67,"CommandLine cl = parser.parse( _options, args);"
False,src/test/org/apache/commons/cli/OptionGroupTest.java,src/test/org/apache/commons/cli/OptionGroupTest.java,86,ommandLine cl = _options.parse(args);
True,src/test/org/apache/commons/cli/OptionGroupTest.java,src/test/org/apache/commons/cli/OptionGroupTest.java,88,"CommandLine cl = parser.parse( _options, args);"
False,src/test/org/apache/commons/cli/OptionGroupTest.java,src/test/org/apache/commons/cli/OptionGroupTest.java,107,ommandLine cl = _options.parse(args);
True,src/test/org/apache/commons/cli/OptionGroupTest.java,src/test/org/apache/commons/cli/OptionGroupTest.java,109,"CommandLine cl = parser.parse( _options, args);"
False,src/test/org/apache/commons/cli/OptionGroupTest.java,src/test/org/apache/commons/cli/OptionGroupTest.java,128,ommandLine cl = _options.parse(args);
True,src/test/org/apache/commons/cli/OptionGroupTest.java,src/test/org/apache/commons/cli/OptionGroupTest.java,130,"CommandLine cl = parser.parse( _options, args);"
False,src/test/org/apache/commons/cli/OptionGroupTest.java,src/test/org/apache/commons/cli/OptionGroupTest.java,149,ommandLine cl = _options.parse(args);
True,src/test/org/apache/commons/cli/OptionGroupTest.java,src/test/org/apache/commons/cli/OptionGroupTest.java,151,"CommandLine cl = parser.parse( _options, args);"
False,src/test/org/apache/commons/cli/OptionGroupTest.java,src/test/org/apache/commons/cli/OptionGroupTest.java,170,ommandLine cl = _options.parse(args);
True,src/test/org/apache/commons/cli/OptionGroupTest.java,src/test/org/apache/commons/cli/OptionGroupTest.java,172,"CommandLine cl = parser.parse( _options, args);"
False,src/test/org/apache/commons/cli/OptionGroupTest.java,src/test/org/apache/commons/cli/OptionGroupTest.java,191,ommandLine cl = _options.parse(args);
True,src/test/org/apache/commons/cli/OptionGroupTest.java,src/test/org/apache/commons/cli/OptionGroupTest.java,193,"CommandLine cl = parser.parse( _options, args);"
False,src/test/org/apache/commons/cli/OptionGroupTest.java,src/test/org/apache/commons/cli/OptionGroupTest.java,209,ommandLine cl = _options.parse(args);
True,src/test/org/apache/commons/cli/OptionGroupTest.java,src/test/org/apache/commons/cli/OptionGroupTest.java,211,"CommandLine cl = parser.parse( _options, args);"
False,src/test/org/apache/commons/cli/OptionGroupTest.java,src/test/org/apache/commons/cli/OptionGroupTest.java,227,ommandLine cl = _options.parse(args);
True,src/test/org/apache/commons/cli/OptionGroupTest.java,src/test/org/apache/commons/cli/OptionGroupTest.java,229,"CommandLine cl = parser.parse( _options, args);"
True,src/test/org/apache/commons/cli/ParseRequiredTest.java,src/test/org/apache/commons/cli/ParseRequiredTest.java,25,private CommandLineParser parser = CommandLineParserFactory.newParser();
False,src/test/org/apache/commons/cli/ParseRequiredTest.java,src/test/org/apache/commons/cli/ParseRequiredTest.java,60,ommandLine cl = _options.parse(args);
True,src/test/org/apache/commons/cli/ParseRequiredTest.java,src/test/org/apache/commons/cli/ParseRequiredTest.java,61,"CommandLine cl = parser.parse(_options,args);"
False,src/test/org/apache/commons/cli/ParseRequiredTest.java,src/test/org/apache/commons/cli/ParseRequiredTest.java,79,ommandLine cl = _options.parse(args);
True,src/test/org/apache/commons/cli/ParseRequiredTest.java,src/test/org/apache/commons/cli/ParseRequiredTest.java,80,"CommandLine cl = parser.parse(_options,args);"
False,src/test/org/apache/commons/cli/ParseRequiredTest.java,src/test/org/apache/commons/cli/ParseRequiredTest.java,98,ommandLine cl = _options.parse(args);
True,src/test/org/apache/commons/cli/ParseRequiredTest.java,src/test/org/apache/commons/cli/ParseRequiredTest.java,99,"CommandLine cl = parser.parse(_options,args);"
True,src/test/org/apache/commons/cli/ParseTest.java,src/test/org/apache/commons/cli/ParseTest.java,21,private CommandLineParser _parser = null;
True,src/test/org/apache/commons/cli/ParseTest.java,src/test/org/apache/commons/cli/ParseTest.java,34,"System.setProperty( ""org.apache.commons.cli.parser"","
True,src/test/org/apache/commons/cli/ParseTest.java,src/test/org/apache/commons/cli/ParseTest.java,35,"""org.apache.commons.cli.PosixParser"");"
False,src/test/org/apache/commons/cli/ParseTest.java,src/test/org/apache/commons/cli/ParseTest.java,47,ry
False,src/test/org/apache/commons/cli/ParseTest.java,src/test/org/apache/commons/cli/ParseTest.java,49,options
False,src/test/org/apache/commons/cli/ParseTest.java,src/test/org/apache/commons/cli/ParseTest.java,50,"addOption('a',"
False,src/test/org/apache/commons/cli/ParseTest.java,src/test/org/apache/commons/cli/ParseTest.java,51,"enable-a"","
False,src/test/org/apache/commons/cli/ParseTest.java,src/test/org/apache/commons/cli/ParseTest.java,52,"alse,"
False,src/test/org/apache/commons/cli/ParseTest.java,src/test/org/apache/commons/cli/ParseTest.java,53,"turn [a] on or off"")"
False,src/test/org/apache/commons/cli/ParseTest.java,src/test/org/apache/commons/cli/ParseTest.java,54,"addOption('b',"
False,src/test/org/apache/commons/cli/ParseTest.java,src/test/org/apache/commons/cli/ParseTest.java,55,"bfile"","
False,src/test/org/apache/commons/cli/ParseTest.java,src/test/org/apache/commons/cli/ParseTest.java,56,"rue,"
False,src/test/org/apache/commons/cli/ParseTest.java,src/test/org/apache/commons/cli/ParseTest.java,57,"set the value of [b]"")"
False,src/test/org/apache/commons/cli/ParseTest.java,src/test/org/apache/commons/cli/ParseTest.java,58,"addOption('c',"
False,src/test/org/apache/commons/cli/ParseTest.java,src/test/org/apache/commons/cli/ParseTest.java,59,"copt"","
False,src/test/org/apache/commons/cli/ParseTest.java,src/test/org/apache/commons/cli/ParseTest.java,60,"alse,"
False,src/test/org/apache/commons/cli/ParseTest.java,src/test/org/apache/commons/cli/ParseTest.java,61,"turn [c] on or off"");"
False,src/test/org/apache/commons/cli/ParseTest.java,src/test/org/apache/commons/cli/ParseTest.java,64,atch (CLIException e)
False,src/test/org/apache/commons/cli/ParseTest.java,src/test/org/apache/commons/cli/ParseTest.java,66,.printStackTrace();
True,src/test/org/apache/commons/cli/ParseTest.java,src/test/org/apache/commons/cli/ParseTest.java,51,_parser = CommandLineParserFactory.newParser();
False,src/test/org/apache/commons/cli/ParseTest.java,src/test/org/apache/commons/cli/ParseTest.java,84,ommandLine cl = _options.parse(args);
True,src/test/org/apache/commons/cli/ParseTest.java,src/test/org/apache/commons/cli/ParseTest.java,67,"CommandLine cl = _parser.parse(_options, args);"
False,src/test/org/apache/commons/cli/ParseTest.java,src/test/org/apache/commons/cli/ParseTest.java,105,ommandLine cl = _options.parse(args);
True,src/test/org/apache/commons/cli/ParseTest.java,src/test/org/apache/commons/cli/ParseTest.java,88,"CommandLine cl = _parser.parse(_options, args);"
False,src/test/org/apache/commons/cli/ParseTest.java,src/test/org/apache/commons/cli/ParseTest.java,125,ommandLine cl = _options.parse(args);
True,src/test/org/apache/commons/cli/ParseTest.java,src/test/org/apache/commons/cli/ParseTest.java,108,"CommandLine cl = _parser.parse(_options, args);"
False,src/test/org/apache/commons/cli/ParseTest.java,src/test/org/apache/commons/cli/ParseTest.java,148,ommandLine cl = _options.parse(args);
True,src/test/org/apache/commons/cli/ParseTest.java,src/test/org/apache/commons/cli/ParseTest.java,131,"CommandLine cl = _parser.parse(_options, args);"
False,src/test/org/apache/commons/cli/ParseTest.java,src/test/org/apache/commons/cli/ParseTest.java,175,ommandLine cl = _options.parse(args);
True,src/test/org/apache/commons/cli/ParseTest.java,src/test/org/apache/commons/cli/ParseTest.java,158,"CommandLine cl = _parser.parse(_options, args);"
False,src/test/org/apache/commons/cli/ParseTest.java,src/test/org/apache/commons/cli/ParseTest.java,197,"ommandLine cl = _options.parse(args,"
False,src/test/org/apache/commons/cli/ParseTest.java,src/test/org/apache/commons/cli/ParseTest.java,198,rue);
True,src/test/org/apache/commons/cli/ParseTest.java,src/test/org/apache/commons/cli/ParseTest.java,180,"CommandLine cl = _parser.parse(_options, args, true);"
False,src/test/org/apache/commons/cli/ParseTest.java,src/test/org/apache/commons/cli/ParseTest.java,216,"ommandLine cl = _options.parse(args,"
False,src/test/org/apache/commons/cli/ParseTest.java,src/test/org/apache/commons/cli/ParseTest.java,217,rue);
True,src/test/org/apache/commons/cli/ParseTest.java,src/test/org/apache/commons/cli/ParseTest.java,198,"CommandLine cl = _parser.parse(_options, args, true);"
False,src/test/org/apache/commons/cli/ParseTest.java,src/test/org/apache/commons/cli/ParseTest.java,221,l = _options.parse( cl.getArgList() );
True,src/test/org/apache/commons/cli/ParseTest.java,src/test/org/apache/commons/cli/ParseTest.java,202,"cl = _parser.parse(_options, cl.getArgs() );"
False,src/test/org/apache/commons/cli/ParseTest.java,src/test/org/apache/commons/cli/ParseTest.java,243,"ommandLine cl = _options.parse(args,"
True,src/test/org/apache/commons/cli/ParseTest.java,src/test/org/apache/commons/cli/ParseTest.java,224,"CommandLine cl = _parser.parse(_options,args,"
False,src/test/org/apache/commons/cli/ParseTest.java,src/test/org/apache/commons/cli/ParseTest.java,248,l = _options.parse( cl.getArgList() );
True,src/test/org/apache/commons/cli/ParseTest.java,src/test/org/apache/commons/cli/ParseTest.java,229,"cl = _parser.parse(_options, cl.getArgs() );"
False,src/test/org/apache/commons/cli/ParseTest.java,src/test/org/apache/commons/cli/ParseTest.java,270,ommandLine cl = _options.parse(args);
True,src/test/org/apache/commons/cli/ParseTest.java,src/test/org/apache/commons/cli/ParseTest.java,251,"CommandLine cl = _parser.parse(_options, args);"
False,src/test/org/apache/commons/cli/ParseTest.java,src/test/org/apache/commons/cli/ParseTest.java,292,ommandLine cl = _options.parse(args);
True,src/test/org/apache/commons/cli/ParseTest.java,src/test/org/apache/commons/cli/ParseTest.java,273,"CommandLine cl = _parser.parse(_options, args);"
False,src/test/org/apache/commons/cli/PatternOptionBuilderTest.java,src/test/org/apache/commons/cli/PatternOptionBuilderTest.java,48,ommandLine line = options.parse(args);
True,src/test/org/apache/commons/cli/PatternOptionBuilderTest.java,src/test/org/apache/commons/cli/PatternOptionBuilderTest.java,48,CommandLineParser parser = CommandLineParserFactory.newParser();
True,src/test/org/apache/commons/cli/PatternOptionBuilderTest.java,src/test/org/apache/commons/cli/PatternOptionBuilderTest.java,49,"CommandLine line = parser.parse(options,args);"
False,src/test/org/apache/commons/cli/ValueTest.java,src/test/org/apache/commons/cli/ValueTest.java,61,ry
False,src/test/org/apache/commons/cli/ValueTest.java,src/test/org/apache/commons/cli/ValueTest.java,63,"pts.addOption('a',"
False,src/test/org/apache/commons/cli/ValueTest.java,src/test/org/apache/commons/cli/ValueTest.java,64,"alse,"
False,src/test/org/apache/commons/cli/ValueTest.java,src/test/org/apache/commons/cli/ValueTest.java,65,"toggle -a"");"
False,src/test/org/apache/commons/cli/ValueTest.java,src/test/org/apache/commons/cli/ValueTest.java,67,"pts.addOption('b',"
False,src/test/org/apache/commons/cli/ValueTest.java,src/test/org/apache/commons/cli/ValueTest.java,68,"rue,"
False,src/test/org/apache/commons/cli/ValueTest.java,src/test/org/apache/commons/cli/ValueTest.java,69,"set -b"");"
False,src/test/org/apache/commons/cli/ValueTest.java,src/test/org/apache/commons/cli/ValueTest.java,71,"pts.addOption('c',"
False,src/test/org/apache/commons/cli/ValueTest.java,src/test/org/apache/commons/cli/ValueTest.java,72,"c"","
False,src/test/org/apache/commons/cli/ValueTest.java,src/test/org/apache/commons/cli/ValueTest.java,73,"alse,"
False,src/test/org/apache/commons/cli/ValueTest.java,src/test/org/apache/commons/cli/ValueTest.java,74,"toggle -c"");"
False,src/test/org/apache/commons/cli/ValueTest.java,src/test/org/apache/commons/cli/ValueTest.java,76,"pts.addOption('d',"
False,src/test/org/apache/commons/cli/ValueTest.java,src/test/org/apache/commons/cli/ValueTest.java,77,"d"","
False,src/test/org/apache/commons/cli/ValueTest.java,src/test/org/apache/commons/cli/ValueTest.java,78,"rue,"
False,src/test/org/apache/commons/cli/ValueTest.java,src/test/org/apache/commons/cli/ValueTest.java,79,"set -d"");"
False,src/test/org/apache/commons/cli/ValueTest.java,src/test/org/apache/commons/cli/ValueTest.java,81,atch (DuplicateOptionException e)
False,src/test/org/apache/commons/cli/ValueTest.java,src/test/org/apache/commons/cli/ValueTest.java,83,"ail(""Cannot setUp() Options: "" + e.toString());"
False,src/test/org/apache/commons/cli/ValueTest.java,src/test/org/apache/commons/cli/ValueTest.java,94,cl = opts.parse(args);
True,src/test/org/apache/commons/cli/ValueTest.java,src/test/org/apache/commons/cli/ValueTest.java,67,CommandLineParser parser = CommandLineParserFactory.newParser();
True,src/test/org/apache/commons/cli/ValueTest.java,src/test/org/apache/commons/cli/ValueTest.java,68,"_cl = parser.parse(opts,args);"
True,src/test/org/apache/commons/cli/ValuesTest.java,src/test/org/apache/commons/cli/ValuesTest.java,80,CommandLineParser parser = CommandLineParserFactory.newParser();
False,src/test/org/apache/commons/cli/ValuesTest.java,src/test/org/apache/commons/cli/ValuesTest.java,82,cl = opts.parse(args);
True,src/test/org/apache/commons/cli/ValuesTest.java,src/test/org/apache/commons/cli/ValuesTest.java,84,"_cl = parser.parse(opts,args);"
